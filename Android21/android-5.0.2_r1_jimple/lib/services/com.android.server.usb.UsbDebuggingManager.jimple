public class com.android.server.usb.UsbDebuggingManager extends java.lang.Object implements java.lang.Runnable
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private final java.lang.String ADBD_SOCKET;
    private final java.lang.String ADB_DIRECTORY;
    private final java.lang.String ADB_KEYS_FILE;
    private final int BUFFER_SIZE;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private java.lang.Thread mThread;
    private boolean mAdbEnabled;
    private java.lang.String mFingerprints;
    private android.net.LocalSocket mSocket;
    private java.io.OutputStream mOutputStream;

    public void <init>(android.content.Context)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.content.Context r1;
        com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler $r2;
        com.android.server.FgThread $r3;
        android.os.Looper $r4;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADBD_SOCKET> = "adbd";

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADB_DIRECTORY> = "misc/adb";

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String ADB_KEYS_FILE> = "adb_keys";

        r0.<com.android.server.usb.UsbDebuggingManager: int BUFFER_SIZE> = 4096;

        r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled> = 0;

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = null;

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = null;

        $r2 = new com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler;

        $r3 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r4 = virtualinvoke $r3.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r2.<com.android.server.usb.UsbDebuggingManager$UsbDebuggingHandler: void <init>(com.android.server.usb.UsbDebuggingManager,android.os.Looper)>(r0, $r4);

        r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler> = $r2;

        r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext> = r1;

        return;
    }

    private void listenToSocket() throws java.io.IOException
    {
        com.android.server.usb.UsbDebuggingManager r0;
        byte[] r1, $r17, $r21;
        android.net.LocalSocketAddress r2, $r6;
        int i0;
        java.lang.String r3, $r14, $r18, $r19, $r25;
        android.os.Message r4;
        java.lang.Throwable r5, $r26;
        android.net.LocalSocketAddress$Namespace $r7;
        android.net.LocalSocket $r8, $r9, $r10, $r12;
        java.io.OutputStream $r11;
        byte $b1, $b2;
        java.lang.StringBuilder $r13, $r15, $r16, $r20, $r22, $r24;
        android.os.Handler $r23, $r27;
        java.io.InputStream r28;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label1:
        r1 = newarray (byte)[4096];

        $r6 = new android.net.LocalSocketAddress;

        $r7 = <android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace RESERVED>;

        specialinvoke $r6.<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>("adbd", $r7);

        r2 = $r6;

        $r8 = new android.net.LocalSocket;

        specialinvoke $r8.<android.net.LocalSocket: void <init>()>();

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = $r8;

        $r9 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        virtualinvoke $r9.<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>(r2);

        $r10 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        $r11 = virtualinvoke $r10.<android.net.LocalSocket: java.io.OutputStream getOutputStream()>();

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = $r11;

        $r12 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        r28 = virtualinvoke $r12.<android.net.LocalSocket: java.io.InputStream getInputStream()>();

     label2:
        i0 = virtualinvoke r28.<java.io.InputStream: int read(byte[])>(r1);

        if i0 >= 0 goto label3;

        goto label6;

     label3:
        $b1 = r1[0];

        if $b1 != 80 goto label4;

        $b2 = r1[1];

        if $b2 != 75 goto label4;

        $r19 = new java.lang.String;

        $r21 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, 2, i0);

        specialinvoke $r19.<java.lang.String: void <init>(byte[])>($r21);

        r3 = $r19;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received public key: ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r25);

        $r23 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        r4 = virtualinvoke $r23.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        r4.<android.os.Message: java.lang.Object obj> = r3;

        $r27 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r27.<android.os.Handler: boolean sendMessage(android.os.Message)>(r4);

        goto label5;

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong message: ");

        $r14 = new java.lang.String;

        $r17 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r1, 0, 2);

        specialinvoke $r14.<java.lang.String: void <init>(byte[])>($r17);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r18);

        goto label6;

     label5:
        goto label2;

     label6:
        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        goto label9;

     label7:
        $r26 := @caughtexception;

        r5 = $r26;

     label8:
        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void run()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean $z0;
        java.lang.Exception $r2;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label1:
        $z0 = r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled>;

        if $z0 == 0 goto label5;

     label2:
        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void listenToSocket()>();

     label3:
        goto label1;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.SystemClock: void sleep(long)>(1000L);

        goto label1;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void closeSocket()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.IOException r1, $r4, $r9, r14;
        java.io.OutputStream $r2;
        android.net.LocalSocket $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12;
        java.lang.String $r8, $r13;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

     label1:
        $r2 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed closing output stream: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r8);

     label4:
        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket>;

        virtualinvoke $r3.<android.net.LocalSocket: void close()>();

     label5:
        goto label7;

     label6:
        $r9 := @caughtexception;

        r14 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed closing socket: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r13);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private void sendResponse(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;
        java.io.IOException r2, $r6;
        java.io.OutputStream $r3, $r4;
        byte[] $r5;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        if $r3 == null goto label4;

     label1:
        $r4 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDebuggingManager", "Failed to write response:", r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.String getFingerprints(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, r2, $r9, $r11, $r17;
        java.lang.StringBuilder r3, $r7, $r16, $r18, $r19;
        java.security.MessageDigest r4;
        java.lang.Exception r5, $r14;
        byte[] r6, $r10, r20;
        int i0, $i1, $i9, $i10;
        java.lang.String[] $r8;
        byte $b2, $b3, $b4, $b6, $b7;
        char $c5, $c8;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        r2 = "0123456789ABCDEF";

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

     label1:
        r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r5 = $r14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error getting digester: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r17 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r17);

        return "";

     label4:
        $r8 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r9 = $r8[0];

        r20 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>();

        $r10 = staticinvoke <android.util.Base64: byte[] decode(byte[],int)>(r20, 0);

        r6 = virtualinvoke r4.<java.security.MessageDigest: byte[] digest(byte[])>($r10);

        i0 = 0;

     label5:
        $i1 = lengthof r6;

        if i0 >= $i1 goto label7;

        $b2 = r6[i0];

        $b4 = $b2 >> 4;

        $b3 = $b4 & 15;

        $c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($b3);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $b7 = r6[i0];

        $b6 = $b7 & 15;

        $c8 = virtualinvoke r2.<java.lang.String: char charAt(int)>($b6);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        $i10 = lengthof r6;

        $i9 = $i10 - 1;

        if i0 >= $i9 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void startConfirmation(java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, r2, r3, $r10;
        android.content.ComponentName r4;
        android.content.res.Resources $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r3 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039425);

        r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r3);

        $z0 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: boolean startConfirmationActivity(android.content.ComponentName,java.lang.String,java.lang.String)>(r4, r1, r2);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: boolean startConfirmationService(android.content.ComponentName,java.lang.String,java.lang.String)>(r4, r1, r2);

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start customAdbPublicKeyConfirmationComponent ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as an Activity or a Service");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r10);

        return;
    }

    private boolean startConfirmationActivity(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r15;
        android.content.pm.PackageManager r4;
        android.content.Intent r5;
        android.content.ActivityNotFoundException r6, $r11;
        android.content.Context $r7, $r10;
        android.content.pm.ResolveInfo $r9;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r7 = r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext>;

        r4 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r5 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: android.content.Intent createConfirmationIntent(android.content.ComponentName,java.lang.String,java.lang.String)>(r1, r2, r3);

        virtualinvoke r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r9 = virtualinvoke r4.<android.content.pm.PackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>(r5, 65536);

        if $r9 == null goto label4;

     label1:
        $r10 = r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void startActivity(android.content.Intent)>(r5);

     label2:
        return 1;

     label3:
        $r11 := @caughtexception;

        r6 = $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start adb whitelist activity: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDebuggingManager", $r15, r6);

     label4:
        return 0;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }

    private boolean startConfirmationService(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.content.ComponentName r1, $r7;
        java.lang.String r2, r3, $r12;
        android.content.Intent r4;
        java.lang.SecurityException r5, $r8;
        android.content.Context $r6;
        java.lang.StringBuilder $r9, $r10, $r11;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: android.content.Intent createConfirmationIntent(android.content.ComponentName,java.lang.String,java.lang.String)>(r1, r2, r3);

     label1:
        $r6 = r0.<com.android.server.usb.UsbDebuggingManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ComponentName startService(android.content.Intent)>(r4);

        if $r7 == null goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r5 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to start adb whitelist service: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("UsbDebuggingManager", $r12, r5);

     label5:
        return 0;

        catch java.lang.SecurityException from label1 to label2 with label4;
    }

    private android.content.Intent createConfirmationIntent(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r6, $r7;
        android.content.Intent r4, $r5;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>()>();

        r4 = $r5;

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke r4.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r6, $r7);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("key", r2);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("fingerprints", r3);

        return r4;
    }

    private java.io.File getUserKeyFile()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.File r1, r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "misc/adb");

        r2 = $r3;

        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", "ADB data directory does not exist");

        return null;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "adb_keys");

        return $r4;
    }

    private void writeKey(java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, $r6, $r11;
        java.io.File r2;
        java.io.FileOutputStream r3, $r4;
        boolean $z0;
        byte[] $r5;
        java.io.IOException $r7, r12;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.io.File getUserKeyFile()>();

        if r2 != null goto label3;

     label2:
        return;

     label3:
        $z0 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label4;

        virtualinvoke r2.<java.io.File: boolean createNewFile()>();

        $r6 = virtualinvoke r2.<java.io.File: java.lang.String toString()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r6, 416, -1, -1);

     label4:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r2, 1);

        r3 = $r4;

        $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r3.<java.io.FileOutputStream: void write(byte[])>($r5);

        virtualinvoke r3.<java.io.FileOutputStream: void write(int)>(10);

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r7 := @caughtexception;

        r12 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing key:");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("UsbDebuggingManager", $r11);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label5 with label6;
    }

    private void deleteKeyFile()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.File r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.io.File getUserKeyFile()>();

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label1:
        return;
    }

    public void setAdbEnabled(boolean)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;
        android.os.Handler $r1;
        byte $b0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 2;

     label2:
        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>($b0);

        return;
    }

    public void allowUsbDebugging(boolean, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;
        java.lang.String r1;
        android.os.Message r2;
        android.os.Handler $r3, $r4;
        byte $b0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        r2 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        r2.<android.os.Message: int arg1> = $b0;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r4 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    public void denyUsbDebugging()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(4);

        return;
    }

    public void clearUsbDebuggingKeys()
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(6);

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.io.IOException r3, $r18, $r24, r28;
        java.lang.StringBuilder $r4, $r5, $r7, $r9, $r10, $r12, $r19, $r20, $r22, $r23, $r25, $r26;
        java.io.OutputStream $r6;
        java.lang.String $r8, $r11, $r13, $r15, $r16, $r21, $r27;
        java.io.File $r14, $r17;
        boolean $z0;

        r0 := @this: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("  USB Debugging State:");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Connected to adbd: ");

        $r6 = r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream>;

        if $r6 == null goto label01;

        $z0 = 1;

        goto label02;

     label01:
        $z0 = 0;

     label02:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    Last key received: ");

        $r11 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    User keys:");

     label03:
        $r14 = new java.io.File;

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>("/data/misc/adb/adb_keys");

        $r15 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r14, 0, null);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r15);

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

        r3 = $r18;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException: ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r21);

     label06:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("    System keys:");

     label07:
        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("/adb_keys");

        $r16 = staticinvoke <android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>($r17, 0, null);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r16);

     label08:
        goto label10;

     label09:
        $r24 := @caughtexception;

        r28 = $r24;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException: ");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

     label10:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    static boolean access$000(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $z0 = r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled>;

        return $z0;
    }

    static boolean access$002(com.android.server.usb.UsbDebuggingManager, boolean)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        boolean z0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        z0 := @parameter1: boolean;

        r0.<com.android.server.usb.UsbDebuggingManager: boolean mAdbEnabled> = z0;

        return z0;
    }

    static java.lang.Thread access$102(com.android.server.usb.UsbDebuggingManager, java.lang.Thread)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.Thread r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.Thread;

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.Thread mThread> = r1;

        return r1;
    }

    static java.lang.Thread access$100(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.Thread $r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.Thread mThread>;

        return $r1;
    }

    static void access$200(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void closeSocket()>();

        return;
    }

    static java.io.OutputStream access$302(com.android.server.usb.UsbDebuggingManager, java.io.OutputStream)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.io.OutputStream r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.io.OutputStream;

        r0.<com.android.server.usb.UsbDebuggingManager: java.io.OutputStream mOutputStream> = r1;

        return r1;
    }

    static android.net.LocalSocket access$402(com.android.server.usb.UsbDebuggingManager, android.net.LocalSocket)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        android.net.LocalSocket r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: android.net.LocalSocket;

        r0.<com.android.server.usb.UsbDebuggingManager: android.net.LocalSocket mSocket> = r1;

        return r1;
    }

    static java.lang.String access$500(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String getFingerprints(java.lang.String)>(r1);

        return $r2;
    }

    static java.lang.String access$600(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        $r1 = r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints>;

        return $r1;
    }

    static void access$700(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void writeKey(java.lang.String)>(r1);

        return;
    }

    static void access$800(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void sendResponse(java.lang.String)>(r1);

        return;
    }

    static java.lang.String access$602(com.android.server.usb.UsbDebuggingManager, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.usb.UsbDebuggingManager: java.lang.String mFingerprints> = r1;

        return r1;
    }

    static void access$900(com.android.server.usb.UsbDebuggingManager, java.lang.String, java.lang.String)
    {
        com.android.server.usb.UsbDebuggingManager r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void startConfirmation(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1000(com.android.server.usb.UsbDebuggingManager)
    {
        com.android.server.usb.UsbDebuggingManager r0;

        r0 := @parameter0: com.android.server.usb.UsbDebuggingManager;

        specialinvoke r0.<com.android.server.usb.UsbDebuggingManager: void deleteKeyFile()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.usb.UsbDebuggingManager: boolean DEBUG> = 0;

        <com.android.server.usb.UsbDebuggingManager: java.lang.String TAG> = "UsbDebuggingManager";

        return;
    }
}
