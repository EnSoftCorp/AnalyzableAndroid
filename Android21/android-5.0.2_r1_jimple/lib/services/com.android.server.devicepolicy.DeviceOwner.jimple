public class com.android.server.devicepolicy.DeviceOwner extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String DEVICE_OWNER_XML;
    private static final java.lang.String TAG_DEVICE_OWNER;
    private static final java.lang.String TAG_PROFILE_OWNER;
    private static final java.lang.String ATTR_NAME;
    private static final java.lang.String ATTR_PACKAGE;
    private static final java.lang.String ATTR_COMPONENT_NAME;
    private static final java.lang.String ATTR_USERID;
    private android.util.AtomicFile fileForWriting;
    private java.io.InputStream mInputStreamForTest;
    private java.io.OutputStream mOutputStreamForTest;
    private com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner;
    private final java.util.HashMap mProfileOwners;

    private void <init>()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.util.HashMap $r1;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners> = $r1;

        return;
    }

    void <init>(java.io.InputStream, java.io.OutputStream)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.InputStream r1;
        java.io.OutputStream r2;
        java.util.HashMap $r3;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners> = $r3;

        r0.<com.android.server.devicepolicy.DeviceOwner: java.io.InputStream mInputStreamForTest> = r1;

        r0.<com.android.server.devicepolicy.DeviceOwner: java.io.OutputStream mOutputStreamForTest> = r2;

        return;
    }

    static com.android.server.devicepolicy.DeviceOwner load()
    {
        com.android.server.devicepolicy.DeviceOwner r0, $r1;
        java.io.File $r2, $r3;
        boolean $z0;

        $r1 = new com.android.server.devicepolicy.DeviceOwner;

        specialinvoke $r1.<com.android.server.devicepolicy.DeviceOwner: void <init>()>();

        r0 = $r1;

        $r2 = new java.io.File;

        $r3 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "device_owner.xml");

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.devicepolicy.DeviceOwner: void readOwnerFile()>();

        return r0;

     label1:
        return null;
    }

    static com.android.server.devicepolicy.DeviceOwner createWithDeviceOwner(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        com.android.server.devicepolicy.DeviceOwner r2, $r3;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new com.android.server.devicepolicy.DeviceOwner;

        specialinvoke $r3.<com.android.server.devicepolicy.DeviceOwner: void <init>()>();

        r2 = $r3;

        $r4 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r4.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r1, r0);

        r2.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner> = $r4;

        return r2;
    }

    static com.android.server.devicepolicy.DeviceOwner createWithProfileOwner(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        com.android.server.devicepolicy.DeviceOwner r2, $r3;
        java.util.HashMap $r4;
        java.lang.Integer $r5;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new com.android.server.devicepolicy.DeviceOwner;

        specialinvoke $r3.<com.android.server.devicepolicy.DeviceOwner: void <init>()>();

        r2 = $r3;

        $r4 = r2.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r6.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r1, r0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        return r2;
    }

    static com.android.server.devicepolicy.DeviceOwner createWithProfileOwner(android.content.ComponentName, java.lang.String, int)
    {
        android.content.ComponentName r0;
        java.lang.String r1;
        int i0;
        com.android.server.devicepolicy.DeviceOwner r2, $r3;
        java.util.HashMap $r4;
        java.lang.Integer $r5;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r6;

        r0 := @parameter0: android.content.ComponentName;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = new com.android.server.devicepolicy.DeviceOwner;

        specialinvoke $r3.<com.android.server.devicepolicy.DeviceOwner: void <init>()>();

        r2 = $r3;

        $r4 = r2.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r6.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName)>(r1, r0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r6);

        return r2;
    }

    java.lang.String getDeviceOwnerPackageName()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        $r3 = $r2.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String packageName>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    java.lang.String getDeviceOwnerName()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        $r3 = $r2.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String name>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    void setDeviceOwner(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.lang.String r1, r2;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r3;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r3.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r2, r1);

        r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner> = $r3;

        return;
    }

    void clearDeviceOwner()
    {
        com.android.server.devicepolicy.DeviceOwner r0;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner> = null;

        return;
    }

    void setProfileOwner(java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.lang.String r1, r2;
        int i0;
        java.util.HashMap $r3;
        java.lang.Integer $r4;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r2, r1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    void setProfileOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        java.util.HashMap $r3;
        java.lang.Integer $r4;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName)>(r2, r1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        return;
    }

    void removeProfileOwner(int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        int i0;
        java.util.HashMap $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    java.lang.String getProfileOwnerPackageName(int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        int i0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.devicepolicy.DeviceOwner$OwnerInfo) $r4;

        if r1 == null goto label1;

        $r5 = r1.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String packageName>;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    android.content.ComponentName getProfileOwnerComponent(int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        int i0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        android.content.ComponentName $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.devicepolicy.DeviceOwner$OwnerInfo) $r4;

        if r1 == null goto label1;

        $r5 = r1.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: android.content.ComponentName admin>;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    java.lang.String getProfileOwnerName(int)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        int i0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo r1;
        java.util.HashMap $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.server.devicepolicy.DeviceOwner$OwnerInfo) $r4;

        if r1 == null goto label1;

        $r5 = r1.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String name>;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    java.util.Set getProfileOwnerKeys()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.util.HashMap $r1;
        java.util.Set $r2;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        return $r2;
    }

    boolean hasDeviceOwner()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo $r1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isInstalled(java.lang.String, android.content.pm.PackageManager)
    {
        java.lang.String r0, $r10;
        android.content.pm.PackageManager r1;
        android.content.pm.PackageInfo r2, $r3;
        android.content.pm.ApplicationInfo $r4;
        int $i0;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.pm.PackageManager;

     label1:
        $r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r0, 0);

        r2 = $r3;

        if $r3 == null goto label3;

        $r4 = r2.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i0 = $r4.<android.content.pm.ApplicationInfo: int flags>;

        if $i0 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device Owner package ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r10);

     label5:
        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    static boolean isInstalledForUser(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;
        android.content.pm.PackageInfo r1;
        android.content.pm.IPackageManager $r2;
        android.content.pm.ApplicationInfo $r3;
        android.os.RemoteException $r4, r6;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r1 = interfaceinvoke $r2.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>(r0, 0, i0);

        if r1 == null goto label3;

        $r3 = r1.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i1 = $r3.<android.content.pm.ApplicationInfo: int flags>;

        if $i1 == 0 goto label3;

     label2:
        return 1;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Package manager has died", r6);

        throw $r5;

     label5:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    void readOwnerFile()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.InputStream r1;
        org.xmlpull.v1.XmlPullParser r2;
        int i0, i1, $i2;
        java.lang.String r3, r4, r5, r6, $r12, $r14, $r23, $r28, $r32, r35, r36;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo r7, $r18, $r22, $r26;
        android.content.ComponentName r8;
        boolean $z0, $z1;
        org.xmlpull.v1.XmlPullParserException $r9, $r31, r37;
        java.lang.StringBuilder $r10, $r11, $r13, $r19, $r20, $r21, $r25, $r27, $r29, $r30, $r33, $r34;
        java.util.HashMap $r15;
        java.lang.Integer $r17;
        java.io.IOException $r24, r38;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

     label01:
        r1 = specialinvoke r0.<com.android.server.devicepolicy.DeviceOwner: java.io.InputStream openRead()>();

        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

     label02:
        $i2 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i2;

        if $i2 == 1 goto label10;

        if i0 == 2 goto label03;

        goto label02;

     label03:
        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("device-owner");

        if $z0 == 0 goto label04;

        r4 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r5 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        $r26 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r26.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r4, r5);

        r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner> = $r26;

        goto label09;

     label04:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("profile-owner");

        if $z1 == 0 goto label08;

        r35 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        r36 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "component");

        $r14 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "userId");

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        r7 = null;

        if r6 == null goto label06;

        r8 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r6);

        if r8 == null goto label05;

        $r22 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r22.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,android.content.ComponentName)>(r36, r8);

        r7 = $r22;

        goto label06;

     label05:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing device-owner file. Bad component name ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r23);

     label06:
        if r7 != null goto label07;

        $r18 = new com.android.server.devicepolicy.DeviceOwner$OwnerInfo;

        specialinvoke $r18.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: void <init>(java.lang.String,java.lang.String)>(r36, r35);

        r7 = $r18;

     label07:
        $r15 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, r7);

        goto label09;

     label08:
        $r9 = new org.xmlpull.v1.XmlPullParserException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected tag in device owner file: ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label09:
        goto label02;

     label10:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label11:
        goto label14;

     label12:
        $r31 := @caughtexception;

        r37 = $r31;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing device-owner file\n");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r32);

        goto label14;

     label13:
        $r24 := @caughtexception;

        r38 = $r24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO Exception when reading device-owner file\n");

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r38);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r28);

     label14:
        return;

        catch org.xmlpull.v1.XmlPullParserException from label01 to label11 with label12;
        catch java.io.IOException from label01 to label11 with label13;
    }

    void writeOwnerFile()
    {
        com.android.server.devicepolicy.DeviceOwner r0, r1;
        java.lang.Throwable r2, $r4;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 = r0;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFileLocked()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void writeOwnerFileLocked()
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.OutputStream r1;
        com.android.internal.util.FastXmlSerializer r2, $r6;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        com.android.server.devicepolicy.DeviceOwner$OwnerInfo r5, $r8, $r27, $r30, $r37;
        java.lang.Boolean $r7;
        java.util.HashMap $r9, $r10;
        int $i0, $i1;
        java.util.Set $r11;
        java.lang.Object $r12, $r13, $r20;
        boolean $z0;
        java.lang.String $r16, $r18, $r21, $r28, $r31, $r32, $r34, $r41;
        java.lang.Integer $r19;
        android.content.ComponentName $r22, $r25;
        java.lang.StringBuilder $r38, $r39, $r42;
        java.io.IOException $r40, r43;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

     label1:
        r1 = specialinvoke r0.<com.android.server.devicepolicy.DeviceOwner: java.io.OutputStream startWrite()>();

        $r6 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r6.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r2 = $r6;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r7);

        $r8 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        if $r8 == null goto label3;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "device-owner");

        $r27 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        $r32 = $r27.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String packageName>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r32);

        $r30 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        $r31 = $r30.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String name>;

        if $r31 == null goto label2;

        $r37 = r0.<com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner$OwnerInfo mDeviceOwner>;

        $r34 = $r37.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String name>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r34);

     label2:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "device-owner");

     label3:
        $r9 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $i0 = virtualinvoke $r9.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label6;

        $r10 = r0.<com.android.server.devicepolicy.DeviceOwner: java.util.HashMap mProfileOwners>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r12;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "profile-owner");

        $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (com.android.server.devicepolicy.DeviceOwner$OwnerInfo) $r13;

        $r16 = r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String packageName>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r16);

        $r18 = r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: java.lang.String name>;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r18);

        $r20 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.Integer) $r20;

        $i1 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "userId", $r21);

        $r22 = r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: android.content.ComponentName admin>;

        if $r22 == null goto label5;

        $r25 = r5.<com.android.server.devicepolicy.DeviceOwner$OwnerInfo: android.content.ComponentName admin>;

        $r28 = virtualinvoke $r25.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "component", $r28);

     label5:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "profile-owner");

        goto label4;

     label6:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void flush()>();

        specialinvoke r0.<com.android.server.devicepolicy.DeviceOwner: void finishWrite(java.io.OutputStream)>(r1);

     label7:
        goto label9;

     label8:
        $r40 := @caughtexception;

        r43 = $r40;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO Exception when writing device-owner file\n");

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r41);

     label9:
        return;

        catch java.io.IOException from label1 to label7 with label8;
    }

    private java.io.InputStream openRead() throws java.io.IOException
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.InputStream $r1, $r6;
        android.util.AtomicFile $r2;
        java.io.File $r3, $r4;
        java.io.FileInputStream $r5;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: java.io.InputStream mInputStreamForTest>;

        if $r1 == null goto label1;

        $r6 = r0.<com.android.server.devicepolicy.DeviceOwner: java.io.InputStream mInputStreamForTest>;

        return $r6;

     label1:
        $r2 = new android.util.AtomicFile;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "device_owner.xml");

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File)>($r3);

        $r5 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        return $r5;
    }

    private java.io.OutputStream startWrite() throws java.io.IOException
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.OutputStream $r1, $r7;
        android.util.AtomicFile $r2, $r5;
        java.io.File $r3, $r4;
        java.io.FileOutputStream $r6;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        $r1 = r0.<com.android.server.devicepolicy.DeviceOwner: java.io.OutputStream mOutputStreamForTest>;

        if $r1 == null goto label1;

        $r7 = r0.<com.android.server.devicepolicy.DeviceOwner: java.io.OutputStream mOutputStreamForTest>;

        return $r7;

     label1:
        $r2 = new android.util.AtomicFile;

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "device_owner.xml");

        specialinvoke $r2.<android.util.AtomicFile: void <init>(java.io.File)>($r3);

        r0.<com.android.server.devicepolicy.DeviceOwner: android.util.AtomicFile fileForWriting> = $r2;

        $r5 = r0.<com.android.server.devicepolicy.DeviceOwner: android.util.AtomicFile fileForWriting>;

        $r6 = virtualinvoke $r5.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        return $r6;
    }

    private void finishWrite(java.io.OutputStream)
    {
        com.android.server.devicepolicy.DeviceOwner r0;
        java.io.OutputStream r1;
        android.util.AtomicFile $r2, $r4;
        java.io.FileOutputStream $r3;

        r0 := @this: com.android.server.devicepolicy.DeviceOwner;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.android.server.devicepolicy.DeviceOwner: android.util.AtomicFile fileForWriting>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.server.devicepolicy.DeviceOwner: android.util.AtomicFile fileForWriting>;

        $r3 = (java.io.FileOutputStream) r1;

        virtualinvoke $r4.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>($r3);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.devicepolicy.DeviceOwner: java.lang.String ATTR_USERID> = "userId";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String ATTR_COMPONENT_NAME> = "component";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String ATTR_PACKAGE> = "package";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String ATTR_NAME> = "name";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String TAG_PROFILE_OWNER> = "profile-owner";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String TAG_DEVICE_OWNER> = "device-owner";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String DEVICE_OWNER_XML> = "device_owner.xml";

        <com.android.server.devicepolicy.DeviceOwner: java.lang.String TAG> = "DevicePolicyManagerService";

        return;
    }
}
