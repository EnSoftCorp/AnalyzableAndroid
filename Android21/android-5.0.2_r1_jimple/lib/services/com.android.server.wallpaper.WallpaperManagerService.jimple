public class com.android.server.wallpaper.WallpaperManagerService extends android.app.IWallpaperManager$Stub
{
    static final java.lang.String TAG;
    static final boolean DEBUG;
    final java.lang.Object mLock;
    static final long MIN_WALLPAPER_CRASH_TIME;
    static final java.lang.String WALLPAPER;
    static final java.lang.String WALLPAPER_INFO;
    final android.content.Context mContext;
    final android.view.IWindowManager mIWindowManager;
    final android.content.pm.IPackageManager mIPackageManager;
    final com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor;
    com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper;
    final android.content.ComponentName mImageWallpaper;
    android.util.SparseArray mWallpaperMap;
    int mCurrentUserId;

    public void <init>(android.content.Context)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.Context r1;
        java.lang.Object[] $r2;
        android.util.SparseArray $r3;
        android.content.res.Resources $r4;
        java.lang.String $r5;
        android.content.ComponentName $r6;
        android.os.IBinder $r7;
        android.view.IWindowManager $r8;
        android.content.pm.IPackageManager $r9;
        com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor $r10, $r12;
        android.os.UserHandle $r11;
        java.io.File $r13;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.IWallpaperManager$Stub: void <init>()>();

        $r2 = newarray (java.lang.Object)[0];

        r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock> = $r2;

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap> = $r3;

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext> = r1;

        $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String getString(int)>(17039391);

        $r6 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r5);

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper> = $r6;

        $r7 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r8 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r7);

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.view.IWindowManager mIWindowManager> = $r8;

        $r9 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager> = $r9;

        $r10 = new com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor;

        specialinvoke $r10.<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor> = $r10;

        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor mMonitor>;

        $r11 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r12.<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void register(android.content.Context,android.os.Looper,android.os.UserHandle,boolean)>(r1, null, $r11, 1);

        $r13 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r13.<java.io.File: boolean mkdirs()>();

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int)>(0);

        return;
    }

    private static java.io.File getWallpaperDir(int)
    {
        int i0;
        java.io.File $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        return $r0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, $i1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        android.util.SparseArray $r2, $r3;
        java.lang.Object $r4;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r5;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        specialinvoke r0.<android.app.IWallpaperManager$Stub: void finalize()>();

        i0 = 0;

     label1:
        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label2;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r1 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r4;

        $r5 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void systemRunning()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        android.content.IntentFilter r2, $r8;
        android.os.RemoteException r3, $r14;
        android.util.SparseArray $r4;
        java.lang.Object $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r6, $r7;
        com.android.server.wallpaper.WallpaperManagerService$1 $r9;
        android.content.Context $r10;
        android.app.IActivityManager $r12;
        com.android.server.wallpaper.WallpaperManagerService$2 $r13;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r1 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r5;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r1, null);

        $r6 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver;

        specialinvoke $r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r1);

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver> = $r6;

        $r7 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r7.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void startWatching()>();

        $r8 = new android.content.IntentFilter;

        specialinvoke $r8.<android.content.IntentFilter: void <init>()>();

        r2 = $r8;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPING");

        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r9 = new com.android.server.wallpaper.WallpaperManagerService$1;

        specialinvoke $r9.<com.android.server.wallpaper.WallpaperManagerService$1: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        virtualinvoke $r10.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r9, r2);

     label1:
        $r12 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r13 = new com.android.server.wallpaper.WallpaperManagerService$2;

        specialinvoke $r13.<com.android.server.wallpaper.WallpaperManagerService$2: void <init>(com.android.server.wallpaper.WallpaperManagerService)>(r0);

        interfaceinvoke $r12.<android.app.IActivityManager: void registerUserSwitchObserver(android.app.IUserSwitchObserver)>($r13);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r3 = $r14;

        virtualinvoke r3.<android.os.RemoteException: void printStackTrace()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getName()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r3, $r5;
        java.lang.Throwable r2, $r9;
        int $i0;
        android.util.SparseArray $r4;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData $r6;
        java.lang.String $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("getName() can only be called from the system process");

        throw $r8;

     label1:
        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(0);

        $r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r5;

        $r7 = $r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        exitmonitor r1;

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void onStoppingUser(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1, $r4, $r6;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.lang.Throwable r3, $r10;
        android.util.SparseArray $r5, $r8;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r7, $r9;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        if r2 == null goto label4;

        $r7 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r7 == null goto label3;

        $r9 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void stopWatching()>();

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver> = null;

     label3:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r8.<android.util.SparseArray: void remove(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void onRemoveUser(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1, $r5;
        java.io.File r2, r3, $r6, $r7, $r8, $r9;
        java.lang.Throwable r4, $r10;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r5;

        entermonitor $r5;

     label2:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void onStoppingUser(int)>(i0);

        $r6 = new java.io.File;

        $r7 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "wallpaper");

        r2 = $r6;

        virtualinvoke r2.<java.io.File: boolean delete()>();

        $r8 = new java.io.File;

        $r9 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "wallpaper_info.xml");

        r3 = $r8;

        virtualinvoke r3.<java.io.File: boolean delete()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label5:
        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void switchUser(int, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        android.os.IRemoteCallback r1;
        java.lang.Object r2, $r5, $r7;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3, $r11;
        java.lang.Throwable r4, $r13;
        android.util.SparseArray $r6, $r12;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver $r8, $r9, $r10;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.IRemoteCallback;

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId> = i0;

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r7;

        if r3 != null goto label2;

        $r11 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke $r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int)>(i0);

        r3 = $r11;

        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int)>(i0);

     label2:
        $r8 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        if $r8 != null goto label3;

        $r9 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver;

        specialinvoke $r9.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void <init>(com.android.server.wallpaper.WallpaperManagerService,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r3);

        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver> = $r9;

        $r10 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver wallpaperObserver>;

        virtualinvoke $r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperObserver: void startWatching()>();

     label3:
        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r3, r1);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void switchWallpaper(com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        android.os.IRemoteCallback r2;
        java.lang.Object r3, $r7;
        java.lang.RuntimeException r4, $r10, r12;
        android.content.ComponentName r5, $r8, $r9;
        java.lang.Throwable r6, $r11;
        boolean $z0;
        int $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r2 := @parameter1: android.os.IRemoteCallback;

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        r4 = null;

     label02:
        $r8 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r8 == null goto label03;

        $r9 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        goto label04;

     label03:
        $r9 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

     label04:
        r5 = $r9;

        $z0 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r5, 1, 0, r1, r2);

        if $z0 == 0 goto label07;

     label05:
        exitmonitor r3;

     label06:
        return;

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        r12 = $r10;

        r4 = r12;

     label09:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Failure starting previous wallpaper", r4);

        $i1 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperLocked(boolean,int,android.os.IRemoteCallback)>(0, $i1, r2);

        exitmonitor r3;

     label10:
        goto label13;

     label11:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r3;

     label12:
        throw r6;

     label13:
        return;

        catch java.lang.RuntimeException from label02 to label05 with label08;
        catch java.lang.Throwable from label01 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void clearWallpaper()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperLocked(boolean,int,android.os.IRemoteCallback)>(0, $i0, null);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void clearWallpaperLocked(boolean, int, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        boolean z0, $z1, $z2;
        int i0, $i2;
        android.os.IRemoteCallback r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.io.File r3, $r9, $r10;
        long l1;
        java.lang.IllegalArgumentException r4, r5, $r12;
        java.lang.Throwable r6, $r14;
        android.util.SparseArray $r7;
        java.lang.Object $r8;
        android.content.ComponentName $r11;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.IRemoteCallback;

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r8;

        $r9 = new java.io.File;

        $r10 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "wallpaper");

        r3 = $r9;

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label01;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        r4 = null;

     label03:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        $i2 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if i0 == $i2 goto label05;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label05:
        if z0 == 0 goto label06;

        $r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        goto label07;

     label06:
        $r11 = null;

     label07:
        $z2 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r11, 1, 0, r2, r1);

        if $z2 == 0 goto label09;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        r5 = $r12;

        r4 = r5;

     label11:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Default wallpaper component not found!", r4);

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaperComponentLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2);

        if r1 == null goto label15;

     label12:
        interfaceinvoke r1.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label13:
        goto label15;

     label14:
        $r13 := @caughtexception;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label18;

     label16:
        $r14 := @caughtexception;

        r6 = $r14;

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r6;

     label18:
        return;

        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label08 with label10;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label02 to label04 with label16;
        catch java.lang.Throwable from label05 to label08 with label16;
        catch java.lang.Throwable from label09 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public boolean hasNamedWallpaper(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r14;
        java.lang.Object r2, $r8, $r10, $r12, $r15, $r16;
        java.util.List r3;
        long l0;
        java.lang.Throwable r4, r7, $r18, $r19;
        android.content.pm.UserInfo r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r6;
        android.content.Context $r9;
        android.os.UserManager $r11;
        boolean $z0, $z1;
        android.util.SparseArray $r13, $r17;
        int $i1, $i2, $i3;
        java.util.Iterator r20;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r11 = (android.os.UserManager) $r10;

        r3 = virtualinvoke $r11.<android.os.UserManager: java.util.List getUsers()>();

     label03:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label06;

     label04:
        $r19 := @caughtexception;

        r4 = $r19;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label06:
        r20 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r12 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r13 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i1 = r5.<android.content.pm.UserInfo: int id>;

        $r15 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r15;

        if r6 != null goto label08;

        $i3 = r5.<android.content.pm.UserInfo: int id>;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int)>($i3);

        $r17 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i2 = r5.<android.content.pm.UserInfo: int id>;

        $r16 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        r6 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r16;

     label08:
        if r6 == null goto label10;

        $r14 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 == 0 goto label10;

        exitmonitor r2;

     label09:
        return 1;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        goto label15;

     label13:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r2;

     label14:
        throw r7;

     label15:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label09 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private android.graphics.Point getDefaultDisplaySize()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.graphics.Point r1, $r4;
        android.view.WindowManager r2;
        android.view.Display r3;
        android.content.Context $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        r1 = $r4;

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r2 = (android.view.WindowManager) $r6;

        r3 = interfaceinvoke r2.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        virtualinvoke r3.<android.view.Display: void getRealSize(android.graphics.Point)>(r1);

        return r1;
    }

    public void setDimensionHints(int, int) throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.Object r1, $r6, $r8;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        android.graphics.Point r3;
        java.lang.Throwable r5, $r22;
        android.util.SparseArray $r7;
        java.lang.IllegalArgumentException $r9;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r10, $r11, $r12, $r14, $r17;
        android.service.wallpaper.IWallpaperEngine $r13, $r16;
        android.service.wallpaper.IWallpaperService $r15;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.lang.IllegalStateException $r20;
        java.lang.String $r23;
        android.os.RemoteException $r24;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_HINTS");

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r8;

        if r2 != null goto label02;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label02:
        if i0 <= 0 goto label03;

        if i1 > 0 goto label04;

     label03:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width and height must be > 0");

        throw $r9;

     label04:
        r3 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.graphics.Point getDefaultDisplaySize()>();

        $i3 = r3.<android.graphics.Point: int x>;

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i3);

        $i4 = r3.<android.graphics.Point: int y>;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i1, $i4);

        $i5 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        if i8 != $i5 goto label05;

        $i7 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        if i9 == $i7 goto label13;

     label05:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width> = i8;

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height> = i9;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2);

        $i6 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i6 == i2 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        $r10 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r10 == null goto label13;

        $r11 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r13 = $r11.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r13 == null goto label12;

     label08:
        $r17 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r16 = $r17.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r16.<android.service.wallpaper.IWallpaperEngine: void setDesiredSize(int,int)>(i8, i9);

     label09:
        goto label11;

     label10:
        $r24 := @caughtexception;

     label11:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r2);

        goto label13;

     label12:
        $r12 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r15 = $r12.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r15 == null goto label13;

        $r14 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r14.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: boolean mDimensionsChanged> = 1;

     label13:
        exitmonitor r1;

     label14:
        goto label17;

     label15:
        $r22 := @caughtexception;

        r5 = $r22;

        exitmonitor r1;

     label16:
        throw r5;

     label17:
        return;

        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label06 with label15;
        catch java.lang.Throwable from label07 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public int getWidthHint() throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r4, $r6;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.lang.Throwable r3, $r7;
        android.util.SparseArray $r5;
        int $i0, $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        $i1 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        exitmonitor r1;

     label2:
        return $i1;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getHeightHint() throws android.os.RemoteException
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r4, $r6;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.lang.Throwable r3, $r7;
        android.util.SparseArray $r5;
        int $i0, $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        $i1 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        exitmonitor r1;

     label2:
        return $i1;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setDisplayPadding(android.graphics.Rect)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.graphics.Rect r1, $r14, $r15;
        java.lang.Object r2, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        java.lang.Throwable r5, $r27;
        android.util.SparseArray $r7;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r24, $r28, $r29;
        java.lang.String $r13, $r26;
        boolean $z0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r16, $r18, $r20, $r21, $r22;
        android.service.wallpaper.IWallpaperEngine $r17, $r25;
        android.service.wallpaper.IWallpaperService $r19;
        java.lang.IllegalStateException $r23;
        android.os.RemoteException $r30;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_HINTS");

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r8;

        if r3 != null goto label02;

        $r23 = new java.lang.IllegalStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r23;

     label02:
        $i1 = r1.<android.graphics.Rect: int left>;

        if $i1 < 0 goto label03;

        $i2 = r1.<android.graphics.Rect: int top>;

        if $i2 < 0 goto label03;

        $i4 = r1.<android.graphics.Rect: int right>;

        if $i4 < 0 goto label03;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        if $i3 >= 0 goto label04;

     label03:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding must be positive: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label04:
        $r14 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label12;

        $r15 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        virtualinvoke $r15.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r3);

        $i5 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i5 == i0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r16 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r16 == null goto label12;

        $r18 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r17 = $r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r17 == null goto label11;

     label07:
        $r21 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r25 = $r21.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r25.<android.service.wallpaper.IWallpaperEngine: void setDisplayPadding(android.graphics.Rect)>(r1);

     label08:
        goto label10;

     label09:
        $r30 := @caughtexception;

     label10:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r3);

        goto label12;

     label11:
        $r20 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r19 = $r20.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        if $r19 == null goto label12;

        $r22 = r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r22.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: boolean mPaddingChanged> = 1;

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r27 := @caughtexception;

        r5 = $r27;

        exitmonitor r2;

     label15:
        throw r5;

     label16:
        return;

        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label05 with label14;
        catch java.lang.Throwable from label06 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperManagerCallback, android.os.Bundle)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.app.IWallpaperManagerCallback r1;
        android.os.Bundle r2;
        java.lang.Object r3, $r7, $r9;
        int i0, $i1, $i2, i4;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r4;
        java.io.File r5, $r11, $r12;
        java.lang.Throwable r6, $r14;
        android.util.SparseArray $r8;
        android.os.RemoteCallbackList $r10;
        android.os.ParcelFileDescriptor $r13;
        boolean $z2;
        java.io.FileNotFoundException $r15, r16;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.app.IWallpaperManagerCallback;

        r2 := @parameter1: android.os.Bundle;

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r3 = $r7;

        entermonitor $r7;

     label01:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != 1000 goto label02;

        i4 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        goto label03;

     label02:
        i4 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

     label03:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i4);

        r4 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r9;

     label04:
        if r2 == null goto label05;

        $i2 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("width", $i2);

        $i1 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        virtualinvoke r2.<android.os.Bundle: void putInt(java.lang.String,int)>("height", $i1);

     label05:
        $r10 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r4);

        virtualinvoke $r10.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        $r12 = new java.io.File;

        $r11 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i4);

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r11, "wallpaper");

        r5 = $r12;

        $z2 = virtualinvoke r5.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label08;

     label06:
        exitmonitor r3;

     label07:
        return null;

     label08:
        $r13 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r5, 268435456);

     label09:
        exitmonitor r3;

     label10:
        return $r13;

     label11:
        $r15 := @caughtexception;

        r16 = $r15;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Error getting wallpaper", r16);

        exitmonitor r3;

     label12:
        return null;

     label13:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r3;

     label14:
        throw r6;

        catch java.io.FileNotFoundException from label04 to label06 with label11;
        catch java.io.FileNotFoundException from label08 to label09 with label11;
        catch java.lang.Throwable from label01 to label07 with label13;
        catch java.lang.Throwable from label08 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public android.app.WallpaperInfo getWallpaperInfo()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0;
        java.lang.Object r1, $r4, $r6;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.lang.Throwable r3, $r10;
        android.util.SparseArray $r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r7, $r8;
        android.app.WallpaperInfo $r9;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        $r7 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r7 == null goto label3;

        $r8 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r9 = $r8.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        exitmonitor r1;

     label2:
        return $r9;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.os.ParcelFileDescriptor setWallpaper(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r16;
        java.lang.Object r2, $r8, $r10;
        int i0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        long l1;
        android.os.ParcelFileDescriptor r4, r5;
        java.lang.Throwable r6, r7, $r15, $r17;
        android.util.SparseArray $r9;
        java.lang.StringBuilder $r11, $r13, $r14;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER");

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r2 = $r8;

        entermonitor $r8;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r10;

        if r3 != null goto label02;

        $r12 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r4 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1, r3);

        if r4 == null goto label04;

        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 1;

     label04:
        r5 = r4;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        exitmonitor r2;

     label06:
        return r5;

     label07:
        $r15 := @caughtexception;

        r6 = $r15;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r6;

     label09:
        $r17 := @caughtexception;

        r7 = $r17;

        exitmonitor r2;

     label10:
        throw r7;

        catch java.lang.Throwable from label03 to label05 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label10 with label09;
    }

    android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r7;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        java.io.File r3, r4, $r6;
        android.os.ParcelFileDescriptor r5;
        int $i0;
        boolean $z0, $z1;
        java.io.FileNotFoundException $r8, r9;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        if r1 != null goto label1;

        r1 = "";

     label1:
        $i0 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        r3 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>($i0);

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        virtualinvoke r3.<java.io.File: boolean mkdir()>();

        $r7 = virtualinvoke r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r7, 505, -1, -1);

     label2:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "wallpaper");

        r4 = $r6;

        r5 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r4, 1006632960);

        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r4);

        if $z1 != 0 goto label4;

     label3:
        return null;

     label4:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = r1;

     label5:
        return r5;

     label6:
        $r8 := @caughtexception;

        r9 = $r8;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Error setting wallpaper", r9);

        return null;

        catch java.io.FileNotFoundException from label1 to label3 with label6;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
    }

    public void setWallpaperComponent(android.content.ComponentName)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1;
        java.lang.Object r2, $r6, $r8;
        int i0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r3;
        long l1;
        java.lang.Throwable r4, r5, $r13, $r15;
        android.util.SparseArray $r7;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.lang.IllegalStateException $r10;
        java.lang.String $r14;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void checkPermission(java.lang.String)>("android.permission.SET_WALLPAPER_COMPONENT");

        $r6 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r8;

        if r3 != null goto label02;

        $r10 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wallpaper not yet initialized for user ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r3.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean imageWallpaperPending> = 0;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(r1, 0, 1, r3, null);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label07;

     label05:
        $r15 := @caughtexception;

        r4 = $r15;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r2;

     label10:
        throw r5;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    boolean bindWallpaperComponentLocked(android.content.ComponentName, boolean, boolean, com.android.server.wallpaper.WallpaperManagerService$WallpaperData, android.os.IRemoteCallback)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.content.ComponentName r1, $r35, $r61, $r71;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2, $r28, $r31;
        android.os.IRemoteCallback r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i7;
        android.content.pm.ServiceInfo r4, r8;
        java.lang.String r5, $r11, $r12, $r37, $r44, $r45, $r52, $r53, $r65, r81, r83, r86;
        android.content.Intent r6, $r13, $r16, $r20;
        java.util.List r7;
        org.xmlpull.v1.XmlPullParserException r9, $r70;
        android.content.pm.IPackageManager $r10, $r39;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r15, $r62, r82;
        android.content.Context $r18, $r19, $r26, $r34, $r48, $r60;
        java.lang.CharSequence $r21;
        android.os.UserHandle $r22, $r24;
        android.app.PendingIntent $r25;
        android.os.Binder $r27;
        java.lang.StringBuilder $r29, $r32, $r33, $r40, $r41, $r42, $r51, $r55, $r57, $r58, $r59, $r63, $r64, $r66, $r67, $r74, $r75, $r76;
        android.view.IWindowManager $r30;
        java.lang.IllegalArgumentException $r36, $r68, $r73, $r78;
        android.content.ContentResolver $r38;
        android.content.pm.ResolveInfo $r43, $r50;
        java.lang.SecurityException $r46, $r56;
        java.lang.Object $r47, $r49;
        android.app.WallpaperInfo $r54, r79;
        android.os.RemoteException $r69, $r77, r85;
        java.io.IOException $r72, r80;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r3 := @parameter4: android.os.IRemoteCallback;

        if z0 != 0 goto label02;

        $r62 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r62 == null goto label02;

        $r61 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r61 != null goto label01;

        if r1 != null goto label02;

        return 1;

     label01:
        $r71 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $z7 = virtualinvoke $r71.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label02;

        return 1;

     label02:
        if r1 != null goto label03;

        $r60 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        r1 = staticinvoke <android.app.WallpaperManager: android.content.ComponentName getDefaultWallpaperComponent(android.content.Context)>($r60);

        if r1 != null goto label03;

        r1 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

     label03:
        i0 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        r4 = interfaceinvoke $r10.<android.content.pm.IPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>(r1, 4224, i0);

        if r4 != null goto label05;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted wallpaper ");

        $r64 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is unavailable");

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r65);

     label04:
        return 0;

     label05:
        $r11 = "android.permission.BIND_WALLPAPER";

        $r12 = r4.<android.content.pm.ServiceInfo: java.lang.String permission>;

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z2 != 0 goto label08;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service does not require android.permission.BIND_WALLPAPER: ");

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r5 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        if z1 == 0 goto label06;

        $r56 = new java.lang.SecurityException;

        specialinvoke $r56.<java.lang.SecurityException: void <init>(java.lang.String)>(r5);

        throw $r56;

     label06:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r5);

     label07:
        return 0;

     label08:
        r79 = null;

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("android.service.wallpaper.WallpaperService");

        r6 = $r13;

        if r1 == null goto label22;

        $r35 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z4 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r35);

        if $z4 != 0 goto label22;

        $r39 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.pm.IPackageManager mIPackageManager>;

        $r34 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r38 = virtualinvoke $r34.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r37 = virtualinvoke r6.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r38);

        r7 = interfaceinvoke $r39.<android.content.pm.IPackageManager: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>(r6, $r37, 128, i0);

        i1 = 0;

     label09:
        $i7 = interfaceinvoke r7.<java.util.List: int size()>();

        if i1 >= $i7 goto label19;

        $r47 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i1);

        $r43 = (android.content.pm.ResolveInfo) $r47;

        r8 = $r43.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r45 = r8.<android.content.pm.ServiceInfo: java.lang.String name>;

        $r44 = r4.<android.content.pm.ServiceInfo: java.lang.String name>;

        $z5 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r44);

        if $z5 == 0 goto label18;

        $r53 = r8.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $r52 = r4.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        $z6 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>($r52);

        if $z6 == 0 goto label18;

     label10:
        $r54 = new android.app.WallpaperInfo;

        $r48 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r49 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i1);

        $r50 = (android.content.pm.ResolveInfo) $r49;

        specialinvoke $r54.<android.app.WallpaperInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r48, $r50);

        r79 = $r54;

     label11:
        goto label19;

     label12:
        $r70 := @caughtexception;

        r9 = $r70;

        if z1 == 0 goto label13;

        $r68 = new java.lang.IllegalArgumentException;

        specialinvoke $r68.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r9);

        throw $r68;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperManagerService", r9);

     label14:
        return 0;

     label15:
        $r72 := @caughtexception;

        r80 = $r72;

        if z1 == 0 goto label16;

        $r78 = new java.lang.IllegalArgumentException;

        specialinvoke $r78.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r80);

        throw $r78;

     label16:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.Throwable)>("WallpaperManagerService", r80);

     label17:
        return 0;

     label18:
        i1 = i1 + 1;

        goto label09;

     label19:
        if r79 != null goto label22;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Selected service is not a wallpaper: ");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r81 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        if z1 == 0 goto label20;

        $r46 = new java.lang.SecurityException;

        specialinvoke $r46.<java.lang.SecurityException: void <init>(java.lang.String)>(r81);

        throw $r46;

     label20:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r81);

     label21:
        return 0;

     label22:
        $r15 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        specialinvoke $r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: void <init>(com.android.server.wallpaper.WallpaperManagerService,android.app.WallpaperInfo,com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r0, r79, r2);

        r82 = $r15;

        virtualinvoke r6.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        virtualinvoke r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.intent.extra.client_label", 17040694);

        $r18 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r16 = new android.content.Intent;

        specialinvoke $r16.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SET_WALLPAPER");

        $r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r21 = virtualinvoke $r19.<android.content.Context: java.lang.CharSequence getText(int)>(17040695);

        $r20 = staticinvoke <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)>($r16, $r21);

        $r22 = new android.os.UserHandle;

        specialinvoke $r22.<android.os.UserHandle: void <init>(int)>(i0);

        $r25 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r18, 0, $r20, 0, null, $r22);

        virtualinvoke r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.client_intent", $r25);

        $r26 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r24 = new android.os.UserHandle;

        specialinvoke $r24.<android.os.UserHandle: void <init>(int)>(i0);

        $z3 = virtualinvoke $r26.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r6, r82, 536870913, $r24);

        if $z3 != 0 goto label25;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to bind service: ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r83 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        if z1 == 0 goto label23;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r83);

        throw $r36;

     label23:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r83);

     label24:
        return 0;

     label25:
        $i4 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $i2 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i4 != $i2 goto label26;

        $r31 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        if $r31 == null goto label26;

        $r28 = r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper>;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>($r28);

     label26:
        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = r1;

        r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection> = r82;

        r82.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = r3;

     label27:
        $i3 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $i5 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        if $i3 != $i5 goto label28;

        $r30 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.view.IWindowManager mIWindowManager>;

        $r27 = r82.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        interfaceinvoke $r30.<android.view.IWindowManager: void addWindowToken(android.os.IBinder,int)>($r27, 2013);

        r0.<com.android.server.wallpaper.WallpaperManagerService: com.android.server.wallpaper.WallpaperManagerService$WallpaperData mLastWallpaper> = r2;

     label28:
        goto label30;

     label29:
        $r77 := @caughtexception;

     label30:
        goto label33;

     label31:
        $r69 := @caughtexception;

        r85 = $r69;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote exception for ");

        $r75 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r74 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r85);

        r86 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        if z1 == 0 goto label32;

        $r73 = new java.lang.IllegalArgumentException;

        specialinvoke $r73.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r86);

        throw $r73;

     label32:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", r86);

        return 0;

     label33:
        return 1;

        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label12;
        catch java.io.IOException from label10 to label11 with label15;
        catch android.os.RemoteException from label27 to label28 with label29;
        catch android.os.RemoteException from label02 to label04 with label31;
        catch android.os.RemoteException from label05 to label07 with label31;
        catch android.os.RemoteException from label08 to label14 with label31;
        catch android.os.RemoteException from label15 to label17 with label31;
        catch android.os.RemoteException from label18 to label21 with label31;
        catch android.os.RemoteException from label22 to label24 with label31;
        catch android.os.RemoteException from label25 to label30 with label31;
    }

    void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection $r3, $r4, $r6, $r8, $r10, $r13, $r14, $r15, $r16, $r18;
        android.os.IRemoteCallback $r5, $r19;
        android.service.wallpaper.IWallpaperEngine $r7, $r17;
        android.content.Context $r9;
        android.os.Binder $r11;
        android.view.IWindowManager $r12;
        android.os.RemoteException $r20, $r21, $r22;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r3 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r3 == null goto label14;

        $r4 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r5 = $r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        if $r5 == null goto label05;

     label01:
        $r16 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r19 = $r16.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply>;

        interfaceinvoke $r19.<android.os.IRemoteCallback: void sendResult(android.os.Bundle)>(null);

     label02:
        goto label04;

     label03:
        $r21 := @caughtexception;

     label04:
        $r18 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r18.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.IRemoteCallback mReply> = null;

     label05:
        $r6 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r7 = $r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        if $r7 == null goto label09;

     label06:
        $r15 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r17 = $r15.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        interfaceinvoke $r17.<android.service.wallpaper.IWallpaperEngine: void destroy()>();

     label07:
        goto label09;

     label08:
        $r20 := @caughtexception;

     label09:
        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r8 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke $r9.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r8);

     label10:
        $r12 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.view.IWindowManager mIWindowManager>;

        $r10 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r11 = $r10.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        interfaceinvoke $r12.<android.view.IWindowManager: void removeWindowToken(android.os.IBinder)>($r11);

     label11:
        goto label13;

     label12:
        $r22 := @caughtexception;

     label13:
        $r13 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r13.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService> = null;

        $r14 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        $r14.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine> = null;

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection> = null;

     label14:
        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    void clearWallpaperComponentLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent> = null;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void detachWallpaperLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    void attachServiceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r1;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r2;
        android.os.RemoteException r3, $r7;
        android.graphics.Rect $r4;
        int $i0, $i1;
        android.os.Binder $r5;
        android.service.wallpaper.IWallpaperService $r6;
        boolean $z0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection;

        r2 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

     label1:
        $r6 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        $r5 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        $i1 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        $i0 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        $r4 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        interfaceinvoke $r6.<android.service.wallpaper.IWallpaperService: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int,android.graphics.Rect)>(r1, $r5, 2013, 0, $i1, $i0, $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "Failed attaching wallpaper; clearing", r3);

        $z0 = r2.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: boolean wallpaperUpdating>;

        if $z0 != 0 goto label4;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(null, 0, 0, r2, null);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        int i0, i1, $i2;
        android.os.RemoteCallbackList $r3, $r4, $r8;
        android.content.Intent $r5, r12;
        android.os.UserHandle $r6;
        android.content.Context $r7;
        android.os.IInterface $r9;
        android.app.IWallpaperManagerCallback $r10;
        android.os.RemoteException $r11;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r3 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        i0 = virtualinvoke $r3.<android.os.RemoteCallbackList: int beginBroadcast()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

     label2:
        $r8 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        $r9 = virtualinvoke $r8.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r10 = (android.app.IWallpaperManagerCallback) $r9;

        interfaceinvoke $r10.<android.app.IWallpaperManagerCallback: void onWallpaperChanged()>();

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r4 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.os.RemoteCallbackList access$300(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        virtualinvoke $r4.<android.os.RemoteCallbackList: void finishBroadcast()>();

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.WALLPAPER_CHANGED");

        r12 = $r5;

        $r7 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r6 = new android.os.UserHandle;

        $i2 = r0.<com.android.server.wallpaper.WallpaperManagerService: int mCurrentUserId>;

        specialinvoke $r6.<android.os.UserHandle: void <init>(int)>($i2);

        virtualinvoke $r7.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r12, $r6);

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void checkPermission(java.lang.String)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.String r1, $r9;
        android.content.Context $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if 0 == $i0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access denied to process: ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must have permission ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    private static com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        int i0;
        java.lang.String r0, $r9;
        java.io.File $r1, $r2, $r4, $r5;
        com.android.internal.util.JournaledFile $r3;
        java.lang.StringBuilder $r6, $r7, $r8;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r2 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "wallpaper_info.xml");

        r0 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = new com.android.internal.util.JournaledFile;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r0);

        $r5 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r9);

        specialinvoke $r3.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r4, $r5);

        return $r3;
    }

    private void saveSettingsLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        com.android.internal.util.JournaledFile r2;
        java.io.FileOutputStream r3, $r6;
        com.android.internal.util.FastXmlSerializer r4, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.io.File $r7;
        java.lang.Boolean $r9;
        java.lang.String $r11, $r14, $r21, $r26, $r31, $r33, $r37, $r40;
        android.graphics.Rect $r15, $r16, $r17, $r18, $r28, $r29, $r34, $r35;
        android.content.ComponentName $r19, $r23, $r24, $r25;
        boolean $z0;
        java.io.IOException $r38, $r39;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $i0 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        r2 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>($i0);

        r3 = null;

     label01:
        $r6 = new java.io.FileOutputStream;

        $r7 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r7, 0);

        r3 = $r6;

        $r8 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r8.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r4 = $r8;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r3, "utf-8");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wp");

        $i1 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "width", $r11);

        $i2 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "height", $r14);

        $r15 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i3 = $r15.<android.graphics.Rect: int left>;

        if $i3 == 0 goto label02;

        $r35 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i10 = $r35.<android.graphics.Rect: int left>;

        $r40 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingLeft", $r40);

     label02:
        $r16 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i4 = $r16.<android.graphics.Rect: int top>;

        if $i4 == 0 goto label03;

        $r34 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i9 = $r34.<android.graphics.Rect: int top>;

        $r37 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingTop", $r37);

     label03:
        $r17 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i5 = $r17.<android.graphics.Rect: int right>;

        if $i5 == 0 goto label04;

        $r29 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i8 = $r29.<android.graphics.Rect: int right>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingRight", $r33);

     label04:
        $r18 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i6 = $r18.<android.graphics.Rect: int bottom>;

        if $i6 == 0 goto label05;

        $r28 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i7 = $r28.<android.graphics.Rect: int bottom>;

        $r31 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "paddingBottom", $r31);

     label05:
        $r21 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r21);

        $r19 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        if $r19 == null goto label06;

        $r25 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r24 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z0 = virtualinvoke $r25.<android.content.ComponentName: boolean equals(java.lang.Object)>($r24);

        if $z0 != 0 goto label06;

        $r23 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        $r26 = virtualinvoke $r23.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "component", $r26);

     label06:
        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wp");

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        virtualinvoke r2.<com.android.internal.util.JournaledFile: void commit()>();

     label07:
        goto label13;

     label08:
        $r38 := @caughtexception;

     label09:
        if r3 == null goto label10;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label10:
        goto label12;

     label11:
        $r39 := @caughtexception;

     label12:
        virtualinvoke r2.<com.android.internal.util.JournaledFile: void rollback()>();

     label13:
        return;

        catch java.io.IOException from label01 to label07 with label08;
        catch java.io.IOException from label09 to label10 with label11;
    }

    private void migrateFromOld()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.io.File r1, r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        boolean $z0, $z1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>("/data/data/com.android.settings/files/wallpaper");

        r1 = $r4;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>("/data/system/wallpaper_info.xml");

        r2 = $r5;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r8 = new java.io.File;

        $r9 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, "wallpaper");

        r3 = $r8;

        virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>(r3);

     label1:
        $z1 = virtualinvoke r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r6 = new java.io.File;

        $r7 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, "wallpaper_info.xml");

        r10 = $r6;

        virtualinvoke r2.<java.io.File: boolean renameTo(java.io.File)>(r10);

     label2:
        return;
    }

    private int getAttributeInt(org.xmlpull.v1.XmlPullParser, java.lang.String, int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        java.lang.String r2, r3;
        int i0, $i1;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r2);

        if r3 != null goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

        return $i1;
    }

    private void loadSettingsLocked(int)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i16;
        com.android.internal.util.JournaledFile r1;
        java.io.FileInputStream r2, $r10;
        java.io.File r3;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r4, $r25;
        boolean z0, $z1, $z2, $z3;
        org.xmlpull.v1.XmlPullParser r5;
        java.lang.String r6, r7, $r12, $r13, $r14, $r18, $r21, $r26, $r35, $r45, $r51, $r52, $r60;
        android.util.SparseArray $r8, $r30;
        java.lang.Object $r9;
        android.graphics.Rect $r11, $r15, $r16, $r17, $r19;
        android.content.ComponentName $r20, $r22, $r23, $r24;
        java.lang.StringBuilder $r27, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r41, $r42, $r43, $r44, $r47, $r48, $r49, $r50, $r54, $r55, $r56, $r57, $r58, $r59, $r61, $r62, $r64;
        java.lang.NumberFormatException $r28, r67;
        java.io.IOException $r29, $r40, r69;
        org.xmlpull.v1.XmlPullParserException $r34, r68;
        java.lang.NullPointerException $r46, r66;
        java.io.FileNotFoundException $r53;
        java.lang.IndexOutOfBoundsException $r63, r70;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        i0 := @parameter0: int;

        r1 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r2 = null;

        r3 = virtualinvoke r1.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

        $z1 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label01;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void migrateFromOld()>();

     label01:
        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r9 = virtualinvoke $r8.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r9;

        if r4 != null goto label02;

        $r25 = new com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke $r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: void <init>(int)>(i0);

        r4 = $r25;

        $r30 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        virtualinvoke $r30.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

     label02:
        z0 = 0;

     label03:
        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r3);

        r2 = $r10;

        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r2, null);

     label04:
        i1 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>();

        if i1 != 2 goto label08;

        r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r12 = "wp";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 == 0 goto label08;

        $r13 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "width");

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13);

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width> = $i4;

        $r14 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "height");

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14);

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height> = $i5;

        $r15 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i6 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r5, "paddingLeft", 0);

        $r15.<android.graphics.Rect: int left> = $i6;

        $r17 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i8 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r5, "paddingTop", 0);

        $r17.<android.graphics.Rect: int top> = $i8;

        $r16 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i7 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r5, "paddingRight", 0);

        $r16.<android.graphics.Rect: int right> = $i7;

        $r19 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        $i9 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getAttributeInt(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r5, "paddingBottom", 0);

        $r19.<android.graphics.Rect: int bottom> = $i9;

        $r18 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = $r18;

        r7 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "component");

        if r7 == null goto label05;

        $r24 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r7);

        goto label06;

     label05:
        $r24 = null;

     label06:
        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = $r24;

        $r22 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r22 == null goto label07;

        $r21 = "android";

        $r20 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r26 = virtualinvoke $r20.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r26);

        if $z3 == 0 goto label08;

     label07:
        $r23 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent> = $r23;

     label08:
        if i1 != 1 goto label04;

        z0 = 1;

     label09:
        goto label16;

     label10:
        $r53 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", "no current wallpaper -- first boot?");

        goto label16;

     label11:
        $r46 := @caughtexception;

        r66 = $r46;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r66);

        $r52 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r52);

        goto label16;

     label12:
        $r28 := @caughtexception;

        r67 = $r28;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r36 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r35);

        goto label16;

     label13:
        $r34 := @caughtexception;

        r68 = $r34;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r43 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r68);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r45);

        goto label16;

     label14:
        $r40 := @caughtexception;

        r69 = $r40;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r48 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r69);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r51);

        goto label16;

     label15:
        $r63 := @caughtexception;

        r70 = $r63;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r59 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r70);

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("WallpaperManagerService", $r60);

     label16:
        if r2 == null goto label17;

        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r29 := @caughtexception;

     label19:
        if z0 != 0 goto label20;

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width> = -1;

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height> = -1;

        $r11 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        virtualinvoke $r11.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

     label20:
        i16 = specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: int getMaximumSizeDimension()>();

        $i3 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        if $i3 >= i16 goto label21;

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width> = i16;

     label21:
        $i2 = r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        if $i2 >= i16 goto label22;

        r4.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height> = i16;

     label22:
        return;

        catch java.io.FileNotFoundException from label03 to label09 with label10;
        catch java.lang.NullPointerException from label03 to label09 with label11;
        catch java.lang.NumberFormatException from label03 to label09 with label12;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label09 with label13;
        catch java.io.IOException from label03 to label09 with label14;
        catch java.lang.IndexOutOfBoundsException from label03 to label09 with label15;
        catch java.io.IOException from label16 to label17 with label18;
    }

    private int getMaximumSizeDimension()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        android.view.WindowManager r1;
        android.view.Display r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $r3 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r1 = (android.view.WindowManager) $r4;

        r2 = interfaceinvoke r1.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke r2.<android.view.Display: int getMaximumSizeDimension()>();

        return $i0;
    }

    public void settingsRestored()
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.lang.Object r1, $r4, $r6, $r10, r26;
        java.lang.Throwable r2, r3, $r22, $r24;
        int $i0;
        android.util.SparseArray $r5;
        android.content.ComponentName $r7, $r18, $r19, $r20, $r21;
        java.lang.String $r8, $r9, $r12, $r16;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r11, $r13, $r14, $r15;
        java.io.File $r17;
        java.lang.RuntimeException $r23;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r25;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label01;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.String)>("settingsRestored() can only be called from the system process");

        throw $r23;

     label01:
        $r4 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r1 = $r4;

        entermonitor $r4;

     label02:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void loadSettingsLocked(int)>(0);

        $r5 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(0);

        r25 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r6;

        $r7 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        if $r7 == null goto label04;

        $r19 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $r20 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.ComponentName mImageWallpaper>;

        $z2 = virtualinvoke $r19.<android.content.ComponentName: boolean equals(java.lang.Object)>($r20);

        if $z2 != 0 goto label04;

        $r21 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        $z1 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r21, 0, 0, r25, null);

        if $z1 != 0 goto label03;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>(null, 0, 0, r25, null);

     label03:
        z3 = 1;

        goto label07;

     label04:
        $r9 = "";

        $r8 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label05;

        z3 = 1;

        goto label06;

     label05:
        z3 = virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean restoreNamedResourceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r25);

     label06:
        if z3 == 0 goto label07;

        $r18 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName nextWallpaperComponent>;

        virtualinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: boolean bindWallpaperComponentLocked(android.content.ComponentName,boolean,boolean,com.android.server.wallpaper.WallpaperManagerService$WallpaperData,android.os.IRemoteCallback)>($r18, 0, 0, r25, null);

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r24 := @caughtexception;

        r2 = $r24;

        exitmonitor r1;

     label10:
        throw r2;

     label11:
        if z3 != 0 goto label12;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore wallpaper: \'");

        $r12 = r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r16);

        r25.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name> = "";

        $r17 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(0);

        virtualinvoke $r17.<java.io.File: boolean delete()>();

     label12:
        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r26 = $r10;

        entermonitor $r10;

     label13:
        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r25);

        exitmonitor r26;

     label14:
        goto label17;

     label15:
        $r22 := @caughtexception;

        r3 = $r22;

        exitmonitor r26;

     label16:
        throw r3;

     label17:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    boolean restoreNamedResourceLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;
        java.lang.String r2, r3, r4, r5, $r13, $r15, $r16, $r17, $r18, $r25, $r35, $r38, $r52;
        int i0, i1, i2, $i3, $i4, $i6, $i8, $i9, i13;
        java.io.InputStream r6;
        java.io.FileOutputStream r7, $r22;
        android.content.Context r8, $r19;
        android.content.res.Resources r9;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable r11, $r42;
        java.io.File $r20, $r23, $r27;
        java.lang.StringBuilder $r21, $r24, $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r36, $r37, $r41, $r47, $r55, $r56, $r57;
        java.io.IOException $r39, $r43, $r44, $r45, $r46, $r49, $r50, $r51, $r53, $r54, $r58, $r59, $r60, r70;
        android.content.res.Resources$NotFoundException $r40;
        android.content.pm.PackageManager$NameNotFoundException $r48;
        byte[] r62;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        $r13 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $i3 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i3 <= 4 goto label64;

        $r17 = "res:";

        $r15 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label64;

        $r18 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        r2 = virtualinvoke $r18.<java.lang.String: java.lang.String substring(int)>(4);

        r3 = null;

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i0 <= 0 goto label01;

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label01:
        r4 = null;

        i1 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(47);

        if i1 <= 0 goto label02;

        $i8 = i1 + 1;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i8);

     label02:
        r5 = null;

        if i0 <= 0 goto label03;

        if i1 <= 0 goto label03;

        $i6 = i1 - i0;

        if $i6 <= 1 goto label03;

        $i9 = i0 + 1;

        r5 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>($i9, i1);

     label03:
        if r3 == null goto label64;

        if r4 == null goto label64;

        if r5 == null goto label64;

        i2 = -1;

        r6 = null;

        r7 = null;

     label04:
        $r19 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        r8 = virtualinvoke $r19.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>(r3, 4);

        r9 = virtualinvoke r8.<android.content.Context: android.content.res.Resources getResources()>();

        i2 = virtualinvoke r9.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r2, null, null);

        if i2 != 0 goto label14;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t resolve identifier pkg=");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r34 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" type=");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ident=");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r35 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r35);

        z0 = 0;

     label05:
        if r6 == null goto label09;

     label06:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r44 := @caughtexception;

     label09:
        if r7 == null goto label13;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label10:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label11:
        goto label13;

     label12:
        $r46 := @caughtexception;

     label13:
        return z0;

     label14:
        r6 = virtualinvoke r9.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(i2);

        $r20 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        $z3 = virtualinvoke $r20.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label15;

        $r27 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        virtualinvoke $r27.<java.io.File: boolean delete()>();

     label15:
        $r22 = new java.io.FileOutputStream;

        $r23 = r1.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.io.File wallpaperFile>;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>($r23);

        r7 = $r22;

        r62 = newarray (byte)[32768];

     label16:
        $i4 = virtualinvoke r6.<java.io.InputStream: int read(byte[])>(r62);

        i13 = $i4;

        if $i4 <= 0 goto label17;

        virtualinvoke r7.<java.io.FileOutputStream: void write(byte[],int,int)>(r62, 0, i13);

        goto label16;

     label17:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restored wallpaper: ");

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("WallpaperManagerService", $r25);

        z1 = 1;

     label18:
        if r6 == null goto label22;

     label19:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r45 := @caughtexception;

     label22:
        if r7 == null goto label26;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label23:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label24:
        goto label26;

     label25:
        $r54 := @caughtexception;

     label26:
        return z1;

     label27:
        $r48 := @caughtexception;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package name ");

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r52 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r52);

     label28:
        if r6 == null goto label32;

     label29:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label30:
        goto label32;

     label31:
        $r49 := @caughtexception;

     label32:
        if r7 == null goto label64;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label33:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label34:
        goto label64;

     label35:
        $r39 := @caughtexception;

        goto label64;

     label36:
        $r40 := @caughtexception;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource not found: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("WallpaperManagerService", $r38);

     label37:
        if r6 == null goto label41;

     label38:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label39:
        goto label41;

     label40:
        $r60 := @caughtexception;

     label41:
        if r7 == null goto label64;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label42:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label43:
        goto label64;

     label44:
        $r51 := @caughtexception;

        goto label64;

     label45:
        $r50 := @caughtexception;

        r70 = $r50;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WallpaperManagerService", "IOException while restoring wallpaper ", r70);

     label46:
        if r6 == null goto label50;

     label47:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label48:
        goto label50;

     label49:
        $r58 := @caughtexception;

     label50:
        if r7 == null goto label64;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label51:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label52:
        goto label64;

     label53:
        $r53 := @caughtexception;

        goto label64;

     label54:
        $r42 := @caughtexception;

        r11 = $r42;

     label55:
        if r6 == null goto label59;

     label56:
        virtualinvoke r6.<java.io.InputStream: void close()>();

     label57:
        goto label59;

     label58:
        $r43 := @caughtexception;

     label59:
        if r7 == null goto label63;

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r7);

     label60:
        virtualinvoke r7.<java.io.FileOutputStream: void close()>();

     label61:
        goto label63;

     label62:
        $r59 := @caughtexception;

     label63:
        throw r11;

     label64:
        return 0;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label27;
        catch android.content.pm.PackageManager$NameNotFoundException from label14 to label18 with label27;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.io.IOException from label33 to label34 with label35;
        catch android.content.res.Resources$NotFoundException from label04 to label05 with label36;
        catch android.content.res.Resources$NotFoundException from label14 to label18 with label36;
        catch java.io.IOException from label38 to label39 with label40;
        catch java.io.IOException from label42 to label43 with label44;
        catch java.io.IOException from label04 to label05 with label45;
        catch java.io.IOException from label14 to label18 with label45;
        catch java.io.IOException from label47 to label48 with label49;
        catch java.io.IOException from label51 to label52 with label53;
        catch java.lang.Throwable from label04 to label05 with label54;
        catch java.lang.Throwable from label14 to label18 with label54;
        catch java.lang.Throwable from label27 to label28 with label54;
        catch java.lang.Throwable from label36 to label37 with label54;
        catch java.lang.Throwable from label45 to label46 with label54;
        catch java.io.IOException from label56 to label57 with label58;
        catch java.io.IOException from label60 to label61 with label62;
        catch java.lang.Throwable from label54 to label55 with label54;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r9, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i9, $i10;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r5;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection r6, $r22;
        java.lang.Throwable r7, $r32;
        android.content.Context $r8;
        android.util.SparseArray $r10, $r11;
        java.lang.StringBuilder $r12, $r14, $r15, $r16, $r26, $r27, $r30, $r31, $r33;
        java.lang.String $r17, $r20, $r34;
        android.graphics.Rect $r18;
        android.content.ComponentName $r19, $r29;
        android.app.WallpaperInfo $r21, $r28;
        android.service.wallpaper.IWallpaperService $r23;
        android.os.Binder $r24;
        long $l6, $l7, $l8;
        android.service.wallpaper.IWallpaperEngine $r25;

        r0 := @this: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.content.Context mContext>;

        $i1 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i1 == 0 goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump wallpaper service from from pid=");

        $i10 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r34);

        return;

     label01:
        $r9 = r0.<com.android.server.wallpaper.WallpaperManagerService: java.lang.Object mLock>;

        r4 = $r9;

        entermonitor $r9;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Current Wallpaper Service state:");

        i0 = 0;

     label03:
        $r10 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $i2 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        if i0 >= $i2 goto label06;

        $r11 = r0.<com.android.server.wallpaper.WallpaperManagerService: android.util.SparseArray mWallpaperMap>;

        $r13 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r5 = (com.android.server.wallpaper.WallpaperManagerService$WallpaperData) $r13;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" User ");

        $i3 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int userId>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r17);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mWidth=");

        $i4 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int width>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mHeight=");

        $i5 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: int height>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mPadding=");

        $r18 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.graphics.Rect padding>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r18);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mName=");

        $r20 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: java.lang.String name>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mWallpaperComponent=");

        $r19 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: android.content.ComponentName wallpaperComponent>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r19);

        $r22 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        if $r22 == null goto label05;

        r6 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection connection>;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  Wallpaper connection ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.Object)>(r6);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r21 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        if $r21 == null goto label04;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mInfo.component=");

        $r28 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.app.WallpaperInfo mInfo>;

        $r29 = virtualinvoke $r28.<android.app.WallpaperInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r29);

     label04:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mToken=");

        $r24 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.os.Binder mToken>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r24);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mService=");

        $r23 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperService mService>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r23);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mEngine=");

        $r25 = r6.<com.android.server.wallpaper.WallpaperManagerService$WallpaperConnection: android.service.wallpaper.IWallpaperEngine mEngine>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r25);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    mLastDiedTime=");

        $l8 = r5.<com.android.server.wallpaper.WallpaperManagerService$WallpaperData: long lastDiedTime>;

        $l6 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l7 = $l8 - $l6;

        virtualinvoke r2.<java.io.PrintWriter: void println(long)>($l7);

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r32 := @caughtexception;

        r7 = $r32;

        exitmonitor r4;

     label09:
        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static java.io.File access$000(int)
    {
        int i0;
        java.io.File $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.wallpaper.WallpaperManagerService: java.io.File getWallpaperDir(int)>(i0);

        return $r0;
    }

    static void access$100(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void notifyCallbacksLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    static void access$200(com.android.server.wallpaper.WallpaperManagerService, com.android.server.wallpaper.WallpaperManagerService$WallpaperData)
    {
        com.android.server.wallpaper.WallpaperManagerService r0;
        com.android.server.wallpaper.WallpaperManagerService$WallpaperData r1;

        r0 := @parameter0: com.android.server.wallpaper.WallpaperManagerService;

        r1 := @parameter1: com.android.server.wallpaper.WallpaperManagerService$WallpaperData;

        specialinvoke r0.<com.android.server.wallpaper.WallpaperManagerService: void saveSettingsLocked(com.android.server.wallpaper.WallpaperManagerService$WallpaperData)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER_INFO> = "wallpaper_info.xml";

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String WALLPAPER> = "wallpaper";

        <com.android.server.wallpaper.WallpaperManagerService: long MIN_WALLPAPER_CRASH_TIME> = 10000L;

        <com.android.server.wallpaper.WallpaperManagerService: boolean DEBUG> = 0;

        <com.android.server.wallpaper.WallpaperManagerService: java.lang.String TAG> = "WallpaperManagerService";

        return;
    }
}
