public class com.android.server.net.NetworkStatsService extends android.net.INetworkStatsService$Stub
{
    private static final java.lang.String TAG;
    private static final boolean LOGV;
    private static final int MSG_PERFORM_POLL;
    private static final int MSG_UPDATE_IFACES;
    private static final int MSG_REGISTER_GLOBAL_ALERT;
    private static final int FLAG_PERSIST_NETWORK;
    private static final int FLAG_PERSIST_UID;
    private static final int FLAG_PERSIST_ALL;
    private static final int FLAG_PERSIST_FORCE;
    private static final java.lang.String TAG_NETSTATS_ERROR;
    private final android.content.Context mContext;
    private final android.os.INetworkManagementService mNetworkManager;
    private final android.app.AlarmManager mAlarmManager;
    private final android.util.TrustedTime mTime;
    private final android.telephony.TelephonyManager mTeleManager;
    private final com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings;
    private final java.io.File mSystemDir;
    private final java.io.File mBaseDir;
    private final android.os.PowerManager$WakeLock mWakeLock;
    private android.net.IConnectivityManager mConnManager;
    public static final java.lang.String ACTION_NETWORK_STATS_POLL;
    public static final java.lang.String ACTION_NETWORK_STATS_UPDATED;
    private android.app.PendingIntent mPollIntent;
    private static final java.lang.String PREFIX_DEV;
    private static final java.lang.String PREFIX_XT;
    private static final java.lang.String PREFIX_UID;
    private static final java.lang.String PREFIX_UID_TAG;
    private final java.lang.Object mStatsLock;
    private final android.util.ArrayMap mActiveIfaces;
    private final android.util.ArrayMap mActiveUidIfaces;
    private java.lang.String mActiveIface;
    private java.lang.String[] mMobileIfaces;
    private final com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver;
    private com.android.server.net.NetworkStatsRecorder mDevRecorder;
    private com.android.server.net.NetworkStatsRecorder mXtRecorder;
    private com.android.server.net.NetworkStatsRecorder mUidRecorder;
    private com.android.server.net.NetworkStatsRecorder mUidTagRecorder;
    private com.android.server.net.NetworkStatsCollection mDevStatsCached;
    private com.android.server.net.NetworkStatsCollection mXtStatsCached;
    private android.util.SparseIntArray mActiveUidCounterSet;
    private android.net.NetworkStats mUidOperations;
    private final android.os.Handler mHandler;
    private boolean mSystemReady;
    private long mPersistThreshold;
    private long mGlobalAlertBytes;
    private android.content.BroadcastReceiver mConnReceiver;
    private android.content.BroadcastReceiver mTetherReceiver;
    private android.content.BroadcastReceiver mPollReceiver;
    private android.content.BroadcastReceiver mRemovedReceiver;
    private android.content.BroadcastReceiver mUserReceiver;
    private android.content.BroadcastReceiver mShutdownReceiver;
    private android.net.INetworkManagementEventObserver mAlertObserver;
    private int mLastPhoneState;
    private int mLastPhoneNetworkType;
    private android.telephony.PhoneStateListener mPhoneListener;
    private android.os.Handler$Callback mHandlerCallback;

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.app.IAlarmManager)
    {
        com.android.server.net.NetworkStatsService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        android.app.IAlarmManager r3;
        android.util.NtpTrustedTime $r4;
        java.io.File $r5;
        com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings $r6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.app.IAlarmManager;

        $r4 = staticinvoke <android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)>(r1);

        $r5 = staticinvoke <com.android.server.net.NetworkStatsService: java.io.File getDefaultSystemDir()>();

        $r6 = new com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings;

        specialinvoke $r6.<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void <init>(android.content.Context,android.os.INetworkManagementService,android.app.IAlarmManager,android.util.TrustedTime,java.io.File,com.android.server.net.NetworkStatsService$NetworkStatsSettings)>(r1, r2, r3, $r4, $r5, $r6);

        return;
    }

    private static java.io.File getDefaultSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.app.IAlarmManager, android.util.TrustedTime, java.io.File, com.android.server.net.NetworkStatsService$NetworkStatsSettings)
    {
        com.android.server.net.NetworkStatsService r0;
        android.content.Context r1, $r27;
        android.os.INetworkManagementService r2, $r29;
        android.app.IAlarmManager r3;
        android.util.TrustedTime r4, $r31;
        java.io.File r5, $r44, $r45, $r47;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings r6, $r33;
        android.os.PowerManager r7;
        android.os.HandlerThread r8, $r42;
        java.lang.Object $r9, $r24, $r26, $r28, $r32, $r34, $r36, $r38, $r46;
        android.util.ArrayMap $r10, $r11;
        java.lang.String[] $r12;
        com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver $r13;
        android.util.SparseIntArray $r14;
        android.net.NetworkStats $r15;
        com.android.server.net.NetworkStatsService$3 $r16;
        com.android.server.net.NetworkStatsService$2 $r17;
        com.android.server.net.NetworkStatsService$5 $r18;
        com.android.server.net.NetworkStatsService$4 $r19;
        com.android.server.net.NetworkStatsService$7 $r20;
        com.android.server.net.NetworkStatsService$6 $r21;
        com.android.server.net.NetworkStatsService$9 $r22;
        com.android.server.net.NetworkStatsService$8 $r23;
        com.android.server.net.NetworkStatsService$10 $r25;
        android.telephony.TelephonyManager $r30, $r35;
        android.os.PowerManager$WakeLock $r37;
        android.app.AlarmManager $r39;
        android.os.Looper $r40;
        android.os.Handler$Callback $r41;
        android.os.Handler $r43;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.app.IAlarmManager;

        r4 := @parameter3: android.util.TrustedTime;

        r5 := @parameter4: java.io.File;

        r6 := @parameter5: com.android.server.net.NetworkStatsService$NetworkStatsSettings;

        specialinvoke r0.<android.net.INetworkStatsService$Stub: void <init>()>();

        $r9 = new java.lang.Object;

        specialinvoke $r9.<java.lang.Object: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock> = $r9;

        $r10 = new android.util.ArrayMap;

        specialinvoke $r10.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces> = $r10;

        $r11 = new android.util.ArrayMap;

        specialinvoke $r11.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces> = $r11;

        $r12 = newarray (java.lang.String)[0];

        r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces> = $r12;

        $r13 = new com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver;

        specialinvoke $r13.<com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver: void <init>(com.android.server.net.NetworkStatsService,com.android.server.net.NetworkStatsService$1)>(r0, null);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver> = $r13;

        $r14 = new android.util.SparseIntArray;

        specialinvoke $r14.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet> = $r14;

        $r15 = new android.net.NetworkStats;

        specialinvoke $r15.<android.net.NetworkStats: void <init>(long,int)>(0L, 10);

        r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations> = $r15;

        r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold> = 2097152L;

        $r17 = new com.android.server.net.NetworkStatsService$2;

        specialinvoke $r17.<com.android.server.net.NetworkStatsService$2: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mConnReceiver> = $r17;

        $r16 = new com.android.server.net.NetworkStatsService$3;

        specialinvoke $r16.<com.android.server.net.NetworkStatsService$3: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver> = $r16;

        $r19 = new com.android.server.net.NetworkStatsService$4;

        specialinvoke $r19.<com.android.server.net.NetworkStatsService$4: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver> = $r19;

        $r18 = new com.android.server.net.NetworkStatsService$5;

        specialinvoke $r18.<com.android.server.net.NetworkStatsService$5: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver> = $r18;

        $r21 = new com.android.server.net.NetworkStatsService$6;

        specialinvoke $r21.<com.android.server.net.NetworkStatsService$6: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mUserReceiver> = $r21;

        $r20 = new com.android.server.net.NetworkStatsService$7;

        specialinvoke $r20.<com.android.server.net.NetworkStatsService$7: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver> = $r20;

        $r23 = new com.android.server.net.NetworkStatsService$8;

        specialinvoke $r23.<com.android.server.net.NetworkStatsService$8: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.net.INetworkManagementEventObserver mAlertObserver> = $r23;

        r0.<com.android.server.net.NetworkStatsService: int mLastPhoneState> = -1;

        r0.<com.android.server.net.NetworkStatsService: int mLastPhoneNetworkType> = 0;

        $r22 = new com.android.server.net.NetworkStatsService$9;

        specialinvoke $r22.<com.android.server.net.NetworkStatsService$9: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.telephony.PhoneStateListener mPhoneListener> = $r22;

        $r25 = new com.android.server.net.NetworkStatsService$10;

        specialinvoke $r25.<com.android.server.net.NetworkStatsService$10: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        r0.<com.android.server.net.NetworkStatsService: android.os.Handler$Callback mHandlerCallback> = $r25;

        $r24 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing Context");

        $r27 = (android.content.Context) $r24;

        r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext> = $r27;

        $r26 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "missing INetworkManagementService");

        $r29 = (android.os.INetworkManagementService) $r26;

        r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager> = $r29;

        $r28 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "missing TrustedTime");

        $r31 = (android.util.TrustedTime) $r28;

        r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime> = $r31;

        $r30 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>();

        $r34 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r30, "missing TelephonyManager");

        $r35 = (android.telephony.TelephonyManager) $r34;

        r0.<com.android.server.net.NetworkStatsService: android.telephony.TelephonyManager mTeleManager> = $r35;

        $r32 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r6, "missing NetworkStatsSettings");

        $r33 = (com.android.server.net.NetworkStatsService$NetworkStatsSettings) $r32;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings> = $r33;

        $r38 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r39 = (android.app.AlarmManager) $r38;

        r0.<com.android.server.net.NetworkStatsService: android.app.AlarmManager mAlarmManager> = $r39;

        $r36 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r7 = (android.os.PowerManager) $r36;

        $r37 = virtualinvoke r7.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "NetworkStats");

        r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock> = $r37;

        $r42 = new android.os.HandlerThread;

        specialinvoke $r42.<android.os.HandlerThread: void <init>(java.lang.String)>("NetworkStats");

        r8 = $r42;

        virtualinvoke r8.<android.os.HandlerThread: void start()>();

        $r43 = new android.os.Handler;

        $r40 = virtualinvoke r8.<android.os.HandlerThread: android.os.Looper getLooper()>();

        $r41 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler$Callback mHandlerCallback>;

        specialinvoke $r43.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r40, $r41);

        r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler> = $r43;

        $r46 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r5);

        $r47 = (java.io.File) $r46;

        r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir> = $r47;

        $r44 = new java.io.File;

        specialinvoke $r44.<java.io.File: void <init>(java.io.File,java.lang.String)>(r5, "netstats");

        r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir> = $r44;

        $r45 = r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir>;

        virtualinvoke $r45.<java.io.File: boolean mkdirs()>();

        return;
    }

    public void bindConnectivityManager(android.net.IConnectivityManager)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.IConnectivityManager r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.IConnectivityManager;

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "missing IConnectivityManager");

        $r3 = (android.net.IConnectivityManager) $r2;

        r0.<com.android.server.net.NetworkStatsService: android.net.IConnectivityManager mConnManager> = $r3;

        return;
    }

    public void systemReady()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.Object r1, $r19;
        java.lang.Throwable r2, $r54;
        android.content.IntentFilter r3, r4, r5, r6, $r25, $r32, $r37, $r38, $r42, $r53, r58, r59;
        boolean $z0;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r8, $r11, $r13, $r16;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config $r9, $r12, $r15, $r18;
        com.android.server.net.NetworkStatsRecorder $r10, $r14, $r17, $r20, $r22, $r24;
        com.android.server.net.NetworkStatsCollection $r21, $r23;
        android.content.Context $r26, $r31, $r40, $r44, $r47, $r51;
        android.os.Handler $r28, $r33, $r34, $r39, $r49;
        android.content.BroadcastReceiver $r29, $r30, $r35, $r45, $r48, $r52;
        android.os.INetworkManagementService $r55;
        android.net.INetworkManagementEventObserver $r56;
        android.os.RemoteException $r57;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady> = 1;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean isBandwidthControlEnabled()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", "bandwidth controls disabled, unable to track stats");

        return;

     label01:
        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r9 = interfaceinvoke $r8.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getDevConfig()>();

        $r10 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("dev", $r9, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder> = $r10;

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r12 = interfaceinvoke $r11.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getXtConfig()>();

        $r14 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("xt", $r12, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder> = $r14;

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r15 = interfaceinvoke $r13.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidConfig()>();

        $r17 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("uid", $r15, 0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder> = $r17;

        $r16 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $r18 = interfaceinvoke $r16.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config getUidTagConfig()>();

        $r20 = specialinvoke r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String,com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config,boolean)>("uid_tag", $r18, 1);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder> = $r20;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updatePersistThresholds()>();

        $r19 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r19;

        entermonitor $r19;

     label02:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void maybeUpgradeLegacyStatsLocked()>();

        $r22 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r21 = virtualinvoke $r22.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached> = $r21;

        $r24 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r23 = virtualinvoke $r24.<com.android.server.net.NetworkStatsRecorder: com.android.server.net.NetworkStatsCollection getOrLoadCompleteLocked()>();

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached> = $r23;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void bootstrapStatsLocked()>();

        exitmonitor r1;

     label03:
        goto label06;

     label04:
        $r54 := @caughtexception;

        r2 = $r54;

        exitmonitor r1;

     label05:
        throw r2;

     label06:
        $r25 = new android.content.IntentFilter;

        specialinvoke $r25.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE_IMMEDIATE");

        r58 = $r25;

        $r26 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r29 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mConnReceiver>;

        $r28 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r26.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r29, r58, "android.permission.CONNECTIVITY_INTERNAL", $r28);

        $r32 = new android.content.IntentFilter;

        specialinvoke $r32.<android.content.IntentFilter: void <init>(java.lang.String)>("android.net.conn.TETHER_STATE_CHANGED");

        r59 = $r32;

        $r31 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r30 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver>;

        $r33 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r31.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r30, r59, null, $r33);

        $r37 = new android.content.IntentFilter;

        specialinvoke $r37.<android.content.IntentFilter: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_POLL");

        r3 = $r37;

        $r40 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r35 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver>;

        $r34 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r40.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r35, r3, "android.permission.READ_NETWORK_USAGE_HISTORY", $r34);

        $r38 = new android.content.IntentFilter;

        specialinvoke $r38.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.UID_REMOVED");

        r4 = $r38;

        $r44 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r45 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver>;

        $r39 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r44.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r45, r4, null, $r39);

        $r42 = new android.content.IntentFilter;

        specialinvoke $r42.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_REMOVED");

        r5 = $r42;

        $r47 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r48 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mUserReceiver>;

        $r49 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        virtualinvoke $r47.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r48, r5, null, $r49);

        $r53 = new android.content.IntentFilter;

        specialinvoke $r53.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.ACTION_SHUTDOWN");

        r6 = $r53;

        $r51 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r52 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver>;

        virtualinvoke $r51.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r52, r6);

     label07:
        $r55 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        $r56 = r0.<com.android.server.net.NetworkStatsService: android.net.INetworkManagementEventObserver mAlertObserver>;

        interfaceinvoke $r55.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r56);

     label08:
        goto label10;

     label09:
        $r57 := @caughtexception;

     label10:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerPollAlarmLocked()>();

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch android.os.RemoteException from label07 to label08 with label09;
    }

    private com.android.server.net.NetworkStatsRecorder buildRecorder(java.lang.String, com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config, boolean)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String r1;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config r2;
        boolean z0;
        android.os.DropBoxManager r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        com.android.server.net.NetworkStatsRecorder $r6;
        com.android.internal.util.FileRotator $r7;
        long $l0, $l1, $l2;
        java.io.File $r8;
        com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config;

        z0 := @parameter2: boolean;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("dropbox");

        r3 = (android.os.DropBoxManager) $r5;

        $r6 = new com.android.server.net.NetworkStatsRecorder;

        $r7 = new com.android.internal.util.FileRotator;

        $r8 = r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir>;

        $l1 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long rotateAgeMillis>;

        $l0 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long deleteAgeMillis>;

        specialinvoke $r7.<com.android.internal.util.FileRotator: void <init>(java.io.File,java.lang.String,long,long)>($r8, r1, $l1, $l0);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$DropBoxNonMonotonicObserver mNonMonotonicObserver>;

        $l2 = r2.<com.android.server.net.NetworkStatsService$NetworkStatsSettings$Config: long bucketDuration>;

        specialinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void <init>(com.android.internal.util.FileRotator,android.net.NetworkStats$NonMonotonicObserver,android.os.DropBoxManager,java.lang.String,long,boolean)>($r7, $r9, r3, r1, $l2, z0);

        return $r6;
    }

    private void shutdownLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1;
        android.content.BroadcastReceiver $r1, $r3, $r5, $r7, $r9;
        android.content.Context $r2, $r4, $r6, $r8, $r10;
        android.util.TrustedTime $r11, $r16;
        boolean $z0;
        com.android.server.net.NetworkStatsRecorder $r12, $r13, $r14, $r15;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mConnReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mTetherReceiver>;

        virtualinvoke $r4.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r3);

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mPollReceiver>;

        virtualinvoke $r6.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r5);

        $r8 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mRemovedReceiver>;

        virtualinvoke $r8.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r7);

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.net.NetworkStatsService: android.content.BroadcastReceiver mShutdownReceiver>;

        virtualinvoke $r10.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r9);

        $r11 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r11.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r16 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l1 = interfaceinvoke $r16.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label2;

     label1:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        l0 = $l1;

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r13.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r12 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r12.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r15 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r15.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        $r14 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r14.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l0);

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder> = null;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder> = null;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder> = null;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder> = null;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached> = null;

        r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached> = null;

        r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady> = 0;

        return;
    }

    private void maybeUpgradeLegacyStatsLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        java.io.File r1, $r3, $r4, $r5, $r6, $r7, $r8, r14, r15;
        java.io.IOException r2, $r13;
        boolean $z0, $z1, $z2;
        com.android.server.net.NetworkStatsRecorder $r9, $r10, $r11;
        java.lang.OutOfMemoryError $r12, r16;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r3 = new java.io.File;

        $r4 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "netstats.bin");

        r1 = $r3;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r11.<com.android.server.net.NetworkStatsRecorder: void importLegacyNetworkLocked(java.io.File)>(r1);

        virtualinvoke r1.<java.io.File: boolean delete()>();

     label2:
        $r5 = new java.io.File;

        $r6 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, "netstats_xt.bin");

        r14 = $r5;

        $z1 = virtualinvoke r14.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        virtualinvoke r14.<java.io.File: boolean delete()>();

     label3:
        $r7 = new java.io.File;

        $r8 = r0.<com.android.server.net.NetworkStatsService: java.io.File mSystemDir>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "netstats_uid.bin");

        r15 = $r7;

        $z2 = virtualinvoke r15.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label4;

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: void importLegacyUidLocked(java.io.File)>(r15);

        $r10 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r10.<com.android.server.net.NetworkStatsRecorder: void importLegacyUidLocked(java.io.File)>(r15);

        virtualinvoke r15.<java.io.File: boolean delete()>();

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        r2 = $r13;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem during legacy upgrade", r2);

        goto label7;

     label6:
        $r12 := @caughtexception;

        r16 = $r12;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem during legacy upgrade", r16);

     label7:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch java.lang.OutOfMemoryError from label1 to label4 with label6;
    }

    private void registerPollAlarmLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1;
        android.app.PendingIntent $r1, $r4, $r7, $r8;
        android.content.Intent $r2;
        android.content.Context $r3;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r5;
        android.app.AlarmManager $r6, $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.app.PendingIntent mPollIntent>;

        if $r1 == null goto label1;

        $r9 = r0.<com.android.server.net.NetworkStatsService: android.app.AlarmManager mAlarmManager>;

        $r8 = r0.<com.android.server.net.NetworkStatsService: android.app.PendingIntent mPollIntent>;

        virtualinvoke $r9.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r8);

     label1:
        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_POLL");

        $r4 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r3, 0, $r2, 0);

        r0.<com.android.server.net.NetworkStatsService: android.app.PendingIntent mPollIntent> = $r4;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.app.AlarmManager mAlarmManager>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l1 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getPollInterval()>();

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.app.PendingIntent mPollIntent>;

        virtualinvoke $r6.<android.app.AlarmManager: void setInexactRepeating(int,long,long,android.app.PendingIntent)>(3, l0, $l1, $r7);

        return;
    }

    private void registerGlobalAlert()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.IllegalStateException r1, $r3;
        long $l0;
        android.os.INetworkManagementService $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        android.os.RemoteException $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        $l0 = r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void setGlobalAlert(long)>($l0);

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem registering for global alert: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", $r7);

        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        return;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public android.net.INetworkStatsSession openSession()
    {
        com.android.server.net.NetworkStatsService r0;
        android.content.Context $r1;
        com.android.server.net.NetworkStatsService$1 $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_NETWORK_USAGE_HISTORY", "NetworkStats");

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertBandwidthControlEnabled()>();

        $r2 = new com.android.server.net.NetworkStatsService$1;

        specialinvoke $r2.<com.android.server.net.NetworkStatsService$1: void <init>(com.android.server.net.NetworkStatsService)>(r0);

        return $r2;
    }

    private android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, l2, $l3, $l4, $l5, $l6;
        android.net.NetworkStats r2, r3, $r8;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r4;
        boolean $z0;
        com.android.server.net.NetworkStatsCollection $r5, $r6, $r7, $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z0 = interfaceinvoke $r4.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getReportXtOverDev()>();

        if $z0 != 0 goto label1;

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached>;

        $r8 = virtualinvoke $r9.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        return $r8;

     label1:
        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached>;

        l2 = virtualinvoke $r5.<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached>;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l0, l2);

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>(l1, l2);

        r2 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>(r1, $l3, $l4);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached>;

        $l5 = staticinvoke <java.lang.Math: long max(long,long)>(l0, l2);

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>(l1, l2);

        r3 = virtualinvoke $r7.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStats getSummary(android.net.NetworkTemplate,long,long)>(r1, $l5, $l6);

        virtualinvoke r3.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r2);

        return r3;
    }

    private android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        int i0;
        long l1;
        android.net.NetworkStatsHistory r2, r3, $r9;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r4;
        boolean $z0;
        com.android.server.net.NetworkStatsCollection $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.NetworkTemplate;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z0 = interfaceinvoke $r4.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getReportXtOverDev()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached>;

        $r9 = virtualinvoke $r8.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int)>(r1, -1, -1, 0, i0);

        return $r9;

     label1:
        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached>;

        l1 = virtualinvoke $r5.<com.android.server.net.NetworkStatsCollection: long getFirstAtomicBucketMillis()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mDevStatsCached>;

        r2 = virtualinvoke $r6.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)>(r1, -1, -1, 0, i0, -9223372036854775808L, l1);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsCollection mXtStatsCached>;

        r3 = virtualinvoke $r7.<com.android.server.net.NetworkStatsCollection: android.net.NetworkStatsHistory getHistory(android.net.NetworkTemplate,int,int,int,int,long,long)>(r1, -1, -1, 0, i0, l1, 9223372036854775807L);

        virtualinvoke r3.<android.net.NetworkStatsHistory: void recordEntireHistory(android.net.NetworkStatsHistory)>(r2);

        return r3;
    }

    public long getNetworkTotalBytes(android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1, $l2;
        android.content.Context $r2;
        android.net.NetworkStats $r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: android.net.NetworkTemplate;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_NETWORK_USAGE_HISTORY", "NetworkStats");

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertBandwidthControlEnabled()>();

        $r3 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        $l2 = virtualinvoke $r3.<android.net.NetworkStats: long getTotalBytes()>();

        return $l2;
    }

    public android.net.NetworkStats getDataLayerSnapshotForUid(int) throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i2, $i3, $i5, $i6;
        long l1, $l4;
        android.net.NetworkStats r1, $r5, $r6, r11;
        java.lang.Throwable r2, $r9;
        android.net.NetworkStats$Entry r3;
        android.os.INetworkManagementService $r4;
        java.lang.String $r8;
        android.content.Context $r10;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i3 == i0 goto label1;

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "NetworkStats");

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertBandwidthControlEnabled()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r4 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r1 = interfaceinvoke $r4.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>(i0);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label6;

     label4:
        $r9 := @caughtexception;

        r2 = $r9;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label6:
        $r5 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        virtualinvoke r1.<android.net.NetworkStats: void spliceOperationsFrom(android.net.NetworkStats)>($r5);

        $r6 = new android.net.NetworkStats;

        $l4 = virtualinvoke r1.<android.net.NetworkStats: long getElapsedRealtime()>();

        $i5 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        specialinvoke $r6.<android.net.NetworkStats: void <init>(long,int)>($l4, $i5);

        r11 = $r6;

        r3 = null;

        i2 = 0;

     label7:
        $i6 = virtualinvoke r1.<android.net.NetworkStats: int size()>();

        if i2 >= $i6 goto label8;

        r3 = virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>(i2, r3);

        $r8 = <android.net.NetworkStats: java.lang.String IFACE_ALL>;

        r3.<android.net.NetworkStats$Entry: java.lang.String iface> = $r8;

        virtualinvoke r11.<android.net.NetworkStats: android.net.NetworkStats combineValues(android.net.NetworkStats$Entry)>(r3);

        i2 = i2 + 1;

        goto label7;

     label8:
        return r11;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.String[] getMobileIfaces()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces>;

        return $r1;
    }

    public void incrementOperationCount(int, int, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r13;
        android.util.SparseIntArray $r4;
        long $l5, $l6;
        java.lang.String $r5, $r9;
        android.net.NetworkStats $r6, $r8;
        java.lang.IllegalArgumentException $r11, $r12;
        android.content.Context $r14;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i4 == i0 goto label1;

        $r14 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r14.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MODIFY_NETWORK_ACCOUNTING", "NetworkStats");

     label1:
        if i2 >= 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("operation count can only be incremented");

        throw $r11;

     label2:
        if i1 != 0 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("operation count must have specific tag");

        throw $r12;

     label3:
        $r3 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r3;

        entermonitor $r3;

     label4:
        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        i3 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface>;

        $l5 = (long) i2;

        virtualinvoke $r6.<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,int,long,long,long,long,long)>($r5, i0, i3, i1, 0L, 0L, 0L, 0L, $l5);

        $r8 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        $r9 = r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface>;

        $l6 = (long) i2;

        virtualinvoke $r8.<android.net.NetworkStats: android.net.NetworkStats combineValues(java.lang.String,int,int,int,long,long,long,long,long)>($r9, i0, i3, 0, 0L, 0L, 0L, 0L, $l6);

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r2 = $r13;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setUidForeground(int, boolean)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i2;
        boolean z0;
        java.lang.Object r1, $r4;
        byte b1, $b3;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        android.util.SparseIntArray $r5, $r6;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MODIFY_NETWORK_ACCOUNTING", "NetworkStats");

        $r4 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        if z0 == 0 goto label2;

        $b3 = 1;

        goto label3;

     label2:
        $b3 = 0;

     label3:
        b1 = $b3;

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        i2 = virtualinvoke $r5.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        if i2 == b1 goto label4;

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.util.SparseIntArray mActiveUidCounterSet>;

        virtualinvoke $r6.<android.util.SparseIntArray: void put(int,int)>(i0, b1);

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void setKernelCounterSet(int,int)>(i0, b1);

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void forceUpdate()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        java.lang.Throwable r1, $r3;
        android.content.Context $r2;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_NETWORK_USAGE_HISTORY", "NetworkStats");

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertBandwidthControlEnabled()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPoll(int)>(3);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void advisePersistThreshold(long)
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, l1, $l2, $l3;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r11;
        android.content.Context $r3;
        android.util.TrustedTime $r4, $r10;
        boolean $z0, $z1;
        com.android.server.net.NetworkStatsRecorder $r6, $r7, $r8, $r9;

        r0 := @this: com.android.server.net.NetworkStatsService;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MODIFY_NETWORK_ACCOUNTING", "NetworkStats");

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void assertBandwidthControlEnabled()>();

        $l2 = staticinvoke <android.util.MathUtils: long constrain(long,long,long)>(l0, 131072L, 2097152L);

        r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold> = $l2;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r4.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l3 = interfaceinvoke $r10.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label2;

     label1:
        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        l1 = $l3;

        $r5 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r5;

        entermonitor $r5;

     label3:
        $z1 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z1 != 0 goto label5;

        exitmonitor r1;

     label4:
        return;

     label5:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updatePersistThresholds()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l1);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r7.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l1);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l1);

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l1);

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private void updatePersistThresholds()
    {
        com.android.server.net.NetworkStatsService r0;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r1, $r3, $r5, $r7, $r9;
        com.android.server.net.NetworkStatsRecorder $r2, $r4, $r6, $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r2 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l0 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l1 = interfaceinvoke $r1.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getDevPersistBytes(long)>($l0);

        virtualinvoke $r2.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l2 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l3 = interfaceinvoke $r3.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getXtPersistBytes(long)>($l2);

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l3);

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l4 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l5 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getUidPersistBytes(long)>($l4);

        virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l5);

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l6 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l8 = interfaceinvoke $r7.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getUidTagPersistBytes(long)>($l6);

        virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: void setPersistThreshold(long)>($l8);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l7 = r0.<com.android.server.net.NetworkStatsService: long mPersistThreshold>;

        $l9 = interfaceinvoke $r9.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getGlobalAlertBytes(long)>($l7);

        r0.<com.android.server.net.NetworkStatsService: long mGlobalAlertBytes> = $l9;

        return;
    }

    private void updateIfaces()
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, r3, $r7, $r9;
        android.os.PowerManager$WakeLock $r5, $r6, $r8;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r4 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void acquire()>();

     label02:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updateIfacesLocked()>();

     label03:
        $r6 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void release()>();

        goto label06;

     label04:
        $r7 := @caughtexception;

        r2 = $r7;

     label05:
        $r8 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void release()>();

        throw r2;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label09:
        throw r3;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void updateIfacesLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkState[] r1, r4;
        android.net.LinkProperties r2, r10, $r22, $r24;
        int i0, i1, $i2, $i3;
        android.net.NetworkState r5;
        boolean z0, $z1, $z2, $z3;
        android.net.NetworkIdentity r6;
        java.lang.String r7, r11, $r33;
        java.util.List r8;
        java.util.Iterator r9;
        android.net.IConnectivityManager $r12, $r13;
        android.util.ArrayMap $r14, $r15, $r25, $r28, $r31;
        android.util.ArraySet $r16, r34;
        java.lang.Object[] $r17;
        java.lang.String[] $r18, $r20;
        android.net.NetworkInfo $r19, $r21;
        android.content.Context $r23;
        com.android.server.net.NetworkIdentitySet $r26, $r29, $r30;
        java.lang.Object $r27;
        android.os.RemoteException $r32;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $z1 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z1 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(1);

     label02:
        $r12 = r0.<com.android.server.net.NetworkStatsService: android.net.IConnectivityManager mConnManager>;

        r1 = interfaceinvoke $r12.<android.net.IConnectivityManager: android.net.NetworkState[] getAllNetworkState()>();

        $r13 = r0.<com.android.server.net.NetworkStatsService: android.net.IConnectivityManager mConnManager>;

        r2 = interfaceinvoke $r13.<android.net.IConnectivityManager: android.net.LinkProperties getActiveLinkProperties()>();

     label03:
        goto label05;

     label04:
        $r32 := @caughtexception;

        return;

     label05:
        if r2 == null goto label06;

        $r33 = virtualinvoke r2.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        goto label07;

     label06:
        $r33 = null;

     label07:
        r0.<com.android.server.net.NetworkStatsService: java.lang.String mActiveIface> = $r33;

        $r15 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r15.<android.util.ArrayMap: void clear()>();

        $r14 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r14.<android.util.ArrayMap: void clear()>();

        $r16 = new android.util.ArraySet;

        specialinvoke $r16.<android.util.ArraySet: void <init>()>();

        r34 = $r16;

        r4 = r1;

        i0 = lengthof r4;

        i1 = 0;

     label08:
        if i1 >= i0 goto label13;

        r5 = r4[i1];

        $r19 = r5.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $z2 = virtualinvoke $r19.<android.net.NetworkInfo: boolean isConnected()>();

        if $z2 == 0 goto label12;

        $r21 = r5.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $i3 = virtualinvoke $r21.<android.net.NetworkInfo: int getType()>();

        z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>($i3);

        $r23 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        r6 = staticinvoke <android.net.NetworkIdentity: android.net.NetworkIdentity buildNetworkIdentity(android.content.Context,android.net.NetworkState)>($r23, r5);

        $r22 = r5.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r7 = virtualinvoke $r22.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r7 == null goto label09;

        $r28 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r29 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r28, r7);

        virtualinvoke $r29.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r6);

        $r31 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r30 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r31, r7);

        virtualinvoke $r30.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r6);

        if z0 == 0 goto label09;

        virtualinvoke r34.<android.util.ArraySet: boolean add(java.lang.Object)>(r7);

     label09:
        $r24 = r5.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        r8 = virtualinvoke $r24.<android.net.LinkProperties: java.util.List getStackedLinks()>();

        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r27 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (android.net.LinkProperties) $r27;

        r11 = virtualinvoke r10.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if r11 == null goto label11;

        $r25 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r26 = staticinvoke <com.android.server.net.NetworkStatsService: com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap,java.lang.Object)>($r25, r11);

        virtualinvoke $r26.<com.android.server.net.NetworkIdentitySet: boolean add(java.lang.Object)>(r6);

        if z0 == 0 goto label11;

        virtualinvoke r34.<android.util.ArraySet: boolean add(java.lang.Object)>(r11);

     label11:
        goto label10;

     label12:
        i1 = i1 + 1;

        goto label08;

     label13:
        $i2 = virtualinvoke r34.<android.util.ArraySet: int size()>();

        $r18 = newarray (java.lang.String)[$i2];

        $r17 = virtualinvoke r34.<android.util.ArraySet: java.lang.Object[] toArray(java.lang.Object[])>($r18);

        $r20 = (java.lang.String[]) $r17;

        r0.<com.android.server.net.NetworkStatsService: java.lang.String[] mMobileIfaces> = $r20;

        return;

        catch android.os.RemoteException from label02 to label03 with label04;
    }

    private static com.android.server.net.NetworkIdentitySet findOrCreateNetworkIdentitySet(android.util.ArrayMap, java.lang.Object)
    {
        android.util.ArrayMap r0;
        java.lang.Object r1, $r3;
        com.android.server.net.NetworkIdentitySet r2, $r4;

        r0 := @parameter0: android.util.ArrayMap;

        r1 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.net.NetworkIdentitySet) $r3;

        if r2 != null goto label1;

        $r4 = new com.android.server.net.NetworkIdentitySet;

        specialinvoke $r4.<com.android.server.net.NetworkIdentitySet: void <init>()>();

        r2 = $r4;

        virtualinvoke r0.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return r2;
    }

    private void bootstrapStatsLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1;
        android.net.NetworkStats r1, r2, r3;
        android.util.TrustedTime $r4, $r15;
        boolean $z0;
        android.os.INetworkManagementService $r5, $r6;
        android.util.ArrayMap $r7, $r10, $r12, $r14;
        com.android.server.net.NetworkStatsRecorder $r8, $r9, $r11, $r13;
        java.lang.IllegalStateException $r16, r22;
        android.os.RemoteException $r17;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.String $r21;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r4.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r15 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l1 = interfaceinvoke $r15.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label2;

     label1:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label2:
        l0 = $l1;

     label3:
        r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsUidDetail()>();

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r2 = interfaceinvoke $r5.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r3 = interfaceinvoke $r6.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>();

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r3, $r7, l0);

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r2, $r10, l0);

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        $r12 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r11.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r12, l0);

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        $r14 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r13.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r14, l0);

     label4:
        goto label7;

     label5:
        $r16 := @caughtexception;

        r22 = $r16;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem reading network stats: ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NetworkStats", $r21);

        goto label7;

     label6:
        $r17 := @caughtexception;

     label7:
        return;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
        catch android.os.RemoteException from label3 to label4 with label6;
    }

    private void performPoll(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;
        java.lang.Object r1, $r6;
        java.lang.Throwable r2, r3, $r10, $r12;
        android.util.TrustedTime $r4, $r9;
        long $l1, $l2;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r5;
        byte $b3;
        android.os.PowerManager$WakeLock $r7, $r8, $r11;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l1 = interfaceinvoke $r4.<android.util.TrustedTime: long getCacheAge()>();

        $r5 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $l2 = interfaceinvoke $r5.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: long getTimeCacheMaxAge()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label01;

        $r9 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        interfaceinvoke $r9.<android.util.TrustedTime: boolean forceRefresh()>();

     label01:
        $r6 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r1 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r7.<android.os.PowerManager$WakeLock: void acquire()>();

     label03:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(i0);

     label04:
        $r8 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void release()>();

        goto label07;

     label05:
        $r12 := @caughtexception;

        r2 = $r12;

     label06:
        $r11 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void release()>();

        throw r2;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label10:
        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void performPollLocked(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, $i3, $i4, $i5;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        long l2, $l6;
        android.net.NetworkStats r1, r2, r3;
        android.util.TrustedTime $r4, $r26;
        android.os.INetworkManagementService $r5, $r6;
        android.util.ArrayMap $r7, $r8, $r10, $r12;
        com.android.server.net.NetworkStatsRecorder $r9, $r11, $r13, $r15, $r18, $r21, $r22, $r23, $r24, $r25, $r27, $r28;
        android.content.Intent $r14, r33;
        com.android.server.net.NetworkStatsService$NetworkStatsSettings $r16;
        android.content.Context $r17;
        android.os.UserHandle $r20;
        java.lang.IllegalStateException $r29, r31;
        android.os.RemoteException $r30;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        $z3 = r0.<com.android.server.net.NetworkStatsService: boolean mSystemReady>;

        if $z3 != 0 goto label01;

        return;

     label01:
        staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $i3 = i0 & 1;

        if $i3 == 0 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        z0 = $z6;

        $i4 = i0 & 2;

        if $i4 == 0 goto label04;

        $z7 = 1;

        goto label05;

     label04:
        $z7 = 0;

     label05:
        z1 = $z7;

        $i5 = i0 & 256;

        if $i5 == 0 goto label06;

        $z8 = 1;

        goto label07;

     label06:
        $z8 = 0;

     label07:
        z2 = $z8;

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $z4 = interfaceinvoke $r4.<android.util.TrustedTime: boolean hasCache()>();

        if $z4 == 0 goto label08;

        $r26 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l6 = interfaceinvoke $r26.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label09;

     label08:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label09:
        l2 = $l6;

     label10:
        r1 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsUidDetail()>();

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r2 = interfaceinvoke $r5.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r3 = interfaceinvoke $r6.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>();

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        $r7 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r3, $r7, l2);

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        $r8 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        virtualinvoke $r11.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r2, $r8, l2);

        $r13 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        $r10 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r13.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r10, l2);

        $r15 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        $r12 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        virtualinvoke $r15.<com.android.server.net.NetworkStatsRecorder: void recordSnapshotLocked(android.net.NetworkStats,java.util.Map,long)>(r1, $r12, l2);

     label11:
        goto label14;

     label12:
        $r29 := @caughtexception;

        r31 = $r29;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem reading network stats", r31);

        return;

     label13:
        $r30 := @caughtexception;

        return;

     label14:
        if z2 == 0 goto label15;

        $r22 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r22.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l2);

        $r27 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r27.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l2);

        $r28 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r28.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l2);

        $r25 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r25.<com.android.server.net.NetworkStatsRecorder: void forcePersistLocked(long)>(l2);

        goto label17;

     label15:
        if z0 == 0 goto label16;

        $r24 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r24.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l2);

        $r21 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r21.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l2);

     label16:
        if z1 == 0 goto label17;

        $r18 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r18.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l2);

        $r23 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r23.<com.android.server.net.NetworkStatsRecorder: void maybePersistLocked(long)>(l2);

     label17:
        $r16 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsService$NetworkStatsSettings mSettings>;

        $z5 = interfaceinvoke $r16.<com.android.server.net.NetworkStatsService$NetworkStatsSettings: boolean getSampleEnabled()>();

        if $z5 == 0 goto label18;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performSampleLocked()>();

     label18:
        $r14 = new android.content.Intent;

        specialinvoke $r14.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.action.NETWORK_STATS_UPDATED");

        r33 = $r14;

        virtualinvoke r33.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r17 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r20 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r17.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>(r33, $r20, "android.permission.READ_NETWORK_USAGE_HISTORY");

        return;

        catch java.lang.IllegalStateException from label10 to label11 with label12;
        catch android.os.RemoteException from label10 to label11 with label13;
    }

    private void performSampleLocked()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25;
        android.net.NetworkTemplate r1, r13;
        android.net.NetworkStats$Entry r2, r3, r4, r14, r15, r16;
        android.util.TrustedTime $r5, $r12;
        boolean $z0;
        com.android.server.net.NetworkStatsRecorder $r6, $r7, $r8, $r9, $r10, $r11;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $z0 = interfaceinvoke $r5.<android.util.TrustedTime: boolean hasCache()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<com.android.server.net.NetworkStatsService: android.util.TrustedTime mTime>;

        $l25 = interfaceinvoke $r12.<android.util.TrustedTime: long currentTimeMillis()>();

        goto label2;

     label1:
        $l25 = -1L;

     label2:
        l0 = $l25;

        r1 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileWildcard()>();

        $r6 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        r2 = virtualinvoke $r6.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r1);

        $r7 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        r3 = virtualinvoke $r7.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r1);

        $r8 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        r4 = virtualinvoke $r8.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r1);

        $l11 = r2.<android.net.NetworkStats$Entry: long rxBytes>;

        $l12 = r2.<android.net.NetworkStats$Entry: long rxPackets>;

        $l9 = r2.<android.net.NetworkStats$Entry: long txBytes>;

        $l10 = r2.<android.net.NetworkStats$Entry: long txPackets>;

        $l7 = r3.<android.net.NetworkStats$Entry: long rxBytes>;

        $l8 = r3.<android.net.NetworkStats$Entry: long rxPackets>;

        $l5 = r3.<android.net.NetworkStats$Entry: long txBytes>;

        $l6 = r3.<android.net.NetworkStats$Entry: long txPackets>;

        $l3 = r4.<android.net.NetworkStats$Entry: long rxBytes>;

        $l4 = r4.<android.net.NetworkStats$Entry: long rxPackets>;

        $l1 = r4.<android.net.NetworkStats$Entry: long txBytes>;

        $l2 = r4.<android.net.NetworkStats$Entry: long txPackets>;

        staticinvoke <com.android.server.EventLogTags: void writeNetstatsMobileSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>($l11, $l12, $l9, $l10, $l7, $l8, $l5, $l6, $l3, $l4, $l1, $l2, l0);

        r13 = staticinvoke <android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifiWildcard()>();

        $r9 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        r14 = virtualinvoke $r9.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r13);

        $r10 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        r15 = virtualinvoke $r10.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r13);

        $r11 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        r16 = virtualinvoke $r11.<com.android.server.net.NetworkStatsRecorder: android.net.NetworkStats$Entry getTotalSinceBootLocked(android.net.NetworkTemplate)>(r13);

        $l22 = r14.<android.net.NetworkStats$Entry: long rxBytes>;

        $l24 = r14.<android.net.NetworkStats$Entry: long rxPackets>;

        $l23 = r14.<android.net.NetworkStats$Entry: long txBytes>;

        $l19 = r14.<android.net.NetworkStats$Entry: long txPackets>;

        $l18 = r15.<android.net.NetworkStats$Entry: long rxBytes>;

        $l21 = r15.<android.net.NetworkStats$Entry: long rxPackets>;

        $l20 = r15.<android.net.NetworkStats$Entry: long txBytes>;

        $l15 = r15.<android.net.NetworkStats$Entry: long txPackets>;

        $l14 = r16.<android.net.NetworkStats$Entry: long rxBytes>;

        $l17 = r16.<android.net.NetworkStats$Entry: long rxPackets>;

        $l16 = r16.<android.net.NetworkStats$Entry: long txBytes>;

        $l13 = r16.<android.net.NetworkStats$Entry: long txPackets>;

        staticinvoke <com.android.server.EventLogTags: void writeNetstatsWifiSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>($l22, $l24, $l23, $l19, $l18, $l21, $l20, $l15, $l14, $l17, $l16, $l13, l0);

        return;
    }

    private transient void removeUidsLocked(int[])
    {
        com.android.server.net.NetworkStatsService r0;
        int[] r1, r2;
        int i0, i1, i2;
        com.android.server.net.NetworkStatsRecorder $r3, $r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: int[];

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(3);

        $r3 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r3.<com.android.server.net.NetworkStatsRecorder: void removeUidsLocked(int[])>(r1);

        $r4 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r4.<com.android.server.net.NetworkStatsRecorder: void removeUidsLocked(int[])>(r1);

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        i2 = r2[i1];

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void resetKernelUidStats(int)>(i2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void removeUserLocked(int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0, i1, $i2;
        int[] r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.ApplicationInfo r4;
        android.content.Context $r5;
        android.content.pm.PackageManager $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: com.android.server.net.NetworkStatsService;

        i0 := @parameter0: int;

        r1 = newarray (int)[0];

        $r5 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r2 = virtualinvoke $r6.<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>(8704);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.ApplicationInfo) $r7;

        $i2 = r4.<android.content.pm.ApplicationInfo: int uid>;

        i1 = staticinvoke <android.os.UserHandle: int getUid(int,int)>(i0, $i2);

        r1 = staticinvoke <com.android.internal.util.ArrayUtils: int[] appendInt(int[],int)>(r1, i1);

        goto label1;

     label2:
        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUidsLocked(int[])>(r1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.net.NetworkStatsService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, r5, r9;
        java.util.HashSet r4, $r13;
        int i0, i1, i2, i3, $i4, $i5, i6, i7;
        java.lang.String r6, r10;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z11, $z12, $z13, z14, z15, z16, z17;
        com.android.internal.util.IndentingPrintWriter r7, $r15;
        java.lang.Object r8, $r14, $r24, $r25, $r26, $r28;
        android.content.Context $r11;
        java.lang.Throwable r12, $r31;
        android.util.ArrayMap $r16, $r17, $r21, $r23, $r27, $r30;
        com.android.server.net.NetworkStatsRecorder $r18, $r19, $r20, $r22;
        java.io.File $r29;

        r0 := @this: com.android.server.net.NetworkStatsService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r11 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "NetworkStats");

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        r4 = $r13;

        r5 = r3;

        i0 = lengthof r5;

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        r6 = r5[i1];

        virtualinvoke r4.<java.util.HashSet: boolean add(java.lang.Object)>(r6);

        i1 = i1 + 1;

        goto label01;

     label02:
        $z1 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("--poll");

        if $z1 != 0 goto label03;

        $z12 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("poll");

        if $z12 == 0 goto label04;

     label03:
        $z11 = 1;

        goto label05;

     label04:
        $z11 = 0;

     label05:
        z14 = $z11;

        z15 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("--checkin");

        $z2 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("--full");

        if $z2 != 0 goto label06;

        $z6 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("full");

        if $z6 == 0 goto label07;

     label06:
        $z13 = 1;

        goto label08;

     label07:
        $z13 = 0;

     label08:
        z16 = $z13;

        $z4 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("--uid");

        if $z4 != 0 goto label09;

        $z8 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("detail");

        if $z8 == 0 goto label10;

     label09:
        $z7 = 1;

        goto label11;

     label10:
        $z7 = 0;

     label11:
        z17 = $z7;

        $z3 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("--tag");

        if $z3 != 0 goto label12;

        $z5 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>("detail");

        if $z5 == 0 goto label13;

     label12:
        $z9 = 1;

        goto label14;

     label13:
        $z9 = 0;

     label14:
        z0 = $z9;

        $r15 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r15.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r2, "  ");

        r7 = $r15;

        $r14 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        r8 = $r14;

        entermonitor $r14;

     label15:
        if z14 == 0 goto label17;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPollLocked(int)>(259);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Forced poll");

        exitmonitor r8;

     label16:
        return;

     label17:
        if z15 == 0 goto label21;

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current files:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r29 = r0.<com.android.server.net.NetworkStatsService: java.io.File mBaseDir>;

        r9 = virtualinvoke $r29.<java.io.File: java.lang.String[] list()>();

        i2 = lengthof r9;

        i3 = 0;

     label18:
        if i3 >= i2 goto label19;

        r10 = r9[i3];

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>(r10);

        i3 = i3 + 1;

        goto label18;

     label19:
        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r8;

     label20:
        return;

     label21:
        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active interfaces:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i6 = 0;

     label22:
        $r16 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $i4 = virtualinvoke $r16.<android.util.ArrayMap: int size()>();

        if i6 >= $i4 goto label23;

        $r27 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r25 = virtualinvoke $r27.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i6);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("iface", $r25);

        $r30 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveIfaces>;

        $r28 = virtualinvoke $r30.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("ident", $r28);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i6 = i6 + 1;

        goto label22;

     label23:
        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active UID interfaces:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        i7 = 0;

     label24:
        $r17 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $i5 = virtualinvoke $r17.<android.util.ArrayMap: int size()>();

        if i7 >= $i5 goto label25;

        $r21 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r24 = virtualinvoke $r21.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("iface", $r24);

        $r23 = r0.<com.android.server.net.NetworkStatsService: android.util.ArrayMap mActiveUidIfaces>;

        $r26 = virtualinvoke $r23.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i7);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void printPair(java.lang.String,java.lang.Object)>("ident", $r26);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i7 = i7 + 1;

        goto label24;

     label25:
        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Dev stats:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r19 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mDevRecorder>;

        virtualinvoke $r19.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>(r7, z16);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Xt stats:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r18 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mXtRecorder>;

        virtualinvoke $r18.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>(r7, z16);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        if z17 == 0 goto label26;

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("UID stats:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r20 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        virtualinvoke $r20.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>(r7, z16);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label26:
        if z0 == 0 goto label27;

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("UID tag stats:");

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r22 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        virtualinvoke $r22.<com.android.server.net.NetworkStatsRecorder: void dumpLocked(com.android.internal.util.IndentingPrintWriter,boolean)>(r7, z16);

        virtualinvoke r7.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

     label27:
        exitmonitor r8;

     label28:
        goto label31;

     label29:
        $r31 := @caughtexception;

        r12 = $r31;

        exitmonitor r8;

     label30:
        throw r12;

     label31:
        return;

        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label17 to label20 with label29;
        catch java.lang.Throwable from label21 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    private android.net.NetworkStats getNetworkStatsUidDetail() throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkStats r1, r2, $r4;
        android.os.INetworkManagementService $r3;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $r3 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        r1 = interfaceinvoke $r3.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>(-1);

        r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats getNetworkStatsTethering()>();

        virtualinvoke r1.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>(r2);

        $r4 = r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats mUidOperations>;

        virtualinvoke r1.<android.net.NetworkStats: void combineAllValues(android.net.NetworkStats)>($r4);

        return r1;
    }

    private android.net.NetworkStats getNetworkStatsTethering() throws android.os.RemoteException
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.IllegalStateException r1, $r4;
        android.os.INetworkManagementService $r2;
        android.net.NetworkStats $r3, $r5;

        r0 := @this: com.android.server.net.NetworkStatsService;

     label1:
        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        $r3 = interfaceinvoke $r2.<android.os.INetworkManagementService: android.net.NetworkStats getNetworkStatsTethering()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkStats", "problem reading network stats", r1);

        $r5 = new android.net.NetworkStats;

        specialinvoke $r5.<android.net.NetworkStats: void <init>(long,int)>(0L, 10);

        return $r5;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    private void assertBandwidthControlEnabled()
    {
        com.android.server.net.NetworkStatsService r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.net.NetworkStatsService;

        $z0 = specialinvoke r0.<com.android.server.net.NetworkStatsService: boolean isBandwidthControlEnabled()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Bandwidth module disabled");

        throw $r1;

     label1:
        return;
    }

    private boolean isBandwidthControlEnabled()
    {
        com.android.server.net.NetworkStatsService r0;
        long l0;
        boolean z0, z1;
        java.lang.Throwable r1, $r3;
        android.os.INetworkManagementService $r2;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.net.NetworkStatsService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.net.NetworkStatsService: android.os.INetworkManagementService mNetworkManager>;

        z0 = interfaceinvoke $r2.<android.os.INetworkManagementService: boolean isBandwidthControlEnabled()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label3:
        $r4 := @caughtexception;

        z1 = 0;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label5:
        $r3 := @caughtexception;

        r1 = $r3;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static java.lang.Object access$100(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: java.lang.Object mStatsLock>;

        return $r1;
    }

    static com.android.server.net.NetworkStatsRecorder access$200(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsRecorder $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidRecorder>;

        return $r1;
    }

    static com.android.server.net.NetworkStatsRecorder access$300(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        com.android.server.net.NetworkStatsRecorder $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: com.android.server.net.NetworkStatsRecorder mUidTagRecorder>;

        return $r1;
    }

    static android.net.NetworkStats access$400(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, long, long)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        long l0, l1;
        android.net.NetworkStats $r2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStats internalGetSummaryForNetwork(android.net.NetworkTemplate,long,long)>(r1, l0, l1);

        return $r2;
    }

    static android.net.NetworkStatsHistory access$500(com.android.server.net.NetworkStatsService, android.net.NetworkTemplate, int)
    {
        com.android.server.net.NetworkStatsService r0;
        android.net.NetworkTemplate r1;
        int i0;
        android.net.NetworkStatsHistory $r2;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: android.net.NetworkTemplate;

        i0 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.server.net.NetworkStatsService: android.net.NetworkStatsHistory internalGetHistoryForNetwork(android.net.NetworkTemplate,int)>(r1, i0);

        return $r2;
    }

    static void access$600(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void updateIfaces()>();

        return;
    }

    static void access$700(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void performPoll(int)>(i0);

        return;
    }

    static void access$800(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void registerGlobalAlert()>();

        return;
    }

    static android.os.PowerManager$WakeLock access$900(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static void access$1000(com.android.server.net.NetworkStatsService, int[])
    {
        com.android.server.net.NetworkStatsService r0;
        int[] r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        r1 := @parameter1: int[];

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUidsLocked(int[])>(r1);

        return;
    }

    static void access$1100(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void removeUserLocked(int)>(i0);

        return;
    }

    static void access$1200(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        specialinvoke r0.<com.android.server.net.NetworkStatsService: void shutdownLocked()>();

        return;
    }

    static android.content.Context access$1300(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.content.Context mContext>;

        return $r1;
    }

    static android.os.Handler access$1400(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $r1 = r0.<com.android.server.net.NetworkStatsService: android.os.Handler mHandler>;

        return $r1;
    }

    static int access$1500(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        int $i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $i0 = r0.<com.android.server.net.NetworkStatsService: int mLastPhoneState>;

        return $i0;
    }

    static int access$1600(com.android.server.net.NetworkStatsService)
    {
        com.android.server.net.NetworkStatsService r0;
        int $i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        $i0 = r0.<com.android.server.net.NetworkStatsService: int mLastPhoneNetworkType>;

        return $i0;
    }

    static int access$1502(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        r0.<com.android.server.net.NetworkStatsService: int mLastPhoneState> = i0;

        return i0;
    }

    static int access$1602(com.android.server.net.NetworkStatsService, int)
    {
        com.android.server.net.NetworkStatsService r0;
        int i0;

        r0 := @parameter0: com.android.server.net.NetworkStatsService;

        i0 := @parameter1: int;

        r0.<com.android.server.net.NetworkStatsService: int mLastPhoneNetworkType> = i0;

        return i0;
    }

    public static void <clinit>()
    {
        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_UID_TAG> = "uid_tag";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_UID> = "uid";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_XT> = "xt";

        <com.android.server.net.NetworkStatsService: java.lang.String PREFIX_DEV> = "dev";

        <com.android.server.net.NetworkStatsService: java.lang.String ACTION_NETWORK_STATS_UPDATED> = "com.android.server.action.NETWORK_STATS_UPDATED";

        <com.android.server.net.NetworkStatsService: java.lang.String ACTION_NETWORK_STATS_POLL> = "com.android.server.action.NETWORK_STATS_POLL";

        <com.android.server.net.NetworkStatsService: java.lang.String TAG_NETSTATS_ERROR> = "netstats_error";

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_FORCE> = 256;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_ALL> = 3;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_UID> = 2;

        <com.android.server.net.NetworkStatsService: int FLAG_PERSIST_NETWORK> = 1;

        <com.android.server.net.NetworkStatsService: int MSG_REGISTER_GLOBAL_ALERT> = 3;

        <com.android.server.net.NetworkStatsService: int MSG_UPDATE_IFACES> = 2;

        <com.android.server.net.NetworkStatsService: int MSG_PERFORM_POLL> = 1;

        <com.android.server.net.NetworkStatsService: boolean LOGV> = 0;

        <com.android.server.net.NetworkStatsService: java.lang.String TAG> = "NetworkStats";

        return;
    }
}
