public final class com.android.server.UiThread extends com.android.server.ServiceThread
{
    private static com.android.server.UiThread sInstance;
    private static android.os.Handler sHandler;

    private void <init>()
    {
        com.android.server.UiThread r0;

        r0 := @this: com.android.server.UiThread;

        specialinvoke r0.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("android.ui", -2, 0);

        return;
    }

    private static void ensureThreadLocked()
    {
        com.android.server.UiThread $r0, $r1, $r2, $r4;
        android.os.Handler $r3;
        android.os.Looper $r5;

        $r0 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        if $r0 != null goto label1;

        $r1 = new com.android.server.UiThread;

        specialinvoke $r1.<com.android.server.UiThread: void <init>()>();

        <com.android.server.UiThread: com.android.server.UiThread sInstance> = $r1;

        $r2 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        virtualinvoke $r2.<com.android.server.UiThread: void start()>();

        $r3 = new android.os.Handler;

        $r4 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        $r5 = virtualinvoke $r4.<com.android.server.UiThread: android.os.Looper getLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r5);

        <com.android.server.UiThread: android.os.Handler sHandler> = $r3;

     label1:
        return;
    }

    public static com.android.server.UiThread get()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r3;
        com.android.server.UiThread $r2;

        r0 = class "com/android/server/UiThread";

        entermonitor class "com/android/server/UiThread";

     label1:
        staticinvoke <com.android.server.UiThread: void ensureThreadLocked()>();

        $r2 = <com.android.server.UiThread: com.android.server.UiThread sInstance>;

        exitmonitor r0;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

     label4:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static android.os.Handler getHandler()
    {
        java.lang.Class r0;
        java.lang.Throwable r1, $r3;
        android.os.Handler $r2;

        r0 = class "com/android/server/UiThread";

        entermonitor class "com/android/server/UiThread";

     label1:
        staticinvoke <com.android.server.UiThread: void ensureThreadLocked()>();

        $r2 = <com.android.server.UiThread: android.os.Handler sHandler>;

        exitmonitor r0;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        exitmonitor r0;

     label4:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
