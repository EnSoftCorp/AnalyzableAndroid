class com.android.server.pm.PackageManagerService$PackageUsage extends java.lang.Object
{
    private static final int WRITE_INTERVAL;
    private final java.lang.Object mFileLock;
    private final java.util.concurrent.atomic.AtomicLong mLastWritten;
    private final java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning;
    private boolean mIsHistoricalPackageUsageAvailable;
    final com.android.server.pm.PackageManagerService this$0;

    private void <init>(com.android.server.pm.PackageManagerService)
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.Object $r2;
        java.util.concurrent.atomic.AtomicLong $r3;
        java.util.concurrent.atomic.AtomicBoolean $r4;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: com.android.server.pm.PackageManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.lang.Object mFileLock> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicLong mLastWritten> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>(0);

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning> = $r4;

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: boolean mIsHistoricalPackageUsageAvailable> = 1;

        return;
    }

    boolean isHistoricalPackageUsageAvailable()
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        $z0 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: boolean mIsHistoricalPackageUsageAvailable>;

        return $z0;
    }

    void write(boolean)
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        boolean z0, $z1;
        long $l0, $l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r1;
        byte $b3;
        java.util.concurrent.atomic.AtomicBoolean $r2;
        com.android.server.pm.PackageManagerService$PackageUsage$1 $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: void writeInternal()>();

        return;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r1 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicLong mLastWritten>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: long get()>();

        $l2 = $l0 - $l1;

        $b3 = $l2 cmp 1800000L;

        if $b3 >= 0 goto label2;

        return;

     label2:
        $r2 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning>;

        $z1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicBoolean: boolean compareAndSet(boolean,boolean)>(0, 1);

        if $z1 == 0 goto label3;

        $r3 = new com.android.server.pm.PackageManagerService$PackageUsage$1;

        specialinvoke $r3.<com.android.server.pm.PackageManagerService$PackageUsage$1: void <init>(com.android.server.pm.PackageManagerService$PackageUsage,java.lang.String)>(r0, "PackageUsage_DiskWriter");

        virtualinvoke $r3.<com.android.server.pm.PackageManagerService$PackageUsage$1: void start()>();

     label3:
        return;
    }

    private void writeInternal()
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        java.util.HashMap r1, $r12, $r20;
        java.lang.Object r2, $r13, $r22;
        android.util.AtomicFile r3;
        java.io.FileOutputStream r4;
        java.io.BufferedOutputStream r5, $r15;
        java.lang.StringBuilder r6, $r18;
        java.util.Iterator r7;
        android.content.pm.PackageParser$Package r8;
        java.lang.Throwable r9, r10, $r32, $r33;
        com.android.server.pm.PackageManagerService $r11, $r17;
        java.io.File $r14;
        java.lang.String $r16, $r25, $r27;
        java.util.Collection $r19;
        boolean $z0;
        long $l1, $l2, $l4;
        java.util.concurrent.atomic.AtomicLong $r21;
        byte $b3;
        java.io.IOException $r29, r34;
        java.nio.charset.Charset $r30;
        byte[] $r31;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        $r11 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: com.android.server.pm.PackageManagerService this$0>;

        $r12 = $r11.<com.android.server.pm.PackageManagerService: java.util.HashMap mPackages>;

        r1 = $r12;

        entermonitor $r12;

     label01:
        $r13 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.lang.Object mFileLock>;

        r2 = $r13;

        entermonitor $r13;

     label02:
        r3 = specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: android.util.AtomicFile getFile()>();

        r4 = null;

     label03:
        r4 = virtualinvoke r3.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r15 = new java.io.BufferedOutputStream;

        specialinvoke $r15.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>(r4);

        r5 = $r15;

        $r14 = virtualinvoke r3.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $r16 = virtualinvoke $r14.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r16, 432, 1000, 1032);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        r6 = $r18;

        $r17 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: com.android.server.pm.PackageManagerService this$0>;

        $r20 = $r17.<com.android.server.pm.PackageManagerService: java.util.HashMap mPackages>;

        $r19 = virtualinvoke $r20.<java.util.HashMap: java.util.Collection values()>();

        r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r22 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.content.pm.PackageParser$Package) $r22;

        $l2 = r8.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label05;

        goto label04;

     label05:
        virtualinvoke r6.<java.lang.StringBuilder: void setLength(int)>(0);

        $r25 = r8.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $l4 = r8.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills>;

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r27 = virtualinvoke r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        $r31 = virtualinvoke $r27.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r30);

        virtualinvoke r5.<java.io.BufferedOutputStream: void write(byte[])>($r31);

        goto label04;

     label06:
        virtualinvoke r5.<java.io.BufferedOutputStream: void flush()>();

        virtualinvoke r3.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r4);

     label07:
        goto label10;

     label08:
        $r29 := @caughtexception;

        r34 = $r29;

        if r4 == null goto label09;

        virtualinvoke r3.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r4);

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to write package usage times", r34);

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r32 := @caughtexception;

        r9 = $r32;

        exitmonitor r2;

     label13:
        throw r9;

     label14:
        exitmonitor r1;

     label15:
        goto label18;

     label16:
        $r33 := @caughtexception;

        r10 = $r33;

        exitmonitor r1;

     label17:
        throw r10;

     label18:
        $r21 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicLong mLastWritten>;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r21.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l1);

        return;

        catch java.io.IOException from label03 to label07 with label08;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    void readLP()
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        java.lang.Object r1, $r11, $r18;
        android.util.AtomicFile r2;
        java.io.BufferedInputStream r3, $r12;
        java.lang.StringBuffer r4, $r13;
        java.lang.String r5, r6, $r17, $r22, $r33;
        android.content.pm.PackageParser$Package r7;
        long l0, $l1;
        java.lang.NumberFormatException r8, $r25;
        java.lang.Throwable r9, r10, $r27, $r32;
        java.io.FileInputStream $r14;
        java.util.HashMap $r15;
        com.android.server.pm.PackageManagerService $r16;
        java.io.IOException $r19, $r26, $r34, r37;
        java.lang.StringBuilder $r20, $r21, $r23, $r28, $r29, $r30, $r31;
        java.util.concurrent.atomic.AtomicLong $r24;
        java.io.FileNotFoundException $r35;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        $r11 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.lang.Object mFileLock>;

        r1 = $r11;

        entermonitor $r11;

     label01:
        r2 = specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: android.util.AtomicFile getFile()>();

        r3 = null;

     label02:
        $r12 = new java.io.BufferedInputStream;

        $r14 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        specialinvoke $r12.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r14);

        r3 = $r12;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        r4 = $r13;

     label03:
        r5 = specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.lang.String readToken(java.io.InputStream,java.lang.StringBuffer,char)>(r3, r4, 32);

        if r5 != null goto label04;

        goto label10;

     label04:
        r6 = specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.lang.String readToken(java.io.InputStream,java.lang.StringBuffer,char)>(r3, r4, 10);

        if r6 != null goto label05;

        $r19 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find last usage time for package ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label05:
        $r16 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: com.android.server.pm.PackageManagerService this$0>;

        $r15 = $r16.<com.android.server.pm.PackageManagerService: java.util.HashMap mPackages>;

        $r18 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r7 = (android.content.pm.PackageParser$Package) $r18;

        if r7 != null goto label06;

        goto label03;

     label06:
        $r17 = virtualinvoke r6.<java.lang.String: java.lang.String toString()>();

        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17);

     label07:
        goto label09;

     label08:
        $r25 := @caughtexception;

        r8 = $r25;

        $r26 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse ");

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as a long.");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r33, r8);

        throw $r26;

     label09:
        r7.<android.content.pm.PackageParser$Package: long mLastPackageUsageTimeInMills> = l0;

        goto label03;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label17;

     label11:
        $r35 := @caughtexception;

        r0.<com.android.server.pm.PackageManagerService$PackageUsage: boolean mIsHistoricalPackageUsageAvailable> = 0;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label17;

     label13:
        $r34 := @caughtexception;

        r37 = $r34;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to read package usage times", r37);

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label17;

     label15:
        $r27 := @caughtexception;

        r9 = $r27;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r9;

     label17:
        exitmonitor r1;

     label18:
        goto label21;

     label19:
        $r32 := @caughtexception;

        r10 = $r32;

        exitmonitor r1;

     label20:
        throw r10;

     label21:
        $r24 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicLong mLastWritten>;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r24.<java.util.concurrent.atomic.AtomicLong: void set(long)>($l1);

        return;

        catch java.lang.NumberFormatException from label06 to label07 with label08;
        catch java.io.FileNotFoundException from label02 to label10 with label11;
        catch java.io.IOException from label02 to label10 with label13;
        catch java.lang.Throwable from label02 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.Throwable from label01 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private java.lang.String readToken(java.io.InputStream, java.lang.StringBuffer, char) throws java.io.IOException
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        java.io.InputStream r1;
        java.lang.StringBuffer r2;
        char c0, $c2;
        int i1, $i3;
        java.lang.String $r4;
        java.io.IOException $r5;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.StringBuffer;

        c0 := @parameter2: char;

        virtualinvoke r2.<java.lang.StringBuffer: void setLength(int)>(0);

     label1:
        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i1 != -1 goto label3;

        $i3 = virtualinvoke r2.<java.lang.StringBuffer: int length()>();

        if $i3 != 0 goto label2;

        return null;

     label2:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Unexpected EOF");

        throw $r5;

     label3:
        if i1 != c0 goto label4;

        $r4 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label4:
        $c2 = (char) i1;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);

        goto label1;
    }

    private android.util.AtomicFile getFile()
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        java.io.File r1, r2, r3, $r4, $r5;
        android.util.AtomicFile $r6;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "system");

        r2 = $r4;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "package-usage.list");

        r3 = $r5;

        $r6 = new android.util.AtomicFile;

        specialinvoke $r6.<android.util.AtomicFile: void <init>(java.io.File)>(r3);

        return $r6;
    }

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$1)
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$1 r2;

        r0 := @this: com.android.server.pm.PackageManagerService$PackageUsage;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: void <init>(com.android.server.pm.PackageManagerService)>(r1);

        return;
    }

    static void access$300(com.android.server.pm.PackageManagerService$PackageUsage)
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$PackageUsage;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$PackageUsage: void writeInternal()>();

        return;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$400(com.android.server.pm.PackageManagerService$PackageUsage)
    {
        com.android.server.pm.PackageManagerService$PackageUsage r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$PackageUsage;

        $r1 = r0.<com.android.server.pm.PackageManagerService$PackageUsage: java.util.concurrent.atomic.AtomicBoolean mBackgroundWriteRunning>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageManagerService$PackageUsage: int WRITE_INTERVAL> = 1800000;

        return;
    }
}
