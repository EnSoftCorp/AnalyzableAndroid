class com.android.server.job.JobSchedulerService$JobHandler extends android.os.Handler
{
    final com.android.server.job.JobSchedulerService this$0;

    public void <init>(com.android.server.job.JobSchedulerService, android.os.Looper)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        com.android.server.job.JobSchedulerService r1;
        android.os.Looper r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r2 := @parameter1: android.os.Looper;

        r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        android.os.Message r1;
        com.android.server.job.JobStore r2, $r7, $r10, $r13, $r16, r23, r25;
        java.lang.Throwable r3, r4, r5, $r20, $r21, $r22;
        com.android.server.job.JobSchedulerService $r6, $r8, $r9, $r11, $r14, $r17, $r18;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.Object $r12;
        java.util.ArrayList $r15, $r19;
        com.android.server.job.controllers.JobStatus r24;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r1 := @parameter0: android.os.Message;

        $r6 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r7 = $r6.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $z0 = $r8.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        if $z0 != 0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r21 := @caughtexception;

        r3 = $r21;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        $i0 = r1.<android.os.Message: int what>;

        lookupswitch($i0)
        {
            case 0: goto label08;
            case 1: goto label15;
            default: goto label20;
        };

     label08:
        $r11 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r13 = $r11.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r23 = $r13;

        entermonitor $r13;

     label09:
        $r12 = r1.<android.os.Message: java.lang.Object obj>;

        r24 = (com.android.server.job.controllers.JobStatus) $r12;

        if r24 == null goto label10;

        $r14 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r15 = $r14.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $z1 = virtualinvoke $r15.<java.util.ArrayList: boolean contains(java.lang.Object)>(r24);

        if $z1 != 0 goto label10;

        $r17 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r16 = $r17.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $z2 = virtualinvoke $r16.<com.android.server.job.JobStore: boolean containsJob(com.android.server.job.controllers.JobStatus)>(r24);

        if $z2 == 0 goto label10;

        $r18 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r19 = $r18.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke $r19.<java.util.ArrayList: boolean add(java.lang.Object)>(r24);

     label10:
        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: void queueReadyJobsForExecutionLockedH()>();

        exitmonitor r23;

     label11:
        goto label14;

     label12:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r23;

     label13:
        throw r4;

     label14:
        goto label20;

     label15:
        $r9 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r10 = $r9.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r25 = $r10;

        entermonitor $r10;

     label16:
        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: void maybeQueueReadyJobsForExecutionLockedH()>();

        exitmonitor r25;

     label17:
        goto label20;

     label18:
        $r20 := @caughtexception;

        r5 = $r20;

        exitmonitor r25;

     label19:
        throw r5;

     label20:
        specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: void maybeRunPendingJobsH()>();

        virtualinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: void removeMessages(int)>(1);

        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private void queueReadyJobsForExecutionLockedH()
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        android.util.ArraySet r1;
        int i0, $i1;
        com.android.server.job.controllers.JobStatus r2;
        com.android.server.job.JobSchedulerService $r3, $r6, $r7;
        com.android.server.job.JobStore $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.util.ArrayList $r8;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        $r3 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r4 = $r3.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r1 = virtualinvoke $r4.<com.android.server.job.JobStore: android.util.ArraySet getJobs()>();

        i0 = 0;

     label1:
        $i1 = virtualinvoke r1.<android.util.ArraySet: int size()>();

        if i0 >= $i1 goto label4;

        $r5 = virtualinvoke r1.<android.util.ArraySet: java.lang.Object valueAt(int)>(i0);

        r2 = (com.android.server.job.controllers.JobStatus) $r5;

        $z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r2);

        if $z0 == 0 goto label2;

        $r7 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r8 = $r7.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        goto label3;

     label2:
        $z1 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: boolean isReadyToBeCancelledLocked(com.android.server.job.controllers.JobStatus)>(r2);

        if $z1 == 0 goto label3;

        $r6 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: boolean access$100(com.android.server.job.JobSchedulerService,com.android.server.job.controllers.JobStatus)>($r6, r2);

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    private void maybeQueueReadyJobsForExecutionLockedH()
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9;
        java.util.ArrayList r1, $r4, $r9;
        android.util.ArraySet r2;
        com.android.server.job.controllers.JobStatus r3;
        com.android.server.job.JobSchedulerService $r5, $r7, $r11;
        com.android.server.job.JobStore $r6;
        java.lang.Object $r8, $r10;
        boolean $z1, $z2, $z4, $z5, $z7, $z8;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        i0 = 0;

        i1 = 0;

        i2 = 0;

        i3 = 0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r6 = $r5.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = virtualinvoke $r6.<com.android.server.job.JobStore: android.util.ArraySet getJobs()>();

        i4 = 0;

     label01:
        $i5 = virtualinvoke r2.<android.util.ArraySet: int size()>();

        if i4 >= $i5 goto label09;

        $r10 = virtualinvoke r2.<android.util.ArraySet: java.lang.Object valueAt(int)>(i4);

        r3 = (com.android.server.job.controllers.JobStatus) $r10;

        $z1 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)>(r3);

        if $z1 == 0 goto label07;

        $i8 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getNumFailures()>();

        if $i8 <= 0 goto label02;

        i2 = i2 + 1;

     label02:
        $z5 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        if $z5 == 0 goto label03;

        i1 = i1 + 1;

     label03:
        $z4 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z4 != 0 goto label04;

        $z8 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean hasUnmeteredConstraint()>();

        if $z8 == 0 goto label05;

     label04:
        i3 = i3 + 1;

     label05:
        $z7 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean hasChargingConstraint()>();

        if $z7 == 0 goto label06;

        i0 = i0 + 1;

     label06:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        goto label08;

     label07:
        $z2 = specialinvoke r0.<com.android.server.job.JobSchedulerService$JobHandler: boolean isReadyToBeCancelledLocked(com.android.server.job.controllers.JobStatus)>(r3);

        if $z2 == 0 goto label08;

        $r11 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        staticinvoke <com.android.server.job.JobSchedulerService: boolean access$100(com.android.server.job.JobSchedulerService,com.android.server.job.controllers.JobStatus)>($r11, r3);

     label08:
        i4 = i4 + 1;

        goto label01;

     label09:
        if i2 > 0 goto label10;

        if i1 >= 1 goto label10;

        if i3 >= 2 goto label10;

        if i0 >= 1 goto label10;

        $i7 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i7 < 2 goto label12;

     label10:
        i9 = 0;

     label11:
        $i6 = interfaceinvoke r1.<java.util.List: int size()>();

        if i9 >= $i6 goto label12;

        $r7 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r9 = $r7.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i9 = i9 + 1;

        goto label11;

     label12:
        return;
    }

    private boolean isReadyToBeExecutedLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z0, z1, z2, z3, $z4;
        com.android.server.job.JobSchedulerService $r2, $r4, $r5;
        java.util.ArrayList $r3, $r6;
        int $i0;
        java.lang.Integer $r7;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        $r2 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r3 = $r2.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        z1 = virtualinvoke $r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        $r4 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        z2 = staticinvoke <com.android.server.job.JobSchedulerService: boolean access$200(com.android.server.job.JobSchedulerService,com.android.server.job.controllers.JobStatus)>($r4, r1);

        $r5 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r6 = $r5.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers>;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        z3 = virtualinvoke $r6.<java.util.ArrayList: boolean contains(java.lang.Object)>($r7);

        if z3 == 0 goto label1;

        if z0 == 0 goto label1;

        if z1 != 0 goto label1;

        if z2 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    private boolean isReadyToBeCancelledLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0, $z1, $z2;
        com.android.server.job.JobSchedulerService $r2;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean isReady()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $z1 = staticinvoke <com.android.server.job.JobSchedulerService: boolean access$200(com.android.server.job.JobSchedulerService,com.android.server.job.controllers.JobStatus)>($r2, r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    private void maybeRunPendingJobsH()
    {
        com.android.server.job.JobSchedulerService$JobHandler r0;
        com.android.server.job.JobStore r1, $r9, $r16;
        java.util.Iterator r2;
        com.android.server.job.controllers.JobStatus r3, r6;
        com.android.server.job.JobServiceContext r4, r5;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r7, $r20;
        com.android.server.job.JobSchedulerService $r8, $r10, $r12, $r15, $r18;
        java.util.ArrayList $r11;
        boolean $z0, $z1, $z3, $z4;
        java.lang.Object $r13, $r19;
        java.util.List $r14, $r17;

        r0 := @this: com.android.server.job.JobSchedulerService$JobHandler;

        $r8 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r9 = $r8.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r1 = $r9;

        entermonitor $r9;

     label01:
        $r10 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r11 = $r10.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        r2 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.job.controllers.JobStatus) $r13;

        r4 = null;

        i0 = 0;

     label03:
        $r12 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r14 = $r12.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        if i0 >= $i1 goto label06;

        $r18 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r17 = $r18.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r19 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.job.JobServiceContext) $r19;

        r6 = virtualinvoke r5.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJob()>();

        if r6 == null goto label04;

        $i2 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i3 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z4 = virtualinvoke r6.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i2, $i3);

        if $z4 == 0 goto label04;

        r4 = null;

        goto label06;

     label04:
        $z3 = virtualinvoke r5.<com.android.server.job.JobServiceContext: boolean isAvailable()>();

        if $z3 == 0 goto label05;

        r4 = r5;

     label05:
        i0 = i0 + 1;

        goto label03;

     label06:
        if r4 == null goto label08;

        $z1 = virtualinvoke r4.<com.android.server.job.JobServiceContext: boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)>(r3);

        if $z1 != 0 goto label07;

        $r15 = r0.<com.android.server.job.JobSchedulerService$JobHandler: com.android.server.job.JobSchedulerService this$0>;

        $r16 = $r15.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        virtualinvoke $r16.<com.android.server.job.JobStore: boolean remove(com.android.server.job.controllers.JobStatus)>(r3);

     label07:
        interfaceinvoke r2.<java.util.Iterator: void remove()>();

     label08:
        goto label02;

     label09:
        exitmonitor r1;

     label10:
        goto label13;

     label11:
        $r20 := @caughtexception;

        r7 = $r20;

        exitmonitor r1;

     label12:
        throw r7;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }
}
