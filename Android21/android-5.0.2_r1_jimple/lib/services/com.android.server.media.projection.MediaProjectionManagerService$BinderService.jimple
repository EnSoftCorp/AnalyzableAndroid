final class com.android.server.media.projection.MediaProjectionManagerService$BinderService extends android.media.projection.IMediaProjectionManager$Stub
{
    final com.android.server.media.projection.MediaProjectionManagerService this$0;

    private void <init>(com.android.server.media.projection.MediaProjectionManagerService)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        com.android.server.media.projection.MediaProjectionManagerService r1;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0> = r1;

        specialinvoke r0.<android.media.projection.IMediaProjectionManager$Stub: void <init>()>();

        return;
    }

    public boolean hasProjectionPermission(int, java.lang.String)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        int i0, $i2;
        java.lang.String r1;
        long l1;
        boolean z0, $z1, $z2, z3;
        java.lang.Throwable r2, $r5;
        com.android.server.media.projection.MediaProjectionManagerService $r3;
        android.app.AppOpsManager $r4;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        z0 = 0;

     label1:
        $z1 = specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: boolean checkPermission(java.lang.String,java.lang.String)>(r1, "android.permission.CAPTURE_VIDEO_OUTPUT");

        if $z1 != 0 goto label2;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager access$400(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $i2 = virtualinvoke $r4.<android.app.AppOpsManager: int noteOpNoThrow(int,int,java.lang.String)>(46, i0, r1);

        if $i2 != 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        z3 = z0 | $z2;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label8;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label8:
        return z3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.media.projection.IMediaProjection createProjection(int, java.lang.String, int, boolean)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        int i0, i1, $i3, $i4;
        java.lang.String r1, $r10;
        boolean z0, $z1;
        long l2;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r2, $r7;
        java.lang.Throwable r3, $r13;
        com.android.server.media.projection.MediaProjectionManagerService $r4, $r8, $r9;
        android.content.Context $r5;
        java.lang.IllegalArgumentException $r6;
        android.app.AppOpsManager $r11;
        java.lang.SecurityException $r12;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r5 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r4);

        $i3 = virtualinvoke $r5.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i3 == 0 goto label1;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to grant projection permission");

        throw $r12;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label3;

     label2:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("package name must not be empty");

        throw $r6;

     label3:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r7 = new com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        $r9 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        specialinvoke $r7.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void <init>(com.android.server.media.projection.MediaProjectionManagerService,int,int,java.lang.String)>($r9, i1, i0, r1);

        r2 = $r7;

        if z0 == 0 goto label5;

        $r8 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r11 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.app.AppOpsManager access$400(com.android.server.media.projection.MediaProjectionManagerService)>($r8);

        $i4 = r2.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: int uid>;

        $r10 = r2.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: java.lang.String packageName>;

        virtualinvoke $r11.<android.app.AppOpsManager: void setMode(int,int,java.lang.String,int)>(46, $i4, $r10, 0);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label8;

     label6:
        $r13 := @caughtexception;

        r3 = $r13;

     label7:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r3;

     label8:
        return r2;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean isValidMediaProjection(android.media.projection.IMediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        android.media.projection.IMediaProjection r1;
        com.android.server.media.projection.MediaProjectionManagerService $r2;
        android.os.IBinder $r3;
        boolean $z0;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjection;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r3 = interfaceinvoke r1.<android.media.projection.IMediaProjection: android.os.IBinder asBinder()>();

        $z0 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: boolean access$600(com.android.server.media.projection.MediaProjectionManagerService,android.os.IBinder)>($r2, $r3);

        return $z0;
    }

    public android.media.projection.MediaProjectionInfo getActiveProjectionInfo()
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        android.media.projection.MediaProjectionInfo r1;
        java.lang.Throwable r2, $r7;
        com.android.server.media.projection.MediaProjectionManagerService $r3, $r5;
        android.content.Context $r4;
        int $i1;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r6;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        r1 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.media.projection.MediaProjectionInfo access$700(com.android.server.media.projection.MediaProjectionManagerService)>($r5);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r1;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void stopActiveProjection()
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        long l0;
        java.lang.Throwable r1, $r9;
        com.android.server.media.projection.MediaProjectionManagerService $r2, $r4, $r6;
        android.content.Context $r3;
        int $i1;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection $r5, $r7;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        $r2 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r3 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r2);

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 == 0 goto label1;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r8;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r5 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection access$800(com.android.server.media.projection.MediaProjectionManagerService)>($r4);

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r7 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection access$800(com.android.server.media.projection.MediaProjectionManagerService)>($r6);

        virtualinvoke $r7.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: void stop()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r9 := @caughtexception;

        r1 = $r9;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;
        long l0;
        java.lang.Throwable r2, $r7;
        com.android.server.media.projection.MediaProjectionManagerService $r3, $r5;
        android.content.Context $r4;
        int $i1;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to add projection callbacks");

        throw $r6;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$900(com.android.server.media.projection.MediaProjectionManagerService,android.media.projection.IMediaProjectionWatcherCallback)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;
        long l0;
        java.lang.Throwable r2, $r7;
        com.android.server.media.projection.MediaProjectionManagerService $r3, $r5;
        android.content.Context $r4;
        int $i1;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $i1 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.MANAGE_MEDIA_PROJECTION");

        if $i1 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires MANAGE_MEDIA_PROJECTION in order to remove projection callbacks");

        throw $r6;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$300(com.android.server.media.projection.MediaProjectionManagerService,android.media.projection.IMediaProjectionWatcherCallback)>($r5, r1);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        long l0;
        java.lang.Throwable r4, $r16;
        com.android.server.media.projection.MediaProjectionManagerService $r5, $r12, $r15;
        android.content.Context $r6, $r14;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        int $i1, $i2, $i3;
        java.lang.String $r13;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r6 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r5);

        if $r6 == null goto label1;

        $r12 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r14 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r12);

        $i3 = virtualinvoke $r14.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i3 == 0 goto label2;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump MediaProjectionManager from from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        return;

     label2:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r15 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: void access$1000(com.android.server.media.projection.MediaProjectionManagerService,java.io.PrintWriter)>($r15, r2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r16 := @caughtexception;

        r4 = $r16;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean checkPermission(java.lang.String, java.lang.String)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        java.lang.String r1, r2;
        com.android.server.media.projection.MediaProjectionManagerService $r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: com.android.server.media.projection.MediaProjectionManagerService this$0>;

        $r4 = staticinvoke <com.android.server.media.projection.MediaProjectionManagerService: android.content.Context access$500(com.android.server.media.projection.MediaProjectionManagerService)>($r3);

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = virtualinvoke $r5.<android.content.pm.PackageManager: int checkPermission(java.lang.String,java.lang.String)>(r2, r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void <init>(com.android.server.media.projection.MediaProjectionManagerService, com.android.server.media.projection.MediaProjectionManagerService$1)
    {
        com.android.server.media.projection.MediaProjectionManagerService$BinderService r0;
        com.android.server.media.projection.MediaProjectionManagerService r1;
        com.android.server.media.projection.MediaProjectionManagerService$1 r2;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$BinderService;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService;

        r2 := @parameter1: com.android.server.media.projection.MediaProjectionManagerService$1;

        specialinvoke r0.<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void <init>(com.android.server.media.projection.MediaProjectionManagerService)>(r1);

        return;
    }
}
