public class com.android.server.pm.PackageInstallerService extends android.content.pm.IPackageInstaller$Stub
{
    private static final java.lang.String TAG;
    private static final boolean LOGD;
    private static final java.lang.String TAG_SESSIONS;
    private static final java.lang.String TAG_SESSION;
    private static final java.lang.String ATTR_SESSION_ID;
    private static final java.lang.String ATTR_USER_ID;
    private static final java.lang.String ATTR_INSTALLER_PACKAGE_NAME;
    private static final java.lang.String ATTR_INSTALLER_UID;
    private static final java.lang.String ATTR_CREATED_MILLIS;
    private static final java.lang.String ATTR_SESSION_STAGE_DIR;
    private static final java.lang.String ATTR_SESSION_STAGE_CID;
    private static final java.lang.String ATTR_PREPARED;
    private static final java.lang.String ATTR_SEALED;
    private static final java.lang.String ATTR_MODE;
    private static final java.lang.String ATTR_INSTALL_FLAGS;
    private static final java.lang.String ATTR_INSTALL_LOCATION;
    private static final java.lang.String ATTR_SIZE_BYTES;
    private static final java.lang.String ATTR_APP_PACKAGE_NAME;
    private static final java.lang.String ATTR_APP_ICON;
    private static final java.lang.String ATTR_APP_LABEL;
    private static final java.lang.String ATTR_ORIGINATING_URI;
    private static final java.lang.String ATTR_REFERRER_URI;
    private static final java.lang.String ATTR_ABI_OVERRIDE;
    private static final long MAX_AGE_MILLIS;
    private static final long MAX_ACTIVE_SESSIONS;
    private static final long MAX_HISTORICAL_SESSIONS;
    private final android.content.Context mContext;
    private final com.android.server.pm.PackageManagerService mPm;
    private final android.app.AppOpsManager mAppOps;
    private final java.io.File mStagingDir;
    private final android.os.HandlerThread mInstallThread;
    private final android.os.Handler mInstallHandler;
    private final com.android.server.pm.PackageInstallerService$Callbacks mCallbacks;
    private final android.util.AtomicFile mSessionsFile;
    private final java.io.File mSessionsDir;
    private final com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback;
    private final java.util.Random mRandom;
    private final android.util.SparseArray mSessions;
    private final android.util.SparseArray mHistoricalSessions;
    private final android.util.SparseBooleanArray mLegacySessions;
    private static final java.io.FilenameFilter sStageFilter;

    public void <init>(android.content.Context, com.android.server.pm.PackageManagerService, java.io.File)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.Context r1, $r14;
        com.android.server.pm.PackageManagerService r2;
        java.io.File r3, $r25, $r27, $r28, $r29, $r30, $r32, $r34, $r48, $r49, r54, r56;
        android.util.SparseArray r4, $r11, $r12, $r33, $r37, $r50;
        android.util.ArraySet r5, r6;
        int i0, $i1, $i4;
        com.android.server.pm.PackageInstallerSession r7;
        java.lang.Throwable r8, $r52;
        com.android.server.pm.PackageInstallerService$InternalCallback $r9;
        java.security.SecureRandom $r10;
        android.util.SparseBooleanArray $r13;
        android.app.AppOpsManager $r15;
        java.lang.Object $r16, $r40, $r45, $r51;
        android.os.HandlerThread $r17, $r18, $r19, $r24;
        android.os.Handler $r20;
        com.android.server.pm.PackageInstallerService$Callbacks $r21;
        android.os.Looper $r22, $r23;
        android.util.AtomicFile $r26;
        java.io.FilenameFilter $r31;
        java.io.File[] $r35, $r36;
        boolean $z1, $z2, $z4;
        java.lang.StringBuilder $r38, $r39, $r42, $r43, $r44, $r47;
        java.lang.String $r41, $r46;
        java.util.Iterator r53, r55;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.pm.PackageManagerService;

        r3 := @parameter2: java.io.File;

        specialinvoke r0.<android.content.pm.IPackageInstaller$Stub: void <init>()>();

        $r9 = new com.android.server.pm.PackageInstallerService$InternalCallback;

        specialinvoke $r9.<com.android.server.pm.PackageInstallerService$InternalCallback: void <init>(com.android.server.pm.PackageInstallerService)>(r0);

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback> = $r9;

        $r10 = new java.security.SecureRandom;

        specialinvoke $r10.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom> = $r10;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions> = $r11;

        $r12 = new android.util.SparseArray;

        specialinvoke $r12.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions> = $r12;

        $r13 = new android.util.SparseBooleanArray;

        specialinvoke $r13.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions> = $r13;

        r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext> = r1;

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm> = r2;

        $r14 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r16 = virtualinvoke $r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r15 = (android.app.AppOpsManager) $r16;

        r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps> = $r15;

        r0.<com.android.server.pm.PackageInstallerService: java.io.File mStagingDir> = r3;

        $r18 = new android.os.HandlerThread;

        specialinvoke $r18.<android.os.HandlerThread: void <init>(java.lang.String)>("PackageInstaller");

        r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread> = $r18;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        virtualinvoke $r17.<android.os.HandlerThread: void start()>();

        $r20 = new android.os.Handler;

        $r19 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r22 = virtualinvoke $r19.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r20.<android.os.Handler: void <init>(android.os.Looper)>($r22);

        r0.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler> = $r20;

        $r21 = new com.android.server.pm.PackageInstallerService$Callbacks;

        $r24 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r23 = virtualinvoke $r24.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r21.<com.android.server.pm.PackageInstallerService$Callbacks: void <init>(android.os.Looper)>($r23);

        r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks> = $r21;

        $r26 = new android.util.AtomicFile;

        $r25 = new java.io.File;

        $r28 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r25.<java.io.File: void <init>(java.io.File,java.lang.String)>($r28, "install_sessions.xml");

        specialinvoke $r26.<android.util.AtomicFile: void <init>(java.io.File)>($r25);

        r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile> = $r26;

        $r27 = new java.io.File;

        $r30 = staticinvoke <android.os.Environment: java.io.File getSystemSecureDirectory()>();

        specialinvoke $r27.<java.io.File: void <init>(java.io.File,java.lang.String)>($r30, "install_sessions");

        r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir> = $r27;

        $r29 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        virtualinvoke $r29.<java.io.File: boolean mkdirs()>();

        $r33 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r4 = $r33;

        entermonitor $r33;

     label01:
        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void readSessionsLocked()>();

        $r32 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mStagingDir>;

        $r31 = <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter>;

        $r36 = virtualinvoke $r32.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r31);

        r5 = staticinvoke <com.google.android.collect.Sets: android.util.ArraySet newArraySet(java.lang.Object[])>($r36);

        $r34 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r35 = virtualinvoke $r34.<java.io.File: java.io.File[] listFiles()>();

        r6 = staticinvoke <com.google.android.collect.Sets: android.util.ArraySet newArraySet(java.lang.Object[])>($r35);

        i0 = 0;

     label02:
        $r37 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i1 = virtualinvoke $r37.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label03;

        $r50 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r51 = virtualinvoke $r50.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r7 = (com.android.server.pm.PackageInstallerSession) $r51;

        $r48 = r7.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        virtualinvoke r5.<android.util.ArraySet: boolean remove(java.lang.Object)>($r48);

        $i4 = r7.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $r49 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>($i4);

        virtualinvoke r6.<android.util.ArraySet: boolean remove(java.lang.Object)>($r49);

        i0 = i0 + 1;

        goto label02;

     label03:
        r53 = virtualinvoke r5.<android.util.ArraySet: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r45 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.io.File) $r45;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan stage ");

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r46 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r46);

        $z4 = virtualinvoke r54.<java.io.File: boolean isDirectory()>();

        if $z4 == 0 goto label05;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>(r54);

     label05:
        virtualinvoke r54.<java.io.File: boolean delete()>();

        goto label04;

     label06:
        r55 = virtualinvoke r6.<android.util.ArraySet: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r40 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (java.io.File) $r40;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan icon ");

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r56);

        $r41 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r41);

        virtualinvoke r56.<java.io.File: boolean delete()>();

        goto label07;

     label08:
        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r52 := @caughtexception;

        r8 = $r52;

        exitmonitor r4;

     label11:
        throw r8;

     label12:
        return;

        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void onSecureContainersAvailable()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r6, $r8, $r15;
        android.util.ArraySet r2, $r7;
        java.lang.String[] r3;
        int i0, i1, $i2, i4;
        java.lang.String r4, $r12, $r16, r20, r22;
        java.lang.Throwable r5, $r18;
        boolean $z0, $z2, $z3;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.Object $r10, $r14;
        com.android.server.pm.PackageInstallerSession r19;
        java.util.Iterator r21;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = new android.util.ArraySet;

        specialinvoke $r7.<android.util.ArraySet: void <init>()>();

        r2 = $r7;

        r3 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String[] getSecureContainerList()>();

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label04;

        r4 = r3[i1];

        $z3 = staticinvoke <com.android.server.pm.PackageInstallerService: boolean isStageName(java.lang.String)>(r4);

        if $z3 == 0 goto label03;

        virtualinvoke r2.<android.util.ArraySet: boolean add(java.lang.Object)>(r4);

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        i4 = 0;

     label05:
        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i2 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i4 >= $i2 goto label07;

        $r15 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r14 = virtualinvoke $r15.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r19 = (com.android.server.pm.PackageInstallerSession) $r14;

        r20 = r19.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        $z2 = virtualinvoke r2.<android.util.ArraySet: boolean remove(java.lang.Object)>(r20);

        if $z2 == 0 goto label06;

        $r16 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>(r20, $r16, 1000);

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        r21 = virtualinvoke r2.<android.util.ArraySet: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r10 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r10;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting orphan container ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r12);

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>(r22);

        goto label08;

     label09:
        exitmonitor r1;

     label10:
        goto label13;

     label11:
        $r18 := @caughtexception;

        r5 = $r18;

        exitmonitor r1;

     label12:
        throw r5;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static boolean isStageName(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;

        r0 := @parameter0: java.lang.String;

        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("vmdl");

        if $z3 == 0 goto label1;

        $z8 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z8 == 0 goto label1;

        $z9 = 1;

        goto label2;

     label1:
        $z9 = 0;

     label2:
        z0 = $z9;

        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("smdl");

        if $z4 == 0 goto label3;

        $z6 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(".tmp");

        if $z6 == 0 goto label3;

        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        z1 = $z7;

        z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("smdl2tmp");

        if z0 != 0 goto label5;

        if z1 != 0 goto label5;

        if z2 == 0 goto label6;

     label5:
        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    public java.io.File allocateInternalStageDirLegacy() throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r4;
        int i0;
        java.io.File r2;
        java.lang.Throwable r3, $r8;
        android.util.SparseBooleanArray $r5;
        java.lang.IllegalStateException $r6, r9;
        java.io.IOException $r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r5.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        r2 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildInternalStageDir(int)>(i0);

        staticinvoke <com.android.server.pm.PackageInstallerService: void prepareInternalStageDir(java.io.File)>(r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r6 := @caughtexception;

        r9 = $r6;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.Throwable)>(r9);

        throw $r7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.IllegalStateException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public java.lang.String allocateExternalStageCidLegacy()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray r1, $r3;
        int i0;
        java.lang.Throwable r2, $r10;
        android.util.SparseBooleanArray $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        i0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        virtualinvoke $r4.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void readSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        java.io.FileInputStream r1;
        org.xmlpull.v1.XmlPullParser r2;
        int i0, $i2, $i6, $i7;
        java.lang.String r3, $r8, $r15, $r22;
        com.android.server.pm.PackageInstallerSession r4;
        long l1, $l3, $l5, $l9;
        boolean z0, $z1, $z2;
        java.lang.Throwable r5, $r25;
        android.util.SparseArray $r6, $r10, $r12;
        android.util.AtomicFile $r7;
        byte $b4;
        java.io.File $r9, $r11, $r16;
        java.lang.StringBuilder $r13, $r14, $r17, $r18, $r19, $r21;
        java.io.IOException $r20, r27;
        java.io.FileNotFoundException $r23;
        org.xmlpull.v1.XmlPullParserException $r24, r28;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        virtualinvoke $r6.<android.util.SparseArray: void clear()>();

        r1 = null;

     label01:
        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        r1 = virtualinvoke $r7.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r1, null);

     label02:
        $i2 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i2;

        if $i2 == 1 goto label08;

        if i0 != 2 goto label02;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r8 = "session";

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label07;

        r4 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerSession readSessionLocked(org.xmlpull.v1.XmlPullParser)>(r2);

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = r4.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        l1 = $l3 - $l5;

        $b4 = l1 cmp 259200000L;

        if $b4 < 0 goto label03;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Abandoning old session first created at ");

        $l9 = r4.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r22);

        z0 = 0;

        goto label05;

     label03:
        $r9 = r4.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r9 == null goto label04;

        $r11 = r4.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $z2 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label04;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Abandoning internal session with missing stage ");

        $r16 = r4.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r15);

        z0 = 0;

        goto label05;

     label04:
        z0 = 1;

     label05:
        if z0 == 0 goto label06;

        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i7 = r4.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r12.<android.util.SparseArray: void put(int,java.lang.Object)>($i7, r4);

        goto label07;

     label06:
        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $i6 = r4.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>($i6, r4);

     label07:
        goto label02;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label09:
        $r23 := @caughtexception;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label11:
        $r20 := @caughtexception;

        r27 = $r20;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstaller", "Failed reading install sessions", r27);

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label13:
        $r24 := @caughtexception;

        r28 = $r24;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageInstaller", "Failed reading install sessions", r28);

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label15:
        $r25 := @caughtexception;

        r5 = $r25;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r5;

     label17:
        return;

        catch java.io.FileNotFoundException from label01 to label08 with label09;
        catch java.io.IOException from label01 to label08 with label11;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label08 with label13;
        catch java.lang.Throwable from label01 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private com.android.server.pm.PackageInstallerSession readSessionLocked(org.xmlpull.v1.XmlPullParser) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0, i1, i2, $i4, $i5, $i6, $i8;
        java.lang.String r2, r3, r5, $r10, $r12, $r15, $r20;
        long l3, $l7, $l9;
        java.io.File r4, r7, $r24;
        boolean z0, z1, $z2;
        android.content.pm.PackageInstaller$SessionParams r6, $r9;
        com.android.server.pm.PackageManagerService $r8, $r22;
        android.net.Uri $r11, $r14;
        android.graphics.Bitmap $r13, $r21;
        com.android.server.pm.PackageInstallerService$InternalCallback $r16;
        android.content.Context $r17;
        com.android.server.pm.PackageInstallerSession $r18;
        android.os.HandlerThread $r19;
        android.os.Looper $r23;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i0 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "sessionId");

        i1 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "userId");

        r2 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "installerPackageName");

        $r8 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i4 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>(r2, i1);

        i2 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,int)>(r1, "installerUid", $i4);

        l3 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "createdMillis");

        r3 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "sessionStageDir");

        if r3 == null goto label1;

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.lang.String)>(r3);

        goto label2;

     label1:
        $r24 = null;

     label2:
        r4 = $r24;

        r5 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "sessionStageCid");

        z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,boolean)>(r1, "prepared", 1);

        z1 = staticinvoke <com.android.internal.util.XmlUtils: boolean readBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "sealed");

        $r9 = new android.content.pm.PackageInstaller$SessionParams;

        specialinvoke $r9.<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>(-1);

        r6 = $r9;

        $i6 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "mode");

        r6.<android.content.pm.PackageInstaller$SessionParams: int mode> = $i6;

        $i5 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "installFlags");

        r6.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i5;

        $i8 = staticinvoke <com.android.internal.util.XmlUtils: int readIntAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "installLocation");

        r6.<android.content.pm.PackageInstaller$SessionParams: int installLocation> = $i8;

        $l7 = staticinvoke <com.android.internal.util.XmlUtils: long readLongAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "sizeBytes");

        r6.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes> = $l7;

        $r12 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "appPackageName");

        r6.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = $r12;

        $r13 = staticinvoke <com.android.internal.util.XmlUtils: android.graphics.Bitmap readBitmapAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "appIcon");

        r6.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r13;

        $r10 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "appLabel");

        r6.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = $r10;

        $r11 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "originatingUri");

        r6.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri> = $r11;

        $r14 = staticinvoke <com.android.internal.util.XmlUtils: android.net.Uri readUriAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "referrerUri");

        r6.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri> = $r14;

        $r15 = staticinvoke <com.android.internal.util.XmlUtils: java.lang.String readStringAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "abiOverride");

        r6.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride> = $r15;

        r7 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>(i0);

        $z2 = virtualinvoke r7.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label3;

        $r20 = virtualinvoke r7.<java.io.File: java.lang.String getAbsolutePath()>();

        $r21 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r20);

        r6.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r21;

        $l9 = virtualinvoke r7.<java.io.File: long lastModified()>();

        r6.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l9;

     label3:
        $r18 = new com.android.server.pm.PackageInstallerSession;

        $r16 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r22 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r19 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r23 = virtualinvoke $r19.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r18.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,int,int,java.lang.String,int,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,boolean,boolean)>($r16, $r17, $r22, $r23, i0, i1, r2, i2, r6, l3, r4, r5, z0, z1);

        return $r18;
    }

    private void writeSessionsLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        java.io.FileOutputStream r1;
        com.android.internal.util.FastXmlSerializer r2, $r5;
        int i0, i1;
        com.android.server.pm.PackageInstallerSession r3;
        android.util.AtomicFile $r4, $r10, $r13;
        java.lang.Boolean $r6;
        android.util.SparseArray $r8, $r12;
        java.lang.Object $r11;
        java.io.IOException $r14;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 = null;

     label1:
        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        r1 = virtualinvoke $r4.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r5 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r5.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r2 = $r5;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r1, "utf-8");

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r6);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "sessions");

        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i0 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r11 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.pm.PackageInstallerSession) $r11;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionLocked(org.xmlpull.v1.XmlSerializer,com.android.server.pm.PackageInstallerSession)>(r2, r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "sessions");

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r10.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r1);

     label4:
        goto label6;

     label5:
        $r14 := @caughtexception;

        if r1 == null goto label6;

        $r13 = r0.<com.android.server.pm.PackageInstallerService: android.util.AtomicFile mSessionsFile>;

        virtualinvoke $r13.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r1);

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private void writeSessionLocked(org.xmlpull.v1.XmlSerializer, com.android.server.pm.PackageInstallerSession) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        org.xmlpull.v1.XmlSerializer r1;
        com.android.server.pm.PackageInstallerSession r2;
        android.content.pm.PackageInstaller$SessionParams r3;
        java.io.File r4, $r10, $r25;
        java.io.FileOutputStream r5, $r22;
        java.io.IOException r6, $r28;
        java.lang.Throwable r7, $r33;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8;
        java.lang.String $r9, $r11, $r12, $r13, $r16, $r23, $r24, $r30, $r34;
        long $l3, $l6, $l9, $l10, $l12;
        boolean $z0, $z1, $z2;
        android.net.Uri $r14, $r15;
        android.graphics.Bitmap $r17, $r18, $r21;
        android.graphics.Bitmap$CompressFormat $r20;
        byte $b11;
        java.lang.StringBuilder $r26, $r27, $r29, $r31, $r32;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: com.android.server.pm.PackageInstallerSession;

        r3 = r2.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "session");

        $i0 = r2.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "sessionId", $i0);

        $i1 = r2.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "userId", $i1);

        $r9 = r2.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "installerPackageName", $r9);

        $i2 = r2.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "installerUid", $i2);

        $l3 = r2.<com.android.server.pm.PackageInstallerSession: long createdMillis>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "createdMillis", $l3);

        $r10 = r2.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        if $r10 == null goto label01;

        $r25 = r2.<com.android.server.pm.PackageInstallerSession: java.io.File stageDir>;

        $r23 = virtualinvoke $r25.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "sessionStageDir", $r23);

     label01:
        $r11 = r2.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        if $r11 == null goto label02;

        $r24 = r2.<com.android.server.pm.PackageInstallerSession: java.lang.String stageCid>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "sessionStageCid", $r24);

     label02:
        $z0 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isPrepared()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "prepared", $z0);

        $z1 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: boolean isSealed()>();

        staticinvoke <com.android.internal.util.XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>(r1, "sealed", $z1);

        $i5 = r3.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "mode", $i5);

        $i4 = r3.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "installFlags", $i4);

        $i7 = r3.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>(r1, "installLocation", $i7);

        $l6 = r3.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>(r1, "sizeBytes", $l6);

        $r13 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "appPackageName", $r13);

        $r12 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "appLabel", $r12);

        $r15 = r3.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri originatingUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(r1, "originatingUri", $r15);

        $r14 = r3.<android.content.pm.PackageInstaller$SessionParams: android.net.Uri referrerUri>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeUriAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,android.net.Uri)>(r1, "referrerUri", $r14);

        $r16 = r3.<android.content.pm.PackageInstaller$SessionParams: java.lang.String abiOverride>;

        staticinvoke <com.android.internal.util.XmlUtils: void writeStringAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,java.lang.String)>(r1, "abiOverride", $r16);

        $i8 = r2.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        r4 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>($i8);

        $r17 = r3.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r17 != null goto label03;

        $z2 = virtualinvoke r4.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label03;

        virtualinvoke r4.<java.io.File: boolean delete()>();

        goto label11;

     label03:
        $r18 = r3.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r18 == null goto label11;

        $l9 = virtualinvoke r4.<java.io.File: long lastModified()>();

        $l10 = r3.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified>;

        $b11 = $l9 cmp $l10;

        if $b11 == 0 goto label11;

        r5 = null;

     label04:
        $r22 = new java.io.FileOutputStream;

        specialinvoke $r22.<java.io.FileOutputStream: void <init>(java.io.File)>(r4);

        r5 = $r22;

        $r21 = r3.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r20 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r21.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r20, 90, r5);

     label05:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        goto label10;

     label06:
        $r28 := @caughtexception;

        r6 = $r28;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write icon ");

        $r32 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r30 = virtualinvoke r6.<java.io.IOException: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageInstaller", $r34);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        goto label10;

     label08:
        $r33 := @caughtexception;

        r7 = $r33;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        throw r7;

     label10:
        $l12 = virtualinvoke r4.<java.io.File: long lastModified()>();

        r3.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = $l12;

     label11:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "session");

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private java.io.File buildAppIconFile(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File $r1, $r3;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mSessionsDir>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_icon.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".png");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r7);

        return $r1;
    }

    private void writeSessionsAsync()
    {
        com.android.server.pm.PackageInstallerService r0;
        android.os.Handler $r1;
        com.android.server.pm.PackageInstallerService$2 $r2;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        $r1 = staticinvoke <com.android.server.IoThread: android.os.Handler getHandler()>();

        $r2 = new com.android.server.pm.PackageInstallerService$2;

        specialinvoke $r2.<com.android.server.pm.PackageInstallerService$2: void <init>(com.android.server.pm.PackageInstallerService)>(r0);

        virtualinvoke $r1.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public int createSession(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.PackageInstaller$SessionParams r1;
        java.lang.String r2;
        int i0, $i1;
        java.io.IOException r3, $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $i1 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int createSessionInternal(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>(r1, r2, i0);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r3);

        throw $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private int createSessionInternal(android.content.pm.PackageInstaller$SessionParams, java.lang.String, int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.PackageInstaller$SessionParams r1;
        java.lang.String r2, r6, $r11, $r15, $r34, $r36, $r40;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i10, $i11, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i33, i34;
        android.app.ActivityManager r3;
        java.lang.Throwable r4, r7, $r51, $r53;
        long l5, $l9, $l12, $l14, l32;
        java.io.File r5;
        com.android.server.pm.PackageManagerService $r8, $r9, $r26;
        boolean $z0;
        android.graphics.Bitmap $r10, $r46, $r47, $r48, $r49;
        android.content.Context $r12, $r27, $r41;
        java.lang.StringBuilder $r13, $r17, $r18, $r29, $r30, $r32, $r33, $r35, $r38, $r39, $r44, $r45;
        java.io.IOException $r14;
        android.util.SparseArray $r16, $r19, $r20, $r24, r54;
        byte $b13, $b15;
        com.android.server.pm.PackageInstallerService$InternalCallback $r21;
        android.os.HandlerThread $r22;
        com.android.server.pm.PackageInstallerSession $r23, r55;
        android.os.Looper $r25;
        com.android.server.pm.PackageInstallerService$Callbacks $r28;
        java.lang.IllegalStateException $r31, $r37;
        java.lang.Object $r42;
        java.lang.IllegalArgumentException $r43;
        android.app.AppOpsManager $r50;
        java.lang.SecurityException $r52;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.PackageInstaller$SessionParams;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r9 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        virtualinvoke $r9.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>(i1, i0, 1, 1, "createSession");

        $r8 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $z0 = virtualinvoke $r8.<com.android.server.pm.PackageManagerService: boolean isUserRestricted(int,java.lang.String)>(i0, "no_install_apps");

        if $z0 == 0 goto label01;

        $r52 = new java.lang.SecurityException;

        specialinvoke $r52.<java.lang.SecurityException: void <init>(java.lang.String)>("User restriction prevents installing");

        throw $r52;

     label01:
        if i1 == 2000 goto label02;

        if i1 != 0 goto label03;

     label02:
        $i6 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i7 = $i6 | 32;

        r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i7;

        goto label04;

     label03:
        $r50 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r50.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r2);

        $i31 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i30 = $i31 & -33;

        r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i30;

        $i26 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i25 = $i26 & -65;

        r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i25;

        $i28 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i27 = $i28 | 2;

        r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = $i27;

     label04:
        $r10 = r1.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        if $r10 == null goto label06;

        $r41 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r42 = virtualinvoke $r41.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        r3 = (android.app.ActivityManager) $r42;

        i2 = virtualinvoke r3.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $r49 = r1.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i24 = virtualinvoke $r49.<android.graphics.Bitmap: int getWidth()>();

        $i23 = i2 * 2;

        if $i24 > $i23 goto label05;

        $r48 = r1.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $i22 = virtualinvoke $r48.<android.graphics.Bitmap: int getHeight()>();

        $i29 = i2 * 2;

        if $i22 <= $i29 goto label06;

     label05:
        $r47 = r1.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon>;

        $r46 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>($r47, i2, i2, 1);

        r1.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = $r46;

     label06:
        $i8 = r1.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i8 == 1 goto label07;

        $i20 = r1.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        if $i20 != 2 goto label15;

     label07:
        l32 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        $r12 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r11 = r1.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $i11 = r1.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        $l9 = r1.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $i10 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        i3 = staticinvoke <com.android.internal.content.PackageHelper: int resolveInstallLocation(android.content.Context,java.lang.String,int,long,int)>($r12, $r11, $i11, $l9, $i10);

        if i3 != 1 goto label09;

        virtualinvoke r1.<android.content.pm.PackageInstaller$SessionParams: void setInstallFlagsInternal()>();

        goto label11;

     label09:
        if i3 != 2 goto label10;

        virtualinvoke r1.<android.content.pm.PackageInstaller$SessionParams: void setInstallFlagsExternal()>();

        goto label11;

     label10:
        $r14 = new java.io.IOException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No storage with enough free space; res=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l32);

        goto label14;

     label12:
        $r53 := @caughtexception;

        r4 = $r53;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l32);

        throw r4;

     label14:
        goto label16;

     label15:
        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid install mode: ");

        $i21 = r1.<android.content.pm.PackageInstaller$SessionParams: int mode>;

        $r39 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r40);

        throw $r43;

     label16:
        $r16 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r54 = $r16;

        entermonitor $r16;

     label17:
        $r19 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i33 = staticinvoke <com.android.server.pm.PackageInstallerService: int getSessionCount(android.util.SparseArray,int)>($r19, i1);

        $l12 = (long) i33;

        $b13 = $l12 cmp 1024L;

        if $b13 < 0 goto label18;

        $r37 = new java.lang.IllegalStateException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many active sessions for UID ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r37;

     label18:
        $r20 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        i4 = staticinvoke <com.android.server.pm.PackageInstallerService: int getSessionCount(android.util.SparseArray,int)>($r20, i1);

        $l14 = (long) i4;

        $b15 = $l14 cmp 1048576L;

        if $b15 < 0 goto label19;

        $r31 = new java.lang.IllegalStateException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too many historical sessions for UID ");

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r36);

        throw $r31;

     label19:
        l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        i34 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: int allocateSessionIdLocked()>();

        r5 = null;

        r6 = null;

        $i16 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i17 = $i16 & 16;

        if $i17 == 0 goto label20;

        r5 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildInternalStageDir(int)>(i34);

        goto label21;

     label20:
        r6 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.lang.String buildExternalStageCid(int)>(i34);

     label21:
        $r23 = new com.android.server.pm.PackageInstallerSession;

        $r21 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        $r27 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r26 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r22 = r0.<com.android.server.pm.PackageInstallerService: android.os.HandlerThread mInstallThread>;

        $r25 = virtualinvoke $r22.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r23.<com.android.server.pm.PackageInstallerSession: void <init>(com.android.server.pm.PackageInstallerService$InternalCallback,android.content.Context,com.android.server.pm.PackageManagerService,android.os.Looper,int,int,java.lang.String,int,android.content.pm.PackageInstaller$SessionParams,long,java.io.File,java.lang.String,boolean,boolean)>($r21, $r27, $r26, $r25, i34, i0, r2, i1, r1, l5, r5, r6, 0, 0);

        r55 = $r23;

        $r24 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        virtualinvoke $r24.<android.util.SparseArray: void put(int,java.lang.Object)>(i34, r55);

        exitmonitor r54;

     label22:
        goto label25;

     label23:
        $r51 := @caughtexception;

        r7 = $r51;

        exitmonitor r54;

     label24:
        throw r7;

     label25:
        $r28 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        $i18 = r55.<com.android.server.pm.PackageInstallerSession: int sessionId>;

        $i19 = r55.<com.android.server.pm.PackageInstallerSession: int userId>;

        staticinvoke <com.android.server.pm.PackageInstallerService$Callbacks: void access$200(com.android.server.pm.PackageInstallerService$Callbacks,int,int)>($r28, $i18, $i19);

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return i34;

        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label17 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public void updateSessionAppIcon(int, android.graphics.Bitmap)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.graphics.Bitmap r1;
        android.util.SparseArray r2, $r6, $r7;
        com.android.server.pm.PackageInstallerSession r3;
        android.app.ActivityManager r4;
        java.lang.Throwable r5, $r19;
        java.lang.Object $r8, $r18;
        java.lang.SecurityException $r9;
        java.lang.StringBuilder $r10, $r11, $r12;
        java.lang.String $r13;
        android.content.pm.PackageInstaller$SessionParams $r14, $r16;
        boolean $z0;
        com.android.server.pm.PackageInstallerService$InternalCallback $r15;
        android.content.Context $r17;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Bitmap;

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.pm.PackageInstallerSession) $r8;

        if r3 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r3);

        if $z0 != 0 goto label3;

     label2:
        $r9 = new java.lang.SecurityException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        if r1 == null goto label5;

        $r17 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("activity");

        r4 = (android.app.ActivityManager) $r18;

        i1 = virtualinvoke r4.<android.app.ActivityManager: int getLauncherLargeIconSize()>();

        $i3 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        $i2 = i1 * 2;

        if $i3 > $i2 goto label4;

        $i4 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        $i5 = i1 * 2;

        if $i4 <= $i5 goto label5;

     label4:
        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>(r1, i1, i1, 1);

     label5:
        $r14 = r3.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r14.<android.content.pm.PackageInstaller$SessionParams: android.graphics.Bitmap appIcon> = r1;

        $r16 = r3.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r16.<android.content.pm.PackageInstaller$SessionParams: long appIconLastModified> = -1L;

        $r15 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r15.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(r3);

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r2;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void updateSessionAppLabel(int, java.lang.String)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.lang.String r1, $r12;
        android.util.SparseArray r2, $r5, $r6;
        com.android.server.pm.PackageInstallerSession r3;
        java.lang.Throwable r4, $r15;
        java.lang.Object $r7;
        java.lang.SecurityException $r8;
        java.lang.StringBuilder $r9, $r10, $r11;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionParams $r13;
        com.android.server.pm.PackageInstallerService$InternalCallback $r14;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.pm.PackageInstallerSession) $r7;

        if r3 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r3);

        if $z0 != 0 goto label3;

     label2:
        $r8 = new java.lang.SecurityException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label3:
        $r13 = r3.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionParams params>;

        $r13.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appLabel> = r1;

        $r14 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$InternalCallback mInternalCallback>;

        virtualinvoke $r14.<com.android.server.pm.PackageInstallerService$InternalCallback: void onSessionBadgingChanged(com.android.server.pm.PackageInstallerSession)>(r3);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        r4 = $r15;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void abandonSession(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r4, $r5;
        com.android.server.pm.PackageInstallerSession r2;
        java.lang.Throwable r3, $r12;
        java.lang.Object $r6;
        java.lang.SecurityException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.pm.PackageInstallerSession) $r6;

        if r2 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r2);

        if $z0 != 0 goto label3;

     label2:
        $r7 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label3:
        virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: void abandon()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r1;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.IPackageInstallerSession openSession(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.IOException r1, $r3;
        android.content.pm.IPackageInstallerSession $r2;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

     label1:
        $r2 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: android.content.pm.IPackageInstallerSession openSessionInternal(int)>(i0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = staticinvoke <android.util.ExceptionUtils: java.lang.RuntimeException wrap(java.io.IOException)>(r1);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private android.content.pm.IPackageInstallerSession openSessionInternal(int) throws java.io.IOException
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r4, $r5;
        com.android.server.pm.PackageInstallerSession r2;
        java.lang.Throwable r3, $r12;
        java.lang.Object $r6;
        java.lang.SecurityException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.pm.PackageInstallerSession) $r6;

        if r2 == null goto label2;

        $z0 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)>(r2);

        if $z0 != 0 goto label3;

     label2:
        $r7 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Caller has no access to session ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label3:
        virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: void open()>();

        exitmonitor r1;

     label4:
        return r2;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private int allocateSessionIdLocked()
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, $i2, $i3;
        java.util.Random $r1;
        android.util.SparseArray $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.IllegalStateException $r4;
        android.util.SparseBooleanArray $r7;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 = 0;

     label1:
        $r1 = r0.<com.android.server.pm.PackageInstallerService: java.util.Random mRandom>;

        $i2 = virtualinvoke $r1.<java.util.Random: int nextInt(int)>(2147483646);

        i1 = $i2 + 1;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        if $r3 != null goto label2;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        if $r6 != null goto label2;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        $z0 = virtualinvoke $r7.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i1, 0);

        if $z0 != 0 goto label2;

        return i1;

     label2:
        $i3 = i0;

        i0 = i0 + 1;

        if $i3 < 32 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Failed to allocate session ID");

        throw $r4;
    }

    private java.io.File buildInternalStageDir(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File $r1, $r3;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r1 = new java.io.File;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: java.io.File mStagingDir>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vmdl");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r7);

        return $r1;
    }

    static void prepareInternalStageDir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        android.system.ErrnoException r1, $r15;
        boolean $z0, $z1;
        java.lang.String $r2, $r3, $r8, $r13, $r18;
        java.io.IOException $r4, $r9, $r14;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r12, $r16, $r17, $r19;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Session dir already exists: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label1:
        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void mkdir(java.lang.String,int)>($r2, 493);

        $r3 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r3, 493);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r1 = $r15;

        $r14 = new java.io.IOException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to prepare session dir: ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r18, r1);

        throw $r14;

     label4:
        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r0);

        if $z1 != 0 goto label5;

        $r4 = new java.io.IOException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restorecon session dir: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label5:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private java.lang.String buildExternalStageCid(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("smdl");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    static void prepareExternalStageCid(java.lang.String, long) throws java.io.IOException
    {
        java.lang.String r0, $r1, $r2, $r7;
        long l0;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r1 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $r2 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String createSdDir(long,java.lang.String,java.lang.String,int,boolean)>(l0, r0, $r1, 1000, 1);

        if $r2 != null goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create session cid: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return;
    }

    public android.content.pm.PackageInstaller$SessionInfo getSessionInfo(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        android.util.SparseArray r1, $r4, $r5;
        com.android.server.pm.PackageInstallerSession r2;
        java.lang.Throwable r3, $r8;
        java.lang.Object $r6;
        android.content.pm.PackageInstaller$SessionInfo $r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.pm.PackageInstallerSession) $r6;

        if r2 == null goto label2;

        $r7 = virtualinvoke r2.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        goto label3;

     label2:
        $r7 = null;

     label3:
        exitmonitor r1;

     label4:
        return $r7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.content.pm.ParceledListSlice getAllSessions(int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.ArrayList r1, $r6;
        android.util.SparseArray r2, $r7, $r8, $r10;
        com.android.server.pm.PackageInstallerSession r3;
        java.lang.Throwable r4, $r13;
        com.android.server.pm.PackageManagerService $r5;
        android.content.pm.ParceledListSlice $r9;
        java.lang.Object $r11;
        android.content.pm.PackageInstaller$SessionInfo $r12;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 1, 0, "getAllSessions");

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        i1 = 0;

     label2:
        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i3 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i1 >= $i3 goto label4;

        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.pm.PackageInstallerSession) $r11;

        $i4 = r3.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i4 != i0 goto label3;

        $r12 = virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        $r9 = new android.content.pm.ParceledListSlice;

        specialinvoke $r9.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r1);

        return $r9;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.content.pm.ParceledListSlice getMySessions(java.lang.String, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1, $r14;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.util.ArrayList r2, $r8;
        android.util.SparseArray r3, $r9, $r10, $r13;
        com.android.server.pm.PackageInstallerSession r4;
        java.lang.Throwable r5, $r16;
        com.android.server.pm.PackageManagerService $r6;
        android.app.AppOpsManager $r7;
        android.content.pm.ParceledListSlice $r11;
        java.lang.Object $r12;
        boolean $z0;
        android.content.pm.PackageInstaller$SessionInfo $r15;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r6 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r6.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i0, 1, 0, "getMySessions");

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.app.AppOpsManager mAppOps>;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r7.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i3, r1);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        $r9 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r3 = $r9;

        entermonitor $r9;

     label1:
        i1 = 0;

     label2:
        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $i4 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        if i1 >= $i4 goto label4;

        $r13 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r12 = virtualinvoke $r13.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r4 = (com.android.server.pm.PackageInstallerSession) $r12;

        $r14 = r4.<com.android.server.pm.PackageInstallerSession: java.lang.String installerPackageName>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r14, r1);

        if $z0 == 0 goto label3;

        $i5 = r4.<com.android.server.pm.PackageInstallerSession: int userId>;

        if $i5 != i0 goto label3;

        $r15 = virtualinvoke r4.<com.android.server.pm.PackageInstallerSession: android.content.pm.PackageInstaller$SessionInfo generateInfo()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r15);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r3;

     label7:
        throw r5;

     label8:
        $r11 = new android.content.pm.ParceledListSlice;

        specialinvoke $r11.<android.content.pm.ParceledListSlice: void <init>(java.util.List)>(r2);

        return $r11;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void uninstall(java.lang.String, int, android.content.IntentSender, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3;
        android.content.IntentSender r2;
        com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter r3, $r6;
        android.content.Intent r4, $r9;
        com.android.server.pm.PackageManagerService $r5, $r16;
        android.content.Context $r7, $r8;
        android.net.Uri $r10;
        android.content.pm.IPackageDeleteObserver2 $r12, $r15;
        android.os.IBinder $r14;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.content.IntentSender;

        i1 := @parameter3: int;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r5.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i2, i1, 1, 1, "uninstall");

        $r6 = new com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter;

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        specialinvoke $r6.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void <init>(android.content.Context,android.content.IntentSender,java.lang.String)>($r7, r2, r1);

        r3 = $r6;

        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DELETE_PACKAGES");

        if $i3 != 0 goto label1;

        $r16 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $r15 = virtualinvoke r3.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        virtualinvoke $r16.<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)>(r1, $r15, i1, i0);

        goto label2;

     label1:
        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.UNINSTALL_PACKAGE");

        r4 = $r9;

        $r10 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("package", r1, null);

        virtualinvoke r4.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r10);

        $r12 = virtualinvoke r3.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: android.content.pm.IPackageDeleteObserver2 getBinder()>();

        $r14 = interfaceinvoke $r12.<android.content.pm.IPackageDeleteObserver2: android.os.IBinder asBinder()>();

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.IBinder)>("android.content.pm.extra.CALLBACK", $r14);

        virtualinvoke r3.<com.android.server.pm.PackageInstallerService$PackageDeleteObserverAdapter: void onUserActionRequired(android.content.Intent)>(r4);

     label2:
        return;
    }

    public void setPermissionsResult(int, boolean)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        boolean z0;
        android.util.SparseArray r1, $r4, $r5;
        java.lang.Throwable r2, $r8;
        android.content.Context $r3;
        java.lang.Object $r6;
        com.android.server.pm.PackageInstallerSession $r7;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.pm.PackageInstallerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INSTALL_PACKAGES", "PackageInstaller");

        $r4 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.pm.PackageInstallerSession) $r6;

        virtualinvoke $r7.<com.android.server.pm.PackageInstallerSession: void setPermissionsResult(boolean)>(z0);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void registerCallback(android.content.pm.IPackageInstallerCallback, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.IPackageInstallerCallback r1;
        int i0, $i1;
        com.android.server.pm.PackageManagerService $r2;
        com.android.server.pm.PackageInstallerService$Callbacks $r3;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.IPackageInstallerCallback;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageManagerService mPm>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<com.android.server.pm.PackageManagerService: void enforceCrossUserPermission(int,int,boolean,boolean,java.lang.String)>($i1, i0, 1, 0, "registerCallback");

        $r3 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r3.<com.android.server.pm.PackageInstallerService$Callbacks: void register(android.content.pm.IPackageInstallerCallback,int)>(r1, i0);

        return;
    }

    public void unregisterCallback(android.content.pm.IPackageInstallerCallback)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.content.pm.IPackageInstallerCallback r1;
        com.android.server.pm.PackageInstallerService$Callbacks $r2;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: android.content.pm.IPackageInstallerCallback;

        $r2 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        virtualinvoke $r2.<com.android.server.pm.PackageInstallerService$Callbacks: void unregister(android.content.pm.IPackageInstallerCallback)>(r1);

        return;
    }

    private static int getSessionCount(android.util.SparseArray, int)
    {
        android.util.SparseArray r0;
        int i0, i1, i2, i3, $i4;
        com.android.server.pm.PackageInstallerSession r1;
        java.lang.Object $r2;

        r0 := @parameter0: android.util.SparseArray;

        i0 := @parameter1: int;

        i1 = 0;

        i2 = virtualinvoke r0.<android.util.SparseArray: int size()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r2 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (com.android.server.pm.PackageInstallerSession) $r2;

        $i4 = r1.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        if $i4 != i0 goto label2;

        i1 = i1 + 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i1;
    }

    private boolean isCallingUidOwner(com.android.server.pm.PackageInstallerSession)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageInstallerSession r1;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: com.android.server.pm.PackageInstallerSession;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 != 0 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $i1 = r1.<com.android.server.pm.PackageInstallerSession: int installerUid>;

        if i0 != $i1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        android.util.SparseArray r2, $r5, $r6, $r7, $r10, $r11;
        int i0, i1, i2, i3;
        com.android.server.pm.PackageInstallerSession r3, r15;
        java.lang.Throwable r4, $r13;
        android.util.SparseBooleanArray $r8;
        java.lang.String $r9;
        java.lang.Object $r12, $r14;

        r0 := @this: com.android.server.pm.PackageInstallerService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r5 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Active install sessions:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r6 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r11 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        $r14 = virtualinvoke $r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.pm.PackageInstallerSession) $r14;

        virtualinvoke r3.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Historical install sessions:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r7 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        i2 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        i3 = 0;

     label4:
        if i3 >= i2 goto label5;

        $r10 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        $r12 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r15 = (com.android.server.pm.PackageInstallerSession) $r12;

        virtualinvoke r15.<com.android.server.pm.PackageInstallerSession: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i3 = i3 + 1;

        goto label4;

     label5:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Legacy install sessions:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void increaseIndent()>();

        $r8 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseBooleanArray mLegacySessions>;

        $r9 = virtualinvoke $r8.<android.util.SparseBooleanArray: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r9);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void decreaseIndent()>();

        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static android.util.SparseArray access$000(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mSessions>;

        return $r1;
    }

    static void access$100(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsLocked()>();

        return;
    }

    static com.android.server.pm.PackageInstallerService$Callbacks access$300(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        com.android.server.pm.PackageInstallerService$Callbacks $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: com.android.server.pm.PackageInstallerService$Callbacks mCallbacks>;

        return $r1;
    }

    static void access$500(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        specialinvoke r0.<com.android.server.pm.PackageInstallerService: void writeSessionsAsync()>();

        return;
    }

    static android.util.SparseArray access$800(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: android.util.SparseArray mHistoricalSessions>;

        return $r1;
    }

    static java.io.File access$900(com.android.server.pm.PackageInstallerService, int)
    {
        com.android.server.pm.PackageInstallerService r0;
        int i0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageInstallerService: java.io.File buildAppIconFile(int)>(i0);

        return $r1;
    }

    static android.os.Handler access$1000(com.android.server.pm.PackageInstallerService)
    {
        com.android.server.pm.PackageInstallerService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.pm.PackageInstallerService;

        $r1 = r0.<com.android.server.pm.PackageInstallerService: android.os.Handler mInstallHandler>;

        return $r1;
    }

    static void <clinit>()
    {
        com.android.server.pm.PackageInstallerService$1 $r0;

        <com.android.server.pm.PackageInstallerService: long MAX_HISTORICAL_SESSIONS> = 1048576L;

        <com.android.server.pm.PackageInstallerService: long MAX_ACTIVE_SESSIONS> = 1024L;

        <com.android.server.pm.PackageInstallerService: long MAX_AGE_MILLIS> = 259200000L;

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_ABI_OVERRIDE> = "abiOverride";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_REFERRER_URI> = "referrerUri";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_ORIGINATING_URI> = "originatingUri";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_LABEL> = "appLabel";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_ICON> = "appIcon";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_APP_PACKAGE_NAME> = "appPackageName";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SIZE_BYTES> = "sizeBytes";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALL_LOCATION> = "installLocation";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALL_FLAGS> = "installFlags";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_MODE> = "mode";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SEALED> = "sealed";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_PREPARED> = "prepared";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_STAGE_CID> = "sessionStageCid";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_STAGE_DIR> = "sessionStageDir";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_CREATED_MILLIS> = "createdMillis";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALLER_UID> = "installerUid";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_INSTALLER_PACKAGE_NAME> = "installerPackageName";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_USER_ID> = "userId";

        <com.android.server.pm.PackageInstallerService: java.lang.String ATTR_SESSION_ID> = "sessionId";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_SESSION> = "session";

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG_SESSIONS> = "sessions";

        <com.android.server.pm.PackageInstallerService: boolean LOGD> = 0;

        <com.android.server.pm.PackageInstallerService: java.lang.String TAG> = "PackageInstaller";

        $r0 = new com.android.server.pm.PackageInstallerService$1;

        specialinvoke $r0.<com.android.server.pm.PackageInstallerService$1: void <init>()>();

        <com.android.server.pm.PackageInstallerService: java.io.FilenameFilter sStageFilter> = $r0;

        return;
    }
}
