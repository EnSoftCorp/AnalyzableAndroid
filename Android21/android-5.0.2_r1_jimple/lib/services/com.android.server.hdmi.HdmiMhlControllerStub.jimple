final class com.android.server.hdmi.HdmiMhlControllerStub extends java.lang.Object
{
    private static final android.util.SparseArray mLocalDevices;
    private static final android.hardware.hdmi.HdmiPortInfo[] EMPTY_PORT_INFO;
    private static final int INVALID_MHL_VERSION;
    private static final int NO_SUPPORTED_FEATURES;
    private static final int INVALID_DEVICE_ROLES;

    private void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        com.android.server.hdmi.HdmiControlService r1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    boolean isReady()
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        return 0;
    }

    static com.android.server.hdmi.HdmiMhlControllerStub create(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiControlService r0;
        com.android.server.hdmi.HdmiMhlControllerStub $r1;

        r0 := @parameter0: com.android.server.hdmi.HdmiControlService;

        $r1 = new com.android.server.hdmi.HdmiMhlControllerStub;

        specialinvoke $r1.<com.android.server.hdmi.HdmiMhlControllerStub: void <init>(com.android.server.hdmi.HdmiControlService)>(r0);

        return $r1;
    }

    android.hardware.hdmi.HdmiPortInfo[] getPortInfos()
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        android.hardware.hdmi.HdmiPortInfo[] $r1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        $r1 = <com.android.server.hdmi.HdmiMhlControllerStub: android.hardware.hdmi.HdmiPortInfo[] EMPTY_PORT_INFO>;

        return $r1;
    }

    com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDevice(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return null;
    }

    com.android.server.hdmi.HdmiMhlLocalDeviceStub getLocalDeviceById(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return null;
    }

    android.util.SparseArray getAllLocalDevices()
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        $r1 = <com.android.server.hdmi.HdmiMhlControllerStub: android.util.SparseArray mLocalDevices>;

        return $r1;
    }

    com.android.server.hdmi.HdmiMhlLocalDeviceStub removeLocalDevice(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return null;
    }

    com.android.server.hdmi.HdmiMhlLocalDeviceStub addLocalDevice(com.android.server.hdmi.HdmiMhlLocalDeviceStub)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        com.android.server.hdmi.HdmiMhlLocalDeviceStub r1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        r1 := @parameter0: com.android.server.hdmi.HdmiMhlLocalDeviceStub;

        return null;
    }

    void clearAllLocalDevices()
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        return;
    }

    void sendVendorCommand(int, int, int, byte[])
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0, i1, i2;
        byte[] r1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: byte[];

        return;
    }

    void setOption(int, int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0, i1;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    int getMhlVersion(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return 0;
    }

    int getPeerMhlVersion(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return 0;
    }

    int getSupportedFeatures(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return 0;
    }

    int getEcbusDeviceRoles(int)
    {
        com.android.server.hdmi.HdmiMhlControllerStub r0;
        int i0;

        r0 := @this: com.android.server.hdmi.HdmiMhlControllerStub;

        i0 := @parameter0: int;

        return 0;
    }

    static void <clinit>()
    {
        android.util.SparseArray $r0;
        android.hardware.hdmi.HdmiPortInfo[] $r1;

        <com.android.server.hdmi.HdmiMhlControllerStub: int INVALID_DEVICE_ROLES> = 0;

        <com.android.server.hdmi.HdmiMhlControllerStub: int NO_SUPPORTED_FEATURES> = 0;

        <com.android.server.hdmi.HdmiMhlControllerStub: int INVALID_MHL_VERSION> = 0;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>()>();

        <com.android.server.hdmi.HdmiMhlControllerStub: android.util.SparseArray mLocalDevices> = $r0;

        $r1 = newarray (android.hardware.hdmi.HdmiPortInfo)[0];

        <com.android.server.hdmi.HdmiMhlControllerStub: android.hardware.hdmi.HdmiPortInfo[] EMPTY_PORT_INFO> = $r1;

        return;
    }
}
