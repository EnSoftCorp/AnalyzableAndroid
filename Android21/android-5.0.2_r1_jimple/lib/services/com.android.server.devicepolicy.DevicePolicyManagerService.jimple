public class com.android.server.devicepolicy.DevicePolicyManagerService extends android.app.admin.IDevicePolicyManager$Stub
{
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String DEVICE_POLICIES_XML;
    private static final java.lang.String LOCK_TASK_COMPONENTS_XML;
    private static final int REQUEST_EXPIRE_PASSWORD;
    private static final long MS_PER_DAY;
    private static final long EXPIRATION_GRACE_PERIOD_MS;
    protected static final java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION;
    private static final int MONITORING_CERT_NOTIFICATION_ID;
    private static final boolean DBG;
    private static final java.lang.String ATTR_PERMISSION_PROVIDER;
    private static final java.lang.String ATTR_SETUP_COMPLETE;
    private static final java.util.Set DEVICE_OWNER_USER_RESTRICTIONS;
    private static final java.util.Set SECURE_SETTINGS_WHITELIST;
    private static final java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST;
    private static final java.util.Set GLOBAL_SETTINGS_WHITELIST;
    final android.content.Context mContext;
    final android.os.UserManager mUserManager;
    final android.os.PowerManager$WakeLock mWakeLock;
    final com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService;
    android.os.IPowerManager mIPowerManager;
    android.view.IWindowManager mIWindowManager;
    android.app.NotificationManager mNotificationManager;
    private com.android.server.devicepolicy.DeviceOwner mDeviceOwner;
    private boolean mHasFeature;
    final android.util.SparseArray mUserData;
    android.os.Handler mHandler;
    android.content.BroadcastReceiver mReceiver;
    public static final java.lang.String SYSTEM_PROP_DISABLE_CAMERA;

    private void handlePackagesChanged(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3;
        boolean z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        android.content.pm.IPackageManager r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r5, $r6, $r12;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8, $r14, $r18;
        android.content.pm.PackageInfo $r9;
        java.lang.String $r10;
        java.util.HashMap $r13;
        android.content.ComponentName $r16, $r17;
        android.os.RemoteException $r19;
        android.content.pm.ActivityInfo $r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 = 0;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i1 = $i2 - 1;

     label1:
        if i1 < 0 goto label7;

        $r6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r7;

     label2:
        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r10 = virtualinvoke $r8.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $r9 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>($r10, 0, i0);

        if $r9 == null goto label3;

        $r18 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r17 = virtualinvoke $r18.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r20 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>($r17, 0, i0);

        if $r20 != null goto label4;

     label3:
        z0 = 1;

        $r12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object remove(int)>(i1);

        $r13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r14 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r16 = virtualinvoke $r14.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r16);

     label4:
        goto label6;

     label5:
        $r19 := @caughtexception;

     label6:
        i1 = i1 + -1;

        goto label1;

     label7:
        if z0 == 0 goto label8;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        $i3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i3);

     label8:
        return;

        catch android.os.RemoteException from label2 to label4 with label5;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context r1, $r6;
        android.content.IntentFilter r2, $r13, $r19, r24;
        android.util.SparseArray $r3;
        android.os.Handler $r4, $r15, $r18;
        com.android.server.devicepolicy.DevicePolicyManagerService$1 $r5;
        android.os.UserManager $r7;
        android.content.pm.PackageManager $r8;
        boolean $z0, $z1;
        java.lang.Object $r9;
        android.os.PowerManager $r10;
        android.os.PowerManager$WakeLock $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r12, $r22;
        android.os.UserHandle $r14, $r21;
        android.content.BroadcastReceiver $r17, $r20;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.app.admin.IDevicePolicyManager$Stub: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData> = $r3;

        $r4 = new android.os.Handler;

        specialinvoke $r4.<android.os.Handler: void <init>()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler> = $r4;

        $r5 = new com.android.server.devicepolicy.DevicePolicyManagerService$1;

        specialinvoke $r5.<com.android.server.devicepolicy.DevicePolicyManagerService$1: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService)>(r0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver> = $r5;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext> = r1;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r7 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r6);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager> = $r7;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.device_admin");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature> = $z0;

        $r9 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r10 = (android.os.PowerManager) $r9;

        $r11 = virtualinvoke $r10.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "DPM");

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PowerManager$WakeLock mWakeLock> = $r11;

        $r12 = new com.android.server.devicepolicy.DevicePolicyManagerService$LocalService;

        specialinvoke $r12.<com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$1)>(r0, null);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService> = $r12;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        $r13 = new android.content.IntentFilter;

        specialinvoke $r13.<android.content.IntentFilter: void <init>()>();

        r2 = $r13;

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BOOT_COMPLETED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTED");

        virtualinvoke r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.security.STORAGE_CHANGED");

        virtualinvoke r2.<android.content.IntentFilter: void setPriority(int)>(1000);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r14 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r17, $r14, r2, null, $r15);

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>()>();

        r24 = $r19;

        virtualinvoke r24.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_CHANGED");

        virtualinvoke r24.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r24.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE");

        virtualinvoke r24.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke r24.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.BroadcastReceiver mReceiver>;

        $r21 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke r1.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r20, $r21, r24, null, $r18);

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "android/app/admin/DevicePolicyManagerInternal", $r22);

        return;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2, $r7;
        java.lang.Throwable r3, $r9;
        android.util.SparseArray $r5, $r8;
        java.lang.Object $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) $r6;

        if r2 != null goto label2;

        $r7 = new com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke $r7.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: void <init>(int)>(i0);

        r2 = $r7;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, r2);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void loadSettingsLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData,int)>(r2, i0);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void removeUserData(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.io.File r3, $r9, $r10;
        java.lang.Throwable r4, $r19;
        com.android.server.devicepolicy.DeviceOwner $r6, $r17, $r18;
        android.util.SparseArray $r7, $r16;
        java.lang.Object $r8;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14, $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        if i0 != 0 goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Tried to remove device policy file for user 0! Ignoring.");

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r6 == null goto label4;

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r18.<com.android.server.devicepolicy.DeviceOwner: void removeProfileOwner(int)>(i0);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

     label4:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData) $r8;

        if r2 == null goto label5;

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        virtualinvoke $r16.<android.util.SparseArray: void remove(int)>(i0);

     label5:
        $r9 = new java.io.File;

        $r10 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r9.<java.io.File: void <init>(java.io.File,java.lang.String)>($r10, "device_policies.xml");

        r3 = $r9;

        virtualinvoke r3.<java.io.File: boolean delete()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed device policy file ");

        $r14 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r15);

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r1;

     label8:
        throw r4;

     label9:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateScreenCaptureDisabledInWindowManager(int,boolean)>(i0, 0);

        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    void loadDeviceOwner()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        java.lang.Throwable r2, $r5;
        com.android.server.devicepolicy.DeviceOwner $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = staticinvoke <com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner load()>();

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner> = $r4;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void setExpirationAlarmCheckLocked(android.content.Context, com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.Context r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        long l0, l1, l2, l3, l4, l11;
        android.app.AlarmManager r3;
        android.app.PendingIntent r4;
        java.lang.Throwable r5, $r9;
        int $i5, $i9;
        byte $b6, $b7, $b8, $b10;
        java.lang.Object $r6;
        android.content.Intent $r7;
        android.os.UserHandle $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $i5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        l0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int)>(null, $i5);

        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l0 - l1;

        $b6 = l0 cmp 0L;

        if $b6 != 0 goto label1;

        l3 = 0L;

        goto label4;

     label1:
        $b8 = l2 cmp 0L;

        if $b8 > 0 goto label2;

        l3 = l1 + 86400000L;

        goto label4;

     label2:
        l4 = l2 % 86400000L;

        $b7 = l4 cmp 0L;

        if $b7 != 0 goto label3;

        l4 = 86400000L;

     label3:
        l3 = l1 + l4;

     label4:
        l11 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label5:
        $r6 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        r3 = (android.app.AlarmManager) $r6;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION");

        $r8 = new android.os.UserHandle;

        $i9 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>($i9);

        r4 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcastAsUser(android.content.Context,int,android.content.Intent,int,android.os.UserHandle)>(r1, 5571, $r7, 1207959552, $r8);

        virtualinvoke r3.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>(r4);

        $b10 = l3 cmp 0L;

        if $b10 == 0 goto label6;

        virtualinvoke r3.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(1, l3, r4);

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        goto label9;

     label7:
        $r9 := @caughtexception;

        r5 = $r9;

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l11);

        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private android.os.IPowerManager getIPowerManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.IBinder r1;
        android.os.IPowerManager $r2, $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager>;

        if $r2 != null goto label1;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        $r4 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>(r1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager> = $r4;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.IPowerManager mIPowerManager>;

        return $r3;
    }

    private android.view.IWindowManager getWindowManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.IBinder r1;
        android.view.IWindowManager $r2, $r3, $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager>;

        if $r2 != null goto label1;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r4 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>(r1);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager> = $r4;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.IWindowManager mIWindowManager>;

        return $r3;
    }

    private android.app.NotificationManager getNotificationManager()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.NotificationManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r5 = (android.app.NotificationManager) $r4;

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.NotificationManager mNotificationManager>;

        return $r2;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r3;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        java.lang.String $r6, $r9, $r10, $r13;
        android.app.admin.DeviceAdminInfo $r7, $r11;
        android.content.pm.ActivityInfo $r8, $r12;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r4 = $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        if r2 == null goto label1;

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r9 = $r8.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        $r11 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>();

        $r13 = $r12.<android.content.pm.ActivityInfo: java.lang.String name>;

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 == 0 goto label1;

        return r2;

     label1:
        return null;
    }

    com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName, int) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, $r19, $r37, $r43, $r52, $r56;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.ArrayList r3, $r6, $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4, r5, $r21, $r23, $r32, $r45, r76;
        boolean z0, z1, $z2, $z3, $z4, $z6, $z7;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r14, $r15, $r18, $r20, $r25, $r30, $r33, $r34, $r35, $r36, $r39, $r40, $r49, $r50, $r61, $r62, $r63, $r64, $r67, $r68, $r70, $r71;
        java.lang.SecurityException $r9, $r16, $r28, $r41, $r66, $r72;
        java.lang.String $r13, $r27, $r29, $r42, $r48, $r53, $r55, $r60, $r69, $r73;
        java.lang.Object $r17, $r26, $r31, $r46, $r47, $r57, $r65;
        android.app.admin.DeviceAdminInfo $r22, $r24, $r38, $r44, $r51, $r54, $r59;
        java.util.HashMap $r58;
        java.util.Iterator r74, r75;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r3 = $r6;

        if r1 == null goto label03;

        $r58 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r65 = virtualinvoke $r58.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r65;

        if r4 != null goto label01;

        $r72 = new java.lang.SecurityException;

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r72.<java.lang.SecurityException: void <init>(java.lang.String)>($r69);

        throw $r72;

     label01:
        $i5 = virtualinvoke r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i5 == i1 goto label02;

        $r66 = new java.lang.SecurityException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by uid ");

        $i6 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r71 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r73 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<java.lang.SecurityException: void <init>(java.lang.String)>($r73);

        throw $r66;

     label02:
        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label06;

     label03:
        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r74 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r74.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        $r57 = interfaceinvoke r74.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r57;

        $i4 = virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        if $i4 != i1 goto label05;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r5);

     label05:
        goto label04;

     label06:
        r75 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z3 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label14;

        $r47 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r76 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r47;

        $r54 = r76.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r55 = virtualinvoke $r54.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>($r55);

        $r56 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i2);

        if $r56 == null goto label08;

        $r52 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i2);

        $r53 = virtualinvoke $r52.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r59 = r76.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r60 = virtualinvoke $r59.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z6 = virtualinvoke $r53.<java.lang.String: boolean equals(java.lang.Object)>($r60);

        if $z6 == 0 goto label08;

        $z7 = 1;

        goto label09;

     label08:
        $z7 = 0;

     label09:
        z1 = $z7;

        if i0 != -2 goto label10;

        if z0 == 0 goto label13;

        return r76;

     label10:
        if i0 != -1 goto label12;

        if z0 != 0 goto label11;

        if z1 == 0 goto label13;

     label11:
        return r76;

     label12:
        $r51 = r76.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z4 = virtualinvoke $r51.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z4 == 0 goto label13;

        return r76;

     label13:
        goto label07;

     label14:
        if r1 == null goto label17;

        if i0 != -2 goto label15;

        $r41 = new java.lang.SecurityException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r46 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r45 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r46;

        $r44 = $r45.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r43 = virtualinvoke $r44.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r50 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r43);

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own the device");

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<java.lang.SecurityException: void <init>(java.lang.String)>($r48);

        throw $r41;

     label15:
        if i0 != -1 goto label16;

        $r28 = new java.lang.SecurityException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r31 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r32 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r31;

        $r38 = $r32.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r37 = virtualinvoke $r38.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not own the profile");

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.SecurityException: void <init>(java.lang.String)>($r42);

        throw $r28;

     label16:
        $r16 = new java.lang.SecurityException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Admin ");

        $r17 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r21 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r17;

        $r22 = $r21.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r19 = virtualinvoke $r22.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not specify uses-policy for: ");

        $r26 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r23 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r26;

        $r24 = $r23.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r29 = virtualinvoke $r24.<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>(i0);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.SecurityException: void <init>(java.lang.String)>($r27);

        throw $r16;

     label17:
        $r9 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin owned by uid ");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for policy #");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r1, r2, null);

        return;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.content.BroadcastReceiver)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        android.content.BroadcastReceiver r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.BroadcastReceiver;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r1, r2, null, r3);

        return;
    }

    void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin, java.lang.String, android.os.Bundle, android.content.BroadcastReceiver)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.content.BroadcastReceiver r4;
        android.content.Intent r5, $r6;
        android.app.admin.DeviceAdminInfo $r7;
        android.content.ComponentName $r8;
        boolean $z0;
        android.content.Context $r10, $r12;
        android.os.UserHandle $r11, $r13;
        android.os.Handler $r14;
        long $l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        r4 := @parameter3: android.content.BroadcastReceiver;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>(r2);

        r5 = $r6;

        $r7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r5.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r8);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.app.action.ACTION_PASSWORD_EXPIRING");

        if $z0 == 0 goto label1;

        $l0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("expiration", $l0);

     label1:
        if r3 == null goto label2;

        virtualinvoke r5.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r3);

     label2:
        if r4 == null goto label3;

        $r12 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r13 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        virtualinvoke $r12.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r5, $r13, null, r4, $r14, -1, null, null);

        goto label4;

     label3:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke r1.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        virtualinvoke $r10.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r5, $r11);

     label4:
        return;
    }

    void sendAdminCommandLocked(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.app.admin.DeviceAdminInfo $r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i2 <= 0 goto label3;

        i3 = 0;

     label1:
        if i3 >= i2 goto label3;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r3, r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    private void sendAdminCommandToSelfAndProfilesLocked(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, i1, i2;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        android.os.UserManager $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r5.<android.os.UserManager: java.util.List getProfiles(int)>(i1);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r6;

        $r7 = virtualinvoke r4.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(java.lang.String,int,int)>(r1, i0, i2);

        goto label1;

     label2:
        return;
    }

    void removeActiveAdminLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$2 $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r2 == null goto label1;

        $r3 = new com.android.server.devicepolicy.DevicePolicyManagerService$2;

        specialinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$2: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,android.content.ComponentName)>(r0, r2, r1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.content.BroadcastReceiver)>(r2, "android.app.action.DEVICE_ADMIN_DISABLED", $r3);

     label1:
        return;
    }

    public android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, $i1;
        android.content.Intent r2, $r5;
        java.util.List r3;
        org.xmlpull.v1.XmlPullParserException r4, $r19;
        boolean $z0;
        android.content.Context $r7, $r14;
        android.content.pm.PackageManager $r8;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r18, $r20, $r21, $r22, $r24, $r26, $r27, $r28, $r30, $r31;
        java.lang.String $r13, $r23, $r29;
        android.app.admin.DeviceAdminInfo $r15;
        android.content.pm.ResolveInfo $r16;
        java.lang.Object $r17;
        java.io.IOException $r25, r32;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>()>();

        r2 = $r5;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke $r8.<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int,int)>(r2, 32896, i0);

        if r3 == null goto label2;

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 > 0 goto label3;

     label2:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown admin: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        $r15 = new android.app.admin.DeviceAdminInfo;

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r17 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (android.content.pm.ResolveInfo) $r17;

        specialinvoke $r15.<android.app.admin.DeviceAdminInfo: void <init>(android.content.Context,android.content.pm.ResolveInfo)>($r14, $r16);

     label4:
        return $r15;

     label5:
        $r19 := @caughtexception;

        r4 = $r19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad device admin requested for user=");

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r23, r4);

        return null;

     label6:
        $r25 := @caughtexception;

        r32 = $r25;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad device admin requested for user=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r29, r32);

        return null;

        catch org.xmlpull.v1.XmlPullParserException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
    }

    private static com.android.internal.util.JournaledFile makeJournaledFile(int)
    {
        int i0;
        java.lang.String r0, $r3, $r10;
        java.io.File $r1, $r2, $r5, $r6;
        com.android.internal.util.JournaledFile $r4;
        java.lang.StringBuilder $r7, $r8, $r9;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r3 = "/data/system/device_policies.xml";

        goto label2;

     label1:
        $r1 = new java.io.File;

        $r2 = staticinvoke <android.os.Environment: java.io.File getUserSystemDirectory(int)>(i0);

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "device_policies.xml");

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getAbsolutePath()>();

     label2:
        r0 = $r3;

        $r4 = new com.android.internal.util.JournaledFile;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r0);

        $r6 = new java.io.File;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r10);

        specialinvoke $r4.<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>($r5, $r6);

        return $r4;
    }

    private void saveSettingsLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        com.android.internal.util.JournaledFile r2;
        java.io.FileOutputStream r3, $r6;
        com.android.internal.util.FastXmlSerializer r4, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.io.File $r7;
        java.lang.Boolean $r9;
        android.content.ComponentName $r10, $r49, $r54;
        java.util.ArrayList $r12, $r44;
        boolean $z0;
        java.lang.String $r15, $r17, $r18, $r20, $r23, $r25, $r27, $r28, $r38, $r43, $r47, $r55, $r60, r61;
        java.util.List $r30, $r35;
        java.lang.Object $r31, $r51;
        android.app.admin.DeviceAdminInfo $r50;
        java.io.IOException $r57, $r58;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r2 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r3 = null;

     label01:
        $r6 = new java.io.FileOutputStream;

        $r7 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>();

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r7, 0);

        r3 = $r6;

        $r8 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r8.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r4 = $r8;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r3, "utf-8");

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "policies");

        $r10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

        if $r10 == null goto label02;

        $r54 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

        $r60 = virtualinvoke $r54.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "permission-provider", $r60);

     label02:
        $z0 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        if $z0 == 0 goto label03;

        $r55 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "setup-complete", $r55);

     label03:
        $r12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        i2 = 0;

     label04:
        if i2 >= i1 goto label06;

        $r44 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r51 = virtualinvoke $r44.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r51;

        if r5 == null goto label05;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "admin");

        $r50 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r49 = virtualinvoke $r50.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r47 = virtualinvoke $r49.<android.content.ComponentName: java.lang.String flattenToString()>();

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", $r47);

        virtualinvoke r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)>(r4);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "admin");

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        $i3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i3 < 0 goto label07;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "password-owner");

        $i23 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        $r43 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i23);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r43);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "password-owner");

     label07:
        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i5 == 0 goto label08;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

        $i22 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $r38 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i22);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "value", $r38);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "failed-password-attempts");

     label08:
        $i4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i4 != 0 goto label09;

        $i19 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        if $i19 != 0 goto label09;

        $i20 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        if $i20 != 0 goto label09;

        $i15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        if $i15 != 0 goto label09;

        $i16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        if $i16 != 0 goto label09;

        $i17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        if $i17 != 0 goto label09;

        $i18 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        if $i18 != 0 goto label09;

        $i21 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        if $i21 == 0 goto label10;

     label09:
        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "active-password");

        $i6 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "quality", $r15);

        $i7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "length", $r17);

        $i8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i8);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "uppercase", $r18);

        $i9 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i9);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "lowercase", $r20);

        $i10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i10);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "letters", $r23);

        $i11 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        $r25 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i11);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "numeric", $r25);

        $i12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "symbols", $r27);

        $i13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i13);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "nonletter", $r28);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "active-password");

     label10:
        i24 = 0;

     label11:
        $r35 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $i14 = interfaceinvoke $r35.<java.util.List: int size()>();

        if i24 >= $i14 goto label12;

        $r30 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i24);

        r61 = (java.lang.String) $r31;

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "lock-task-component");

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "name", r61);

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "lock-task-component");

        i24 = i24 + 1;

        goto label11;

     label12:
        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "policies");

        interfaceinvoke r4.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

        virtualinvoke r2.<com.android.internal.util.JournaledFile: void commit()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendChangedNotification(int)>(i0);

     label13:
        goto label19;

     label14:
        $r58 := @caughtexception;

     label15:
        if r3 == null goto label16;

        virtualinvoke r3.<java.io.FileOutputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r57 := @caughtexception;

     label18:
        virtualinvoke r2.<com.android.internal.util.JournaledFile: void rollback()>();

     label19:
        return;

        catch java.io.IOException from label01 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
    }

    private void sendChangedNotification(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.content.Intent r1, $r3;
        long l1;
        java.lang.Throwable r2, $r7;
        android.os.UserHandle $r5;
        android.content.Context $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED");

        r1 = $r3;

        virtualinvoke r1.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = new android.os.UserHandle;

        specialinvoke $r5.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke $r6.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r5);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label5;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void loadSettingsLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i29;
        com.android.internal.util.JournaledFile r2;
        java.io.FileInputStream r3, $r12;
        java.io.File r4;
        org.xmlpull.v1.XmlPullParser r5;
        java.lang.String r6, r7, r8, r9, $r13, $r23, $r25, $r28, $r30, $r31, $r32, $r33, $r35, $r37, $r38, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r53, $r56, $r65, $r69, $r74, $r84, $r90, $r104, $r105, r106;
        android.app.admin.DeviceAdminInfo r10, $r51;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r11, $r52;
        boolean $z0, $z2, $z3, $z4, $z5, $z6, $z8;
        java.util.List $r14, $r36;
        java.util.HashMap $r15, $r17, $r58;
        java.util.ArrayList $r16, $r19;
        com.android.internal.widget.LockPatternUtils $r18, r115;
        java.util.Collection $r20;
        java.lang.StringBuilder $r21, $r24, $r26, $r27, $r29, $r34, $r39, $r40, $r61, $r64, $r66, $r67, $r70, $r71, $r72, $r73, $r75, $r76, $r77, $r78, $r79, $r81, $r82, $r83, $r85, $r87, $r88, $r89, $r91, $r93, $r94, $r95, $r96, $r97, $r99, $r100, $r101, $r102, $r103;
        android.content.Context $r22;
        android.content.ComponentName $r50, $r54, $r59;
        org.xmlpull.v1.XmlPullParserException $r55, $r60, r110;
        java.io.FileNotFoundException $r62;
        java.io.IOException $r63, $r68, r112;
        java.lang.RuntimeException $r80, r107;
        java.lang.IndexOutOfBoundsException $r86, r113;
        java.lang.NumberFormatException $r92, r109;
        java.lang.NullPointerException $r98, r108;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        i0 := @parameter1: int;

        r2 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile(int)>(i0);

        r3 = null;

        r4 = virtualinvoke r2.<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>();

     label01:
        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r4);

        r3 = $r12;

        r5 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r3, null);

     label02:
        $i3 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>();

        i1 = $i3;

        if $i3 == 1 goto label03;

        if i1 == 2 goto label03;

        goto label02;

     label03:
        r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r13 = "policies";

        $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 != 0 goto label04;

        $r55 = new org.xmlpull.v1.XmlPullParserException;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Settings do not start with policies tag: found ");

        $r64 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r65);

        throw $r55;

     label04:
        r7 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "permission-provider");

        if r7 == null goto label05;

        $r54 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r7);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider> = $r54;

     label05:
        r8 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "setup-complete");

        if r8 == null goto label06;

        $r56 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        $z8 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z8 == 0 goto label06;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete> = 1;

     label06:
        interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>();

        i2 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $r14 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        interfaceinvoke $r14.<java.util.List: void clear()>();

        $r16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r16.<java.util.ArrayList: void clear()>();

        $r15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        virtualinvoke $r15.<java.util.HashMap: void clear()>();

     label07:
        $i4 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>();

        i29 = $i4;

        if $i4 == 1 goto label19;

        if i29 != 3 goto label08;

        $i21 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i21 <= i2 goto label19;

     label08:
        if i29 == 3 goto label07;

        if i29 != 4 goto label09;

        goto label07;

     label09:
        r106 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r31 = "admin";

        $z3 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r106);

        if $z3 == 0 goto label14;

        r9 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

     label10:
        $r50 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r9);

        r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>($r50, i0);

        if r10 == null goto label11;

        $r52 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        specialinvoke $r52.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo)>(r10);

        r11 = $r52;

        virtualinvoke r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void readFromXml(org.xmlpull.v1.XmlPullParser)>(r5);

        $r58 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r51 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r59 = virtualinvoke $r51.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke $r58.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, r11);

     label11:
        goto label13;

     label12:
        $r80 := @caughtexception;

        r107 = $r80;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed loading admin ");

        $r82 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r84 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r84, r107);

     label13:
        goto label07;

     label14:
        $r30 = "failed-password-attempts";

        $z2 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r106);

        if $z2 == 0 goto label15;

        $r53 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i20 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r53);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i20;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

        goto label07;

     label15:
        $r33 = "password-owner";

        $z5 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>(r106);

        if $z5 == 0 goto label16;

        $r47 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r47);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = $i19;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

        goto label07;

     label16:
        $r32 = "active-password";

        $z4 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>(r106);

        if $z4 == 0 goto label17;

        $r38 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "quality");

        $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r38);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = $i13;

        $r44 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "length");

        $i14 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r44);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = $i14;

        $r45 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "uppercase");

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r45);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = $i11;

        $r42 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "lowercase");

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r42);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = $i12;

        $r43 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "letters");

        $i17 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r43);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = $i17;

        $r48 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "numeric");

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r48);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = $i18;

        $r49 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "symbols");

        $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r49);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = $i15;

        $r46 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "nonletter");

        $i16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r46);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = $i16;

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

        goto label07;

     label17:
        $r35 = "lock-task-component";

        $z6 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r106);

        if $z6 == 0 goto label18;

        $r36 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r37 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>($r37);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

        goto label07;

     label18:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown tag: ");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r106);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r41);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r5);

        goto label07;

     label19:
        goto label26;

     label20:
        $r98 := @caughtexception;

        r108 = $r98;

        $r99 = new java.lang.StringBuilder;

        specialinvoke $r99.<java.lang.StringBuilder: void <init>()>();

        $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r108);

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r104);

        goto label26;

     label21:
        $r92 := @caughtexception;

        r109 = $r92;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r109);

        $r105 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r105);

        goto label26;

     label22:
        $r60 := @caughtexception;

        r110 = $r60;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r73 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r72 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r70 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r110);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r69);

        goto label26;

     label23:
        $r62 := @caughtexception;

        goto label26;

     label24:
        $r68 := @caughtexception;

        r112 = $r68;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r78 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r77 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r76 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r75 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r112);

        $r74 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r74);

        goto label26;

     label25:
        $r86 := @caughtexception;

        r113 = $r86;

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed parsing ");

        $r89 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r88 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r91 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r113);

        $r90 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r90);

     label26:
        if r3 == null goto label27;

        virtualinvoke r3.<java.io.FileInputStream: void close()>();

     label27:
        goto label29;

     label28:
        $r63 := @caughtexception;

     label29:
        $r19 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r20 = virtualinvoke $r17.<java.util.HashMap: java.util.Collection values()>();

        virtualinvoke $r19.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r20);

        $r18 = new com.android.internal.widget.LockPatternUtils;

        $r22 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r18.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r22);

        r115 = $r18;

        $i6 = virtualinvoke r115.<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>();

        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i6 >= $i5 goto label30;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active password quality 0x");

        $i7 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not match actual quality 0x");

        $i8 = virtualinvoke r115.<com.android.internal.widget.LockPatternUtils: int getActivePasswordQuality()>();

        $r25 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r28);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = 0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = 0;

     label30:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;

        catch java.lang.RuntimeException from label10 to label11 with label12;
        catch java.lang.NullPointerException from label01 to label19 with label20;
        catch java.lang.NumberFormatException from label01 to label19 with label21;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label19 with label22;
        catch java.io.FileNotFoundException from label01 to label19 with label23;
        catch java.io.IOException from label01 to label19 with label24;
        catch java.lang.IndexOutOfBoundsException from label01 to label19 with label25;
        catch java.io.IOException from label26 to label27 with label28;
    }

    static void validateQualityConstant(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 32768: goto label1;
            case 65536: goto label1;
            case 131072: goto label1;
            case 196608: goto label1;
            case 262144: goto label1;
            case 327680: goto label1;
            case 393216: goto label1;
            default: goto label2;
        };

     label1:
        return;

     label2:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid quality constant: 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    void validatePasswordOwnerLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean z0;
        int i0, $i1, $i2, $i3, $i5, $i6;
        java.util.ArrayList $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r9;
        java.lang.Object $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $i1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i1 < 0 goto label4;

        z0 = 0;

        $r2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i0 = $i2 - 1;

     label1:
        if i0 < 0 goto label3;

        $r8 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r9 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r10;

        $i6 = virtualinvoke $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i5 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i6 != $i5 goto label2;

        z0 = 1;

        goto label3;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        if z0 != 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previous password owner ");

        $i3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" no longer active; disabling");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r7);

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

     label4:
        return;
    }

    void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean z0, z1;
        long l0;
        java.lang.String r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("sys.secpolicy.camera.disabled", 0);

        $i1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)>(null, $i1);

        if z1 == z0 goto label7;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        if z1 == 0 goto label2;

        $r4 = "1";

        goto label3;

     label2:
        $r4 = "0";

     label3:
        r2 = $r4;

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("sys.secpolicy.camera.disabled", r2);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void systemReady()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1;
        int i0, i1, i2;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver $r3;
        android.os.Handler $r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        android.os.UserManager $r7;
        java.lang.Object $r8;
        android.content.pm.UserInfo $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void loadDeviceOwner()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void cleanUpOldUsers()>();

        $r3 = new com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        specialinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.Handler)>(r0, $r4);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r3.<com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void register(android.content.ContentResolver)>($r6);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateUserSetupComplete()>();

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r7.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (android.content.pm.UserInfo) $r8;

        i2 = $r9.<android.content.pm.UserInfo: int id>;

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>(null, i2);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateScreenCaptureDisabledInWindowManager(int,boolean)>(i2, $z1);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void cleanUpOldUsers()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        java.util.Set r1, $r8;
        java.util.HashSet r2, r21, r25, r26, r27;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Throwable r4, $r18;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DeviceOwner $r7, $r19;
        android.util.SparseArray $r10, $r16;
        android.os.UserManager $r11;
        boolean $z2, $z3;
        java.lang.Object $r13, $r14;
        java.lang.Integer $r15, $r17, r24;
        java.util.List r20;
        java.util.Iterator r22, r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r3 = r0;

        entermonitor r0;

     label01:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r7 == null goto label02;

        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r8 = virtualinvoke $r19.<com.android.server.devicepolicy.DeviceOwner: java.util.Set getProfileOwnerKeys()>();

        goto label03;

     label02:
        r25 = new java.util.HashSet;

        $r8 = r25;

        specialinvoke r25.<java.util.HashSet: void <init>()>();

     label03:
        r1 = $r8;

        r26 = new java.util.HashSet;

        specialinvoke r26.<java.util.HashSet: void <init>()>();

        r2 = r26;

        i0 = 0;

     label04:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i1 = virtualinvoke $r10.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label05;

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i4 = virtualinvoke $r16.<android.util.SparseArray: int keyAt(int)>(i0);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17);

        i0 = i0 + 1;

        goto label04;

     label05:
        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r18 := @caughtexception;

        r4 = $r18;

        exitmonitor r3;

     label08:
        throw r4;

     label09:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r20 = virtualinvoke $r11.<android.os.UserManager: java.util.List getUsers()>();

        r27 = new java.util.HashSet;

        specialinvoke r27.<java.util.HashSet: void <init>()>();

        r21 = r27;

        interfaceinvoke r21.<java.util.Set: boolean addAll(java.util.Collection)>(r1);

        interfaceinvoke r21.<java.util.Set: boolean addAll(java.util.Collection)>(r2);

        r22 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label11;

        $r14 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r14;

        $i3 = r5.<android.content.pm.UserInfo: int id>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke r21.<java.util.Set: boolean remove(java.lang.Object)>($r15);

        goto label10;

     label11:
        r23 = interfaceinvoke r21.<java.util.Set: java.util.Iterator iterator()>();

     label12:
        $z3 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label13;

        $r13 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r24 = (java.lang.Integer) $r13;

        $i2 = virtualinvoke r24.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeUserData(int)>($i2);

        goto label12;

     label13:
        return;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    private void handlePasswordExpirationNotification(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i2, i3, i4;
        long l1, $l6, $l7, $l8, $l10;
        java.util.List r2;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r5, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;
        java.lang.Throwable r7, $r18;
        android.os.UserManager $r9;
        boolean $z0, $z1;
        android.content.Context $r11;
        java.lang.Object $r12, $r17;
        android.os.UserHandle $r13;
        java.util.ArrayList $r14, $r15;
        android.app.admin.DeviceAdminInfo $r16;
        byte $b5, $b9, $b11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label01:
        l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r9.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r12;

        $r13 = virtualinvoke r4.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r13.<android.os.UserHandle: int getIdentifier()>();

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $r14 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        if i3 <= 0 goto label05;

        i4 = 0;

     label03:
        if i4 >= i3 goto label05;

        $r15 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r17 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r17;

        $r16 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z1 = virtualinvoke $r16.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z1 == 0 goto label04;

        $l7 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b5 = $l7 cmp 0L;

        if $b5 <= 0 goto label04;

        $l6 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $l10 = $l6 - 432000000L;

        $b11 = l1 cmp $l10;

        if $b11 < 0 goto label04;

        $l8 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b9 = $l8 cmp 0L;

        if $b9 <= 0 goto label04;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r6, "android.app.action.ACTION_PASSWORD_EXPIRING");

     label04:
        i4 = i4 + 1;

        goto label03;

     label05:
        goto label02;

     label06:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r11, $r10);

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r1;

     label09:
        throw r7;

     label10:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void setActiveAdmin(android.content.ComponentName, boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        boolean z0, $z1;
        int i0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int,android.os.Bundle)>(r1, z0, i0, null);

        return;
    }

    private void setActiveAdmin(android.content.ComponentName, boolean, int, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        android.content.ComponentName r1, $r25;
        boolean z0, $z2;
        int i0, i2, i3, i4;
        android.os.Bundle r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.app.admin.DeviceAdminInfo r4, $r20;
        long l1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6, r7, $r13, $r23;
        java.lang.Throwable r8, r10, $r30, $r32;
        android.content.Context $r9;
        java.util.HashMap $r12;
        java.util.ArrayList $r14, $r16, $r18, $r22;
        java.lang.Object $r19;
        java.lang.String $r21, $r31;
        java.lang.IllegalArgumentException $r24, $r28;
        java.lang.StringBuilder $r26, $r27, $r29;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: android.os.Bundle;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.admin.DeviceAdminInfo findAdmin(android.content.ComponentName,int)>(r1, i0);

        if r4 != null goto label01;

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad admin: ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r28;

     label01:
        r5 = r0;

        entermonitor r0;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        if z0 != 0 goto label04;

        $r23 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if $r23 == null goto label04;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Admin is already added");

        throw $r24;

     label04:
        $r13 = new com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin;

        specialinvoke $r13.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo)>(r4);

        r6 = $r13;

        $r12 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6);

        i2 = -1;

        $r14 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        i4 = 0;

     label05:
        if i4 >= i3 goto label07;

        $r22 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r19 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r19;

        $r20 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r25 = virtualinvoke $r20.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $z2 = virtualinvoke $r25.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label06;

        i2 = i4;

        goto label07;

     label06:
        i4 = i4 + 1;

        goto label05;

     label07:
        if i2 != -1 goto label08;

        $r18 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        $r21 = virtualinvoke r4.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enableIfNecessary(java.lang.String,int)>($r21, i0);

        goto label09;

     label08:
        $r16 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        virtualinvoke $r16.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>(i2, r6);

     label09:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r6, "android.app.action.DEVICE_ADMIN_ENABLED", r2, null);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label13;

     label11:
        $r32 := @caughtexception;

        r8 = $r32;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r8;

     label13:
        exitmonitor r5;

     label14:
        goto label17;

     label15:
        $r30 := @caughtexception;

        r10 = $r30;

        exitmonitor r5;

     label16:
        throw r10;

     label17:
        return;

        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label02 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public boolean isAdminActive(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        java.lang.Throwable r3, $r6;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        $r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if $r5 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        exitmonitor r2;

     label5:
        return $z1;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean hasGrantedPolicy(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r12;
        boolean $z0, $z1;
        android.app.admin.DeviceAdminInfo $r6;
        java.lang.SecurityException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i1);

        if r3 != null goto label3;

        $r7 = new java.lang.SecurityException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No active admin ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z1 = virtualinvoke $r6.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(i0);

        exitmonitor r2;

     label4:
        return $z1;

     label5:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getActiveAdmins(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.ArrayList r3, $r6, $r7, $r8;
        java.lang.Throwable r4, $r13;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r9;
        java.lang.Object $r10;
        android.content.ComponentName $r11;
        android.app.admin.DeviceAdminInfo $r12;
        java.util.List $r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        $r14 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r14;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0;

        entermonitor r0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 > 0 goto label4;

        exitmonitor r1;

     label3:
        return null;

     label4:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>(i1);

        r3 = $r7;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r8 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r10 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r10;

        $r12 = $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r11 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        i2 = i2 + 1;

        goto label5;

     label6:
        exitmonitor r1;

     label7:
        return r3;

     label8:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label9:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label8;
        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean packageHasActiveAdmins(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        java.lang.String r1, $r11;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        java.lang.Throwable r4, $r12;
        boolean $z0, $z1;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;
        android.app.admin.DeviceAdminInfo $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i2 = 0;

     label3:
        if i2 >= i1 goto label6;

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r10 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        $r9 = $r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r11 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        exitmonitor r2;

     label4:
        return 1;

     label5:
        i2 = i2 + 1;

        goto label3;

     label6:
        exitmonitor r2;

     label7:
        return 0;

     label8:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label9:
        throw r4;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void removeActiveAdmin(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, $i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        long l1;
        java.lang.Throwable r4, r5, $r9, $r10;
        boolean $z0, $z1;
        java.lang.String $r7;
        android.content.Context $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 != null goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        $i2 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int getUid()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 == $i3 goto label07;

        $r7 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>($r7);

        if $z1 == 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_DEVICE_ADMINS", null);

     label07:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdminLocked(android.content.ComponentName,int)>(r1, i0);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label12;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label15:
        throw r5;

     label16:
        return;

        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void setPasswordQuality(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void validateQualityConstant(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordQuality> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordQuality(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordQuality>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumLength(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumLength(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLength>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordHistoryLength(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordHistoryLength(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int passwordHistoryLength>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordExpirationTimeout(android.content.ComponentName, long, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        long l0, l2, $l7, $l8;
        int i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r17;
        boolean $z0;
        byte $b3, $b4, $b5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;
        android.content.Context $r7;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.util.Date $r10;
        java.text.DateFormat $r11;
        java.lang.String $r13, $r14;
        java.lang.NullPointerException $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 != null goto label03;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label03:
        $b3 = l0 cmp 0L;

        if $b3 >= 0 goto label04;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Timeout must be >= 0 ms");

        throw $r16;

     label04:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 6);

        $b4 = l0 cmp 0L;

        if $b4 <= 0 goto label05;

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l7 = l0 + $l8;

        goto label06;

     label05:
        $l7 = 0L;

     label06:
        l2 = $l7;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l2;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout> = l0;

        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label07;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPasswordExpiration(): password will expire on ");

        $r11 = staticinvoke <java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int)>(2, 2);

        $r10 = new java.util.Date;

        specialinvoke $r10.<java.util.Date: void <init>(long)>(l2);

        $r13 = virtualinvoke $r11.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r10);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r14);

     label07:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r7, $r6);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r17 := @caughtexception;

        r4 = $r17;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public long getPasswordExpirationTimeout(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i2, i3, $i4;
        long l1, $l7, $l8, $l10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        java.lang.Object $r11, $r15;
        android.os.UserHandle $r12;
        java.util.ArrayList $r13, $r14;
        byte $b5, $b6, $b9;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0L;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        l1 = 0L;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $l10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        goto label04;

     label03:
        $l10 = l1;

     label04:
        exitmonitor r2;

     label05:
        return $l10;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r11;

        $r12 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r12.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label11;

        $r14 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r15;

        $b5 = l1 cmp 0L;

        if $b5 == 0 goto label09;

        $l7 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b6 = $l7 cmp 0L;

        if $b6 == 0 goto label10;

        $l8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b9 = l1 cmp $l8;

        if $b9 <= 0 goto label10;

     label09:
        l1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        goto label07;

     label12:
        exitmonitor r2;

     label13:
        return l1;

     label14:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label15:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label14;
        catch java.lang.Throwable from label06 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        java.util.ArrayList r3, $r11, $r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.util.List r6, $r9;
        java.lang.Throwable r7, $r12;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = null;

        r4 = r0;

        entermonitor r0;

     label1:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r9 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r9 != null goto label2;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders> = $r13;

     label2:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        $z0 = interfaceinvoke r6.<java.util.List: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label3;

        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>(r6);

        r3 = $r11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label3:
        exitmonitor r4;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r7 = $r12;

        exitmonitor r4;

     label6:
        throw r7;

     label7:
        if r3 == null goto label8;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void access$700(com.android.server.devicepolicy.DevicePolicyManagerService$LocalService,int,java.util.List)>($r10, i0, r3);

        return 1;

     label8:
        return 0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        java.util.ArrayList r3, $r11;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.util.List r6, $r9;
        java.lang.Throwable r7, $r12;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$LocalService $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = null;

        r4 = r0;

        entermonitor r0;

     label1:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r9 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r9 != null goto label3;

        exitmonitor r4;

     label2:
        return 0;

     label3:
        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        $z0 = interfaceinvoke r6.<java.util.List: boolean remove(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(java.util.Collection)>(r6);

        r3 = $r11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label4:
        exitmonitor r4;

     label5:
        goto label8;

     label6:
        $r12 := @caughtexception;

        r7 = $r12;

        exitmonitor r4;

     label7:
        throw r7;

     label8:
        if r3 == null goto label9;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$LocalService mLocalService>;

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService$LocalService: void access$700(com.android.server.devicepolicy.DevicePolicyManagerService$LocalService,int,java.util.List)>($r10, i0, r3);

        return 1;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r11;
        java.util.List $r6, $r7, $r8, $r10;
        boolean $z0;
        int $i0, $i1;
        java.util.ArrayList $r9;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 = r0;

        entermonitor r0;

     label1:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        if $r6 == null goto label2;

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        $z0 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label4;

     label2:
        exitmonitor r2;

     label3:
        return null;

     label4:
        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != $i1 goto label6;

        $r9 = new java.util.ArrayList;

        $r10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

        exitmonitor r2;

     label5:
        return $r9;

     label6:
        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List crossProfileWidgetProviders>;

        exitmonitor r2;

     label7:
        return $r8;

     label8:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label9:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private long getPasswordExpirationLocked(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        int i0, i2, i3, $i4;
        long l1, $l5, $l7, $l10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2, r6;
        java.util.Iterator r3;
        android.content.pm.UserInfo r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r5;
        android.os.UserManager $r7;
        boolean $z0;
        android.os.UserHandle $r8;
        java.lang.Object $r9, $r11;
        java.util.ArrayList $r10, $r12;
        byte $b6, $b8, $b9;
        java.util.List r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        l1 = 0L;

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r2 == null goto label1;

        $l10 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        goto label2;

     label1:
        $l10 = l1;

     label2:
        return $l10;

     label3:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r13 = virtualinvoke $r7.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r3 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.content.pm.UserInfo) $r9;

        $r8 = virtualinvoke r4.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r8.<android.os.UserHandle: int getIdentifier()>();

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r10 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        i3 = 0;

     label5:
        if i3 >= i2 goto label8;

        $r12 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r11 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r11;

        $b6 = l1 cmp 0L;

        if $b6 == 0 goto label6;

        $l5 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b8 = $l5 cmp 0L;

        if $b8 == 0 goto label7;

        $l7 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

        $b9 = l1 cmp $l7;

        if $b9 <= 0 goto label7;

     label6:
        l1 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate>;

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        goto label4;

     label9:
        return l1;
    }

    public long getPasswordExpiration(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        java.lang.Throwable r3, $r5;
        boolean $z0;
        long $l1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0L;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        $l1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName,int)>(r1, i0);

        exitmonitor r2;

     label3:
        return $l1;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label5:
        throw r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setPasswordMinimumUpperCase(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumUpperCase(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordUpperCase>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumLowerCase(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label2:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

        if $i2 == i0 goto label3;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getPasswordMinimumLowerCase(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLowerCase>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumLetters(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumLetters(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordLetters>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumNumeric(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumNumeric(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNumeric>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumSymbols(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumSymbols(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordSymbols>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void setPasswordMinimumNonLetter(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getPasswordMinimumNonLetter(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        android.os.UserHandle $r11;
        java.lang.Object $r12, $r14;
        java.util.ArrayList $r13, $r15;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        i1 = 0;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

        goto label04;

     label03:
        $i6 = i1;

     label04:
        exitmonitor r2;

     label05:
        return $i6;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r12;

        $r11 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r11.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label10;

        $r15 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $i5 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

        if i1 >= $i5 goto label09;

        i1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int minimumPasswordNonLetter>;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        goto label07;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label14:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public boolean isActivePasswordSufficient(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.content.pm.UserInfo r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        java.lang.Throwable r4, $r7;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 1;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0;

        entermonitor r0;

     label02:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r2 != null goto label03;

        $i19 = i0;

        goto label04;

     label03:
        $i19 = r2.<android.content.pm.UserInfo: int id>;

     label04:
        i1 = $i19;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 0);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        $i3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>(null, i0);

        if $i2 < $i3 goto label05;

        $i4 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        $i6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, i0);

        if $i4 >= $i6 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return 0;

     label07:
        $i5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i5 == 393216 goto label09;

        exitmonitor r1;

     label08:
        return 1;

     label09:
        $i8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        $i7 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, i0);

        if $i8 < $i7 goto label10;

        $i9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        $i11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, i0);

        if $i9 < $i11 goto label10;

        $i10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        $i13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, i0);

        if $i10 < $i13 goto label10;

        $i12 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        $i15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, i0);

        if $i12 < $i15 goto label10;

        $i14 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        $i17 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, i0);

        if $i14 < $i17 goto label10;

        $i16 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        $i18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, i0);

        if $i16 < $i18 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        exitmonitor r1;

     label12:
        return $z1;

     label13:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r1;

     label14:
        throw r4;

        catch java.lang.Throwable from label02 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int getCurrentFailedPasswordAttempts(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, $i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r3, $r7;
        android.content.pm.UserInfo $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 1);

        $r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.UserInfo getProfileParent(int)>(i0);

        $i1 = $r6.<android.content.pm.UserInfo: int id>;

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i1);

        $i2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        exitmonitor r1;

     label2:
        return $i2;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setMaximumFailedPasswordsForWipe(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label3:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 4);

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 1);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, $r6;
        java.lang.Throwable r4, $r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 == null goto label3;

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        goto label4;

     label3:
        $r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int)>(i0);

     label4:
        r3 = $r6;

        if r3 == null goto label5;

        $i1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        goto label6;

     label5:
        $i1 = 0;

     label6:
        exitmonitor r2;

     label7:
        return $i1;

     label8:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label9:
        throw r4;

        catch java.lang.Throwable from label2 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r1, r6;
        java.util.Iterator r2, r5;
        android.content.pm.UserInfo r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        android.os.UserManager $r7;
        java.util.List $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r9, $r12;
        android.os.UserHandle $r10;
        java.util.ArrayList $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 = 0;

        r1 = null;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r8 = virtualinvoke $r7.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r9;

        $r10 = virtualinvoke r3.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i2 = virtualinvoke $r10.<android.os.UserHandle: int getIdentifier()>();

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i2);

        $r11 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r5 = virtualinvoke $r11.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r12;

        $i3 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if $i3 != 0 goto label3;

        goto label2;

     label3:
        if i1 == 0 goto label4;

        $i4 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i1 > $i4 goto label4;

        $z2 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z2 == 0 goto label5;

        $i5 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        if i1 < $i5 goto label5;

     label4:
        i1 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        r1 = r6;

     label5:
        goto label2;

     label6:
        goto label1;

     label7:
        return r1;
    }

    public boolean resetPassword(java.lang.String, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2, r66;
        java.lang.String r1, $r17, $r25, $r30, $r34, $r36, $r43, $r54, $r55, $r57, $r60;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i12, i13, i14, i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i30, i33, i34, i35, i36, i38;
        char c11;
        java.lang.Throwable r3, r4, r5, $r61, $r62, $r63;
        boolean $z0, $z1, z2;
        android.content.Context $r8;
        com.android.internal.widget.LockPatternUtils $r9, r65;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r35, $r37, $r38, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r56, $r58, $r59;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r64;
        long l37;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i1, "reset the password");

        r2 = r0;

        entermonitor r0;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 2);

        i2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>(null, i1);

        if i2 == 0 goto label05;

        i3 = staticinvoke <com.android.internal.widget.LockPatternUtils: int computePasswordQuality(java.lang.String)>(r1);

        if i3 >= i2 goto label04;

        if i2 == 393216 goto label04;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: password quality 0x");

        $r60 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r59 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r58 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required quality 0x");

        $r57 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        $r56 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r55);

        exitmonitor r2;

     label03:
        return 0;

     label04:
        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i3, i2);

     label05:
        i33 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, i1);

        $i16 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i16 >= i33 goto label07;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: password length ");

        $i30 = virtualinvoke r1.<java.lang.String: int length()>();

        $r49 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r47 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required length ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i33);

        $r54 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r54);

        exitmonitor r2;

     label06:
        return 0;

     label07:
        if i2 != 393216 goto label25;

        i4 = 0;

        i5 = 0;

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label08:
        $i22 = virtualinvoke r1.<java.lang.String: int length()>();

        if i10 >= $i22 goto label13;

        c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10);

        if c11 < 65 goto label09;

        if c11 > 90 goto label09;

        i4 = i4 + 1;

        i5 = i5 + 1;

        goto label12;

     label09:
        if c11 < 97 goto label10;

        if c11 > 122 goto label10;

        i4 = i4 + 1;

        i6 = i6 + 1;

        goto label12;

     label10:
        if c11 < 48 goto label11;

        if c11 > 57 goto label11;

        i7 = i7 + 1;

        i9 = i9 + 1;

        goto label12;

     label11:
        i8 = i8 + 1;

        i9 = i9 + 1;

     label12:
        i10 = i10 + 1;

        goto label08;

     label13:
        i34 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, i1);

        if i4 >= i34 goto label15;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of letters ");

        $r44 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of letters ");

        $r42 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i34);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r43);

        exitmonitor r2;

     label14:
        return 0;

     label15:
        i35 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, i1);

        if i7 >= i35 goto label17;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of numerical digits ");

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of numerical digits ");

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35);

        $r36 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r36);

        exitmonitor r2;

     label16:
        return 0;

     label17:
        i12 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, i1);

        if i6 >= i12 goto label19;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of lowercase letters ");

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of lowercase letters ");

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r34);

        exitmonitor r2;

     label18:
        return 0;

     label19:
        i14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, i1);

        if i5 >= i14 goto label21;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of uppercase letters ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of uppercase letters ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r30);

        exitmonitor r2;

     label20:
        return 0;

     label21:
        i13 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, i1);

        if i8 >= i13 goto label23;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of special symbols ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of special symbols ");

        $r24 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r25);

        exitmonitor r2;

     label22:
        return 0;

     label23:
        i15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, i1);

        if i9 >= i15 goto label25;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("resetPassword: number of non-letter characters ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not meet required number of non-letter characters ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i15);

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r17);

        exitmonitor r2;

     label24:
        return 0;

     label25:
        exitmonitor r2;

     label26:
        goto label29;

     label27:
        $r61 := @caughtexception;

        r3 = $r61;

        exitmonitor r2;

     label28:
        throw r3;

     label29:
        i36 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r64 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $i17 = r64.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i17 < 0 goto label30;

        $i23 = r64.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i23 == i36 goto label30;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "resetPassword: already set by another uid and not entered by user");

        return 0;

     label30:
        l37 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label31:
        $r9 = new com.android.internal.widget.LockPatternUtils;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r9.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r8);

        r65 = $r9;

        virtualinvoke r65.<com.android.internal.widget.LockPatternUtils: void saveLockPassword(java.lang.String,int,boolean,int)>(r1, i2, 0, i1);

        $i18 = i0 & 1;

        if $i18 == 0 goto label32;

        $z1 = 1;

        goto label33;

     label32:
        $z1 = 0;

     label33:
        z2 = $z1;

        if z2 == 0 goto label34;

        virtualinvoke r65.<com.android.internal.widget.LockPatternUtils: void requireCredentialEntry(int)>(-1);

     label34:
        r66 = r0;

        entermonitor r0;

     label35:
        if z2 == 0 goto label36;

        $i19 = i36;

        goto label37;

     label36:
        $i19 = -1;

     label37:
        i38 = $i19;

        $i20 = r64.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i20 == i38 goto label38;

        r64.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = i38;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label38:
        exitmonitor r66;

     label39:
        goto label42;

     label40:
        $r62 := @caughtexception;

        r5 = $r62;

        exitmonitor r66;

     label41:
        throw r5;

     label42:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

        goto label45;

     label43:
        $r63 := @caughtexception;

        r4 = $r63;

     label44:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

        throw r4;

     label45:
        return 1;

        catch java.lang.Throwable from label02 to label03 with label27;
        catch java.lang.Throwable from label04 to label06 with label27;
        catch java.lang.Throwable from label07 to label14 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label17 to label18 with label27;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.lang.Throwable from label23 to label24 with label27;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Throwable from label35 to label39 with label40;
        catch java.lang.Throwable from label40 to label41 with label40;
        catch java.lang.Throwable from label31 to label42 with label43;
        catch java.lang.Throwable from label43 to label44 with label43;
    }

    public void setMaximumTimeToLock(android.content.ComponentName, long, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        long l0, $l2;
        int i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        byte $b3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 3);

        $l2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b3 = $l2 cmp l0;

        if $b3 == 0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock> = l0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateMaximumTimeToLockLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r6);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void updateMaximumTimeToLockLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        long l0, l1, $l3;
        android.os.RemoteException r2, $r8;
        java.lang.Throwable r3, $r7;
        int $i2, $i6;
        byte $b4, $b5;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        android.os.IPowerManager $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $i2 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        l0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)>(null, $i2);

        $l3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock>;

        $b4 = $l3 cmp l0;

        if $b4 != 0 goto label01;

        return;

     label01:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $b5 = l0 cmp 0L;

        if $b5 > 0 goto label03;

        l0 = 2147483647L;

        goto label04;

     label03:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r5, "stay_on_while_plugged_in", 0);

     label04:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: long mLastMaximumTimeToLock> = l0;

     label05:
        $r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.IPowerManager getIPowerManager()>();

        $i6 = (int) l0;

        interfaceinvoke $r6.<android.os.IPowerManager: void setMaximumScreenOffTimeoutFromDeviceAdmin(int)>($i6);

     label06:
        goto label08;

     label07:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failure talking with power manager", r2);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label09:
        $r7 := @caughtexception;

        r3 = $r7;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label11:
        return;

        catch android.os.RemoteException from label05 to label06 with label07;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public long getMaximumTimeToLock(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i2, i3, $i4;
        long l1, $l7, $l8, $l10;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r7;
        java.util.Iterator r4;
        android.content.pm.UserInfo r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        java.lang.Throwable r8, $r16;
        boolean $z0, $z1;
        android.os.UserManager $r10;
        java.lang.Object $r11, $r15;
        android.os.UserHandle $r12;
        java.util.ArrayList $r13, $r14;
        byte $b5, $b6, $b9;
        java.util.List r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0L;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        l1 = 0L;

        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $l10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        goto label04;

     label03:
        $l10 = l1;

     label04:
        exitmonitor r2;

     label05:
        return $l10;

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r17 = virtualinvoke $r10.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r4 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (android.content.pm.UserInfo) $r11;

        $r12 = virtualinvoke r5.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i4 = virtualinvoke $r12.<android.os.UserHandle: int getIdentifier()>();

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i4);

        $r13 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i3 = 0;

     label08:
        if i3 >= i2 goto label11;

        $r14 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r15;

        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label09;

        l1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        goto label10;

     label09:
        $l7 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b6 = $l7 cmp 0L;

        if $b6 == 0 goto label10;

        $l8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

        $b9 = l1 cmp $l8;

        if $b9 <= 0 goto label10;

        l1 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long maximumTimeToUnlock>;

     label10:
        i3 = i3 + 1;

        goto label08;

     label11:
        goto label07;

     label12:
        exitmonitor r2;

     label13:
        return l1;

     label14:
        $r16 := @caughtexception;

        r8 = $r16;

        exitmonitor r2;

     label15:
        throw r8;

        catch java.lang.Throwable from label02 to label05 with label14;
        catch java.lang.Throwable from label06 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void lockNow()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        java.lang.Throwable r2, $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 3);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void lockNowUnchecked()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void lockNowUnchecked()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        long l0, $l1;
        java.lang.Throwable r2, $r8;
        android.os.IPowerManager $r3;
        com.android.internal.widget.LockPatternUtils $r4;
        android.content.Context $r5;
        android.view.IWindowManager $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.IPowerManager getIPowerManager()>();

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke $r3.<android.os.IPowerManager: void goToSleep(long,int,int)>($l1, 1, 0);

        $r4 = new com.android.internal.widget.LockPatternUtils;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r4.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>($r5);

        virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: void requireCredentialEntry(int)>(-1);

        $r6 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.IWindowManager getWindowManager()>();

        interfaceinvoke $r6.<android.view.IWindowManager: void lockNow(android.os.Bundle)>(null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label7;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean isExtStorageEncrypted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("vold.decrypt");

        $r2 = "";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void enforceCanManageCaCerts(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        java.lang.Throwable r3, $r7;
        android.content.Context $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        if r1 != null goto label1;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_CA_CERTIFICATES", null);

        goto label6;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean installCaCert(android.content.ComponentName, byte[]) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        byte[] r2, r3;
        java.security.cert.X509Certificate r4;
        long l0;
        android.security.KeyChain$KeyChainConnection r5;
        boolean z0;
        java.lang.Throwable r6, r7, $r16, $r18;
        java.security.cert.Certificate[] $r8;
        android.os.UserHandle $r9, r21;
        int $i1;
        android.content.Context $r10;
        android.security.IKeyChainService $r11;
        java.security.cert.CertificateException $r12, r19;
        android.os.RemoteException $r13, r22;
        java.io.IOException $r14, r20;
        java.lang.InterruptedException $r15, r23;
        java.lang.Thread $r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName)>(r1);

     label01:
        r4 = staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: java.security.cert.X509Certificate parseCert(byte[])>(r2);

        $r8 = newarray (java.security.cert.Certificate)[1];

        $r8[0] = r4;

        r3 = staticinvoke <android.security.Credentials: byte[] convertToPem(java.security.cert.Certificate[])>($r8);

     label02:
        goto label05;

     label03:
        $r12 := @caughtexception;

        r19 = $r12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem converting cert", r19);

        return 0;

     label04:
        $r14 := @caughtexception;

        r20 = $r14;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Problem reading cert", r20);

        return 0;

     label05:
        $r9 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r9.<android.os.UserHandle: void <init>(int)>($i1);

        r21 = $r9;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r5 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r10, r21);

     label07:
        $r11 = virtualinvoke r5.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        interfaceinvoke $r11.<android.security.IKeyChainService: void installCaCertificate(byte[])>(r3);

        z0 = 1;

     label08:
        virtualinvoke r5.<android.security.KeyChain$KeyChainConnection: void close()>();

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label10:
        $r13 := @caughtexception;

        r22 = $r13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "installCaCertsToKeyChain(): ", r22);

     label11:
        virtualinvoke r5.<android.security.KeyChain$KeyChainConnection: void close()>();

        goto label14;

     label12:
        $r18 := @caughtexception;

        r6 = $r18;

     label13:
        virtualinvoke r5.<android.security.KeyChain$KeyChainConnection: void close()>();

        throw r6;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label19;

     label15:
        $r15 := @caughtexception;

        r23 = $r15;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "installCaCertsToKeyChain(): ", r23);

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r17.<java.lang.Thread: void interrupt()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label19;

     label17:
        $r16 := @caughtexception;

        r7 = $r16;

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r7;

     label19:
        return 0;

        catch java.security.cert.CertificateException from label01 to label02 with label03;
        catch java.io.IOException from label01 to label02 with label04;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.InterruptedException from label06 to label09 with label15;
        catch java.lang.InterruptedException from label10 to label14 with label15;
        catch java.lang.Throwable from label06 to label09 with label17;
        catch java.lang.Throwable from label10 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private static java.security.cert.X509Certificate parseCert(byte[]) throws java.security.cert.CertificateException
    {
        byte[] r0;
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r2;
        java.security.cert.Certificate $r3;
        java.security.cert.X509Certificate $r4;

        r0 := @parameter0: byte[];

        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r3 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2);

        $r4 = (java.security.cert.X509Certificate) $r3;

        return $r4;
    }

    public void uninstallCaCert(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.UserHandle r3, $r8;
        long l0;
        android.security.KeyChain$KeyChainConnection r4;
        android.os.RemoteException r5, $r15;
        java.lang.Throwable r6, r7, $r11, $r13;
        int $i1;
        android.content.Context $r9;
        android.security.IKeyChainService $r10;
        java.lang.InterruptedException $r12, r16;
        java.lang.Thread $r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName)>(r1);

        $r8 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>($i1);

        r3 = $r8;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r4 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r9, r3);

     label02:
        $r10 = virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        interfaceinvoke $r10.<android.security.IKeyChainService: boolean deleteCaCertificate(java.lang.String)>(r2);

     label03:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

        goto label08;

     label04:
        $r15 := @caughtexception;

        r5 = $r15;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "from CaCertUninstaller: ", r5);

     label05:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

        goto label08;

     label06:
        $r13 := @caughtexception;

        r6 = $r13;

     label07:
        virtualinvoke r4.<android.security.KeyChain$KeyChainConnection: void close()>();

        throw r6;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label13;

     label09:
        $r12 := @caughtexception;

        r16 = $r12;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "CaCertUninstaller: ", r16);

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label13;

     label11:
        $r11 := @caughtexception;

        r7 = $r11;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r7;

     label13:
        return;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.InterruptedException from label01 to label08 with label09;
        catch java.lang.Throwable from label01 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean installKeyPair(android.content.ComponentName, byte[], byte[], java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        android.content.ComponentName r1;
        byte[] r2, r3;
        java.lang.String r4;
        java.lang.Throwable r6, r9, r10, $r16, $r17, $r21;
        android.security.KeyChain$KeyChainConnection r7;
        android.security.IKeyChainService r8;
        boolean z0;
        int $i0;
        android.os.UserHandle $r13, r22;
        android.content.Context $r14;
        java.lang.NullPointerException $r15;
        java.lang.InterruptedException $r18, r24;
        java.lang.Thread $r19;
        android.os.RemoteException $r20, r23;
        long l3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[];

        r4 := @parameter3: java.lang.String;

        if r1 != null goto label01;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label01:
        r5 = r0;

        entermonitor r0;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        exitmonitor r5;

     label03:
        goto label06;

     label04:
        $r16 := @caughtexception;

        r6 = $r16;

        exitmonitor r5;

     label05:
        throw r6;

     label06:
        $r13 = new android.os.UserHandle;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r13.<android.os.UserHandle: void <init>(int)>($i0);

        r22 = $r13;

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r7 = staticinvoke <android.security.KeyChain: android.security.KeyChain$KeyChainConnection bindAsUser(android.content.Context,android.os.UserHandle)>($r14, r22);

     label08:
        r8 = virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>();

        z0 = interfaceinvoke r8.<android.security.IKeyChainService: boolean installKeyPair(byte[],byte[],java.lang.String)>(r2, r3, r4);

     label09:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        return z0;

     label11:
        $r20 := @caughtexception;

        r23 = $r20;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Installing certificate", r23);

     label12:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

        goto label15;

     label13:
        $r17 := @caughtexception;

        r9 = $r17;

     label14:
        virtualinvoke r7.<android.security.KeyChain$KeyChainConnection: void close()>();

        throw r9;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label20;

     label16:
        $r18 := @caughtexception;

        r24 = $r18;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Interrupted while installing certificate", r24);

        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r19.<java.lang.Thread: void interrupt()>();

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label20;

     label18:
        $r21 := @caughtexception;

        r10 = $r21;

     label19:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r10;

     label20:
        return 0;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch android.os.RemoteException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.InterruptedException from label07 to label10 with label16;
        catch java.lang.InterruptedException from label11 to label15 with label16;
        catch java.lang.Throwable from label07 to label10 with label18;
        catch java.lang.Throwable from label11 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    void wipeDataLocked(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.content.Intent r2, $r4;
        android.content.Context $r3, $r11;
        android.content.ComponentName $r7;
        android.os.PowerManager$WakeLock $r9;
        java.io.IOException $r12, r14;
        java.lang.SecurityException $r13, r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z2 = staticinvoke <android.os.Environment: boolean isExternalStorageRemovable()>();

        if $z2 != 0 goto label01;

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isExtStorageEncrypted()>();

        if $z4 == 0 goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z0 = $z6;

        $i1 = i0 & 1;

        if $i1 == 0 goto label03;

        $z5 = 1;

        goto label04;

     label03:
        $z5 = 0;

     label04:
        z1 = $z5;

        if z0 != 0 goto label05;

        if z1 == 0 goto label06;

     label05:
        $z3 = staticinvoke <android.os.Environment: boolean isExternalStorageEmulated()>();

        if $z3 != 0 goto label06;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("com.android.internal.os.storage.FORMAT_AND_FACTORY_RESET");

        r2 = $r4;

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("always_reset", 1);

        virtualinvoke r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.intent.extra.REASON", r1);

        $r7 = <com.android.internal.os.storage.ExternalStorageFormatter: android.content.ComponentName COMPONENT_NAME>;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r7);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r9.<android.os.PowerManager$WakeLock: void acquire(long)>(10000L);

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: android.content.ComponentName startService(android.content.Intent)>(r2);

        goto label10;

     label06:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        staticinvoke <android.os.RecoverySystem: void rebootWipeUserData(android.content.Context,java.lang.String)>($r3, r1);

     label07:
        goto label10;

     label08:
        $r12 := @caughtexception;

        r14 = $r12;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed requesting data wipe", r14);

        goto label10;

     label09:
        $r13 := @caughtexception;

        r15 = $r13;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed requesting data wipe", r15);

     label10:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.SecurityException from label06 to label07 with label09;
    }

    public void wipeData(int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.String r3, $r10;
        android.content.ComponentName r4;
        java.lang.Throwable r5, r6, $r15, $r16;
        boolean $z0;
        java.lang.StringBuilder $r8, $r9, $r11;
        android.app.admin.DeviceAdminInfo $r12, $r13, $r14;
        long l2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        r1 = r0;

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(null, 4);

        if r2 == null goto label05;

        $r12 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        if $r12 == null goto label05;

        $r13 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r4 = virtualinvoke $r13.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        if r4 == null goto label03;

        r3 = virtualinvoke r4.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        goto label04;

     label03:
        $r14 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        r3 = virtualinvoke $r14.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

     label04:
        goto label06;

     label05:
        r3 = "?";

     label06:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DevicePolicyManager.wipeData() from ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDeviceOrUserLocked(int,int,java.lang.String)>(i0, i1, $r10);

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        goto label11;

     label09:
        $r16 := @caughtexception;

        r5 = $r16;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r5;

     label11:
        exitmonitor r1;

     label12:
        goto label15;

     label13:
        $r15 := @caughtexception;

        r6 = $r15;

        exitmonitor r1;

     label14:
        throw r6;

     label15:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void wipeDeviceOrUserLocked(int, int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1;
        java.lang.String r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$3 $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if i1 != 0 goto label1;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDataLocked(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Handler mHandler>;

        $r2 = new com.android.server.devicepolicy.DevicePolicyManagerService$3;

        specialinvoke $r2.<com.android.server.devicepolicy.DevicePolicyManagerService$3: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,int)>(r0, i1);

        virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r2);

     label2:
        return;
    }

    public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1, $r12;
        android.os.RemoteCallback r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;
        java.lang.Throwable r6, $r18;
        boolean $z0;
        android.content.Context $r7, $r16;
        android.content.Intent $r9, r19;
        android.app.admin.DeviceAdminInfo $r11;
        android.os.UserHandle $r13;
        com.android.server.devicepolicy.DevicePolicyManagerService$4 $r15;
        android.os.RemoteException $r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.RemoteCallback;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r3 = r0;

        entermonitor r0;

     label02:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r4 != null goto label08;

     label03:
        virtualinvoke r2.<android.os.RemoteCallback: void sendResult(android.os.Bundle)>(null);

     label04:
        goto label06;

     label05:
        $r17 := @caughtexception;

     label06:
        exitmonitor r3;

     label07:
        return;

     label08:
        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED");

        r19 = $r9;

        virtualinvoke r19.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r11 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        virtualinvoke r19.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r12);

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r13 = new android.os.UserHandle;

        specialinvoke $r13.<android.os.UserHandle: void <init>(int)>(i0);

        $r15 = new com.android.server.devicepolicy.DevicePolicyManagerService$4;

        specialinvoke $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$4: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.RemoteCallback)>(r0, r2);

        virtualinvoke $r16.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>(r19, $r13, null, $r15, null, -1, null, null);

        exitmonitor r3;

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        r6 = $r18;

        exitmonitor r3;

     label11:
        throw r6;

     label12:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void setActivePasswordState(int, int, int, int, int, int, int, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        long l9;
        java.lang.Throwable r3, r4, $r8, $r9;
        android.content.Context $r5, $r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        i7 := @parameter7: int;

        i8 := @parameter8: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i8);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i8, "set the active password");

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i8);

        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void validateQualityConstant(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        $i10 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality>;

        if $i10 != i0 goto label03;

        $i12 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength>;

        if $i12 != i1 goto label03;

        $i11 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i11 != 0 goto label03;

        $i14 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters>;

        if $i14 != i2 goto label03;

        $i13 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase>;

        if $i13 != i3 goto label03;

        $i16 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase>;

        if $i16 != i4 goto label03;

        $i15 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric>;

        if $i15 != i5 goto label03;

        $i18 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols>;

        if $i18 != i6 goto label03;

        $i17 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter>;

        if $i17 == i7 goto label08;

     label03:
        l9 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordQuality> = i0;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLength> = i1;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLetters> = i2;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordLowerCase> = i4;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordUpperCase> = i3;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNumeric> = i5;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordSymbols> = i6;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mActivePasswordNonLetter> = i7;

        r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i8);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updatePasswordExpirationsLocked(int)>(i8);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setExpirationAlarmCheckLocked(android.content.Context,com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r7, r1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandToSelfAndProfilesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_CHANGED", 0, i8);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

        goto label08;

     label06:
        $r8 := @caughtexception;

        r3 = $r8;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l9);

        throw r3;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void updatePasswordExpirationsLocked(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2, i3;
        java.util.List r1;
        java.util.Iterator r2;
        android.content.pm.UserInfo r3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        long l4, l5, $l6, $l8;
        android.os.UserManager $r6;
        boolean $z0, $z1;
        android.os.UserHandle $r7;
        java.lang.Object $r8, $r10;
        java.util.ArrayList $r9, $r11;
        android.app.admin.DeviceAdminInfo $r12;
        byte $b7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r6.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.content.pm.UserInfo) $r8;

        $r7 = virtualinvoke r3.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i1 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        $r9 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i2 <= 0 goto label6;

        i3 = 0;

     label2:
        if i3 >= i2 goto label6;

        $r11 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r10 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r10;

        $r12 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z1 = virtualinvoke $r12.<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>(6);

        if $z1 == 0 goto label5;

        l4 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationTimeout>;

        $b7 = l4 cmp 0L;

        if $b7 <= 0 goto label3;

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l8 = l4 + $l6;

        goto label4;

     label3:
        $l8 = 0L;

     label4:
        l5 = $l8;

        r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: long passwordExpirationDate> = l5;

     label5:
        i3 = i3 + 1;

        goto label2;

     label6:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

        goto label1;

     label7:
        return;
    }

    public void reportFailedPasswordAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i2, i3, $i4, $i5, $i6, $i7;
        long l1;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, r5, $r9, $r10;
        android.content.Context $r6;
        android.os.UserHandle $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i0, "report failed password attempt");

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        z0 = 0;

        i2 = 0;

        r1 = r0;

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        $i4 = $i5 + 1;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = $i4;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 == 0 goto label06;

        r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getAdminWithMinimumFailedPasswordsForWipeLocked(int)>(i0);

        if r3 == null goto label03;

        $i7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int maximumFailedPasswordsForWipe>;

        goto label04;

     label03:
        $i7 = 0;

     label04:
        i3 = $i7;

        if i3 <= 0 goto label05;

        $i6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i6 < i3 goto label05;

        z0 = 1;

        $r8 = virtualinvoke r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r8.<android.os.UserHandle: int getIdentifier()>();

     label05:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandToSelfAndProfilesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_FAILED", 1, i0);

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r1;

     label09:
        throw r4;

     label10:
        if z0 == 0 goto label11;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeDeviceOrUserLocked(int,int,java.lang.String)>(0, i2, "reportFailedPasswordAttempt()");

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label14;

     label12:
        $r10 := @caughtexception;

        r5 = $r10;

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, $i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        long l1;
        java.lang.Throwable r3, r4, $r7, $r8;
        android.content.Context $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.BIND_DEVICE_ADMIN", null);

        r1 = r0;

        entermonitor r0;

     label01:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $i2 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts>;

        if $i2 != 0 goto label02;

        $i3 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        if $i3 < 0 goto label07;

     label02:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mFailedPasswordAttempts> = 0;

        r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner> = -1;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 == 0 goto label04;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandToSelfAndProfilesLocked(java.lang.String,int,int)>("android.app.action.ACTION_PASSWORD_SUCCEEDED", 1, i0);

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label07;

     label05:
        $r8 := @caughtexception;

        r3 = $r8;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r1;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.lang.String, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1, r9;
        java.lang.String r2, r3, $r19;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6, r10;
        java.util.Set r7;
        java.util.Iterator r8;
        java.lang.Throwable r11, r12, $r24, $r25;
        boolean $z0, $z1, $z2, $z3;
        java.util.HashMap $r14, $r20;
        java.lang.StringBuilder $r15, $r16, $r17, $r18;
        java.lang.Object $r21, $r22;
        java.lang.NullPointerException $r23;
        long l3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r4 = r0;

        entermonitor r0;

     label02:
        if r1 != null goto label03;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r23;

     label03:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 5);

        $r14 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        r7 = virtualinvoke $r14.<java.util.HashMap: java.util.Set keySet()>();

        r8 = interfaceinvoke r7.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r22 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.content.ComponentName) $r22;

        $r20 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.HashMap mAdminMap>;

        $r21 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r10 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r21;

        $z2 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z2 == 0 goto label06;

        $z3 = virtualinvoke r9.<android.content.ComponentName: boolean equals(java.lang.Object)>(r1);

        if $z3 != 0 goto label06;

        exitmonitor r4;

     label05:
        return r9;

     label06:
        goto label04;

     label07:
        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i1 == 0 goto label09;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only the owner is allowed to set the global proxy. User ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r19);

        exitmonitor r4;

     label08:
        return null;

     label09:
        if r2 != null goto label10;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 0;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = null;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = null;

        goto label11;

     label10:
        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy> = 1;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec> = r2;

        r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList> = r3;

     label11:
        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r5);

     label13:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        goto label16;

     label14:
        $r24 := @caughtexception;

        r11 = $r24;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

        throw r11;

     label16:
        exitmonitor r4;

     label17:
        return null;

     label18:
        $r25 := @caughtexception;

        r12 = $r25;

        exitmonitor r4;

     label19:
        throw r12;

        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label02 to label05 with label18;
        catch java.lang.Throwable from label06 to label08 with label18;
        catch java.lang.Throwable from label09 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public android.content.ComponentName getGlobalProxyAdmin(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r11;
        boolean $z0, $z1;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;
        android.app.admin.DeviceAdminInfo $r9;
        android.content.ComponentName $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0;

        entermonitor r0;

     label02:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        $z1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z1 == 0 goto label05;

        $r9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r10 = virtualinvoke $r9.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        exitmonitor r1;

     label04:
        return $r10;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label09:
        throw r4;

     label10:
        return null;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.net.ProxyInfo r2;
        java.lang.Throwable r4, r6, $r11, $r12;
        android.net.ConnectivityManager r5;
        android.content.Context $r9;
        java.lang.Object $r10;
        long l0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.net.ProxyInfo;

        r3 = r0;

        entermonitor r0;

     label01:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        exitmonitor r3;

     label02:
        goto label05;

     label03:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r3;

     label04:
        throw r4;

     label05:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        r5 = (android.net.ConnectivityManager) $r10;

        virtualinvoke r5.<android.net.ConnectivityManager: void setGlobalProxy(android.net.ProxyInfo)>(r2);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label10;

     label08:
        $r12 := @caughtexception;

        r6 = $r12;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.util.ArrayList $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;
        java.lang.String $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        $r3 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r5;

        $z0 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean specifiesGlobalProxy>;

        if $z0 == 0 goto label2;

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxySpec>;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.lang.String globalProxyExclusionList>;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>($r7, $r6);

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveGlobalProxyLocked(java.lang.String,java.lang.String)>(null, null);

        return;
    }

    private void saveGlobalProxyLocked(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, r2, $r8, $r9, $r11, $r13, $r15, r17, r18;
        java.lang.String[] r3;
        int i0, $i1;
        android.net.ProxyInfo r5, $r7;
        android.content.Context $r6;
        boolean $z0;
        java.lang.StringBuilder $r10, $r12, $r14;
        java.lang.NumberFormatException $r16;
        android.content.ContentResolver r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r2 != null goto label1;

        r2 = "";

     label1:
        if r1 != null goto label2;

        r1 = "";

     label2:
        r17 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        r3 = virtualinvoke r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = 8080;

        $i1 = lengthof r3;

        if $i1 <= 1 goto label6;

     label3:
        $r15 = r3[1];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

     label6:
        r18 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>();

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r19 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = new android.net.ProxyInfo;

        $r8 = r3[0];

        specialinvoke $r7.<android.net.ProxyInfo: void <init>(java.lang.String,int,java.lang.String)>($r8, i0, r18);

        r5 = $r7;

        $z0 = virtualinvoke r5.<android.net.ProxyInfo: boolean isValid()>();

        if $z0 != 0 goto label7;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy properties, ignoring: ");

        $r11 = virtualinvoke r5.<android.net.ProxyInfo: java.lang.String toString()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r13);

        return;

     label7:
        $r9 = r3[0];

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r19, "global_http_proxy_host", $r9);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r19, "global_http_proxy_port", i0);

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r19, "global_http_proxy_exclusion_list", r18);

        return;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public int setStorageEncryption(android.content.ComponentName, boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, i1, i2, $i3, $i5, $i6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, $r15;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        java.lang.Throwable r5, $r17;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.String $r10;
        java.util.ArrayList $r12, $r13;
        java.lang.Object $r14;
        java.lang.NullPointerException $r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z2 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 != null goto label03;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r16;

     label03:
        if i0 != 0 goto label04;

        $i5 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if $i5 == 0 goto label06;

     label04:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only owner is allowed to set storage encryption. User ");

        $i3 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted.");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r10);

        exitmonitor r2;

     label05:
        return 0;

     label06:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 7);

        $z4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isEncryptionSupported()>();

        if $z4 != 0 goto label08;

        exitmonitor r2;

     label07:
        return 0;

     label08:
        $z3 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z3 == z0 goto label09;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label09:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        z1 = 0;

        $r12 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        i2 = 0;

     label10:
        if i2 >= i1 goto label11;

        $r13 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r14 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r15 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r14;

        $z5 = $r15.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        z1 = z1 | $z5;

        i2 = i2 + 1;

        goto label10;

     label11:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setEncryptionRequested(boolean)>(z1);

        if z1 == 0 goto label12;

        $i6 = 3;

        goto label13;

     label12:
        $i6 = 1;

     label13:
        exitmonitor r2;

     label14:
        return $i6;

     label15:
        $r17 := @caughtexception;

        r5 = $r17;

        exitmonitor r2;

     label16:
        throw r5;

        catch java.lang.Throwable from label02 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public boolean getStorageEncryption(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, $r9;
        java.lang.Throwable r4, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r6, $r7;
        java.lang.Object $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        exitmonitor r2;

     label05:
        return $z2;

     label06:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r6 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i2 = 0;

     label07:
        if i2 >= i1 goto label10;

        $r7 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        $z1 = $r9.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean encryptionRequested>;

        if $z1 == 0 goto label09;

        exitmonitor r2;

     label08:
        return 1;

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label13:
        throw r4;

        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public int getStorageEncryptionStatus(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $i1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        return $i1;
    }

    private boolean isEncryptionSupported()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: int getEncryptionStatus()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getEncryptionStatus()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r3, $r4;
        long l0;
        byte b1, $b2;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.crypto.state", "unsupported");

        $r3 = "encrypted";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label7;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $z2 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncrypted()>();

        if $z2 == 0 goto label2;

        $b2 = 3;

        goto label3;

     label2:
        $b2 = 1;

     label3:
        b1 = $b2;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return b1;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label7:
        $r4 = "unencrypted";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label8;

        return 1;

     label8:
        return 0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void setEncryptionRequested(boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        boolean z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        return;
    }

    public void setScreenCaptureDisabled(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z2 == z0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void updateScreenCaptureDisabledInWindowManager(int,boolean)>(i0, z0);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean getScreenCaptureDisabled(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r4;
        java.lang.Throwable r5, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r7, $r8;
        java.lang.Object $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r2 = r0;

        entermonitor r0;

     label02:
        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        exitmonitor r2;

     label05:
        return $z2;

     label06:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r7 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i2 = 0;

     label07:
        if i2 >= i1 goto label10;

        $r8 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r9;

        $z1 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableScreenCapture>;

        if $z1 == 0 goto label09;

        exitmonitor r2;

     label08:
        return 1;

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label13:
        throw r5;

        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void updateScreenCaptureDisabledInWindowManager(int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        boolean z0;
        long l1;
        android.os.RemoteException r1, $r5;
        java.lang.Throwable r2, $r4;
        android.view.IWindowManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.IWindowManager getWindowManager()>();

        interfaceinvoke $r3.<android.view.IWindowManager: void setScreenCaptureDisabled(int,boolean)>(i0, z0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Unable to notify WindowManager.", r1);

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setAutoTimeRequired(android.content.ComponentName, int, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, r5, $r10, $r11;
        android.content.Context $r7;
        android.content.ContentResolver $r8;
        java.lang.NullPointerException $r9;
        long l1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 != null goto label03;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r9;

     label03:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        if $z2 == z0 goto label04;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label07:
        throw r4;

     label08:
        if z0 == 0 goto label13;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r8, "auto_time", 1);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label13;

     label11:
        $r11 := @caughtexception;

        r5 = $r11;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label13:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean getAutoTimeRequired()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdmin()>();

        if r2 == null goto label3;

        $z1 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean requireAutoTime>;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        exitmonitor r1;

     label5:
        return $z1;

     label6:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label7:
        throw r3;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setCameraDisabled(android.content.ComponentName, boolean, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        boolean z0, $z1, $z2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 8);

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z2 == z0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera> = z0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

     label4:
        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r6);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean getCameraDisabled(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r4;
        java.lang.Throwable r5, $r10;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r7, $r8;
        java.lang.Object $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r2 = r0;

        entermonitor r0;

     label02:
        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        exitmonitor r2;

     label05:
        return $z2;

     label06:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r7 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i2 = 0;

     label07:
        if i2 >= i1 goto label10;

        $r8 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r9;

        $z1 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCamera>;

        if $z1 == 0 goto label09;

        exitmonitor r2;

     label08:
        return 1;

     label09:
        i2 = i2 + 1;

        goto label07;

     label10:
        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label13:
        throw r5;

        catch java.lang.Throwable from label02 to label05 with label12;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void setKeyguardDisabledFeatures(android.content.ComponentName, int, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i1);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i1, "disable keyguard features");

        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 9);

        $i2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        if $i2 == i0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures> = i0;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i1);

     label4:
        $r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r6);

        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getKeyguardDisabledFeatures(android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1, i2, i3, $i4, $i5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3, r4;
        java.lang.Throwable r5, $r10;
        boolean $z0;
        java.util.ArrayList $r7, $r9;
        java.lang.Object $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 := @parameter1: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 == null goto label06;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r3 == null goto label03;

        $i5 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        goto label04;

     label03:
        $i5 = 0;

     label04:
        exitmonitor r2;

     label05:
        return $i5;

     label06:
        r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r7 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i2 = 0;

        i3 = 0;

     label07:
        if i3 >= i1 goto label08;

        $r9 = r11.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r8 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r8;

        $i4 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        i2 = i2 | $i4;

        i3 = i3 + 1;

        goto label07;

     label08:
        exitmonitor r2;

     label09:
        return i2;

     label10:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r2;

     label11:
        throw r5;

        catch java.lang.Throwable from label02 to label05 with label10;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean setDeviceOwner(java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        java.lang.String r1, r2, $r10;
        java.lang.Throwable r4, $r22;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        android.content.Context $r11;
        android.content.pm.PackageManager $r12;
        com.android.server.devicepolicy.DeviceOwner $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.IllegalStateException $r21, $r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        if r1 == null goto label02;

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = staticinvoke <com.android.server.devicepolicy.DeviceOwner: boolean isInstalled(java.lang.String,android.content.pm.PackageManager)>(r1, $r12);

        if $z1 != 0 goto label03;

     label02:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package name ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for device owner");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label03:
        r3 = r0;

        entermonitor r0;

     label04:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean allowedToSetDeviceOwnerOnDevice()>();

        if $z2 != 0 goto label05;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set device owner but device is already provisioned.");

        throw $r23;

     label05:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r14 == null goto label06;

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $z3 = virtualinvoke $r20.<com.android.server.devicepolicy.DeviceOwner: boolean hasDeviceOwner()>();

        if $z3 == 0 goto label06;

        $r21 = new java.lang.IllegalStateException;

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set device owner but device owner is already set.");

        throw $r21;

     label06:
        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r16 != null goto label08;

        $r19 = staticinvoke <com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner createWithDeviceOwner(java.lang.String,java.lang.String)>(r1, r2);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner> = $r19;

        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r18.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

        exitmonitor r3;

     label07:
        return 1;

     label08:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r15.<com.android.server.devicepolicy.DeviceOwner: void setDeviceOwner(java.lang.String,java.lang.String)>(r1, r2);

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

        exitmonitor r3;

     label09:
        return 1;

     label10:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r3;

     label11:
        throw r4;

        catch java.lang.Throwable from label04 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public boolean isDeviceOwner(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        java.lang.String r1, $r8;
        java.lang.Throwable r3, $r9;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.devicepolicy.DeviceOwner $r5, $r6, $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r5 == null goto label3;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $z1 = virtualinvoke $r6.<com.android.server.devicepolicy.DeviceOwner: boolean hasDeviceOwner()>();

        if $z1 == 0 goto label3;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r8 = virtualinvoke $r7.<com.android.server.devicepolicy.DeviceOwner: java.lang.String getDeviceOwnerPackageName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        exitmonitor r2;

     label5:
        return $z3;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label7:
        throw r3;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String getDeviceOwner()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        java.lang.Throwable r2, $r8;
        boolean $z0, $z1;
        com.android.server.devicepolicy.DeviceOwner $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r4 == null goto label4;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $z1 = virtualinvoke $r5.<com.android.server.devicepolicy.DeviceOwner: boolean hasDeviceOwner()>();

        if $z1 == 0 goto label4;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DeviceOwner: java.lang.String getDeviceOwnerPackageName()>();

        exitmonitor r1;

     label3:
        return $r7;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String getDeviceOwnerName()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        android.content.Context $r3;
        com.android.server.devicepolicy.DeviceOwner $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        r1 = r0;

        entermonitor r0;

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r5 == null goto label4;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DeviceOwner: java.lang.String getDeviceOwnerName()>();

        exitmonitor r1;

     label3:
        return $r7;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getDeviceOwnerAdmin()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        int i0, i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.app.admin.DeviceAdminInfo $r7;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwner()>();

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(0);

        $r4 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r6;

        $r7 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r8 = virtualinvoke $r7.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;
    }

    public void clearDeviceOwner(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r19;
        java.lang.String r1;
        int i0, $i2;
        long l1;
        java.lang.Throwable r2, r3, $r16, $r17;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        boolean $z0;
        android.os.UserHandle $r7;
        com.android.server.devicepolicy.DeviceOwner $r8, $r9, $r11;
        java.lang.SecurityException $r10, $r13, $r14;
        java.lang.NullPointerException $r12;
        android.content.pm.PackageManager$NameNotFoundException $r15, r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label01;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("packageName is null");

        throw $r12;

     label01:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i0 = virtualinvoke $r5.<android.content.pm.PackageManager: int getPackageUid(java.lang.String,int)>(r1, 0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == $i2 goto label02;

        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Invalid packageName");

        throw $r13;

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        r18 = $r15;

        $r14 = new java.lang.SecurityException;

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.Throwable)>(r18);

        throw $r14;

     label04:
        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>(r1);

        if $z0 != 0 goto label05;

        $r10 = new java.lang.SecurityException;

        specialinvoke $r10.<java.lang.SecurityException: void <init>(java.lang.String)>("clearDeviceOwner can only be called by the device owner");

        throw $r10;

     label05:
        r19 = r0;

        entermonitor r0;

     label06:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label07:
        $r7 = new android.os.UserHandle;

        specialinvoke $r7.<android.os.UserHandle: void <init>(int)>(0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearUserRestrictions(android.os.UserHandle)>($r7);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r8 == null goto label08;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r9.<com.android.server.devicepolicy.DeviceOwner: void clearDeviceOwner()>();

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r11.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label09:
        $r17 := @caughtexception;

        r2 = $r17;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label11:
        exitmonitor r19;

     label12:
        goto label15;

     label13:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r19;

     label14:
        throw r3;

     label15:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public boolean setProfileOwner(android.content.ComponentName, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1;
        java.lang.String r2, $r14, $r15, $r26;
        int i0, $i1, $i2;
        android.content.pm.UserInfo r3;
        java.lang.Throwable r5, $r27;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r6;
        android.os.UserManager $r7;
        java.lang.IllegalArgumentException $r8, $r22;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r23, $r28, $r29;
        com.android.server.devicepolicy.DeviceOwner $r17, $r18, $r19, $r20, $r21;
        java.lang.IllegalStateException $r24, $r25;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r7.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if r3 != null goto label02;

        $r22 = new java.lang.IllegalArgumentException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set profile owner for invalid userId: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r26 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26);

        throw $r22;

     label02:
        $z1 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isGuest()>();

        if $z1 == 0 goto label03;

        $r25 = new java.lang.IllegalStateException;

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set a profile owner on a guest");

        throw $r25;

     label03:
        if r1 == null goto label04;

        $r14 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z2 = staticinvoke <com.android.server.devicepolicy.DeviceOwner: boolean isInstalledForUser(java.lang.String,int)>($r14, i0);

        if $z2 != 0 goto label05;

     label04:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Component ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not installed for userId:");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r8;

     label05:
        r4 = r0;

        entermonitor r0;

     label06:
        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        if $i1 == 1000 goto label07;

        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(i0);

        if $z3 == 0 goto label07;

        $r24 = new java.lang.IllegalStateException;

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to set profile owner but user is already set-up.");

        throw $r24;

     label07:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r18 != null goto label09;

        $r21 = staticinvoke <com.android.server.devicepolicy.DeviceOwner: com.android.server.devicepolicy.DeviceOwner createWithProfileOwner(android.content.ComponentName,java.lang.String,int)>(r1, r2, i0);

        r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner> = $r21;

        $r20 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r20.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

        exitmonitor r4;

     label08:
        return 1;

     label09:
        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r17.<com.android.server.devicepolicy.DeviceOwner: void setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r1, r2, i0);

        $r19 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r19.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

        exitmonitor r4;

     label10:
        return 1;

     label11:
        $r27 := @caughtexception;

        r5 = $r27;

        exitmonitor r4;

     label12:
        throw r5;

        catch java.lang.Throwable from label06 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void clearProfileOwner(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        long l0;
        java.lang.Throwable r4, r5, $r11, $r12;
        boolean $z0;
        com.android.server.devicepolicy.DeviceOwner $r8, $r9, $r10;
        int $i1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        r2 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r3 = r0;

        entermonitor r0;

     label02:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void clearUserRestrictions(android.os.UserHandle)>(r2);

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r8 == null goto label04;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke $r9.<com.android.server.devicepolicy.DeviceOwner: void removeProfileOwner(int)>($i1);

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        virtualinvoke $r10.<com.android.server.devicepolicy.DeviceOwner: void writeOwnerFile()>();

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label07;

     label05:
        $r12 := @caughtexception;

        r4 = $r12;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label07:
        exitmonitor r3;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label10:
        throw r5;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void clearUserRestrictions(android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.os.UserHandle r1;
        android.media.AudioManager r2;
        android.os.Bundle r3, $r7;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.os.UserManager $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.os.UserHandle;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r2 = (android.media.AudioManager) $r5;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r6.<android.os.UserManager: android.os.Bundle getUserRestrictions()>();

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        virtualinvoke $r8.<android.os.UserManager: void setUserRestrictions(android.os.Bundle,android.os.UserHandle)>($r7, r1);

        $z0 = virtualinvoke r3.<android.os.Bundle: boolean getBoolean(java.lang.String)>("no_adjust_volume");

        if $z0 == 0 goto label1;

        virtualinvoke r2.<android.media.AudioManager: void setMasterMute(boolean)>(0);

     label1:
        $z1 = virtualinvoke r3.<android.os.Bundle: boolean getBoolean(java.lang.String)>("no_unmute_microphone");

        if $z1 == 0 goto label2;

        virtualinvoke r2.<android.media.AudioManager: void setMicrophoneMute(boolean)>(0);

     label2:
        return;
    }

    public boolean hasUserSetupCompleted()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>($i0);

        return $z0;
    }

    private boolean hasUserSetupCompleted(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 1;

     label1:
        r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        if r1 == null goto label2;

        $z1 = r1.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public void setProfileEnabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0, i1;
        long l2;
        android.content.Intent r3, $r8;
        java.lang.Throwable r4, r5, $r16, $r17;
        boolean $z0;
        android.os.UserManager $r9;
        android.os.UserHandle $r10, $r14;
        android.content.Context $r13;
        java.lang.NullPointerException $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = r0;

        entermonitor r0;

     label02:
        if r1 != null goto label03;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label03:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r9.<android.os.UserManager: void setUserEnabled(int)>(i1);

        $r8 = new android.content.Intent;

        specialinvoke $r8.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MANAGED_PROFILE_ADDED");

        r3 = $r8;

        $r10 = new android.os.UserHandle;

        specialinvoke $r10.<android.os.UserHandle: void <init>(int)>(i0);

        virtualinvoke r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.USER", $r10);

        virtualinvoke r3.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r14 = <android.os.UserHandle: android.os.UserHandle OWNER>;

        virtualinvoke $r13.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r3, $r14);

     label05:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l2);

        goto label08;

     label06:
        $r17 := @caughtexception;

        r4 = $r17;

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l2);

        throw r4;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label11:
        throw r5;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void setProfileName(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        long l1;
        java.lang.Throwable r3, $r7;
        android.os.UserManager $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label1:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r5.<android.os.UserManager: void setUserName(int,java.lang.String)>(i0, r2);

     label3:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

     label5:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.content.ComponentName getProfileOwner(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0;
        java.lang.Throwable r2, $r7;
        boolean $z0;
        com.android.server.devicepolicy.DeviceOwner $r4, $r5;
        android.content.ComponentName $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r4 == null goto label4;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r6 = virtualinvoke $r5.<com.android.server.devicepolicy.DeviceOwner: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        exitmonitor r1;

     label3:
        return $r6;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdmin(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, i2;
        android.content.ComponentName r1, $r10;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        com.android.server.devicepolicy.DeviceOwner $r4, $r9;
        java.util.ArrayList $r5, $r6;
        java.lang.Object $r7;
        android.app.admin.DeviceAdminInfo $r8;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r4 == null goto label1;

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r10 = virtualinvoke $r9.<com.android.server.devicepolicy.DeviceOwner: android.content.ComponentName getProfileOwnerComponent(int)>(i0);

        goto label2;

     label1:
        $r10 = null;

     label2:
        r1 = $r10;

        if r1 != null goto label3;

        return null;

     label3:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i2 = 0;

     label4:
        if i2 >= i1 goto label6;

        $r6 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r7;

        $r8 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        return r3;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return null;
    }

    public java.lang.String getProfileOwnerName(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0;
        java.lang.Throwable r2, $r8;
        boolean $z0;
        android.content.Context $r3;
        com.android.server.devicepolicy.DeviceOwner $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_USERS", null);

        r1 = r0;

        entermonitor r0;

     label2:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        if $r5 == null goto label4;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        $r7 = virtualinvoke $r6.<com.android.server.devicepolicy.DeviceOwner: java.lang.String getProfileOwnerName(int)>(i0);

        exitmonitor r1;

     label3:
        return $r7;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return null;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private boolean allowedToSetDeviceOwnerOnDevice()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i1;
        android.content.Context $r1;
        android.accounts.AccountManager $r2;
        android.accounts.Account[] $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 2000 goto label1;

        if i0 != 0 goto label4;

     label1:
        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r2 = staticinvoke <android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>($r1);

        $r3 = virtualinvoke $r2.<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>();

        $i1 = lengthof $r3;

        if $i1 != 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted(int)>(0);

        if $z1 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    private void enforceCrossUserPermission(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid userId ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if i0 != $i2 goto label2;

        return;

     label2:
        if i1 == 1000 goto label3;

        if i1 == 0 goto label3;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "Must be system or have INTERACT_ACROSS_USERS_FULL permission");

     label3:
        return;
    }

    private void enforceSystemProcess(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int $i0;
        java.lang.SecurityException $r2;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label1;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>(r1);

        throw $r2;

     label1:
        return;
    }

    private void enforceNotManagedProfile(int, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        java.lang.String r1, $r7;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.SecurityException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You can not ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for a managed profile. ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        return;
    }

    private android.content.pm.UserInfo getProfileParent(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        long l1;
        android.content.pm.UserInfo r1;
        java.lang.Throwable r2, $r4;
        android.os.UserManager $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r1;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean isManagedProfile(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        long l1;
        boolean z0;
        java.lang.Throwable r1, $r4;
        android.os.UserManager $r2;
        android.content.pm.UserInfo $r3;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r2 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $r3 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        z0 = virtualinvoke $r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void enableIfNecessary(java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.pm.IPackageManager r2;
        android.content.pm.ApplicationInfo r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        r2 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r3 = interfaceinvoke r2.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r1, 32768, i0);

        $i1 = r3.<android.content.pm.ApplicationInfo: int enabledSetting>;

        if $i1 != 4 goto label2;

        interfaceinvoke r2.<android.content.pm.IPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>(r1, 0, 1, i0, "DevicePolicyManager");

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.util.PrintWriterPrinter r4, $r10;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;
        java.lang.Throwable r8, $r31;
        android.content.Context $r9;
        android.util.SparseArray $r11, $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r24, $r26, $r27, $r28, $r29;
        java.util.ArrayList $r18, $r22;
        java.lang.String $r19, $r25, $r30;
        android.app.admin.DeviceAdminInfo $r20;
        android.content.ComponentName $r21;
        java.lang.Object $r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i4 = virtualinvoke $r9.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i4 == 0 goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump DevicePolicyManagerService from from pid=");

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i9 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r30);

        return;

     label01:
        $r10 = new android.util.PrintWriterPrinter;

        specialinvoke $r10.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r2);

        r4 = $r10;

        r5 = r0;

        entermonitor r0;

     label02:
        interfaceinvoke r4.<android.util.Printer: void println(java.lang.String)>("Current Device Policy Manager state:");

        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        i0 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label07;

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.util.SparseArray mUserData>;

        $i5 = virtualinvoke $r13.<android.util.SparseArray: int keyAt(int)>(i1);

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i5);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Enabled Device Admins (User ");

        $i6 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mUserHandle>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("):");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r4.<android.util.Printer: void println(java.lang.String)>($r19);

        $r18 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        i3 = 0;

     label04:
        if i3 >= i2 goto label06;

        $r22 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r23 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r23;

        if r7 == null goto label05;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r20 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r21 = virtualinvoke $r20.<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>();

        $r25 = virtualinvoke $r21.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r25);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        virtualinvoke r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: void dump(java.lang.String,java.io.PrintWriter)>("    ", r2);

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mPasswordOwner=");

        $i7 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: int mPasswordOwner>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i7);

        i1 = i1 + 1;

        goto label03;

     label07:
        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r31 := @caughtexception;

        r8 = $r31;

        exitmonitor r5;

     label10:
        throw r8;

     label11:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1, r3;
        android.content.IntentFilter r2;
        int i0;
        android.content.pm.IPackageManager r5;
        long l1;
        java.lang.Throwable r7, r8, $r13, $r14;
        android.os.RemoteException $r11;
        java.lang.NullPointerException $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        r3 := @parameter2: android.content.ComponentName;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r4 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r12;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r5 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        interfaceinvoke r5.<android.content.pm.IPackageManager: void addPersistentPreferredActivity(android.content.IntentFilter,android.content.ComponentName,int)>(r2, r3, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label05:
        $r11 := @caughtexception;

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label07:
        $r14 := @caughtexception;

        r7 = $r14;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r7;

     label09:
        exitmonitor r4;

     label10:
        goto label13;

     label11:
        $r13 := @caughtexception;

        r8 = $r13;

        exitmonitor r4;

     label12:
        throw r8;

     label13:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        android.content.pm.IPackageManager r4;
        long l1;
        java.lang.Throwable r6, r7, $r11, $r12;
        java.lang.NullPointerException $r10;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        interfaceinvoke r4.<android.content.pm.IPackageManager: void clearPackagePersistentPreferredActivities(java.lang.String,int)>(r2, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label05:
        $r13 := @caughtexception;

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label07:
        $r12 := @caughtexception;

        r6 = $r12;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r6;

     label09:
        exitmonitor r3;

     label10:
        goto label13;

     label11:
        $r11 := @caughtexception;

        r7 = $r11;

        exitmonitor r3;

     label12:
        throw r7;

     label13:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void setApplicationRestrictions(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.Bundle r3;
        android.os.UserHandle r4, $r8;
        long l0;
        java.lang.Throwable r6, r7, $r13, $r14;
        int $i1;
        android.os.UserManager $r11;
        java.lang.NullPointerException $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        $r8 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>($i1);

        r4 = $r8;

        r5 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r12;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r11.<android.os.UserManager: void setApplicationRestrictions(java.lang.String,android.os.Bundle,android.os.UserHandle)>(r2, r3, r4);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        goto label07;

     label05:
        $r14 := @caughtexception;

        r6 = $r14;

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label07:
        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r13 := @caughtexception;

        r7 = $r13;

        exitmonitor r5;

     label10:
        throw r7;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setTrustAgentFeaturesEnabled(android.content.ComponentName, android.content.ComponentName, java.util.List, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1, r2;
        java.util.List r3;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.lang.Throwable r6, $r14;
        boolean $z0;
        java.util.HashMap $r8;
        java.lang.String $r9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData $r11;
        java.lang.NullPointerException $r12, $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 := @parameter2: java.util.List;

        i0 := @parameter3: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceNotManagedProfile(int,java.lang.String)>(i0, "manage trust agent features");

        r4 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("admin is null");

        throw $r12;

     label3:
        if r2 != null goto label4;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("agent is null");

        throw $r13;

     label4:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, 9);

        $r8 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.HashMap trustAgentFeatures>;

        $r9 = virtualinvoke r2.<android.content.ComponentName: java.lang.String flattenToString()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r3);

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        $r11 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>($r11);

        exitmonitor r4;

     label5:
        goto label8;

     label6:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r4;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.util.List getTrustAgentFeaturesEnabled(android.content.ComponentName, android.content.ComponentName, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8;
        java.lang.String r4, $r24, $r29;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5, r10;
        java.util.ArrayList r6, $r17, $r19, $r23, $r30;
        java.util.Iterator r7;
        android.content.pm.UserInfo r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r9;
        java.util.List r11, $r31, r36;
        java.lang.Throwable r12, $r34;
        boolean $z0, $z1;
        android.os.UserManager $r14;
        android.os.UserHandle $r15;
        java.lang.Object $r16, $r18, $r21, $r32;
        java.util.HashMap $r20, $r33;
        java.lang.StringBuilder $r22, $r25, $r26, $r28;
        android.app.admin.DeviceAdminInfo $r27;
        java.lang.NullPointerException $r35;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        i0 := @parameter2: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        r3 = r0;

        entermonitor r0;

     label02:
        if r2 != null goto label03;

        $r35 = new java.lang.NullPointerException;

        specialinvoke $r35.<java.lang.NullPointerException: void <init>(java.lang.String)>("agent is null");

        throw $r35;

     label03:
        r4 = virtualinvoke r2.<android.content.ComponentName: java.lang.String flattenToString()>();

        if r1 == null goto label07;

        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName,int)>(r1, i0);

        if r5 == null goto label04;

        $r33 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.HashMap trustAgentFeatures>;

        $r32 = virtualinvoke $r33.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r31 = (java.util.List) $r32;

        goto label05;

     label04:
        $r31 = null;

     label05:
        exitmonitor r3;

     label06:
        return $r31;

     label07:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r36 = virtualinvoke $r14.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        r6 = null;

        r7 = interfaceinvoke r36.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label15;

        $r16 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.content.pm.UserInfo) $r16;

        $r15 = virtualinvoke r8.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        $i3 = virtualinvoke $r15.<android.os.UserHandle: int getIdentifier()>();

        r9 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i3);

        $r17 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r17.<java.util.ArrayList: int size()>();

        i2 = 0;

     label09:
        if i2 >= i1 goto label14;

        $r19 = r9.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r18 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r10 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r18;

        $i4 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: int disabledKeyguardFeatures>;

        $i5 = $i4 & 16;

        if $i5 == 0 goto label13;

        $r20 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.HashMap trustAgentFeatures>;

        $r21 = virtualinvoke $r20.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        r11 = (java.util.List) $r21;

        if r6 != null goto label12;

        if r11 == null goto label10;

        $i7 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i7 != 0 goto label11;

     label10:
        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        r6 = $r23;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("admin ");

        $r27 = r10.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r24 = virtualinvoke $r27.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has null trust agent feature set; all will be disabled");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r29);

        goto label13;

     label11:
        $r30 = new java.util.ArrayList;

        $i8 = interfaceinvoke r11.<java.util.List: int size()>();

        specialinvoke $r30.<java.util.ArrayList: void <init>(int)>($i8);

        r6 = $r30;

        interfaceinvoke r6.<java.util.List: boolean addAll(java.util.Collection)>(r11);

        goto label13;

     label12:
        interfaceinvoke r6.<java.util.List: boolean retainAll(java.util.Collection)>(r11);

     label13:
        i2 = i2 + 1;

        goto label09;

     label14:
        goto label08;

     label15:
        exitmonitor r3;

     label16:
        return r6;

     label17:
        $r34 := @caughtexception;

        r12 = $r34;

        exitmonitor r3;

     label18:
        throw r12;

        catch java.lang.Throwable from label02 to label06 with label17;
        catch java.lang.Throwable from label07 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1, r2;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        java.lang.Throwable r5, $r9;
        java.lang.NullPointerException $r8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.ComponentName;

        r3 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r8;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider> = r2;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r3;

     label5:
        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public android.content.ComponentName getRestrictionsProvider(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r3, $r7;
        android.content.ComponentName $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label2;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Only the system can query the permission provider");

        throw $r6;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        if r2 == null goto label3;

        $r5 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: android.content.ComponentName mRestrictionsProvider>;

        goto label4;

     label3:
        $r5 = null;

     label4:
        exitmonitor r1;

     label5:
        return $r5;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void addCrossProfileIntentFilter(android.content.ComponentName, android.content.IntentFilter, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.content.IntentFilter r2;
        int i0, i1, $i3, $i4, $i5, $i6;
        android.content.pm.IPackageManager r4;
        long l2;
        java.lang.Throwable r6, r7, $r16, $r17;
        android.content.Context $r10, $r13;
        java.lang.String $r11, $r12;
        android.os.RemoteException $r14;
        java.lang.NullPointerException $r15;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.IntentFilter;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $i3 = i0 & 1;

        if $i3 == 0 goto label04;

        $r12 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r13 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i6 = virtualinvoke $r13.<android.content.Context: int getUserId()>();

        interfaceinvoke r4.<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int,int)>(r2, $r12, $i6, i1, 0, 0);

     label04:
        $i4 = i0 & 2;

        if $i4 == 0 goto label05;

        $r11 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $i5 = virtualinvoke $r10.<android.content.Context: int getUserId()>();

        interfaceinvoke r4.<android.content.pm.IPackageManager: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int,int)>(r2, $r11, $i5, 0, i1, 0);

     label05:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l2);

        goto label10;

     label06:
        $r14 := @caughtexception;

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l2);

        goto label10;

     label08:
        $r17 := @caughtexception;

        r6 = $r17;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l2);

        throw r6;

     label10:
        exitmonitor r3;

     label11:
        goto label14;

     label12:
        $r16 := @caughtexception;

        r7 = $r16;

        exitmonitor r3;

     label13:
        throw r7;

     label14:
        return;

        catch android.os.RemoteException from label03 to label05 with label06;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void clearCrossProfileIntentFilters(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        android.content.pm.IPackageManager r3;
        long l1;
        java.lang.Throwable r5, r6, $r12, $r14;
        java.lang.String $r9, $r10;
        java.lang.NullPointerException $r11;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r2 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r11;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r3 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r9 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r3.<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String,int)>(i0, $r9, i0);

        $r10 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r3.<android.content.pm.IPackageManager: void clearCrossProfileIntentFilters(int,java.lang.String,int)>(0, $r10, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label05:
        $r13 := @caughtexception;

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label07:
        $r14 := @caughtexception;

        r5 = $r14;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r2;

     label12:
        throw r6;

     label13:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private boolean checkPackagesInPermittedListOrSystem(java.util.List, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        java.util.List r1, r2;
        int i0, $i2, $i3;
        long l1;
        android.content.pm.UserInfo r3;
        android.content.pm.IPackageManager r4;
        java.util.Iterator r5;
        java.lang.String r6;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        android.content.pm.ApplicationInfo r7;
        java.lang.Throwable r8, $r11;
        android.os.UserManager $r9;
        java.lang.Object $r10;
        android.os.RemoteException $r12, r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.List;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r9.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z1 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label02;

        i0 = r3.<android.content.pm.UserInfo: int profileGroupId>;

     label02:
        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r10;

        z0 = 0;

     label04:
        r7 = interfaceinvoke r4.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r6, 8192, i0);

        $i2 = r7.<android.content.pm.ApplicationInfo: int flags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label05;

        $z4 = 1;

        goto label06;

     label05:
        $z4 = 0;

     label06:
        z0 = $z4;

     label07:
        goto label09;

     label08:
        $r12 := @caughtexception;

        r13 = $r12;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Can\'t talk to package managed", r13);

     label09:
        if z0 != 0 goto label11;

        $z3 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r6);

        if $z3 != 0 goto label11;

        z5 = 0;

     label10:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        return z5;

     label11:
        goto label03;

     label12:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label15;

     label13:
        $r11 := @caughtexception;

        r8 = $r11;

     label14:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r8;

     label15:
        return 1;

        catch android.os.RemoteException from label04 to label07 with label08;
        catch java.lang.Throwable from label01 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;
        android.os.IBinder r1;
        android.view.accessibility.IAccessibilityManager r2, $r3;
        android.view.accessibility.AccessibilityManager $r4;
        android.content.Context $r5;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>(r1);

     label2:
        r2 = $r3;

        $r4 = new android.view.accessibility.AccessibilityManager;

        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        specialinvoke $r4.<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>($r5, r2, i0);

        return $r4;
    }

    public boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r21;
        android.content.ComponentName r1;
        java.util.List r2, r17;
        int i0, $i2;
        long l1;
        android.content.pm.UserInfo r3;
        android.view.accessibility.AccessibilityManager r4;
        java.lang.Throwable r5, r6, $r14, $r16;
        boolean $z0, $z1, $z2, $z3;
        android.os.UserManager $r8;
        java.util.ArrayList $r9, r18;
        android.content.pm.ResolveInfo $r10;
        java.lang.Object $r11;
        java.lang.String $r12;
        android.content.pm.ServiceInfo $r13;
        java.lang.NullPointerException $r15;
        java.util.Iterator r19;
        android.accessibilityservice.AccessibilityServiceInfo r20;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r22;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        if r1 != null goto label02;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r15;

     label02:
        if r2 == null goto label11;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r8.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z1 = virtualinvoke r3.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label04;

        i0 = r3.<android.content.pm.UserInfo: int profileGroupId>;

     label04:
        r4 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)>(i0);

        r17 = virtualinvoke r4.<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>(-1);

     label05:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label08;

     label06:
        $r16 := @caughtexception;

        r5 = $r16;

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label08:
        if r17 == null goto label11;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r18 = $r9;

        r19 = interfaceinvoke r17.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r11 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (android.accessibilityservice.AccessibilityServiceInfo) $r11;

        $r10 = virtualinvoke r20.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r13 = $r10.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        $r12 = $r13.<android.content.pm.ServiceInfo: java.lang.String packageName>;

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r12);

        goto label09;

     label10:
        $z3 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List)>(r18, r2);

        if $z3 != 0 goto label11;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Cannot set permitted accessibility services, because it contains already enabled accesibility services.");

        return 0;

     label11:
        r21 = r0;

        entermonitor r0;

     label12:
        r22 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r22.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices> = r2;

        $i2 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i2);

        exitmonitor r21;

     label13:
        goto label16;

     label14:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r21;

     label15:
        throw r6;

     label16:
        return 1;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.util.List getPermittedAccessibilityServices(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.util.List $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label2:
        r2 = r0;

        entermonitor r0;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        exitmonitor r2;

     label4:
        return $r6;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getPermittedAccessibilityServicesForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.util.ArrayList r2, $r21, $r23, $r25;
        java.util.List r3, r6, r30;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        java.util.Iterator r7;
        android.accessibilityservice.AccessibilityServiceInfo r8;
        java.lang.String r9;
        android.content.pm.ApplicationInfo r10;
        java.lang.Throwable r11, r12, $r24, $r27;
        boolean $z0, $z1, $z2;
        android.os.UserManager $r14, $r15;
        android.content.pm.ResolveInfo $r16;
        android.content.pm.ServiceInfo $r17;
        java.lang.Object $r18, $r19, $r22;
        android.content.pm.UserInfo $r20, r28;
        android.os.RemoteException $r26, r32;
        long l9;
        android.view.accessibility.AccessibilityManager r29;
        android.content.pm.IPackageManager r31;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        r1 = r0;

        entermonitor r0;

     label02:
        r2 = null;

        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r3 = virtualinvoke $r14.<android.os.UserManager: java.util.List getProfiles(int)>(i0);

        i1 = interfaceinvoke r3.<java.util.List: int size()>();

        i2 = 0;

     label03:
        if i2 >= i1 goto label08;

        $r19 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i2);

        $r20 = (android.content.pm.UserInfo) $r19;

        $i7 = $r20.<android.content.pm.UserInfo: int id>;

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i7);

        $r23 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i3 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        i4 = 0;

     label04:
        if i4 >= i3 goto label07;

        $r21 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r22 = virtualinvoke $r21.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r5 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r22;

        r6 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedAccessiblityServices>;

        if r6 == null goto label06;

        if r2 != null goto label05;

        $r25 = new java.util.ArrayList;

        specialinvoke $r25.<java.util.ArrayList: void <init>(java.util.Collection)>(r6);

        r2 = $r25;

        goto label06;

     label05:
        interfaceinvoke r2.<java.util.List: boolean retainAll(java.util.Collection)>(r6);

     label06:
        i4 = i4 + 1;

        goto label04;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        if r2 == null goto label19;

        l9 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label09:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r28 = virtualinvoke $r15.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z1 = virtualinvoke r28.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label10;

        i0 = r28.<android.content.pm.UserInfo: int profileGroupId>;

     label10:
        r29 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.view.accessibility.AccessibilityManager getAccessibilityManagerForUser(int)>(i0);

        r30 = virtualinvoke r29.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        r31 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        if r30 == null goto label16;

        r7 = interfaceinvoke r30.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (android.accessibilityservice.AccessibilityServiceInfo) $r18;

        $r16 = virtualinvoke r8.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r17 = $r16.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        r9 = $r17.<android.content.pm.ServiceInfo: java.lang.String packageName>;

     label12:
        r10 = interfaceinvoke r31.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r9, 8192, i0);

        $i6 = r10.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i6 & 1;

        if $i5 == 0 goto label13;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r9);

     label13:
        goto label15;

     label14:
        $r26 := @caughtexception;

        r32 = $r26;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Accessibility service in missing package", r32);

     label15:
        goto label11;

     label16:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l9);

        goto label19;

     label17:
        $r27 := @caughtexception;

        r12 = $r27;

     label18:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l9);

        throw r12;

     label19:
        exitmonitor r1;

     label20:
        return r2;

     label21:
        $r24 := @caughtexception;

        r11 = $r24;

        exitmonitor r1;

     label22:
        throw r11;

        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label09 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label02 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    private boolean checkCallerIsCurrentUserOrProfile()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0, $i2, $i3, $i6;
        long l1;
        android.content.pm.UserInfo r1, r2;
        android.os.RemoteException r3, $r7;
        boolean z0, $z1, $z2, z3, z4;
        java.lang.Throwable r4, $r8;
        android.os.UserManager $r5;
        android.app.IActivityManager $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r5 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r2 = virtualinvoke $r5.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label02:
        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r1 = interfaceinvoke $r6.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

     label03:
        goto label06;

     label04:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to talk to activity managed.", r3);

        z0 = 0;

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z0;

     label06:
        $z1 = virtualinvoke r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z1 == 0 goto label08;

        $i6 = r2.<android.content.pm.UserInfo: int profileGroupId>;

        $i3 = r1.<android.content.pm.UserInfo: int id>;

        if $i6 == $i3 goto label08;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Cannot set permitted input methods for managed profile of a user that isn\'t the foreground user.");

        z3 = 0;

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z3;

     label08:
        $z2 = virtualinvoke r2.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z2 != 0 goto label10;

        $i2 = r1.<android.content.pm.UserInfo: int id>;

        if i0 == $i2 goto label10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Cannot set permitted input methods of a user that isn\'t the foreground user.");

        z4 = 0;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return z4;

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label13;

     label11:
        $r8 := @caughtexception;

        r4 = $r8;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r4;

     label13:
        return 1;

        catch android.os.RemoteException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean setPermittedInputMethods(android.content.ComponentName, java.util.List)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r17;
        android.content.ComponentName r1;
        java.util.List r2, r4;
        android.view.inputmethod.InputMethodManager r3;
        java.util.ArrayList r5, $r12;
        java.util.Iterator r6;
        android.view.inputmethod.InputMethodInfo r7;
        java.lang.Throwable r8, $r15;
        boolean $z0, $z1, $z2, $z3;
        int $i0;
        android.content.Context $r10;
        java.lang.Object $r11, $r13;
        java.lang.String $r14;
        java.lang.NullPointerException $r16;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r18;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.util.List;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        if r1 != null goto label02;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r16;

     label02:
        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkCallerIsCurrentUserOrProfile()>();

        if $z1 != 0 goto label03;

        return 0;

     label03:
        if r2 == null goto label06;

        $r10 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        r3 = (android.view.inputmethod.InputMethodManager) $r11;

        r4 = virtualinvoke r3.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>();

        if r4 == null goto label06;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r5 = $r12;

        r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.view.inputmethod.InputMethodInfo) $r13;

        $r14 = virtualinvoke r7.<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>();

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label04;

     label05:
        $z2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean checkPackagesInPermittedListOrSystem(java.util.List,java.util.List)>(r5, r2);

        if $z2 != 0 goto label06;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DevicePolicyManagerService", "Cannot set permitted input methods, because it contains already enabled input method.");

        return 0;

     label06:
        r17 = r0;

        entermonitor r0;

     label07:
        r18 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        r18.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods> = r2;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r17;

     label08:
        goto label11;

     label09:
        $r15 := @caughtexception;

        r8 = $r15;

        exitmonitor r17;

     label10:
        throw r8;

     label11:
        return 1;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.util.List getPermittedInputMethods(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.util.List $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        if r1 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r7;

     label2:
        r2 = r0;

        entermonitor r0;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r6 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        exitmonitor r2;

     label4:
        return $r6;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.List getPermittedInputMethodsForCurrentUser()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.pm.UserInfo r1, $r21;
        android.os.RemoteException r2, $r27, $r29, r34;
        java.util.ArrayList r4, $r22, $r23, $r24;
        java.util.List r5, r8, r31;
        int i0, i1, i2, i3, $i4, $i5, $i6, i9;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r6;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r7;
        android.view.inputmethod.InputMethodInfo r9;
        java.lang.String r10;
        android.content.pm.ApplicationInfo r11;
        java.lang.Throwable r12, r13, $r26, $r28;
        android.app.IActivityManager $r14;
        android.os.UserManager $r15;
        android.content.Context $r17;
        java.lang.Object $r18, $r19, $r20, $r25;
        boolean $z0;
        android.view.inputmethod.InputMethodManager r30;
        long l10;
        android.content.pm.IPackageManager r32;
        java.util.Iterator r33;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

     label01:
        $r14 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        r1 = interfaceinvoke $r14.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

     label02:
        goto label04;

     label03:
        $r27 := @caughtexception;

        r2 = $r27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to make remote calls to get current user", r2);

        return null;

     label04:
        i9 = r1.<android.content.pm.UserInfo: int id>;

        r3 = r0;

        entermonitor r0;

     label05:
        r4 = null;

        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r5 = virtualinvoke $r15.<android.os.UserManager: java.util.List getProfiles(int)>(i9);

        i0 = interfaceinvoke r5.<java.util.List: int size()>();

        i1 = 0;

     label06:
        if i1 >= i0 goto label11;

        $r20 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r21 = (android.content.pm.UserInfo) $r20;

        $i6 = $r21.<android.content.pm.UserInfo: int id>;

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>($i6);

        $r22 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i2 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        i3 = 0;

     label07:
        if i3 >= i2 goto label10;

        $r24 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r25 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r7 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r25;

        r8 = r7.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.List permittedInputMethods>;

        if r8 == null goto label09;

        if r4 != null goto label08;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>(java.util.Collection)>(r8);

        r4 = $r23;

        goto label09;

     label08:
        interfaceinvoke r4.<java.util.List: boolean retainAll(java.util.Collection)>(r8);

     label09:
        i3 = i3 + 1;

        goto label07;

     label10:
        i1 = i1 + 1;

        goto label06;

     label11:
        if r4 == null goto label21;

        $r17 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r18 = virtualinvoke $r17.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        r30 = (android.view.inputmethod.InputMethodManager) $r18;

        r31 = virtualinvoke r30.<android.view.inputmethod.InputMethodManager: java.util.List getInputMethodList()>();

        l10 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        r32 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        if r31 == null goto label18;

        r33 = interfaceinvoke r31.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r19 = interfaceinvoke r33.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.view.inputmethod.InputMethodInfo) $r19;

        r10 = virtualinvoke r9.<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>();

     label14:
        r11 = interfaceinvoke r32.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r10, 8192, i9);

        $i4 = r11.<android.content.pm.ApplicationInfo: int flags>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label15;

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r10);

     label15:
        goto label17;

     label16:
        $r29 := @caughtexception;

        r34 = $r29;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Input method for missing package", r34);

     label17:
        goto label13;

     label18:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l10);

        goto label21;

     label19:
        $r28 := @caughtexception;

        r13 = $r28;

     label20:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l10);

        throw r13;

     label21:
        exitmonitor r3;

     label22:
        return r4;

     label23:
        $r26 := @caughtexception;

        r12 = $r26;

        exitmonitor r3;

     label24:
        throw r12;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label05 to label22 with label23;
        catch java.lang.Throwable from label23 to label24 with label23;
    }

    public android.os.UserHandle createUser(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        long l0;
        android.content.pm.UserInfo r4;
        android.os.UserHandle r5;
        java.lang.Throwable r6, r7, $r10, $r12;
        android.os.UserManager $r9;
        java.lang.NullPointerException $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r11;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r4 = virtualinvoke $r9.<android.os.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int)>(r2, 0);

        if r4 == null goto label06;

        r5 = virtualinvoke r4.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label05:
        return r5;

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label07:
        return null;

     label08:
        $r10 := @caughtexception;

        r6 = $r10;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label10:
        $r12 := @caughtexception;

        r7 = $r12;

        exitmonitor r3;

     label11:
        throw r7;

        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label11 with label10;
    }

    public android.os.UserHandle createAndInitializeUser(android.content.ComponentName, java.lang.String, java.lang.String, android.content.ComponentName, android.os.Bundle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.ComponentName r1, r4;
        java.lang.String r2, r3, r7;
        android.os.Bundle r5;
        android.os.UserHandle r6, r14;
        long l0;
        android.content.pm.IPackageManager r8;
        android.app.IActivityManager r9;
        android.os.RemoteException r10, $r12;
        java.lang.Throwable r11, $r13;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.content.ComponentName;

        r5 := @parameter4: android.os.Bundle;

        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createUser(android.content.ComponentName,java.lang.String)>(r1, r2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r7 = virtualinvoke r4.<android.content.ComponentName: java.lang.String getPackageName()>();

        r8 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        r9 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

     label2:
        $i1 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        $z0 = interfaceinvoke r8.<android.content.pm.IPackageManager: boolean isPackageAvailable(java.lang.String,int)>(r7, $i1);

        if $z0 != 0 goto label3;

        $i5 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r8.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int)>(r7, $i5);

     label3:
        $i2 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        interfaceinvoke r9.<android.app.IActivityManager: boolean startUserInBackground(int)>($i2);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

        r10 = $r12;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to make remote calls for configureUser", r10);

     label6:
        $i4 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int,android.os.Bundle)>(r4, 1, $i4, r5);

        $i3 = virtualinvoke r6.<android.os.UserHandle: int getIdentifier()>();

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>(r4, r3, $i3);

        r14 = r6;

     label7:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        return r14;

     label8:
        $r13 := @caughtexception;

        r11 = $r13;

     label9:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r11;

        catch android.os.RemoteException from label2 to label4 with label5;
        catch java.lang.Throwable from label1 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean removeUser(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        long l0;
        boolean z0;
        java.lang.Throwable r4, r5, $r9, $r11;
        android.os.UserManager $r8;
        int $i1;
        java.lang.NullPointerException $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        r3 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        $i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

        z0 = virtualinvoke $r8.<android.os.UserManager: boolean removeUser(int)>($i1);

     label4:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label5:
        return z0;

     label6:
        $r9 := @caughtexception;

        r4 = $r9;

     label7:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label8:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label9:
        throw r5;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label1 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    public boolean switchUser(android.content.ComponentName, android.os.UserHandle)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.os.UserHandle r2;
        long l0;
        int i1;
        boolean z0, z1;
        java.lang.Throwable r4, r5, $r11, $r12;
        android.app.IActivityManager $r8;
        java.lang.NullPointerException $r9;
        android.os.RemoteException $r10, r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.UserHandle;

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r9;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        i1 = 0;

        if r2 == null goto label04;

        i1 = virtualinvoke r2.<android.os.UserHandle: int getIdentifier()>();

     label04:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        z0 = interfaceinvoke $r8.<android.app.IActivityManager: boolean switchUser(int)>(i1);

     label05:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label06:
        return z0;

     label07:
        $r10 := @caughtexception;

        r13 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Couldn\'t switch user", r13);

        z1 = 0;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r3;

     label09:
        return z1;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

     label11:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r4;

     label12:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r3;

     label13:
        throw r5;

        catch android.os.RemoteException from label03 to label05 with label07;
        catch java.lang.Throwable from label03 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label01 to label06 with label12;
        catch java.lang.Throwable from label07 to label09 with label12;
        catch java.lang.Throwable from label10 to label13 with label12;
    }

    public android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1;
        java.lang.String r2;
        android.os.UserHandle r3, $r8;
        long l0;
        android.os.Bundle r5;
        java.lang.Throwable r6, r7, $r12, $r14;
        int $i1;
        android.os.UserManager $r11;
        java.lang.NullPointerException $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        $r8 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r8.<android.os.UserHandle: void <init>(int)>($i1);

        r3 = $r8;

        r4 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r13;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r5 = virtualinvoke $r11.<android.os.UserManager: android.os.Bundle getApplicationRestrictions(java.lang.String,android.os.UserHandle)>(r2, r3);

     label4:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        exitmonitor r4;

     label5:
        return r5;

     label6:
        $r14 := @caughtexception;

        r6 = $r14;

     label7:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label8:
        $r12 := @caughtexception;

        r7 = $r12;

        exitmonitor r4;

     label9:
        throw r7;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label1 to label5 with label8;
        catch java.lang.Throwable from label6 to label9 with label8;
    }

    public void setUserRestriction(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        android.content.ComponentName r1;
        java.lang.String r2, $r14, $r16, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r30, $r41, $r42, $r47, $r48, $r49, $r53;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z19, $z20, $z21, $z22;
        android.os.UserHandle r3, $r11;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r5;
        android.media.IAudioService r6;
        android.os.RemoteException r7, $r59, $r60, r61;
        android.hardware.usb.UsbManager r8;
        java.lang.Throwable r9, r10, $r57, $r58;
        android.app.admin.DeviceAdminInfo $r13;
        android.os.UserManager $r15, $r18;
        android.os.IBinder $r17;
        android.content.ContentResolver $r28, $r31, $r34, $r37, $r38, $r40, $r46;
        android.content.Context $r29, $r32, $r33, $r35, $r36, $r39, $r43, $r45;
        java.lang.Object $r44;
        java.lang.StringBuilder $r50, $r51, $r55;
        java.lang.NullPointerException $r52;
        java.util.Set $r54;
        java.lang.SecurityException $r56;
        long l4;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r11 = new android.os.UserHandle;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke $r11.<android.os.UserHandle: void <init>(int)>($i1);

        r3 = $r11;

        i0 = virtualinvoke r3.<android.os.UserHandle: int getIdentifier()>();

        r4 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r52 = new java.lang.NullPointerException;

        specialinvoke $r52.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r52;

     label02:
        r5 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r13 = r5.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r14 = virtualinvoke $r13.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>($r14);

        if z1 != 0 goto label03;

        if i0 == 0 goto label03;

        $r54 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        $z22 = interfaceinvoke $r54.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z22 == 0 goto label03;

        $r56 = new java.lang.SecurityException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r51 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Profile owners cannot set user restriction ");

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.lang.SecurityException: void <init>(java.lang.String)>($r53);

        throw $r56;

     label03:
        $r15 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        z2 = virtualinvoke $r15.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>(r2, r3);

        r6 = null;

        $r16 = "no_unmute_microphone";

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 != 0 goto label04;

        $r48 = "no_adjust_volume";

        $z20 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z20 == 0 goto label05;

     label04:
        $r17 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r6 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r17);

     label05:
        if z0 == 0 goto label10;

        if z2 != 0 goto label10;

     label06:
        $r41 = "no_unmute_microphone";

        $z19 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z19 == 0 goto label07;

        $r47 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r6.<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String)>(1, $r47);

        goto label08;

     label07:
        $r42 = "no_adjust_volume";

        $z21 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z21 == 0 goto label08;

        $r49 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r6.<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,android.os.IBinder)>(1, 0, $r49, null);

     label08:
        goto label10;

     label09:
        $r60 := @caughtexception;

        r7 = $r60;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to talk to AudioService.", r7);

     label10:
        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label11:
        if z0 == 0 goto label17;

        if z2 != 0 goto label17;

        $r22 = "no_config_wifi";

        $z6 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label12;

        $r45 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r46 = virtualinvoke $r45.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r46, "wifi_networks_available_notification_on", 0, i0);

        goto label17;

     label12:
        $r25 = "no_usb_file_transfer";

        $z8 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z8 == 0 goto label13;

        $r43 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r44 = virtualinvoke $r43.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("usb");

        r8 = (android.hardware.usb.UsbManager) $r44;

        virtualinvoke r8.<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>("none", 0);

        goto label17;

     label13:
        $r24 = "no_share_location";

        $z7 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z7 == 0 goto label14;

        $r39 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r40 = virtualinvoke $r39.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r40, "location_mode", 0, i0);

        $r36 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r37 = virtualinvoke $r36.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r37, "location_providers_allowed", "", i0);

        goto label17;

     label14:
        $r27 = "no_debugging_features";

        $z10 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z10 == 0 goto label15;

        if i0 != 0 goto label17;

        $r33 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r38 = virtualinvoke $r33.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r38, "adb_enabled", "0", i0);

        goto label17;

     label15:
        $r26 = "ensure_verify_apps";

        $z9 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z9 == 0 goto label16;

        $r32 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r31 = virtualinvoke $r32.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r31, "package_verifier_enable", "1", i0);

        $r35 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r34 = virtualinvoke $r35.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r34, "verifier_verify_adb_installs", "1", i0);

        goto label17;

     label16:
        $r30 = "no_install_unknown_sources";

        $z11 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z11 == 0 goto label17;

        $r29 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r28 = virtualinvoke $r29.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r28, "install_non_market_apps", 0, i0);

     label17:
        $r18 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        virtualinvoke $r18.<android.os.UserManager: void setUserRestriction(java.lang.String,boolean,android.os.UserHandle)>(r2, z0, r3);

     label18:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l4);

        goto label21;

     label19:
        $r58 := @caughtexception;

        r9 = $r58;

     label20:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l4);

        throw r9;

     label21:
        if z0 != 0 goto label26;

        if z2 == 0 goto label26;

     label22:
        $r20 = "no_unmute_microphone";

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label23;

        $r23 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r6.<android.media.IAudioService: void setMicrophoneMute(boolean,java.lang.String)>(0, $r23);

        goto label24;

     label23:
        $r19 = "no_adjust_volume";

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label24;

        $r21 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r6.<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,android.os.IBinder)>(0, 0, $r21, null);

     label24:
        goto label26;

     label25:
        $r59 := @caughtexception;

        r61 = $r59;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to talk to AudioService.", r61);

     label26:
        exitmonitor r4;

     label27:
        goto label30;

     label28:
        $r57 := @caughtexception;

        r10 = $r57;

        exitmonitor r4;

     label29:
        throw r10;

     label30:
        return;

        catch android.os.RemoteException from label06 to label08 with label09;
        catch java.lang.Throwable from label11 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch android.os.RemoteException from label22 to label24 with label25;
        catch java.lang.Throwable from label01 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    public boolean setApplicationHidden(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0, z1;
        int i0;
        long l1;
        android.content.pm.IPackageManager r4;
        java.lang.Throwable r5, r6, $r11, $r12;
        java.lang.NullPointerException $r9;
        android.os.RemoteException $r10, r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r9;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        z1 = interfaceinvoke r4.<android.content.pm.IPackageManager: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>(r2, z0, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label05:
        return z1;

     label06:
        $r10 := @caughtexception;

        r13 = $r10;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to setApplicationHiddenSetting", r13);

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label10;

     label08:
        $r11 := @caughtexception;

        r5 = $r11;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label10:
        exitmonitor r3;

     label11:
        return 0;

     label12:
        $r12 := @caughtexception;

        r6 = $r12;

        exitmonitor r3;

     label13:
        throw r6;

        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public boolean isApplicationHidden(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        long l1;
        android.content.pm.IPackageManager r4;
        boolean z0;
        java.lang.Throwable r5, r6, $r11, $r12;
        android.os.RemoteException $r9, r13;
        java.lang.NullPointerException $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        z0 = interfaceinvoke r4.<android.content.pm.IPackageManager: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>(r2, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label05:
        return z0;

     label06:
        $r9 := @caughtexception;

        r13 = $r9;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to getApplicationHiddenSettingAsUser", r13);

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label10;

     label08:
        $r12 := @caughtexception;

        r5 = $r12;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label10:
        exitmonitor r3;

     label11:
        return 0;

     label12:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r3;

     label13:
        throw r6;

        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void enableSystemApp(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2, $r20;
        int i0, $i2;
        long l1;
        android.os.UserManager r4;
        android.content.pm.UserInfo r5;
        android.content.pm.IPackageManager r6;
        java.lang.Throwable r7, r8, $r18, $r19;
        android.content.Context $r11;
        boolean $z0;
        java.lang.IllegalArgumentException $r12;
        android.os.RemoteException $r13, r21;
        java.lang.NullPointerException $r14;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r14;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r11 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r11);

        r5 = virtualinvoke r4.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r5 != null goto label04;

        r5 = virtualinvoke r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label04:
        r6 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $i2 = r5.<android.content.pm.UserInfo: int id>;

        $z0 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemApp(android.content.pm.IPackageManager,java.lang.String,int)>(r6, r2, $i2);

        if $z0 != 0 goto label05;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only system apps can be enabled this way.");

        throw $r12;

     label05:
        interfaceinvoke r6.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int)>(r2, i0);

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label07:
        $r13 := @caughtexception;

        r21 = $r13;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to install ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", $r20, r21);

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label11;

     label09:
        $r18 := @caughtexception;

        r7 = $r18;

     label10:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r7;

     label11:
        exitmonitor r3;

     label12:
        goto label15;

     label13:
        $r19 := @caughtexception;

        r8 = $r19;

        exitmonitor r3;

     label14:
        throw r8;

     label15:
        return;

        catch android.os.RemoteException from label03 to label06 with label07;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int enableSystemAppWithIntent(android.content.ComponentName, android.content.Intent)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.content.Intent r2;
        int i0, i2, $i3, $i4, i7;
        long l1;
        android.os.UserManager r4;
        android.content.pm.UserInfo r5;
        android.content.pm.IPackageManager r6;
        java.util.List r7;
        java.util.Iterator r8;
        android.content.pm.ResolveInfo r9;
        java.lang.Throwable r10, r11, $r31, $r32;
        android.content.Context $r14, $r16;
        android.content.ContentResolver $r15;
        java.lang.String $r17, $r22, $r23, $r29;
        boolean $z0, $z1;
        android.content.pm.ActivityInfo $r18, $r20, $r21;
        java.lang.Object $r19;
        java.lang.NullPointerException $r24;
        java.lang.IllegalArgumentException $r25;
        java.lang.StringBuilder $r26, $r28, $r30;
        android.os.RemoteException $r27;
        byte b8;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.content.Intent;

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r24 = new java.lang.NullPointerException;

        specialinvoke $r24.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r24;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r14 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r14);

        r5 = virtualinvoke r4.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r5 != null goto label04;

        r5 = virtualinvoke r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

     label04:
        r6 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        $r16 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r15 = virtualinvoke $r16.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r17 = virtualinvoke r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r15);

        $i3 = r5.<android.content.pm.UserInfo: int id>;

        r7 = interfaceinvoke r6.<android.content.pm.IPackageManager: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>(r2, $r17, 0, $i3);

        i2 = 0;

        if r7 == null goto label08;

        r8 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r19 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>();

        r9 = (android.content.pm.ResolveInfo) $r19;

        $r20 = r9.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r20 == null goto label07;

        $r18 = r9.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r23 = $r18.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        $i4 = r5.<android.content.pm.UserInfo: int id>;

        $z1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemApp(android.content.pm.IPackageManager,java.lang.String,int)>(r6, $r23, $i4);

        if $z1 != 0 goto label06;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only system apps can be enabled this way.");

        throw $r25;

     label06:
        i2 = i2 + 1;

        $r21 = r9.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        $r22 = $r21.<android.content.pm.ActivityInfo: java.lang.String packageName>;

        interfaceinvoke r6.<android.content.pm.IPackageManager: int installExistingPackageAsUser(java.lang.String,int)>($r22, i0);

     label07:
        goto label05;

     label08:
        i7 = i2;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label10:
        return i7;

     label11:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to resolve intent for: ");

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DevicePolicyManagerService", $r29);

        b8 = 0;

     label12:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label13:
        return b8;

     label14:
        $r31 := @caughtexception;

        r10 = $r31;

     label15:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r10;

     label16:
        $r32 := @caughtexception;

        r11 = $r32;

        exitmonitor r3;

     label17:
        throw r11;

        catch android.os.RemoteException from label03 to label09 with label11;
        catch java.lang.Throwable from label03 to label09 with label14;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label01 to label10 with label16;
        catch java.lang.Throwable from label11 to label13 with label16;
        catch java.lang.Throwable from label14 to label17 with label16;
    }

    private boolean isSystemApp(android.content.pm.IPackageManager, java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.content.pm.IPackageManager r1;
        java.lang.String r2;
        int i0, $i1, $i2;
        android.content.pm.ApplicationInfo r3;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.pm.IPackageManager;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = interfaceinvoke r1.<android.content.pm.IPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>(r2, 8192, i0);

        $i1 = r3.<android.content.pm.ApplicationInfo: int flags>;

        $i2 = $i1 & 1;

        if $i2 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0, $z1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;
        java.lang.Throwable r5, $r9;
        java.util.Set $r7, $r8;
        int $i0;
        java.lang.NullPointerException $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        r3 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label3:
        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        if z0 == 0 goto label4;

        $r8 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r2);

        goto label5;

     label4:
        $r7 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r2);

     label5:
        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r3;

     label8:
        throw r5;

     label9:
        return;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabled()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int $i0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>($i0);

        return $r1;
    }

    public java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0, i1, i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.util.HashSet r3, $r8;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r4;
        java.lang.Throwable r5, $r15;
        boolean $z0;
        java.util.ArrayList $r7, $r13;
        java.lang.Object[] $r9;
        java.lang.String[] $r10, $r11;
        java.lang.Object $r12;
        java.util.Set $r14;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCrossUserPermission(int)>(i0);

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return null;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r3 = $r8;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        $r13 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        $r12 = virtualinvoke $r13.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r4 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r12;

        $r14 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: java.util.Set accountTypesWithManagementDisabled>;

        virtualinvoke r3.<java.util.HashSet: boolean addAll(java.util.Collection)>($r14);

        i2 = i2 + 1;

        goto label3;

     label4:
        $i3 = virtualinvoke r3.<java.util.HashSet: int size()>();

        $r10 = newarray (java.lang.String)[$i3];

        $r9 = virtualinvoke r3.<java.util.HashSet: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r11 = (java.lang.String[]) $r9;

        exitmonitor r1;

     label5:
        return $r11;

     label6:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r1;

     label7:
        throw r5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setUninstallBlocked(android.content.ComponentName, java.lang.String, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        boolean z0;
        int i0;
        long l1;
        android.content.pm.IPackageManager r4;
        java.lang.Throwable r5, r6, $r9, $r11;
        java.lang.NullPointerException $r10;
        android.os.RemoteException $r12, r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        interfaceinvoke r4.<android.content.pm.IPackageManager: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>(r2, z0, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label05:
        $r12 := @caughtexception;

        r13 = $r12;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to setBlockUninstallForUser", r13);

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label07:
        $r11 := @caughtexception;

        r5 = $r11;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label09:
        exitmonitor r3;

     label10:
        goto label13;

     label11:
        $r9 := @caughtexception;

        r6 = $r9;

        exitmonitor r3;

     label12:
        throw r6;

     label13:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public boolean isUninstallBlocked(android.content.ComponentName, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String r2;
        int i0;
        long l1;
        android.content.pm.IPackageManager r4;
        boolean z0;
        java.lang.Throwable r5, r6, $r11, $r12;
        android.os.RemoteException $r9, r13;
        java.lang.NullPointerException $r10;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r10;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        r4 = staticinvoke <android.app.AppGlobals: android.content.pm.IPackageManager getPackageManager()>();

        z0 = interfaceinvoke r4.<android.content.pm.IPackageManager: boolean getBlockUninstallForUser(java.lang.String,int)>(r2, i0);

     label04:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        exitmonitor r3;

     label05:
        return z0;

     label06:
        $r9 := @caughtexception;

        r13 = $r9;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to getBlockUninstallForUser", r13);

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label10;

     label08:
        $r12 := @caughtexception;

        r5 = $r12;

     label09:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r5;

     label10:
        exitmonitor r3;

     label11:
        goto label14;

     label12:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r3;

     label13:
        throw r6;

     label14:
        return 0;

        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        boolean z0, $z1, $z2;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        int $i0;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z1 != 0 goto label1;

        return;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $z2 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        if $z2 == z0 goto label4;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId> = z0;

        $i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>($i0);

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r3;
        java.lang.Throwable r4, $r7;
        boolean $z0, $z1;
        java.lang.NullPointerException $r6;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $z0 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean mHasFeature>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        if r1 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r6;

     label3:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $z1 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        exitmonitor r2;

     label4:
        return $z1;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label6:
        throw r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean getCrossProfileCallerIdDisabledForUser(int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r2;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter0: int;

        r1 = r0;

        entermonitor r0;

     label1:
        r2 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getProfileOwnerAdmin(int)>(i0);

        if r2 == null goto label2;

        $z0 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: boolean disableCallerId>;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void setLockTaskPackages(android.content.ComponentName, java.lang.String[]) throws java.lang.SecurityException
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        java.lang.String[] r2;
        int i0, i1, $i2;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r4;
        java.lang.String r5;
        java.lang.Throwable r6, $r13;
        android.os.UserHandle $r9;
        java.util.List $r10, $r11;
        java.lang.NullPointerException $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String[];

        r3 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r12;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        $r9 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r9.<android.os.UserHandle: int getIdentifier()>();

        r4 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r10 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        interfaceinvoke $r10.<java.util.List: void clear()>();

        if r2 == null goto label4;

        i1 = 0;

     label3:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label4;

        r5 = r2[i1];

        $r11 = r4.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r5);

        i1 = i1 + 1;

        goto label3;

     label4:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r3;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String[] getLockTaskPackages(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        android.content.ComponentName r1;
        int i0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        java.lang.Throwable r4, $r12;
        android.os.UserHandle $r7;
        java.lang.String[] $r8, $r11;
        java.util.List $r9;
        java.lang.Object[] $r10;
        java.lang.NullPointerException $r13;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r13;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        $r7 = staticinvoke <android.os.Binder: android.os.UserHandle getCallingUserHandle()>();

        i0 = virtualinvoke $r7.<android.os.UserHandle: int getIdentifier()>();

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r9 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r8 = newarray (java.lang.String)[0];

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r11 = (java.lang.String[]) $r10;

        exitmonitor r2;

     label3:
        return $r11;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label5:
        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isLockTaskPermitted(java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        java.lang.String r1, r4;
        int i0, i1, i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r2;
        java.lang.Throwable r5, $r10;
        java.util.List $r7, $r9;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r2 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i1);

        r3 = r0;

        entermonitor r0;

     label1:
        i2 = 0;

     label2:
        $r7 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $i3 = interfaceinvoke $r7.<java.util.List: int size()>();

        if i2 >= $i3 goto label5;

        $r9 = r2.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.List mLockTaskPackages>;

        $r8 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2);

        r4 = (java.lang.String) $r8;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        exitmonitor r3;

     label3:
        return 1;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r3;

     label8:
        throw r5;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void notifyLockTaskModeChanged(boolean, java.lang.String, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r2;
        boolean z0, z1, z2, $z3, $z4, $z5;
        java.lang.String r1, $r13, $r16;
        int i0, $i1;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        android.os.Bundle r4, $r9;
        java.util.Iterator r5;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;
        java.lang.Throwable r7, $r18;
        java.util.ArrayList $r10;
        android.app.admin.DeviceAdminInfo $r11, $r17;
        java.lang.Object $r12;
        android.content.ComponentName $r14, $r15;
        java.lang.SecurityException $r19;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label01;

        $r19 = new java.lang.SecurityException;

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>("notifyLockTaskModeChanged can only be called by system");

        throw $r19;

     label01:
        r2 = r0;

        entermonitor r0;

     label02:
        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i0);

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        r4 = $r9;

        virtualinvoke r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("android.app.extra.LOCK_TASK_PACKAGE", r1);

        $r10 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: java.util.ArrayList mAdminList>;

        r5 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label09;

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin) $r12;

        $r11 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r13 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        z1 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>($r13);

        $r15 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        if $r15 == null goto label04;

        $r14 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getProfileOwner(int)>(i0);

        $r17 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r16 = virtualinvoke $r17.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z5 = virtualinvoke $r14.<android.content.ComponentName: boolean equals(java.lang.Object)>($r16);

        if $z5 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z2 = $z4;

        if z1 != 0 goto label06;

        if z2 == 0 goto label08;

     label06:
        if z0 == 0 goto label07;

        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver)>(r6, "android.app.action.LOCK_TASK_ENTERING", r4, null);

        goto label08;

     label07:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void sendAdminCommandLocked(com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin,java.lang.String)>(r6, "android.app.action.LOCK_TASK_EXITING");

     label08:
        goto label03;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r18 := @caughtexception;

        r7 = $r18;

        exitmonitor r2;

     label12:
        throw r7;

     label13:
        return;

        catch java.lang.Throwable from label02 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r13;
        android.content.ContentResolver r4;
        long l0;
        java.lang.Throwable r6, r7, $r15, $r17;
        android.content.Context $r8;
        java.util.Set $r11;
        boolean $z0;
        java.lang.SecurityException $r12;
        java.lang.Object[] $r14;
        java.lang.NullPointerException $r16;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r8 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r16;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -2);

        $r11 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        $z0 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label03;

        $r12 = new java.lang.SecurityException;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r2;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: device owners cannot update %1$s", $r14);

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label03:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r4, r2, r3);

     label05:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        goto label08;

     label06:
        $r17 := @caughtexception;

        r6 = $r17;

     label07:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l0);

        throw r6;

     label08:
        exitmonitor r5;

     label09:
        goto label12;

     label10:
        $r15 := @caughtexception;

        r7 = $r15;

        exitmonitor r5;

     label11:
        throw r7;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r5;
        android.content.ComponentName r1;
        java.lang.String r2, r3, $r12, $r15, $r22;
        int i0;
        android.content.ContentResolver r4;
        com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin r6;
        long l1;
        java.lang.Throwable r7, r8, $r20, $r21;
        android.content.Context $r9;
        android.app.admin.DeviceAdminInfo $r11;
        boolean $z0, $z1, $z3;
        java.util.Set $r13, $r17;
        java.lang.SecurityException $r14, $r19;
        java.lang.Object[] $r16, $r18;
        java.lang.NullPointerException $r23;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r4 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r5 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r23;

     label02:
        r6 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r11 = r6.<com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin: android.app.admin.DeviceAdminInfo info>;

        $r12 = virtualinvoke $r11.<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceOwner(java.lang.String)>($r12);

        if $z0 == 0 goto label03;

        $r17 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST>;

        $z3 = interfaceinvoke $r17.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z3 != 0 goto label04;

        $r19 = new java.lang.SecurityException;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r2;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: Device owners cannot update %1$s", $r18);

        specialinvoke $r19.<java.lang.SecurityException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label03:
        $r13 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        $z1 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 != 0 goto label04;

        $r14 = new java.lang.SecurityException;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = r2;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Permission denial: Profile owners cannot update %1$s", $r16);

        specialinvoke $r14.<java.lang.SecurityException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label04:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>(r4, r2, r3, i0);

     label06:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        goto label09;

     label07:
        $r20 := @caughtexception;

        r7 = $r20;

     label08:
        staticinvoke <com.android.server.devicepolicy.DevicePolicyManagerService: void restoreCallingIdentity(long)>(l1);

        throw r7;

     label09:
        exitmonitor r5;

     label10:
        goto label13;

     label11:
        $r21 := @caughtexception;

        r8 = $r21;

        exitmonitor r5;

     label12:
        throw r8;

     label13:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void setMasterVolumeMuted(android.content.ComponentName, boolean)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        boolean z0;
        android.media.IAudioService r4;
        android.os.RemoteException r5, $r13;
        java.lang.Throwable r6, $r14;
        android.content.Context $r7;
        android.os.IBinder $r10;
        java.lang.String $r11;
        java.lang.NullPointerException $r12;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = r0;

        entermonitor r0;

     label01:
        if r1 != null goto label02;

        $r12 = new java.lang.NullPointerException;

        specialinvoke $r12.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r12;

     label02:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r10 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("audio");

        r4 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r10);

     label03:
        $r11 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r4.<android.media.IAudioService: void setMasterMute(boolean,int,java.lang.String,android.os.IBinder)>(z0, 0, $r11, null);

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

        r5 = $r13;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DevicePolicyManagerService", "Failed to setMasterMute", r5);

     label06:
        exitmonitor r3;

     label07:
        goto label10;

     label08:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r3;

     label09:
        throw r6;

     label10:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public boolean isMasterVolumeMuted(android.content.ComponentName)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r3;
        android.content.ComponentName r1;
        android.media.AudioManager r4;
        java.lang.Throwable r5, $r12;
        android.content.Context $r6, $r9;
        java.lang.Object $r10;
        boolean $z0;
        java.lang.NullPointerException $r11;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter0: android.content.ComponentName;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r3 = r0;

        entermonitor r0;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("ComponentName is null");

        throw $r11;

     label2:
        virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>(r1, -1);

        $r9 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r4 = (android.media.AudioManager) $r10;

        $z0 = virtualinvoke r4.<android.media.AudioManager: boolean isMasterMute()>();

        exitmonitor r3;

     label3:
        return $z0;

     label4:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r3;

     label5:
        throw r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void updateUserSetupComplete()
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0, r4;
        java.util.List r1;
        android.content.ContentResolver r2;
        int i0, i1, i2, $i3;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r3;
        java.lang.Throwable r5, $r11;
        android.os.UserManager $r6;
        android.content.Context $r7;
        java.lang.Object $r8;
        android.content.pm.UserInfo $r9;
        boolean $z0;

        r0 := @this: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r6 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserManager mUserManager>;

        r1 = virtualinvoke $r6.<android.os.UserManager: java.util.List getUsers(boolean)>(1);

        $r7 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.Context mContext>;

        r2 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label7;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = (android.content.pm.UserInfo) $r8;

        i2 = $r9.<android.content.pm.UserInfo: int id>;

        $i3 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r2, "user_setup_complete", 0, i2);

        if $i3 == 0 goto label6;

        r3 = virtualinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData getUserData(int)>(i2);

        $z0 = r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete>;

        if $z0 != 0 goto label6;

        r3.<com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData: boolean mUserSetupComplete> = 1;

        r4 = r0;

        entermonitor r0;

     label2:
        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i2);

        exitmonitor r4;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r4;

     label5:
        throw r5;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void access$000(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handlePasswordExpirationNotification(int)>(i0);

        return;
    }

    static void access$200(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void handlePackagesChanged(int)>(i0);

        return;
    }

    static void access$400(com.android.server.devicepolicy.DevicePolicyManagerService, com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        r1 := @parameter1: com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void resetGlobalProxyLocked(com.android.server.devicepolicy.DevicePolicyManagerService$DevicePolicyData)>(r1);

        return;
    }

    static void access$500(com.android.server.devicepolicy.DevicePolicyManagerService, int)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        int i0;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: void saveSettingsLocked(int)>(i0);

        return;
    }

    static android.app.NotificationManager access$600(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        android.app.NotificationManager $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = specialinvoke r0.<com.android.server.devicepolicy.DevicePolicyManagerService: android.app.NotificationManager getNotificationManager()>();

        return $r1;
    }

    static com.android.server.devicepolicy.DeviceOwner access$800(com.android.server.devicepolicy.DevicePolicyManagerService)
    {
        com.android.server.devicepolicy.DevicePolicyManagerService r0;
        com.android.server.devicepolicy.DeviceOwner $r1;

        r0 := @parameter0: com.android.server.devicepolicy.DevicePolicyManagerService;

        $r1 = r0.<com.android.server.devicepolicy.DevicePolicyManagerService: com.android.server.devicepolicy.DeviceOwner mDeviceOwner>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashSet $r0, $r11, $r15, $r19;
        java.util.Set $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String SYSTEM_PROP_DISABLE_CAMERA> = "sys.secpolicy.camera.disabled";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_SETUP_COMPLETE> = "setup-complete";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ATTR_PERMISSION_PROVIDER> = "permission-provider";

        <com.android.server.devicepolicy.DevicePolicyManagerService: boolean DBG> = 0;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int MONITORING_CERT_NOTIFICATION_ID> = 17039584;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String ACTION_EXPIRED_PASSWORD_NOTIFICATION> = "com.android.server.ACTION_EXPIRED_PASSWORD_NOTIFICATION";

        <com.android.server.devicepolicy.DevicePolicyManagerService: long EXPIRATION_GRACE_PERIOD_MS> = 432000000L;

        <com.android.server.devicepolicy.DevicePolicyManagerService: long MS_PER_DAY> = 86400000L;

        <com.android.server.devicepolicy.DevicePolicyManagerService: int REQUEST_EXPIRE_PASSWORD> = 5571;

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String LOCK_TASK_COMPONENTS_XML> = "lock-task-component";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String DEVICE_POLICIES_XML> = "device_policies.xml";

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String LOG_TAG> = "DevicePolicyManagerService";

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS> = $r0;

        $r1 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>("no_usb_file_transfer");

        $r2 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("no_config_tethering");

        $r3 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>("no_factory_reset");

        $r4 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("no_add_user");

        $r5 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>("no_config_cell_broadcasts");

        $r6 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>("no_config_mobile_networks");

        $r7 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>("no_physical_media");

        $r8 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>("no_unmute_microphone");

        $r9 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>("no_adjust_volume");

        $r10 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set DEVICE_OWNER_USER_RESTRICTIONS>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>("no_sms");

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST> = $r11;

        $r12 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>("default_input_method");

        $r13 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>("skip_first_use_hints");

        $r15 = new java.util.HashSet;

        specialinvoke $r15.<java.util.HashSet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST> = $r15;

        $r16 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST>;

        $r14 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_WHITELIST>;

        interfaceinvoke $r16.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        $r17 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set SECURE_SETTINGS_DEVICEOWNER_WHITELIST>;

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>("location_mode");

        $r19 = new java.util.HashSet;

        specialinvoke $r19.<java.util.HashSet: void <init>()>();

        <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST> = $r19;

        $r20 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r20.<java.util.Set: boolean add(java.lang.Object)>("adb_enabled");

        $r18 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>("auto_time");

        $r22 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>("auto_time_zone");

        $r21 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r21.<java.util.Set: boolean add(java.lang.Object)>("bluetooth_on");

        $r24 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r24.<java.util.Set: boolean add(java.lang.Object)>("data_roaming");

        $r23 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r23.<java.util.Set: boolean add(java.lang.Object)>("development_settings_enabled");

        $r26 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>("mode_ringer");

        $r25 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r25.<java.util.Set: boolean add(java.lang.Object)>("network_preference");

        $r28 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r28.<java.util.Set: boolean add(java.lang.Object)>("usb_mass_storage_enabled");

        $r27 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>("wifi_on");

        $r29 = <com.android.server.devicepolicy.DevicePolicyManagerService: java.util.Set GLOBAL_SETTINGS_WHITELIST>;

        interfaceinvoke $r29.<java.util.Set: boolean add(java.lang.Object)>("wifi_sleep_policy");

        return;
    }
}
