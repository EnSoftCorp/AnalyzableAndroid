class com.android.server.connectivity.Tethering$TetherInterfaceSM extends com.android.internal.util.StateMachine
{
    static final int CMD_TETHER_MODE_DEAD;
    static final int CMD_TETHER_REQUESTED;
    static final int CMD_TETHER_UNREQUESTED;
    static final int CMD_INTERFACE_DOWN;
    static final int CMD_INTERFACE_UP;
    static final int CMD_CELL_DUN_ERROR;
    static final int CMD_IP_FORWARDING_ENABLE_ERROR;
    static final int CMD_IP_FORWARDING_DISABLE_ERROR;
    static final int CMD_START_TETHERING_ERROR;
    static final int CMD_STOP_TETHERING_ERROR;
    static final int CMD_SET_DNS_FORWARDERS_ERROR;
    static final int CMD_TETHER_CONNECTION_CHANGED;
    private com.android.internal.util.State mDefaultState;
    private com.android.internal.util.State mInitialState;
    private com.android.internal.util.State mStartingState;
    private com.android.internal.util.State mTetheredState;
    private com.android.internal.util.State mUnavailableState;
    private boolean mAvailable;
    private boolean mTethered;
    int mLastError;
    java.lang.String mIfaceName;
    java.lang.String mMyUpstreamIfaceName;
    boolean mUsb;
    final com.android.server.connectivity.Tethering this$0;

    void <init>(com.android.server.connectivity.Tethering, java.lang.String, android.os.Looper, boolean)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.server.connectivity.Tethering r1;
        java.lang.String r2;
        android.os.Looper r3;
        boolean z0;
        com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState $r4;
        com.android.internal.util.State $r5, $r7, $r9, $r11, $r12;
        com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState $r6;
        com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState $r8;
        com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState $r10;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter0: com.android.server.connectivity.Tethering;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Looper;

        z0 := @parameter3: boolean;

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0> = r1;

        specialinvoke r0.<com.android.internal.util.StateMachine: void <init>(java.lang.String,android.os.Looper)>(r2, r3);

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: java.lang.String mIfaceName> = r2;

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mUsb> = z0;

        specialinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastError(int)>(0);

        $r4 = new com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState;

        specialinvoke $r4.<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>(r0);

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState> = $r4;

        $r5 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void addState(com.android.internal.util.State)>($r5);

        $r6 = new com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState;

        specialinvoke $r6.<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>(r0);

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mStartingState> = $r6;

        $r7 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mStartingState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void addState(com.android.internal.util.State)>($r7);

        $r8 = new com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState;

        specialinvoke $r8.<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>(r0);

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mTetheredState> = $r8;

        $r9 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mTetheredState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void addState(com.android.internal.util.State)>($r9);

        $r10 = new com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState;

        specialinvoke $r10.<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>(r0);

        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mUnavailableState> = $r10;

        $r11 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mUnavailableState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void addState(com.android.internal.util.State)>($r11);

        $r12 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setInitialState(com.android.internal.util.State)>($r12);

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        java.lang.String r1, $r3, $r6, r35, r36;
        com.android.internal.util.IState r2;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34;
        com.android.internal.util.State $r9, $r10, $r11, $r12;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>()>();

        r1 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: java.lang.String mIfaceName>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        r35 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.IState getCurrentState()>();

        $r9 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState>;

        if r2 != $r9 goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InitialState");

        r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r10 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mStartingState>;

        if r2 != $r10 goto label2;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StartingState");

        r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r11 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mTetheredState>;

        if r2 != $r11 goto label3;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TetheredState");

        r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r12 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mUnavailableState>;

        if r2 != $r12 goto label4;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnavailableState");

        r35 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $z0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mAvailable>;

        if $z0 == 0 goto label5;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Available");

        r35 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $z1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mTethered>;

        if $z1 == 0 goto label6;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Tethered");

        r35 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - lastError =");

        $i0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: int mLastError>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r36 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return r36;
    }

    public int getLastError()
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;
        int $i0;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: int mLastError>;

        exitmonitor r1;

     label2:
        return $i0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setLastError(int)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        int i0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r6;
        com.android.server.connectivity.Tethering $r3, $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: int mLastError> = i0;

        $z0 = virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mUsb>;

        if $z1 == 0 goto label2;

        $r5 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        staticinvoke <com.android.server.connectivity.Tethering: boolean access$600(com.android.server.connectivity.Tethering,boolean)>($r5, 0);

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isAvailable()
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mAvailable>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setAvailable(boolean)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        boolean z0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mAvailable> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isTethered()
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mTethered>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void setTethered(boolean)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        boolean z0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean mTethered> = z0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isErrored()
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.connectivity.Tethering $r3;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r3 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.server.connectivity.Tethering this$0>;

        $r4 = staticinvoke <com.android.server.connectivity.Tethering: java.lang.Object access$100(com.android.server.connectivity.Tethering)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        $i0 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: int mLastError>;

        if $i0 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void setLastErrorAndTransitionToInitialState(int)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        int i0;
        com.android.internal.util.State $r1;

        r0 := @this: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastError(int)>(i0);

        $r1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState>;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>($r1);

        return;
    }

    static void access$700(com.android.server.connectivity.Tethering$TetherInterfaceSM, boolean)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        boolean z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setAvailable(boolean)>(z0);

        return;
    }

    static void access$800(com.android.server.connectivity.Tethering$TetherInterfaceSM, boolean)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        boolean z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setTethered(boolean)>(z0);

        return;
    }

    static void access$1000(com.android.server.connectivity.Tethering$TetherInterfaceSM, int)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        int i0;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setLastError(int)>(i0);

        return;
    }

    static com.android.internal.util.State access$1100(com.android.server.connectivity.Tethering$TetherInterfaceSM)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mStartingState>;

        return $r1;
    }

    static void access$1200(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$1300(com.android.server.connectivity.Tethering$TetherInterfaceSM)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mUnavailableState>;

        return $r1;
    }

    static void access$1400(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$1500(com.android.server.connectivity.Tethering$TetherInterfaceSM)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mInitialState>;

        return $r1;
    }

    static void access$1600(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static com.android.internal.util.State access$1700(com.android.server.connectivity.Tethering$TetherInterfaceSM)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.State $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r1 = r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State mTetheredState>;

        return $r1;
    }

    static void access$1800(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$1900(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2000(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2200(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2400(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2500(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2600(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2700(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    static void access$2800(com.android.server.connectivity.Tethering$TetherInterfaceSM, com.android.internal.util.IState)
    {
        com.android.server.connectivity.Tethering$TetherInterfaceSM r0;
        com.android.internal.util.IState r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering$TetherInterfaceSM;

        r1 := @parameter1: com.android.internal.util.IState;

        virtualinvoke r0.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void transitionTo(com.android.internal.util.IState)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_TETHER_CONNECTION_CHANGED> = 12;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_SET_DNS_FORWARDERS_ERROR> = 11;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_STOP_TETHERING_ERROR> = 10;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_START_TETHERING_ERROR> = 9;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_IP_FORWARDING_DISABLE_ERROR> = 8;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_IP_FORWARDING_ENABLE_ERROR> = 7;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_CELL_DUN_ERROR> = 6;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_INTERFACE_UP> = 5;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_INTERFACE_DOWN> = 4;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_TETHER_UNREQUESTED> = 3;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_TETHER_REQUESTED> = 2;

        <com.android.server.connectivity.Tethering$TetherInterfaceSM: int CMD_TETHER_MODE_DEAD> = 1;

        return;
    }
}
