class com.android.server.pm.PackageManagerService$FileInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    private java.io.File codeFile;
    private java.io.File resourceFile;
    private java.io.File legacyNativeLibraryPath;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$InstallParams r2;
        com.android.server.pm.PackageManagerService$OriginInfo $r3;
        android.content.pm.IPackageInstallObserver2 $r4;
        int $i0;
        java.lang.String $r5, $r8;
        android.content.pm.ManifestDigest $r6;
        android.os.UserHandle $r7;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r3 = r2.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r4 = r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        $i0 = r2.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r5 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r6 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r7 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        $r8 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String)>($r3, $r4, $i0, $r5, $r6, $r7, null, $r8);

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Forward locking only supported in ASEC");

        throw $r9;

     label1:
        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, r3, r4;
        java.lang.String[] r5;
        com.android.server.pm.PackageManagerService$OriginInfo $r6;
        java.io.File $r7, $r8, $r9;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String[];

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r6 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String)>($r6, null, 0, null, null, null, r5, null);

        if r2 == null goto label1;

        $r9 = new java.io.File;

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>(r2);

        goto label2;

     label1:
        $r9 = null;

     label2:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = $r9;

        if r3 == null goto label3;

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r3);

        goto label4;

     label3:
        $r8 = null;

     label4:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = $r8;

        if r4 == null goto label5;

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>(r4);

        goto label6;

     label5:
        $r7 = null;

     label6:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath> = $r7;

        return;
    }

    boolean checkFreeStorage(com.android.internal.app.IMediaContainerService) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        long l0, $l1;
        android.os.storage.StorageManager r2;
        com.android.server.pm.PackageManagerService$OriginInfo $r3;
        java.io.File $r4, $r9;
        java.lang.String $r5, $r6;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r7;
        android.content.Context $r8;
        byte $b2;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        $r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r4 = $r3.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>();

        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String abiOverride>;

        l0 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: long calculateInstalledSize(java.lang.String,boolean,java.lang.String)>($r5, $z0, $r6);

        $r7 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r8 = $r7.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r2 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r8);

        $r9 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $l1 = virtualinvoke r2.<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)>($r9);

        $b2 = l0 cmp $l1;

        if $b2 > 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        boolean z0, $z2;
        java.io.File r2, r3, $r13, $r14, $r15, $r16, $r19, $r24, $r28;
        com.android.internal.content.NativeLibraryHelper$Handle r4;
        java.io.IOException r5, $r26, $r30, r35;
        java.lang.Throwable r6, $r32;
        com.android.server.pm.PackageManagerService$OriginInfo $r7, $r11, $r20, $r23, $r27;
        com.android.server.pm.PackageManagerService $r8;
        com.android.server.pm.PackageInstallerService $r9;
        com.android.server.pm.PackageManagerService$FileInstallArgs$1 $r10, r36;
        java.lang.String $r12, $r17, $r25, $r34;
        java.lang.StringBuilder $r18, $r21, $r22, $r29, $r31, $r33;
        int i4, i5;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        z0 := @parameter1: boolean;

        $r7 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z2 = $r7.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z2 == 0 goto label01;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r19 = $r20.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already staged; skipping copy");

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r25);

        $r23 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r24 = $r23.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = $r24;

        $r27 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r28 = $r27.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = $r28;

        return 1;

     label01:
        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r9 = $r8.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        r2 = virtualinvoke $r9.<com.android.server.pm.PackageInstallerService: java.io.File allocateInternalStageDirLegacy()>();

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = r2;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = r2;

     label02:
        goto label04;

     label03:
        $r30 := @caughtexception;

        r35 = $r30;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create copy file: ");

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r34);

        return -4;

     label04:
        $r10 = new com.android.server.pm.PackageManagerService$FileInstallArgs$1;

        specialinvoke $r10.<com.android.server.pm.PackageManagerService$FileInstallArgs$1: void <init>(com.android.server.pm.PackageManagerService$FileInstallArgs)>(r0);

        r36 = $r10;

        $r11 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r13 = $r11.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r12 = virtualinvoke $r13.<java.io.File: java.lang.String getAbsolutePath()>();

        i4 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: int copyPackage(java.lang.String,com.android.internal.os.IParcelFileDescriptorFactory)>($r12, r36);

        if i4 == 1 goto label05;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", "Failed to copy package");

        return i4;

     label05:
        $r14 = new java.io.File;

        $r16 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        specialinvoke $r14.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, "lib");

        r3 = $r14;

        r4 = null;

     label06:
        $r15 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r4 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File)>($r15);

        $r17 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String abiOverride>;

        i5 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(r4, r3, $r17);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        goto label12;

     label08:
        $r26 := @caughtexception;

        r5 = $r26;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Copying native libraries failed", r5);

        i5 = -110;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        goto label12;

     label10:
        $r32 := @caughtexception;

        r6 = $r32;

     label11:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        throw r6;

     label12:
        return i5;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    boolean doRename(int, android.content.pm.PackageParser$Package, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0;
        android.content.pm.PackageParser$Package r1;
        java.lang.String r2, $r6, $r13, $r14, $r15, $r16, $r17, $r18, $r22, $r24, $r27, $r29;
        java.io.File r3, r4;
        android.system.ErrnoException r5, $r33;
        com.android.server.pm.PackageManagerService $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12;
        boolean $z0;
        java.lang.String[] $r19, $r20, $r26, $r31;
        android.content.pm.ApplicationInfo $r21, $r23, $r25, $r28, $r30, $r32;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.PackageParser$Package;

        r2 := @parameter2: java.lang.String;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        return 0;

     label1:
        r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r7 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r6 = r1.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.io.File access$3400(com.android.server.pm.PackageManagerService,java.lang.String)>($r7, $r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Renaming ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r13);

     label2:
        $r15 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r14 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <android.system.Os: void rename(java.lang.String,java.lang.String)>($r15, $r14);

     label3:
        goto label5;

     label4:
        $r33 := @caughtexception;

        r5 = $r33;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("PackageManager", "Failed to rename", r5);

        return 0;

     label5:
        $z0 = staticinvoke <android.os.SELinux: boolean restoreconRecursive(java.io.File)>(r4);

        if $z0 != 0 goto label6;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", "Failed to restorecon");

        return 0;

     label6:
        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile> = r4;

        r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile> = r4;

        $r16 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>();

        r1.<android.content.pm.PackageParser$Package: java.lang.String codePath> = $r16;

        $r18 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r17 = staticinvoke <android.os.FileUtils: java.lang.String rewriteAfterRename(java.io.File,java.io.File,java.lang.String)>(r3, r4, $r18);

        r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath> = $r17;

        $r20 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        $r19 = staticinvoke <android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>(r3, r4, $r20);

        r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths> = $r19;

        $r21 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r22 = r1.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r21.<android.content.pm.ApplicationInfo: void setCodePath(java.lang.String)>($r22);

        $r23 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r24 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r23.<android.content.pm.ApplicationInfo: void setBaseCodePath(java.lang.String)>($r24);

        $r25 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r26 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r25.<android.content.pm.ApplicationInfo: void setSplitCodePaths(java.lang.String[])>($r26);

        $r30 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r29 = r1.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r30.<android.content.pm.ApplicationInfo: void setResourcePath(java.lang.String)>($r29);

        $r28 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r27 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r28.<android.content.pm.ApplicationInfo: void setBaseResourcePath(java.lang.String)>($r27);

        $r32 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r31 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r32.<android.content.pm.ApplicationInfo: void setSplitResourcePaths(java.lang.String[])>($r31);

        return 1;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        int i0, i1;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

     label1:
        return i0;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    java.lang.String getLegacyNativeLibraryPath()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    private boolean cleanUp()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r16, $r17, $r18, $r19;
        boolean $z0, $z1, $z3, $z4, $z6;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r15;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $r3 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label3;

        $r19 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>($r19);

     label3:
        $r4 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        virtualinvoke $r4.<java.io.File: boolean delete()>();

        $r5 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        if $r5 == null goto label4;

        $r16 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r17 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        $z6 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r16, $r17);

        if $z6 != 0 goto label4;

        $r18 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File resourceFile>;

        virtualinvoke $r18.<java.io.File: boolean delete()>();

     label4:
        $r6 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        if $r6 == null goto label6;

        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $r7 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        $z3 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r8, $r7);

        if $z3 != 0 goto label6;

        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        $z4 = staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>($r9);

        if $z4 != 0 goto label5;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t delete native library directory ");

        $r14 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r15);

     label5:
        $r10 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File legacyNativeLibraryPath>;

        virtualinvoke $r10.<java.io.File: boolean delete()>();

     label6:
        return 1;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.util.List r1;
        android.content.pm.PackageParser$PackageLite r2;
        java.util.Iterator r3;
        java.lang.String r4, r6, $r18;
        java.lang.String[] r5, $r8, $r9, r24;
        int i0, i1, i2;
        java.io.File $r7, $r19, $r21;
        boolean $z1, $z2, $z3;
        com.android.server.pm.PackageManagerService $r10;
        java.lang.Object $r11;
        com.android.server.pm.Installer $r12;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17;
        java.lang.IllegalStateException $r20;
        android.content.pm.PackageParser$PackageParserException $r22;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        r1 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r7 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        if $r7 == null goto label04;

        $r19 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        $z3 = virtualinvoke $r19.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label04;

     label01:
        $r21 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        r2 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>($r21, 0);

        r1 = virtualinvoke r2.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

     label04:
        specialinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>();

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        $r8 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String[] instructionSets>;

        if $r8 != null goto label05;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>("instructionSet == null");

        throw $r20;

     label05:
        $r9 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String[] instructionSets>;

        r24 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String[] access$3500(java.lang.String[])>($r9);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r11;

        r5 = r24;

        i0 = lengthof r5;

        i1 = 0;

     label07:
        if i1 >= i0 goto label09;

        r6 = r5[i1];

        $r10 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r12 = $r10.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i2 = virtualinvoke $r12.<com.android.server.pm.Installer: int rmdex(java.lang.String,java.lang.String)>(r4, r6);

        if i2 >= 0 goto label08;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove dex file for package:  at location ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retcode=");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r18);

     label08:
        i1 = i1 + 1;

        goto label07;

     label09:
        goto label06;

     label10:
        return;

        catch android.content.pm.PackageParser$PackageParserException from label01 to label02 with label03;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        boolean z0;

        r0 := @this: com.android.server.pm.PackageManagerService$FileInstallArgs;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: void cleanUpResourcesLI()>();

        return 1;
    }

    static java.io.File access$3300(com.android.server.pm.PackageManagerService$FileInstallArgs)
    {
        com.android.server.pm.PackageManagerService$FileInstallArgs r0;
        java.io.File $r1;

        r0 := @parameter0: com.android.server.pm.PackageManagerService$FileInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$FileInstallArgs: java.io.File codeFile>;

        return $r1;
    }
}
