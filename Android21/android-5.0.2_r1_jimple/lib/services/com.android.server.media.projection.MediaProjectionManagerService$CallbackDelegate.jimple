class com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate extends java.lang.Object
{
    private java.util.Map mClientCallbacks;
    private java.util.Map mWatcherCallbacks;
    private android.os.Handler mHandler;
    private java.lang.Object mLock;

    public void <init>()
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        java.lang.Object $r1;
        android.os.Handler $r2;
        android.os.Looper $r3;
        android.util.ArrayMap $r4, $r5;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock> = $r1;

        $r2 = new android.os.Handler;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r2.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback,boolean)>($r3, null, 1);

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler> = $r2;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks> = $r5;

        return;
    }

    public void add(android.media.projection.IMediaProjectionCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        android.media.projection.IMediaProjectionCallback r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        android.os.IBinder $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: android.media.projection.IMediaProjectionCallback;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r6 = interfaceinvoke r1.<android.media.projection.IMediaProjectionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void add(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        android.os.IBinder $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r6 = interfaceinvoke r1.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void remove(android.media.projection.IMediaProjectionCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        android.media.projection.IMediaProjectionCallback r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        android.os.IBinder $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: android.media.projection.IMediaProjectionCallback;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r6 = interfaceinvoke r1.<android.media.projection.IMediaProjectionCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void remove(android.media.projection.IMediaProjectionWatcherCallback)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        android.media.projection.IMediaProjectionWatcherCallback r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        java.util.Map $r5;
        android.os.IBinder $r6;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: android.media.projection.IMediaProjectionWatcherCallback;

        $r4 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r6 = interfaceinvoke r1.<android.media.projection.IMediaProjectionWatcherCallback: android.os.IBinder asBinder()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r6);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void dispatchStart(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;
        java.lang.Object r2, $r7, $r10;
        java.util.Iterator r3;
        android.media.projection.IMediaProjectionWatcherCallback r4;
        android.media.projection.MediaProjectionInfo r5;
        java.lang.Throwable r6, $r13;
        java.util.Map $r8;
        java.util.Collection $r9;
        boolean $z0;
        com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback $r11;
        android.os.Handler $r12;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MediaProjectionManagerService", "Tried to dispatch start notification for a null media projection. Ignoring!");

        return;

     label1:
        $r7 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label2:
        $r8 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.projection.IMediaProjectionWatcherCallback) $r10;

        r5 = virtualinvoke r1.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.media.projection.MediaProjectionInfo getProjectionInfo()>();

        $r12 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        $r11 = new com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback;

        specialinvoke $r11.<com.android.server.media.projection.MediaProjectionManagerService$WatcherStartCallback: void <init>(android.media.projection.MediaProjectionInfo,android.media.projection.IMediaProjectionWatcherCallback)>(r5, r4);

        virtualinvoke $r12.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        goto label3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r2;

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void dispatchStop(com.android.server.media.projection.MediaProjectionManagerService$MediaProjection)
    {
        com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate r0;
        com.android.server.media.projection.MediaProjectionManagerService$MediaProjection r1;
        java.lang.Object r2, $r7, $r12, $r16;
        java.util.Iterator r3, r19;
        android.media.projection.IMediaProjectionCallback r4;
        android.media.projection.MediaProjectionInfo r5;
        java.lang.Throwable r6, $r18;
        java.util.Map $r8, $r10;
        java.util.Collection $r9, $r11;
        boolean $z0, $z1;
        com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback $r13;
        android.os.Handler $r14, $r17;
        com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback $r15;
        android.media.projection.IMediaProjectionWatcherCallback r20;

        r0 := @this: com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate;

        r1 := @parameter0: com.android.server.media.projection.MediaProjectionManagerService$MediaProjection;

        if r1 != null goto label01;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("MediaProjectionManagerService", "Tried to dispatch stop notification for a null media projection. Ignoring!");

        return;

     label01:
        $r7 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.lang.Object mLock>;

        r2 = $r7;

        entermonitor $r7;

     label02:
        $r8 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mClientCallbacks>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>();

        r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.media.projection.IMediaProjectionCallback) $r16;

        $r17 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        $r15 = new com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback;

        specialinvoke $r15.<com.android.server.media.projection.MediaProjectionManagerService$ClientStopCallback: void <init>(android.media.projection.IMediaProjectionCallback)>(r4);

        virtualinvoke $r17.<android.os.Handler: boolean post(java.lang.Runnable)>($r15);

        goto label03;

     label04:
        $r10 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: java.util.Map mWatcherCallbacks>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>();

        r19 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r12 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (android.media.projection.IMediaProjectionWatcherCallback) $r12;

        r5 = virtualinvoke r1.<com.android.server.media.projection.MediaProjectionManagerService$MediaProjection: android.media.projection.MediaProjectionInfo getProjectionInfo()>();

        $r14 = r0.<com.android.server.media.projection.MediaProjectionManagerService$CallbackDelegate: android.os.Handler mHandler>;

        $r13 = new com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback;

        specialinvoke $r13.<com.android.server.media.projection.MediaProjectionManagerService$WatcherStopCallback: void <init>(android.media.projection.MediaProjectionInfo,android.media.projection.IMediaProjectionWatcherCallback)>(r5, r20);

        virtualinvoke $r14.<android.os.Handler: boolean post(java.lang.Runnable)>($r13);

        goto label05;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        r6 = $r18;

        exitmonitor r2;

     label09:
        throw r6;

     label10:
        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }
}
