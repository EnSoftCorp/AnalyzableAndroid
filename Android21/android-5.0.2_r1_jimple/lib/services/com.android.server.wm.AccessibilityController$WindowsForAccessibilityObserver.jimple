final class com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final boolean DEBUG;
    private final android.util.SparseArray mTempWindowStates;
    private final java.util.List mOldWindows;
    private final java.util.Set mTempBinderSet;
    private final android.graphics.RectF mTempRectF;
    private final android.graphics.Matrix mTempMatrix;
    private final android.graphics.Point mTempPoint;
    private final android.graphics.Rect mTempRect;
    private final android.graphics.Region mTempRegion;
    private final android.graphics.Region mTempRegion1;
    private final android.content.Context mContext;
    private final com.android.server.wm.WindowManagerService mWindowManagerService;
    private final android.os.Handler mHandler;
    private final android.view.WindowManagerInternal$WindowsForAccessibilityCallback mCallback;
    private final long mRecurringAccessibilityEventsIntervalMillis;

    public void <init>(com.android.server.wm.WindowManagerService, android.view.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowManagerService r1, $r14;
        android.view.WindowManagerInternal$WindowsForAccessibilityCallback r2;
        android.util.SparseArray $r3;
        java.util.ArrayList $r4;
        android.util.ArraySet $r5;
        android.graphics.RectF $r6;
        android.graphics.Matrix $r7;
        android.graphics.Point $r8;
        android.graphics.Rect $r9;
        android.graphics.Region $r10, $r11;
        android.content.Context $r12;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler $r13;
        com.android.server.wm.WindowManagerService$H $r15;
        long $l0;
        android.os.Looper $r16;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        r2 := @parameter1: android.view.WindowManagerInternal$WindowsForAccessibilityCallback;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.SparseArray mTempWindowStates> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows> = $r4;

        $r5 = new android.util.ArraySet;

        specialinvoke $r5.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.Set mTempBinderSet> = $r5;

        $r6 = new android.graphics.RectF;

        specialinvoke $r6.<android.graphics.RectF: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.RectF mTempRectF> = $r6;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Matrix mTempMatrix> = $r7;

        $r8 = new android.graphics.Point;

        specialinvoke $r8.<android.graphics.Point: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Rect mTempRect> = $r9;

        $r10 = new android.graphics.Region;

        specialinvoke $r10.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion> = $r10;

        $r11 = new android.graphics.Region;

        specialinvoke $r11.<android.graphics.Region: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion1> = $r11;

        $r12 = r1.<com.android.server.wm.WindowManagerService: android.content.Context mContext>;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.content.Context mContext> = $r12;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService> = r1;

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.view.WindowManagerInternal$WindowsForAccessibilityCallback mCallback> = r2;

        $r13 = new com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler;

        $r14 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r15 = $r14.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowManagerService$H mH>;

        $r16 = virtualinvoke $r15.<com.android.server.wm.WindowManagerService$H: android.os.Looper getLooper()>();

        specialinvoke $r13.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver$MyHandler: void <init>(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver,android.os.Looper)>(r0, $r16);

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler> = $r13;

        $l0 = staticinvoke <android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>();

        r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: long mRecurringAccessibilityEventsIntervalMillis> = $l0;

        virtualinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeChangedWindows()>();

        return;
    }

    public void scheduleComputeChangedWindowsLocked()
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowManagerService $r1, $r5, $r6;
        com.android.server.wm.WindowState $r2, $r7, $r8;
        android.os.Handler $r3, $r4, $r9;
        boolean $z0;
        long $l0;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r2 = $r1.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r8 = $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        $r6 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r7 = $r6.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mLastFocus>;

        if $r8 == $r7 goto label1;

        $r9 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        virtualinvoke $r9.<android.os.Handler: void removeMessages(int)>(1);

        virtualinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeChangedWindows()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r3.<android.os.Handler: boolean hasMessages(int)>(1);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        $l0 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: long mRecurringAccessibilityEventsIntervalMillis>;

        virtualinvoke $r4.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(1, $l0);

     label2:
        return;
    }

    public void computeChangedWindows()
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        java.util.HashMap r1, $r13;
        android.view.WindowManager r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15;
        android.graphics.Region r3;
        android.util.SparseArray r4;
        java.util.ArrayList r5, $r21;
        java.util.Set r6;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z8, $z11, $z12, $z13, $z14, z17;
        com.android.server.wm.WindowState r7, $r15, r45;
        android.graphics.Rect r8, r46;
        android.view.WindowInfo r9, r47, r48, r49, r50;
        com.android.server.wm.WindowManagerService $r10, $r12;
        java.lang.Throwable r11, $r43;
        android.content.Context $r14;
        android.view.Display $r16;
        java.lang.Object $r17, $r27, $r28, $r30, $r32, $r35, $r40;
        android.graphics.Point $r18, $r19, $r20;
        java.util.List $r22, $r23, $r25, $r29, $r33, $r34, $r37;
        android.os.Message $r24;
        android.os.Handler $r26;
        android.os.IBinder $r31, $r38, $r44;
        android.view.WindowManager$LayoutParams $r39, $r42;
        android.graphics.Region$Op $r41;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r10 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r13 = $r10.<com.android.server.wm.WindowManagerService: java.util.HashMap mWindowMap>;

        r1 = $r13;

        entermonitor $r13;

     label01:
        $r12 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        $r15 = $r12.<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState mCurrentFocus>;

        if $r15 != null goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        $r14 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.content.Context mContext>;

        $r17 = virtualinvoke $r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        r2 = (android.view.WindowManager) $r17;

        $r16 = interfaceinvoke r2.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r19 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        virtualinvoke $r16.<android.view.Display: void getRealSize(android.graphics.Point)>($r19);

        $r18 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        i0 = $r18.<android.graphics.Point: int x>;

        $r20 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Point mTempPoint>;

        i1 = $r20.<android.graphics.Point: int y>;

        r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion>;

        virtualinvoke r3.<android.graphics.Region: boolean set(int,int,int,int)>(0, 0, i0, i1);

        r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.util.SparseArray mTempWindowStates>;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void populateVisibleWindowsOnScreenLocked(android.util.SparseArray)>(r4);

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r5 = $r21;

        r6 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.Set mTempBinderSet>;

        interfaceinvoke r6.<java.util.Set: void clear()>();

        z0 = 0;

        i2 = virtualinvoke r4.<android.util.SparseArray: int size()>();

        i3 = i2 - 1;

     label04:
        if i3 < 0 goto label10;

        $r40 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r7 = (com.android.server.wm.WindowState) $r40;

        r8 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Rect mTempRect>;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeWindowBoundsInScreen(com.android.server.wm.WindowState,android.graphics.Rect)>(r7, r8);

        $r39 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        i4 = $r39.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = i4 & 16;

        if $i7 == 0 goto label05;

        goto label09;

     label05:
        $z12 = virtualinvoke r3.<android.graphics.Region: boolean quickReject(android.graphics.Rect)>(r8);

        if $z12 == 0 goto label06;

        goto label09;

     label06:
        $r42 = r7.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i9 = $r42.<android.view.WindowManager$LayoutParams: int type>;

        $z13 = staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean isReportedWindowType(int)>($i9);

        if $z13 == 0 goto label07;

        r9 = staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.view.WindowInfo obtainPopulatedWindowInfo(com.android.server.wm.WindowState,android.graphics.Rect)>(r7, r8);

        $r44 = r9.<android.view.WindowInfo: android.os.IBinder token>;

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r44);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r9);

        $z14 = virtualinvoke r7.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z14 == 0 goto label07;

        z0 = 1;

     label07:
        $r41 = <android.graphics.Region$Op: android.graphics.Region$Op REVERSE_DIFFERENCE>;

        virtualinvoke r3.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>(r8, r3, $r41);

        $z11 = virtualinvoke r3.<android.graphics.Region: boolean isEmpty()>();

        if $z11 == 0 goto label08;

        goto label10;

     label08:
        $i8 = i4 & 40;

        if $i8 != 0 goto label09;

        goto label10;

     label09:
        i3 = i3 + -1;

        goto label04;

     label10:
        if z0 != 0 goto label13;

        i10 = i2 - 1;

     label11:
        if i10 < 0 goto label13;

        $r35 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i10);

        r45 = (com.android.server.wm.WindowState) $r35;

        $z8 = virtualinvoke r45.<com.android.server.wm.WindowState: boolean isFocused()>();

        if $z8 == 0 goto label12;

        r46 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Rect mTempRect>;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeWindowBoundsInScreen(com.android.server.wm.WindowState,android.graphics.Rect)>(r45, r46);

        r47 = staticinvoke <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.view.WindowInfo obtainPopulatedWindowInfo(com.android.server.wm.WindowState,android.graphics.Rect)>(r45, r46);

        $r38 = r47.<android.view.WindowInfo: android.os.IBinder token>;

        interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r38);

        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r47);

        goto label13;

     label12:
        i10 = i10 + -1;

        goto label11;

     label13:
        i11 = interfaceinvoke r5.<java.util.List: int size()>();

        i12 = 0;

     label14:
        if i12 >= i11 goto label19;

        $r30 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i12);

        r48 = (android.view.WindowInfo) $r30;

        $r31 = r48.<android.view.WindowInfo: android.os.IBinder parentToken>;

        $z5 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r31);

        if $z5 != 0 goto label15;

        r48.<android.view.WindowInfo: android.os.IBinder parentToken> = null;

     label15:
        $r29 = r48.<android.view.WindowInfo: java.util.List childTokens>;

        if $r29 == null goto label18;

        $r34 = r48.<android.view.WindowInfo: java.util.List childTokens>;

        i13 = interfaceinvoke $r34.<java.util.List: int size()>();

        i14 = i13 - 1;

     label16:
        if i14 < 0 goto label18;

        $r33 = r48.<android.view.WindowInfo: java.util.List childTokens>;

        $r32 = interfaceinvoke $r33.<java.util.List: java.lang.Object get(int)>(i14);

        $z6 = interfaceinvoke r6.<java.util.Set: boolean contains(java.lang.Object)>($r32);

        if $z6 != 0 goto label17;

        $r37 = r48.<android.view.WindowInfo: java.util.List childTokens>;

        interfaceinvoke $r37.<java.util.List: java.lang.Object remove(int)>(i14);

     label17:
        i14 = i14 + -1;

        goto label16;

     label18:
        i12 = i12 + 1;

        goto label14;

     label19:
        virtualinvoke r4.<android.util.SparseArray: void clear()>();

        interfaceinvoke r6.<java.util.Set: void clear()>();

        z17 = 0;

        $r22 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        $i5 = interfaceinvoke $r22.<java.util.List: int size()>();

        $i6 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i5 == $i6 goto label20;

        z17 = 1;

        goto label24;

     label20:
        $r23 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        $z2 = interfaceinvoke $r23.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label21;

        $z4 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label24;

     label21:
        i15 = 0;

     label22:
        if i15 >= i11 goto label24;

        $r25 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        $r27 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i15);

        r49 = (android.view.WindowInfo) $r27;

        $r28 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i15);

        r50 = (android.view.WindowInfo) $r28;

        $z3 = specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean windowChangedNoLayer(android.view.WindowInfo,android.view.WindowInfo)>(r49, r50);

        if $z3 == 0 goto label23;

        z17 = 1;

        goto label24;

     label23:
        i15 = i15 + 1;

        goto label22;

     label24:
        if z17 == 0 goto label25;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void cacheWindows(java.util.List)>(r5);

        $r26 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.os.Handler mHandler>;

        $r24 = virtualinvoke $r26.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r5);

        virtualinvoke $r24.<android.os.Message: void sendToTarget()>();

        goto label26;

     label25:
        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void clearAndRecycleWindows(java.util.List)>(r5);

     label26:
        exitmonitor r1;

     label27:
        goto label30;

     label28:
        $r43 := @caughtexception;

        r11 = $r43;

        exitmonitor r1;

     label29:
        throw r11;

     label30:
        return;

        catch java.lang.Throwable from label01 to label02 with label28;
        catch java.lang.Throwable from label03 to label27 with label28;
        catch java.lang.Throwable from label28 to label29 with label28;
    }

    private void computeWindowBoundsInScreen(com.android.server.wm.WindowState, android.graphics.Rect)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        com.android.server.wm.WindowState r1;
        android.graphics.Rect r2, r4, $r7, $r8;
        android.graphics.Region r3;
        android.graphics.RectF r5;
        android.graphics.Matrix r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: com.android.server.wm.WindowState;

        r2 := @parameter1: android.graphics.Rect;

        r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Region mTempRegion1>;

        virtualinvoke r1.<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>(r3);

        r4 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Rect mTempRect>;

        virtualinvoke r3.<android.graphics.Region: boolean getBounds(android.graphics.Rect)>(r4);

        r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.RectF mTempRectF>;

        virtualinvoke r5.<android.graphics.RectF: void set(android.graphics.Rect)>(r4);

        $r7 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i0 = $r7.<android.graphics.Rect: int left>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $r8 = r1.<com.android.server.wm.WindowState: android.graphics.Rect mFrame>;

        $i2 = $r8.<android.graphics.Rect: int top>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r5.<android.graphics.RectF: void offset(float,float)>($f1, $f0);

        r6 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.graphics.Matrix mTempMatrix>;

        staticinvoke <com.android.server.wm.AccessibilityController: void access$500(com.android.server.wm.WindowState,android.graphics.Matrix)>(r1, r6);

        virtualinvoke r6.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r5);

        $f2 = r5.<android.graphics.RectF: float left>;

        $i7 = (int) $f2;

        $f4 = r5.<android.graphics.RectF: float top>;

        $i5 = (int) $f4;

        $f3 = r5.<android.graphics.RectF: float right>;

        $i6 = (int) $f3;

        $f5 = r5.<android.graphics.RectF: float bottom>;

        $i4 = (int) $f5;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i7, $i5, $i6, $i4);

        return;
    }

    private static android.view.WindowInfo obtainPopulatedWindowInfo(com.android.server.wm.WindowState, android.graphics.Rect)
    {
        com.android.server.wm.WindowState r0, r3, r4;
        android.graphics.Rect r1, $r8;
        android.view.WindowInfo r2;
        int i0, i1, $i2, $i3;
        android.view.WindowManager$LayoutParams $r5;
        android.view.IWindow $r6, $r14, $r16;
        android.os.IBinder $r7, $r15, $r18;
        boolean $z0;
        com.android.server.wm.WindowList $r9, $r12;
        java.util.List $r10, $r13;
        java.lang.Object $r11;
        java.util.ArrayList $r17;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Rect;

        r2 = staticinvoke <android.view.WindowInfo: android.view.WindowInfo obtain()>();

        $r5 = r0.<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r5.<android.view.WindowManager$LayoutParams: int type>;

        r2.<android.view.WindowInfo: int type> = $i2;

        $i3 = r0.<com.android.server.wm.WindowState: int mLayer>;

        r2.<android.view.WindowInfo: int layer> = $i3;

        $r6 = r0.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r7 = interfaceinvoke $r6.<android.view.IWindow: android.os.IBinder asBinder()>();

        r2.<android.view.WindowInfo: android.os.IBinder token> = $r7;

        r3 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowState mAttachedWindow>;

        if r3 == null goto label1;

        $r16 = r3.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r18 = interfaceinvoke $r16.<android.view.IWindow: android.os.IBinder asBinder()>();

        r2.<android.view.WindowInfo: android.os.IBinder parentToken> = $r18;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.wm.WindowState: boolean isFocused()>();

        r2.<android.view.WindowInfo: boolean focused> = $z0;

        $r8 = r2.<android.view.WindowInfo: android.graphics.Rect boundsInScreen>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r9 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        i0 = virtualinvoke $r9.<com.android.server.wm.WindowList: int size()>();

        if i0 <= 0 goto label4;

        $r10 = r2.<android.view.WindowInfo: java.util.List childTokens>;

        if $r10 != null goto label2;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r2.<android.view.WindowInfo: java.util.List childTokens> = $r17;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label4;

        $r12 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowList mChildWindows>;

        $r11 = virtualinvoke $r12.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r11;

        $r13 = r2.<android.view.WindowInfo: java.util.List childTokens>;

        $r14 = r4.<com.android.server.wm.WindowState: android.view.IWindow mClient>;

        $r15 = interfaceinvoke $r14.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r15);

        i1 = i1 + 1;

        goto label3;

     label4:
        return r2;
    }

    private void cacheWindows(java.util.List)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        java.util.List r1, $r3, $r5, $r7;
        int i0, i1, i2, i3;
        android.view.WindowInfo r2, $r6, $r9;
        java.lang.Object $r4, $r8;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: java.util.List;

        $r3 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r7 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i1);

        $r9 = (android.view.WindowInfo) $r8;

        virtualinvoke $r9.<android.view.WindowInfo: void recycle()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        i3 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label3:
        if i2 >= i3 goto label4;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.view.WindowInfo) $r4;

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.util.List mOldWindows>;

        $r6 = staticinvoke <android.view.WindowInfo: android.view.WindowInfo obtain(android.view.WindowInfo)>(r2);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    private boolean windowChangedNoLayer(android.view.WindowInfo, android.view.WindowInfo)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.view.WindowInfo r1, r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.os.IBinder $r3, $r4, $r5, $r6, $r7, $r8, $r15, $r16;
        android.graphics.Rect $r9, $r10;
        java.util.List $r11, $r12, $r13, $r14;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: android.view.WindowInfo;

        r2 := @parameter1: android.view.WindowInfo;

        if r1 != r2 goto label01;

        return 0;

     label01:
        if r1 != null goto label02;

        return 1;

     label02:
        if r2 != null goto label03;

        return 1;

     label03:
        $i1 = r1.<android.view.WindowInfo: int type>;

        $i0 = r2.<android.view.WindowInfo: int type>;

        if $i1 == $i0 goto label04;

        return 1;

     label04:
        $z1 = r1.<android.view.WindowInfo: boolean focused>;

        $z0 = r2.<android.view.WindowInfo: boolean focused>;

        if $z1 == $z0 goto label05;

        return 1;

     label05:
        $r3 = r1.<android.view.WindowInfo: android.os.IBinder token>;

        if $r3 != null goto label06;

        $r16 = r2.<android.view.WindowInfo: android.os.IBinder token>;

        if $r16 == null goto label07;

        return 1;

     label06:
        $r5 = r1.<android.view.WindowInfo: android.os.IBinder token>;

        $r4 = r2.<android.view.WindowInfo: android.os.IBinder token>;

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label07;

        return 1;

     label07:
        $r6 = r1.<android.view.WindowInfo: android.os.IBinder parentToken>;

        if $r6 != null goto label08;

        $r15 = r2.<android.view.WindowInfo: android.os.IBinder parentToken>;

        if $r15 == null goto label09;

        return 1;

     label08:
        $r8 = r1.<android.view.WindowInfo: android.os.IBinder parentToken>;

        $r7 = r2.<android.view.WindowInfo: android.os.IBinder parentToken>;

        $z3 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 != 0 goto label09;

        return 1;

     label09:
        $r10 = r1.<android.view.WindowInfo: android.graphics.Rect boundsInScreen>;

        $r9 = r2.<android.view.WindowInfo: android.graphics.Rect boundsInScreen>;

        $z4 = virtualinvoke $r10.<android.graphics.Rect: boolean equals(java.lang.Object)>($r9);

        if $z4 != 0 goto label10;

        return 1;

     label10:
        $r12 = r1.<android.view.WindowInfo: java.util.List childTokens>;

        if $r12 == null goto label11;

        $r11 = r2.<android.view.WindowInfo: java.util.List childTokens>;

        if $r11 == null goto label11;

        $r13 = r1.<android.view.WindowInfo: java.util.List childTokens>;

        $r14 = r2.<android.view.WindowInfo: java.util.List childTokens>;

        $z5 = interfaceinvoke $r13.<java.util.List: boolean equals(java.lang.Object)>($r14);

        if $z5 != 0 goto label11;

        return 1;

     label11:
        return 0;
    }

    private void clearAndRecycleWindows(java.util.List)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        java.util.List r1;
        int i0, i1;
        java.lang.Object $r2;
        android.view.WindowInfo $r3;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object remove(int)>(i1);

        $r3 = (android.view.WindowInfo) $r2;

        virtualinvoke $r3.<android.view.WindowInfo: void recycle()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    private static boolean isReportedWindowType(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 2029 goto label1;

        if i0 == 2013 goto label1;

        if i0 == 2021 goto label1;

        if i0 == 2026 goto label1;

        if i0 == 2016 goto label1;

        if i0 == 2022 goto label1;

        if i0 == 2018 goto label1;

        if i0 == 2025 goto label1;

        if i0 == 2027 goto label1;

        if i0 == 1004 goto label1;

        if i0 == 2015 goto label1;

        if i0 == 2030 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void populateVisibleWindowsOnScreenLocked(android.util.SparseArray)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.util.SparseArray r1;
        com.android.server.wm.DisplayContent r2;
        com.android.server.wm.WindowList r3;
        int i0, i1, $i2;
        com.android.server.wm.WindowState r4;
        com.android.server.wm.WindowManagerService $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter0: android.util.SparseArray;

        $r5 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: com.android.server.wm.WindowManagerService mWindowManagerService>;

        r2 = virtualinvoke $r5.<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()>();

        r3 = virtualinvoke r2.<com.android.server.wm.DisplayContent: com.android.server.wm.WindowList getWindowList()>();

        i0 = virtualinvoke r3.<com.android.server.wm.WindowList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = virtualinvoke r3.<com.android.server.wm.WindowList: java.lang.Object get(int)>(i1);

        r4 = (com.android.server.wm.WindowState) $r6;

        $z0 = virtualinvoke r4.<com.android.server.wm.WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label2;

        $i2 = r4.<com.android.server.wm.WindowState: int mLayer>;

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, r4);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    static android.view.WindowManagerInternal$WindowsForAccessibilityCallback access$1600(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        android.view.WindowManagerInternal$WindowsForAccessibilityCallback $r1;

        r0 := @parameter0: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r1 = r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: android.view.WindowManagerInternal$WindowsForAccessibilityCallback mCallback>;

        return $r1;
    }

    static void access$1700(com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver, java.util.List)
    {
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver r0;
        java.util.List r1;

        r0 := @parameter0: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        r1 := @parameter1: java.util.List;

        specialinvoke r0.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void clearAndRecycleWindows(java.util.List)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: boolean DEBUG> = 0;

        <com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: java.lang.String LOG_TAG> = "WindowsForAccessibilityObserver";

        return;
    }
}
