public class com.android.server.job.controllers.IdleController extends com.android.server.job.controllers.StateController
{
    private static final java.lang.String TAG;
    private static final long INACTIVITY_IDLE_THRESHOLD;
    private static final long IDLE_WINDOW_SLOP;
    private static final java.lang.String ACTION_TRIGGER_IDLE;
    final java.util.ArrayList mTrackedTasks;
    com.android.server.job.controllers.IdleController$IdlenessTracker mIdleTracker;
    private static java.lang.Object sCreationLock;
    private static volatile com.android.server.job.controllers.IdleController sController;

    public static com.android.server.job.controllers.IdleController get(com.android.server.job.JobSchedulerService)
    {
        com.android.server.job.JobSchedulerService r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        com.android.server.job.controllers.IdleController $r4, $r5, $r6;
        android.content.Context $r7;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        $r3 = <com.android.server.job.controllers.IdleController: java.lang.Object sCreationLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = <com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController sController>;

        if $r4 != null goto label2;

        $r6 = new com.android.server.job.controllers.IdleController;

        $r7 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        specialinvoke $r6.<com.android.server.job.controllers.IdleController: void <init>(com.android.server.job.StateChangedListener,android.content.Context)>(r0, $r7);

        <com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController sController> = $r6;

     label2:
        $r5 = <com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController sController>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void <init>(com.android.server.job.StateChangedListener, android.content.Context)
    {
        com.android.server.job.controllers.IdleController r0;
        com.android.server.job.StateChangedListener r1;
        android.content.Context r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.server.job.controllers.IdleController;

        r1 := @parameter0: com.android.server.job.StateChangedListener;

        r2 := @parameter1: android.content.Context;

        specialinvoke r0.<com.android.server.job.controllers.StateController: void <init>(com.android.server.job.StateChangedListener,android.content.Context)>(r1, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks> = $r3;

        specialinvoke r0.<com.android.server.job.controllers.IdleController: void initIdleStateTracking()>();

        return;
    }

    public void maybeStartTrackingJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.IdleController r0;
        com.android.server.job.controllers.JobStatus r1;
        java.util.ArrayList r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z2;
        com.android.server.job.controllers.IdleController$IdlenessTracker $r6;
        java.util.concurrent.atomic.AtomicBoolean $r7;

        r0 := @this: com.android.server.job.controllers.IdleController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $z0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        if $z0 == 0 goto label5;

        $r4 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r7 = r1.<com.android.server.job.controllers.JobStatus: java.util.concurrent.atomic.AtomicBoolean idleConstraintSatisfied>;

        $r6 = r0.<com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController$IdlenessTracker mIdleTracker>;

        $z2 = virtualinvoke $r6.<com.android.server.job.controllers.IdleController$IdlenessTracker: boolean isIdle()>();

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>($z2);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void maybeStopTrackingJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.controllers.IdleController r0;
        com.android.server.job.controllers.JobStatus r1;
        java.util.ArrayList r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: com.android.server.job.controllers.IdleController;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r4 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void reportNewIdleState(boolean)
    {
        com.android.server.job.controllers.IdleController r0;
        boolean z0, $z1;
        java.util.ArrayList r1, $r5, $r6;
        java.util.Iterator r2;
        com.android.server.job.controllers.JobStatus r3;
        java.lang.Throwable r4, $r10;
        com.android.server.job.StateChangedListener $r7;
        java.lang.Object $r8;
        java.util.concurrent.atomic.AtomicBoolean $r9;

        r0 := @this: com.android.server.job.controllers.IdleController;

        z0 := @parameter0: boolean;

        $r5 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        r2 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.job.controllers.JobStatus) $r8;

        $r9 = r3.<com.android.server.job.controllers.JobStatus: java.util.concurrent.atomic.AtomicBoolean idleConstraintSatisfied>;

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(z0);

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        $r7 = r0.<com.android.server.job.controllers.IdleController: com.android.server.job.StateChangedListener mStateChangedListener>;

        interfaceinvoke $r7.<com.android.server.job.StateChangedListener: void onControllerStateChanged()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void initIdleStateTracking()
    {
        com.android.server.job.controllers.IdleController r0;
        com.android.server.job.controllers.IdleController$IdlenessTracker $r1, $r2;

        r0 := @this: com.android.server.job.controllers.IdleController;

        $r1 = new com.android.server.job.controllers.IdleController$IdlenessTracker;

        specialinvoke $r1.<com.android.server.job.controllers.IdleController$IdlenessTracker: void <init>(com.android.server.job.controllers.IdleController)>(r0);

        r0.<com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController$IdlenessTracker mIdleTracker> = $r1;

        $r2 = r0.<com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController$IdlenessTracker mIdleTracker>;

        virtualinvoke $r2.<com.android.server.job.controllers.IdleController$IdlenessTracker: void startTracking()>();

        return;
    }

    public void dumpControllerState(java.io.PrintWriter)
    {
        com.android.server.job.controllers.IdleController r0;
        java.io.PrintWriter r1;
        java.util.ArrayList r2, $r5, $r7, $r8, $r9;
        int i0, $i1, $i2, $i3;
        com.android.server.job.controllers.JobStatus r3;
        java.lang.Throwable r4, $r14;
        com.android.server.job.controllers.IdleController$IdlenessTracker $r6;
        boolean $z0;
        java.lang.Object $r10;
        java.lang.String $r11, $r12, $r13;

        r0 := @this: com.android.server.job.controllers.IdleController;

        r1 := @parameter0: java.io.PrintWriter;

        $r5 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Idle: ");

        $r6 = r0.<com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController$IdlenessTracker mIdleTracker>;

        $z0 = virtualinvoke $r6.<com.android.server.job.controllers.IdleController$IdlenessTracker: boolean isIdle()>();

        if $z0 == 0 goto label2;

        $r12 = "true";

        goto label3;

     label2:
        $r12 = "false";

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        $r7 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i1);

        i0 = 0;

     label4:
        $r8 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if i0 >= $i2 goto label5;

        $r9 = r0.<com.android.server.job.controllers.IdleController: java.util.ArrayList mTrackedTasks>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.job.controllers.JobStatus) $r10;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $i3 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3);

        $r13 = virtualinvoke $r11.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r13);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("..");

        i0 = i0 + 1;

        goto label4;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label8:
        throw r4;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <com.android.server.job.controllers.IdleController: java.lang.String ACTION_TRIGGER_IDLE> = "com.android.server.task.controllers.IdleController.ACTION_TRIGGER_IDLE";

        <com.android.server.job.controllers.IdleController: long IDLE_WINDOW_SLOP> = 300000L;

        <com.android.server.job.controllers.IdleController: long INACTIVITY_IDLE_THRESHOLD> = 4260000L;

        <com.android.server.job.controllers.IdleController: java.lang.String TAG> = "IdleController";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.server.job.controllers.IdleController: java.lang.Object sCreationLock> = $r0;

        return;
    }
}
