public final class com.android.server.pm.SELinuxMMAC extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG_POLICY;
    private static final boolean DEBUG_POLICY_INSTALL;
    private static java.util.HashMap sSigSeinfo;
    private static java.lang.String sDefaultSeinfo;
    private static final java.lang.String DATA_VERSION_FILE;
    private static final java.lang.String BASE_VERSION_FILE;
    private static final boolean USE_OVERRIDE_POLICY;
    private static final java.lang.String DATA_MAC_PERMISSIONS;
    private static final java.lang.String BASE_MAC_PERMISSIONS;
    private static final java.lang.String MAC_PERMISSIONS;
    private static final java.lang.String DATA_SEAPP_CONTEXTS;
    private static final java.lang.String BASE_SEAPP_CONTEXTS;
    private static final java.lang.String SEAPP_CONTEXTS;
    private static final java.lang.String SEAPP_HASH_FILE;

    public void <init>()
    {
        com.android.server.pm.SELinuxMMAC r0;

        r0 := @this: com.android.server.pm.SELinuxMMAC;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void flushInstallPolicy()
    {
        java.util.HashMap $r0;

        $r0 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        virtualinvoke $r0.<java.util.HashMap: void clear()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String sDefaultSeinfo> = null;

        return;
    }

    public static boolean readInstallPolicy()
    {
        java.util.HashMap r0, $r9;
        java.lang.String r1, r4, r5, $r11, $r14, $r15, $r17, $r18, $r22, $r26, $r28, $r32, $r33, $r37, $r39, $r43;
        java.io.FileReader r2, $r10;
        org.xmlpull.v1.XmlPullParser r3;
        android.content.pm.Signature r6, $r19;
        java.lang.IllegalArgumentException r7, $r36;
        java.lang.Throwable r8, $r42;
        java.lang.StringBuilder $r12, $r13, $r16, $r21, $r23, $r25, $r27, $r29, $r31, $r34, $r35, $r38, $r40, $r41, $r44;
        int $i1;
        boolean $z0, $z1, $z2, z3, z4;
        java.io.IOException $r24, r47;
        org.xmlpull.v1.XmlPullParserException $r30, r46;
        com.android.server.pm.SELinuxMMAC$Policy r45;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0 = $r9;

        r1 = null;

        r2 = null;

     label01:
        $r10 = new java.io.FileReader;

        $r11 = <com.android.server.pm.SELinuxMMAC: java.lang.String MAC_PERMISSIONS>;

        specialinvoke $r10.<java.io.FileReader: void <init>(java.lang.String)>($r11);

        r2 = $r10;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using policy file ");

        $r14 = <com.android.server.pm.SELinuxMMAC: java.lang.String MAC_PERMISSIONS>;

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("SELinuxMMAC", $r15);

        r3 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r2);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r3, "policy");

     label02:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r3);

        $i1 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i1 != 1 goto label03;

        goto label12;

     label03:
        r4 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r17 = "signer";

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label09;

        r5 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "signature");

        if r5 != null goto label04;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<signer> without signature at ");

        $r22 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r26);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r3);

        goto label02;

     label04:
        $r19 = new android.content.pm.Signature;

        specialinvoke $r19.<android.content.pm.Signature: void <init>(java.lang.String)>(r5);

        r6 = $r19;

     label05:
        goto label07;

     label06:
        $r36 := @caughtexception;

        r7 = $r36;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<signer> with bad signature at ");

        $r39 = interfaceinvoke r3.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r43, r7);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r3);

        goto label02;

     label07:
        r45 = staticinvoke <com.android.server.pm.SELinuxMMAC: com.android.server.pm.SELinuxMMAC$Policy readPolicyTags(org.xmlpull.v1.XmlPullParser)>(r3);

        $z2 = virtualinvoke r45.<com.android.server.pm.SELinuxMMAC$Policy: boolean isValid()>();

        if $z2 == 0 goto label08;

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r45);

     label08:
        goto label11;

     label09:
        $r18 = "default";

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label10;

        r1 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser)>(r3);

        goto label11;

     label10:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r3);

     label11:
        goto label02;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label19;

     label13:
        $r30 := @caughtexception;

        r46 = $r30;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got exception parsing ");

        $r33 = <com.android.server.pm.SELinuxMMAC: java.lang.String MAC_PERMISSIONS>;

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r37, r46);

        z3 = 0;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        return z3;

     label15:
        $r24 := @caughtexception;

        r47 = $r24;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got exception parsing ");

        $r28 = <com.android.server.pm.SELinuxMMAC: java.lang.String MAC_PERMISSIONS>;

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r32, r47);

        z4 = 0;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        return z4;

     label17:
        $r42 := @caughtexception;

        r8 = $r42;

     label18:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r8;

     label19:
        staticinvoke <com.android.server.pm.SELinuxMMAC: void flushInstallPolicy()>();

        <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo> = r0;

        <com.android.server.pm.SELinuxMMAC: java.lang.String sDefaultSeinfo> = r1;

        return 1;

        catch java.lang.IllegalArgumentException from label04 to label05 with label06;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label12 with label13;
        catch java.io.IOException from label01 to label12 with label15;
        catch java.lang.Throwable from label01 to label12 with label17;
        catch java.lang.Throwable from label13 to label14 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private static com.android.server.pm.SELinuxMMAC$Policy readPolicyTags(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, i1, $i2, $i4;
        com.android.server.pm.SELinuxMMAC$Policy r1, $r5;
        java.lang.String r2, r3, r4, $r6, $r7, $r9, $r11, r13;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r8, $r10, $r12;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        $r5 = new com.android.server.pm.SELinuxMMAC$Policy;

        specialinvoke $r5.<com.android.server.pm.SELinuxMMAC$Policy: void <init>()>();

        r1 = $r5;

     label01:
        $i2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i2;

        if $i2 == 1 goto label10;

        if i0 != 3 goto label02;

        $i4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i4 <= i1 goto label10;

     label02:
        if i0 == 3 goto label01;

        if i0 != 4 goto label03;

        goto label01;

     label03:
        r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = "seinfo";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label05;

        r3 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String parseSeinfo(org.xmlpull.v1.XmlPullParser)>(r0);

        if r3 == null goto label04;

        virtualinvoke r1.<com.android.server.pm.SELinuxMMAC$Policy: void putSeinfo(java.lang.String)>(r3);

     label04:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label09;

     label05:
        $r7 = "package";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label08;

        r13 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "name");

        $z2 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean validatePackageName(java.lang.String)>(r13);

        if $z2 != 0 goto label06;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<package> without valid name at ");

        $r9 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r11);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label01;

     label06:
        r4 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser)>(r0);

        if r4 == null goto label07;

        virtualinvoke r1.<com.android.server.pm.SELinuxMMAC$Policy: void putPkg(java.lang.String,java.lang.String)>(r13, r4);

     label07:
        goto label09;

     label08:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r0);

     label09:
        goto label01;

     label10:
        return r1;
    }

    private static java.lang.String readSeinfoTag(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.xmlpull.v1.XmlPullParser r0;
        int i0, i1, $i2, $i3;
        java.lang.String r1, r2, $r3;
        boolean $z0;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        i1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        r1 = null;

     label1:
        $i2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int next()>();

        i0 = $i2;

        if $i2 == 1 goto label5;

        if i0 != 3 goto label2;

        $i3 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i3 <= i1 goto label5;

     label2:
        if i0 == 3 goto label1;

        if i0 != 4 goto label3;

        goto label1;

     label3:
        r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r3 = "seinfo";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label4;

        r1 = staticinvoke <com.android.server.pm.SELinuxMMAC: java.lang.String parseSeinfo(org.xmlpull.v1.XmlPullParser)>(r0);

     label4:
        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r0);

        goto label1;

     label5:
        return r1;
    }

    private static java.lang.String parseSeinfo(org.xmlpull.v1.XmlPullParser)
    {
        org.xmlpull.v1.XmlPullParser r0;
        java.lang.String r1, $r4, $r6;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r5;

        r0 := @parameter0: org.xmlpull.v1.XmlPullParser;

        r1 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "value");

        $z0 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean validateValue(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<seinfo> without valid value at ");

        $r4 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r6);

        r1 = null;

     label1:
        return r1;
    }

    private static boolean validatePackageName(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        boolean z0, z1;
        char c2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return 0;

     label01:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        z0 = 0;

        z1 = 1;

        i1 = 0;

     label02:
        if i1 >= i0 goto label10;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 < 97 goto label03;

        if c2 <= 122 goto label04;

     label03:
        if c2 < 65 goto label05;

        if c2 > 90 goto label05;

     label04:
        z1 = 0;

        goto label09;

     label05:
        if z1 != 0 goto label07;

        if c2 < 48 goto label06;

        if c2 <= 57 goto label09;

     label06:
        if c2 != 95 goto label07;

        goto label09;

     label07:
        if c2 != 46 goto label08;

        z0 = 1;

        z1 = 1;

        goto label09;

     label08:
        return 0;

     label09:
        i1 = i1 + 1;

        goto label02;

     label10:
        return z0;
    }

    private static boolean validateValue(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1;
        char c2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label2;

        return 0;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label7;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 < 97 goto label4;

        if c2 <= 122 goto label6;

     label4:
        if c2 < 65 goto label5;

        if c2 <= 90 goto label6;

     label5:
        if c2 == 95 goto label6;

        return 0;

     label6:
        i1 = i1 + 1;

        goto label3;

     label7:
        return 1;
    }

    public static boolean assignSeinfoValue(android.content.pm.PackageParser$Package)
    {
        android.content.pm.PackageParser$Package r0;
        android.content.pm.Signature[] r1;
        int i0, i1;
        android.content.pm.Signature r2;
        com.android.server.pm.SELinuxMMAC$Policy r3;
        java.lang.String r4, $r5, $r7, $r10;
        android.content.pm.ApplicationInfo $r6, $r11;
        boolean $z0;
        java.util.HashMap $r8;
        java.lang.Object $r9;

        r0 := @parameter0: android.content.pm.PackageParser$Package;

        r1 = r0.<android.content.pm.PackageParser$Package: android.content.pm.Signature[] mSignatures>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if r2 != null goto label2;

        goto label3;

     label2:
        $r8 = <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r3 = (com.android.server.pm.SELinuxMMAC$Policy) $r9;

        if r3 == null goto label3;

        $r10 = r0.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        r4 = virtualinvoke r3.<com.android.server.pm.SELinuxMMAC$Policy: java.lang.String checkPolicy(java.lang.String)>($r10);

        if r4 == null goto label3;

        $r11 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r11.<android.content.pm.ApplicationInfo: java.lang.String seinfo> = r4;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r6 = r0.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r5 = <com.android.server.pm.SELinuxMMAC: java.lang.String sDefaultSeinfo>;

        $r6.<android.content.pm.ApplicationInfo: java.lang.String seinfo> = $r5;

        $r7 = <com.android.server.pm.SELinuxMMAC: java.lang.String sDefaultSeinfo>;

        if $r7 == null goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    public static boolean shouldRestorecon()
    {
        java.io.IOException r0, $r3, $r4;
        java.lang.String $r1, $r2, $r7, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        byte[] r11, r12;

     label01:
        $r1 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_CONTEXTS>;

        r11 = staticinvoke <com.android.server.pm.SELinuxMMAC: byte[] returnHash(java.lang.String)>($r1);

     label02:
        goto label04;

     label03:
        $r3 := @caughtexception;

        r0 = $r3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", "Error with hashing seapp_contexts.", r0);

        return 0;

     label04:
        r12 = null;

     label05:
        $r2 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_HASH_FILE>;

        r12 = staticinvoke <libcore.io.IoUtils: byte[] readFileAsByteArray(java.lang.String)>($r2);

     label06:
        goto label08;

     label07:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error opening ");

        $r7 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_HASH_FILE>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Assuming first boot.");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SELinuxMMAC", $r10);

     label08:
        if r12 == null goto label09;

        $z0 = staticinvoke <java.security.MessageDigest: boolean isEqual(byte[],byte[])>(r12, r11);

        if $z0 != 0 goto label10;

     label09:
        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        return $z1;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
    }

    public static void setRestoreconDone()
    {
        byte[] r0;
        java.lang.String $r1, $r3, $r7, $r9;
        java.io.File $r2;
        java.io.IOException $r4, r10;
        java.lang.StringBuilder $r5, $r6, $r8;

     label1:
        $r1 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_CONTEXTS>;

        r0 = staticinvoke <com.android.server.pm.SELinuxMMAC: byte[] returnHash(java.lang.String)>($r1);

        $r2 = new java.io.File;

        $r3 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_HASH_FILE>;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r3);

        staticinvoke <com.android.server.pm.SELinuxMMAC: void dumpHash(java.io.File,byte[])>($r2, r0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r10 = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error with saving hash to ");

        $r7 = <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_HASH_FILE>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", $r9, r10);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void dumpHash(java.io.File, byte[]) throws java.io.IOException
    {
        java.io.File r0, r3, $r5;
        byte[] r1;
        java.io.FileOutputStream r2, $r6;
        java.lang.Throwable r4, $r14;
        java.io.FileDescriptor $r7;
        boolean $z1;
        java.io.IOException $r8;
        java.lang.StringBuilder $r9, $r11, $r13;
        java.lang.String $r10, $r12;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: byte[];

        r2 = null;

        r3 = null;

     label1:
        $r5 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        r3 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("seapp_hash", ".journal", $r5);

        virtualinvoke r3.<java.io.File: boolean setReadable(boolean)>(1);

        $r6 = new java.io.FileOutputStream;

        specialinvoke $r6.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        r2 = $r6;

        virtualinvoke r2.<java.io.FileOutputStream: void write(byte[])>(r1);

        $r7 = virtualinvoke r2.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        virtualinvoke $r7.<java.io.FileDescriptor: void sync()>();

        $z1 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r0);

        if $z1 != 0 goto label2;

        $r8 = new java.io.IOException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure renaming ");

        $r10 = virtualinvoke r0.<java.io.File: java.lang.String getCanonicalPath()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label2:
        if r3 == null goto label3;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label3:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label7;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

     label5:
        if r3 == null goto label6;

        virtualinvoke r3.<java.io.File: boolean delete()>();

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static byte[] returnHash(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        byte[] r1, $r3;
        java.security.MessageDigest $r2;
        java.security.NoSuchAlgorithmException $r4, r6;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        r1 = staticinvoke <libcore.io.IoUtils: byte[] readFileAsByteArray(java.lang.String)>(r0);

        $r2 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $r3 = virtualinvoke $r2.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r6);

        throw $r5;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private static boolean useOverridePolicy()
    {
        java.lang.String r0, r1, $r2, $r10;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.io.IOException $r11, r14;
        java.io.FileNotFoundException $r12;

     label1:
        $r2 = <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_VERSION_FILE>;

        r0 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>($r2);

        r1 = staticinvoke <libcore.io.IoUtils: java.lang.String readFileAsString(java.lang.String)>("/selinux_version");

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override policy version \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' doesn\'t match ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("base version \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Skipping override policy files.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("SELinuxMMAC", $r10);

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        goto label7;

     label6:
        $r11 := @caughtexception;

        r14 = $r11;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("SELinuxMMAC", "Skipping override policy files.", r14);

     label7:
        return 0;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r21, $r22, $r25, $r26;
        java.io.File $r2, $r7, $r12, $r19, $r24;
        java.lang.String $r5, $r10, $r15, $r17, $r20, $r23, $r27, $r28;
        boolean $z0, $z1, $z2;

        <com.android.server.pm.SELinuxMMAC: java.lang.String BASE_SEAPP_CONTEXTS> = "/seapp_contexts";

        <com.android.server.pm.SELinuxMMAC: java.lang.String BASE_VERSION_FILE> = "/selinux_version";

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY_INSTALL> = 0;

        <com.android.server.pm.SELinuxMMAC: boolean DEBUG_POLICY> = 0;

        <com.android.server.pm.SELinuxMMAC: java.lang.String TAG> = "SELinuxMMAC";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.android.server.pm.SELinuxMMAC: java.util.HashMap sSigSeinfo> = $r0;

        <com.android.server.pm.SELinuxMMAC: java.lang.String sDefaultSeinfo> = null;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/security/current/selinux_version");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_VERSION_FILE> = $r5;

        $z0 = staticinvoke <com.android.server.pm.SELinuxMMAC: boolean useOverridePolicy()>();

        <com.android.server.pm.SELinuxMMAC: boolean USE_OVERRIDE_POLICY> = $z0;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/security/current/mac_permissions.xml");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_MAC_PERMISSIONS> = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = staticinvoke <android.os.Environment: java.io.File getRootDirectory()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/etc/security/mac_permissions.xml");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String BASE_MAC_PERMISSIONS> = $r15;

        $z1 = <com.android.server.pm.SELinuxMMAC: boolean USE_OVERRIDE_POLICY>;

        if $z1 == 0 goto label1;

        $r17 = <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_MAC_PERMISSIONS>;

        goto label2;

     label1:
        $r17 = <com.android.server.pm.SELinuxMMAC: java.lang.String BASE_MAC_PERMISSIONS>;

     label2:
        <com.android.server.pm.SELinuxMMAC: java.lang.String MAC_PERMISSIONS> = $r17;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/security/current/seapp_contexts");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_SEAPP_CONTEXTS> = $r20;

        $z2 = <com.android.server.pm.SELinuxMMAC: boolean USE_OVERRIDE_POLICY>;

        if $z2 == 0 goto label3;

        $r27 = <com.android.server.pm.SELinuxMMAC: java.lang.String DATA_SEAPP_CONTEXTS>;

        goto label4;

     label3:
        $r27 = "/seapp_contexts";

     label4:
        <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_CONTEXTS> = $r27;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r23 = virtualinvoke $r24.<java.io.File: java.lang.String toString()>();

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/seapp_hash");

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.server.pm.SELinuxMMAC: java.lang.String SEAPP_HASH_FILE> = $r28;

        return;
    }
}
