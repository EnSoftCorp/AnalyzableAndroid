public class com.android.server.job.JobServiceContext extends android.app.job.IJobCallback$Stub implements android.content.ServiceConnection
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final int defaultMaxActiveJobsPerService;
    private static final long EXECUTING_TIMESLICE_MILLIS;
    private static final long OP_TIMEOUT_MILLIS;
    private static final java.lang.String[] VERB_STRINGS;
    static final int VERB_BINDING;
    static final int VERB_STARTING;
    static final int VERB_EXECUTING;
    static final int VERB_STOPPING;
    private static final int MSG_TIMEOUT;
    private static final int MSG_CALLBACK;
    private static final int MSG_SERVICE_BOUND;
    private static final int MSG_CANCEL;
    private static final int MSG_SHUTDOWN_EXECUTION;
    private final android.os.Handler mCallbackHandler;
    private final com.android.server.job.JobCompletedListener mCompletedListener;
    private final android.content.Context mContext;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private android.os.PowerManager$WakeLock mWakeLock;
    private android.app.job.JobParameters mParams;
    int mVerb;
    private java.util.concurrent.atomic.AtomicBoolean mCancelled;
    private com.android.server.job.controllers.JobStatus mRunningJob;
    android.app.job.IJobService service;
    private final java.lang.Object mLock;
    private boolean mAvailable;
    private long mExecutionStartTimeElapsed;
    private long mTimeoutElapsed;

    void <init>(com.android.server.job.JobSchedulerService, com.android.internal.app.IBatteryStats, android.os.Looper)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobSchedulerService r1;
        com.android.internal.app.IBatteryStats r2;
        android.os.Looper r3;
        android.content.Context $r4;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.JobSchedulerService;

        r2 := @parameter1: com.android.internal.app.IBatteryStats;

        r3 := @parameter2: android.os.Looper;

        $r4 = virtualinvoke r1.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        specialinvoke r0.<com.android.server.job.JobServiceContext: void <init>(android.content.Context,com.android.internal.app.IBatteryStats,com.android.server.job.JobCompletedListener,android.os.Looper)>($r4, r2, r1, r3);

        return;
    }

    void <init>(android.content.Context, com.android.internal.app.IBatteryStats, com.android.server.job.JobCompletedListener, android.os.Looper)
    {
        com.android.server.job.JobServiceContext r0;
        android.content.Context r1;
        com.android.internal.app.IBatteryStats r2;
        com.android.server.job.JobCompletedListener r3;
        android.os.Looper r4;
        java.util.concurrent.atomic.AtomicBoolean $r5;
        java.lang.Object $r6;
        com.android.server.job.JobServiceContext$JobServiceHandler $r7;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.app.IBatteryStats;

        r3 := @parameter2: com.android.server.job.JobCompletedListener;

        r4 := @parameter3: android.os.Looper;

        specialinvoke r0.<android.app.job.IJobCallback$Stub: void <init>()>();

        $r5 = new java.util.concurrent.atomic.AtomicBoolean;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicBoolean: void <init>()>();

        r0.<com.android.server.job.JobServiceContext: java.util.concurrent.atomic.AtomicBoolean mCancelled> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock> = $r6;

        r0.<com.android.server.job.JobServiceContext: android.content.Context mContext> = r1;

        r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats> = r2;

        $r7 = new com.android.server.job.JobServiceContext$JobServiceHandler;

        specialinvoke $r7.<com.android.server.job.JobServiceContext$JobServiceHandler: void <init>(com.android.server.job.JobServiceContext,android.os.Looper)>(r0, r4);

        r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler> = $r7;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobCompletedListener mCompletedListener> = r3;

        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = 1;

        return;
    }

    boolean executeRunnableJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus r1;
        java.lang.Object r2, $r6;
        android.content.Intent r3, $r9;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r5, $r15;
        android.app.job.JobParameters $r7;
        int $i0, $i2, $i3;
        android.os.PersistableBundle $r8;
        long $l1;
        android.content.ComponentName $r10;
        android.os.UserHandle $r11;
        android.content.Context $r12;
        java.lang.String $r13;
        com.android.internal.app.IBatteryStats $r14;
        android.os.RemoteException $r16;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r6 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        $z1 = r0.<com.android.server.job.JobServiceContext: boolean mAvailable>;

        if $z1 != 0 goto label03;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("JobServiceContext", "Starting new runnable but context is unavailable > Error.");

        exitmonitor r2;

     label02:
        return 0;

     label03:
        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = r1;

        $r7 = new android.app.job.JobParameters;

        $i0 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $r8 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.os.PersistableBundle getExtras()>();

        $z2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: boolean isConstraintsSatisfied()>();

        if $z2 != 0 goto label04;

        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        specialinvoke $r7.<android.app.job.JobParameters: void <init>(android.os.IBinder,int,android.os.PersistableBundle,boolean)>(r0, $i0, $r8, $z3);

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = $r7;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed> = $l1;

        r0.<com.android.server.job.JobServiceContext: int mVerb> = 0;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOut()>();

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>()>();

        $r10 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        r3 = virtualinvoke $r9.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r10);

        $r12 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        $r11 = new android.os.UserHandle;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUserId()>();

        specialinvoke $r11.<android.os.UserHandle: void <init>(int)>($i2);

        z0 = virtualinvoke $r12.<android.content.Context: boolean bindServiceAsUser(android.content.Intent,android.content.ServiceConnection,int,android.os.UserHandle)>(r3, r0, 5, $r11);

        if z0 != 0 goto label07;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = null;

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = null;

        r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed> = 0L;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOut()>();

        exitmonitor r2;

     label06:
        return 0;

     label07:
        $r14 = r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r13 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: java.lang.String getName()>();

        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        interfaceinvoke $r14.<com.android.internal.app.IBatteryStats: void noteJobStart(java.lang.String,int)>($r13, $i3);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

     label10:
        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = 0;

        exitmonitor r2;

     label11:
        return 1;

     label12:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r2;

     label13:
        throw r5;

        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label06 with label12;
        catch java.lang.Throwable from label07 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    com.android.server.job.controllers.JobStatus getRunningJob()
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        com.android.server.job.controllers.JobStatus $r4;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r3 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void cancelExecutingJob()
    {
        com.android.server.job.JobServiceContext r0;
        android.os.Handler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    boolean isAvailable()
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r3 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.job.JobServiceContext: boolean mAvailable>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    long getExecutionStartTimeElapsed()
    {
        com.android.server.job.JobServiceContext r0;
        long $l0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $l0 = r0.<com.android.server.job.JobServiceContext: long mExecutionStartTimeElapsed>;

        return $l0;
    }

    long getTimeoutElapsed()
    {
        com.android.server.job.JobServiceContext r0;
        long $l0;

        r0 := @this: com.android.server.job.JobServiceContext;

        $l0 = r0.<com.android.server.job.JobServiceContext: long mTimeoutElapsed>;

        return $l0;
    }

    public void jobFinished(int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        boolean z0, $z1;
        android.os.Handler $r1;
        android.os.Message $r2;
        byte $b1;

        r0 := @this: com.android.server.job.JobServiceContext;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.job.JobServiceContext: boolean verifyCallingUid()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, $b1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void acknowledgeStopMessage(int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        boolean z0, $z1;
        android.os.Handler $r1;
        android.os.Message $r2;
        byte $b1;

        r0 := @this: com.android.server.job.JobServiceContext;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.job.JobServiceContext: boolean verifyCallingUid()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, $b1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void acknowledgeStartMessage(int, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        int i0;
        boolean z0, $z1;
        android.os.Handler $r1;
        android.os.Message $r2;
        byte $b1;

        r0 := @this: com.android.server.job.JobServiceContext;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.job.JobServiceContext: boolean verifyCallingUid()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        if z0 == 0 goto label2;

        $b1 = 1;

        goto label3;

     label2:
        $b1 = 0;

     label3:
        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, i0, $b1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onServiceConnected(android.content.ComponentName, android.os.IBinder)
    {
        com.android.server.job.JobServiceContext r0;
        android.content.ComponentName r1, $r5;
        android.os.IBinder r2;
        android.os.PowerManager r3;
        com.android.server.job.controllers.JobStatus $r4, $r9, $r13;
        boolean $z0;
        android.app.job.IJobService $r6;
        android.content.Context $r7;
        java.lang.Object $r8;
        java.lang.String $r10;
        android.os.PowerManager$WakeLock $r11, $r14, $r15, $r16;
        android.os.WorkSource $r12;
        int $i0;
        android.os.Message $r17, $r19;
        android.os.Handler $r18, $r20;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: android.content.ComponentName;

        r2 := @parameter1: android.os.IBinder;

        $r4 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r5 = virtualinvoke $r4.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label1;

        $r20 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        $r19 = virtualinvoke $r20.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r19.<android.os.Message: void sendToTarget()>();

        return;

     label1:
        $r6 = staticinvoke <android.app.job.IJobService$Stub: android.app.job.IJobService asInterface(android.os.IBinder)>(r2);

        r0.<com.android.server.job.JobServiceContext: android.app.job.IJobService service> = $r6;

        $r7 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r3 = (android.os.PowerManager) $r8;

        $r9 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $r10 = virtualinvoke $r9.<com.android.server.job.controllers.JobStatus: java.lang.String getTag()>();

        $r11 = virtualinvoke r3.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r10);

        r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock> = $r11;

        $r14 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        $r12 = new android.os.WorkSource;

        $r13 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $i0 = virtualinvoke $r13.<com.android.server.job.controllers.JobStatus: int getUid()>();

        specialinvoke $r12.<android.os.WorkSource: void <init>(int)>($i0);

        virtualinvoke $r14.<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>($r12);

        $r16 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r16.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r15 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r15.<android.os.PowerManager$WakeLock: void acquire()>();

        $r18 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        $r17 = virtualinvoke $r18.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        virtualinvoke $r17.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onServiceDisconnected(android.content.ComponentName)
    {
        com.android.server.job.JobServiceContext r0;
        android.content.ComponentName r1;
        android.os.Handler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.job.JobServiceContext;

        r1 := @parameter0: android.content.ComponentName;

        $r2 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private boolean verifyCallingUid()
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        if $r1 == null goto label1;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        $i1 = virtualinvoke $r2.<com.android.server.job.controllers.JobStatus: int getUid()>();

        if $i0 == $i1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    private void scheduleOpTimeOut()
    {
        com.android.server.job.JobServiceContext r0;
        long l0, $l2, $l3, $l4;
        android.os.Message r1;
        int $i1;
        android.os.Handler $r2, $r3;

        r0 := @this: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOut()>();

        $i1 = r0.<com.android.server.job.JobServiceContext: int mVerb>;

        if $i1 != 2 goto label1;

        $l4 = 60000L;

        goto label2;

     label1:
        $l4 = 8000L;

     label2:
        l0 = $l4;

        $r2 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(0);

        $r3 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, l0);

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = $l2 + l0;

        r0.<com.android.server.job.JobServiceContext: long mTimeoutElapsed> = $l3;

        return;
    }

    private void removeOpTimeOut()
    {
        com.android.server.job.JobServiceContext r0;
        android.os.Handler $r1;

        r0 := @this: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.Handler mCallbackHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(0);

        return;
    }

    static void access$000(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void removeOpTimeOut()>();

        return;
    }

    static java.lang.String[] access$100()
    {
        java.lang.String[] $r0;

        $r0 = <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS>;

        return $r0;
    }

    static java.util.concurrent.atomic.AtomicBoolean access$200(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        java.util.concurrent.atomic.AtomicBoolean $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: java.util.concurrent.atomic.AtomicBoolean mCancelled>;

        return $r1;
    }

    static void access$300(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        specialinvoke r0.<com.android.server.job.JobServiceContext: void scheduleOpTimeOut()>();

        return;
    }

    static android.app.job.JobParameters access$400(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        android.app.job.JobParameters $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams>;

        return $r1;
    }

    static com.android.server.job.controllers.JobStatus access$500(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob>;

        return $r1;
    }

    static java.lang.Object access$600(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.internal.app.IBatteryStats access$700(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.internal.app.IBatteryStats $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.internal.app.IBatteryStats mBatteryStats>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$800(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static android.content.Context access$900(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: android.content.Context mContext>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$802(com.android.server.job.JobServiceContext, android.os.PowerManager$WakeLock)
    {
        com.android.server.job.JobServiceContext r0;
        android.os.PowerManager$WakeLock r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        r1 := @parameter1: android.os.PowerManager$WakeLock;

        r0.<com.android.server.job.JobServiceContext: android.os.PowerManager$WakeLock mWakeLock> = r1;

        return r1;
    }

    static com.android.server.job.controllers.JobStatus access$502(com.android.server.job.JobServiceContext, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.controllers.JobStatus r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        r0.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus mRunningJob> = r1;

        return r1;
    }

    static android.app.job.JobParameters access$402(com.android.server.job.JobServiceContext, android.app.job.JobParameters)
    {
        com.android.server.job.JobServiceContext r0;
        android.app.job.JobParameters r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        r1 := @parameter1: android.app.job.JobParameters;

        r0.<com.android.server.job.JobServiceContext: android.app.job.JobParameters mParams> = r1;

        return r1;
    }

    static boolean access$1002(com.android.server.job.JobServiceContext, boolean)
    {
        com.android.server.job.JobServiceContext r0;
        boolean z0;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        z0 := @parameter1: boolean;

        r0.<com.android.server.job.JobServiceContext: boolean mAvailable> = z0;

        return z0;
    }

    static com.android.server.job.JobCompletedListener access$1100(com.android.server.job.JobServiceContext)
    {
        com.android.server.job.JobServiceContext r0;
        com.android.server.job.JobCompletedListener $r1;

        r0 := @parameter0: com.android.server.job.JobServiceContext;

        $r1 = r0.<com.android.server.job.JobServiceContext: com.android.server.job.JobCompletedListener mCompletedListener>;

        return $r1;
    }

    static void <clinit>()
    {
        boolean $z0;
        java.lang.String[] $r0;
        byte $b0;

        <com.android.server.job.JobServiceContext: int MSG_SHUTDOWN_EXECUTION> = 4;

        <com.android.server.job.JobServiceContext: int MSG_CANCEL> = 3;

        <com.android.server.job.JobServiceContext: int MSG_SERVICE_BOUND> = 2;

        <com.android.server.job.JobServiceContext: int MSG_CALLBACK> = 1;

        <com.android.server.job.JobServiceContext: int MSG_TIMEOUT> = 0;

        <com.android.server.job.JobServiceContext: int VERB_STOPPING> = 3;

        <com.android.server.job.JobServiceContext: int VERB_EXECUTING> = 2;

        <com.android.server.job.JobServiceContext: int VERB_STARTING> = 1;

        <com.android.server.job.JobServiceContext: int VERB_BINDING> = 0;

        <com.android.server.job.JobServiceContext: long OP_TIMEOUT_MILLIS> = 8000L;

        <com.android.server.job.JobServiceContext: long EXECUTING_TIMESLICE_MILLIS> = 60000L;

        <com.android.server.job.JobServiceContext: java.lang.String TAG> = "JobServiceContext";

        <com.android.server.job.JobServiceContext: boolean DEBUG> = 0;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isLowRamDeviceStatic()>();

        if $z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 3;

     label2:
        <com.android.server.job.JobServiceContext: int defaultMaxActiveJobsPerService> = $b0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "VERB_BINDING";

        $r0[1] = "VERB_STARTING";

        $r0[2] = "VERB_EXECUTING";

        $r0[3] = "VERB_STOPPING";

        <com.android.server.job.JobServiceContext: java.lang.String[] VERB_STRINGS> = $r0;

        return;
    }
}
