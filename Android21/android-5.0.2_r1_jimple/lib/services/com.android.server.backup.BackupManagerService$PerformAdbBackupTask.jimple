class com.android.server.backup.BackupManagerService$PerformAdbBackupTask extends com.android.server.backup.BackupManagerService$FullBackupTask
{
    com.android.server.backup.BackupManagerService$FullBackupEngine mBackupEngine;
    final java.util.concurrent.atomic.AtomicBoolean mLatch;
    android.os.ParcelFileDescriptor mOutputFile;
    java.util.zip.DeflaterOutputStream mDeflater;
    boolean mIncludeApks;
    boolean mIncludeObbs;
    boolean mIncludeShared;
    boolean mDoWidgets;
    boolean mAllApps;
    boolean mIncludeSystem;
    boolean mCompress;
    java.util.ArrayList mPackages;
    java.lang.String mCurrentPassword;
    java.lang.String mEncryptPassword;
    final com.android.server.backup.BackupManagerService this$0;

    void <init>(com.android.server.backup.BackupManagerService, android.os.ParcelFileDescriptor, android.app.backup.IFullBackupRestoreObserver, boolean, boolean, boolean, boolean, java.lang.String, java.lang.String, boolean, boolean, boolean, java.lang.String[], java.util.concurrent.atomic.AtomicBoolean)
    {
        com.android.server.backup.BackupManagerService$PerformAdbBackupTask r0;
        com.android.server.backup.BackupManagerService r1;
        android.os.ParcelFileDescriptor r2;
        android.app.backup.IFullBackupRestoreObserver r3;
        boolean z0, z1, z2, z3, z4, z5, z6, $z7;
        java.lang.String r4, r5, $r9;
        java.lang.String[] r6;
        java.util.concurrent.atomic.AtomicBoolean r7;
        java.util.ArrayList $r8;
        java.util.List $r10;

        r0 := @this: com.android.server.backup.BackupManagerService$PerformAdbBackupTask;

        r1 := @parameter0: com.android.server.backup.BackupManagerService;

        r2 := @parameter1: android.os.ParcelFileDescriptor;

        r3 := @parameter2: android.app.backup.IFullBackupRestoreObserver;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        z2 := @parameter5: boolean;

        z3 := @parameter6: boolean;

        r4 := @parameter7: java.lang.String;

        r5 := @parameter8: java.lang.String;

        z4 := @parameter9: boolean;

        z5 := @parameter10: boolean;

        z6 := @parameter11: boolean;

        r6 := @parameter12: java.lang.String[];

        r7 := @parameter13: java.util.concurrent.atomic.AtomicBoolean;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0> = r1;

        specialinvoke r0.<com.android.server.backup.BackupManagerService$FullBackupTask: void <init>(com.android.server.backup.BackupManagerService,android.app.backup.IFullBackupRestoreObserver)>(r1, r3);

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch> = r7;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile> = r2;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeApks> = z0;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeObbs> = z1;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeShared> = z2;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mDoWidgets> = z3;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mAllApps> = z4;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeSystem> = z5;

        if r6 != null goto label1;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r8 = new java.util.ArrayList;

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r6);

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r10);

     label2:
        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.ArrayList mPackages> = $r8;

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mCurrentPassword> = r4;

        if r5 == null goto label3;

        $r9 = "";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z7 == 0 goto label4;

     label3:
        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mEncryptPassword> = r4;

        goto label5;

     label4:
        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mEncryptPassword> = r5;

     label5:
        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mCompress> = z6;

        return;
    }

    void addPackagesToSet(java.util.TreeMap, java.util.List)
    {
        com.android.server.backup.BackupManagerService$PerformAdbBackupTask r0;
        java.util.TreeMap r1;
        java.util.List r2;
        java.util.Iterator r3;
        java.lang.String r4, $r15;
        android.content.pm.PackageInfo r5;
        boolean $z0, $z1;
        java.lang.Object $r6;
        com.android.server.backup.BackupManagerService $r7;
        android.content.pm.PackageManager $r8;
        android.content.pm.PackageManager$NameNotFoundException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;

        r0 := @this: com.android.server.backup.BackupManagerService$PerformAdbBackupTask;

        r1 := @parameter0: java.util.TreeMap;

        r2 := @parameter1: java.util.List;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $z1 = virtualinvoke r1.<java.util.TreeMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 != 0 goto label5;

     label2:
        $r7 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r8 = staticinvoke <com.android.server.backup.BackupManagerService: android.content.pm.PackageManager access$500(com.android.server.backup.BackupManagerService)>($r7);

        r5 = virtualinvoke $r8.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r4, 64);

        virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", skipping");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", $r15);

     label5:
        goto label1;

     label6:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label2 to label3 with label4;
    }

    private java.io.OutputStream emitAesBackupHeader(java.lang.StringBuilder, java.io.OutputStream) throws java.lang.Exception
    {
        com.android.server.backup.BackupManagerService$PerformAdbBackupTask r0;
        java.lang.StringBuilder r1;
        java.io.OutputStream r2;
        byte[] r3, r5, r6, r11, r12, r13, r17, $r41, $r47, r50;
        javax.crypto.SecretKey r4;
        javax.crypto.Cipher r7, r10;
        javax.crypto.spec.SecretKeySpec r8, $r23;
        javax.crypto.CipherOutputStream r9, $r25;
        java.io.ByteArrayOutputStream r14, $r43;
        java.io.DataOutputStream r15, $r44;
        com.android.server.backup.BackupManagerService $r16, $r19, $r21, $r22, $r26, $r29, $r36, $r42, $r48;
        java.lang.String $r18, $r30, $r34, $r39, $r49;
        java.security.SecureRandom $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: com.android.server.backup.BackupManagerService$PerformAdbBackupTask;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.io.OutputStream;

        $r16 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        r3 = staticinvoke <com.android.server.backup.BackupManagerService: byte[] access$1300(com.android.server.backup.BackupManagerService,int)>($r16, 512);

        $r19 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r18 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mEncryptPassword>;

        r4 = staticinvoke <com.android.server.backup.BackupManagerService: javax.crypto.SecretKey access$1400(com.android.server.backup.BackupManagerService,java.lang.String,java.lang.String,byte[],int)>($r19, "PBKDF2WithHmacSHA1", $r18, r3, 10000);

        r5 = newarray (byte)[32];

        $r21 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r20 = staticinvoke <com.android.server.backup.BackupManagerService: java.security.SecureRandom access$1500(com.android.server.backup.BackupManagerService)>($r21);

        virtualinvoke $r20.<java.security.SecureRandom: void nextBytes(byte[])>(r5);

        $r22 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        r6 = staticinvoke <com.android.server.backup.BackupManagerService: byte[] access$1300(com.android.server.backup.BackupManagerService,int)>($r22, 512);

        r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        $r23 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r23.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>(r5, "AES");

        r8 = $r23;

        virtualinvoke r7.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r8);

        $r25 = new javax.crypto.CipherOutputStream;

        specialinvoke $r25.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>(r2, r7);

        r9 = $r25;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AES-256");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r26 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r30 = staticinvoke <com.android.server.backup.BackupManagerService: java.lang.String access$1600(com.android.server.backup.BackupManagerService,byte[])>($r26, r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r29 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r34 = staticinvoke <com.android.server.backup.BackupManagerService: java.lang.String access$1600(com.android.server.backup.BackupManagerService,byte[])>($r29, r6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(10000);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        r10 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES/CBC/PKCS5Padding");

        virtualinvoke r10.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r4);

        r11 = virtualinvoke r10.<javax.crypto.Cipher: byte[] getIV()>();

        $r36 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r39 = staticinvoke <com.android.server.backup.BackupManagerService: java.lang.String access$1600(com.android.server.backup.BackupManagerService,byte[])>($r36, r11);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        r50 = virtualinvoke r7.<javax.crypto.Cipher: byte[] getIV()>();

        r12 = virtualinvoke r8.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

        $r42 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r41 = virtualinvoke r8.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

        r13 = staticinvoke <com.android.server.backup.BackupManagerService: byte[] access$1700(com.android.server.backup.BackupManagerService,java.lang.String,byte[],byte[],int)>($r42, "PBKDF2WithHmacSHA1", $r41, r6, 10000);

        $r43 = new java.io.ByteArrayOutputStream;

        $i0 = lengthof r50;

        $i1 = lengthof r12;

        $i4 = $i0 + $i1;

        $i5 = lengthof r13;

        $i3 = $i4 + $i5;

        $i2 = $i3 + 3;

        specialinvoke $r43.<java.io.ByteArrayOutputStream: void <init>(int)>($i2);

        r14 = $r43;

        $r44 = new java.io.DataOutputStream;

        specialinvoke $r44.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r14);

        r15 = $r44;

        $i8 = lengthof r50;

        virtualinvoke r15.<java.io.DataOutputStream: void writeByte(int)>($i8);

        virtualinvoke r15.<java.io.DataOutputStream: void write(byte[])>(r50);

        $i7 = lengthof r12;

        virtualinvoke r15.<java.io.DataOutputStream: void writeByte(int)>($i7);

        virtualinvoke r15.<java.io.DataOutputStream: void write(byte[])>(r12);

        $i6 = lengthof r13;

        virtualinvoke r15.<java.io.DataOutputStream: void writeByte(int)>($i6);

        virtualinvoke r15.<java.io.DataOutputStream: void write(byte[])>(r13);

        virtualinvoke r15.<java.io.DataOutputStream: void flush()>();

        $r47 = virtualinvoke r14.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r17 = virtualinvoke r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r47);

        $r48 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r49 = staticinvoke <com.android.server.backup.BackupManagerService: java.lang.String access$1600(com.android.server.backup.BackupManagerService,byte[])>($r48, r17);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        return r9;
    }

    private void finalizeBackup(java.io.OutputStream)
    {
        com.android.server.backup.BackupManagerService$PerformAdbBackupTask r0;
        java.io.OutputStream r1;
        byte[] r2;
        java.io.IOException $r3;

        r0 := @this: com.android.server.backup.BackupManagerService$PerformAdbBackupTask;

        r1 := @parameter0: java.io.OutputStream;

     label1:
        r2 = newarray (byte)[1024];

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Error attempting to finalize backup stream");

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void run()
    {
        com.android.server.backup.BackupManagerService$PerformAdbBackupTask r0;
        java.util.TreeMap r1, $r21;
        com.android.server.backup.BackupManagerService$FullBackupObbConnection r2, $r23;
        java.util.List r3, r161;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.content.pm.PackageInfo r4, r163, r177, r178;
        java.io.OutputStream r5, r168;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15;
        java.lang.Throwable r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, $r112, $r117, $r120, $r127, $r128, $r129, $r134, $r141, $r144, $r151, $r153, $r154, $r155, $r156, $r160;
        com.android.server.backup.BackupManagerService $r22, $r30, $r35, $r37, $r40, $r42, $r49, $r63, $r65, $r67, $r71, $r79, $r81, $r85, $r94, $r95, $r103, $r106, $r108, $r115, $r122, $r124, $r125, $r130, $r136, $r142, $r149;
        java.util.ArrayList $r24, $r28, $r92, r164;
        java.util.Set $r25;
        java.io.FileOutputStream $r26, r165;
        android.os.ParcelFileDescriptor $r27, $r38, $r69, $r70, $r102, $r116, $r123, $r158;
        java.util.Collection $r29;
        java.io.FileDescriptor $r31;
        java.lang.String $r32, $r34, $r36, $r48, $r50, $r52, $r56, $r61, $r83, $r87;
        java.lang.StringBuilder $r33, $r54, $r55, $r57, r171;
        android.util.SparseArray $r39, $r66, $r78, $r96, $r105, $r137, $r150;
        java.lang.Object $r41, $r44, $r68, $r80, $r82, $r86, $r89, $r104, $r107, $r121, $r148, r166, r169, r175, r179, r181, r184, r186;
        android.os.PowerManager$WakeLock $r43, $r72, $r84, $r114, $r126, $r133, $r143;
        java.util.concurrent.atomic.AtomicBoolean $r45, $r46, $r47, $r64, $r73, $r74, $r75, $r76, $r77, $r97, $r98, $r99, $r109, $r110, $r111, $r135, $r138, $r139, $r145, $r146, $r147, r167, r170, r176, r180, r182, r185, r187;
        com.android.server.backup.BackupManagerService$FullBackupEngine $r51, $r53;
        java.lang.RuntimeException $r58;
        java.util.zip.DeflaterOutputStream $r59;
        java.util.zip.Deflater $r60, r173;
        android.content.pm.PackageManager $r62, $r93;
        android.content.pm.ApplicationInfo $r88, $r91;
        java.util.Map$Entry $r90;
        android.content.pm.PackageManager$NameNotFoundException $r100;
        java.lang.Exception $r101, $r119, r174, r183;
        java.io.IOException $r113, $r118, $r131, $r132, $r140, $r152, $r157;
        android.os.RemoteException $r159;
        java.util.Iterator r162;
        byte[] r172;

        r0 := @this: com.android.server.backup.BackupManagerService$PerformAdbBackupTask;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("BackupManagerService", "--- Performing full-dataset adb backup ---");

        $r21 = new java.util.TreeMap;

        specialinvoke $r21.<java.util.TreeMap: void <init>()>();

        r1 = $r21;

        $r23 = new com.android.server.backup.BackupManagerService$FullBackupObbConnection;

        $r22 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        specialinvoke $r23.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void <init>(com.android.server.backup.BackupManagerService)>($r22);

        r2 = $r23;

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void establish()>();

        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendStartBackup()>();

        $z2 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mAllApps>;

        if $z2 == 0 goto label004;

        $r94 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r93 = staticinvoke <com.android.server.backup.BackupManagerService: android.content.pm.PackageManager access$500(com.android.server.backup.BackupManagerService)>($r94);

        r3 = virtualinvoke $r93.<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>(64);

        i0 = 0;

     label001:
        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if i0 >= $i2 goto label004;

        $r86 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (android.content.pm.PackageInfo) $r86;

        $z12 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeSystem>;

        if $z12 == 1 goto label002;

        $r88 = r4.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $i3 = $r88.<android.content.pm.ApplicationInfo: int flags>;

        $i4 = $i3 & 1;

        if $i4 != 0 goto label003;

     label002:
        $r87 = r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r87, r4);

     label003:
        i0 = i0 + 1;

        goto label001;

     label004:
        $z1 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mDoWidgets>;

        if $z1 == 0 goto label005;

        r161 = staticinvoke <com.android.server.AppWidgetBackupBridge: java.util.List getWidgetParticipants(int)>(0);

        if r161 == null goto label005;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void addPackagesToSet(java.util.TreeMap,java.util.List)>(r1, r161);

     label005:
        $r24 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.ArrayList mPackages>;

        if $r24 == null goto label006;

        $r92 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.ArrayList mPackages>;

        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void addPackagesToSet(java.util.TreeMap,java.util.List)>(r1, $r92);

     label006:
        $r25 = virtualinvoke r1.<java.util.TreeMap: java.util.Set entrySet()>();

        r162 = interfaceinvoke $r25.<java.util.Set: java.util.Iterator iterator()>();

     label007:
        $z3 = interfaceinvoke r162.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label009;

        $r82 = interfaceinvoke r162.<java.util.Iterator: java.lang.Object next()>();

        $r90 = (java.util.Map$Entry) $r82;

        $r89 = interfaceinvoke $r90.<java.util.Map$Entry: java.lang.Object getValue()>();

        r163 = (android.content.pm.PackageInfo) $r89;

        $r91 = r163.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $z13 = staticinvoke <com.android.server.backup.BackupManagerService: boolean appIsEligibleForBackup(android.content.pm.ApplicationInfo)>($r91);

        if $z13 != 0 goto label008;

        interfaceinvoke r162.<java.util.Iterator: void remove()>();

     label008:
        goto label007;

     label009:
        $r28 = new java.util.ArrayList;

        $r29 = virtualinvoke r1.<java.util.TreeMap: java.util.Collection values()>();

        specialinvoke $r28.<java.util.ArrayList: void <init>(java.util.Collection)>($r29);

        r164 = $r28;

        $r26 = new java.io.FileOutputStream;

        $r27 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        $r31 = virtualinvoke $r27.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        specialinvoke $r26.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r31);

        r165 = $r26;

        r5 = null;

     label010:
        $r32 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mEncryptPassword>;

        if $r32 == null goto label011;

        $r83 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mEncryptPassword>;

        $i1 = virtualinvoke $r83.<java.lang.String: int length()>();

        if $i1 <= 0 goto label011;

        $z11 = 1;

        goto label012;

     label011:
        $z11 = 0;

     label012:
        z0 = $z11;

        $r30 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $z4 = virtualinvoke $r30.<com.android.server.backup.BackupManagerService: boolean deviceIsEncrypted()>();

        if $z4 == 0 goto label028;

        if z0 != 0 goto label028;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unencrypted backup of encrypted device; aborting");

     label013:
        if r5 == null goto label014;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label014:
        $r70 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r70.<android.os.ParcelFileDescriptor: void close()>();

     label015:
        goto label017;

     label016:
        $r113 := @caughtexception;

     label017:
        $r81 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r80 = $r81.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r166 = $r80;

        entermonitor $r80;

     label018:
        $r79 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r78 = $r79.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r78.<android.util.SparseArray: void clear()>();

        exitmonitor r166;

     label019:
        goto label022;

     label020:
        $r112 := @caughtexception;

        r6 = $r112;

        exitmonitor r166;

     label021:
        throw r6;

     label022:
        $r77 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r167 = $r77;

        entermonitor $r77;

     label023:
        $r76 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r76.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r75 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r75.<java.lang.Object: void notifyAll()>();

        exitmonitor r167;

     label024:
        goto label027;

     label025:
        $r144 := @caughtexception;

        r7 = $r144;

        exitmonitor r167;

     label026:
        throw r7;

     label027:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r85 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r84 = $r85.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r84.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label028:
        r168 = r165;

        $r35 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r34 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.lang.String mCurrentPassword>;

        $z5 = staticinvoke <com.android.server.backup.BackupManagerService: boolean access$1800(com.android.server.backup.BackupManagerService,java.lang.String)>($r35, $r34);

        if $z5 != 0 goto label044;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("BackupManagerService", "Backup password mismatch; aborting");

     label029:
        if r5 == null goto label030;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label030:
        $r69 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r69.<android.os.ParcelFileDescriptor: void close()>();

     label031:
        goto label033;

     label032:
        $r118 := @caughtexception;

     label033:
        $r67 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r68 = $r67.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r169 = $r68;

        entermonitor $r68;

     label034:
        $r65 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r66 = $r65.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r66.<android.util.SparseArray: void clear()>();

        exitmonitor r169;

     label035:
        goto label038;

     label036:
        $r155 := @caughtexception;

        r8 = $r155;

        exitmonitor r169;

     label037:
        throw r8;

     label038:
        $r64 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r170 = $r64;

        entermonitor $r64;

     label039:
        $r73 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r73.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r74 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r74.<java.lang.Object: void notifyAll()>();

        exitmonitor r170;

     label040:
        goto label043;

     label041:
        $r160 := @caughtexception;

        r9 = $r160;

        exitmonitor r170;

     label042:
        throw r9;

     label043:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r71 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r72 = $r71.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r72.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label044:
        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(int)>(1024);

        r171 = $r33;

        virtualinvoke r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANDROID BACKUP\n");

        virtualinvoke r171.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(3);

        $z6 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mCompress>;

        if $z6 == 0 goto label045;

        $r61 = "\n1\n";

        goto label046;

     label045:
        $r61 = "\n0\n";

     label046:
        virtualinvoke r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

     label047:
        if z0 == 0 goto label048;

        r168 = specialinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.io.OutputStream emitAesBackupHeader(java.lang.StringBuilder,java.io.OutputStream)>(r171, r168);

        goto label049;

     label048:
        virtualinvoke r171.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("none\n");

     label049:
        $r36 = virtualinvoke r171.<java.lang.StringBuilder: java.lang.String toString()>();

        r172 = virtualinvoke $r36.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke r165.<java.io.FileOutputStream: void write(byte[])>(r172);

        $z7 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mCompress>;

        if $z7 == 0 goto label050;

        $r60 = new java.util.zip.Deflater;

        specialinvoke $r60.<java.util.zip.Deflater: void <init>(int)>(9);

        r173 = $r60;

        $r59 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r59.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,boolean)>(r168, r173, 1);

        r168 = $r59;

     label050:
        r5 = r168;

     label051:
        goto label068;

     label052:
        $r119 := @caughtexception;

        r174 = $r119;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Unable to emit archive header", r174);

     label053:
        if r5 == null goto label054;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label054:
        $r123 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r123.<android.os.ParcelFileDescriptor: void close()>();

     label055:
        goto label057;

     label056:
        $r157 := @caughtexception;

     label057:
        $r124 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r121 = $r124.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r175 = $r121;

        entermonitor $r121;

     label058:
        $r122 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r137 = $r122.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r137.<android.util.SparseArray: void clear()>();

        exitmonitor r175;

     label059:
        goto label062;

     label060:
        $r153 := @caughtexception;

        r10 = $r153;

        exitmonitor r175;

     label061:
        throw r10;

     label062:
        $r139 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r176 = $r139;

        entermonitor $r139;

     label063:
        $r138 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r138.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r135 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r135.<java.lang.Object: void notifyAll()>();

        exitmonitor r176;

     label064:
        goto label067;

     label065:
        $r156 := @caughtexception;

        r11 = $r156;

        exitmonitor r176;

     label066:
        throw r11;

     label067:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r136 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r133 = $r136.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r133.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label068:
        $z8 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeShared>;

        if $z8 == 0 goto label072;

     label069:
        $r63 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r62 = staticinvoke <com.android.server.backup.BackupManagerService: android.content.pm.PackageManager access$500(com.android.server.backup.BackupManagerService)>($r63);

        r177 = virtualinvoke $r62.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>("com.android.sharedstoragebackup", 0);

        virtualinvoke r164.<java.util.ArrayList: boolean add(java.lang.Object)>(r177);

     label070:
        goto label072;

     label071:
        $r100 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "Unable to find shared-storage backup handler");

     label072:
        i5 = virtualinvoke r164.<java.util.ArrayList: int size()>();

        i6 = 0;

     label073:
        if i6 >= i5 goto label077;

        $r44 = virtualinvoke r164.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r178 = (android.content.pm.PackageInfo) $r44;

        $r52 = r178.<android.content.pm.PackageInfo: java.lang.String packageName>;

        z14 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>("com.android.sharedstoragebackup");

        $r53 = new com.android.server.backup.BackupManagerService$FullBackupEngine;

        $r49 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r48 = r178.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z9 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeApks>;

        specialinvoke $r53.<com.android.server.backup.BackupManagerService$FullBackupEngine: void <init>(com.android.server.backup.BackupManagerService,java.io.OutputStream,java.lang.String,boolean)>($r49, r5, $r48, $z9);

        r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService$FullBackupEngine mBackupEngine> = $r53;

        if z14 == 0 goto label074;

        $r50 = "Shared storage";

        goto label075;

     label074:
        $r50 = r178.<android.content.pm.PackageInfo: java.lang.String packageName>;

     label075:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendOnBackupPackage(java.lang.String)>($r50);

        $r51 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService$FullBackupEngine mBackupEngine>;

        virtualinvoke $r51.<com.android.server.backup.BackupManagerService$FullBackupEngine: int backupOnePackage(android.content.pm.PackageInfo)>(r178);

        $z10 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: boolean mIncludeObbs>;

        if $z10 == 0 goto label076;

        z15 = virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: boolean backupObbs(android.content.pm.PackageInfo,java.io.OutputStream)>(r178, r5);

        if z15 != 0 goto label076;

        $r58 = new java.lang.RuntimeException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure writing OBB stack for ");

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r178);

        $r56 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.lang.RuntimeException: void <init>(java.lang.String)>($r56);

        throw $r58;

     label076:
        i6 = i6 + 1;

        goto label073;

     label077:
        specialinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void finalizeBackup(java.io.OutputStream)>(r5);

     label078:
        if r5 == null goto label079;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label079:
        $r38 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r38.<android.os.ParcelFileDescriptor: void close()>();

     label080:
        goto label082;

     label081:
        $r152 := @caughtexception;

     label082:
        $r37 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r41 = $r37.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r179 = $r41;

        entermonitor $r41;

     label083:
        $r40 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r39 = $r40.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r39.<android.util.SparseArray: void clear()>();

        exitmonitor r179;

     label084:
        goto label087;

     label085:
        $r151 := @caughtexception;

        r13 = $r151;

        exitmonitor r179;

     label086:
        throw r13;

     label087:
        $r45 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r180 = $r45;

        entermonitor $r45;

     label088:
        $r46 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r46.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r47 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r47.<java.lang.Object: void notifyAll()>();

        exitmonitor r180;

     label089:
        goto label092;

     label090:
        $r134 := @caughtexception;

        r12 = $r134;

        exitmonitor r180;

     label091:
        throw r12;

     label092:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r42 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r43 = $r42.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r43.<android.os.PowerManager$WakeLock: void release()>();

        goto label141;

     label093:
        $r159 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("BackupManagerService", "App died during full backup");

     label094:
        if r5 == null goto label095;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label095:
        $r158 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r158.<android.os.ParcelFileDescriptor: void close()>();

     label096:
        goto label098;

     label097:
        $r131 := @caughtexception;

     label098:
        $r130 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r148 = $r130.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r181 = $r148;

        entermonitor $r148;

     label099:
        $r149 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r150 = $r149.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r150.<android.util.SparseArray: void clear()>();

        exitmonitor r181;

     label100:
        goto label103;

     label101:
        $r129 := @caughtexception;

        r15 = $r129;

        exitmonitor r181;

     label102:
        throw r15;

     label103:
        $r145 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r182 = $r145;

        entermonitor $r145;

     label104:
        $r146 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r146.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r147 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r147.<java.lang.Object: void notifyAll()>();

        exitmonitor r182;

     label105:
        goto label108;

     label106:
        $r127 := @caughtexception;

        r14 = $r127;

        exitmonitor r182;

     label107:
        throw r14;

     label108:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r142 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r143 = $r142.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r143.<android.os.PowerManager$WakeLock: void release()>();

        goto label141;

     label109:
        $r101 := @caughtexception;

        r183 = $r101;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("BackupManagerService", "Internal exception during full backup", r183);

     label110:
        if r5 == null goto label111;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label111:
        $r102 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r102.<android.os.ParcelFileDescriptor: void close()>();

     label112:
        goto label114;

     label113:
        $r140 := @caughtexception;

     label114:
        $r103 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r104 = $r103.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r184 = $r104;

        entermonitor $r104;

     label115:
        $r95 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r96 = $r95.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r96.<android.util.SparseArray: void clear()>();

        exitmonitor r184;

     label116:
        goto label119;

     label117:
        $r141 := @caughtexception;

        r17 = $r141;

        exitmonitor r184;

     label118:
        throw r17;

     label119:
        $r97 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r185 = $r97;

        entermonitor $r97;

     label120:
        $r98 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r98.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r99 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r99.<java.lang.Object: void notifyAll()>();

        exitmonitor r185;

     label121:
        goto label124;

     label122:
        $r120 := @caughtexception;

        r16 = $r120;

        exitmonitor r185;

     label123:
        throw r16;

     label124:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r115 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r114 = $r115.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r114.<android.os.PowerManager$WakeLock: void release()>();

        goto label141;

     label125:
        $r117 := @caughtexception;

        r18 = $r117;

     label126:
        if r5 == null goto label127;

        virtualinvoke r5.<java.io.OutputStream: void close()>();

     label127:
        $r116 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: android.os.ParcelFileDescriptor mOutputFile>;

        virtualinvoke $r116.<android.os.ParcelFileDescriptor: void close()>();

     label128:
        goto label130;

     label129:
        $r132 := @caughtexception;

     label130:
        $r108 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r107 = $r108.<com.android.server.backup.BackupManagerService: java.lang.Object mCurrentOpLock>;

        r186 = $r107;

        entermonitor $r107;

     label131:
        $r106 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r105 = $r106.<com.android.server.backup.BackupManagerService: android.util.SparseArray mCurrentOperations>;

        virtualinvoke $r105.<android.util.SparseArray: void clear()>();

        exitmonitor r186;

     label132:
        goto label135;

     label133:
        $r154 := @caughtexception;

        r20 = $r154;

        exitmonitor r186;

     label134:
        throw r20;

     label135:
        $r111 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        r187 = $r111;

        entermonitor $r111;

     label136:
        $r110 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r110.<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>(1);

        $r109 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: java.util.concurrent.atomic.AtomicBoolean mLatch>;

        virtualinvoke $r109.<java.lang.Object: void notifyAll()>();

        exitmonitor r187;

     label137:
        goto label140;

     label138:
        $r128 := @caughtexception;

        r19 = $r128;

        exitmonitor r187;

     label139:
        throw r19;

     label140:
        virtualinvoke r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void sendEndBackup()>();

        virtualinvoke r2.<com.android.server.backup.BackupManagerService$FullBackupObbConnection: void tearDown()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("BackupManagerService", "Full backup pass complete.");

        $r125 = r0.<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: com.android.server.backup.BackupManagerService this$0>;

        $r126 = $r125.<com.android.server.backup.BackupManagerService: android.os.PowerManager$WakeLock mWakelock>;

        virtualinvoke $r126.<android.os.PowerManager$WakeLock: void release()>();

        throw r18;

     label141:
        return;

        catch java.io.IOException from label013 to label015 with label016;
        catch java.lang.Throwable from label018 to label019 with label020;
        catch java.lang.Throwable from label020 to label021 with label020;
        catch java.lang.Throwable from label023 to label024 with label025;
        catch java.lang.Throwable from label025 to label026 with label025;
        catch java.io.IOException from label029 to label031 with label032;
        catch java.lang.Throwable from label034 to label035 with label036;
        catch java.lang.Throwable from label036 to label037 with label036;
        catch java.lang.Throwable from label039 to label040 with label041;
        catch java.lang.Throwable from label041 to label042 with label041;
        catch java.lang.Exception from label047 to label051 with label052;
        catch java.io.IOException from label053 to label055 with label056;
        catch java.lang.Throwable from label058 to label059 with label060;
        catch java.lang.Throwable from label060 to label061 with label060;
        catch java.lang.Throwable from label063 to label064 with label065;
        catch java.lang.Throwable from label065 to label066 with label065;
        catch android.content.pm.PackageManager$NameNotFoundException from label069 to label070 with label071;
        catch java.io.IOException from label078 to label080 with label081;
        catch java.lang.Throwable from label083 to label084 with label085;
        catch java.lang.Throwable from label085 to label086 with label085;
        catch java.lang.Throwable from label088 to label089 with label090;
        catch java.lang.Throwable from label090 to label091 with label090;
        catch android.os.RemoteException from label010 to label013 with label093;
        catch android.os.RemoteException from label028 to label029 with label093;
        catch android.os.RemoteException from label044 to label053 with label093;
        catch android.os.RemoteException from label068 to label078 with label093;
        catch java.io.IOException from label094 to label096 with label097;
        catch java.lang.Throwable from label099 to label100 with label101;
        catch java.lang.Throwable from label101 to label102 with label101;
        catch java.lang.Throwable from label104 to label105 with label106;
        catch java.lang.Throwable from label106 to label107 with label106;
        catch java.lang.Exception from label010 to label013 with label109;
        catch java.lang.Exception from label028 to label029 with label109;
        catch java.lang.Exception from label044 to label053 with label109;
        catch java.lang.Exception from label068 to label078 with label109;
        catch java.io.IOException from label110 to label112 with label113;
        catch java.lang.Throwable from label115 to label116 with label117;
        catch java.lang.Throwable from label117 to label118 with label117;
        catch java.lang.Throwable from label120 to label121 with label122;
        catch java.lang.Throwable from label122 to label123 with label122;
        catch java.lang.Throwable from label010 to label013 with label125;
        catch java.lang.Throwable from label028 to label029 with label125;
        catch java.lang.Throwable from label044 to label053 with label125;
        catch java.lang.Throwable from label068 to label078 with label125;
        catch java.lang.Throwable from label093 to label094 with label125;
        catch java.lang.Throwable from label109 to label110 with label125;
        catch java.io.IOException from label126 to label128 with label129;
        catch java.lang.Throwable from label131 to label132 with label133;
        catch java.lang.Throwable from label133 to label134 with label133;
        catch java.lang.Throwable from label136 to label137 with label138;
        catch java.lang.Throwable from label138 to label139 with label138;
        catch java.lang.Throwable from label125 to label126 with label125;
    }
}
