public class com.android.server.ConsumerIrService extends android.hardware.IConsumerIrService$Stub
{
    private static final java.lang.String TAG;
    private static final int MAX_XMIT_TIME;
    private final android.content.Context mContext;
    private final android.os.PowerManager$WakeLock mWakeLock;
    private final long mNativeHal;
    private final java.lang.Object mHalLock;

    private static native long halOpen();

    private static native int halTransmit(long, int, int[]);

    private static native int[] halGetCarrierFrequencies(long);

    void <init>(android.content.Context)
    {
        com.android.server.ConsumerIrService r0;
        android.content.Context r1, $r7;
        android.os.PowerManager r2;
        java.lang.Object $r3, $r4;
        android.os.PowerManager$WakeLock $r5, $r6;
        long $l0, $l1, $l3;
        android.content.pm.PackageManager $r8;
        boolean $z0;
        byte $b2, $b4;
        java.lang.RuntimeException $r9, $r10;

        r0 := @this: com.android.server.ConsumerIrService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.IConsumerIrService$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock> = $r3;

        r0.<com.android.server.ConsumerIrService: android.content.Context mContext> = r1;

        $r4 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r2 = (android.os.PowerManager) $r4;

        $r5 = virtualinvoke r2.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConsumerIrService");

        r0.<com.android.server.ConsumerIrService: android.os.PowerManager$WakeLock mWakeLock> = $r5;

        $r6 = r0.<com.android.server.ConsumerIrService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $l0 = staticinvoke <com.android.server.ConsumerIrService: long halOpen()>();

        r0.<com.android.server.ConsumerIrService: long mNativeHal> = $l0;

        $r7 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r8.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.consumerir");

        if $z0 == 0 goto label1;

        $l3 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("FEATURE_CONSUMER_IR present, but no IR HAL loaded!");

        throw $r10;

     label1:
        $l1 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label2;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("IR HAL present, but FEATURE_CONSUMER_IR is not set!");

        throw $r9;

     label2:
        return;
    }

    public boolean hasIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: com.android.server.ConsumerIrService;

        $l0 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void throwIfNoIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        long $l0;
        byte $b1;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.ConsumerIrService;

        $l0 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IR emitter not available");

        throw $r1;

     label1:
        return;
    }

    public void transmit(java.lang.String, int, int[])
    {
        com.android.server.ConsumerIrService r0;
        java.lang.String r1, $r10;
        int i0, i2, i3, i4, $i5, i10;
        int[] r2, r3;
        long l1, $l7, $l9;
        java.lang.Throwable r4, $r14;
        android.content.Context $r5;
        byte $b6;
        java.lang.Object $r6, r15;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.IllegalArgumentException $r11, $r13;
        java.lang.SecurityException $r12;

        r0 := @this: com.android.server.ConsumerIrService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        $r5 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i5 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i5 == 0 goto label01;

        $r12 = new java.lang.SecurityException;

        specialinvoke $r12.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r12;

     label01:
        l1 = 0L;

        r3 = r2;

        i2 = lengthof r3;

        i3 = 0;

     label02:
        if i3 >= i2 goto label04;

        i4 = r3[i3];

        if i4 > 0 goto label03;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-positive IR slice");

        throw $r13;

     label03:
        $l9 = (long) i4;

        l1 = l1 + $l9;

        i3 = i3 + 1;

        goto label02;

     label04:
        $b6 = l1 cmp 2000000L;

        if $b6 <= 0 goto label05;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IR pattern too long");

        throw $r11;

     label05:
        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        $r6 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        r15 = $r6;

        entermonitor $r6;

     label06:
        $l7 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        i10 = staticinvoke <com.android.server.ConsumerIrService: int halTransmit(long,int,int[])>($l7, i0, r2);

        if i10 >= 0 goto label07;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error transmitting: ");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConsumerIrService", $r10);

     label07:
        exitmonitor r15;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r15;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label06 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int[] getCarrierFrequencies()
    {
        com.android.server.ConsumerIrService r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r7;
        android.content.Context $r3;
        int $i0;
        long $l1;
        int[] $r5;
        java.lang.SecurityException $r6;

        r0 := @this: com.android.server.ConsumerIrService;

        $r3 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i0 == 0 goto label1;

        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r6;

     label1:
        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        $r4 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        r1 = $r4;

        entermonitor $r4;

     label2:
        $l1 = r0.<com.android.server.ConsumerIrService: long mNativeHal>;

        $r5 = staticinvoke <com.android.server.ConsumerIrService: int[] halGetCarrierFrequencies(long)>($l1);

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void <clinit>()
    {
        <com.android.server.ConsumerIrService: int MAX_XMIT_TIME> = 2000000;

        <com.android.server.ConsumerIrService: java.lang.String TAG> = "ConsumerIrService";

        return;
    }
}
