class com.android.server.accounts.AccountManagerService$DatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{

    public void <init>(android.content.Context, int)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.content.Context r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.server.accounts.AccountManagerService: java.lang.String access$2200(int)>(i0);

        specialinvoke r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(r1, $r2, null, 6);

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE accounts ( _id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, type TEXT NOT NULL, password TEXT, previous_name TEXT, UNIQUE(name,type))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE authtokens (  _id INTEGER PRIMARY KEY AUTOINCREMENT,  accounts_id INTEGER NOT NULL, type TEXT NOT NULL,  authtoken TEXT,  UNIQUE (accounts_id,type))");

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createGrantsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE extras ( _id INTEGER PRIMARY KEY AUTOINCREMENT, accounts_id INTEGER, key TEXT NOT NULL, value TEXT, UNIQUE(accounts_id,key))");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE meta ( key TEXT PRIMARY KEY NOT NULL, value TEXT)");

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r1);

        return;
    }

    private void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE shared_accounts ( _id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, type TEXT NOT NULL, UNIQUE(name,type))");

        return;
    }

    private void addOldAccountNameColumn(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ALTER TABLE accounts ADD COLUMN previous_name");

        return;
    }

    private void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>(" CREATE TRIGGER accountsDelete DELETE ON accounts BEGIN   DELETE FROM authtokens     WHERE accounts_id=OLD._id ;   DELETE FROM extras     WHERE accounts_id=OLD._id ;   DELETE FROM grants     WHERE accounts_id=OLD._id ; END");

        return;
    }

    private void createGrantsTable(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE grants (  accounts_id INTEGER NOT NULL, auth_token_type STRING NOT NULL,  uid INTEGER NOT NULL,  UNIQUE (accounts_id,auth_token_type,uid))");

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r7, $r13;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("upgrade from version ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r7);

        if i0 != 1 goto label1;

        i0 = i0 + 1;

     label1:
        if i0 != 2 goto label2;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createGrantsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TRIGGER accountsDelete");

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createAccountsDeletionTrigger(android.database.sqlite.SQLiteDatabase)>(r1);

        i0 = i0 + 1;

     label2:
        if i0 != 3 goto label3;

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE accounts SET type = \'com.google\' WHERE type == \'com.google.GAIA\'");

        i0 = i0 + 1;

     label3:
        if i0 != 4 goto label4;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void createSharedAccountsTable(android.database.sqlite.SQLiteDatabase)>(r1);

        i0 = i0 + 1;

     label4:
        if i0 != 5 goto label5;

        specialinvoke r0.<com.android.server.accounts.AccountManagerService$DatabaseHelper: void addOldAccountNameColumn(android.database.sqlite.SQLiteDatabase)>(r1);

        i0 = i0 + 1;

     label5:
        if i0 == i1 goto label6;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to upgrade version ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to version ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccountManagerService", $r13);

     label6:
        return;
    }

    public void onOpen(android.database.sqlite.SQLiteDatabase)
    {
        com.android.server.accounts.AccountManagerService$DatabaseHelper r0;
        android.database.sqlite.SQLiteDatabase r1;
        boolean $z0;

        r0 := @this: com.android.server.accounts.AccountManagerService$DatabaseHelper;

        r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("AccountManagerService", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("AccountManagerService", "opened database accounts.db");

     label1:
        return;
    }
}
