class com.android.server.InputMethodManagerService$SettingsObserver extends android.database.ContentObserver
{
    java.lang.String mLastEnabled;
    final com.android.server.InputMethodManagerService this$0;

    void <init>(com.android.server.InputMethodManagerService, android.os.Handler)
    {
        com.android.server.InputMethodManagerService$SettingsObserver r0;
        com.android.server.InputMethodManagerService r1;
        android.os.Handler r2;
        android.content.ContentResolver r3;
        android.content.Context $r4;
        android.net.Uri $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.InputMethodManagerService$SettingsObserver;

        r1 := @parameter0: com.android.server.InputMethodManagerService;

        r2 := @parameter1: android.os.Handler;

        r0.<com.android.server.InputMethodManagerService$SettingsObserver: com.android.server.InputMethodManagerService this$0> = r1;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>(r2);

        r0.<com.android.server.InputMethodManagerService$SettingsObserver: java.lang.String mLastEnabled> = "";

        $r4 = r1.<com.android.server.InputMethodManagerService: android.content.Context mContext>;

        r3 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("default_input_method");

        virtualinvoke r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r5, 0, r0);

        $r6 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("enabled_input_methods");

        virtualinvoke r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r6, 0, r0);

        $r7 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("selected_input_method_subtype");

        virtualinvoke r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r7, 0, r0);

        $r8 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("show_ime_with_hard_keyboard");

        virtualinvoke r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r8, 0, r0);

        return;
    }

    public void onChange(boolean, android.net.Uri)
    {
        com.android.server.InputMethodManagerService$SettingsObserver r0;
        boolean z0, z1, $z2, $z3;
        android.net.Uri r1, r2;
        java.util.HashMap r3, $r7;
        java.lang.String r4, $r10;
        java.lang.Throwable r5, $r13;
        com.android.server.InputMethodManagerService $r6, $r8, $r11, $r12;
        com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings $r9;

        r0 := @this: com.android.server.InputMethodManagerService$SettingsObserver;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.Uri;

        r2 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("show_ime_with_hard_keyboard");

        $r6 = r0.<com.android.server.InputMethodManagerService$SettingsObserver: com.android.server.InputMethodManagerService this$0>;

        $r7 = $r6.<com.android.server.InputMethodManagerService: java.util.HashMap mMethodMap>;

        r3 = $r7;

        entermonitor $r7;

     label1:
        $z2 = virtualinvoke r2.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r12 = r0.<com.android.server.InputMethodManagerService$SettingsObserver: com.android.server.InputMethodManagerService this$0>;

        virtualinvoke $r12.<com.android.server.InputMethodManagerService: void updateKeyboardFromSettingsLocked()>();

        goto label4;

     label2:
        z1 = 0;

        $r8 = r0.<com.android.server.InputMethodManagerService$SettingsObserver: com.android.server.InputMethodManagerService this$0>;

        $r9 = $r8.<com.android.server.InputMethodManagerService: com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings mSettings>;

        r4 = virtualinvoke $r9.<com.android.internal.inputmethod.InputMethodUtils$InputMethodSettings: java.lang.String getEnabledInputMethodsStr()>();

        $r10 = r0.<com.android.server.InputMethodManagerService$SettingsObserver: java.lang.String mLastEnabled>;

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 != 0 goto label3;

        r0.<com.android.server.InputMethodManagerService$SettingsObserver: java.lang.String mLastEnabled> = r4;

        z1 = 1;

     label3:
        $r11 = r0.<com.android.server.InputMethodManagerService$SettingsObserver: com.android.server.InputMethodManagerService this$0>;

        virtualinvoke $r11.<com.android.server.InputMethodManagerService: void updateInputMethodsFromSettingsLocked(boolean)>(z1);

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r3;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }
}
