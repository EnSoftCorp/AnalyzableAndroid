final class com.android.server.hdmi.HdmiCecLocalDevicePlayback extends com.android.server.hdmi.HdmiCecLocalDevice
{
    private static final java.lang.String TAG;
    private boolean mIsActiveSource;

    void <init>(com.android.server.hdmi.HdmiControlService)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiControlService r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiControlService;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void <init>(com.android.server.hdmi.HdmiControlService,int)>(r1, 4);

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 0;

        return;
    }

    void init()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void init()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 0;

        return;
    }

    protected void onAddressAllocated(int, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0, i1, $i2, $i3, $i4;
        com.android.server.hdmi.HdmiControlService $r1, $r2;
        com.android.server.hdmi.HdmiCecMessage $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i3 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $i4 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mDeviceType>;

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildReportPhysicalAddressCommand(int,int,int)>($i2, $i3, $i4);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void startQueuedActions()>();

        return;
    }

    protected int getPreferredAddress()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int $i0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.sys.hdmi.addr.playback", 15);

        return $i0;
    }

    protected void setPreferredAddress(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("persist.sys.hdmi.addr.playback", $r1);

        return;
    }

    void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.OneTouchPlayAction r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean hasAction(java.lang.Class)>(class "com/android/server/hdmi/OneTouchPlayAction");

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "oneTouchPlay already in progress");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 4);

        return;

     label1:
        r2 = staticinvoke <com.android.server.hdmi.OneTouchPlayAction: com.android.server.hdmi.OneTouchPlayAction create(com.android.server.hdmi.HdmiCecLocalDevicePlayback,int,android.hardware.hdmi.IHdmiControlCallback)>(r0, 0, r1);

        if r2 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "Cannot initiate oneTouchPlay");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 5);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>(r2);

        return;
    }

    void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        com.android.server.hdmi.DevicePowerStatusAction r2;
        boolean $z0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $z0 = virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean hasAction(java.lang.Class)>(class "com/android/server/hdmi/DevicePowerStatusAction");

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "queryDisplayStatus already in progress");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 4);

        return;

     label1:
        r2 = staticinvoke <com.android.server.hdmi.DevicePowerStatusAction: com.android.server.hdmi.DevicePowerStatusAction create(com.android.server.hdmi.HdmiCecLocalDevice,int,android.hardware.hdmi.IHdmiControlCallback)>(r0, 0, r1);

        if r2 != null goto label2;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", "Cannot initiate queryDisplayStatus");

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void invokeCallback(android.hardware.hdmi.IHdmiControlCallback,int)>(r1, 5);

        return;

     label2:
        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void addAndStartAction(com.android.server.hdmi.HdmiCecFeatureAction)>(r2);

        return;
    }

    private void invokeCallback(android.hardware.hdmi.IHdmiControlCallback, int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        android.hardware.hdmi.IHdmiControlCallback r1;
        int i0;
        android.os.RemoteException r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: android.hardware.hdmi.IHdmiControlCallback;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

     label1:
        interfaceinvoke r1.<android.hardware.hdmi.IHdmiControlCallback: void onComplete(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking callback failed:");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("HdmiCecLocalDevicePlayback", $r7);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void onHotplug(int, boolean)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0;
        boolean z0, $z1;
        com.android.server.hdmi.HdmiCecMessageCache $r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiCecMessageCache mCecMessageCache>;

        virtualinvoke $r1.<com.android.server.hdmi.HdmiCecMessageCache: void flushAll()>();

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label1:
        return;
    }

    void markActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 1;

        return;
    }

    protected boolean handleActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        byte[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void mayResetActiveSource(int)>(i0);

        return 1;
    }

    private void mayResetActiveSource(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 == $i1 goto label1;

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 0;

     label1:
        return;
    }

    protected boolean handleSetStreamPath(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        byte[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySetActiveSource(int)>(i0);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySendActiveSource()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void wakeUpIfActiveSource()>();

        return 1;
    }

    protected boolean handleRoutingChange(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        byte[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[],int)>($r2, 2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySetActiveSource(int)>(i0);

        return 1;
    }

    protected boolean handleRoutingInformation(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;
        int i0;
        byte[] $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        $r2 = virtualinvoke r1.<com.android.server.hdmi.HdmiCecMessage: byte[] getParams()>();

        i0 = staticinvoke <com.android.server.hdmi.HdmiUtils: int twoBytesToInt(byte[])>($r2);

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySetActiveSource(int)>(i0);

        return 1;
    }

    private void maySetActiveSource(int)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        int i0, $i1;
        com.android.server.hdmi.HdmiControlService $r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        if i0 != $i1 goto label1;

        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 1;

        goto label2;

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 0;

     label2:
        return;
    }

    private void wakeUpIfActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean $z0, $z1;
        com.android.server.hdmi.HdmiControlService $r1, $r2;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $z1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: boolean isPowerStandbyOrTransient()>();

        if $z1 == 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void wakeUp()>();

     label1:
        return;
    }

    private void maySendActiveSource()
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean $z0;
        com.android.server.hdmi.HdmiControlService $r1, $r2;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r3;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r1.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r3 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildActiveSource(int,int)>($i0, $i1);

        virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r3);

     label1:
        return;
    }

    protected boolean handleRequestActiveSource(com.android.server.hdmi.HdmiCecMessage)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.server.hdmi.HdmiCecMessage r1;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.server.hdmi.HdmiCecMessage;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void maySendActiveSource()>();

        return 1;
    }

    protected void disableDevice(boolean, com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        boolean z0, $z1;
        com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback r1;
        com.android.server.hdmi.HdmiControlService $r2, $r3;
        int $i0, $i1;
        com.android.server.hdmi.HdmiCecMessage $r4;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        z0 := @parameter0: boolean;

        r1 := @parameter1: com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void disableDevice(boolean,com.android.server.hdmi.HdmiCecLocalDevice$PendingActionClearedCallback)>(z0, r1);

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void assertRunOnServiceThread()>();

        if z0 != 0 goto label1;

        $z1 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: int mAddress>;

        $r2 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: com.android.server.hdmi.HdmiControlService mService>;

        $i1 = virtualinvoke $r2.<com.android.server.hdmi.HdmiControlService: int getPhysicalAddress()>();

        $r4 = staticinvoke <com.android.server.hdmi.HdmiCecMessageBuilder: com.android.server.hdmi.HdmiCecMessage buildInactiveSource(int,int)>($i0, $i1);

        virtualinvoke $r3.<com.android.server.hdmi.HdmiControlService: void sendCecCommand(com.android.server.hdmi.HdmiCecMessage)>($r4);

     label1:
        r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource> = 0;

        virtualinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: void checkIfPendingActionsCleared()>();

        return;
    }

    protected void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.hdmi.HdmiCecLocalDevicePlayback r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        boolean $z0;
        java.lang.String $r5;

        r0 := @this: com.android.server.hdmi.HdmiCecLocalDevicePlayback;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        specialinvoke r0.<com.android.server.hdmi.HdmiCecLocalDevice: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsActiveSource: ");

        $z0 = r0.<com.android.server.hdmi.HdmiCecLocalDevicePlayback: boolean mIsActiveSource>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r5);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.hdmi.HdmiCecLocalDevicePlayback: java.lang.String TAG> = "HdmiCecLocalDevicePlayback";

        return;
    }
}
