final class com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy extends java.lang.Object
{
    public static final int INVALID_WINDOW_ID;
    private static final int RETRIEVAL_ALLOWING_EVENT_TYPES;
    public java.util.List mWindows;
    public int mActiveWindowId;
    public int mFocusedWindowId;
    public int mAccessibilityFocusedWindowId;
    public long mAccessibilityFocusNodeId;
    public android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent;
    private boolean mTouchInteractionInProgress;
    final com.android.server.accessibility.AccessibilityManagerService this$0;

    void <init>(com.android.server.accessibility.AccessibilityManagerService)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService r1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId> = -1;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: long mAccessibilityFocusNodeId> = 2147483647L;

        return;
    }

    private boolean canDispatchAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1, $r5;
        int i0, $i1, $i2;
        android.view.accessibility.AccessibilityWindowInfo r2;
        com.android.server.accessibility.AccessibilityManagerService $r3;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r4;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        lookupswitch(i0)
        {
            case 32: goto label1;
            case 64: goto label2;
            case 128: goto label2;
            case 256: goto label2;
            case 512: goto label2;
            case 1024: goto label2;
            case 16384: goto label2;
            case 262144: goto label2;
            case 524288: goto label2;
            case 1048576: goto label2;
            case 2097152: goto label2;
            case 4194304: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback access$4700(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        if $r4 == null goto label2;

        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        r2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityWindowInfo findWindowById(int)>($i1);

        if r2 != null goto label2;

        $r5 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>(r1);

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent> = $r5;

        return 0;

     label2:
        return 1;

     label3:
        $i2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isRetrievalAllowingWindow(int)>($i2);

        return $z0;
    }

    public void clearWindowsLocked()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.util.List r1;
        int i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        i0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void updateWindowsLocked(java.util.List)>(r1);

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i0;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows> = null;

        return;
    }

    public void updateWindowsLocked(java.util.List)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.util.List r1, $r3, $r4, $r10, $r13, $r16;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        android.view.accessibility.AccessibilityWindowInfo r2, $r15, r18, r19;
        boolean $z0, $z2, $z4, $z5, z6;
        android.view.accessibility.AccessibilityEvent $r5, $r6, $r8;
        com.android.server.accessibility.AccessibilityManagerService $r7, $r9;
        java.lang.Object $r11, $r12, $r14;
        java.util.ArrayList $r17;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: java.util.List;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r3 != null goto label01;

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows> = $r17;

     label01:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = i0 - 1;

     label02:
        if i1 < 0 goto label03;

        $r16 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r14 = interfaceinvoke $r16.<java.util.List: java.lang.Object remove(int)>(i1);

        $r15 = (android.view.accessibility.AccessibilityWindowInfo) $r14;

        virtualinvoke $r15.<android.view.accessibility.AccessibilityWindowInfo: void recycle()>();

        i1 = i1 + -1;

        goto label02;

     label03:
        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId> = -1;

        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z0 != 0 goto label04;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = -1;

     label04:
        z6 = 1;

        i2 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 <= 0 goto label13;

        i3 = 0;

     label05:
        if i3 >= i2 goto label08;

        $r12 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (android.view.accessibility.AccessibilityWindowInfo) $r12;

        i4 = virtualinvoke r2.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        $z5 = virtualinvoke r2.<android.view.accessibility.AccessibilityWindowInfo: boolean isFocused()>();

        if $z5 == 0 goto label07;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId> = i4;

        $z4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z4 != 0 goto label06;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i4;

        virtualinvoke r2.<android.view.accessibility.AccessibilityWindowInfo: void setActive(boolean)>(1);

        goto label07;

     label06:
        $i11 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if i4 != $i11 goto label07;

        z6 = 0;

     label07:
        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r2);

        i3 = i3 + 1;

        goto label05;

     label08:
        $z2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z2 == 0 goto label09;

        if z6 == 0 goto label09;

        $i9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId>;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = $i9;

     label09:
        i12 = 0;

     label10:
        if i12 >= i2 goto label13;

        $r10 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i12);

        r18 = (android.view.accessibility.AccessibilityWindowInfo) $r11;

        $i6 = virtualinvoke r18.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        $i8 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i6 != $i8 goto label11;

        virtualinvoke r18.<android.view.accessibility.AccessibilityWindowInfo: void setActive(boolean)>(1);

     label11:
        $i7 = virtualinvoke r18.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        $i10 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        if $i7 != $i10 goto label12;

        virtualinvoke r18.<android.view.accessibility.AccessibilityWindowInfo: void setAccessibilityFocused(boolean)>(1);

     label12:
        i12 = i12 + 1;

        goto label10;

     label13:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void notifyWindowsChanged()>();

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent>;

        if $r5 == null goto label15;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent>;

        i13 = virtualinvoke $r6.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        r19 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityWindowInfo findWindowById(int)>(i13);

        if r19 == null goto label14;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent>;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i5 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r7);

        virtualinvoke $r9.<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>($r8, $i5);

     label14:
        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityEvent mShowingFocusedWindowEvent> = null;

     label15:
        return;
    }

    public boolean computePartialInteractiveRegionForWindowLocked(int, android.graphics.Region)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, $i3;
        android.graphics.Region r1, r2;
        boolean z0, $z1;
        android.view.accessibility.AccessibilityWindowInfo r3;
        android.graphics.Rect r4, r12;
        java.util.List $r5, $r6, $r7;
        java.lang.Object $r8;
        com.android.server.accessibility.AccessibilityManagerService $r9, $r11;
        android.graphics.Region$Op $r10;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Region;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r5 != null goto label1;

        return 0;

     label1:
        r2 = null;

        z0 = 0;

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        i2 = i1 - 1;

     label2:
        if i2 < 0 goto label5;

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (android.view.accessibility.AccessibilityWindowInfo) $r8;

        if r2 != null goto label3;

        $i3 = virtualinvoke r3.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        if $i3 != i0 goto label4;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        r4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect access$4500(com.android.server.accessibility.AccessibilityManagerService)>($r11);

        virtualinvoke r3.<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>(r4);

        virtualinvoke r1.<android.graphics.Region: boolean set(android.graphics.Rect)>(r4);

        r2 = r1;

        goto label4;

     label3:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        r12 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.graphics.Rect access$4500(com.android.server.accessibility.AccessibilityManagerService)>($r9);

        virtualinvoke r3.<android.view.accessibility.AccessibilityWindowInfo: void getBoundsInScreen(android.graphics.Rect)>(r12);

        $r10 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        $z1 = virtualinvoke r2.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r12, $r10);

        if $z1 == 0 goto label4;

        z0 = 1;

     label4:
        i2 = i2 + -1;

        goto label2;

     label5:
        return z0;
    }

    public void updateEventSourceLocked(android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0, $i1;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i1 = $i0 & 244159;

        if $i1 != 0 goto label1;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(null);

     label1:
        return;
    }

    public void updateActiveAndAccessibilityFocusedWindowLocked(int, long, int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0, $r13;
        int i0, i2, $i7, $i8, $i9, $i10, $i11, $i12;
        long l1, $l3, $l5;
        java.lang.Object r1, $r7, $r8, $r15, $r17, r25, r26, r27;
        java.lang.Throwable r2, r3, r4, r5, $r21, $r22, $r23, $r24;
        com.android.server.accessibility.AccessibilityManagerService $r6, $r9, $r11, $r14, $r16, $r18, $r19;
        byte $b4, $b6;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r10;
        android.os.Message $r12;
        boolean $z0;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r20;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        lookupswitch(i2)
        {
            case 32: goto label01;
            case 128: goto label08;
            case 32768: goto label15;
            case 65536: goto label22;
            default: goto label29;
        };

     label01:
        $r19 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r17 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r19);

        r1 = $r17;

        entermonitor $r17;

     label02:
        $r18 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r20 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback access$4700(com.android.server.accessibility.AccessibilityManagerService)>($r18);

        if $r20 != null goto label03;

        $i11 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowId()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId> = $i11;

        $i12 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId>;

        if i0 != $i12 goto label03;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i0;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r21 := @caughtexception;

        r2 = $r21;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        goto label29;

     label08:
        $r16 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r15 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r16);

        r25 = $r15;

        entermonitor $r15;

     label09:
        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z0 == 0 goto label10;

        $i10 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i10 == i0 goto label10;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void setActiveWindowLocked(int)>(i0);

     label10:
        exitmonitor r25;

     label11:
        goto label14;

     label12:
        $r24 := @caughtexception;

        r3 = $r24;

        exitmonitor r25;

     label13:
        throw r3;

     label14:
        goto label29;

     label15:
        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r8 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r9);

        r26 = $r8;

        entermonitor $r8;

     label16:
        $i8 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        if $i8 == i0 goto label17;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r10 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler access$2600(com.android.server.accessibility.AccessibilityManagerService)>($r11);

        $i9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        $r12 = virtualinvoke $r10.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,int,int)>(9, $i9, 0);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

        $r14 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r13 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy access$3100(com.android.server.accessibility.AccessibilityManagerService)>($r14);

        specialinvoke $r13.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void setAccessibilityFocusedWindowLocked(int)>(i0);

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: long mAccessibilityFocusNodeId> = l1;

     label17:
        exitmonitor r26;

     label18:
        goto label21;

     label19:
        $r23 := @caughtexception;

        r4 = $r23;

        exitmonitor r26;

     label20:
        throw r4;

     label21:
        goto label29;

     label22:
        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r7 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r6);

        r27 = $r7;

        entermonitor $r7;

     label23:
        $l3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: long mAccessibilityFocusNodeId>;

        $b4 = $l3 cmp l1;

        if $b4 != 0 goto label24;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: long mAccessibilityFocusNodeId> = 2147483647L;

     label24:
        $l5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: long mAccessibilityFocusNodeId>;

        $b6 = $l5 cmp 2147483647L;

        if $b6 != 0 goto label25;

        $i7 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        if $i7 != i0 goto label25;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId> = -1;

     label25:
        exitmonitor r27;

     label26:
        goto label29;

     label27:
        $r22 := @caughtexception;

        r5 = $r22;

        exitmonitor r27;

     label28:
        throw r5;

     label29:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label16 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label23 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public void onTouchInteractionStart()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        com.android.server.accessibility.AccessibilityManagerService $r3;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress> = 1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onTouchInteractionEnd()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0, $r6, $r8;
        java.lang.Object r1, $r4;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r2, $r14;
        com.android.server.accessibility.AccessibilityManagerService $r3, $r5, $r7, $r9, $r11;
        com.android.server.accessibility.AccessibilityManagerService$UserState $r10;
        boolean $z0;
        android.os.Message $r12;
        com.android.server.accessibility.AccessibilityManagerService$MainHandler $r13;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        r1 = $r4;

        entermonitor $r4;

     label1:
        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress> = 0;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r6 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy access$3100(com.android.server.accessibility.AccessibilityManagerService)>($r5);

        i0 = $r6.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mFocusedWindowId>;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void setActiveWindowLocked(int)>($i1);

        $r7 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r8 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy access$3100(com.android.server.accessibility.AccessibilityManagerService)>($r7);

        $i2 = $r8.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if i0 == $i2 goto label2;

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        if $i3 != i0 goto label2;

        $r9 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r10 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$UserState access$200(com.android.server.accessibility.AccessibilityManagerService)>($r9);

        $z0 = $r10.<com.android.server.accessibility.AccessibilityManagerService$UserState: boolean mAccessibilityFocusOnlyInActiveWindow>;

        if $z0 == 0 goto label2;

        $r11 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r13 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$MainHandler access$2600(com.android.server.accessibility.AccessibilityManagerService)>($r11);

        $r12 = virtualinvoke $r13.<com.android.server.accessibility.AccessibilityManagerService$MainHandler: android.os.Message obtainMessage(int,int,int)>(9, i0, 0);

        virtualinvoke $r12.<android.os.Message: void sendToTarget()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r14 := @caughtexception;

        r2 = $r14;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int getActiveWindowId()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $i0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i0 != -1 goto label1;

        $z0 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean mTouchInteractionInProgress>;

        if $z0 != 0 goto label1;

        $i2 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getFocusedWindowId()>();

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = $i2;

     label1:
        $i1 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        return $i1;
    }

    private void setActiveWindowLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, $i3, $i4;
        android.view.accessibility.AccessibilityWindowInfo r1;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if $i3 == i0 goto label5;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId> = i0;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r2 == null goto label4;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (android.view.accessibility.AccessibilityWindowInfo) $r5;

        $i4 = virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        if $i4 != i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: void setActive(boolean)>($z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void notifyWindowsChanged()>();

     label5:
        return;
    }

    private void setAccessibilityFocusedWindowLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, $i3, $i4;
        android.view.accessibility.AccessibilityWindowInfo r1;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $i3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId>;

        if $i3 == i0 goto label5;

        r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mAccessibilityFocusedWindowId> = i0;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r2 == null goto label4;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (android.view.accessibility.AccessibilityWindowInfo) $r5;

        $i4 = virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        if $i4 != i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: void setAccessibilityFocused(boolean)>($z0);

        i2 = i2 + 1;

        goto label1;

     label4:
        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void notifyWindowsChanged()>();

     label5:
        return;
    }

    private void notifyWindowsChanged()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        long l0, $l1;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.Throwable r2, $r7;
        com.android.server.accessibility.AccessibilityManagerService $r3, $r5, $r6;
        com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback $r4;
        int $i2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$WindowsForAccessibilityCallback access$4700(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        if $r4 != null goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(4194304);

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>($l1);

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r5 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i2 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r5);

        virtualinvoke $r6.<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>(r1, $i2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean canGetAccessibilityNodeInfoLocked(com.android.server.accessibility.AccessibilityManagerService$Service, int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isRetrievalAllowingWindow(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean canRetrieveWindowsLocked(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $z0 = virtualinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: boolean mRetrieveInteractiveWindows>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean canRetrieveWindowContentLocked(com.android.server.accessibility.AccessibilityManagerService$Service)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        com.android.server.accessibility.AccessibilityManagerService$Service r1;
        android.accessibilityservice.AccessibilityServiceInfo $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$Service;

        $r2 = r1.<com.android.server.accessibility.AccessibilityManagerService$Service: android.accessibilityservice.AccessibilityServiceInfo mAccessibilityServiceInfo>;

        $i0 = virtualinvoke $r2.<android.accessibilityservice.AccessibilityServiceInfo: int getCapabilities()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int resolveProfileParentLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i2, $i3;
        long l1;
        android.content.pm.UserInfo r1;
        java.lang.Throwable r2, $r7;
        com.android.server.accessibility.AccessibilityManagerService $r3, $r4;
        android.os.UserManager $r5;
        android.os.UserHandle $r6;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i3 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        if i0 == $i3 goto label6;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r5 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.os.UserManager access$4800(com.android.server.accessibility.AccessibilityManagerService)>($r4);

        r1 = virtualinvoke $r5.<android.os.UserManager: android.content.pm.UserInfo getProfileParent(int)>(i0);

        if r1 == null goto label3;

        $r6 = virtualinvoke r1.<android.content.pm.UserInfo: android.os.UserHandle getUserHandle()>();

        i2 = virtualinvoke $r6.<android.os.UserHandle: int getIdentifier()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return i2;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

     label6:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int resolveCallingUserIdEnforcingPermissionsLocked(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.server.accessibility.AccessibilityManagerService $r1, $r2, $r3, $r13;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.SecurityException $r6;
        java.lang.String $r14;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i1 == 0 goto label01;

        if i1 == 1000 goto label01;

        if i1 != 2000 goto label04;

     label01:
        if i0 == -2 goto label02;

        if i0 != -3 goto label03;

     label02:
        $r1 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i4 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r1);

        return $i4;

     label03:
        $i5 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        return $i5;

     label04:
        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i1);

        if i2 != i0 goto label05;

        $i8 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveProfileParentLocked(int)>(i0);

        return $i8;

     label05:
        i3 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int resolveProfileParentLocked(int)>(i2);

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i6 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r2);

        if i3 != $i6 goto label07;

        if i0 == -2 goto label06;

        if i0 != -3 goto label07;

     label06:
        $r13 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i9 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r13);

        return $i9;

     label07:
        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $z0 != 0 goto label08;

        $z1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $z1 != 0 goto label08;

        $r6 = new java.lang.SecurityException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call from user ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as user ");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission INTERACT_ACROSS_USERS or ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INTERACT_ACROSS_USERS_FULL not allowed.");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>($r14);

        throw $r6;

     label08:
        if i0 == -2 goto label09;

        if i0 != -3 goto label10;

     label09:
        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i7 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$100(com.android.server.accessibility.AccessibilityManagerService)>($r3);

        return $i7;

     label10:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Calling user can be changed to only UserHandle.USER_CURRENT or UserHandle.USER_CURRENT_OR_SELF.");

        throw $r4;
    }

    public boolean isCallerInteractingAcrossUsers(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 == $i3 goto label1;

        if i1 == 2000 goto label1;

        if i0 == -2 goto label1;

        if i0 != -3 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean isRetrievalAllowingWindow(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, $i1, $i2;
        android.view.accessibility.AccessibilityWindowInfo $r1;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 != 1000 goto label1;

        return 1;

     label1:
        $i2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int mActiveWindowId>;

        if i0 != $i2 goto label2;

        return 1;

     label2:
        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityWindowInfo findWindowById(int)>(i0);

        if $r1 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    private android.view.accessibility.AccessibilityWindowInfo findWindowById(int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0, i1, i2, $i3;
        android.view.accessibility.AccessibilityWindowInfo r1;
        java.util.List $r2, $r3, $r4;
        java.lang.Object $r5;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        if $r2 == null goto label3;

        $r3 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: java.util.List mWindows>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2);

        r1 = (android.view.accessibility.AccessibilityWindowInfo) $r5;

        $i3 = virtualinvoke r1.<android.view.accessibility.AccessibilityWindowInfo: int getId()>();

        if $i3 != i0 goto label2;

        return r1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    private void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1, r2, $r13;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$4900()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        if $i0 != $i1 goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean hasPermission(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You do not have ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" required to call ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r13);

        throw $r3;

     label2:
        return;
    }

    private boolean hasPermission(java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1;
        com.android.server.accessibility.AccessibilityManagerService $r2;
        android.content.Context $r3;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r3 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.content.Context access$1600(com.android.server.accessibility.AccessibilityManagerService)>($r2);

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>(r1);

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int getFocusedWindowId()
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.os.IBinder r1;
        java.lang.Object r2, $r7;
        java.lang.Throwable r3, $r9;
        com.android.server.accessibility.AccessibilityManagerService $r4, $r6, $r8;
        android.view.WindowManagerInternal $r5;
        int $i0;

        r0 := @this: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        $r4 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r5 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: android.view.WindowManagerInternal access$3600(com.android.server.accessibility.AccessibilityManagerService)>($r4);

        r1 = virtualinvoke $r5.<android.view.WindowManagerInternal: android.os.IBinder getFocusedWindowToken()>();

        $r6 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $r7 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: java.lang.Object access$000(com.android.server.accessibility.AccessibilityManagerService)>($r6);

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: com.android.server.accessibility.AccessibilityManagerService this$0>;

        $i0 = staticinvoke <com.android.server.accessibility.AccessibilityManagerService: int access$4400(com.android.server.accessibility.AccessibilityManagerService,android.os.IBinder)>($r8, r1);

        exitmonitor r2;

     label2:
        return $i0;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static boolean access$1000(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy, android.view.accessibility.AccessibilityEvent)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $z0 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canDispatchAccessibilityEventLocked(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z0;
    }

    static void access$1100(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy, java.lang.String, java.lang.String)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void enforceCallingPermission(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static android.view.accessibility.AccessibilityWindowInfo access$1500(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy, int)
    {
        com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy r0;
        int i0;
        android.view.accessibility.AccessibilityWindowInfo $r1;

        r0 := @parameter0: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: android.view.accessibility.AccessibilityWindowInfo findWindowById(int)>(i0);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int RETRIEVAL_ALLOWING_EVENT_TYPES> = 244159;

        <com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int INVALID_WINDOW_ID> = -1;

        return;
    }
}
