class com.android.server.job.JobStore$WriteJobsMapToDiskRunnable extends java.lang.Object implements java.lang.Runnable
{
    final com.android.server.job.JobStore this$0;

    private void <init>(com.android.server.job.JobStore)
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        com.android.server.job.JobStore r1;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: com.android.server.job.JobStore;

        r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        java.util.ArrayList r1, $r6;
        com.android.server.job.JobStore r2, $r7, $r8, $r11;
        int i1, $i2, $i3;
        com.android.server.job.controllers.JobStatus r3, r4, $r12;
        java.lang.Throwable r5, $r15;
        android.util.ArraySet $r9, $r10;
        java.lang.Object $r13;
        android.app.job.JobInfo $r14;
        long $l4, $l5;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        i1 = 0;

     label2:
        $r8 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        $r9 = $r8.<com.android.server.job.JobStore: android.util.ArraySet mJobSet>;

        $i2 = virtualinvoke $r9.<android.util.ArraySet: int size()>();

        if i1 >= $i2 goto label3;

        $r11 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        $r10 = $r11.<com.android.server.job.JobStore: android.util.ArraySet mJobSet>;

        $r13 = virtualinvoke $r10.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.job.controllers.JobStatus) $r13;

        $r12 = new com.android.server.job.controllers.JobStatus;

        $r14 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $i3 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $l5 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: long getEarliestRunTime()>();

        $l4 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: long getLatestRunTimeElapsed()>();

        specialinvoke $r12.<com.android.server.job.controllers.JobStatus: void <init>(android.app.job.JobInfo,int,long,long)>($r14, $i3, $l5, $l4);

        r4 = $r12;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r2;

     label6:
        throw r5;

     label7:
        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void writeJobsMapImpl(java.util.List)>(r1);

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void writeJobsMapImpl(java.util.List)
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        java.util.List r1;
        java.io.ByteArrayOutputStream r2, $r5;
        com.android.internal.util.FastXmlSerializer r3, $r6;
        int i0, $i1;
        com.android.server.job.controllers.JobStatus r4;
        java.lang.Boolean $r7;
        java.lang.String $r9;
        com.android.server.job.JobStore $r11, $r14, $r16;
        android.util.AtomicFile $r13, $r17;
        byte[] $r15;
        java.lang.Object $r18;
        android.os.PersistableBundle $r19;
        java.io.IOException $r21;
        org.xmlpull.v1.XmlPullParserException $r23;
        java.io.FileOutputStream r24;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: java.util.List;

     label1:
        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = $r5;

        $r6 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke $r6.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        r3 = $r6;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>(r2, "utf-8");

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r7);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#indent-output", 1);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "job-info");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(0);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "version", $r9);

        i0 = 0;

     label2:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r18 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (com.android.server.job.controllers.JobStatus) $r18;

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "job");

        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void addIdentifierAttributesToJobTag(org.xmlpull.v1.XmlSerializer,com.android.server.job.controllers.JobStatus)>(r3, r4);

        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void writeConstraintsToXml(org.xmlpull.v1.XmlSerializer,com.android.server.job.controllers.JobStatus)>(r3, r4);

        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void writeExecutionCriteriaToXml(org.xmlpull.v1.XmlSerializer,com.android.server.job.controllers.JobStatus)>(r3, r4);

        $r19 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: android.os.PersistableBundle getExtras()>();

        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void writeBundleToXml(android.os.PersistableBundle,org.xmlpull.v1.XmlSerializer)>($r19, r3);

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "job");

        i0 = i0 + 1;

        goto label2;

     label3:
        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "job-info");

        interfaceinvoke r3.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        $r11 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        $r13 = staticinvoke <com.android.server.job.JobStore: android.util.AtomicFile access$100(com.android.server.job.JobStore)>($r11);

        r24 = virtualinvoke $r13.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r15 = virtualinvoke r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r24.<java.io.FileOutputStream: void write(byte[])>($r15);

        $r14 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        $r17 = staticinvoke <com.android.server.job.JobStore: android.util.AtomicFile access$100(com.android.server.job.JobStore)>($r14);

        virtualinvoke $r17.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r24);

        $r16 = r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: com.android.server.job.JobStore this$0>;

        staticinvoke <com.android.server.job.JobStore: int access$202(com.android.server.job.JobStore,int)>($r16, 0);

     label4:
        goto label7;

     label5:
        $r21 := @caughtexception;

        goto label7;

     label6:
        $r23 := @caughtexception;

     label7:
        return;

        catch java.io.IOException from label1 to label4 with label5;
        catch org.xmlpull.v1.XmlPullParserException from label1 to label4 with label6;
    }

    private void addIdentifierAttributesToJobTag(org.xmlpull.v1.XmlSerializer, com.android.server.job.controllers.JobStatus) throws java.io.IOException
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        org.xmlpull.v1.XmlSerializer r1;
        com.android.server.job.controllers.JobStatus r2;
        int $i0, $i1;
        java.lang.String $r3, $r6, $r10, $r11;
        android.content.ComponentName $r5, $r8;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        $i0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "jobid", $r3);

        $r5 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r6 = virtualinvoke $r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "package", $r6);

        $r8 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.content.ComponentName getServiceComponent()>();

        $r10 = virtualinvoke $r8.<android.content.ComponentName: java.lang.String getClassName()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "class", $r10);

        $i1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "uid", $r11);

        return;
    }

    private void writeBundleToXml(android.os.PersistableBundle, org.xmlpull.v1.XmlSerializer) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        android.os.PersistableBundle r1;
        org.xmlpull.v1.XmlSerializer r2;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: android.os.PersistableBundle;

        r2 := @parameter1: org.xmlpull.v1.XmlSerializer;

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "extras");

        virtualinvoke r1.<android.os.PersistableBundle: void saveToXml(org.xmlpull.v1.XmlSerializer)>(r2);

        interfaceinvoke r2.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "extras");

        return;
    }

    private void writeConstraintsToXml(org.xmlpull.v1.XmlSerializer, com.android.server.job.controllers.JobStatus) throws java.io.IOException
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        org.xmlpull.v1.XmlSerializer r1;
        com.android.server.job.controllers.JobStatus r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r5, $r7, $r9, $r11;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "constraints");

        $z0 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasUnmeteredConstraint()>();

        if $z0 == 0 goto label1;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "unmetered", $r11);

     label1:
        $z1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasConnectivityConstraint()>();

        if $z1 == 0 goto label2;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "connectivity", $r9);

     label2:
        $z2 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasIdleConstraint()>();

        if $z2 == 0 goto label3;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "idle", $r7);

     label3:
        $z3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasChargingConstraint()>();

        if $z3 == 0 goto label4;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "charging", $r5);

     label4:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "constraints");

        return;
    }

    private void writeExecutionCriteriaToXml(org.xmlpull.v1.XmlSerializer, com.android.server.job.controllers.JobStatus) throws java.io.IOException
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        org.xmlpull.v1.XmlSerializer r1;
        com.android.server.job.controllers.JobStatus r2;
        android.app.job.JobInfo r3, $r4, $r6, $r13;
        long l0, $l1, $l4, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, l15;
        boolean $z0, $z1, $z2, $z3;
        byte $b2;
        int $i3, $i5;
        java.lang.String $r8, $r9, $r14, $r17, $r20;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        r2 := @parameter1: com.android.server.job.controllers.JobStatus;

        r3 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $r4 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $z0 = virtualinvoke $r4.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "periodic");

        $l14 = virtualinvoke r3.<android.app.job.JobInfo: long getIntervalMillis()>();

        $r20 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l14);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "period", $r20);

        goto label2;

     label1:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "one-off");

     label2:
        $z1 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasDeadlineConstraint()>();

        if $z1 == 0 goto label3;

        $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l11 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: long getLatestRunTimeElapsed()>();

        $l12 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l13 = $l11 - $l12;

        l0 = $l10 + $l13;

        $r17 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "deadline", $r17);

     label3:
        $z2 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: boolean hasTimingDelayConstraint()>();

        if $z2 == 0 goto label4;

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: long getEarliestRunTime()>();

        $l8 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l9 = $l6 - $l8;

        l15 = $l7 + $l9;

        $r14 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l15);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "delay", $r14);

     label4:
        $r6 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $l1 = virtualinvoke $r6.<android.app.job.JobInfo: long getInitialBackoffMillis()>();

        $b2 = $l1 cmp 30000L;

        if $b2 != 0 goto label5;

        $r13 = virtualinvoke r2.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $i5 = virtualinvoke $r13.<android.app.job.JobInfo: int getBackoffPolicy()>();

        if $i5 == 1 goto label6;

     label5:
        $i3 = virtualinvoke r3.<android.app.job.JobInfo: int getBackoffPolicy()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "backoff-policy", $r8);

        $l4 = virtualinvoke r3.<android.app.job.JobInfo: long getInitialBackoffMillis()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l4);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "initial-backoff", $r9);

     label6:
        $z3 = virtualinvoke r3.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z3 == 0 goto label7;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "periodic");

        goto label8;

     label7:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "one-off");

     label8:
        return;
    }

    void <init>(com.android.server.job.JobStore, com.android.server.job.JobStore$1)
    {
        com.android.server.job.JobStore$WriteJobsMapToDiskRunnable r0;
        com.android.server.job.JobStore r1;
        com.android.server.job.JobStore$1 r2;

        r0 := @this: com.android.server.job.JobStore$WriteJobsMapToDiskRunnable;

        r1 := @parameter0: com.android.server.job.JobStore;

        r2 := @parameter1: com.android.server.job.JobStore$1;

        specialinvoke r0.<com.android.server.job.JobStore$WriteJobsMapToDiskRunnable: void <init>(com.android.server.job.JobStore)>(r1);

        return;
    }
}
