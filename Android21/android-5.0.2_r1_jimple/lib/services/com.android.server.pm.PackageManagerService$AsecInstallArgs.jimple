class com.android.server.pm.PackageManagerService$AsecInstallArgs extends com.android.server.pm.PackageManagerService$InstallArgs
{
    static final java.lang.String RES_FILE_NAME;
    static final java.lang.String PUBLIC_RES_FILE_NAME;
    java.lang.String cid;
    java.lang.String packagePath;
    java.lang.String resourcePath;
    java.lang.String legacyNativeLibraryDir;
    final com.android.server.pm.PackageManagerService this$0;

    void <init>(com.android.server.pm.PackageManagerService, com.android.server.pm.PackageManagerService$InstallParams)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        com.android.server.pm.PackageManagerService$InstallParams r2;
        com.android.server.pm.PackageManagerService$OriginInfo $r3;
        android.content.pm.IPackageInstallObserver2 $r4;
        int $i0;
        java.lang.String $r5, $r8;
        android.content.pm.ManifestDigest $r6;
        android.os.UserHandle $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: com.android.server.pm.PackageManagerService$InstallParams;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r3 = r2.<com.android.server.pm.PackageManagerService$InstallParams: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r4 = r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.IPackageInstallObserver2 observer>;

        $i0 = r2.<com.android.server.pm.PackageManagerService$InstallParams: int installFlags>;

        $r5 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String installerPackageName>;

        $r6 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.content.pm.ManifestDigest getManifestDigest()>();

        $r7 = virtualinvoke r2.<com.android.server.pm.PackageManagerService$InstallParams: android.os.UserHandle getUser()>();

        $r8 = r2.<com.android.server.pm.PackageManagerService$InstallParams: java.lang.String packageAbiOverride>;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String)>($r3, $r4, $i0, $r5, $r6, $r7, null, $r8);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String[], boolean, boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, r4, $r7;
        java.lang.String[] r3;
        boolean z0, z1, $z2;
        int i0, i1, $i3;
        com.android.server.pm.PackageManagerService$OriginInfo $r5;
        byte $b2, $b4, $b5;
        java.io.File $r6;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r5 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        if z0 == 0 goto label1;

        $b5 = 8;

        goto label2;

     label1:
        $b5 = 0;

     label2:
        if z1 == 0 goto label3;

        $b4 = 1;

        goto label4;

     label3:
        $b4 = 0;

     label4:
        $b2 = $b5 | $b4;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String)>($r5, null, $b2, null, null, null, r3, null);

        $z2 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>("pkg.apk");

        if $z2 != 0 goto label5;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r2, "pkg.apk");

        r2 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

     label5:
        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        i1 = virtualinvoke r4.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        $i3 = i1 + 1;

        $r7 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i3, i0);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r7;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(r4);

        return;
    }

    void <init>(com.android.server.pm.PackageManagerService, java.lang.String, java.lang.String[], boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService r1;
        java.lang.String r2, $r5;
        java.lang.String[] r3;
        boolean z0, $z1;
        com.android.server.pm.PackageManagerService$OriginInfo $r4;
        byte $b0, $b1, $b2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.server.pm.PackageManagerService;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0> = r1;

        $r4 = staticinvoke <com.android.server.pm.PackageManagerService$OriginInfo: com.android.server.pm.PackageManagerService$OriginInfo fromNothing()>();

        $z1 = staticinvoke <com.android.server.pm.PackageManagerService: boolean access$3600(com.android.server.pm.PackageManagerService,java.lang.String)>(r1, r2);

        if $z1 == 0 goto label1;

        $b2 = 8;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        if z0 == 0 goto label3;

        $b1 = 1;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        $b0 = $b2 | $b1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(com.android.server.pm.PackageManagerService$OriginInfo,android.content.pm.IPackageInstallObserver2,int,java.lang.String,android.content.pm.ManifestDigest,android.os.UserHandle,java.lang.String[],java.lang.String)>($r4, null, $b0, null, null, null, r3, null);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = r2;

        $r5 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(r2);

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>($r5);

        return;
    }

    void createCopyFile()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.server.pm.PackageManagerService $r1;
        com.android.server.pm.PackageInstallerService $r2;
        java.lang.String $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r2 = $r1.<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageInstallerService mInstallerService>;

        $r3 = virtualinvoke $r2.<com.android.server.pm.PackageInstallerService: java.lang.String allocateExternalStageCidLegacy()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r3;

        return;
    }

    boolean checkFreeStorage(com.android.internal.app.IMediaContainerService) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        long l0, $l1;
        java.io.File r2;
        android.os.storage.StorageManager r3;
        java.lang.String $r4, $r5;
        boolean $z0, $z1, $z2;
        com.android.server.pm.PackageManagerService $r6;
        android.content.Context $r7;
        byte $b2;
        android.os.Environment$UserEnvironment $r8;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        $r5 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String abiOverride>;

        l0 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: long calculateInstalledSize(java.lang.String,boolean,java.lang.String)>($r4, $z0, $r5);

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternal()>();

        if $z1 == 0 goto label1;

        $r8 = new android.os.Environment$UserEnvironment;

        specialinvoke $r8.<android.os.Environment$UserEnvironment: void <init>(int)>(0);

        r2 = virtualinvoke $r8.<android.os.Environment$UserEnvironment: java.io.File getExternalStorageDirectory()>();

        goto label2;

     label1:
        r2 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

     label2:
        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r7 = $r6.<com.android.server.pm.PackageManagerService: android.content.Context mContext>;

        r3 = staticinvoke <android.os.storage.StorageManager: android.os.storage.StorageManager 'from'(android.content.Context)>($r7);

        $l1 = virtualinvoke r3.<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)>(r2);

        $b2 = l0 cmp $l1;

        if $b2 > 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        com.android.internal.app.IMediaContainerService r1;
        boolean z0, $z1, $z3, $z4;
        java.lang.String r2, $r4, $r7, $r8, $r9, $r10, $r11, $r13, $r17, $r18, $r20, $r21;
        com.android.server.pm.PackageManagerService$OriginInfo $r3, $r5, $r14, $r19;
        java.io.File $r6;
        java.lang.StringBuilder $r12, $r15, $r16;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: com.android.internal.app.IMediaContainerService;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $z1 = $r3.<com.android.server.pm.PackageManagerService$OriginInfo: boolean staged>;

        if $z1 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r13 = $r14.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String cid>;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already staged; skipping copy");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("PackageManager", $r17);

        $r19 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r18 = $r19.<com.android.server.pm.PackageManagerService$OriginInfo: java.lang.String cid>;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = $r18;

        $r21 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r20 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>($r21);

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>($r20);

        return 1;

     label1:
        if z0 == 0 goto label2;

        virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void createCopyFile()>();

        goto label3;

     label2:
        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r4);

     label3:
        $r5 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService$OriginInfo origin>;

        $r6 = $r5.<com.android.server.pm.PackageManagerService$OriginInfo: java.io.File file>;

        $r7 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r9 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $z3 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isExternal()>();

        $z4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        $r10 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String abiOverride>;

        $r11 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$3700(java.lang.String,com.android.server.pm.PackageSetting)>($r10, null);

        r2 = interfaceinvoke r1.<com.android.internal.app.IMediaContainerService: java.lang.String copyPackageToContainer(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String)>($r7, $r8, $r9, $z3, $z4, $r11);

        if r2 == null goto label4;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(r2);

        return 1;

     label4:
        return -18;
    }

    java.lang.String getCodePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        return $r1;
    }

    java.lang.String getResourcePath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath>;

        return $r1;
    }

    java.lang.String getLegacyNativeLibraryPath()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String legacyNativeLibraryDir>;

        return $r1;
    }

    int doPreInstall(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0;
        boolean z0;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        $r5 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r5);

        goto label3;

     label1:
        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r2);

        if z0 != 0 goto label3;

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r4 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        r1 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r3, $r4, 1000);

        if r1 == null goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(r1);

        goto label3;

     label2:
        return -18;

     label3:
        return i0;
    }

    boolean doRename(int, android.content.pm.PackageParser$Package, java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0;
        android.content.pm.PackageParser$Package r1;
        java.lang.String r2, r3, $r6, $r7, $r8, $r10, $r16, $r20, $r21, $r22, $r25, $r26, $r27, $r29, $r31, $r37, $r43, $r44, $r48, $r51, $r53, $r57, $r59, $r65, $r69, $r71, $r73, $r74, r76;
        java.io.File r4, r5, $r18, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14, $r15, $r17, $r39, $r40, $r41, $r42, $r45, $r46, $r47, $r49, $r50, $r52, $r54, $r55, $r56, $r58, $r60, $r61, $r62, $r63, $r64, $r66, $r67, $r68, $r70, $r72, $r75;
        java.lang.String[] $r23, $r24, $r33, $r35;
        android.content.pm.ApplicationInfo $r28, $r30, $r32, $r34, $r36, $r38;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.pm.PackageParser$Package;

        r2 := @parameter2: java.lang.String;

        $r6 = r1.<android.content.pm.PackageParser$Package: java.lang.String packageName>;

        r3 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String access$3800(java.lang.String,java.lang.String,java.lang.String)>(r2, $r6, "/pkg.apk");

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r7);

        if $z0 == 0 goto label1;

        $r71 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z5 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r71);

        if $z5 != 0 goto label1;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to unmount ");

        $r74 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r75 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r74);

        $r72 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before renaming");

        $r73 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("PackageManager", $r73);

        return 0;

     label1:
        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r8, r3);

        if $z1 != 0 goto label3;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r53 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r49 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which might be stale. Will try to clean up.");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r51);

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>(r3);

        if $z3 != 0 goto label2;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Very strange. Cannot clean up stale container ");

        $r70 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r69);

        return 0;

     label2:
        $r59 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z4 = staticinvoke <com.android.internal.content.PackageHelper: boolean renameSdDir(java.lang.String,java.lang.String)>($r59, r3);

        if $z4 != 0 goto label3;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename ");

        $r57 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r64 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r66 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" inspite of cleaning it up.");

        $r65 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r65);

        return 0;

     label3:
        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>(r3);

        if $z2 != 0 goto label4;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mounting container ");

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r44);

        $r48 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        r76 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>(r3, $r48, 1000);

        goto label5;

     label4:
        r76 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String getSdDir(java.lang.String)>(r3);

     label5:
        if r76 != null goto label6;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get cache path for  ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r43 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r43);

        return 0;

     label6:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Succesfully renamed ");

        $r10 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at new path: ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("PackageManager", $r16);

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid> = r3;

        $r18 = new java.io.File;

        $r20 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>($r20);

        r4 = $r18;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void setMountPath(java.lang.String)>(r76);

        $r19 = new java.io.File;

        $r22 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        specialinvoke $r19.<java.io.File: void <init>(java.lang.String)>($r22);

        r5 = $r19;

        $r21 = virtualinvoke r5.<java.io.File: java.lang.String getAbsolutePath()>();

        r1.<android.content.pm.PackageParser$Package: java.lang.String codePath> = $r21;

        $r25 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        $r26 = staticinvoke <android.os.FileUtils: java.lang.String rewriteAfterRename(java.io.File,java.io.File,java.lang.String)>(r4, r5, $r25);

        r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath> = $r26;

        $r23 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        $r24 = staticinvoke <android.os.FileUtils: java.lang.String[] rewriteAfterRename(java.io.File,java.io.File,java.lang.String[])>(r4, r5, $r23);

        r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths> = $r24;

        $r30 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r29 = r1.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r30.<android.content.pm.ApplicationInfo: void setCodePath(java.lang.String)>($r29);

        $r28 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r27 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r28.<android.content.pm.ApplicationInfo: void setBaseCodePath(java.lang.String)>($r27);

        $r34 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r33 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r34.<android.content.pm.ApplicationInfo: void setSplitCodePaths(java.lang.String[])>($r33);

        $r32 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r31 = r1.<android.content.pm.PackageParser$Package: java.lang.String codePath>;

        virtualinvoke $r32.<android.content.pm.ApplicationInfo: void setResourcePath(java.lang.String)>($r31);

        $r38 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r37 = r1.<android.content.pm.PackageParser$Package: java.lang.String baseCodePath>;

        virtualinvoke $r38.<android.content.pm.ApplicationInfo: void setBaseResourcePath(java.lang.String)>($r37);

        $r36 = r1.<android.content.pm.PackageParser$Package: android.content.pm.ApplicationInfo applicationInfo>;

        $r35 = r1.<android.content.pm.PackageParser$Package: java.lang.String[] splitCodePaths>;

        virtualinvoke $r36.<android.content.pm.ApplicationInfo: void setSplitResourcePaths(java.lang.String[])>($r35);

        return 1;
    }

    private void setMountPath(java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String r1, $r6, $r7, $r9, $r10, $r11, $r13;
        java.io.File r2, r3, $r4, $r5, $r8, $r12;
        boolean $z0, $z1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        r2 = $r4;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "pkg.apk");

        r3 = $r5;

        $z0 = virtualinvoke r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath> = $r10;

        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z1 == 0 goto label1;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "res.zip");

        $r13 = virtualinvoke $r12.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r13;

        goto label3;

     label1:
        $r11 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r11;

        goto label3;

     label2:
        $r6 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath> = $r6;

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String packagePath>;

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String resourcePath> = $r7;

     label3:
        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, "lib");

        $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String legacyNativeLibraryDir> = $r9;

        return;
    }

    int doPostInstall(int, int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0, i1, i2, $i4;
        java.lang.String r1, $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean z0, $z1, $z3;
        java.lang.StringBuilder $r2, $r3, $r5;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 1 goto label1;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

        goto label6;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z1 == 0 goto label2;

        i2 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(i1);

        r1 = "pkg.apk";

        goto label3;

     label2:
        i2 = -1;

        r1 = null;

     label3:
        if i1 < 10000 goto label4;

        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r8, i2, r1);

        if $z3 != 0 goto label5;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r4 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r6);

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r7);

        return -18;

     label5:
        $r9 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        z0 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r9);

        if z0 != 0 goto label6;

        $r11 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r10 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>();

        $i4 = staticinvoke <android.os.Process: int myUid()>();

        staticinvoke <com.android.internal.content.PackageHelper: java.lang.String mountSdDir(java.lang.String,java.lang.String,int)>($r11, $r10, $i4);

     label6:
        return i0;
    }

    private void cleanUp()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r1);

        return;
    }

    private java.util.List getAllCodePaths()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.io.File r1, $r3;
        android.content.pm.PackageParser$PackageLite r2;
        java.lang.String $r4;
        java.util.List $r5, $r6;
        boolean $z0;
        android.content.pm.PackageParser$PackageParserException $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r3 = new java.io.File;

        $r4 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String getCodePath()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r4);

        r1 = $r3;

        if r1 == null goto label4;

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

     label1:
        r2 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>(r1, 0);

        $r6 = virtualinvoke r2.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

     label4:
        $r5 = <java.util.Collections: java.util.List EMPTY_LIST>;

        return $r5;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
    }

    void cleanUpResourcesLI()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.util.List $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.util.List getAllCodePaths()>();

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUpResourcesLI(java.util.List)>($r1);

        return;
    }

    private void cleanUpResourcesLI(java.util.List)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.util.List r1;
        java.lang.String[] r2, r5, $r7, $r8;
        java.util.Iterator r3;
        java.lang.String r4, r6, $r17;
        int i0, i1, i2;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r9;
        java.lang.Object $r10;
        com.android.server.pm.Installer $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16;
        java.lang.IllegalStateException $r18;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUp()>();

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String[] instructionSets>;

        if $r7 != null goto label1;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("instructionSet == null");

        throw $r18;

     label1:
        $r8 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String[] instructionSets>;

        r2 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String[] access$3500(java.lang.String[])>($r8);

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r10;

        r5 = r2;

        i0 = lengthof r5;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r6 = r5[i1];

        $r9 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $r11 = $r9.<com.android.server.pm.PackageManagerService: com.android.server.pm.Installer mInstaller>;

        i2 = virtualinvoke $r11.<com.android.server.pm.Installer: int rmdex(java.lang.String,java.lang.String)>(r4, r6);

        if i2 >= 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t remove dex file for package:  at location ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", retcode=");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("PackageManager", $r17);

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        goto label2;

     label6:
        return;
    }

    boolean matchContainer(java.lang.String)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String r1, $r2;
        boolean $z0;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    java.lang.String getPackageName()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r2 = staticinvoke <com.android.server.pm.PackageManagerService: java.lang.String getAsecPackageName(java.lang.String)>($r1);

        return $r2;
    }

    boolean doPostDeleteLI(boolean)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        boolean z0, z1, $z2, $z3;
        java.util.List r1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        z0 := @parameter0: boolean;

        r1 = specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.util.List getAllCodePaths()>();

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean isContainerMounted(java.lang.String)>($r2);

        if z1 == 0 goto label1;

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean unMountSdDir(java.lang.String)>($r3);

        if $z3 == 0 goto label1;

        z1 = 0;

     label1:
        if z1 != 0 goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: void cleanUpResourcesLI(java.util.List)>(r1);

     label2:
        if z1 != 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        boolean $z0, $z1;
        com.android.server.pm.PackageManagerService $r1;
        java.lang.String $r2;
        int $i0;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r1 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: com.android.server.pm.PackageManagerService this$0>;

        $i0 = virtualinvoke $r1.<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>("com.android.defcontainer", 0);

        $z1 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r2, $i0, "pkg.apk");

        if $z1 != 0 goto label1;

        return -18;

     label1:
        return 1;
    }

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$AsecInstallArgs r0;
        int i0, $i2;
        boolean $z0, $z2;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5, $r6, $r7;

        r0 := @this: com.android.server.pm.PackageManagerService$AsecInstallArgs;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: boolean isFwdLocked()>();

        if $z0 == 0 goto label2;

        if i0 < 10000 goto label1;

        $r7 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $i2 = staticinvoke <android.os.UserHandle: int getSharedAppGid(int)>(i0);

        $z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fixSdPermissions(java.lang.String,int,java.lang.String)>($r7, $i2, "pkg.apk");

        if $z2 != 0 goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to finalize ");

        $r3 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("PackageManager", $r5);

        $r6 = r0.<com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String cid>;

        staticinvoke <com.android.internal.content.PackageHelper: boolean destroySdDir(java.lang.String)>($r6);

        return -18;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String PUBLIC_RES_FILE_NAME> = "res.zip";

        <com.android.server.pm.PackageManagerService$AsecInstallArgs: java.lang.String RES_FILE_NAME> = "pkg.apk";

        return;
    }
}
