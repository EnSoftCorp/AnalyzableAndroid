final class com.android.server.wm.AccessibilityController extends java.lang.Object
{
    private final com.android.server.wm.WindowManagerService mWindowManagerService;
    private static final float[] sTempFloats;
    private com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier;
    private com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver;

    public void <init>(com.android.server.wm.WindowManagerService)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowManagerService r1;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowManagerService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mWindowManagerService> = r1;

        return;
    }

    public void setMagnificationCallbacksLocked(android.view.WindowManagerInternal$MagnificationCallbacks)
    {
        com.android.server.wm.AccessibilityController r0;
        android.view.WindowManagerInternal$MagnificationCallbacks r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r3, $r5, $r6;
        java.lang.IllegalStateException $r4, $r8;
        com.android.server.wm.WindowManagerService $r7;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: android.view.WindowManagerInternal$MagnificationCallbacks;

        if r1 == null goto label2;

        $r5 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r5 == null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks already set!");

        throw $r8;

     label1:
        $r6 = new com.android.server.wm.AccessibilityController$DisplayMagnifier;

        $r7 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mWindowManagerService>;

        specialinvoke $r6.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void <init>(com.android.server.wm.WindowManagerService,android.view.WindowManagerInternal$MagnificationCallbacks)>($r7, r1);

        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier> = $r6;

        goto label4;

     label2:
        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 != null goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Magnification callbacks already cleared!");

        throw $r4;

     label3:
        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r3.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void destroyLocked()>();

        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier> = null;

     label4:
        return;
    }

    public void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)
    {
        com.android.server.wm.AccessibilityController r0;
        android.view.WindowManagerInternal$WindowsForAccessibilityCallback r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r2, $r4, $r5;
        java.lang.IllegalStateException $r3, $r7;
        com.android.server.wm.WindowManagerService $r6;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: android.view.WindowManagerInternal$WindowsForAccessibilityCallback;

        if r1 == null goto label2;

        $r4 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r4 == null goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Windows for accessibility callback already set!");

        throw $r7;

     label1:
        $r5 = new com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver;

        $r6 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.WindowManagerService mWindowManagerService>;

        specialinvoke $r5.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void <init>(com.android.server.wm.WindowManagerService,android.view.WindowManagerInternal$WindowsForAccessibilityCallback)>($r6, r1);

        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver> = $r5;

        goto label4;

     label2:
        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Windows for accessibility callback already cleared!");

        throw $r3;

     label3:
        r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver> = null;

     label4:
        return;
    }

    public void setMagnificationSpecLocked(android.view.MagnificationSpec)
    {
        com.android.server.wm.AccessibilityController r0;
        android.view.MagnificationSpec r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r5;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r3, $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: android.view.MagnificationSpec;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r5.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void setMagnificationSpecLocked(android.view.MagnificationSpec)>(r1);

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r4.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void onRectangleOnScreenRequestedLocked(android.graphics.Rect)
    {
        com.android.server.wm.AccessibilityController r0;
        android.graphics.Rect r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r3.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onRectangleOnScreenRequestedLocked(android.graphics.Rect)>(r1);

     label1:
        return;
    }

    public void onWindowLayersChangedLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r1, $r4;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r2, $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r1 == null goto label1;

        $r4 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r4.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onWindowLayersChangedLocked()>();

     label1:
        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r3.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void onRotationChangedLocked(com.android.server.wm.DisplayContent, int)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.DisplayContent r1;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r5;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r3, $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.DisplayContent;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r5.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onRotationChangedLocked(com.android.server.wm.DisplayContent,int)>(r1, i0);

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r4.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void onAppWindowTransitionLocked(com.android.server.wm.WindowState, int)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowState r1;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r3;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r3.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onAppWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r1, i0);

     label1:
        return;
    }

    public void onWindowTransitionLocked(com.android.server.wm.WindowState, int)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowState r1;
        int i0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r5;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r3, $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r5.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)>(r1, i0);

     label1:
        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r4.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label2:
        return;
    }

    public void onWindowFocusChangedLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r1, $r2;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r2.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label1:
        return;
    }

    public void onSomeWindowResizedOrMovedLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r1, $r2;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        virtualinvoke $r2.<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()>();

     label1:
        return;
    }

    public void drawMagnifiedRegionBorderIfNeededLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r1, $r2;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        virtualinvoke $r2.<com.android.server.wm.AccessibilityController$DisplayMagnifier: void drawMagnifiedRegionBorderIfNeededLocked()>();

     label1:
        return;
    }

    public android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.WindowState r1;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r2, $r3;
        android.view.MagnificationSpec $r4;

        r0 := @this: com.android.server.wm.AccessibilityController;

        r1 := @parameter0: com.android.server.wm.WindowState;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        $r4 = virtualinvoke $r3.<com.android.server.wm.AccessibilityController$DisplayMagnifier: android.view.MagnificationSpec getMagnificationSpecForWindowLocked(com.android.server.wm.WindowState)>(r1);

        return $r4;

     label1:
        return null;
    }

    public boolean hasCallbacksLocked()
    {
        com.android.server.wm.AccessibilityController r0;
        com.android.server.wm.AccessibilityController$DisplayMagnifier $r1;
        com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver $r2;
        boolean $z0;

        r0 := @this: com.android.server.wm.AccessibilityController;

        $r1 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$DisplayMagnifier mDisplayMagnifier>;

        if $r1 != null goto label1;

        $r2 = r0.<com.android.server.wm.AccessibilityController: com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver mWindowsForAccessibilityObserver>;

        if $r2 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static void populateTransformationMatrixLocked(com.android.server.wm.WindowState, android.graphics.Matrix)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Matrix r1;
        com.android.server.wm.WindowStateAnimator $r2, $r4, $r6, $r8;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        float[] $r3, $r5, $r7, $r9, $r12, $r13, $r14, $r15, $r16, $r17;
        android.graphics.RectF $r10, $r11;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Matrix;

        $r3 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r2 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f0 = $r2.<com.android.server.wm.WindowStateAnimator: float mDsDx>;

        $r3[0] = $f0;

        $r5 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r4 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f1 = $r4.<com.android.server.wm.WindowStateAnimator: float mDtDx>;

        $r5[3] = $f1;

        $r7 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r6 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f2 = $r6.<com.android.server.wm.WindowStateAnimator: float mDsDy>;

        $r7[1] = $f2;

        $r9 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r8 = r0.<com.android.server.wm.WindowState: com.android.server.wm.WindowStateAnimator mWinAnimator>;

        $f3 = $r8.<com.android.server.wm.WindowStateAnimator: float mDtDy>;

        $r9[4] = $f3;

        $r12 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r10 = r0.<com.android.server.wm.WindowState: android.graphics.RectF mShownFrame>;

        $f4 = $r10.<android.graphics.RectF: float left>;

        $r12[2] = $f4;

        $r13 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r11 = r0.<com.android.server.wm.WindowState: android.graphics.RectF mShownFrame>;

        $f5 = $r11.<android.graphics.RectF: float top>;

        $r13[5] = $f5;

        $r15 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r15[6] = 0.0F;

        $r14 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r14[7] = 0.0F;

        $r17 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        $r17[8] = 1.0F;

        $r16 = <com.android.server.wm.AccessibilityController: float[] sTempFloats>;

        virtualinvoke r1.<android.graphics.Matrix: void setValues(float[])>($r16);

        return;
    }

    static void access$500(com.android.server.wm.WindowState, android.graphics.Matrix)
    {
        com.android.server.wm.WindowState r0;
        android.graphics.Matrix r1;

        r0 := @parameter0: com.android.server.wm.WindowState;

        r1 := @parameter1: android.graphics.Matrix;

        staticinvoke <com.android.server.wm.AccessibilityController: void populateTransformationMatrixLocked(com.android.server.wm.WindowState,android.graphics.Matrix)>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        float[] $r0;

        $r0 = newarray (float)[9];

        <com.android.server.wm.AccessibilityController: float[] sTempFloats> = $r0;

        return;
    }
}
