public class com.android.server.job.JobSchedulerService extends com.android.server.SystemService implements com.android.server.job.StateChangedListener, com.android.server.job.JobCompletedListener
{
    static final boolean DEBUG;
    private static final int MAX_JOB_CONTEXTS_COUNT;
    static final java.lang.String TAG;
    final com.android.server.job.JobStore mJobs;
    static final int MSG_JOB_EXPIRED;
    static final int MSG_CHECK_JOB;
    static final int MIN_IDLE_COUNT;
    static final int MIN_CHARGING_COUNT;
    static final int MIN_CONNECTIVITY_COUNT;
    static final int MIN_READY_JOBS_COUNT;
    final java.util.List mActiveServices;
    java.util.List mControllers;
    final java.util.ArrayList mPendingJobs;
    final java.util.ArrayList mStartedUsers;
    final com.android.server.job.JobSchedulerService$JobHandler mHandler;
    final com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub;
    com.android.internal.app.IBatteryStats mBatteryStats;
    boolean mReadyToRock;
    private final android.content.BroadcastReceiver mBroadcastReceiver;

    public void onStartUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Integer $r2;
        com.android.server.job.JobSchedulerService$JobHandler $r3;
        android.os.Message $r4;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $r3 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r4 = virtualinvoke $r3.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onStopUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Integer $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

        return;
    }

    public int schedule(android.app.job.JobInfo, int)
    {
        com.android.server.job.JobSchedulerService r0;
        android.app.job.JobInfo r1;
        int i0, $i1;
        com.android.server.job.controllers.JobStatus r2, $r3;
        com.android.server.job.JobSchedulerService$JobHandler $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: android.app.job.JobInfo;

        i0 := @parameter1: int;

        $r3 = new com.android.server.job.controllers.JobStatus;

        specialinvoke $r3.<com.android.server.job.controllers.JobStatus: void <init>(android.app.job.JobInfo,int)>(r1, i0);

        r2 = $r3;

        $i1 = virtualinvoke r1.<android.app.job.JobInfo: int getId()>();

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJob(int,int)>(i0, $i1);

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJob(com.android.server.job.controllers.JobStatus)>(r2);

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        return 1;
    }

    public java.util.List getPendingJobs(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, $i2, $i3;
        java.util.ArrayList r1, $r6;
        com.android.server.job.JobStore r2, $r7, $r8;
        android.util.ArraySet r3;
        com.android.server.job.controllers.JobStatus r4;
        java.lang.Throwable r5, $r11;
        java.lang.Object $r9;
        android.app.job.JobInfo $r10;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

        $r7 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r7;

        entermonitor $r7;

     label1:
        $r8 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r3 = virtualinvoke $r8.<com.android.server.job.JobStore: android.util.ArraySet getJobs()>();

        i1 = 0;

     label2:
        $i2 = virtualinvoke r3.<android.util.ArraySet: int size()>();

        if i1 >= $i2 goto label4;

        $r9 = virtualinvoke r3.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        r4 = (com.android.server.job.controllers.JobStatus) $r9;

        $i3 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: int getUid()>();

        if $i3 != i0 goto label3;

        $r10 = virtualinvoke r4.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r2;

     label7:
        throw r5;

     label8:
        return r1;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void cancelJobsForUser(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, $i1, i2;
        java.util.List r1;
        com.android.server.job.JobStore r2, $r4, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.Object $r6;
        com.android.server.job.controllers.JobStatus r8;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r1 = virtualinvoke $r5.<com.android.server.job.JobStore: java.util.List getJobsByUser(int)>(i0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        i2 = 0;

     label6:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i1 goto label7;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r8 = (com.android.server.job.controllers.JobStatus) $r6;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImpl(com.android.server.job.controllers.JobStatus)>(r8);

        i2 = i2 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelJobsForUid(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, $i1, i2;
        java.util.List r1;
        com.android.server.job.JobStore r2, $r4, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.Object $r6;
        com.android.server.job.controllers.JobStatus r8;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r1 = virtualinvoke $r5.<com.android.server.job.JobStore: java.util.List getJobsByUid(int)>(i0);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        i2 = 0;

     label6:
        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i2 >= $i1 goto label7;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r8 = (com.android.server.job.controllers.JobStatus) $r6;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImpl(com.android.server.job.controllers.JobStatus)>(r8);

        i2 = i2 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void cancelJob(int, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1;
        com.android.server.job.controllers.JobStatus r1;
        com.android.server.job.JobStore r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r1 = virtualinvoke $r5.<com.android.server.job.JobStore: com.android.server.job.controllers.JobStatus getJobByUidAndJobId(int,int)>(i0, i1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r1 == null goto label6;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobImpl(com.android.server.job.controllers.JobStatus)>(r1);

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void cancelJobImpl(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        com.android.server.job.JobStore r2, $r4;
        java.lang.Throwable r3, $r6;
        java.util.ArrayList $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopTrackingJob(com.android.server.job.controllers.JobStatus)>(r1);

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopJobOnServiceContextLocked(com.android.server.job.controllers.JobStatus)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.job.JobSchedulerService r0;
        android.content.Context r1;
        java.util.ArrayList $r2, $r3, $r4, $r6;
        com.android.server.job.JobSchedulerService$1 $r5;
        java.util.List $r7, $r9, $r11, $r14;
        com.android.server.job.controllers.ConnectivityController $r8;
        com.android.server.job.controllers.TimeController $r10;
        com.android.server.job.controllers.IdleController $r12;
        com.android.server.job.controllers.BatteryController $r13;
        com.android.server.job.JobSchedulerService$JobHandler $r15;
        com.android.server.job.JobSchedulerService$JobSchedulerStub $r16;
        android.os.Looper $r17;
        com.android.server.job.JobStore $r18;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers> = $r4;

        $r5 = new com.android.server.job.JobSchedulerService$1;

        specialinvoke $r5.<com.android.server.job.JobSchedulerService$1: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers> = $r6;

        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r8 = staticinvoke <com.android.server.job.controllers.ConnectivityController: com.android.server.job.controllers.ConnectivityController get(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r10 = staticinvoke <com.android.server.job.controllers.TimeController: com.android.server.job.controllers.TimeController get(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        $r11 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r12 = staticinvoke <com.android.server.job.controllers.IdleController: com.android.server.job.controllers.IdleController get(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r13 = staticinvoke <com.android.server.job.controllers.BatteryController: com.android.server.job.controllers.BatteryController get(com.android.server.job.JobSchedulerService)>(r0);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = new com.android.server.job.JobSchedulerService$JobHandler;

        $r17 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r15.<com.android.server.job.JobSchedulerService$JobHandler: void <init>(com.android.server.job.JobSchedulerService,android.os.Looper)>(r0, $r17);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler> = $r15;

        $r16 = new com.android.server.job.JobSchedulerService$JobSchedulerStub;

        specialinvoke $r16.<com.android.server.job.JobSchedulerService$JobSchedulerStub: void <init>(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub> = $r16;

        $r18 = staticinvoke <com.android.server.job.JobStore: com.android.server.job.JobStore initAndGet(com.android.server.job.JobSchedulerService)>(r0);

        r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs> = $r18;

        return;
    }

    public void onStart()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$JobSchedulerStub $r1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobSchedulerStub mJobSchedulerStub>;

        virtualinvoke r0.<com.android.server.job.JobSchedulerService: void publishBinderService(java.lang.String,android.os.IBinder)>("jobscheduler", $r1);

        return;
    }

    public void onBootPhase(int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0, i1, i2, $i3, $i4, i5;
        android.content.IntentFilter r1, r2, $r21, $r24;
        com.android.server.job.controllers.JobStatus r3;
        java.lang.Throwable r4, $r29;
        com.android.server.job.JobStore $r5, $r8, r32;
        android.os.IBinder $r6;
        com.android.internal.app.IBatteryStats $r7, $r17;
        com.android.server.job.JobSchedulerService$JobHandler $r9;
        android.os.Message $r10;
        java.lang.Object $r11, $r13;
        java.util.List $r12, $r14, $r18;
        com.android.server.job.JobServiceContext $r15;
        com.android.server.job.controllers.StateController $r16;
        android.os.Looper $r19;
        android.content.Context $r20, $r23, $r25;
        android.os.UserHandle $r22, $r30;
        android.content.BroadcastReceiver $r26, $r31;
        android.util.ArraySet r33;

        r0 := @this: com.android.server.job.JobSchedulerService;

        i0 := @parameter0: int;

        if 500 != i0 goto label01;

        $r21 = new android.content.IntentFilter;

        specialinvoke $r21.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        r1 = $r21;

        virtualinvoke r1.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r23 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r26 = r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r22 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r23.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r26, $r22, r1, null, null);

        $r24 = new android.content.IntentFilter;

        specialinvoke $r24.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_REMOVED");

        r2 = $r24;

        $r25 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r31 = r0.<com.android.server.job.JobSchedulerService: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r30 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r25.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r31, $r30, r2, null, null);

        goto label12;

     label01:
        if i0 != 600 goto label12;

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r32 = $r5;

        entermonitor $r5;

     label02:
        r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock> = 1;

        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r7 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r6);

        r0.<com.android.server.job.JobSchedulerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r7;

        i5 = 0;

     label03:
        if i5 >= 3 goto label04;

        $r18 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r15 = new com.android.server.job.JobServiceContext;

        $r17 = r0.<com.android.server.job.JobSchedulerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r20 = virtualinvoke r0.<com.android.server.job.JobSchedulerService: android.content.Context getContext()>();

        $r19 = virtualinvoke $r20.<android.content.Context: android.os.Looper getMainLooper()>();

        specialinvoke $r15.<com.android.server.job.JobServiceContext: void <init>(com.android.server.job.JobSchedulerService,com.android.internal.app.IBatteryStats,android.os.Looper)>(r0, $r17, $r19);

        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r15);

        i5 = i5 + 1;

        goto label03;

     label04:
        $r8 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r33 = virtualinvoke $r8.<com.android.server.job.JobStore: android.util.ArraySet getJobs()>();

        i1 = 0;

     label05:
        $i3 = virtualinvoke r33.<android.util.ArraySet: int size()>();

        if i1 >= $i3 goto label08;

        $r11 = virtualinvoke r33.<android.util.ArraySet: java.lang.Object valueAt(int)>(i1);

        r3 = (com.android.server.job.controllers.JobStatus) $r11;

        i2 = 0;

     label06:
        $r12 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i4 = interfaceinvoke $r12.<java.util.List: int size()>();

        if i2 >= $i4 goto label07;

        $r14 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r13 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>(i2);

        $r16 = (com.android.server.job.controllers.StateController) $r13;

        virtualinvoke $r16.<com.android.server.job.controllers.StateController: void maybeStartTrackingJob(com.android.server.job.controllers.JobStatus)>(r3);

        i2 = i2 + 1;

        goto label06;

     label07:
        i1 = i1 + 1;

        goto label05;

     label08:
        $r9 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r10 = virtualinvoke $r9.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

        exitmonitor r32;

     label09:
        goto label12;

     label10:
        $r29 := @caughtexception;

        r4 = $r29;

        exitmonitor r32;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    private void startTrackingJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z0, z1;
        com.android.server.job.JobStore r2, $r4, $r5;
        java.lang.Throwable r3, $r9;
        java.util.List $r6, $r7;
        int $i0, i1;
        java.lang.Object $r8;
        com.android.server.job.controllers.StateController r10;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z0 = virtualinvoke $r5.<com.android.server.job.JobStore: boolean add(com.android.server.job.controllers.JobStatus)>(r1);

        z1 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if z1 == 0 goto label8;

        i1 = 0;

     label6:
        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i1 >= $i0 goto label8;

        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (com.android.server.job.controllers.StateController) $r8;

        if z0 == 0 goto label7;

        virtualinvoke r10.<com.android.server.job.controllers.StateController: void maybeStopTrackingJob(com.android.server.job.controllers.JobStatus)>(r1);

     label7:
        virtualinvoke r10.<com.android.server.job.controllers.StateController: void maybeStartTrackingJob(com.android.server.job.controllers.JobStatus)>(r1);

        i1 = i1 + 1;

        goto label6;

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean stopTrackingJob(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean z0, z1;
        com.android.server.job.JobStore r2, $r4, $r5;
        java.lang.Throwable r3, $r9;
        java.util.List $r6, $r7;
        int $i0, i1;
        java.lang.Object $r8;
        com.android.server.job.controllers.StateController r10;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        z0 = virtualinvoke $r5.<com.android.server.job.JobStore: boolean remove(com.android.server.job.controllers.JobStatus)>(r1);

        z1 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if z0 == 0 goto label7;

        if z1 == 0 goto label7;

        i1 = 0;

     label6:
        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i0 = interfaceinvoke $r6.<java.util.List: int size()>();

        if i1 >= $i0 goto label7;

        $r7 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i1);

        r10 = (com.android.server.job.controllers.StateController) $r8;

        virtualinvoke r10.<com.android.server.job.controllers.StateController: void maybeStopTrackingJob(com.android.server.job.controllers.JobStatus)>(r1);

        i1 = i1 + 1;

        goto label6;

     label7:
        return z0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private boolean stopJobOnServiceContextLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r3;
        int i0, $i1, $i2, $i3;
        com.android.server.job.JobServiceContext r2;
        java.util.List $r4, $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = 0;

     label1:
        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.job.JobServiceContext) $r6;

        r3 = virtualinvoke r2.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJob()>();

        if r3 == null goto label2;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z0 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i2, $i3);

        if $z0 == 0 goto label2;

        virtualinvoke r2.<com.android.server.job.JobServiceContext: void cancelExecutingJob()>();

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r3;
        int i0, $i1, $i2, $i3;
        com.android.server.job.JobServiceContext r2;
        java.util.List $r4, $r5;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        i0 = 0;

     label1:
        $r4 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r5 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.job.JobServiceContext) $r6;

        r3 = virtualinvoke r2.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJob()>();

        if r3 == null goto label2;

        $i2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getUid()>();

        $i3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getJobId()>();

        $z0 = virtualinvoke r3.<com.android.server.job.controllers.JobStatus: boolean matches(int,int)>($i2, $i3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    private com.android.server.job.controllers.JobStatus getRescheduleJobForFailure(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, $r3;
        long l0, l1, l3, $l6, $l8, l9;
        android.app.job.JobInfo r2;
        int i2, $i4, $i5, $i7;
        float $f0, $f1;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        l1 = virtualinvoke r2.<android.app.job.JobInfo: long getInitialBackoffMillis()>();

        $i4 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: int getNumFailures()>();

        i2 = $i4 + 1;

        $i5 = virtualinvoke r2.<android.app.job.JobInfo: int getBackoffPolicy()>();

        lookupswitch($i5)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label2;
        };

     label1:
        $l6 = (long) i2;

        l3 = l1 * $l6;

        goto label3;

     label2:
        $f1 = (float) l1;

        $i7 = i2 - 1;

        $f0 = staticinvoke <java.lang.Math: float scalb(float,int)>($f1, $i7);

        l3 = (long) $f0;

     label3:
        l9 = staticinvoke <java.lang.Math: long min(long,long)>(l3, 18000000L);

        $r3 = new com.android.server.job.controllers.JobStatus;

        $l8 = l0 + l9;

        specialinvoke $r3.<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int)>(r1, $l8, 9223372036854775807L, i2);

        return $r3;
    }

    private com.android.server.job.controllers.JobStatus getRescheduleJobForPeriodic(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, $r3;
        long l0, l1, l2, l3, l4, $l5, $l6;
        android.app.job.JobInfo $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: long getLatestRunTimeElapsed()>();

        $l6 = $l5 - l0;

        l1 = staticinvoke <java.lang.Math: long max(long,long)>($l6, 0L);

        l2 = l0 + l1;

        $r2 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        l3 = virtualinvoke $r2.<android.app.job.JobInfo: long getIntervalMillis()>();

        l4 = l2 + l3;

        $r3 = new com.android.server.job.controllers.JobStatus;

        specialinvoke $r3.<com.android.server.job.controllers.JobStatus: void <init>(com.android.server.job.controllers.JobStatus,long,long,int)>(r1, l2, l4, 0);

        return $r3;
    }

    public void onJobCompleted(com.android.server.job.controllers.JobStatus, boolean)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1, r2, r6;
        boolean z0, $z1, $z2;
        android.app.job.JobInfo $r3;
        com.android.server.job.JobSchedulerService$JobHandler $r4;
        android.os.Message $r5;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopTrackingJob(com.android.server.job.controllers.JobStatus)>(r1);

        if $z1 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        r2 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.JobStatus getRescheduleJobForFailure(com.android.server.job.controllers.JobStatus)>(r1);

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJob(com.android.server.job.controllers.JobStatus)>(r2);

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<com.android.server.job.controllers.JobStatus: android.app.job.JobInfo getJob()>();

        $z2 = virtualinvoke $r3.<android.app.job.JobInfo: boolean isPeriodic()>();

        if $z2 == 0 goto label3;

        r6 = specialinvoke r0.<com.android.server.job.JobSchedulerService: com.android.server.job.controllers.JobStatus getRescheduleJobForPeriodic(com.android.server.job.controllers.JobStatus)>(r1);

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void startTrackingJob(com.android.server.job.controllers.JobStatus)>(r6);

     label3:
        $r4 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r5 = virtualinvoke $r4.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r5.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onControllerStateChanged()
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.JobSchedulerService$JobHandler $r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.job.JobSchedulerService;

        $r1 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onRunJobNow(com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        com.android.server.job.JobSchedulerService$JobHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: com.android.server.job.controllers.JobStatus;

        $r2 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobSchedulerService$JobHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.job.JobSchedulerService$JobHandler: android.os.Message obtainMessage(int,java.lang.Object)>(0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void dumpInternal(java.io.PrintWriter)
    {
        com.android.server.job.JobSchedulerService r0;
        java.io.PrintWriter r1;
        long l0, $l8, $l9, $l10, $l11, l17;
        com.android.server.job.JobStore r2, $r5, $r7, $r21;
        int i1, i2, $i3, $i4, $i5, $i6, $i7, $i12, $i13, i14, i15, i16;
        com.android.server.job.controllers.JobStatus r3, $r14, $r15;
        java.lang.Throwable r4, $r26;
        java.util.ArrayList $r6, $r9, $r16, $r22;
        java.util.List $r8, $r10, $r12, $r19;
        boolean $z0, $z1;
        java.lang.Object $r11, $r13, $r17, $r20, $r23;
        com.android.server.job.controllers.StateController $r18;
        java.lang.StringBuilder $r24, $r25, $r28, $r29;
        java.lang.String $r27;
        android.util.ArraySet r30;
        com.android.server.job.JobServiceContext r31;

        r0 := @this: com.android.server.job.JobSchedulerService;

        r1 := @parameter0: java.io.PrintWriter;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r5 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Started users: ");

        i1 = 0;

     label02:
        $r6 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers>;

        $i3 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label03;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("u");

        $r22 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mStartedUsers>;

        $r23 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r27);

        i1 = i1 + 1;

        goto label02;

     label03:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Registered jobs:");

        $r7 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        $i4 = virtualinvoke $r7.<com.android.server.job.JobStore: int size()>();

        if $i4 <= 0 goto label06;

        $r21 = r0.<com.android.server.job.JobSchedulerService: com.android.server.job.JobStore mJobs>;

        r30 = virtualinvoke $r21.<com.android.server.job.JobStore: android.util.ArraySet getJobs()>();

        i2 = 0;

     label04:
        $i13 = virtualinvoke r30.<android.util.ArraySet: int size()>();

        if i2 >= $i13 goto label05;

        $r20 = virtualinvoke r30.<android.util.ArraySet: java.lang.Object valueAt(int)>(i2);

        r3 = (com.android.server.job.controllers.JobStatus) $r20;

        virtualinvoke r3.<com.android.server.job.controllers.JobStatus: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

        i2 = i2 + 1;

        goto label04;

     label05:
        goto label07;

     label06:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  None.");

     label07:
        i14 = 0;

     label08:
        $r8 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $i5 = interfaceinvoke $r8.<java.util.List: int size()>();

        if i14 >= $i5 goto label09;

        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        $r19 = r0.<com.android.server.job.JobSchedulerService: java.util.List mControllers>;

        $r17 = interfaceinvoke $r19.<java.util.List: java.lang.Object get(int)>(i14);

        $r18 = (com.android.server.job.controllers.StateController) $r17;

        virtualinvoke $r18.<com.android.server.job.controllers.StateController: void dumpControllerState(java.io.PrintWriter)>(r1);

        i14 = i14 + 1;

        goto label08;

     label09:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Pending:");

        i15 = 0;

     label10:
        $r9 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $i6 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if i15 >= $i6 goto label11;

        $r16 = r0.<com.android.server.job.JobSchedulerService: java.util.ArrayList mPendingJobs>;

        $r13 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r14 = (com.android.server.job.controllers.JobStatus) $r13;

        $i12 = virtualinvoke $r14.<java.lang.Object: int hashCode()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(int)>($i12);

        i15 = i15 + 1;

        goto label10;

     label11:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Active jobs:");

        i16 = 0;

     label12:
        $r10 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $i7 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i16 >= $i7 goto label15;

        $r12 = r0.<com.android.server.job.JobSchedulerService: java.util.List mActiveServices>;

        $r11 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i16);

        r31 = (com.android.server.job.JobServiceContext) $r11;

        $z1 = virtualinvoke r31.<com.android.server.job.JobServiceContext: boolean isAvailable()>();

        if $z1 == 0 goto label13;

        goto label14;

     label13:
        l17 = virtualinvoke r31.<com.android.server.job.JobServiceContext: long getTimeoutElapsed()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Running for: ");

        $l9 = virtualinvoke r31.<com.android.server.job.JobServiceContext: long getExecutionStartTimeElapsed()>();

        $l8 = l0 - $l9;

        $l11 = $l8 / 1000L;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>($l11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("s timeout=");

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l17);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" fromnow=");

        $l10 = l17 - l0;

        virtualinvoke r1.<java.io.PrintWriter: void println(long)>($l10);

        $r15 = virtualinvoke r31.<com.android.server.job.JobServiceContext: com.android.server.job.controllers.JobStatus getRunningJob()>();

        virtualinvoke $r15.<com.android.server.job.controllers.JobStatus: void dump(java.io.PrintWriter,java.lang.String)>(r1, "  ");

     label14:
        i16 = i16 + 1;

        goto label12;

     label15:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("mReadyToRock=");

        $z0 = r0.<com.android.server.job.JobSchedulerService: boolean mReadyToRock>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z0);

        exitmonitor r2;

     label16:
        goto label19;

     label17:
        $r26 := @caughtexception;

        r4 = $r26;

        exitmonitor r2;

     label18:
        throw r4;

     label19:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;

        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    static void access$000(com.android.server.job.JobSchedulerService, int)
    {
        com.android.server.job.JobSchedulerService r0;
        int i0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.job.JobSchedulerService: void cancelJobsForUser(int)>(i0);

        return;
    }

    static boolean access$100(com.android.server.job.JobSchedulerService, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean stopJobOnServiceContextLocked(com.android.server.job.controllers.JobStatus)>(r1);

        return $z0;
    }

    static boolean access$200(com.android.server.job.JobSchedulerService, com.android.server.job.controllers.JobStatus)
    {
        com.android.server.job.JobSchedulerService r0;
        com.android.server.job.controllers.JobStatus r1;
        boolean $z0;

        r0 := @parameter0: com.android.server.job.JobSchedulerService;

        r1 := @parameter1: com.android.server.job.controllers.JobStatus;

        $z0 = specialinvoke r0.<com.android.server.job.JobSchedulerService: boolean isCurrentlyActiveLocked(com.android.server.job.controllers.JobStatus)>(r1);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.android.server.job.JobSchedulerService: int MIN_READY_JOBS_COUNT> = 2;

        <com.android.server.job.JobSchedulerService: int MIN_CONNECTIVITY_COUNT> = 2;

        <com.android.server.job.JobSchedulerService: int MIN_CHARGING_COUNT> = 1;

        <com.android.server.job.JobSchedulerService: int MIN_IDLE_COUNT> = 1;

        <com.android.server.job.JobSchedulerService: int MSG_CHECK_JOB> = 1;

        <com.android.server.job.JobSchedulerService: int MSG_JOB_EXPIRED> = 0;

        <com.android.server.job.JobSchedulerService: java.lang.String TAG> = "JobSchedulerService";

        <com.android.server.job.JobSchedulerService: int MAX_JOB_CONTEXTS_COUNT> = 3;

        <com.android.server.job.JobSchedulerService: boolean DEBUG> = 0;

        return;
    }
}
