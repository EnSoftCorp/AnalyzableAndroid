class com.android.server.PersistentDataBlockService$1 extends android.service.persistentdata.IPersistentDataBlockService$Stub
{
    final com.android.server.PersistentDataBlockService this$0;

    void <init>(com.android.server.PersistentDataBlockService)
    {
        com.android.server.PersistentDataBlockService$1 r0;
        com.android.server.PersistentDataBlockService r1;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        r1 := @parameter0: com.android.server.PersistentDataBlockService;

        r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0> = r1;

        specialinvoke r0.<android.service.persistentdata.IPersistentDataBlockService$Stub: void <init>()>();

        return;
    }

    public int write(byte[]) throws android.os.RemoteException
    {
        com.android.server.PersistentDataBlockService$1 r0;
        byte[] r1, $r19;
        long l0, $l3, $l5, $l7, $l11;
        java.io.DataOutputStream r2, $r12;
        java.io.FileNotFoundException r3, $r25;
        java.lang.Object r4, $r21;
        int i1, $i2, $i4, $i8, $i9, $i10, $i12;
        java.io.IOException r5, r8, $r22, $r26, $r30, $r33, r35, r36;
        java.lang.Throwable r6, r7, $r27, $r28;
        com.android.server.PersistentDataBlockService $r9, $r10, $r13, $r20;
        byte $b6, b18;
        java.io.FileOutputStream $r11;
        java.io.File $r14;
        java.lang.String $r15, $r23, $r24, $r29, $r31, $r32;
        java.nio.ByteBuffer r34;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        r1 := @parameter0: byte[];

        $r9 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.PersistentDataBlockService: void access$000(com.android.server.PersistentDataBlockService,int)>($r9, $i2);

        $r10 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $l3 = staticinvoke <com.android.server.PersistentDataBlockService: long access$100(com.android.server.PersistentDataBlockService)>($r10);

        $l5 = $l3 - 8L;

        l0 = $l5 - 1L;

        $i4 = lengthof r1;

        $l7 = (long) $i4;

        $b6 = $l7 cmp l0;

        if $b6 <= 0 goto label01;

        $l11 = neg l0;

        $i12 = (int) $l11;

        return $i12;

     label01:
        $r12 = new java.io.DataOutputStream;

        $r11 = new java.io.FileOutputStream;

        $r14 = new java.io.File;

        $r13 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r15 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r13);

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15);

        specialinvoke $r11.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r12.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r11);

        r2 = $r12;

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        r3 = $r25;

        $r24 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r24, "partition not available?", r3);

        return -1;

     label04:
        $i8 = lengthof r1;

        $i9 = $i8 + 8;

        r34 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i9);

        virtualinvoke r34.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(6544);

        $i10 = lengthof r1;

        virtualinvoke r34.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i10);

        virtualinvoke r34.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

     label05:
        $r20 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r21 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r20);

        r4 = $r21;

        entermonitor $r21;

     label06:
        $r19 = virtualinvoke r34.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke r2.<java.io.DataOutputStream: void write(byte[])>($r19);

        i1 = lengthof r1;

        exitmonitor r4;

     label07:
        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

     label08:
        goto label10;

     label09:
        $r33 := @caughtexception;

        r5 = $r33;

        $r32 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r32, "failed closing output stream", r5);

     label10:
        return i1;

     label11:
        $r28 := @caughtexception;

        r6 = $r28;

        exitmonitor r4;

     label12:
        throw r6;

     label13:
        $r26 := @caughtexception;

        r35 = $r26;

        $r31 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r31, "failed writing to the persistent data block", r35);

        b18 = -1;

     label14:
        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r22 := @caughtexception;

        r36 = $r22;

        $r23 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, "failed closing output stream", r36);

     label17:
        return b18;

     label18:
        $r27 := @caughtexception;

        r7 = $r27;

     label19:
        virtualinvoke r2.<java.io.DataOutputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r30 := @caughtexception;

        r8 = $r30;

        $r29 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r29, "failed closing output stream", r8);

     label22:
        throw r7;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.io.IOException from label05 to label07 with label13;
        catch java.io.IOException from label11 to label13 with label13;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.lang.Throwable from label11 to label14 with label18;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public byte[] read()
    {
        com.android.server.PersistentDataBlockService$1 r0;
        java.io.DataInputStream r1, $r7;
        java.io.FileNotFoundException r2, $r22;
        int i0, $i1, i2;
        byte[] r3, r39, r40;
        java.lang.Throwable r4, r5, $r26, $r29;
        com.android.server.PersistentDataBlockService $r6, $r11, $r13, $r14;
        java.io.FileInputStream $r8;
        java.io.File $r9;
        java.lang.String $r10, $r16, $r21, $r23, $r24, $r28, $r31, $r32, $r35, $r37;
        java.lang.Object $r12, r38;
        java.lang.StringBuilder $r15, $r17, $r18, $r19, $r20;
        java.io.IOException $r25, $r27, $r30, $r33, $r34, $r36, r41;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        $r6 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.PersistentDataBlockService: void access$000(com.android.server.PersistentDataBlockService,int)>($r6, $i1);

     label01:
        $r7 = new java.io.DataInputStream;

        $r8 = new java.io.FileInputStream;

        $r9 = new java.io.File;

        $r11 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r10 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r11);

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);

        specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r9);

        specialinvoke $r7.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r8);

        r1 = $r7;

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        r2 = $r22;

        $r23 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, "partition not available?", r2);

        return null;

     label04:
        $r13 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r12 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r13);

        r38 = $r12;

        entermonitor $r12;

     label05:
        $r14 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        i0 = staticinvoke <com.android.server.PersistentDataBlockService: int access$500(com.android.server.PersistentDataBlockService,java.io.DataInputStream)>($r14, r1);

        if i0 != 0 goto label10;

        r3 = newarray (byte)[0];

        exitmonitor r38;

     label06:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r30 := @caughtexception;

        $r31 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r31, "failed to close OutputStream");

     label09:
        return r3;

     label10:
        r39 = newarray (byte)[i0];

        i2 = virtualinvoke r1.<java.io.DataInputStream: int read(byte[],int,int)>(r39, 0, i0);

        if i2 >= i0 goto label15;

        $r16 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to read entire data block. bytes read: ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r16, $r21);

        exitmonitor r38;

     label11:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r27 := @caughtexception;

        $r28 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r28, "failed to close OutputStream");

     label14:
        return null;

     label15:
        r40 = r39;

        exitmonitor r38;

     label16:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r25 := @caughtexception;

        $r24 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r24, "failed to close OutputStream");

     label19:
        return r40;

     label20:
        $r29 := @caughtexception;

        r4 = $r29;

        exitmonitor r38;

     label21:
        throw r4;

     label22:
        $r33 := @caughtexception;

        r41 = $r33;

        $r32 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r32, "failed to read data", r41);

     label23:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

     label24:
        goto label26;

     label25:
        $r36 := @caughtexception;

        $r35 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r35, "failed to close OutputStream");

     label26:
        return null;

     label27:
        $r26 := @caughtexception;

        r5 = $r26;

     label28:
        virtualinvoke r1.<java.io.DataInputStream: void close()>();

     label29:
        goto label31;

     label30:
        $r34 := @caughtexception;

        $r37 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r37, "failed to close OutputStream");

     label31:
        throw r5;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.io.IOException from label04 to label06 with label22;
        catch java.io.IOException from label10 to label11 with label22;
        catch java.io.IOException from label15 to label16 with label22;
        catch java.io.IOException from label20 to label22 with label22;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label04 to label06 with label27;
        catch java.lang.Throwable from label10 to label11 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label20 to label23 with label27;
        catch java.io.IOException from label28 to label29 with label30;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public void wipe()
    {
        com.android.server.PersistentDataBlockService$1 r0;
        java.lang.Object r1, $r5;
        int i0;
        java.lang.Throwable r2, $r10;
        com.android.server.PersistentDataBlockService $r3, $r4, $r6, $r7;
        java.lang.String $r8, $r9;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        $r3 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: void access$600(com.android.server.PersistentDataBlockService)>($r3);

        $r4 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r5 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r4);

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r7 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r6 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r8 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r6);

        i0 = staticinvoke <com.android.server.PersistentDataBlockService: int access$700(com.android.server.PersistentDataBlockService,java.lang.String)>($r7, $r8);

        if i0 >= 0 goto label2;

        $r9 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r9, "failed to wipe persistent partition");

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setOemUnlockEnabled(boolean)
    {
        com.android.server.PersistentDataBlockService$1 r0;
        boolean z0, $z1;
        java.io.FileOutputStream r1, $r8;
        java.io.FileNotFoundException r2, $r19;
        java.nio.ByteBuffer r3;
        java.lang.Object r4, $r16;
        java.lang.Throwable r5, r6, $r18, $r21;
        com.android.server.PersistentDataBlockService $r7, $r10, $r12, $r17;
        java.io.File $r9;
        java.lang.String $r11, $r20, $r23;
        long $l0, $l1;
        byte $b3;
        java.io.IOException $r22, r25;
        java.nio.channels.FileChannel r24;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        z0 := @parameter0: boolean;

        $z1 = staticinvoke <android.app.ActivityManager: boolean isUserAMonkey()>();

        if $z1 == 0 goto label01;

        return;

     label01:
        $r7 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: void access$600(com.android.server.PersistentDataBlockService)>($r7);

     label02:
        $r8 = new java.io.FileOutputStream;

        $r9 = new java.io.File;

        $r10 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r11 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r10);

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r11);

        specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r9);

        r1 = $r8;

     label03:
        goto label05;

     label04:
        $r19 := @caughtexception;

        r2 = $r19;

        $r20 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r20, "parition not available", r2);

        return;

     label05:
        r24 = virtualinvoke r1.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r12 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $l1 = staticinvoke <com.android.server.PersistentDataBlockService: long access$100(com.android.server.PersistentDataBlockService)>($r12);

        $l0 = $l1 - 1L;

        virtualinvoke r24.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l0);

        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(1);

        if z0 == 0 goto label06;

        $b3 = 1;

        goto label07;

     label06:
        $b3 = 0;

     label07:
        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b3);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r17 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r16 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$800(com.android.server.PersistentDataBlockService)>($r17);

        r4 = $r16;

        entermonitor $r16;

     label08:
        virtualinvoke r24.<java.nio.channels.FileChannel: int write(java.nio.ByteBuffer)>(r3);

        exitmonitor r4;

     label09:
        goto label12;

     label10:
        $r18 := @caughtexception;

        r5 = $r18;

        exitmonitor r4;

     label11:
        throw r5;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label13:
        $r22 := @caughtexception;

        r25 = $r22;

        $r23 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r23, "unable to access persistent partition", r25);

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        goto label17;

     label15:
        $r21 := @caughtexception;

        r6 = $r21;

     label16:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r6;

     label17:
        return;

        catch java.io.FileNotFoundException from label02 to label03 with label04;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.io.IOException from label05 to label12 with label13;
        catch java.lang.Throwable from label05 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public boolean getOemUnlockEnabled()
    {
        com.android.server.PersistentDataBlockService$1 r0;
        java.io.DataInputStream r1, $r6;
        boolean z0, $z1, z2;
        java.lang.Throwable r3, r4, $r18, $r19;
        com.android.server.PersistentDataBlockService $r5, $r9, $r11, $r13;
        java.io.FileInputStream $r7;
        java.io.File $r8;
        java.lang.String $r10, $r15, $r16;
        long $l0, $l1;
        java.lang.Object $r12, r20;
        byte $b3;
        java.io.IOException $r14, r21;
        java.io.FileNotFoundException $r17;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        $r5 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        staticinvoke <com.android.server.PersistentDataBlockService: void access$600(com.android.server.PersistentDataBlockService)>($r5);

     label01:
        $r6 = new java.io.DataInputStream;

        $r7 = new java.io.FileInputStream;

        $r8 = new java.io.File;

        $r9 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r10 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r9);

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r10);

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        r1 = $r6;

     label02:
        goto label04;

     label03:
        $r17 := @caughtexception;

        $r16 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r16, "partition not available");

        return 0;

     label04:
        $r11 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $l0 = staticinvoke <com.android.server.PersistentDataBlockService: long access$100(com.android.server.PersistentDataBlockService)>($r11);

        $l1 = $l0 - 1L;

        virtualinvoke r1.<java.io.DataInputStream: long skip(long)>($l1);

        $r13 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r12 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$800(com.android.server.PersistentDataBlockService)>($r13);

        r20 = $r12;

        entermonitor $r12;

     label05:
        $b3 = virtualinvoke r1.<java.io.DataInputStream: byte readByte()>();

        if $b3 == 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        z0 = $z1;

        exitmonitor r20;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return z0;

     label09:
        $r19 := @caughtexception;

        r3 = $r19;

        exitmonitor r20;

     label10:
        throw r3;

     label11:
        $r14 := @caughtexception;

        r21 = $r14;

        $r15 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r15, "unable to access persistent partition", r21);

        z2 = 0;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return z2;

     label13:
        $r18 := @caughtexception;

        r4 = $r18;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r4;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.IOException from label04 to label08 with label11;
        catch java.io.IOException from label09 to label11 with label11;
        catch java.lang.Throwable from label04 to label08 with label13;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int getDataBlockSize()
    {
        com.android.server.PersistentDataBlockService$1 r0;
        java.io.DataInputStream r1, $r6;
        int i0, $i1;
        java.lang.Throwable r3, r4, $r18, $r19;
        com.android.server.PersistentDataBlockService $r5, $r9, $r11, $r13;
        java.io.FileInputStream $r7;
        java.io.File $r8;
        java.lang.String $r10, $r14, $r17;
        java.lang.Object $r12, r20;
        java.io.FileNotFoundException $r15;
        java.io.IOException $r16;
        byte b4;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        $r5 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        staticinvoke <com.android.server.PersistentDataBlockService: void access$000(com.android.server.PersistentDataBlockService,int)>($r5, $i1);

     label01:
        $r6 = new java.io.DataInputStream;

        $r7 = new java.io.FileInputStream;

        $r8 = new java.io.File;

        $r9 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r10 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$200(com.android.server.PersistentDataBlockService)>($r9);

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r10);

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r8);

        specialinvoke $r6.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r7);

        r1 = $r6;

     label02:
        goto label04;

     label03:
        $r15 := @caughtexception;

        $r14 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r14, "partition not available");

        return 0;

     label04:
        $r11 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $r12 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.Object access$400(com.android.server.PersistentDataBlockService)>($r11);

        r20 = $r12;

        entermonitor $r12;

     label05:
        $r13 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        i0 = staticinvoke <com.android.server.PersistentDataBlockService: int access$500(com.android.server.PersistentDataBlockService,java.io.DataInputStream)>($r13, r1);

        exitmonitor r20;

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return i0;

     label07:
        $r18 := @caughtexception;

        r3 = $r18;

        exitmonitor r20;

     label08:
        throw r3;

     label09:
        $r16 := @caughtexception;

        $r17 = staticinvoke <com.android.server.PersistentDataBlockService: java.lang.String access$300()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r17, "error reading data block size");

        b4 = 0;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return b4;

     label11:
        $r19 := @caughtexception;

        r4 = $r19;

     label12:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        throw r4;

        catch java.io.FileNotFoundException from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.io.IOException from label04 to label06 with label09;
        catch java.io.IOException from label07 to label09 with label09;
        catch java.lang.Throwable from label04 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public long getMaximumDataBlockSize()
    {
        com.android.server.PersistentDataBlockService$1 r0;
        long l0, $l1, $l2, $l4;
        com.android.server.PersistentDataBlockService $r1;
        byte $b3;

        r0 := @this: com.android.server.PersistentDataBlockService$1;

        $r1 = r0.<com.android.server.PersistentDataBlockService$1: com.android.server.PersistentDataBlockService this$0>;

        $l1 = staticinvoke <com.android.server.PersistentDataBlockService: long access$100(com.android.server.PersistentDataBlockService)>($r1);

        $l2 = $l1 - 8L;

        l0 = $l2 - 1L;

        $b3 = l0 cmp 102400L;

        if $b3 > 0 goto label1;

        $l4 = l0;

        goto label2;

     label1:
        $l4 = 102400L;

     label2:
        return $l4;
    }
}
