public class com.android.server.connectivity.Tethering extends com.android.server.net.BaseNetworkObserver
{
    private android.content.Context mContext;
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final boolean VDBG;
    private java.lang.String[] mTetherableUsbRegexs;
    private java.lang.String[] mTetherableWifiRegexs;
    private java.lang.String[] mTetherableBluetoothRegexs;
    private java.util.Collection mUpstreamIfaceTypes;
    private java.lang.Object mPublicSync;
    private static final java.lang.Integer MOBILE_TYPE;
    private static final java.lang.Integer HIPRI_TYPE;
    private static final java.lang.Integer DUN_TYPE;
    private int mPreferredUpstreamMobileApn;
    private final android.os.INetworkManagementService mNMService;
    private final android.net.INetworkStatsService mStatsService;
    private android.os.Looper mLooper;
    private java.util.HashMap mIfaces;
    private android.content.BroadcastReceiver mStateReceiver;
    private static final java.lang.String USB_NEAR_IFACE_ADDR;
    private static final int USB_PREFIX_LENGTH;
    private java.lang.String[] mDhcpRange;
    private static final java.lang.String[] DHCP_DEFAULT_RANGE;
    private java.lang.String[] mDefaultDnsServers;
    private static final java.lang.String DNS_DEFAULT_SERVER1;
    private static final java.lang.String DNS_DEFAULT_SERVER2;
    private com.android.internal.util.StateMachine mTetherMasterSM;
    private android.app.Notification mTetheredNotification;
    private boolean mRndisEnabled;
    private boolean mUsbTetherRequested;

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.os.Looper)
    {
        com.android.server.connectivity.Tethering r0;
        android.content.Context r1, $r17, $r21;
        android.os.INetworkManagementService r2;
        android.net.INetworkStatsService r3;
        android.os.Looper r4, $r9, $r11;
        android.content.IntentFilter r5, $r14, $r19, r30;
        java.lang.Object $r6;
        java.util.HashMap $r7;
        com.android.server.IoThread $r8;
        com.android.server.connectivity.Tethering$TetherMasterSM $r10;
        com.android.internal.util.StateMachine $r12;
        com.android.server.connectivity.Tethering$StateReceiver $r13;
        android.content.BroadcastReceiver $r15, $r18;
        java.lang.String[] $r22, $r24, $r25, $r26, $r27, $r28, $r29;
        android.content.res.Resources $r23;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.net.INetworkStatsService;

        r4 := @parameter3: android.os.Looper;

        specialinvoke r0.<com.android.server.net.BaseNetworkObserver: void <init>()>();

        r0.<com.android.server.connectivity.Tethering: int mPreferredUpstreamMobileApn> = -1;

        r0.<com.android.server.connectivity.Tethering: android.content.Context mContext> = r1;

        r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService> = r2;

        r0.<com.android.server.connectivity.Tethering: android.net.INetworkStatsService mStatsService> = r3;

        r0.<com.android.server.connectivity.Tethering: android.os.Looper mLooper> = r4;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces> = $r7;

        $r8 = staticinvoke <com.android.server.IoThread: com.android.server.IoThread get()>();

        $r9 = virtualinvoke $r8.<com.android.server.IoThread: android.os.Looper getLooper()>();

        r0.<com.android.server.connectivity.Tethering: android.os.Looper mLooper> = $r9;

        $r10 = new com.android.server.connectivity.Tethering$TetherMasterSM;

        $r11 = r0.<com.android.server.connectivity.Tethering: android.os.Looper mLooper>;

        specialinvoke $r10.<com.android.server.connectivity.Tethering$TetherMasterSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper)>(r0, "TetherMaster", $r11);

        r0.<com.android.server.connectivity.Tethering: com.android.internal.util.StateMachine mTetherMasterSM> = $r10;

        $r12 = r0.<com.android.server.connectivity.Tethering: com.android.internal.util.StateMachine mTetherMasterSM>;

        virtualinvoke $r12.<com.android.internal.util.StateMachine: void start()>();

        $r13 = new com.android.server.connectivity.Tethering$StateReceiver;

        specialinvoke $r13.<com.android.server.connectivity.Tethering$StateReceiver: void <init>(com.android.server.connectivity.Tethering,com.android.server.connectivity.Tethering$1)>(r0, null);

        r0.<com.android.server.connectivity.Tethering: android.content.BroadcastReceiver mStateReceiver> = $r13;

        $r14 = new android.content.IntentFilter;

        specialinvoke $r14.<android.content.IntentFilter: void <init>()>();

        r5 = $r14;

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.hardware.usb.action.USB_STATE");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.CONFIGURATION_CHANGED");

        $r17 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r15 = r0.<com.android.server.connectivity.Tethering: android.content.BroadcastReceiver mStateReceiver>;

        virtualinvoke $r17.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r15, r5);

        $r19 = new android.content.IntentFilter;

        specialinvoke $r19.<android.content.IntentFilter: void <init>()>();

        r30 = $r19;

        virtualinvoke r30.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MEDIA_SHARED");

        virtualinvoke r30.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.MEDIA_UNSHARED");

        virtualinvoke r30.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("file");

        $r21 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r18 = r0.<com.android.server.connectivity.Tethering: android.content.BroadcastReceiver mStateReceiver>;

        virtualinvoke $r21.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r18, r30);

        $r23 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r22 = virtualinvoke $r23.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235988);

        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange> = $r22;

        $r24 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange>;

        $i0 = lengthof $r24;

        if $i0 == 0 goto label1;

        $r29 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange>;

        $i1 = lengthof $r29;

        $i2 = $i1 % 2;

        if $i2 != 1 goto label2;

     label1:
        $r26 = <com.android.server.connectivity.Tethering: java.lang.String[] DHCP_DEFAULT_RANGE>;

        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange> = $r26;

     label2:
        virtualinvoke r0.<com.android.server.connectivity.Tethering: void updateConfiguration()>();

        $r25 = newarray (java.lang.String)[2];

        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDefaultDnsServers> = $r25;

        $r28 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDefaultDnsServers>;

        $r28[0] = "8.8.8.8";

        $r27 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDefaultDnsServers>;

        $r27[1] = "8.8.4.4";

        return;
    }

    private android.net.ConnectivityManager getConnectivityManager()
    {
        com.android.server.connectivity.Tethering r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.ConnectivityManager $r3;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("connectivity");

        $r3 = (android.net.ConnectivityManager) $r2;

        return $r3;
    }

    void updateConfiguration()
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] r1, r2, r3;
        int[] r4, r6;
        java.util.ArrayList r5, $r16;
        int i0, i1, i2;
        java.lang.Throwable r7, $r19;
        android.content.Context $r8, $r10, $r12, $r15;
        android.content.res.Resources $r9, $r11, $r13, $r14;
        java.lang.Object $r17, r20;
        java.lang.Integer $r18;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r8 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r9.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235984);

        $r10 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r11.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235985);

        $r12 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r13.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17235987);

        $r15 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r14 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        r4 = virtualinvoke $r14.<android.content.res.Resources: int[] getIntArray(int)>(17235990);

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        r5 = $r16;

        r6 = r4;

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        i2 = r6[i1];

        $r18 = new java.lang.Integer;

        specialinvoke $r18.<java.lang.Integer: void <init>(int)>(i2);

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r18);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r17 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r20 = $r17;

        entermonitor $r17;

     label3:
        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableUsbRegexs> = r1;

        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableWifiRegexs> = r2;

        r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableBluetoothRegexs> = r3;

        r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes> = r5;

        exitmonitor r20;

     label4:
        goto label7;

     label5:
        $r19 := @caughtexception;

        r7 = $r19;

        exitmonitor r20;

     label6:
        throw r7;

     label7:
        virtualinvoke r0.<com.android.server.connectivity.Tethering: void checkDunRequired()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void interfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6;
        java.lang.Object r2, $r5, $r7;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r3, $r11, r15;
        java.lang.Throwable r4, $r14;
        java.util.HashMap $r6, $r9, $r13;
        android.os.Looper $r10;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 = 0;

        z2 = 0;

        $r5 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $z3 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isWifi(java.lang.String)>(r1);

        if $z3 == 0 goto label02;

        z1 = 1;

        goto label04;

     label02:
        $z4 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>(r1);

        if $z4 == 0 goto label03;

        z1 = 1;

        z2 = 1;

        goto label04;

     label03:
        $z5 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isBluetooth(java.lang.String)>(r1);

        if $z5 == 0 goto label04;

        z1 = 1;

     label04:
        if z1 != 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r6 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r7;

        if z0 == 0 goto label07;

        if r3 != null goto label09;

        $r11 = new com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r10 = r0.<com.android.server.connectivity.Tethering: android.os.Looper mLooper>;

        specialinvoke $r11.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper,boolean)>(r0, r1, $r10, z2);

        r15 = $r11;

        $r13 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r15);

        virtualinvoke r15.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()>();

        goto label09;

     label07:
        $z6 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>(r1);

        if $z6 == 0 goto label08;

        goto label09;

     label08:
        if r3 == null goto label09;

        virtualinvoke r3.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void sendMessage(int)>(4);

        $r9 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label12:
        throw r4;

     label13:
        return;

        catch java.lang.Throwable from label01 to label05 with label11;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void interfaceLinkStateChanged(java.lang.String, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.server.connectivity.Tethering: void interfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    private boolean isUsb(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, r4;
        java.lang.Object r2, $r6;
        java.lang.String[] r3;
        int i0, i1;
        java.lang.Throwable r5, $r7;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        r3 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableUsbRegexs>;

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>(r4);

        if $z0 == 0 goto label4;

        exitmonitor r2;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor r2;

     label6:
        return 0;

     label7:
        $r7 := @caughtexception;

        r5 = $r7;

        exitmonitor r2;

     label8:
        throw r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean isWifi(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, r4;
        java.lang.Object r2, $r6;
        java.lang.String[] r3;
        int i0, i1;
        java.lang.Throwable r5, $r7;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        r3 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableWifiRegexs>;

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>(r4);

        if $z0 == 0 goto label4;

        exitmonitor r2;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor r2;

     label6:
        return 0;

     label7:
        $r7 := @caughtexception;

        r5 = $r7;

        exitmonitor r2;

     label8:
        throw r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean isBluetooth(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, r4;
        java.lang.Object r2, $r6;
        java.lang.String[] r3;
        int i0, i1;
        java.lang.Throwable r5, $r7;
        boolean $z0;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        r3 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableBluetoothRegexs>;

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        $z0 = virtualinvoke r1.<java.lang.String: boolean matches(java.lang.String)>(r4);

        if $z0 == 0 goto label4;

        exitmonitor r2;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        exitmonitor r2;

     label6:
        return 0;

     label7:
        $r7 := @caughtexception;

        r5 = $r7;

        exitmonitor r2;

     label8:
        throw r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void interfaceAdded(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.Object r2, $r5, $r7;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r3, $r8, r13;
        java.lang.Throwable r4, $r12;
        java.util.HashMap $r6, $r10;
        android.os.Looper $r9;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        z0 = 0;

        z1 = 0;

        $r5 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $z2 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isWifi(java.lang.String)>(r1);

        if $z2 == 0 goto label02;

        z0 = 1;

     label02:
        $z3 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>(r1);

        if $z3 == 0 goto label03;

        z0 = 1;

        z1 = 1;

     label03:
        $z4 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isBluetooth(java.lang.String)>(r1);

        if $z4 == 0 goto label04;

        z0 = 1;

     label04:
        if z0 != 0 goto label06;

        exitmonitor r2;

     label05:
        return;

     label06:
        $r6 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r7;

        if r3 == null goto label08;

        exitmonitor r2;

     label07:
        return;

     label08:
        $r8 = new com.android.server.connectivity.Tethering$TetherInterfaceSM;

        $r9 = r0.<com.android.server.connectivity.Tethering: android.os.Looper mLooper>;

        specialinvoke $r8.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper,boolean)>(r0, r1, $r9, z1);

        r13 = $r8;

        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r13);

        virtualinvoke r13.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void start()>();

        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void interfaceRemoved(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1;
        java.lang.Object r2, $r5, $r7;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r3;
        java.lang.Throwable r4, $r10;
        java.util.HashMap $r6, $r8;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r7;

        if r3 != null goto label3;

        exitmonitor r2;

     label2:
        return;

     label3:
        virtualinvoke r3.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void sendMessage(int)>(4);

        $r8 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int tether(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, $r7, $r15, $r19;
        java.lang.Object r2, $r8, $r10;
        java.lang.Throwable r3, $r21;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r20;
        java.util.HashMap $r9;
        boolean $z0, $z1;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r22;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tethering ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Tethering", $r7);

        $r8 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        $r9 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r22 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r10;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r21 := @caughtexception;

        r3 = $r21;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r22 != null goto label6;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to Tether an unknown iface :");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", $r19);

        return 1;

     label6:
        $z0 = virtualinvoke r22.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isAvailable()>();

        if $z0 != 0 goto label7;

        $z1 = virtualinvoke r22.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>();

        if $z1 != 0 goto label7;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to Tether an unavailable iface :");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", $r15);

        return 4;

     label7:
        virtualinvoke r22.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void sendMessage(int)>(2);

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int untether(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, $r7, $r14, $r20;
        java.lang.Object r2, $r8, $r10;
        java.lang.Throwable r3, $r21;
        java.lang.StringBuilder $r4, $r5, $r6, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19;
        java.util.HashMap $r9;
        boolean $z0;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r22;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Untethering ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Tethering", $r7);

        $r8 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        $r9 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r10 = virtualinvoke $r9.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r22 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r10;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r21 := @caughtexception;

        r3 = $r21;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r22 != null goto label6;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to Untether an unknown iface :");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", $r20);

        return 1;

     label6:
        $z0 = virtualinvoke r22.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>();

        if $z0 == 0 goto label7;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to Untethered an errored iface :");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", $r14);

        return 4;

     label7:
        virtualinvoke r22.<com.android.server.connectivity.Tethering$TetherInterfaceSM: void sendMessage(int)>(3);

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getLastTetherError(java.lang.String)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String r1, $r11;
        java.lang.Object r2, $r4, $r6;
        java.lang.Throwable r3, $r12;
        java.util.HashMap $r5;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r13;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r13 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r6;

        if r13 != null goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to getLastTetherError on an unknown iface :");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ignoring");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", $r11);

        exitmonitor r2;

     label2:
        return 1;

     label3:
        $i0 = virtualinvoke r13.<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()>();

        exitmonitor r2;

     label4:
        return $i0;

     label5:
        $r12 := @caughtexception;

        r3 = $r12;

        exitmonitor r2;

     label6:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void sendTetherStateChangedBroadcast()
    {
        com.android.server.connectivity.Tethering r0;
        java.util.ArrayList r1, r2, r3, $r11, $r12, $r13;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object r4, r7, $r15, $r31;
        java.util.Set r5;
        java.util.Iterator r6;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r8;
        java.lang.Throwable r9, $r38;
        android.net.ConnectivityManager $r10;
        java.util.HashMap $r14, $r32;
        android.content.Intent $r17, r40;
        android.os.UserHandle $r20;
        java.lang.StringBuilder $r22, $r24, $r25, $r26, $r27, $r28, $r30;
        android.content.Context $r23;
        int $i0, $i1, $i3;
        java.lang.String $r29, $r33, $r34, $r35, $r36, $r37, $r39;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r10 = specialinvoke r0.<com.android.server.connectivity.Tethering: android.net.ConnectivityManager getConnectivityManager()>();

        $z3 = virtualinvoke $r10.<android.net.ConnectivityManager: boolean isTetheringSupported()>();

        if $z3 != 0 goto label01;

        return;

     label01:
        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r1 = $r11;

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r2 = $r13;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r3 = $r12;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        $r15 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r4 = $r15;

        entermonitor $r15;

     label02:
        $r14 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        r5 = virtualinvoke $r14.<java.util.HashMap: java.util.Set keySet()>();

        r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        $r32 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r31 = virtualinvoke $r32.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r31;

        if r8 == null goto label09;

        $z5 = virtualinvoke r8.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>();

        if $z5 == 0 goto label04;

        $r39 = (java.lang.String) r7;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r39);

        goto label09;

     label04:
        $z8 = virtualinvoke r8.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isAvailable()>();

        if $z8 == 0 goto label05;

        $r36 = (java.lang.String) r7;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r36);

        goto label09;

     label05:
        $z7 = virtualinvoke r8.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isTethered()>();

        if $z7 == 0 goto label09;

        $r33 = (java.lang.String) r7;

        $z6 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>($r33);

        if $z6 == 0 goto label06;

        z1 = 1;

        goto label08;

     label06:
        $r35 = (java.lang.String) r7;

        $z10 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isWifi(java.lang.String)>($r35);

        if $z10 == 0 goto label07;

        z0 = 1;

        goto label08;

     label07:
        $r34 = (java.lang.String) r7;

        $z9 = virtualinvoke r0.<com.android.server.connectivity.Tethering: boolean isBluetooth(java.lang.String)>($r34);

        if $z9 == 0 goto label08;

        z2 = 1;

     label08:
        $r37 = (java.lang.String) r7;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r37);

     label09:
        goto label03;

     label10:
        exitmonitor r4;

     label11:
        goto label14;

     label12:
        $r38 := @caughtexception;

        r9 = $r38;

        exitmonitor r4;

     label13:
        throw r9;

     label14:
        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.TETHER_STATE_CHANGED");

        r40 = $r17;

        virtualinvoke r40.<android.content.Intent: android.content.Intent addFlags(int)>(603979776);

        virtualinvoke r40.<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>("availableArray", r1);

        virtualinvoke r40.<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>("activeArray", r2);

        virtualinvoke r40.<android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)>("erroredArray", r3);

        $r23 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r20 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r23.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r40, $r20);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendTetherStateChangedBroadcast ");

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i3 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Tethering", $r29);

        if z1 == 0 goto label17;

        if z0 != 0 goto label15;

        if z2 == 0 goto label16;

     label15:
        specialinvoke r0.<com.android.server.connectivity.Tethering: void showTetheredNotification(int)>(17303190);

        goto label21;

     label16:
        specialinvoke r0.<com.android.server.connectivity.Tethering: void showTetheredNotification(int)>(17303191);

        goto label21;

     label17:
        if z0 == 0 goto label19;

        if z2 == 0 goto label18;

        specialinvoke r0.<com.android.server.connectivity.Tethering: void showTetheredNotification(int)>(17303190);

        goto label21;

     label18:
        specialinvoke r0.<com.android.server.connectivity.Tethering: void showTetheredNotification(int)>(17303192);

        goto label21;

     label19:
        if z2 == 0 goto label20;

        specialinvoke r0.<com.android.server.connectivity.Tethering: void showTetheredNotification(int)>(17303189);

        goto label21;

     label20:
        specialinvoke r0.<com.android.server.connectivity.Tethering: void clearTetheredNotification()>();

     label21:
        return;

        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void showTetheredNotification(int)
    {
        com.android.server.connectivity.Tethering r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.app.NotificationManager r1;
        android.content.Intent r2, $r10;
        android.app.PendingIntent r3;
        android.content.res.Resources r4, $r23;
        java.lang.CharSequence r5, r6;
        android.content.Context $r7, $r14, $r22, $r26;
        java.lang.Object $r8;
        android.app.Notification $r9, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r27, $r28, $r30, $r31, $r32, $r33;
        android.os.UserHandle $r13, $r29, $r34;

        r0 := @this: com.android.server.connectivity.Tethering;

        i0 := @parameter0: int;

        $r7 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r1 = (android.app.NotificationManager) $r8;

        if r1 != null goto label1;

        return;

     label1:
        $r9 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        if $r9 == null goto label3;

        $r33 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $i5 = $r33.<android.app.Notification: int icon>;

        if $i5 != i0 goto label2;

        return;

     label2:
        $r31 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $i6 = $r31.<android.app.Notification: int icon>;

        $r34 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r1.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, $i6, $r34);

     label3:
        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>()>();

        r2 = $r10;

        virtualinvoke r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.settings", "com.android.settings.TetherSettings");

        virtualinvoke r2.<android.content.Intent: android.content.Intent setFlags(int)>(1073741824);

        $r14 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r13 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r3 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r14, 0, r2, 0, null, $r13);

        r4 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        r5 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040713);

        r6 = virtualinvoke r4.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17040714);

        $r16 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        if $r16 != null goto label4;

        $r28 = new android.app.Notification;

        specialinvoke $r28.<android.app.Notification: void <init>()>();

        r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification> = $r28;

        $r32 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r32.<android.app.Notification: long when> = 0L;

     label4:
        $r15 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r15.<android.app.Notification: int icon> = i0;

        $r17 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $i1 = $r17.<android.app.Notification: int defaults>;

        $i2 = $i1 & -2;

        $r17.<android.app.Notification: int defaults> = $i2;

        $r18 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r18.<android.app.Notification: int flags> = 2;

        $r20 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r20.<android.app.Notification: java.lang.CharSequence tickerText> = r5;

        $r19 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r19.<android.app.Notification: int visibility> = 1;

        $r21 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r22 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r23.<android.content.res.Resources: int getColor(int)>(17170520);

        $r21.<android.app.Notification: int color> = $i3;

        $r27 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r26 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        virtualinvoke $r27.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>($r26, r5, r6, r3);

        $r24 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r24.<android.app.Notification: java.lang.String category> = "status";

        $r25 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $i4 = $r25.<android.app.Notification: int icon>;

        $r30 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $r29 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r1.<android.app.NotificationManager: void notifyAsUser(java.lang.String,int,android.app.Notification,android.os.UserHandle)>(null, $i4, $r30, $r29);

        return;
    }

    private void clearTetheredNotification()
    {
        com.android.server.connectivity.Tethering r0;
        android.app.NotificationManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.app.Notification $r4, $r5;
        android.os.UserHandle $r6;
        int $i0;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r2 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r1 = (android.app.NotificationManager) $r3;

        if r1 == null goto label1;

        $r4 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        if $r4 == null goto label1;

        $r5 = r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification>;

        $i0 = $r5.<android.app.Notification: int icon>;

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke r1.<android.app.NotificationManager: void cancelAsUser(java.lang.String,int,android.os.UserHandle)>(null, $i0, $r6);

        r0.<com.android.server.connectivity.Tethering: android.app.Notification mTetheredNotification> = null;

     label1:
        return;
    }

    private void tetherUsb(boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0, $z1;
        java.lang.String[] r1, r6, r7;
        java.lang.Exception r2, $r5;
        int i0, i1, i2, $i4;
        java.lang.String r3;
        android.os.INetworkManagementService $r4;

        r0 := @this: com.android.server.connectivity.Tethering;

        z0 := @parameter0: boolean;

        r1 = newarray (java.lang.String)[0];

     label1:
        $r4 = r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService>;

        r6 = interfaceinvoke $r4.<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Tethering", "Error listing Interfaces", r2);

        return;

     label4:
        r7 = r6;

        i0 = lengthof r7;

        i1 = 0;

     label5:
        if i1 >= i0 goto label9;

        r3 = r7[i1];

        $z1 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>(r3);

        if $z1 == 0 goto label8;

        if z0 == 0 goto label6;

        $i4 = virtualinvoke r0.<com.android.server.connectivity.Tethering: int tether(java.lang.String)>(r3);

        goto label7;

     label6:
        $i4 = virtualinvoke r0.<com.android.server.connectivity.Tethering: int untether(java.lang.String)>(r3);

     label7:
        i2 = $i4;

        if i2 != 0 goto label8;

        return;

     label8:
        i1 = i1 + 1;

        goto label5;

     label9:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Tethering", "unable start or stop USB tethering");

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean configureUsbIface(boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0, $z1;
        java.lang.String[] r1, r15, r16;
        java.lang.Exception r2, $r8, $r10, r18;
        int i0, i1;
        java.lang.String r3, $r14;
        java.net.InetAddress r4;
        android.os.INetworkManagementService $r5, $r6, $r9;
        android.net.LinkAddress $r7;
        java.lang.StringBuilder $r11, $r12, $r13;
        android.net.InterfaceConfiguration r17;

        r0 := @this: com.android.server.connectivity.Tethering;

        z0 := @parameter0: boolean;

        r1 = newarray (java.lang.String)[0];

     label01:
        $r5 = r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService>;

        r15 = interfaceinvoke $r5.<android.os.INetworkManagementService: java.lang.String[] listInterfaces()>();

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r2 = $r8;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Tethering", "Error listing Interfaces", r2);

        return 0;

     label04:
        r16 = r15;

        i0 = lengthof r16;

        i1 = 0;

     label05:
        if i1 >= i0 goto label12;

        r3 = r16[i1];

        $z1 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>(r3);

        if $z1 == 0 goto label11;

     label06:
        $r6 = r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService>;

        r17 = interfaceinvoke $r6.<android.os.INetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r3);

        if r17 == null goto label09;

        r4 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>("192.168.42.129");

        $r7 = new android.net.LinkAddress;

        specialinvoke $r7.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r4, 24);

        virtualinvoke r17.<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)>($r7);

        if z0 == 0 goto label07;

        virtualinvoke r17.<android.net.InterfaceConfiguration: void setInterfaceUp()>();

        goto label08;

     label07:
        virtualinvoke r17.<android.net.InterfaceConfiguration: void setInterfaceDown()>();

     label08:
        virtualinvoke r17.<android.net.InterfaceConfiguration: void clearFlag(java.lang.String)>("running");

        $r9 = r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService>;

        interfaceinvoke $r9.<android.os.INetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r3, r17);

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

        r18 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error configuring interface ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Tethering", $r14, r18);

        return 0;

     label11:
        i1 = i1 + 1;

        goto label05;

     label12:
        return 1;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label06 to label09 with label10;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableUsbRegexs>;

        return $r1;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableWifiRegexs>;

        return $r1;
    }

    public java.lang.String[] getTetherableBluetoothRegexs()
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mTetherableBluetoothRegexs>;

        return $r1;
    }

    public int setUsbTethering(boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0, $z1, $z2;
        android.hardware.usb.UsbManager r1;
        java.lang.Object r2, $r5, $r6;
        java.lang.Throwable r3, $r7;
        android.content.Context $r4;

        r0 := @this: com.android.server.connectivity.Tethering;

        z0 := @parameter0: boolean;

        $r4 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("usb");

        r1 = (android.hardware.usb.UsbManager) $r5;

        $r6 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        if z0 == 0 goto label3;

        $z2 = r0.<com.android.server.connectivity.Tethering: boolean mRndisEnabled>;

        if $z2 == 0 goto label2;

        specialinvoke r0.<com.android.server.connectivity.Tethering: void tetherUsb(boolean)>(1);

        goto label5;

     label2:
        r0.<com.android.server.connectivity.Tethering: boolean mUsbTetherRequested> = 1;

        virtualinvoke r1.<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>("rndis", 0);

        goto label5;

     label3:
        specialinvoke r0.<com.android.server.connectivity.Tethering: void tetherUsb(boolean)>(0);

        $z1 = r0.<com.android.server.connectivity.Tethering: boolean mRndisEnabled>;

        if $z1 == 0 goto label4;

        virtualinvoke r1.<android.hardware.usb.UsbManager: void setCurrentFunction(java.lang.String,boolean)>(null, 0);

     label4:
        r0.<com.android.server.connectivity.Tethering: boolean mUsbTetherRequested> = 0;

     label5:
        exitmonitor r2;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label8:
        throw r3;

     label9:
        return 0;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int[] getUpstreamIfaceTypes()
    {
        com.android.server.connectivity.Tethering r0;
        int[] r1;
        java.lang.Object r2, $r5, $r9;
        java.util.Iterator r3;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r4, $r11;
        java.util.Collection $r6, $r7, $r8;
        java.lang.Integer $r10;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r5 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        virtualinvoke r0.<com.android.server.connectivity.Tethering: void updateConfiguration()>();

        $r6 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $i1 = interfaceinvoke $r6.<java.util.Collection: int size()>();

        r1 = newarray (int)[$i1];

        $r7 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

        i0 = 0;

     label2:
        $r8 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $i2 = interfaceinvoke $r8.<java.util.Collection: int size()>();

        if i0 >= $i2 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Integer) $r9;

        $i3 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        r1[i0] = $i3;

        i0 = i0 + 1;

        goto label2;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        return r1;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void checkDunRequired()
    {
        com.android.server.connectivity.Tethering r0;
        int i0;
        java.lang.Object r1, $r5;
        byte b1, $b2;
        java.lang.Throwable r2, $r32;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        java.lang.Integer $r6, $r8, $r11, $r12, $r15, $r16, $r19, $r20, $r21, $r25, $r26, $r27, $r29;
        java.util.Collection $r7, $r9, $r10, $r13, $r14, $r17, $r18, $r22, $r23, $r24, $r28, $r30, $r31;
        boolean $z0, $z1, $z2, $z3, $z7, $z8, $z9;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r3 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "tether_dun_required", 2);

        $r5 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        if i0 == 2 goto label10;

        if i0 != 1 goto label02;

        $b2 = 4;

        goto label03;

     label02:
        $b2 = 5;

     label03:
        b1 = $b2;

        if b1 != 4 goto label07;

     label04:
        $r23 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r20 = <com.android.server.connectivity.Tethering: java.lang.Integer MOBILE_TYPE>;

        $z7 = interfaceinvoke $r23.<java.util.Collection: boolean contains(java.lang.Object)>($r20);

        if $z7 == 0 goto label05;

        $r30 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r29 = <com.android.server.connectivity.Tethering: java.lang.Integer MOBILE_TYPE>;

        interfaceinvoke $r30.<java.util.Collection: boolean remove(java.lang.Object)>($r29);

        goto label04;

     label05:
        $r22 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r21 = <com.android.server.connectivity.Tethering: java.lang.Integer HIPRI_TYPE>;

        $z9 = interfaceinvoke $r22.<java.util.Collection: boolean contains(java.lang.Object)>($r21);

        if $z9 == 0 goto label06;

        $r31 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r26 = <com.android.server.connectivity.Tethering: java.lang.Integer HIPRI_TYPE>;

        interfaceinvoke $r31.<java.util.Collection: boolean remove(java.lang.Object)>($r26);

        goto label05;

     label06:
        $r24 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r25 = <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE>;

        $z8 = interfaceinvoke $r24.<java.util.Collection: boolean contains(java.lang.Object)>($r25);

        if $z8 != 0 goto label10;

        $r28 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r27 = <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE>;

        interfaceinvoke $r28.<java.util.Collection: boolean add(java.lang.Object)>($r27);

        goto label10;

     label07:
        $r9 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r8 = <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE>;

        $z1 = interfaceinvoke $r9.<java.util.Collection: boolean contains(java.lang.Object)>($r8);

        if $z1 == 0 goto label08;

        $r18 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r19 = <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE>;

        interfaceinvoke $r18.<java.util.Collection: boolean remove(java.lang.Object)>($r19);

        goto label07;

     label08:
        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r11 = <com.android.server.connectivity.Tethering: java.lang.Integer MOBILE_TYPE>;

        $z2 = interfaceinvoke $r10.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        if $z2 != 0 goto label09;

        $r17 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r16 = <com.android.server.connectivity.Tethering: java.lang.Integer MOBILE_TYPE>;

        interfaceinvoke $r17.<java.util.Collection: boolean add(java.lang.Object)>($r16);

     label09:
        $r13 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r12 = <com.android.server.connectivity.Tethering: java.lang.Integer HIPRI_TYPE>;

        $z3 = interfaceinvoke $r13.<java.util.Collection: boolean contains(java.lang.Object)>($r12);

        if $z3 != 0 goto label10;

        $r14 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r15 = <com.android.server.connectivity.Tethering: java.lang.Integer HIPRI_TYPE>;

        interfaceinvoke $r14.<java.util.Collection: boolean add(java.lang.Object)>($r15);

     label10:
        $r7 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        $r6 = <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE>;

        $z0 = interfaceinvoke $r7.<java.util.Collection: boolean contains(java.lang.Object)>($r6);

        if $z0 == 0 goto label11;

        r0.<com.android.server.connectivity.Tethering: int mPreferredUpstreamMobileApn> = 4;

        goto label12;

     label11:
        r0.<com.android.server.connectivity.Tethering: int mPreferredUpstreamMobileApn> = 5;

     label12:
        exitmonitor r1;

     label13:
        goto label16;

     label14:
        $r32 := @caughtexception;

        r2 = $r32;

        exitmonitor r1;

     label15:
        throw r2;

     label16:
        return;

        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        com.android.server.connectivity.Tethering r0;
        java.util.ArrayList r1, $r8;
        java.lang.Object r2, r5, $r9, $r11, $r13;
        java.util.Set r3;
        java.util.Iterator r4;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r6;
        java.lang.Throwable r7, $r16;
        java.util.HashMap $r10, $r14;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.String $r12, $r15;
        java.lang.String[] r17;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r1 = $r8;

        $r9 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r9;

        entermonitor $r9;

     label01:
        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        r3 = virtualinvoke $r10.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r14 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r13;

        $z1 = virtualinvoke r6.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isTethered()>();

        if $z1 == 0 goto label03;

        $r15 = (java.lang.String) r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label03:
        goto label02;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        r7 = $r16;

        exitmonitor r2;

     label07:
        throw r7;

     label08:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r17 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label09:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label10;

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r12 = (java.lang.String) $r11;

        r17[i2] = $r12;

        i2 = i2 + 1;

        goto label09;

     label10:
        return r17;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        com.android.server.connectivity.Tethering r0;
        java.util.ArrayList r1, $r8;
        java.lang.Object r2, r5, $r9, $r11, $r13;
        java.util.Set r3;
        java.util.Iterator r4;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r6;
        java.lang.Throwable r7, $r16;
        java.util.HashMap $r10, $r14;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.String $r12, $r15;
        java.lang.String[] r17;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r1 = $r8;

        $r9 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r9;

        entermonitor $r9;

     label01:
        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        r3 = virtualinvoke $r10.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r14 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r13;

        $z1 = virtualinvoke r6.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isAvailable()>();

        if $z1 == 0 goto label03;

        $r15 = (java.lang.String) r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label03:
        goto label02;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        r7 = $r16;

        exitmonitor r2;

     label07:
        throw r7;

     label08:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r17 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label09:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label10;

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r12 = (java.lang.String) $r11;

        r17[i2] = $r12;

        i2 = i2 + 1;

        goto label09;

     label10:
        return r17;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public java.lang.String[] getTetheredDhcpRanges()
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange>;

        return $r1;
    }

    public java.lang.String[] getErroredIfaces()
    {
        com.android.server.connectivity.Tethering r0;
        java.util.ArrayList r1, $r8;
        java.lang.Object r2, r5, $r9, $r11, $r13;
        java.util.Set r3;
        java.util.Iterator r4;
        com.android.server.connectivity.Tethering$TetherInterfaceSM r6;
        java.lang.Throwable r7, $r16;
        java.util.HashMap $r10, $r14;
        boolean $z0, $z1;
        int $i0, $i1, i2;
        java.lang.String $r12, $r15;
        java.lang.String[] r17;

        r0 := @this: com.android.server.connectivity.Tethering;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r1 = $r8;

        $r9 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r2 = $r9;

        entermonitor $r9;

     label01:
        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        r3 = virtualinvoke $r10.<java.util.HashMap: java.util.Set keySet()>();

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r14 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (com.android.server.connectivity.Tethering$TetherInterfaceSM) $r13;

        $z1 = virtualinvoke r6.<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>();

        if $z1 == 0 goto label03;

        $r15 = (java.lang.String) r5;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label03:
        goto label02;

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        r7 = $r16;

        exitmonitor r2;

     label07:
        throw r7;

     label08:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r17 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label09:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i2 >= $i1 goto label10;

        $r11 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r12 = (java.lang.String) $r11;

        r17[i2] = $r12;

        i2 = i2 + 1;

        goto label09;

     label10:
        return r17;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.connectivity.Tethering r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r9, $r18, r30;
        java.util.Iterator r5, r29;
        java.lang.Integer r6;
        java.lang.Throwable r7, $r28;
        android.content.Context $r8;
        int $i0, $i1, $i2;
        java.util.Collection $r10, $r12;
        boolean $z0, $z1;
        java.util.HashMap $r11;
        java.lang.StringBuilder $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r25, $r26;
        java.lang.String $r15, $r22, $r27;

        r0 := @this: com.android.server.connectivity.Tethering;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.connectivity.Tethering: android.content.Context mContext>;

        $i0 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ConnectivityService.Tether from from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        return;

     label01:
        $r9 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        r4 = $r9;

        entermonitor $r9;

     label02:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("mUpstreamIfaceTypes: ");

        $r10 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        r5 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r18 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Integer) $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r22);

        goto label03;

     label04:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Tether state:");

        $r11 = r0.<com.android.server.connectivity.Tethering: java.util.HashMap mIfaces>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.util.Collection values()>();

        r29 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        r30 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        goto label05;

     label06:
        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r28 := @caughtexception;

        r7 = $r28;

        exitmonitor r4;

     label09:
        throw r7;

     label10:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        return;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static java.lang.Object access$100(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.Object mPublicSync>;

        return $r1;
    }

    static boolean access$202(com.android.server.connectivity.Tethering, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        z0 := @parameter1: boolean;

        r0.<com.android.server.connectivity.Tethering: boolean mRndisEnabled> = z0;

        return z0;
    }

    static boolean access$200(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $z0 = r0.<com.android.server.connectivity.Tethering: boolean mRndisEnabled>;

        return $z0;
    }

    static boolean access$300(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $z0 = r0.<com.android.server.connectivity.Tethering: boolean mUsbTetherRequested>;

        return $z0;
    }

    static void access$400(com.android.server.connectivity.Tethering, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.connectivity.Tethering: void tetherUsb(boolean)>(z0);

        return;
    }

    static boolean access$302(com.android.server.connectivity.Tethering, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        z0 := @parameter1: boolean;

        r0.<com.android.server.connectivity.Tethering: boolean mUsbTetherRequested> = z0;

        return z0;
    }

    static com.android.internal.util.StateMachine access$500(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        com.android.internal.util.StateMachine $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: com.android.internal.util.StateMachine mTetherMasterSM>;

        return $r1;
    }

    static boolean access$600(com.android.server.connectivity.Tethering, boolean)
    {
        com.android.server.connectivity.Tethering r0;
        boolean z0, $z1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        z0 := @parameter1: boolean;

        $z1 = specialinvoke r0.<com.android.server.connectivity.Tethering: boolean configureUsbIface(boolean)>(z0);

        return $z1;
    }

    static void access$900(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        specialinvoke r0.<com.android.server.connectivity.Tethering: void sendTetherStateChangedBroadcast()>();

        return;
    }

    static android.os.INetworkManagementService access$2100(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        android.os.INetworkManagementService $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: android.os.INetworkManagementService mNMService>;

        return $r1;
    }

    static android.net.INetworkStatsService access$2300(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        android.net.INetworkStatsService $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: android.net.INetworkStatsService mStatsService>;

        return $r1;
    }

    static android.net.ConnectivityManager access$3000(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        android.net.ConnectivityManager $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = specialinvoke r0.<com.android.server.connectivity.Tethering: android.net.ConnectivityManager getConnectivityManager()>();

        return $r1;
    }

    static java.lang.String[] access$3400(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDhcpRange>;

        return $r1;
    }

    static java.util.Collection access$4300(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        java.util.Collection $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.util.Collection mUpstreamIfaceTypes>;

        return $r1;
    }

    static int access$4400(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $i0 = r0.<com.android.server.connectivity.Tethering: int mPreferredUpstreamMobileApn>;

        return $i0;
    }

    static java.lang.String[] access$4500(com.android.server.connectivity.Tethering)
    {
        com.android.server.connectivity.Tethering r0;
        java.lang.String[] $r1;

        r0 := @parameter0: com.android.server.connectivity.Tethering;

        $r1 = r0.<com.android.server.connectivity.Tethering: java.lang.String[] mDefaultDnsServers>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1, $r2;
        java.lang.String[] $r3;

        <com.android.server.connectivity.Tethering: java.lang.String DNS_DEFAULT_SERVER2> = "8.8.4.4";

        <com.android.server.connectivity.Tethering: java.lang.String DNS_DEFAULT_SERVER1> = "8.8.8.8";

        <com.android.server.connectivity.Tethering: int USB_PREFIX_LENGTH> = 24;

        <com.android.server.connectivity.Tethering: java.lang.String USB_NEAR_IFACE_ADDR> = "192.168.42.129";

        <com.android.server.connectivity.Tethering: boolean VDBG> = 0;

        <com.android.server.connectivity.Tethering: boolean DBG> = 1;

        <com.android.server.connectivity.Tethering: java.lang.String TAG> = "Tethering";

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(0);

        <com.android.server.connectivity.Tethering: java.lang.Integer MOBILE_TYPE> = $r0;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>(5);

        <com.android.server.connectivity.Tethering: java.lang.Integer HIPRI_TYPE> = $r1;

        $r2 = new java.lang.Integer;

        specialinvoke $r2.<java.lang.Integer: void <init>(int)>(4);

        <com.android.server.connectivity.Tethering: java.lang.Integer DUN_TYPE> = $r2;

        $r3 = newarray (java.lang.String)[16];

        $r3[0] = "192.168.42.2";

        $r3[1] = "192.168.42.254";

        $r3[2] = "192.168.43.2";

        $r3[3] = "192.168.43.254";

        $r3[4] = "192.168.44.2";

        $r3[5] = "192.168.44.254";

        $r3[6] = "192.168.45.2";

        $r3[7] = "192.168.45.254";

        $r3[8] = "192.168.46.2";

        $r3[9] = "192.168.46.254";

        $r3[10] = "192.168.47.2";

        $r3[11] = "192.168.47.254";

        $r3[12] = "192.168.48.2";

        $r3[13] = "192.168.48.254";

        $r3[14] = "192.168.49.2";

        $r3[15] = "192.168.49.254";

        <com.android.server.connectivity.Tethering: java.lang.String[] DHCP_DEFAULT_RANGE> = $r3;

        return;
    }
}
