public class com.android.server.NetworkManagementService extends android.os.INetworkManagementService$Stub implements com.android.server.Watchdog$Monitor
{
    private static final java.lang.String TAG;
    private static final boolean DBG;
    private static final java.lang.String NETD_TAG;
    private static final java.lang.String NETD_SOCKET_NAME;
    private static final int MAX_UID_RANGES_PER_COMMAND;
    public static final java.lang.String LIMIT_GLOBAL_ALERT;
    static final int DAEMON_MSG_MOBILE_CONN_REAL_TIME_INFO;
    private final android.content.Context mContext;
    private final com.android.server.NativeDaemonConnector mConnector;
    private final android.os.Handler mFgHandler;
    private final android.os.Handler mDaemonHandler;
    private final android.telephony.PhoneStateListener mPhoneStateListener;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    private final java.lang.Thread mThread;
    private java.util.concurrent.CountDownLatch mConnectedSignal;
    private final android.os.RemoteCallbackList mObservers;
    private final com.android.internal.net.NetworkStatsFactory mStatsFactory;
    private java.lang.Object mQuotaLock;
    private java.util.HashMap mActiveQuotas;
    private java.util.HashMap mActiveAlerts;
    private android.util.SparseBooleanArray mUidRejectOnQuota;
    private java.lang.Object mIdleTimerLock;
    private java.util.HashMap mActiveIdleTimers;
    private volatile boolean mBandwidthControlEnabled;
    private volatile boolean mFirewallEnabled;
    private boolean mMobileActivityFromRadio;
    private int mLastPowerStateFromRadio;
    private final android.os.RemoteCallbackList mNetworkActivityListeners;
    private boolean mNetworkActive;

    private void <init>(android.content.Context, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context r1;
        java.lang.String r2, $r16, $r18;
        android.telephony.TelephonyManager r3;
        java.util.concurrent.CountDownLatch $r4;
        android.os.RemoteCallbackList $r5, $r13;
        com.android.internal.net.NetworkStatsFactory $r6;
        java.lang.Object $r7, $r11, $r30;
        java.util.HashMap $r8, $r9, $r12;
        android.util.SparseBooleanArray $r10;
        int $i0;
        com.android.server.FgThread $r14, $r21, $r28;
        android.os.Handler $r15, $r24, $r27;
        android.os.Looper $r17, $r23, $r29, $r32;
        boolean $z0;
        com.android.server.NetworkManagementService$NetdCallbackReceiver $r19;
        com.android.server.NativeDaemonConnector $r20, $r25;
        java.lang.Thread $r22;
        com.android.server.NetworkManagementService$1 $r26;
        com.android.server.Watchdog $r31;
        android.telephony.PhoneStateListener $r33;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<android.os.INetworkManagementService$Stub: void <init>()>();

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r0.<com.android.server.NetworkManagementService: java.util.concurrent.CountDownLatch mConnectedSignal> = $r4;

        $r5 = new android.os.RemoteCallbackList;

        specialinvoke $r5.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers> = $r5;

        $r6 = new com.android.internal.net.NetworkStatsFactory;

        specialinvoke $r6.<com.android.internal.net.NetworkStatsFactory: void <init>()>();

        r0.<com.android.server.NetworkManagementService: com.android.internal.net.NetworkStatsFactory mStatsFactory> = $r6;

        $r7 = new java.lang.Object;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock> = $r7;

        $r8 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas> = $r8;

        $r9 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts> = $r9;

        $r10 = new android.util.SparseBooleanArray;

        specialinvoke $r10.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota> = $r10;

        $r11 = new java.lang.Object;

        specialinvoke $r11.<java.lang.Object: void <init>()>();

        r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock> = $r11;

        $r12 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers> = $r12;

        r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio> = 0;

        $i0 = <android.telephony.DataConnectionRealTimeInfo: int DC_POWER_STATE_LOW>;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio> = $i0;

        $r13 = new android.os.RemoteCallbackList;

        specialinvoke $r13.<android.os.RemoteCallbackList: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners> = $r13;

        r0.<com.android.server.NetworkManagementService: android.content.Context mContext> = r1;

        $r15 = new android.os.Handler;

        $r14 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r17 = virtualinvoke $r14.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r15.<android.os.Handler: void <init>(android.os.Looper)>($r17);

        r0.<com.android.server.NetworkManagementService: android.os.Handler mFgHandler> = $r15;

        $r16 = "simulator";

        $r18 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.product.device");

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z0 == 0 goto label1;

        r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector> = null;

        r0.<com.android.server.NetworkManagementService: java.lang.Thread mThread> = null;

        r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler> = null;

        r0.<com.android.server.NetworkManagementService: android.telephony.PhoneStateListener mPhoneStateListener> = null;

        return;

     label1:
        $r20 = new com.android.server.NativeDaemonConnector;

        $r19 = new com.android.server.NetworkManagementService$NetdCallbackReceiver;

        specialinvoke $r19.<com.android.server.NetworkManagementService$NetdCallbackReceiver: void <init>(com.android.server.NetworkManagementService,com.android.server.NetworkManagementService$1)>(r0, null);

        $r21 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r23 = virtualinvoke $r21.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r20.<com.android.server.NativeDaemonConnector: void <init>(com.android.server.INativeDaemonConnectorCallbacks,java.lang.String,int,java.lang.String,int,android.os.PowerManager$WakeLock,android.os.Looper)>($r19, r2, 10, "NetdConnector", 160, null, $r23);

        r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector> = $r20;

        $r22 = new java.lang.Thread;

        $r25 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        specialinvoke $r22.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r25, "NetdConnector");

        r0.<com.android.server.NetworkManagementService: java.lang.Thread mThread> = $r22;

        $r24 = new android.os.Handler;

        $r28 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r29 = virtualinvoke $r28.<com.android.server.FgThread: android.os.Looper getLooper()>();

        specialinvoke $r24.<android.os.Handler: void <init>(android.os.Looper)>($r29);

        r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler> = $r24;

        $r26 = new com.android.server.NetworkManagementService$1;

        $r27 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        $r32 = virtualinvoke $r27.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r26.<com.android.server.NetworkManagementService$1: void <init>(com.android.server.NetworkManagementService,long,android.os.Looper)>(r0, 9223372036854775807L, $r32);

        r0.<com.android.server.NetworkManagementService: android.telephony.PhoneStateListener mPhoneStateListener> = $r26;

        $r30 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        r3 = (android.telephony.TelephonyManager) $r30;

        if r3 == null goto label2;

        $r33 = r0.<com.android.server.NetworkManagementService: android.telephony.PhoneStateListener mPhoneStateListener>;

        virtualinvoke r3.<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>($r33, 8192);

     label2:
        $r31 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r31.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>(r0);

        return;
    }

    static com.android.server.NetworkManagementService create(android.content.Context, java.lang.String) throws java.lang.InterruptedException
    {
        android.content.Context r0;
        java.lang.String r1;
        com.android.server.NetworkManagementService r2, $r4;
        java.util.concurrent.CountDownLatch r3;
        java.lang.Thread $r5;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        $r4 = new com.android.server.NetworkManagementService;

        specialinvoke $r4.<com.android.server.NetworkManagementService: void <init>(android.content.Context,java.lang.String)>(r0, r1);

        r2 = $r4;

        r3 = r2.<com.android.server.NetworkManagementService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        $r5 = r2.<com.android.server.NetworkManagementService: java.lang.Thread mThread>;

        virtualinvoke $r5.<java.lang.Thread: void start()>();

        virtualinvoke r3.<java.util.concurrent.CountDownLatch: void await()>();

        return r2;
    }

    public static com.android.server.NetworkManagementService create(android.content.Context) throws java.lang.InterruptedException
    {
        android.content.Context r0;
        com.android.server.NetworkManagementService $r1;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <com.android.server.NetworkManagementService: com.android.server.NetworkManagementService create(android.content.Context,java.lang.String)>(r0, "netd");

        return $r1;
    }

    public void systemReady()
    {
        com.android.server.NetworkManagementService r0;

        r0 := @this: com.android.server.NetworkManagementService;

        specialinvoke r0.<com.android.server.NetworkManagementService: void prepareNativeDaemon()>();

        return;
    }

    private com.android.internal.app.IBatteryStats getBatteryStats()
    {
        com.android.server.NetworkManagementService r0, r1;
        java.lang.Throwable r2, $r9;
        com.android.internal.app.IBatteryStats $r4, $r6, $r7, $r8;
        android.os.IBinder $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats>;

        if $r4 == null goto label3;

        $r8 = r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats>;

        exitmonitor r1;

     label2:
        return $r8;

     label3:
        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batterystats");

        $r6 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r5);

        r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats> = $r6;

        $r7 = r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats mBatteryStats>;

        exitmonitor r1;

     label4:
        return $r7;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void registerObserver(android.net.INetworkManagementEventObserver)
    {
        com.android.server.NetworkManagementService r0;
        android.net.INetworkManagementEventObserver r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void unregisterObserver(android.net.INetworkManagementEventObserver)
    {
        com.android.server.NetworkManagementService r0;
        android.net.INetworkManagementEventObserver r1;
        android.content.Context $r2;
        android.os.RemoteCallbackList $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.INetworkManagementEventObserver;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r3.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    private void notifyInterfaceStatusChanged(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;
        int i0, i1;
        java.lang.Throwable r3, $r11;
        android.os.RemoteCallbackList $r4, $r5, $r6, $r12;
        android.os.IInterface $r7;
        android.net.INetworkManagementEventObserver $r8;
        java.lang.RuntimeException $r9;
        android.os.RemoteException $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r4.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r7 = virtualinvoke $r6.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r8 = (android.net.INetworkManagementEventObserver) $r7;

        interfaceinvoke $r8.<android.net.INetworkManagementEventObserver: void interfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r5.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

     label10:
        $r12 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r12.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r3;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyInterfaceLinkStateChanged(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;
        int i0, i1;
        java.lang.Throwable r3, $r9;
        android.os.RemoteCallbackList $r4, $r5, $r6, $r10;
        android.os.IInterface $r7;
        android.net.INetworkManagementEventObserver $r8;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r4.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r7 = virtualinvoke $r6.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r8 = (android.net.INetworkManagementEventObserver) $r7;

        interfaceinvoke $r8.<android.net.INetworkManagementEventObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>(r1, z0);

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r5.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

     label10:
        $r10 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r10.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r3;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyInterfaceAdded(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.Throwable r3, $r11;
        android.os.RemoteCallbackList $r4, $r5, $r6, $r12;
        android.os.IInterface $r7;
        android.net.INetworkManagementEventObserver $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r4.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r7 = virtualinvoke $r6.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r8 = (android.net.INetworkManagementEventObserver) $r7;

        interfaceinvoke $r8.<android.net.INetworkManagementEventObserver: void interfaceAdded(java.lang.String)>(r1);

     label04:
        goto label07;

     label05:
        $r9 := @caughtexception;

        goto label07;

     label06:
        $r10 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r5.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

        r3 = $r11;

     label10:
        $r12 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r12.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r3;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyInterfaceRemoved(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int i0, i1;
        java.lang.Throwable r3, $r14;
        java.util.HashMap $r4, $r6;
        android.os.RemoteCallbackList $r8, $r9, $r10, $r13;
        android.os.IInterface $r11;
        android.net.INetworkManagementEventObserver $r12;
        java.lang.RuntimeException $r15;
        android.os.RemoteException $r16;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r6 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r8.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r10 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r11 = virtualinvoke $r10.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r12 = (android.net.INetworkManagementEventObserver) $r11;

        interfaceinvoke $r12.<android.net.INetworkManagementEventObserver: void interfaceRemoved(java.lang.String)>(r1);

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        goto label07;

     label06:
        $r15 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r9 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r9.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r14 := @caughtexception;

        r3 = $r14;

     label10:
        $r13 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r13.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r3;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyLimitReached(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        int i0, i1;
        java.lang.Throwable r4, $r10;
        android.os.RemoteCallbackList $r5, $r6, $r7, $r11;
        android.os.IInterface $r8;
        android.net.INetworkManagementEventObserver $r9;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r13;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r9 = (android.net.INetworkManagementEventObserver) $r8;

        interfaceinvoke $r9.<android.net.INetworkManagementEventObserver: void limitReached(java.lang.String,java.lang.String)>(r1, r2);

     label04:
        goto label07;

     label05:
        $r12 := @caughtexception;

        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

     label10:
        $r11 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r11.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyInterfaceClassActivity(int, int, long, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i3, i4, $i5, $i6, $i7;
        long l2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        java.lang.Throwable r3, r4, $r14, $r16;
        android.os.RemoteCallbackList $r5, $r6, $r9, $r17;
        java.util.HashMap $r7;
        java.lang.Object $r8, r21;
        android.net.INetworkManagementEventObserver $r10;
        android.os.IInterface $r11;
        java.lang.String $r12;
        com.android.internal.app.IBatteryStats $r13;
        android.os.RemoteException $r15, $r18;
        java.lang.RuntimeException $r19;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        z0 := @parameter3: boolean;

        z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i0);

        if z1 == 0 goto label06;

        if z0 != 0 goto label01;

        $z6 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        if $z6 == 0 goto label02;

        i1 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        goto label02;

     label01:
        r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio> = 1;

     label02:
        $i7 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        if $i7 == i1 goto label06;

        r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio> = i1;

     label03:
        $r13 = specialinvoke r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats getBatteryStats()>();

        interfaceinvoke $r13.<com.android.internal.app.IBatteryStats: void noteMobileRadioPowerState(int,long)>(i1, l2);

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

     label06:
        $i5 = <android.telephony.DataConnectionRealTimeInfo: int DC_POWER_STATE_MEDIUM>;

        if i1 == $i5 goto label07;

        $i6 = <android.telephony.DataConnectionRealTimeInfo: int DC_POWER_STATE_HIGH>;

        if i1 != $i6 goto label08;

     label07:
        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        z7 = $z5;

        if z1 == 0 goto label10;

        if z0 != 0 goto label10;

        $z4 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        if $z4 != 0 goto label21;

     label10:
        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i3 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label11:
        i4 = 0;

     label12:
        if i4 >= i3 goto label18;

     label13:
        $r9 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r11 = virtualinvoke $r9.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i4);

        $r10 = (android.net.INetworkManagementEventObserver) $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke $r10.<android.net.INetworkManagementEventObserver: void interfaceClassDataActivityChanged(java.lang.String,boolean,long)>($r12, z7, l2);

     label14:
        goto label17;

     label15:
        $r15 := @caughtexception;

        goto label17;

     label16:
        $r19 := @caughtexception;

     label17:
        i4 = i4 + 1;

        goto label12;

     label18:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label21;

     label19:
        $r16 := @caughtexception;

        r3 = $r16;

     label20:
        $r17 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r17.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r3;

     label21:
        z8 = 0;

        $r8 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        r21 = $r8;

        entermonitor $r8;

     label22:
        $r7 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $z3 = virtualinvoke $r7.<java.util.HashMap: boolean isEmpty()>();

        if $z3 == 0 goto label23;

        z7 = 1;

     label23:
        $z2 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        if $z2 == z7 goto label24;

        r0.<com.android.server.NetworkManagementService: boolean mNetworkActive> = z7;

        z8 = z7;

     label24:
        exitmonitor r21;

     label25:
        goto label28;

     label26:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r21;

     label27:
        throw r4;

     label28:
        if z8 == 0 goto label29;

        specialinvoke r0.<com.android.server.NetworkManagementService: void reportNetworkActive()>();

     label29:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.RuntimeException from label13 to label14 with label16;
        catch java.lang.Throwable from label11 to label18 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
        catch java.lang.Throwable from label22 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    private void prepareNativeDaemon()
    {
        com.android.server.NetworkManagementService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.server.NativeDaemonConnectorException r1, $r48;
        int i0, $i3, $i4, i11, i12, i13;
        java.util.HashMap r2, $r8, $r9, $r21, $r32, r51;
        java.util.Iterator r3, r52;
        java.util.Map$Entry r4, r53;
        java.lang.Throwable r5, $r43;
        java.io.File $r6;
        java.lang.Object $r7, $r24, $r25, $r27, $r35, $r39, $r41, r50;
        android.util.SparseBooleanArray $r10, $r16, r54;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r29, $r30, $r31, $r34;
        java.lang.String $r14, $r23, $r28, $r33, $r38, $r40;
        java.util.Set $r22, $r36;
        long $l6, $l8;
        java.lang.Long $r26, $r42;
        com.android.internal.app.IBatteryStats $r37;
        android.os.RemoteException $r44;
        java.lang.Object[] $r45;
        com.android.server.NativeDaemonConnector $r46;

        r0 := @this: com.android.server.NetworkManagementService;

        r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled> = 0;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>("/proc/net/xt_qtaguid/ctrl");

        z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if z0 == 0 goto label04;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", "enabling bandwidth control");

     label01:
        $r46 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r45 = newarray (java.lang.Object)[1];

        $r45[0] = "enable";

        virtualinvoke $r46.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r45);

        r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled> = 1;

     label02:
        goto label05;

     label03:
        $r48 := @caughtexception;

        r1 = $r48;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagementService", "problem enabling bandwidth controls", r1);

        goto label05;

     label04:
        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", "not enabling bandwidth control");

     label05:
        $z1 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z1 == 0 goto label06;

        $r38 = "1";

        goto label07;

     label06:
        $r38 = "0";

     label07:
        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("net.qtaguid_enabled", $r38);

        $z2 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z2 == 0 goto label11;

     label08:
        $r37 = specialinvoke r0.<com.android.server.NetworkManagementService: com.android.internal.app.IBatteryStats getBatteryStats()>();

        interfaceinvoke $r37.<com.android.internal.app.IBatteryStats: void noteNetworkStatsEnabled()>();

     label09:
        goto label11;

     label10:
        $r44 := @caughtexception;

     label11:
        $r7 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r50 = $r7;

        entermonitor $r7;

     label12:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        i0 = virtualinvoke $r8.<java.util.HashMap: int size()>();

        if i0 <= 0 goto label14;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pushing ");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active quota rules");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", $r33);

        r2 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r32 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas> = $r32;

        $r36 = virtualinvoke r2.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r36.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z8 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label14;

        $r35 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r35;

        $r39 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r40 = (java.lang.String) $r39;

        $r41 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (java.lang.Long) $r41;

        $l8 = virtualinvoke $r42.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>($r40, $l8);

        goto label13;

     label14:
        $r9 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        i11 = virtualinvoke $r9.<java.util.HashMap: int size()>();

        if i11 <= 0 goto label16;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pushing ");

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active alert rules");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", $r23);

        r51 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r21 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts> = $r21;

        $r22 = virtualinvoke r51.<java.util.HashMap: java.util.Set entrySet()>();

        r52 = interfaceinvoke $r22.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z7 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label16;

        $r24 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>();

        r53 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.lang.String) $r25;

        $r27 = interfaceinvoke r53.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.Long) $r27;

        $l6 = virtualinvoke $r26.<java.lang.Long: long longValue()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>($r28, $l6);

        goto label15;

     label16:
        $r10 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        i12 = virtualinvoke $r10.<android.util.SparseBooleanArray: int size()>();

        if i12 <= 0 goto label18;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pushing ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" active uid rules");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", $r14);

        r54 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        $r16 = new android.util.SparseBooleanArray;

        specialinvoke $r16.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota> = $r16;

        i13 = 0;

     label17:
        $i3 = virtualinvoke r54.<android.util.SparseBooleanArray: int size()>();

        if i13 >= $i3 goto label18;

        $i4 = virtualinvoke r54.<android.util.SparseBooleanArray: int keyAt(int)>(i13);

        $z6 = virtualinvoke r54.<android.util.SparseBooleanArray: boolean valueAt(int)>(i13);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)>($i4, $z6);

        i13 = i13 + 1;

        goto label17;

     label18:
        exitmonitor r50;

     label19:
        goto label22;

     label20:
        $r43 := @caughtexception;

        r5 = $r43;

        exitmonitor r50;

     label21:
        throw r5;

     label22:
        $z3 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        if $z3 != 0 goto label23;

        $z5 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        if $z5 == 0 goto label24;

     label23:
        $z4 = 1;

        goto label25;

     label24:
        $z4 = 0;

     label25:
        virtualinvoke r0.<com.android.server.NetworkManagementService: void setFirewallEnabled(boolean)>($z4);

        return;

        catch com.android.server.NativeDaemonConnectorException from label01 to label02 with label03;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label12 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void notifyAddressUpdated(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;
        int i0, i1;
        java.lang.Throwable r4, $r10;
        android.os.RemoteCallbackList $r5, $r6, $r7, $r11;
        android.os.IInterface $r8;
        android.net.INetworkManagementEventObserver $r9;
        java.lang.RuntimeException $r12;
        android.os.RemoteException $r13;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.LinkAddress;

        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r9 = (android.net.INetworkManagementEventObserver) $r8;

        interfaceinvoke $r9.<android.net.INetworkManagementEventObserver: void addressUpdated(java.lang.String,android.net.LinkAddress)>(r1, r2);

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        goto label07;

     label06:
        $r12 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

     label10:
        $r11 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r11.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyAddressRemoved(java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;
        int i0, i1;
        java.lang.Throwable r4, $r11;
        android.os.RemoteCallbackList $r5, $r6, $r7, $r12;
        android.os.IInterface $r8;
        android.net.INetworkManagementEventObserver $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r13;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.LinkAddress;

        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r9 = (android.net.INetworkManagementEventObserver) $r8;

        interfaceinvoke $r9.<android.net.INetworkManagementEventObserver: void addressRemoved(java.lang.String,android.net.LinkAddress)>(r1, r2);

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r11 := @caughtexception;

        r4 = $r11;

     label10:
        $r12 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r12.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyInterfaceDnsServerInfo(java.lang.String, long, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        long l0;
        java.lang.String[] r2;
        int i1, i2;
        java.lang.Throwable r4, $r10;
        android.os.RemoteCallbackList $r5, $r6, $r7, $r12;
        android.os.IInterface $r8;
        android.net.INetworkManagementEventObserver $r9;
        android.os.RemoteException $r11;
        java.lang.RuntimeException $r13;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i1 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i2 = 0;

     label02:
        if i2 >= i1 goto label08;

     label03:
        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i2);

        $r9 = (android.net.INetworkManagementEventObserver) $r8;

        interfaceinvoke $r9.<android.net.INetworkManagementEventObserver: void interfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>(r1, l0, r2);

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        goto label07;

     label06:
        $r13 := @caughtexception;

     label07:
        i2 = i2 + 1;

        goto label02;

     label08:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r10 := @caughtexception;

        r4 = $r10;

     label10:
        $r12 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r12.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r4;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void notifyRouteChange(java.lang.String, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.RouteInfo r2;
        int i0, i1;
        java.lang.Throwable r4, $r15;
        android.os.RemoteCallbackList $r5, $r6, $r7, $r10, $r14;
        boolean $z0;
        android.os.IInterface $r8, $r11;
        android.net.INetworkManagementEventObserver $r9, $r13;
        android.os.RemoteException $r12;
        java.lang.RuntimeException $r16;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.RouteInfo;

        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        i0 = virtualinvoke $r5.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label09;

     label03:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("updated");

        if $z0 == 0 goto label04;

        $r10 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r11 = virtualinvoke $r10.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r13 = (android.net.INetworkManagementEventObserver) $r11;

        interfaceinvoke $r13.<android.net.INetworkManagementEventObserver: void routeUpdated(android.net.RouteInfo)>(r2);

        goto label05;

     label04:
        $r7 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        $r8 = virtualinvoke $r7.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r9 = (android.net.INetworkManagementEventObserver) $r8;

        interfaceinvoke $r9.<android.net.INetworkManagementEventObserver: void routeRemoved(android.net.RouteInfo)>(r2);

     label05:
        goto label08;

     label06:
        $r12 := @caughtexception;

        goto label08;

     label07:
        $r16 := @caughtexception;

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        $r6 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r6.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label12;

     label10:
        $r15 := @caughtexception;

        r4 = $r15;

     label11:
        $r14 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mObservers>;

        virtualinvoke $r14.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r4;

     label12:
        return;

        catch android.os.RemoteException from label03 to label05 with label06;
        catch java.lang.RuntimeException from label03 to label05 with label07;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public java.lang.String[] listInterfaces()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonEvent[] $r5;
        java.lang.String[] $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "list";

        $r5 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("interface", $r3);

        $r6 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r5, 110);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r11, $r13, $r14, $r15, $r18, $r26;
        com.android.server.NativeDaemonEvent r2;
        com.android.server.NativeDaemonConnectorException r3, $r19;
        android.net.InterfaceConfiguration r4, $r12;
        java.net.InetAddress r5;
        int i0;
        java.lang.IllegalArgumentException r6, $r17, $r21;
        android.content.Context $r7;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        java.util.StringTokenizer $r10, r28;
        boolean $z0;
        android.net.LinkAddress $r16;
        java.util.NoSuchElementException $r20;
        java.lang.StringBuilder $r22, $r24, $r25;
        java.lang.IllegalStateException $r23;
        java.lang.NumberFormatException $r27, r29;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r7 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label01:
        $r9 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "getcfg";

        $r8[1] = r1;

        r2 = virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r8);

     label02:
        goto label04;

     label03:
        $r19 := @caughtexception;

        r3 = $r19;

        $r21 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r21;

     label04:
        virtualinvoke r2.<com.android.server.NativeDaemonEvent: void checkCode(int)>(213);

        $r10 = new java.util.StringTokenizer;

        $r11 = virtualinvoke r2.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String)>($r11);

        r28 = $r10;

     label05:
        $r12 = new android.net.InterfaceConfiguration;

        specialinvoke $r12.<android.net.InterfaceConfiguration: void <init>()>();

        r4 = $r12;

        $r13 = virtualinvoke r28.<java.util.StringTokenizer: java.lang.String nextToken(java.lang.String)>(" ");

        virtualinvoke r4.<android.net.InterfaceConfiguration: void setHardwareAddress(java.lang.String)>($r13);

        r5 = null;

        i0 = 0;

     label06:
        $r14 = virtualinvoke r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r5 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>($r14);

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        r6 = $r17;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagementService", "Failed to parse ipaddr", r6);

     label09:
        $r15 = virtualinvoke r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r15);

     label10:
        goto label12;

     label11:
        $r27 := @caughtexception;

        r29 = $r27;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NetworkManagementService", "Failed to parse prefixLength", r29);

     label12:
        $r16 = new android.net.LinkAddress;

        specialinvoke $r16.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r5, i0);

        virtualinvoke r4.<android.net.InterfaceConfiguration: void setLinkAddress(android.net.LinkAddress)>($r16);

     label13:
        $z0 = virtualinvoke r28.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label14;

        $r18 = virtualinvoke r28.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r4.<android.net.InterfaceConfiguration: void setFlag(java.lang.String)>($r18);

        goto label13;

     label14:
        goto label16;

     label15:
        $r20 := @caughtexception;

        $r23 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid response from daemon: ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r26);

        throw $r23;

     label16:
        return r4;

        catch com.android.server.NativeDaemonConnectorException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label06 to label07 with label08;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.util.NoSuchElementException from label05 to label14 with label15;
    }

    public void setInterfaceConfig(java.lang.String, android.net.InterfaceConfiguration)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r6, $r13;
        android.net.InterfaceConfiguration r2;
        android.net.LinkAddress r3;
        com.android.server.NativeDaemonConnector$Command r4, $r10;
        java.util.Iterator r5;
        android.content.Context $r7;
        java.lang.IllegalStateException $r8;
        java.net.InetAddress $r9, $r12;
        java.lang.Object[] $r11;
        java.lang.Integer $r14;
        int $i0;
        java.lang.Iterable $r15;
        com.android.server.NativeDaemonConnector $r16;
        boolean $z0;
        java.lang.Object $r17;
        com.android.server.NativeDaemonConnectorException $r19, r22;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.InterfaceConfiguration;

        $r7 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r3 = virtualinvoke r2.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        if r3 == null goto label1;

        $r9 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        if $r9 != null goto label2;

     label1:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Null LinkAddress given");

        throw $r8;

     label2:
        $r10 = new com.android.server.NativeDaemonConnector$Command;

        $r11 = newarray (java.lang.Object)[4];

        $r11[0] = "setcfg";

        $r11[1] = r1;

        $r12 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r13 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r11[2] = $r13;

        $i0 = virtualinvoke r3.<android.net.LinkAddress: int getPrefixLength()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11[3] = $r14;

        specialinvoke $r10.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("interface", $r11);

        r4 = $r10;

        $r15 = virtualinvoke r2.<android.net.InterfaceConfiguration: java.lang.Iterable getFlags()>();

        r5 = interfaceinvoke $r15.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r17 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r17;

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>(r6);

        goto label3;

     label4:
        $r16 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r16.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r4);

     label5:
        goto label7;

     label6:
        $r19 := @caughtexception;

        r22 = $r19;

        $r21 = virtualinvoke r22.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r21;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label4 to label5 with label6;
    }

    public void setInterfaceDown(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.InterfaceConfiguration r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r2 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

        virtualinvoke r2.<android.net.InterfaceConfiguration: void setInterfaceDown()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r1, r2);

        return;
    }

    public void setInterfaceUp(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.InterfaceConfiguration r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r2 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

        virtualinvoke r2.<android.net.InterfaceConfiguration: void setInterfaceUp()>();

        virtualinvoke r0.<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>(r1, r2);

        return;
    }

    public void setInterfaceIpv6PrivacyExtensions(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r7;
        boolean z0;
        com.android.server.NativeDaemonConnectorException r2, $r8;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "ipv6privacyextensions";

        $r4[1] = r1;

        if z0 == 0 goto label2;

        $r7 = "enable";

        goto label3;

     label2:
        $r7 = "disable";

     label3:
        $r4[2] = $r7;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r4);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label4 with label5;
    }

    public void clearInterfaceAddresses(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "clearaddrs";

        $r4[1] = r1;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void enableIpv6(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "ipv6";

        $r4[1] = r1;

        $r4[2] = "enable";

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void disableIpv6(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "ipv6";

        $r4[1] = r1;

        $r4[2] = "disable";

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void addRoute(int, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.net.RouteInfo r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyRoute(java.lang.String,java.lang.String,android.net.RouteInfo)>("add", $r5, r1);

        return;
    }

    public void removeRoute(int, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        android.net.RouteInfo r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyRoute(java.lang.String,java.lang.String,android.net.RouteInfo)>("remove", $r5, r1);

        return;
    }

    private void modifyRoute(java.lang.String, java.lang.String, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, $r9, $r12, $r18;
        android.net.RouteInfo r3;
        com.android.server.NativeDaemonConnector$Command r4, $r7;
        com.android.server.NativeDaemonConnectorException r5, $r20;
        android.content.Context $r6;
        java.lang.Object[] $r8;
        android.net.IpPrefix $r11;
        int $i0;
        com.android.server.NativeDaemonConnector $r16;
        boolean $z0;
        java.net.InetAddress $r19;
        java.lang.IllegalArgumentException $r22;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.net.RouteInfo;

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r7 = new com.android.server.NativeDaemonConnector$Command;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "route";

        $r8[1] = r1;

        $r8[2] = r2;

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("network", $r8);

        r4 = $r7;

        $r9 = virtualinvoke r3.<android.net.RouteInfo: java.lang.String getInterface()>();

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r9);

        $r11 = virtualinvoke r3.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        $r12 = virtualinvoke $r11.<android.net.IpPrefix: java.lang.String toString()>();

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r12);

        $i0 = virtualinvoke r3.<android.net.RouteInfo: int getType()>();

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 7: goto label2;
            case 9: goto label3;
            default: goto label4;
        };

     label1:
        $z0 = virtualinvoke r3.<android.net.RouteInfo: boolean hasGateway()>();

        if $z0 == 0 goto label4;

        $r19 = virtualinvoke r3.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $r18 = virtualinvoke $r19.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r18);

        goto label4;

     label2:
        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("unreachable");

        goto label4;

     label3:
        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("throw");

     label4:
        $r16 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r16.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r4);

     label5:
        goto label7;

     label6:
        $r20 := @caughtexception;

        r5 = $r20;

        $r22 = virtualinvoke r5.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r22;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label4 to label5 with label6;
    }

    private java.util.ArrayList readRouteList(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r6, $r14;
        java.io.FileInputStream r2, $r10;
        java.util.ArrayList r3, $r9;
        java.io.DataInputStream r4, $r11;
        java.io.BufferedReader r5, $r12;
        java.lang.Throwable r7, $r17;
        java.io.InputStreamReader $r13;
        int $i0;
        java.io.IOException $r15, $r16, $r18, $r19;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 = null;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r3 = $r9;

     label01:
        $r10 = new java.io.FileInputStream;

        specialinvoke $r10.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        r2 = $r10;

        $r11 = new java.io.DataInputStream;

        specialinvoke $r11.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        r4 = $r11;

        $r12 = new java.io.BufferedReader;

        $r13 = new java.io.InputStreamReader;

        specialinvoke $r13.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);

        specialinvoke $r12.<java.io.BufferedReader: void <init>(java.io.Reader)>($r13);

        r5 = $r12;

     label02:
        $r14 = virtualinvoke r5.<java.io.BufferedReader: java.lang.String readLine()>();

        r6 = $r14;

        if $r14 == null goto label03;

        $i0 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i0 == 0 goto label03;

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label02;

     label03:
        if r2 == null goto label18;

     label04:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label05:
        goto label18;

     label06:
        $r18 := @caughtexception;

        goto label18;

     label07:
        $r16 := @caughtexception;

     label08:
        if r2 == null goto label18;

     label09:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label10:
        goto label18;

     label11:
        $r15 := @caughtexception;

        goto label18;

     label12:
        $r17 := @caughtexception;

        r7 = $r17;

     label13:
        if r2 == null goto label17;

     label14:
        virtualinvoke r2.<java.io.FileInputStream: void close()>();

     label15:
        goto label17;

     label16:
        $r19 := @caughtexception;

     label17:
        throw r7;

     label18:
        return r3;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label01 to label03 with label07;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label01 to label03 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public android.net.RouteInfo[] getRoutes(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r4, r6, r7, r8, r9, r10, $r23, $r32, $r42, r45, r47, r48, r49, r50;
        java.util.ArrayList r2, $r15, $r17, $r18;
        java.util.Iterator r3, r44;
        java.lang.String[] r5, r46;
        java.net.InetAddress r11, r13, r51, r53;
        int i0, $i1, $i2, $i3, $i6, $i8, $i9, i12;
        android.net.LinkAddress r12, $r25, $r27, r52;
        android.net.RouteInfo r14, $r24, $r28, r54;
        android.content.Context $r16;
        boolean $z0, $z1, $z2, $z4;
        android.net.RouteInfo[] $r19, $r20;
        java.lang.Object[] $r21;
        java.lang.Object $r22, $r26;
        long $l4, $l5, $l7;
        java.lang.StringBuilder $r29, $r30, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r41;
        java.lang.Exception $r31, $r40, r43, r55;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r16 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r16.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r2 = $r15;

        $r17 = specialinvoke r0.<com.android.server.NetworkManagementService: java.util.ArrayList readRouteList(java.lang.String)>("/proc/net/route");

        r3 = virtualinvoke $r17.<java.util.ArrayList: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r26 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r26;

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("\t");

        $i3 = lengthof r5;

        if $i3 <= 7 goto label05;

        r6 = r5[0];

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label05;

        r7 = r5[1];

        r8 = r5[2];

        r9 = r5[3];

        r10 = r5[7];

     label02:
        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r7, 16);

        $i6 = (int) $l5;

        r11 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>($i6);

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r10, 16);

        $i8 = (int) $l4;

        i0 = staticinvoke <android.net.NetworkUtils: int netmaskIntToPrefixLength(int)>($i8);

        $r27 = new android.net.LinkAddress;

        specialinvoke $r27.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r11, i0);

        r12 = $r27;

        $l7 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r8, 16);

        $i9 = (int) $l7;

        r13 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>($i9);

        $r28 = new android.net.RouteInfo;

        specialinvoke $r28.<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress)>(r12, r13);

        r14 = $r28;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label03:
        goto label05;

     label04:
        $r31 := @caughtexception;

        r43 = $r31;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing route ");

        $r35 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkManagementService", $r32);

        goto label01;

     label05:
        goto label01;

     label06:
        $r18 = specialinvoke r0.<com.android.server.NetworkManagementService: java.util.ArrayList readRouteList(java.lang.String)>("/proc/net/ipv6_route");

        r44 = virtualinvoke $r18.<java.util.ArrayList: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label12;

        $r22 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (java.lang.String) $r22;

        r46 = virtualinvoke r45.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $i2 = lengthof r46;

        if $i2 <= 9 goto label11;

        $r23 = r46[9];

        r47 = virtualinvoke $r23.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r47);

        if $z2 == 0 goto label11;

        r48 = r46[0];

        r49 = r46[1];

        r50 = r46[4];

     label08:
        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r49, 16);

        r51 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress hexToInet6Address(java.lang.String)>(r48);

        $r25 = new android.net.LinkAddress;

        specialinvoke $r25.<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>(r51, i12);

        r52 = $r25;

        r53 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress hexToInet6Address(java.lang.String)>(r50);

        $r24 = new android.net.RouteInfo;

        specialinvoke $r24.<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress)>(r52, r53);

        r54 = $r24;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r54);

     label09:
        goto label11;

     label10:
        $r40 := @caughtexception;

        r55 = $r40;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing route ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r55);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("NetworkManagementService", $r42);

        goto label07;

     label11:
        goto label07;

     label12:
        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r19 = newarray (android.net.RouteInfo)[$i1];

        $r21 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        $r20 = (android.net.RouteInfo[]) $r21;

        return $r20;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public void setMtu(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int i0;
        com.android.server.NativeDaemonConnectorException r3, $r8;
        android.content.Context $r4;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector $r6;
        java.lang.Integer $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r6 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "setmtu";

        $r5[1] = r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[2] = $r7;

        virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("interface", $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void shutdown()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SHUTDOWN", "NetworkManagementService");

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("NetworkManagementService", "Shutting down");

        return;
    }

    public boolean getIpForwardingEnabled() throws java.lang.IllegalStateException
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonEvent r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.String $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "status";

        r1 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("ipfwd", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        virtualinvoke r1.<com.android.server.NativeDaemonEvent: void checkCode(int)>(211);

        $r6 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>("enabled");

        return $z0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setIpForwardingEnabled(boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        if z0 == 0 goto label2;

        $r6 = "enable";

        goto label3;

     label2:
        $r6 = "disable";

     label3:
        $r3[0] = $r6;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("ipfwd", $r3);

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label4 with label5;
    }

    public void startTethering(java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String[] r1, r3;
        com.android.server.NativeDaemonConnector$Command r2, $r6;
        int i0, i1;
        java.lang.String r4;
        android.content.Context $r5;
        java.lang.Object[] $r7;
        com.android.server.NativeDaemonConnector $r8;
        com.android.server.NativeDaemonConnectorException $r11, r13;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String[];

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r6 = new com.android.server.NativeDaemonConnector$Command;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "start";

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("tether", $r7);

        r2 = $r6;

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = virtualinvoke r13.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r12;

     label5:
        return;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public void stopTethering()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r6;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "stop";

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("tether", $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r7;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public boolean isTetheringStarted()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonEvent r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.String $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "status";

        r1 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("tether", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        virtualinvoke r1.<com.android.server.NativeDaemonEvent: void checkCode(int)>(210);

        $r6 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>("started");

        return $z0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void tetherInterface(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r11;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.util.ArrayList $r7, r13;
        android.net.RouteInfo $r8;
        android.net.InterfaceConfiguration $r9;
        android.net.LinkAddress $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "interface";

        $r4[1] = "add";

        $r4[2] = r1;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("tether", $r4);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        r2 = $r11;

        $r12 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r12;

     label4:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r13 = $r7;

        $r8 = new android.net.RouteInfo;

        $r9 = virtualinvoke r0.<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<android.net.InterfaceConfiguration: android.net.LinkAddress getLinkAddress()>();

        specialinvoke $r8.<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress,java.lang.String)>($r10, null, r1);

        interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r8);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>(r1, r13);

        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void untetherInterface(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "interface";

        $r4[1] = "remove";

        $r4[2] = r1;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("tether", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        virtualinvoke r0.<com.android.server.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>(r1);

        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public java.lang.String[] listTetheredInterfaces()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonEvent[] $r5;
        java.lang.String[] $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "interface";

        $r3[1] = "list";

        $r5 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("tether", $r3);

        $r6 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r5, 111);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setDnsForwarders(android.net.Network, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        android.net.Network r1;
        java.lang.String[] r2, r4;
        int i0, i1, i2, $i3;
        com.android.server.NativeDaemonConnector$Command r3, $r7;
        java.lang.String r5, $r14;
        android.content.Context $r6;
        java.lang.Object[] $r8;
        java.lang.Integer $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.net.InetAddress $r11;
        com.android.server.NativeDaemonConnectorException $r15, r17;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String[];

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        if r1 == null goto label1;

        $i3 = r1.<android.net.Network: int netId>;

        goto label2;

     label1:
        $i3 = 0;

     label2:
        i0 = $i3;

        $r7 = new com.android.server.NativeDaemonConnector$Command;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "dns";

        $r8[1] = "set";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8[2] = $r9;

        specialinvoke $r7.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("tether", $r8);

        r3 = $r7;

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        r5 = r4[i2];

        $r11 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r5);

        $r14 = virtualinvoke $r11.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r3.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r14);

        i2 = i2 + 1;

        goto label3;

     label4:
        $r10 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r3);

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        r17 = $r15;

        $r16 = virtualinvoke r17.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r16;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label4 to label5 with label6;
    }

    public java.lang.String[] getDnsForwarders()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonEvent[] $r5;
        java.lang.String[] $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "dns";

        $r3[1] = "list";

        $r5 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("tether", $r3);

        $r6 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r5, 112);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    private java.util.List excludeLinkLocal(java.util.List)
    {
        com.android.server.NetworkManagementService r0;
        java.util.List r1;
        java.util.ArrayList r2, $r5;
        java.util.Iterator r3;
        java.net.InterfaceAddress r4;
        int $i0;
        boolean $z0, $z1;
        java.lang.Object $r6;
        java.net.InetAddress $r7;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.util.List;

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.net.InterfaceAddress) $r6;

        $r7 = virtualinvoke r4.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $z1 = virtualinvoke $r7.<java.net.InetAddress: boolean isLinkLocalAddress()>();

        if $z1 != 0 goto label2;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return r2;
    }

    private void modifyNat(java.lang.String, java.lang.String, java.lang.String) throws java.net.SocketException
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, r3, $r19, $r26;
        com.android.server.NativeDaemonConnector$Command r4, $r10;
        java.net.NetworkInterface r5;
        java.util.List r6, $r12;
        java.util.Iterator r7;
        java.net.InterfaceAddress r8;
        java.net.InetAddress r9, $r17;
        java.lang.Object[] $r11;
        int $i0;
        java.lang.Integer $r14;
        boolean $z0;
        com.android.server.NativeDaemonConnector $r16;
        java.lang.Object $r18;
        short $s1, $s2;
        java.lang.StringBuilder $r20, $r21, $r22, $r23;
        com.android.server.NativeDaemonConnectorException $r25, r29;
        java.lang.IllegalArgumentException $r28;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r10 = new com.android.server.NativeDaemonConnector$Command;

        $r11 = newarray (java.lang.Object)[3];

        $r11[0] = r1;

        $r11[1] = r2;

        $r11[2] = r3;

        specialinvoke $r10.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("nat", $r11);

        r4 = $r10;

        r5 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)>(r2);

        if r5 != null goto label1;

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>("0");

        goto label3;

     label1:
        $r12 = virtualinvoke r5.<java.net.NetworkInterface: java.util.List getInterfaceAddresses()>();

        r6 = specialinvoke r0.<com.android.server.NetworkManagementService: java.util.List excludeLinkLocal(java.util.List)>($r12);

        $i0 = interfaceinvoke r6.<java.util.List: int size()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r14);

        r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.net.InterfaceAddress) $r18;

        $r17 = virtualinvoke r8.<java.net.InterfaceAddress: java.net.InetAddress getAddress()>();

        $s1 = virtualinvoke r8.<java.net.InterfaceAddress: short getNetworkPrefixLength()>();

        r9 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>($r17, $s1);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke r9.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $s2 = virtualinvoke r8.<java.net.InterfaceAddress: short getNetworkPrefixLength()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r26);

        goto label2;

     label3:
        $r16 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r16.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r4);

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

        r29 = $r25;

        $r28 = virtualinvoke r29.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r28;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    public void enableNat(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        java.net.SocketException r3, $r5;
        android.content.Context $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyNat(java.lang.String,java.lang.String,java.lang.String)>("enable", r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public void disableNat(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        java.net.SocketException r3, $r5;
        android.content.Context $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyNat(java.lang.String,java.lang.String,java.lang.String)>("disable", r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r3);

        throw $r6;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public java.lang.String[] listTtys()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        com.android.server.NativeDaemonEvent[] $r5;
        java.lang.String[] $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[0];

        $r5 = virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("list_ttys", $r3);

        $r6 = staticinvoke <com.android.server.NativeDaemonEvent: java.lang.String[] filterMessageList(com.android.server.NativeDaemonEvent[],int)>($r5, 113);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void attachPppd(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, r3, r4, r5, $r11, $r13, $r14, $r18;
        com.android.server.NativeDaemonConnectorException r6, $r20;
        android.content.Context $r7;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        java.net.InetAddress $r10, $r12, $r15, $r16;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r7 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r9 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[6];

        $r8[0] = "attach";

        $r8[1] = r1;

        $r10 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r8[2] = $r11;

        $r12 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r3);

        $r13 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r8[3] = $r13;

        $r15 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r4);

        $r14 = virtualinvoke $r15.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r8[4] = $r14;

        $r16 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r5);

        $r18 = virtualinvoke $r16.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r8[5] = $r18;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("pppd", $r8);

     label2:
        goto label4;

     label3:
        $r20 := @caughtexception;

        r6 = $r20;

        $r19 = virtualinvoke r6.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r19;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void detachPppd(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "detach";

        $r4[1] = r1;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("pppd", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void startAccessPoint(android.net.wifi.WifiConfiguration, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.net.wifi.WifiConfiguration r1;
        java.lang.String r2, $r6, $r8, $r10;
        com.android.server.NativeDaemonConnectorException r3, $r17;
        android.content.Context $r4;
        java.lang.Object[] $r5, $r12, $r16;
        com.android.server.NativeDaemonConnector $r7, $r14, $r15;
        com.android.server.NativeDaemonConnector$SensitiveArg $r9;
        java.lang.IllegalArgumentException $r19;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        virtualinvoke r0.<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)>(r2, "AP");

        if r1 != null goto label2;

        $r15 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = "set";

        $r16[1] = r2;

        virtualinvoke $r15.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r16);

        goto label3;

     label2:
        $r7 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[7];

        $r5[0] = "set";

        $r5[1] = r2;

        $r6 = r1.<android.net.wifi.WifiConfiguration: java.lang.String SSID>;

        $r5[2] = $r6;

        $r5[3] = "broadcast";

        $r5[4] = "6";

        $r8 = staticinvoke <com.android.server.NetworkManagementService: java.lang.String getSecurityType(android.net.wifi.WifiConfiguration)>(r1);

        $r5[5] = $r8;

        $r9 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r10 = r1.<android.net.wifi.WifiConfiguration: java.lang.String preSharedKey>;

        specialinvoke $r9.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r10);

        $r5[6] = $r9;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r5);

     label3:
        $r14 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "startap";

        virtualinvoke $r14.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r12);

     label4:
        goto label6;

     label5:
        $r17 := @caughtexception;

        r3 = $r17;

        $r19 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r19;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label4 with label5;
    }

    private static java.lang.String getSecurityType(android.net.wifi.WifiConfiguration)
    {
        android.net.wifi.WifiConfiguration r0;
        int $i0;

        r0 := @parameter0: android.net.wifi.WifiConfiguration;

        $i0 = virtualinvoke r0.<android.net.wifi.WifiConfiguration: int getAuthType()>();

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        return "wpa-psk";

     label2:
        return "wpa2-psk";

     label3:
        return "open";
    }

    public void wifiFirmwareReload(java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;
        com.android.server.NativeDaemonConnectorException r3, $r8;
        android.content.Context $r4;
        java.lang.Object[] $r5;
        com.android.server.NativeDaemonConnector $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r6 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = "fwreload";

        $r5[1] = r1;

        $r5[2] = r2;

        virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void stopAccessPoint(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "stopap";

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r4);

        virtualinvoke r0.<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)>(r1, "STA");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setAccessPoint(android.net.wifi.WifiConfiguration, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        android.net.wifi.WifiConfiguration r1;
        java.lang.String r2, $r6, $r8, $r10;
        com.android.server.NativeDaemonConnectorException r3, $r16;
        android.content.Context $r4;
        java.lang.Object[] $r5, $r12;
        com.android.server.NativeDaemonConnector $r7, $r14;
        com.android.server.NativeDaemonConnector$SensitiveArg $r9;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.net.wifi.WifiConfiguration;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        if r1 != null goto label2;

        $r14 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "set";

        $r12[1] = r2;

        virtualinvoke $r14.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r12);

        goto label3;

     label2:
        $r7 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r5 = newarray (java.lang.Object)[7];

        $r5[0] = "set";

        $r5[1] = r2;

        $r6 = r1.<android.net.wifi.WifiConfiguration: java.lang.String SSID>;

        $r5[2] = $r6;

        $r5[3] = "broadcast";

        $r5[4] = "6";

        $r8 = staticinvoke <com.android.server.NetworkManagementService: java.lang.String getSecurityType(android.net.wifi.WifiConfiguration)>(r1);

        $r5[5] = $r8;

        $r9 = new com.android.server.NativeDaemonConnector$SensitiveArg;

        $r10 = r1.<android.net.wifi.WifiConfiguration: java.lang.String preSharedKey>;

        specialinvoke $r9.<com.android.server.NativeDaemonConnector$SensitiveArg: void <init>(java.lang.Object)>($r10);

        $r5[6] = $r9;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("softap", $r5);

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        r3 = $r16;

        $r15 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r15;

     label5:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label3 with label4;
    }

    public void addIdleTimer(java.lang.String, int, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r12, $r14;
        int i0, i1, $i2, $i3;
        java.lang.Object r2, $r7, $r9;
        com.android.server.NetworkManagementService$IdleTimerParams r3, $r16;
        com.android.server.NativeDaemonConnectorException r4, $r20;
        java.lang.Throwable r5, $r22;
        android.content.Context $r6;
        java.util.HashMap $r8, $r15;
        java.lang.Object[] $r10;
        com.android.server.NativeDaemonConnector $r11;
        boolean $z0;
        android.os.Handler $r18;
        com.android.server.NetworkManagementService$2 $r19;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r7 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.NetworkManagementService$IdleTimerParams) $r9;

        if r3 == null goto label03;

        $i3 = r3.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        $i2 = $i3 + 1;

        r3.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount> = $i2;

        exitmonitor r2;

     label02:
        return;

     label03:
        $r11 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = "add";

        $r10[1] = r1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r10[2] = $r12;

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r10[3] = $r14;

        virtualinvoke $r11.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("idletimer", $r10);

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        r4 = $r20;

        $r21 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r21;

     label06:
        $r15 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r16 = new com.android.server.NetworkManagementService$IdleTimerParams;

        specialinvoke $r16.<com.android.server.NetworkManagementService$IdleTimerParams: void <init>(int,int)>(i0, i1);

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r16);

        $z0 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>(i1);

        if $z0 == 0 goto label07;

        r0.<com.android.server.NetworkManagementService: boolean mNetworkActive> = 0;

     label07:
        $r18 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        $r19 = new com.android.server.NetworkManagementService$2;

        specialinvoke $r19.<com.android.server.NetworkManagementService$2: void <init>(com.android.server.NetworkManagementService,int)>(r0, i1);

        virtualinvoke $r18.<android.os.Handler: boolean post(java.lang.Runnable)>($r19);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        r5 = $r22;

        exitmonitor r2;

     label10:
        throw r5;

     label11:
        return;

        catch com.android.server.NativeDaemonConnectorException from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void removeIdleTimer(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r12, $r13;
        java.lang.Object r2, $r7, $r9;
        com.android.server.NetworkManagementService$IdleTimerParams r3;
        com.android.server.NativeDaemonConnectorException r4, $r20;
        java.lang.Throwable r5, $r19;
        android.content.Context $r6;
        java.util.HashMap $r8, $r14;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r10;
        com.android.server.NativeDaemonConnector $r11;
        com.android.server.NetworkManagementService$3 $r16;
        android.os.Handler $r18;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r6 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r7 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (com.android.server.NetworkManagementService$IdleTimerParams) $r9;

        if r3 == null goto label02;

        $i0 = r3.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        $i1 = $i0 - 1;

        r3.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount> = $i1;

        if $i1 <= 0 goto label04;

     label02:
        exitmonitor r2;

     label03:
        return;

     label04:
        $r11 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r10 = newarray (java.lang.Object)[4];

        $r10[0] = "remove";

        $r10[1] = r1;

        $i2 = r3.<com.android.server.NetworkManagementService$IdleTimerParams: int timeout>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $r10[2] = $r12;

        $i3 = r3.<com.android.server.NetworkManagementService$IdleTimerParams: int type>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r10[3] = $r13;

        virtualinvoke $r11.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("idletimer", $r10);

     label05:
        goto label07;

     label06:
        $r20 := @caughtexception;

        r4 = $r20;

        $r21 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r21;

     label07:
        $r14 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r18 = r0.<com.android.server.NetworkManagementService: android.os.Handler mDaemonHandler>;

        $r16 = new com.android.server.NetworkManagementService$3;

        specialinvoke $r16.<com.android.server.NetworkManagementService$3: void <init>(com.android.server.NetworkManagementService,com.android.server.NetworkManagementService$IdleTimerParams)>(r0, r3);

        virtualinvoke $r18.<android.os.Handler: boolean post(java.lang.Runnable)>($r16);

        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r2;

     label10:
        throw r5;

     label11:
        return;

        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label06;
        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public android.net.NetworkStats getNetworkStatsSummaryDev()
    {
        com.android.server.NetworkManagementService r0;
        java.io.IOException r1, $r5;
        android.content.Context $r2;
        com.android.internal.net.NetworkStatsFactory $r3;
        android.net.NetworkStats $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.internal.net.NetworkStatsFactory mStatsFactory>;

        $r4 = virtualinvoke $r3.<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsSummaryDev()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.NetworkStats getNetworkStatsSummaryXt()
    {
        com.android.server.NetworkManagementService r0;
        java.io.IOException r1, $r5;
        android.content.Context $r2;
        com.android.internal.net.NetworkStatsFactory $r3;
        android.net.NetworkStats $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.internal.net.NetworkStatsFactory mStatsFactory>;

        $r4 = virtualinvoke $r3.<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsSummaryXt()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.NetworkStats getNetworkStatsDetail()
    {
        com.android.server.NetworkManagementService r0;
        java.io.IOException r1, $r5;
        android.content.Context $r2;
        com.android.internal.net.NetworkStatsFactory $r3;
        android.net.NetworkStats $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.internal.net.NetworkStatsFactory mStatsFactory>;

        $r4 = virtualinvoke $r3.<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsDetail(int,java.lang.String[],int,android.net.NetworkStats)>(-1, null, -1, null);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void setInterfaceQuota(java.lang.String, long)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r19;
        long l0;
        java.lang.Object r2, $r6;
        com.android.server.NativeDaemonConnectorException r3, $r22;
        java.lang.Throwable r4, $r23;
        android.content.Context $r5;
        boolean $z0, $z1;
        java.util.HashMap $r7, $r13;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        java.lang.Long $r11, $r12;
        java.lang.StringBuilder $r15, $r17, $r18, $r20;
        java.lang.IllegalStateException $r16;
        java.lang.IllegalArgumentException $r21;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $z1 = virtualinvoke $r7.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label03;

        $r16 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iface ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has quota");

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label03:
        $r9 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = "setiquota";

        $r8[1] = r1;

        $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r8[2] = $r11;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r8);

        $r13 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r12);

     label04:
        goto label06;

     label05:
        $r22 := @caughtexception;

        r3 = $r22;

        $r21 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r21;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r23 := @caughtexception;

        r4 = $r23;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        return;

        catch com.android.server.NativeDaemonConnectorException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void removeInterfaceQuota(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.lang.Object r2, $r6;
        com.android.server.NativeDaemonConnectorException r3, $r15;
        java.lang.Throwable r4, $r16;
        android.content.Context $r5;
        boolean $z0, $z1;
        java.util.HashMap $r7, $r8, $r10;
        java.lang.Object[] $r12;
        com.android.server.NativeDaemonConnector $r13;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $z1 = virtualinvoke $r7.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r10 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label05:
        $r13 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "removeiquota";

        $r12[1] = r1;

        virtualinvoke $r13.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r12);

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        r3 = $r15;

        $r17 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r17;

     label08:
        exitmonitor r2;

     label09:
        goto label12;

     label10:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label11:
        throw r4;

     label12:
        return;

        catch com.android.server.NativeDaemonConnectorException from label05 to label06 with label07;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public void setInterfaceAlert(java.lang.String, long)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r20;
        long l0;
        java.lang.Object r2, $r7;
        com.android.server.NativeDaemonConnectorException r3, $r25;
        java.lang.Throwable r4, $r22;
        android.content.Context $r5;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r6, $r8, $r14;
        java.lang.Object[] $r9;
        com.android.server.NativeDaemonConnector $r10;
        java.lang.Long $r12, $r13;
        java.lang.StringBuilder $r16, $r18, $r19, $r21;
        java.lang.IllegalStateException $r17, $r23;
        java.lang.IllegalArgumentException $r24;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label02;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setting alert requires existing quota on iface");

        throw $r23;

     label02:
        $r7 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r2 = $r7;

        entermonitor $r7;

     label03:
        $r8 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $z2 = virtualinvoke $r8.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label04;

        $r17 = new java.lang.IllegalStateException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iface ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has alert");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label04:
        $r10 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = "setinterfacealert";

        $r9[1] = r1;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9[2] = $r12;

        virtualinvoke $r10.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r9);

        $r14 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

     label05:
        goto label07;

     label06:
        $r25 := @caughtexception;

        r3 = $r25;

        $r24 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r24;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label06;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void removeInterfaceAlert(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.lang.Object r2, $r6;
        com.android.server.NativeDaemonConnectorException r3, $r13;
        java.lang.Throwable r4, $r14;
        android.content.Context $r5;
        boolean $z0, $z1;
        java.util.HashMap $r7, $r11;
        java.lang.Object[] $r8;
        com.android.server.NativeDaemonConnector $r9;
        java.lang.IllegalArgumentException $r15;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z0 != 0 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        $r7 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $z1 = virtualinvoke $r7.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z1 != 0 goto label04;

        exitmonitor r2;

     label03:
        return;

     label04:
        $r9 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = "removeinterfacealert";

        $r8[1] = r1;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r8);

        $r11 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

     label05:
        goto label07;

     label06:
        $r13 := @caughtexception;

        r3 = $r13;

        $r15 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r15;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r14 := @caughtexception;

        r4 = $r14;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        return;

        catch com.android.server.NativeDaemonConnectorException from label04 to label05 with label06;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void setGlobalAlert(long)
    {
        com.android.server.NetworkManagementService r0;
        long l0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Long $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "setglobalalert";

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r3[1] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setUidNetworkRules(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0, z1, $z2;
        java.lang.Object r1, $r5;
        com.android.server.NativeDaemonConnectorException r2, $r16;
        java.lang.Throwable r3, $r15;
        android.content.Context $r4;
        android.util.SparseBooleanArray $r6, $r12, $r14;
        java.lang.Object[] $r7;
        com.android.server.NativeDaemonConnector $r8;
        java.lang.Integer $r11;
        java.lang.String $r13;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z2 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        if $z2 != 0 goto label01;

        return;

     label01:
        $r5 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r1 = $r5;

        entermonitor $r5;

     label02:
        $r6 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        z1 = virtualinvoke $r6.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 0);

        if z1 != z0 goto label04;

        exitmonitor r1;

     label03:
        return;

     label04:
        $r8 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r7 = newarray (java.lang.Object)[2];

        if z0 == 0 goto label05;

        $r13 = "addnaughtyapps";

        goto label06;

     label05:
        $r13 = "removenaughtyapps";

     label06:
        $r7[0] = $r13;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[1] = $r11;

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("bandwidth", $r7);

        if z0 == 0 goto label07;

        $r14 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        virtualinvoke $r14.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, 1);

        goto label08;

     label07:
        $r12 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        virtualinvoke $r12.<android.util.SparseBooleanArray: void delete(int)>(i0);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        r2 = $r16;

        $r17 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r17;

     label10:
        exitmonitor r1;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label13:
        throw r3;

     label14:
        return;

        catch com.android.server.NativeDaemonConnectorException from label04 to label08 with label09;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public boolean isBandwidthControlEnabled()
    {
        com.android.server.NetworkManagementService r0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        return $z0;
    }

    public android.net.NetworkStats getNetworkStatsUidDetail(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        java.io.IOException r1, $r5;
        android.content.Context $r2;
        com.android.internal.net.NetworkStatsFactory $r3;
        android.net.NetworkStats $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.internal.net.NetworkStatsFactory mStatsFactory>;

        $r4 = virtualinvoke $r3.<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsDetail(int,java.lang.String[],int,android.net.NetworkStats)>(i0, null, -1, null);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>(r1);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.net.NetworkStats getNetworkStatsTethering()
    {
        com.android.server.NetworkManagementService r0;
        android.net.NetworkStats r1, $r10;
        com.android.server.NativeDaemonEvent[] r2, r3;
        int i0, i1, $i3;
        com.android.server.NativeDaemonEvent r4;
        java.util.StringTokenizer r5, $r14;
        java.lang.String r7, $r13, $r15, $r17, $r18, $r19, $r28, $r34;
        android.net.NetworkStats$Entry r8, $r16;
        android.content.Context $r9;
        long $l2, $l4, $l5, $l6, $l7;
        java.lang.Object[] $r11;
        com.android.server.NativeDaemonConnector $r12;
        java.lang.StringBuilder $r21, $r22, $r27, $r29, $r30, $r33;
        java.lang.NumberFormatException $r23;
        java.lang.IllegalStateException $r24, $r32;
        com.android.server.NativeDaemonConnectorException $r25, r37;
        java.lang.IllegalArgumentException $r26;
        java.util.NoSuchElementException $r31;

        r0 := @this: com.android.server.NetworkManagementService;

        $r9 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r10 = new android.net.NetworkStats;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        specialinvoke $r10.<android.net.NetworkStats: void <init>(long,int)>($l2, 1);

        r1 = $r10;

     label01:
        $r12 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "gettetherstats";

        r2 = virtualinvoke $r12.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent[] executeForList(java.lang.String,java.lang.Object[])>("bandwidth", $r11);

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label09;

        r4 = r3[i1];

        $i3 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: int getCode()>();

        if $i3 == 114 goto label03;

        goto label08;

     label03:
        $r14 = new java.util.StringTokenizer;

        $r13 = virtualinvoke r4.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        specialinvoke $r14.<java.util.StringTokenizer: void <init>(java.lang.String)>($r13);

        r5 = $r14;

     label04:
        virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r7 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r16 = new android.net.NetworkStats$Entry;

        specialinvoke $r16.<android.net.NetworkStats$Entry: void <init>()>();

        r8 = $r16;

        r8.<android.net.NetworkStats$Entry: java.lang.String iface> = r7;

        r8.<android.net.NetworkStats$Entry: int uid> = -5;

        r8.<android.net.NetworkStats$Entry: int set> = 0;

        r8.<android.net.NetworkStats$Entry: int tag> = 0;

        $r15 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15);

        r8.<android.net.NetworkStats$Entry: long rxBytes> = $l4;

        $r17 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r17);

        r8.<android.net.NetworkStats$Entry: long rxPackets> = $l5;

        $r18 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l6 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r18);

        r8.<android.net.NetworkStats$Entry: long txBytes> = $l6;

        $r19 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l7 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19);

        r8.<android.net.NetworkStats$Entry: long txPackets> = $l7;

        virtualinvoke r1.<android.net.NetworkStats: android.net.NetworkStats combineValues(android.net.NetworkStats$Entry)>(r8);

     label05:
        goto label08;

     label06:
        $r31 := @caughtexception;

        $r32 = new java.lang.IllegalStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem parsing tethering stats: ");

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r34);

        throw $r32;

     label07:
        $r23 := @caughtexception;

        $r24 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("problem parsing tethering stats: ");

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label08:
        i1 = i1 + 1;

        goto label02;

     label09:
        goto label11;

     label10:
        $r25 := @caughtexception;

        r37 = $r25;

        $r26 = virtualinvoke r37.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r26;

     label11:
        return r1;

        catch java.util.NoSuchElementException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label04 to label05 with label07;
        catch com.android.server.NativeDaemonConnectorException from label01 to label09 with label10;
    }

    public void setDnsServersForNetwork(int, java.lang.String[], java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2;
        java.lang.String[] r1, r4;
        java.lang.String r2, r5, $r15, $r17;
        com.android.server.NativeDaemonConnector$Command r3, $r8;
        java.net.InetAddress r6;
        android.content.Context $r7;
        java.lang.Object[] $r9;
        java.lang.Integer $r11;
        com.android.server.NativeDaemonConnector $r13;
        boolean $z0;
        com.android.server.NativeDaemonConnectorException $r16, r19;
        java.lang.IllegalArgumentException $r18;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String;

        $r7 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r8 = new com.android.server.NativeDaemonConnector$Command;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = "setnetdns";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[1] = $r11;

        if r2 != null goto label1;

        $r17 = "";

        goto label2;

     label1:
        $r17 = r2;

     label2:
        $r9[2] = $r17;

        specialinvoke $r8.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("resolver", $r9);

        r3 = $r8;

        r4 = r1;

        i1 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r5 = r4[i2];

        r6 = staticinvoke <android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>(r5);

        $z0 = virtualinvoke r6.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z0 != 0 goto label4;

        $r15 = virtualinvoke r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r3.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r15);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r13 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r13.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r3);

     label6:
        goto label8;

     label7:
        $r16 := @caughtexception;

        r19 = $r16;

        $r18 = virtualinvoke r19.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r18;

     label8:
        return;

        catch com.android.server.NativeDaemonConnectorException from label5 to label6 with label7;
    }

    public void addVpnUidRanges(int, android.net.UidRange[])
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.net.UidRange[] r1;
        java.lang.Object[] r2, $r10;
        com.android.server.NativeDaemonConnectorException r3, $r11;
        android.content.Context $r4;
        java.lang.Integer $r5;
        android.net.UidRange $r6;
        java.lang.String $r7;
        com.android.server.NativeDaemonConnector $r8;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.UidRange[];

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r2 = newarray (java.lang.Object)[13];

        r2[0] = "users";

        r2[1] = "add";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r2[2] = $r5;

        i1 = 3;

        i2 = 0;

     label1:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label7;

        $i4 = i1;

        i1 = i1 + 1;

        $r6 = r1[i2];

        $r7 = virtualinvoke $r6.<android.net.UidRange: java.lang.String toString()>();

        r2[$i4] = $r7;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        if i2 == $i6 goto label2;

        $i7 = lengthof r2;

        if i1 != $i7 goto label6;

     label2:
        $r8 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i1);

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r12;

     label5:
        i1 = 3;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public void removeVpnUidRanges(int, android.net.UidRange[])
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        android.net.UidRange[] r1;
        java.lang.Object[] r2, $r10;
        com.android.server.NativeDaemonConnectorException r3, $r11;
        android.content.Context $r4;
        java.lang.Integer $r5;
        android.net.UidRange $r6;
        java.lang.String $r7;
        com.android.server.NativeDaemonConnector $r8;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.UidRange[];

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r2 = newarray (java.lang.Object)[13];

        r2[0] = "users";

        r2[1] = "remove";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r2[2] = $r5;

        i1 = 3;

        i2 = 0;

     label1:
        $i3 = lengthof r1;

        if i2 >= $i3 goto label7;

        $i4 = i1;

        i1 = i1 + 1;

        $r6 = r1[i2];

        $r7 = virtualinvoke $r6.<android.net.UidRange: java.lang.String toString()>();

        r2[$i4] = $r7;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        if i2 == $i6 goto label2;

        $i7 = lengthof r2;

        if i1 != $i7 goto label6;

     label2:
        $r8 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i1);

        virtualinvoke $r8.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r10);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        $r12 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r12;

     label5:
        i1 = 3;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public void flushNetworkDnsCache(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "flushnet";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("resolver", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setFirewallEnabled(boolean)
    {
        com.android.server.NetworkManagementService r0;
        boolean z0;
        com.android.server.NativeDaemonConnectorException r1, $r6;
        java.lang.Object[] $r2;
        com.android.server.NativeDaemonConnector $r3;
        java.lang.String $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.NetworkManagementService;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

     label1:
        $r3 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r2 = newarray (java.lang.Object)[1];

        if z0 == 0 goto label2;

        $r5 = "enable";

        goto label3;

     label2:
        $r5 = "disable";

     label3:
        $r2[0] = $r5;

        virtualinvoke $r3.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("firewall", $r2);

        r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled> = z0;

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r7;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label4 with label5;
    }

    public boolean isFirewallEnabled()
    {
        com.android.server.NetworkManagementService r0;
        boolean $z0;

        r0 := @this: com.android.server.NetworkManagementService;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        return $z0;
    }

    public void setFirewallInterfaceRule(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, $r7;
        boolean z0, $z1;
        com.android.server.NativeDaemonConnectorException r3, $r8;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        if z0 == 0 goto label1;

        $r7 = "allow";

        goto label2;

     label1:
        $r7 = "deny";

     label2:
        r2 = $r7;

     label3:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "set_interface_rule";

        $r4[1] = r1;

        $r4[2] = r2;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("firewall", $r4);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    public void setFirewallEgressSourceRule(java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, $r7;
        boolean z0, $z1;
        com.android.server.NativeDaemonConnectorException r3, $r8;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        if z0 == 0 goto label1;

        $r7 = "allow";

        goto label2;

     label1:
        $r7 = "deny";

     label2:
        r2 = $r7;

     label3:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[3];

        $r4[0] = "set_egress_source_rule";

        $r4[1] = r1;

        $r4[2] = r2;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("firewall", $r4);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        $r9 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    public void setFirewallEgressDestRule(java.lang.String, int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, $r8;
        int i0;
        boolean z0, $z1;
        com.android.server.NativeDaemonConnectorException r3, $r9;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.Integer $r6;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        if z0 == 0 goto label1;

        $r8 = "allow";

        goto label2;

     label1:
        $r8 = "deny";

     label2:
        r2 = $r8;

     label3:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[4];

        $r4[0] = "set_egress_dest_rule";

        $r4[1] = r1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[2] = $r6;

        $r4[3] = r2;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("firewall", $r4);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r10;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    public void setFirewallUidRule(int, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0, $z1;
        java.lang.String r1, $r7;
        com.android.server.NativeDaemonConnectorException r2, $r8;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        staticinvoke <com.android.server.NetworkManagementService: void enforceSystemUid()>();

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        if z0 == 0 goto label1;

        $r7 = "allow";

        goto label2;

     label1:
        $r7 = "deny";

     label2:
        r1 = $r7;

     label3:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "set_uid_rule";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        $r3[2] = r1;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("firewall", $r3);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label6:
        return;

        catch com.android.server.NativeDaemonConnectorException from label3 to label4 with label5;
    }

    private static void enforceSystemUid()
    {
        int i0;
        java.lang.SecurityException $r0;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if i0 == 1000 goto label1;

        $r0 = new java.lang.SecurityException;

        specialinvoke $r0.<java.lang.SecurityException: void <init>(java.lang.String)>("Only available to AID_SYSTEM");

        throw $r0;

     label1:
        return;
    }

    public void startClatd(java.lang.String) throws java.lang.IllegalStateException
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = "start";

        $r4[1] = r1;

        virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("clatd", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void stopClatd() throws java.lang.IllegalStateException
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r6;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "stop";

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("clatd", $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r7;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public boolean isClatdStarted()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonEvent r1;
        com.android.server.NativeDaemonConnectorException r2, $r7;
        android.content.Context $r3;
        java.lang.Object[] $r4;
        com.android.server.NativeDaemonConnector $r5;
        java.lang.String $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        $r3 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r5 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "status";

        r1 = virtualinvoke $r5.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("clatd", $r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = virtualinvoke r2.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        virtualinvoke r1.<com.android.server.NativeDaemonEvent: void checkCode(int)>(223);

        $r6 = virtualinvoke r1.<com.android.server.NativeDaemonEvent: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>("started");

        return $z0;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void registerNetworkActivityListener(android.os.INetworkActivityListener)
    {
        com.android.server.NetworkManagementService r0;
        android.os.INetworkActivityListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.os.INetworkActivityListener;

        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>(r1);

        return;
    }

    public void unregisterNetworkActivityListener(android.os.INetworkActivityListener)
    {
        com.android.server.NetworkManagementService r0;
        android.os.INetworkActivityListener r1;
        android.os.RemoteCallbackList $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: android.os.INetworkActivityListener;

        $r2 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r2.<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>(r1);

        return;
    }

    public boolean isNetworkActive()
    {
        com.android.server.NetworkManagementService r0;
        android.os.RemoteCallbackList r1, $r3;
        java.lang.Throwable r2, $r5;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $z1 = virtualinvoke $r4.<java.util.HashMap: boolean isEmpty()>();

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        exitmonitor r1;

     label5:
        return $z2;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void reportNetworkActive()
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        java.lang.Throwable r2, $r10;
        android.os.RemoteCallbackList $r3, $r4, $r5, $r11;
        android.os.IInterface $r6;
        android.os.INetworkActivityListener $r7;
        android.os.RemoteException $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        $r3 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        i0 = virtualinvoke $r3.<android.os.RemoteCallbackList: int beginBroadcast()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

     label03:
        $r5 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        $r6 = virtualinvoke $r5.<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>(i1);

        $r7 = (android.os.INetworkActivityListener) $r6;

        interfaceinvoke $r7.<android.os.INetworkActivityListener: void onNetworkActive()>();

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        $r4 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r4.<android.os.RemoteCallbackList: void finishBroadcast()>();

        goto label11;

     label09:
        $r10 := @caughtexception;

        r2 = $r10;

     label10:
        $r11 = r0.<com.android.server.NetworkManagementService: android.os.RemoteCallbackList mNetworkActivityListeners>;

        virtualinvoke $r11.<android.os.RemoteCallbackList: void finishBroadcast()>();

        throw r2;

     label11:
        return;

        catch android.os.RemoteException from label03 to label04 with label05;
        catch java.lang.RuntimeException from label03 to label04 with label06;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void monitor()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnector $r1, $r2;

        r0 := @this: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r2.<com.android.server.NativeDaemonConnector: void monitor()>();

     label1:
        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.Object r4, $r10, $r17, $r21, $r22, $r23, r29;
        java.lang.Throwable r5, r6, r7, $r25, $r26, $r27;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        android.content.Context $r8;
        com.android.server.NativeDaemonConnector $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r11, $r13, $r20;
        java.util.HashMap $r12, $r14, $r19;
        android.util.SparseBooleanArray $r15, $r16, $r24, r28;
        java.util.Set $r18;
        java.util.Iterator r30;
        java.util.Map$Entry r31;
        com.android.server.NetworkManagementService$IdleTimerParams r32;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r8 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r8.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "NetworkManagementService");

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("NetworkManagementService NativeDaemonConnector Log:");

        $r9 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r9.<com.android.server.NativeDaemonConnector: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Bandwidth control enabled: ");

        $z0 = r0.<com.android.server.NetworkManagementService: boolean mBandwidthControlEnabled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mMobileActivityFromRadio=");

        $z1 = r0.<com.android.server.NetworkManagementService: boolean mMobileActivityFromRadio>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mLastPowerStateFromRadio=");

        $i1 = r0.<com.android.server.NetworkManagementService: int mLastPowerStateFromRadio>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mNetworkActive=");

        $z2 = r0.<com.android.server.NetworkManagementService: boolean mNetworkActive>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z2);

        $r10 = r0.<com.android.server.NetworkManagementService: java.lang.Object mQuotaLock>;

        r4 = $r10;

        entermonitor $r10;

     label01:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Active quota ifaces: ");

        $r12 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveQuotas>;

        $r11 = virtualinvoke $r12.<java.util.HashMap: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Active alert ifaces: ");

        $r14 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveAlerts>;

        $r13 = virtualinvoke $r14.<java.util.HashMap: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        exitmonitor r4;

     label02:
        goto label05;

     label03:
        $r25 := @caughtexception;

        r5 = $r25;

        exitmonitor r4;

     label04:
        throw r5;

     label05:
        $r15 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        r28 = $r15;

        entermonitor $r15;

     label06:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("UID reject on quota ifaces: [");

        $r16 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        i7 = virtualinvoke $r16.<android.util.SparseBooleanArray: int size()>();

        i0 = 0;

     label07:
        if i0 >= i7 goto label09;

        $r24 = r0.<com.android.server.NetworkManagementService: android.util.SparseBooleanArray mUidRejectOnQuota>;

        $i5 = virtualinvoke $r24.<android.util.SparseBooleanArray: int keyAt(int)>(i0);

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i5);

        $i6 = i7 - 1;

        if i0 >= $i6 goto label08;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(",");

     label08:
        i0 = i0 + 1;

        goto label07;

     label09:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("]");

        exitmonitor r28;

     label10:
        goto label13;

     label11:
        $r27 := @caughtexception;

        r6 = $r27;

        exitmonitor r28;

     label12:
        throw r6;

     label13:
        $r17 = r0.<com.android.server.NetworkManagementService: java.lang.Object mIdleTimerLock>;

        r29 = $r17;

        entermonitor $r17;

     label14:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Idle timers:");

        $r19 = r0.<com.android.server.NetworkManagementService: java.util.HashMap mActiveIdleTimers>;

        $r18 = virtualinvoke $r19.<java.util.HashMap: java.util.Set entrySet()>();

        r30 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label15:
        $z3 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        $r22 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.util.Map$Entry) $r22;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r23 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r20 = (java.lang.String) $r23;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r20);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

        $r21 = interfaceinvoke r31.<java.util.Map$Entry: java.lang.Object getValue()>();

        r32 = (com.android.server.NetworkManagementService$IdleTimerParams) $r21;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("    timeout=");

        $i3 = r32.<com.android.server.NetworkManagementService$IdleTimerParams: int timeout>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" type=");

        $i4 = r32.<com.android.server.NetworkManagementService$IdleTimerParams: int type>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" networkCount=");

        $i2 = r32.<com.android.server.NetworkManagementService$IdleTimerParams: int networkCount>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i2);

        goto label15;

     label16:
        exitmonitor r29;

     label17:
        goto label20;

     label18:
        $r26 := @caughtexception;

        r7 = $r26;

        exitmonitor r29;

     label19:
        throw r7;

     label20:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Firewall enabled: ");

        $z4 = r0.<com.android.server.NetworkManagementService: boolean mFirewallEnabled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z4);

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label14 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    public void createPhysicalNetwork(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "create";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void createVirtualNetwork(int, boolean, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        boolean z0, z1;
        com.android.server.NativeDaemonConnectorException r1, $r10;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r6;
        java.lang.String $r8, $r9;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[5];

        $r3[0] = "create";

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r6;

        $r3[2] = "vpn";

        if z0 == 0 goto label2;

        $r9 = "1";

        goto label3;

     label2:
        $r9 = "0";

     label3:
        $r3[3] = $r9;

        if z1 == 0 goto label4;

        $r8 = "1";

        goto label5;

     label4:
        $r8 = "0";

     label5:
        $r3[4] = $r8;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r11;

     label8:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label6 with label7;
    }

    public void removeNetwork(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "destroy";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[1] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void addInterfaceToNetwork(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r5;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(java.lang.String,java.lang.String,java.lang.String)>("add", $r5, r1);

        return;
    }

    public void removeInterfaceFromNetwork(java.lang.String, int)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, $r5;
        int i0;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(java.lang.String,java.lang.String,java.lang.String)>("remove", $r5, r1);

        return;
    }

    private void modifyInterfaceInNetwork(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2, r3;
        com.android.server.NativeDaemonConnectorException r4, $r9;
        android.content.Context $r5;
        java.lang.Object[] $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r7 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r6 = newarray (java.lang.Object)[4];

        $r6[0] = "interface";

        $r6[1] = r1;

        $r6[2] = r2;

        $r6[3] = r3;

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r6);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r10;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void addLegacyRouteForNetId(int, android.net.RouteInfo, int)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1, $i2;
        android.net.RouteInfo r1;
        com.android.server.NativeDaemonConnector$Command r2, $r6;
        android.net.LinkAddress r3;
        com.android.server.NativeDaemonConnectorException r4, $r26;
        android.content.Context $r5;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        java.lang.String $r11, $r15, $r17, $r22;
        java.net.InetAddress $r12, $r23;
        java.lang.StringBuilder $r13, $r14, $r16, $r18;
        boolean $z0;
        com.android.server.NativeDaemonConnector $r21;
        java.lang.IllegalArgumentException $r24;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.RouteInfo;

        i1 := @parameter2: int;

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        $r6 = new com.android.server.NativeDaemonConnector$Command;

        $r7 = newarray (java.lang.Object)[5];

        $r7[0] = "route";

        $r7[1] = "legacy";

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[2] = $r8;

        $r7[3] = "add";

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r7[4] = $r9;

        specialinvoke $r6.<com.android.server.NativeDaemonConnector$Command: void <init>(java.lang.String,java.lang.Object[])>("network", $r7);

        r2 = $r6;

        r3 = virtualinvoke r1.<android.net.RouteInfo: android.net.LinkAddress getDestinationLinkAddress()>();

        $r11 = virtualinvoke r1.<android.net.RouteInfo: java.lang.String getInterface()>();

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r11);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r3.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        $r15 = virtualinvoke $r12.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i2 = virtualinvoke r3.<android.net.LinkAddress: int getPrefixLength()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r17);

        $z0 = virtualinvoke r1.<android.net.RouteInfo: boolean hasGateway()>();

        if $z0 == 0 goto label1;

        $r23 = virtualinvoke r1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $r22 = virtualinvoke $r23.<java.net.InetAddress: java.lang.String getHostAddress()>();

        virtualinvoke r2.<com.android.server.NativeDaemonConnector$Command: com.android.server.NativeDaemonConnector$Command appendArg(java.lang.Object)>($r22);

     label1:
        $r21 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        virtualinvoke $r21.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(com.android.server.NativeDaemonConnector$Command)>(r2);

     label2:
        goto label4;

     label3:
        $r26 := @caughtexception;

        r4 = $r26;

        $r24 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r24;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setDefaultNetId(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "default";

        $r3[1] = "set";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void clearDefaultNetId()
    {
        com.android.server.NetworkManagementService r0;
        com.android.server.NativeDaemonConnectorException r1, $r6;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: com.android.server.NetworkManagementService;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = "default";

        $r3[1] = "clear";

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r7;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void setPermission(java.lang.String, int[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        int[] r2;
        java.lang.Object[] r3, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.NativeDaemonConnectorException r4, $r10;
        android.content.Context $r5;
        java.lang.Integer $r6;
        com.android.server.NativeDaemonConnector $r7;
        java.lang.IllegalArgumentException $r11;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        $r5 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r5.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r3 = newarray (java.lang.Object)[14];

        r3[0] = "permission";

        r3[1] = "user";

        r3[2] = "set";

        r3[3] = r1;

        i0 = 4;

        i1 = 0;

     label1:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label7;

        $i3 = i0;

        i0 = i0 + 1;

        $i4 = r2[i1];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r3[$i3] = $r6;

        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        if i1 == $i6 goto label2;

        $i7 = lengthof r3;

        if i0 != $i7 goto label6;

     label2:
        $r7 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r9 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, i0);

        virtualinvoke $r7.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r9);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        $r11 = virtualinvoke r4.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r11;

     label5:
        i0 = 4;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public void clearPermission(int[])
    {
        com.android.server.NetworkManagementService r0;
        int[] r1;
        java.lang.Object[] r2, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.server.NativeDaemonConnectorException r3, $r10;
        android.content.Context $r4;
        java.lang.Integer $r5;
        com.android.server.NativeDaemonConnector $r6;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: int[];

        $r4 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

        r2 = newarray (java.lang.Object)[13];

        r2[0] = "permission";

        r2[1] = "user";

        r2[2] = "clear";

        i0 = 3;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label7;

        $i3 = i0;

        i0 = i0 + 1;

        $i4 = r1[i1];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r2[$i3] = $r5;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        if i1 == $i6 goto label2;

        $i7 = lengthof r2;

        if i0 != $i7 goto label6;

     label2:
        $r6 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r7 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i0);

        virtualinvoke $r6.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r7);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        $r9 = virtualinvoke r3.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r9;

     label5:
        i0 = 3;

     label6:
        i1 = i1 + 1;

        goto label1;

     label7:
        return;

        catch com.android.server.NativeDaemonConnectorException from label2 to label3 with label4;
    }

    public void allowProtect(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "protect";

        $r3[1] = "allow";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void denyProtect(int)
    {
        com.android.server.NetworkManagementService r0;
        int i0;
        com.android.server.NativeDaemonConnectorException r1, $r7;
        android.content.Context $r2;
        java.lang.Object[] $r3;
        com.android.server.NativeDaemonConnector $r4;
        java.lang.Integer $r5;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: com.android.server.NetworkManagementService;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.NetworkManagementService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "NetworkManagementService");

     label1:
        $r4 = r0.<com.android.server.NetworkManagementService: com.android.server.NativeDaemonConnector mConnector>;

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = "protect";

        $r3[1] = "deny";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[2] = $r5;

        virtualinvoke $r4.<com.android.server.NativeDaemonConnector: com.android.server.NativeDaemonEvent execute(java.lang.String,java.lang.Object[])>("network", $r3);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r1.<com.android.server.NativeDaemonConnectorException: java.lang.IllegalArgumentException rethrowAsParcelableException()>();

        throw $r8;

     label4:
        return;

        catch com.android.server.NativeDaemonConnectorException from label1 to label2 with label3;
    }

    public void addInterfaceToLocalNetwork(java.lang.String, java.util.List)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        java.util.List r2;
        java.util.Iterator r3;
        android.net.RouteInfo r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(java.lang.String,java.lang.String,java.lang.String)>("add", "local", r1);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.net.RouteInfo) $r5;

        $z1 = virtualinvoke r4.<android.net.RouteInfo: boolean isDefaultRoute()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyRoute(java.lang.String,java.lang.String,android.net.RouteInfo)>("add", "local", r4);

     label2:
        goto label1;

     label3:
        return;
    }

    public void removeInterfaceFromLocalNetwork(java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @this: com.android.server.NetworkManagementService;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void modifyInterfaceInNetwork(java.lang.String,java.lang.String,java.lang.String)>("remove", "local", r1);

        return;
    }

    static void access$100(com.android.server.NetworkManagementService, int, int, long, boolean)
    {
        com.android.server.NetworkManagementService r0;
        int i0, i1;
        long l2;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceClassActivity(int,int,long,boolean)>(i0, i1, l2, z0);

        return;
    }

    static java.util.concurrent.CountDownLatch access$200(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        java.util.concurrent.CountDownLatch $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: java.util.concurrent.CountDownLatch mConnectedSignal>;

        return $r1;
    }

    static java.util.concurrent.CountDownLatch access$202(com.android.server.NetworkManagementService, java.util.concurrent.CountDownLatch)
    {
        com.android.server.NetworkManagementService r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.util.concurrent.CountDownLatch;

        r0.<com.android.server.NetworkManagementService: java.util.concurrent.CountDownLatch mConnectedSignal> = r1;

        return r1;
    }

    static void access$300(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        specialinvoke r0.<com.android.server.NetworkManagementService: void prepareNativeDaemon()>();

        return;
    }

    static android.os.Handler access$400(com.android.server.NetworkManagementService)
    {
        com.android.server.NetworkManagementService r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        $r1 = r0.<com.android.server.NetworkManagementService: android.os.Handler mFgHandler>;

        return $r1;
    }

    static void access$500(com.android.server.NetworkManagementService, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceAdded(java.lang.String)>(r1);

        return;
    }

    static void access$600(com.android.server.NetworkManagementService, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceRemoved(java.lang.String)>(r1);

        return;
    }

    static void access$700(com.android.server.NetworkManagementService, java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceStatusChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void access$800(com.android.server.NetworkManagementService, java.lang.String, boolean)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        boolean z0;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceLinkStateChanged(java.lang.String,boolean)>(r1, z0);

        return;
    }

    static void access$900(com.android.server.NetworkManagementService, java.lang.String, java.lang.String)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1, r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyLimitReached(java.lang.String,java.lang.String)>(r1, r2);

        return;
    }

    static void access$1000(com.android.server.NetworkManagementService, java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.LinkAddress;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyAddressUpdated(java.lang.String,android.net.LinkAddress)>(r1, r2);

        return;
    }

    static void access$1100(com.android.server.NetworkManagementService, java.lang.String, android.net.LinkAddress)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.LinkAddress r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.LinkAddress;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyAddressRemoved(java.lang.String,android.net.LinkAddress)>(r1, r2);

        return;
    }

    static void access$1200(com.android.server.NetworkManagementService, java.lang.String, long, java.lang.String[])
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        long l0;
        java.lang.String[] r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        r2 := @parameter3: java.lang.String[];

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyInterfaceDnsServerInfo(java.lang.String,long,java.lang.String[])>(r1, l0, r2);

        return;
    }

    static void access$1300(com.android.server.NetworkManagementService, java.lang.String, android.net.RouteInfo)
    {
        com.android.server.NetworkManagementService r0;
        java.lang.String r1;
        android.net.RouteInfo r2;

        r0 := @parameter0: com.android.server.NetworkManagementService;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.RouteInfo;

        specialinvoke r0.<com.android.server.NetworkManagementService: void notifyRouteChange(java.lang.String,android.net.RouteInfo)>(r1, r2);

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.NetworkManagementService: int DAEMON_MSG_MOBILE_CONN_REAL_TIME_INFO> = 1;

        <com.android.server.NetworkManagementService: java.lang.String LIMIT_GLOBAL_ALERT> = "globalAlert";

        <com.android.server.NetworkManagementService: int MAX_UID_RANGES_PER_COMMAND> = 10;

        <com.android.server.NetworkManagementService: java.lang.String NETD_SOCKET_NAME> = "netd";

        <com.android.server.NetworkManagementService: java.lang.String NETD_TAG> = "NetdConnector";

        <com.android.server.NetworkManagementService: boolean DBG> = 0;

        <com.android.server.NetworkManagementService: java.lang.String TAG> = "NetworkManagementService";

        return;
    }
}
