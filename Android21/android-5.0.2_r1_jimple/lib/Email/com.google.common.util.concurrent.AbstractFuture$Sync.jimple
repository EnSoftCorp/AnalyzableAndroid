final class com.google.common.util.concurrent.AbstractFuture$Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer
{
    private static final long serialVersionUID;
    static final int RUNNING;
    static final int COMPLETING;
    static final int COMPLETED;
    static final int CANCELLED;
    private java.lang.Object value;
    private java.lang.Throwable exception;

    void <init>()
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        return;
    }

    protected int tryAcquireShared(int)
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        int i0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean isDone()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return -1;
    }

    protected boolean tryReleaseShared(int)
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        int i0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: void setState(int)>(i0);

        return 1;
    }

    java.lang.Object get(long) throws java.util.concurrent.TimeoutException, java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        long l0;
        boolean $z0;
        java.lang.Object $r1;
        java.util.concurrent.TimeoutException $r2;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        l0 := @parameter0: long;

        $z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean tryAcquireSharedNanos(int,long)>(-1, l0);

        if $z0 != 0 goto label1;

        $r2 = new java.util.concurrent.TimeoutException;

        specialinvoke $r2.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>("Timeout waiting for task.");

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Object getValue()>();

        return $r1;
    }

    java.lang.Object get() throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException, java.lang.InterruptedException
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        java.lang.Object $r1;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: void acquireSharedInterruptibly(int)>(-1);

        $r1 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Object getValue()>();

        return $r1;
    }

    private java.lang.Object getValue() throws java.util.concurrent.CancellationException, java.util.concurrent.ExecutionException
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        int i0;
        java.util.concurrent.CancellationException $r1;
        java.lang.Throwable $r2, $r5;
        java.lang.Object $r3;
        java.util.concurrent.ExecutionException $r4;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        i0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: int getState()>();

        lookupswitch(i0)
        {
            case 2: goto label1;
            case 4: goto label3;
            default: goto label4;
        };

     label1:
        $r2 = r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Throwable exception>;

        if $r2 == null goto label2;

        $r4 = new java.util.concurrent.ExecutionException;

        $r5 = r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Throwable exception>;

        specialinvoke $r4.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r5);

        throw $r4;

     label2:
        $r3 = r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Object value>;

        return $r3;

     label3:
        $r1 = new java.util.concurrent.CancellationException;

        specialinvoke $r1.<java.util.concurrent.CancellationException: void <init>(java.lang.String)>("Task was cancelled.");

        throw $r1;

     label4:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error, synchronizer in invalid state: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    boolean isDone()
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: int getState()>();

        $i1 = $i0 & 6;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isCancelled()
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        $i0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: int getState()>();

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean set(java.lang.Object)
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>(r1, null, 2);

        return $z0;
    }

    boolean setException(java.lang.Throwable)
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        java.lang.Throwable r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>(null, r1, 2);

        return $z0;
    }

    boolean cancel()
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        $z0 = specialinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean complete(java.lang.Object,java.lang.Throwable,int)>(null, null, 4);

        return $z0;
    }

    private boolean complete(java.lang.Object, java.lang.Throwable, int)
    {
        com.google.common.util.concurrent.AbstractFuture$Sync r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.google.common.util.concurrent.AbstractFuture$Sync;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        i0 := @parameter2: int;

        z0 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean compareAndSetState(int,int)>(0, 1);

        if z0 == 0 goto label1;

        r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Object value> = r1;

        r0.<com.google.common.util.concurrent.AbstractFuture$Sync: java.lang.Throwable exception> = r2;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: boolean releaseShared(int)>(i0);

        goto label2;

     label1:
        $i1 = virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: int getState()>();

        if $i1 != 1 goto label2;

        virtualinvoke r0.<com.google.common.util.concurrent.AbstractFuture$Sync: void acquireShared(int)>(-1);

     label2:
        return z0;
    }

    public static void <clinit>()
    {
        <com.google.common.util.concurrent.AbstractFuture$Sync: int CANCELLED> = 4;

        <com.google.common.util.concurrent.AbstractFuture$Sync: int COMPLETED> = 2;

        <com.google.common.util.concurrent.AbstractFuture$Sync: int COMPLETING> = 1;

        <com.google.common.util.concurrent.AbstractFuture$Sync: int RUNNING> = 0;

        <com.google.common.util.concurrent.AbstractFuture$Sync: long serialVersionUID> = 0L;

        return;
    }
}
