final class org.owasp.html.Trie extends java.lang.Object
{
    private final char[] childMap;
    private final org.owasp.html.Trie[] children;
    private final boolean terminal;
    private final int value;
    private static final char[] ZERO_CHARS;
    private static final org.owasp.html.Trie[] ZERO_TRIES;

    public void <init>(java.util.Map)
    {
        org.owasp.html.Trie r0;
        java.util.Map r1;
        java.util.List $r2;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.util.Map;

        $r2 = staticinvoke <org.owasp.html.Trie: java.util.List sortedUniqEntries(java.util.Map)>(r1);

        specialinvoke r0.<org.owasp.html.Trie: void <init>(java.util.List,int)>($r2, 0);

        return;
    }

    private void <init>(java.util.List, int)
    {
        org.owasp.html.Trie r0;
        java.util.List r1;
        int i0, $i1;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke r0.<org.owasp.html.Trie: void <init>(java.util.List,int,int,int)>(r1, i0, 0, $i1);

        return;
    }

    private void <init>(java.util.List, int, int, int)
    {
        org.owasp.html.Trie r0, $r13, $r22;
        java.util.List r1;
        int i0, i1, i2, i3, i4, i5, i7, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        char c6, c8, c17;
        java.lang.Object $r2, $r4, $r7, $r9, $r14, $r16, $r21, $r25, $r26, $r28;
        java.util.Map$Entry $r3, $r10, $r17, $r24, $r29;
        java.lang.String $r5, $r11, $r19, $r23;
        char[] $r6, $r12, $r18, $r31;
        boolean $z0, $z1;
        org.owasp.html.Trie[] $r8, $r15, $r20, $r30;
        java.lang.Integer $r27;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (java.util.Map$Entry) $r2;

        $r4 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = (java.lang.String) $r4;

        $i9 = virtualinvoke $r5.<java.lang.String: int length()>();

        if i0 != $i9 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        r0.<org.owasp.html.Trie: boolean terminal> = $z1;

        $z0 = r0.<org.owasp.html.Trie: boolean terminal>;

        if $z0 == 0 goto label04;

        $r28 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r29 = (java.util.Map$Entry) $r28;

        $r26 = interfaceinvoke $r29.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (java.lang.Integer) $r26;

        $i14 = virtualinvoke $r27.<java.lang.Integer: int intValue()>();

        r0.<org.owasp.html.Trie: int value> = $i14;

        $i13 = i1 + 1;

        if $i13 != i2 goto label03;

        $r31 = <org.owasp.html.Trie: char[] ZERO_CHARS>;

        r0.<org.owasp.html.Trie: char[] childMap> = $r31;

        $r30 = <org.owasp.html.Trie: org.owasp.html.Trie[] ZERO_TRIES>;

        r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children> = $r30;

        return;

     label03:
        i1 = i1 + 1;

        goto label05;

     label04:
        r0.<org.owasp.html.Trie: int value> = 2147483647;

     label05:
        i3 = 0;

        i4 = -1;

        i5 = i1;

     label06:
        if i5 >= i2 goto label08;

        $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        $r24 = (java.util.Map$Entry) $r21;

        $r25 = interfaceinvoke $r24.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (java.lang.String) $r25;

        c6 = virtualinvoke $r23.<java.lang.String: char charAt(int)>(i0);

        if c6 == i4 goto label07;

        i3 = i3 + 1;

        i4 = c6;

     label07:
        i5 = i5 + 1;

        goto label06;

     label08:
        $r6 = newarray (char)[i3];

        r0.<org.owasp.html.Trie: char[] childMap> = $r6;

        $r8 = newarray (org.owasp.html.Trie)[i3];

        r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children> = $r8;

        i15 = i1;

        i16 = 0;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r10 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.String) $r9;

        c17 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i0);

        i7 = i1 + 1;

     label09:
        if i7 >= i2 goto label11;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i7);

        $r17 = (java.util.Map$Entry) $r14;

        $r16 = interfaceinvoke $r17.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r19 = (java.lang.String) $r16;

        c8 = virtualinvoke $r19.<java.lang.String: char charAt(int)>(i0);

        if c8 == c17 goto label10;

        $r18 = r0.<org.owasp.html.Trie: char[] childMap>;

        $r18[i16] = c17;

        $r20 = r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children>;

        $i11 = i16;

        i16 = i16 + 1;

        $r22 = new org.owasp.html.Trie;

        $i12 = i0 + 1;

        specialinvoke $r22.<org.owasp.html.Trie: void <init>(java.util.List,int,int,int)>(r1, $i12, i15, i7);

        $r20[$i11] = $r22;

        i15 = i7;

        c17 = c8;

     label10:
        i7 = i7 + 1;

        goto label09;

     label11:
        $r12 = r0.<org.owasp.html.Trie: char[] childMap>;

        $r12[i16] = c17;

        $r15 = r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children>;

        $r13 = new org.owasp.html.Trie;

        $i10 = i0 + 1;

        specialinvoke $r13.<org.owasp.html.Trie: void <init>(java.util.List,int,int,int)>(r1, $i10, i15, i2);

        $r15[i16] = $r13;

        return;
    }

    public boolean isTerminal()
    {
        org.owasp.html.Trie r0;
        boolean $z0;

        r0 := @this: org.owasp.html.Trie;

        $z0 = r0.<org.owasp.html.Trie: boolean terminal>;

        return $z0;
    }

    public int getValue()
    {
        org.owasp.html.Trie r0;
        int $i0;

        r0 := @this: org.owasp.html.Trie;

        $i0 = r0.<org.owasp.html.Trie: int value>;

        return $i0;
    }

    public org.owasp.html.Trie lookup(char)
    {
        org.owasp.html.Trie r0, $r3;
        char c0;
        int i1;
        char[] $r1;
        org.owasp.html.Trie[] $r2;

        r0 := @this: org.owasp.html.Trie;

        c0 := @parameter0: char;

        $r1 = r0.<org.owasp.html.Trie: char[] childMap>;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>($r1, c0);

        if i1 < 0 goto label1;

        $r2 = r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children>;

        $r3 = $r2[i1];

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public org.owasp.html.Trie lookup(java.lang.CharSequence)
    {
        org.owasp.html.Trie r0, r2;
        java.lang.CharSequence r1;
        int i0, i1;
        char $c2;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = r0;

        i0 = 0;

        i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label1:
        if i0 >= i1 goto label3;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        r2 = virtualinvoke r2.<org.owasp.html.Trie: org.owasp.html.Trie lookup(char)>($c2);

        if null != r2 goto label2;

        goto label3;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r2;
    }

    public boolean contains(char)
    {
        org.owasp.html.Trie r0;
        char c0;
        char[] $r1;
        int $i1;
        boolean $z0;

        r0 := @this: org.owasp.html.Trie;

        c0 := @parameter0: char;

        $r1 = r0.<org.owasp.html.Trie: char[] childMap>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(char[],char)>($r1, c0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.util.List sortedUniqEntries(java.util.Map)
    {
        java.util.Map r0;
        java.util.ArrayList $r1;
        java.util.TreeMap $r2;
        java.util.Set $r3;

        r0 := @parameter0: java.util.Map;

        $r1 = new java.util.ArrayList;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>(java.util.Map)>(r0);

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.Set entrySet()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r1;
    }

    public void toStringList(java.util.List)
    {
        org.owasp.html.Trie r0;
        java.util.List r1;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.owasp.html.Trie: void toStringList(java.lang.String,java.util.List)>("", r1);

        return;
    }

    private void toStringList(java.lang.String, java.util.List)
    {
        org.owasp.html.Trie r0, $r6;
        java.lang.String r1, $r10;
        java.util.List r2;
        int i0, i1;
        boolean $z0;
        char[] $r3, $r8;
        org.owasp.html.Trie[] $r4;
        java.lang.StringBuilder $r5, $r7, $r9;
        char $c2;

        r0 := @this: org.owasp.html.Trie;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $z0 = r0.<org.owasp.html.Trie: boolean terminal>;

        if $z0 == 0 goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        i0 = 0;

        $r3 = r0.<org.owasp.html.Trie: char[] childMap>;

        i1 = lengthof $r3;

     label2:
        if i0 >= i1 goto label3;

        $r4 = r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children>;

        $r6 = $r4[i0];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = r0.<org.owasp.html.Trie: char[] childMap>;

        $c2 = $r8[i0];

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.owasp.html.Trie: void toStringList(java.lang.String,java.util.List)>($r10, r2);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.owasp.html.Trie r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.owasp.html.Trie;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<org.owasp.html.Trie: void toStringBuilder(int,java.lang.StringBuilder)>(0, r1);

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private void toStringBuilder(int, java.lang.StringBuilder)
    {
        org.owasp.html.Trie r0, $r11;
        int i0, i1, i2, $i3, i5;
        java.lang.StringBuilder r1, $r5, $r7;
        boolean $z0;
        char[] $r3, $r6;
        char $c4;
        org.owasp.html.Trie[] $r9;
        java.lang.String $r12;

        r0 := @this: org.owasp.html.Trie;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuilder;

        $z0 = r0.<org.owasp.html.Trie: boolean terminal>;

        if $z0 == 0 goto label1;

        $r12 = "terminal";

        goto label2;

     label1:
        $r12 = "nonterminal";

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i5 = i0 + 1;

        i1 = 0;

     label3:
        $r3 = r0.<org.owasp.html.Trie: char[] childMap>;

        $i3 = lengthof $r3;

        if i1 >= $i3 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        i2 = 0;

     label4:
        if i2 >= i5 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        i2 = i2 + 1;

        goto label4;

     label5:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $r6 = r0.<org.owasp.html.Trie: char[] childMap>;

        $c4 = $r6[i1];

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r9 = r0.<org.owasp.html.Trie: org.owasp.html.Trie[] children>;

        $r11 = $r9[i1];

        specialinvoke $r11.<org.owasp.html.Trie: void toStringBuilder(int,java.lang.StringBuilder)>(i5, r1);

        i1 = i1 + 1;

        goto label3;

     label6:
        return;
    }

    static void <clinit>()
    {
        char[] $r0;
        org.owasp.html.Trie[] $r1;

        $r0 = newarray (char)[0];

        <org.owasp.html.Trie: char[] ZERO_CHARS> = $r0;

        $r1 = newarray (org.owasp.html.Trie)[0];

        <org.owasp.html.Trie: org.owasp.html.Trie[] ZERO_TRIES> = $r1;

        return;
    }
}
