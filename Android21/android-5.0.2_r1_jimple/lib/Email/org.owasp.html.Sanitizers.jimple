public final class org.owasp.html.Sanitizers extends java.lang.Object
{
    public static final org.owasp.html.PolicyFactory FORMATTING;
    public static final org.owasp.html.PolicyFactory BLOCKS;
    public static final org.owasp.html.PolicyFactory STYLES;
    public static final org.owasp.html.PolicyFactory LINKS;
    private static final org.owasp.html.AttributePolicy INTEGER;
    public static final org.owasp.html.PolicyFactory IMAGES;

    private void <init>()
    {
        org.owasp.html.Sanitizers r0;

        r0 := @this: org.owasp.html.Sanitizers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        org.owasp.html.HtmlPolicyBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r16, $r17, $r21, $r23, $r25, $r29, $r32;
        org.owasp.html.PolicyFactory $r2, $r5, $r8, $r19, $r33;
        java.lang.String[] $r11, $r13, $r15, $r20, $r22, $r24, $r26, $r28, $r35;
        org.owasp.html.HtmlPolicyBuilder$AttributeBuilder $r14, $r27, $r31, $r34;
        org.owasp.html.Sanitizers$1 $r18;
        org.owasp.html.AttributePolicy $r30;

        $r0 = new org.owasp.html.HtmlPolicyBuilder;

        specialinvoke $r0.<org.owasp.html.HtmlPolicyBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowCommonInlineFormattingElements()>();

        $r2 = virtualinvoke $r1.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.PolicyFactory toFactory()>();

        <org.owasp.html.Sanitizers: org.owasp.html.PolicyFactory FORMATTING> = $r2;

        $r3 = new org.owasp.html.HtmlPolicyBuilder;

        specialinvoke $r3.<org.owasp.html.HtmlPolicyBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowCommonBlockElements()>();

        $r5 = virtualinvoke $r4.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.PolicyFactory toFactory()>();

        <org.owasp.html.Sanitizers: org.owasp.html.PolicyFactory BLOCKS> = $r5;

        $r6 = new org.owasp.html.HtmlPolicyBuilder;

        specialinvoke $r6.<org.owasp.html.HtmlPolicyBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowStyling()>();

        $r8 = virtualinvoke $r7.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.PolicyFactory toFactory()>();

        <org.owasp.html.Sanitizers: org.owasp.html.PolicyFactory STYLES> = $r8;

        $r9 = new org.owasp.html.HtmlPolicyBuilder;

        specialinvoke $r9.<org.owasp.html.HtmlPolicyBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowStandardUrlProtocols()>();

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "a";

        $r12 = virtualinvoke $r10.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowElements(java.lang.String[])>($r11);

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "href";

        $r14 = virtualinvoke $r12.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder$AttributeBuilder allowAttributes(java.lang.String[])>($r13);

        $r15 = newarray (java.lang.String)[1];

        $r15[0] = "a";

        $r17 = virtualinvoke $r14.<org.owasp.html.HtmlPolicyBuilder$AttributeBuilder: org.owasp.html.HtmlPolicyBuilder onElements(java.lang.String[])>($r15);

        $r16 = virtualinvoke $r17.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder requireRelNofollowOnLinks()>();

        $r19 = virtualinvoke $r16.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.PolicyFactory toFactory()>();

        <org.owasp.html.Sanitizers: org.owasp.html.PolicyFactory LINKS> = $r19;

        $r18 = new org.owasp.html.Sanitizers$1;

        specialinvoke $r18.<org.owasp.html.Sanitizers$1: void <init>()>();

        <org.owasp.html.Sanitizers: org.owasp.html.AttributePolicy INTEGER> = $r18;

        $r21 = new org.owasp.html.HtmlPolicyBuilder;

        specialinvoke $r21.<org.owasp.html.HtmlPolicyBuilder: void <init>()>();

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "http";

        $r20[1] = "https";

        $r23 = virtualinvoke $r21.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowUrlProtocols(java.lang.String[])>($r20);

        $r22 = newarray (java.lang.String)[1];

        $r22[0] = "img";

        $r25 = virtualinvoke $r23.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder allowElements(java.lang.String[])>($r22);

        $r24 = newarray (java.lang.String)[2];

        $r24[0] = "alt";

        $r24[1] = "src";

        $r27 = virtualinvoke $r25.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder$AttributeBuilder allowAttributes(java.lang.String[])>($r24);

        $r26 = newarray (java.lang.String)[1];

        $r26[0] = "img";

        $r29 = virtualinvoke $r27.<org.owasp.html.HtmlPolicyBuilder$AttributeBuilder: org.owasp.html.HtmlPolicyBuilder onElements(java.lang.String[])>($r26);

        $r28 = newarray (java.lang.String)[3];

        $r28[0] = "border";

        $r28[1] = "height";

        $r28[2] = "width";

        $r31 = virtualinvoke $r29.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.HtmlPolicyBuilder$AttributeBuilder allowAttributes(java.lang.String[])>($r28);

        $r30 = <org.owasp.html.Sanitizers: org.owasp.html.AttributePolicy INTEGER>;

        $r34 = virtualinvoke $r31.<org.owasp.html.HtmlPolicyBuilder$AttributeBuilder: org.owasp.html.HtmlPolicyBuilder$AttributeBuilder matching(org.owasp.html.AttributePolicy)>($r30);

        $r35 = newarray (java.lang.String)[1];

        $r35[0] = "img";

        $r32 = virtualinvoke $r34.<org.owasp.html.HtmlPolicyBuilder$AttributeBuilder: org.owasp.html.HtmlPolicyBuilder onElements(java.lang.String[])>($r35);

        $r33 = virtualinvoke $r32.<org.owasp.html.HtmlPolicyBuilder: org.owasp.html.PolicyFactory toFactory()>();

        <org.owasp.html.Sanitizers: org.owasp.html.PolicyFactory IMAGES> = $r33;

        return;
    }
}
