public class org.apache.commons.io.filefilter.FileFilterUtils extends java.lang.Object
{
    private static org.apache.commons.io.filefilter.IOFileFilter cvsFilter;
    private static org.apache.commons.io.filefilter.IOFileFilter svnFilter;

    public void <init>()
    {
        org.apache.commons.io.filefilter.FileFilterUtils r0;

        r0 := @this: org.apache.commons.io.filefilter.FileFilterUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter prefixFileFilter(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.io.filefilter.PrefixFileFilter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.io.filefilter.PrefixFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.PrefixFileFilter: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter suffixFileFilter(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.io.filefilter.SuffixFileFilter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.io.filefilter.SuffixFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.SuffixFileFilter: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)
    {
        java.lang.String r0;
        org.apache.commons.io.filefilter.NameFileFilter $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.io.filefilter.NameFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NameFileFilter: void <init>(java.lang.String)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter fileFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, r1;
        org.apache.commons.io.filefilter.AndFileFilter $r2;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, r1;
        org.apache.commons.io.filefilter.OrFileFilter $r2;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r1 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        $r2 = new org.apache.commons.io.filefilter.OrFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.OrFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1);

        return $r2;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0;
        org.apache.commons.io.filefilter.NotFileFilter $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r1 = new org.apache.commons.io.filefilter.NotFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.NotFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter trueFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter falseFileFilter()
    {
        org.apache.commons.io.filefilter.IOFileFilter $r0;

        $r0 = <org.apache.commons.io.filefilter.FalseFileFilter: org.apache.commons.io.filefilter.IOFileFilter FALSE>;

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FileFilter)
    {
        java.io.FileFilter r0;
        org.apache.commons.io.filefilter.DelegateFileFilter $r1;

        r0 := @parameter0: java.io.FileFilter;

        $r1 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FileFilter)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter asFileFilter(java.io.FilenameFilter)
    {
        java.io.FilenameFilter r0;
        org.apache.commons.io.filefilter.DelegateFileFilter $r1;

        r0 := @parameter0: java.io.FilenameFilter;

        $r1 = new org.apache.commons.io.filefilter.DelegateFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.DelegateFileFilter: void <init>(java.io.FilenameFilter)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long)
    {
        long l0;
        org.apache.commons.io.filefilter.AgeFileFilter $r0;

        l0 := @parameter0: long;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long)>(l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(long, boolean)
    {
        long l0;
        boolean z0;
        org.apache.commons.io.filefilter.AgeFileFilter $r0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(long,boolean)>(l0, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date)
    {
        java.util.Date r0;
        org.apache.commons.io.filefilter.AgeFileFilter $r1;

        r0 := @parameter0: java.util.Date;

        $r1 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.util.Date, boolean)
    {
        java.util.Date r0;
        boolean z0;
        org.apache.commons.io.filefilter.AgeFileFilter $r1;

        r0 := @parameter0: java.util.Date;

        z0 := @parameter1: boolean;

        $r1 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.util.Date,boolean)>(r0, z0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File)
    {
        java.io.File r0;
        org.apache.commons.io.filefilter.AgeFileFilter $r1;

        r0 := @parameter0: java.io.File;

        $r1 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File)>(r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter ageFileFilter(java.io.File, boolean)
    {
        java.io.File r0;
        boolean z0;
        org.apache.commons.io.filefilter.AgeFileFilter $r1;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $r1 = new org.apache.commons.io.filefilter.AgeFileFilter;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AgeFileFilter: void <init>(java.io.File,boolean)>(r0, z0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long)
    {
        long l0;
        org.apache.commons.io.filefilter.SizeFileFilter $r0;

        l0 := @parameter0: long;

        $r0 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long)>(l0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeFileFilter(long, boolean)
    {
        long l0;
        boolean z0;
        org.apache.commons.io.filefilter.SizeFileFilter $r0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $r0 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r0.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, z0);

        return $r0;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter sizeRangeFileFilter(long, long)
    {
        long l0, l1, $l2;
        org.apache.commons.io.filefilter.SizeFileFilter r0, r1, $r2, $r3;
        org.apache.commons.io.filefilter.AndFileFilter $r4;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r2 = new org.apache.commons.io.filefilter.SizeFileFilter;

        specialinvoke $r2.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>(l0, 1);

        r0 = $r2;

        $r3 = new org.apache.commons.io.filefilter.SizeFileFilter;

        $l2 = l1 + 1L;

        specialinvoke $r3.<org.apache.commons.io.filefilter.SizeFileFilter: void <init>(long,boolean)>($l2, 0);

        r1 = $r3;

        $r4 = new org.apache.commons.io.filefilter.AndFileFilter;

        specialinvoke $r4.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, r1);

        return $r4;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r1 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>("CVS");

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r6);

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r7);

        <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter> = $r8;

     label1:
        if r0 != null goto label2;

        $r4 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;

        return $r4;

     label2:
        $r2 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter cvsFilter>;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, $r2);

        return $r3;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        $r1 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;

        if $r1 != null goto label1;

        $r5 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter directoryFileFilter()>();

        $r6 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter nameFileFilter(java.lang.String)>(".svn");

        $r7 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r5, $r6);

        $r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)>($r7);

        <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter> = $r8;

     label1:
        if r0 != null goto label2;

        $r4 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;

        return $r4;

     label2:
        $r2 = <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter svnFilter>;

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter andFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r0, $r2);

        return $r3;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3;
        org.apache.commons.io.filefilter.AndFileFilter $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        return $r3;

     label1:
        $r1 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r2 = <org.apache.commons.io.filefilter.DirectoryFileFilter: org.apache.commons.io.filefilter.IOFileFilter DIRECTORY>;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0);

        return $r1;
    }

    public static org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)
    {
        org.apache.commons.io.filefilter.IOFileFilter r0, $r2, $r3;
        org.apache.commons.io.filefilter.AndFileFilter $r1;

        r0 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        if r0 != null goto label1;

        $r3 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        return $r3;

     label1:
        $r1 = new org.apache.commons.io.filefilter.AndFileFilter;

        $r2 = <org.apache.commons.io.filefilter.FileFileFilter: org.apache.commons.io.filefilter.IOFileFilter FILE>;

        specialinvoke $r1.<org.apache.commons.io.filefilter.AndFileFilter: void <init>(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>($r2, r0);

        return $r1;
    }
}
