final class org.owasp.html.CssGrammar extends java.lang.Object
{

    void <init>()
    {
        org.owasp.html.CssGrammar r0;

        r0 := @this: org.owasp.html.CssGrammar;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void errorRecoveryUntilSemiOrCloseBracket(org.owasp.html.CssTokens$TokenIterator)
    {
        org.owasp.html.CssTokens$TokenIterator r0;
        int i0, $i1, $i2;
        boolean $z0;
        int[] $r1;
        org.owasp.html.CssTokens$TokenType $r2;

        r0 := @parameter0: org.owasp.html.CssTokens$TokenIterator;

        i0 = 0;

     label1:
        $z0 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r1 = <org.owasp.html.CssGrammar$1: int[] $SwitchMap$org$owasp$html$CssTokens$TokenType>;

        $r2 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: org.owasp.html.CssTokens$TokenType type()>();

        $i1 = virtualinvoke $r2.<org.owasp.html.CssTokens$TokenType: int ordinal()>();

        $i2 = $r1[$i1];

        tableswitch($i2)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            default: goto label6;
        };

     label2:
        virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

        return;

     label3:
        i0 = i0 + 1;

        goto label6;

     label4:
        i0 = i0 + -1;

        if i0 > 0 goto label6;

        if i0 == 0 goto label5;

        virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

     label5:
        return;

     label6:
        virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

        goto label1;

     label7:
        return;
    }

    static void parsePropertyGroup(java.lang.String, org.owasp.html.CssGrammar$PropertyHandler)
    {
        java.lang.String r0, r4, $r7, $r8, $r9;
        org.owasp.html.CssGrammar$PropertyHandler r1;
        org.owasp.html.CssTokens r2;
        org.owasp.html.CssTokens$TokenIterator r3;
        boolean $z0, $z1, $z2;
        org.owasp.html.CssTokens$TokenType $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.owasp.html.CssGrammar$PropertyHandler;

        r2 = staticinvoke <org.owasp.html.CssTokens: org.owasp.html.CssTokens lex(java.lang.String)>(r0);

        r3 = virtualinvoke r2.<org.owasp.html.CssTokens: org.owasp.html.CssTokens$TokenIterator iterator()>();

     label1:
        $z0 = virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: boolean hasTokenAfterSpace()>();

        if $z0 == 0 goto label5;

        $r5 = virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: org.owasp.html.CssTokens$TokenType type()>();

        $r6 = <org.owasp.html.CssTokens$TokenType: org.owasp.html.CssTokens$TokenType IDENT>;

        if $r5 == $r6 goto label2;

        staticinvoke <org.owasp.html.CssGrammar: void errorRecoveryUntilSemiOrCloseBracket(org.owasp.html.CssTokens$TokenIterator)>(r3);

        goto label1;

     label2:
        r4 = virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: java.lang.String next()>();

        $z1 = virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: boolean hasTokenAfterSpace()>();

        if $z1 == 0 goto label3;

        $r7 = ":";

        $r8 = virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: java.lang.String token()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z2 != 0 goto label4;

     label3:
        staticinvoke <org.owasp.html.CssGrammar: void errorRecoveryUntilSemiOrCloseBracket(org.owasp.html.CssTokens$TokenIterator)>(r3);

        goto label1;

     label4:
        virtualinvoke r3.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

        $r9 = staticinvoke <org.owasp.html.Strings: java.lang.String toLowerCase(java.lang.String)>(r4);

        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void startProperty(java.lang.String)>($r9);

        staticinvoke <org.owasp.html.CssGrammar: void parsePropertyValue(org.owasp.html.CssTokens$TokenIterator,org.owasp.html.CssGrammar$PropertyHandler)>(r3, r1);

        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void endProperty()>();

        goto label1;

     label5:
        return;
    }

    private static void parsePropertyValue(org.owasp.html.CssTokens$TokenIterator, org.owasp.html.CssGrammar$PropertyHandler)
    {
        org.owasp.html.CssTokens$TokenIterator r0, r4;
        org.owasp.html.CssGrammar$PropertyHandler r1;
        org.owasp.html.CssTokens$TokenType r2;
        java.lang.String r3;
        boolean $z0;
        int[] $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: org.owasp.html.CssTokens$TokenIterator;

        r1 := @parameter1: org.owasp.html.CssGrammar$PropertyHandler;

     label01:
        $z0 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        r2 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: org.owasp.html.CssTokens$TokenType type()>();

        r3 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: java.lang.String token()>();

        $r5 = <org.owasp.html.CssGrammar$1: int[] $SwitchMap$org$owasp$html$CssTokens$TokenType>;

        $i0 = virtualinvoke r2.<org.owasp.html.CssTokens$TokenType: int ordinal()>();

        $i1 = $r5[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label11;
            case 3: goto label11;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label05;
            case 11: goto label07;
            case 12: goto label08;
            case 13: goto label09;
            case 14: goto label09;
            case 15: goto label09;
            case 16: goto label10;
            case 17: goto label10;
            case 18: goto label10;
            case 19: goto label10;
            case 20: goto label10;
            case 21: goto label10;
            case 22: goto label10;
            case 23: goto label10;
            case 24: goto label11;
            case 25: goto label11;
            case 26: goto label11;
            default: goto label12;
        };

     label02:
        virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

        goto label13;

     label03:
        r4 = virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: org.owasp.html.CssTokens$TokenIterator spliceToEnd()>();

        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void startFunction(java.lang.String)>(r3);

        staticinvoke <org.owasp.html.CssGrammar: void parsePropertyValue(org.owasp.html.CssTokens$TokenIterator,org.owasp.html.CssGrammar$PropertyHandler)>(r4, r1);

        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void endFunction(java.lang.String)>(r3);

        goto label01;

     label04:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void identifier(java.lang.String)>(r3);

        goto label12;

     label05:
        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 == 4 goto label06;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 != 7 goto label12;

     label06:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void hash(java.lang.String)>(r3);

        goto label12;

     label07:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void quotedString(java.lang.String)>(r3);

        goto label12;

     label08:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void url(java.lang.String)>(r3);

        goto label12;

     label09:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void quantity(java.lang.String)>(r3);

        goto label12;

     label10:
        goto label12;

     label11:
        interfaceinvoke r1.<org.owasp.html.CssGrammar$PropertyHandler: void punctuation(java.lang.String)>(r3);

     label12:
        virtualinvoke r0.<org.owasp.html.CssTokens$TokenIterator: void advance()>();

        goto label01;

     label13:
        return;
    }

    static java.lang.String cssContent(java.lang.String)
    {
        java.lang.String r0, $r4, $r7;
        int i0, i1, i3, i4, $i5, $i6, $i7, $i9, i11;
        java.lang.StringBuilder r1, $r3, $r8, $r9;
        char c2, $c8, $c10, c12;
        boolean $z0, $z1;
        java.lang.RuntimeException $r10;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i1 = 0;

        r1 = null;

        if i0 < 2 goto label02;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c2 == 34 goto label01;

        if c2 != 39 goto label02;

     label01:
        $i9 = i0 - 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        if c2 != $c10 goto label02;

        i1 = 1;

        i0 = i0 + -1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>(i0);

        r1 = $r9;

     label02:
        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(92, i1);

        i11 = $i5;

        if $i5 < 0 goto label12;

        i3 = i11 + 2;

        if i11 <= i0 goto label03;

        goto label12;

     label03:
        if r1 != null goto label04;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(i0);

        r1 = $r8;

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i1, i11);

        $i6 = i3 - 1;

        i4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        $z0 = staticinvoke <org.owasp.html.CssGrammar: boolean isHex(int)>(i4);

        if $z0 == 0 goto label11;

     label05:
        if i3 >= i0 goto label06;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $z1 = staticinvoke <org.owasp.html.CssGrammar: boolean isHex(int)>($c8);

        if $z1 == 0 goto label06;

        i3 = i3 + 1;

        goto label05;

     label06:
        $i7 = i11 + 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i7, i3);

        i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r7, 16);

     label07:
        goto label09;

     label08:
        $r10 := @caughtexception;

        i4 = 65533;

     label09:
        if i3 >= i0 goto label11;

        c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if c12 == 32 goto label10;

        if c12 != 9 goto label11;

     label10:
        i3 = i3 + 1;

     label11:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(i4);

        i1 = i3;

        goto label02;

     label12:
        if r1 != null goto label13;

        return r0;

     label13:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r0, i1, i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

        catch java.lang.RuntimeException from label06 to label07 with label08;
    }

    private static boolean isHex(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 48 > i0 goto label1;

        if i0 <= 57 goto label3;

     label1:
        if 65 > i0 goto label2;

        if i0 <= 70 goto label3;

     label2:
        if 97 > i0 goto label4;

        if i0 > 102 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }
}
