public class com.android.email.SecurityPolicy extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static com.android.email.SecurityPolicy sInstance;
    private android.content.Context mContext;
    private android.app.admin.DevicePolicyManager mDPM;
    private final android.content.ComponentName mAdminName;
    private com.android.emailcommon.provider.Policy mAggregatePolicy;
    private static final int DEVICE_ADMIN_MESSAGE_ENABLED;
    private static final int DEVICE_ADMIN_MESSAGE_DISABLED;
    private static final int DEVICE_ADMIN_MESSAGE_PASSWORD_CHANGED;
    private static final int DEVICE_ADMIN_MESSAGE_PASSWORD_EXPIRING;
    private static final java.lang.String HAS_PASSWORD_EXPIRATION;
    public static final int INACTIVE_NEED_ACTIVATION;
    public static final int INACTIVE_NEED_CONFIGURATION;
    public static final int INACTIVE_NEED_PASSWORD;
    public static final int INACTIVE_NEED_ENCRYPTION;
    public static final int INACTIVE_PROTOCOL_POLICIES;

    public static synchronized com.android.email.SecurityPolicy getInstance(android.content.Context)
    {
        android.content.Context r0, $r4;
        com.android.email.SecurityPolicy $r1, $r2, $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy sInstance>;

        if $r1 != null goto label1;

        $r3 = new com.android.email.SecurityPolicy;

        $r4 = virtualinvoke r0.<android.content.Context: android.content.Context getApplicationContext()>();

        specialinvoke $r3.<com.android.email.SecurityPolicy: void <init>(android.content.Context)>($r4);

        <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy sInstance> = $r3;

     label1:
        $r2 = <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy sInstance>;

        return $r2;
    }

    private void <init>(android.content.Context)
    {
        com.android.email.SecurityPolicy r0;
        android.content.Context r1, $r2;
        android.content.ComponentName $r3;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<android.content.Context: android.content.Context getApplicationContext()>();

        r0.<com.android.email.SecurityPolicy: android.content.Context mContext> = $r2;

        r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager mDPM> = null;

        $r3 = new android.content.ComponentName;

        specialinvoke $r3.<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>(r1, class "com/android/email/SecurityPolicy$PolicyAdmin");

        r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName> = $r3;

        r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy mAggregatePolicy> = null;

        return;
    }

    void setContext(android.content.Context)
    {
        com.android.email.SecurityPolicy r0;
        android.content.Context r1;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: android.content.Context;

        r0.<com.android.email.SecurityPolicy: android.content.Context mContext> = r1;

        return;
    }

    com.android.emailcommon.provider.Policy computeAggregatePolicy()
    {
        com.android.email.SecurityPolicy r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.android.emailcommon.provider.Policy r1, r3, $r5, $r10, $r11;
        android.database.Cursor r2;
        java.lang.Throwable r4, $r20;
        android.content.Context $r6;
        android.content.ContentResolver $r7;
        java.lang.String[] $r8;
        android.net.Uri $r9;
        java.lang.Object[] $r12, $r16, $r23;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        java.lang.StringBuilder $r13, $r14, $r15, $r18, $r19, $r21;
        java.lang.String $r17, $r22;

        r0 := @this: com.android.email.SecurityPolicy;

        z0 = 0;

        $r5 = new com.android.emailcommon.provider.Policy;

        specialinvoke $r5.<com.android.emailcommon.provider.Policy: void <init>()>();

        r1 = $r5;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = -2147483648;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMode> = -2147483648;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = 2147483647;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = -2147483648;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = 2147483647;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = -2147483648;

        r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = 2147483647;

        r1.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe> = 0;

        r1.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption> = 0;

        r1.<com.android.emailcommon.provider.Policy: boolean mRequireEncryptionExternal> = 0;

        $r6 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r9 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $r8 = <com.android.emailcommon.provider.Policy: java.lang.String[] CONTENT_PROJECTION>;

        r2 = virtualinvoke $r7.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r9, $r8, null, null, null);

        $r10 = new com.android.emailcommon.provider.Policy;

        specialinvoke $r10.<com.android.emailcommon.provider.Policy: void <init>()>();

        r3 = $r10;

     label01:
        $z1 = interfaceinvoke r2.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label08;

        virtualinvoke r3.<com.android.emailcommon.provider.Policy: void restore(android.database.Cursor)>(r2);

        $z4 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z4 == 0 goto label02;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Aggregate from: ");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r22, $r23);

     label02:
        $i9 = r3.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        $i8 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i9, $i8);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = $i13;

        $i11 = r3.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        $i14 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        $i12 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i14);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMode> = $i12;

        $i17 = r3.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        if $i17 <= 0 goto label03;

        $i34 = r3.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        $i33 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        $i30 = staticinvoke <java.lang.Math: int min(int,int)>($i34, $i33);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = $i30;

     label03:
        $i18 = r3.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        if $i18 <= 0 goto label04;

        $i31 = r3.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i26 = r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i32 = staticinvoke <java.lang.Math: int min(int,int)>($i31, $i26);

        r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = $i32;

     label04:
        $i15 = r3.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        if $i15 <= 0 goto label05;

        $i28 = r3.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        $i29 = r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        $i27 = staticinvoke <java.lang.Math: int max(int,int)>($i28, $i29);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = $i27;

     label05:
        $i16 = r3.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        if $i16 <= 0 goto label06;

        $i23 = r3.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $i24 = r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        $i22 = staticinvoke <java.lang.Math: int min(int,int)>($i23, $i24);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = $i22;

     label06:
        $i19 = r3.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i19 <= 0 goto label07;

        $i20 = r3.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        $i21 = r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        $i25 = staticinvoke <java.lang.Math: int max(int,int)>($i20, $i21);

        r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = $i25;

     label07:
        $z5 = r1.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        $z7 = r3.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe>;

        $z6 = $z5 | $z7;

        r1.<com.android.emailcommon.provider.Policy: boolean mRequireRemoteWipe> = $z6;

        $z10 = r1.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        $z11 = r3.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        $z9 = $z10 | $z11;

        r1.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption> = $z9;

        $z13 = r1.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        $z8 = r3.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        $z12 = $z13 | $z8;

        r1.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera> = $z12;

        z0 = 1;

        goto label01;

     label08:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        goto label11;

     label09:
        $r20 := @caughtexception;

        r4 = $r20;

     label10:
        interfaceinvoke r2.<android.database.Cursor: void close()>();

        throw r4;

     label11:
        if z0 == 0 goto label20;

        $i2 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        if $i2 != -2147483648 goto label12;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength> = 0;

     label12:
        $i1 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i1 != -2147483648 goto label13;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMode> = 0;

     label13:
        $i4 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        if $i4 != 2147483647 goto label14;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails> = 0;

     label14:
        $i3 = r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        if $i3 != 2147483647 goto label15;

        r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime> = 0;

     label15:
        $i6 = r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        if $i6 != -2147483648 goto label16;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory> = 0;

     label16:
        $i5 = r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        if $i5 != 2147483647 goto label17;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays> = 0;

     label17:
        $i7 = r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i7 != -2147483648 goto label18;

        r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars> = 0;

     label18:
        $z3 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z3 == 0 goto label19;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calculated Aggregate: ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r17, $r16);

     label19:
        return r1;

     label20:
        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 == 0 goto label21;

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", "Calculated Aggregate: no policy", $r12);

     label21:
        $r11 = <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy NO_POLICY>;

        return $r11;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public synchronized com.android.emailcommon.provider.Policy getAggregatePolicy()
    {
        com.android.email.SecurityPolicy r0;
        com.android.emailcommon.provider.Policy $r1, $r2, $r3;

        r0 := @this: com.android.email.SecurityPolicy;

        $r1 = r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy mAggregatePolicy>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy computeAggregatePolicy()>();

        r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy mAggregatePolicy> = $r3;

     label1:
        $r2 = r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy mAggregatePolicy>;

        return $r2;
    }

    synchronized android.app.admin.DevicePolicyManager getDPM()
    {
        com.android.email.SecurityPolicy r0;
        android.app.admin.DevicePolicyManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.email.SecurityPolicy;

        $r1 = r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager mDPM>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        $r5 = (android.app.admin.DevicePolicyManager) $r4;

        r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager mDPM> = $r5;

     label1:
        $r2 = r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager mDPM>;

        return $r2;
    }

    public synchronized void policiesUpdated()
    {
        com.android.email.SecurityPolicy r0;

        r0 := @this: com.android.email.SecurityPolicy;

        r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy mAggregatePolicy> = null;

        virtualinvoke r0.<com.android.email.SecurityPolicy: void setActivePolicies()>();

        return;
    }

    public void reducePolicies()
    {
        com.android.email.SecurityPolicy r0;
        boolean $z0;
        java.lang.Object[] $r1;

        r0 := @this: com.android.email.SecurityPolicy;

        $z0 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r1 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", "reducePolicies", $r1);

     label1:
        virtualinvoke r0.<com.android.email.SecurityPolicy: void policiesUpdated()>();

        return;
    }

    public boolean isActive(com.android.emailcommon.provider.Policy)
    {
        com.android.email.SecurityPolicy r0;
        com.android.emailcommon.provider.Policy r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1;
        java.lang.String $r8, $r11;
        java.lang.Object[] $r10;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: com.android.emailcommon.provider.Policy;

        i0 = virtualinvoke r0.<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)>(r1);

        $z0 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z0 == 0 goto label6;

        if i0 == 0 goto label6;

        $r3 = new java.lang.StringBuilder;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isActive for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        r2 = $r3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FALSE -> ");

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no_admin ");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config ");

     label2:
        $i4 = i0 & 4;

        if $i4 == 0 goto label3;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password ");

     label3:
        $i3 = i0 & 8;

        if $i3 == 0 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("encryption ");

     label4:
        $i5 = i0 & 16;

        if $i5 == 0 goto label5;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocol ");

     label5:
        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r11, $r10);

     label6:
        if i0 != 0 goto label7;

        $z1 = 1;

        goto label8;

     label7:
        $z1 = 0;

     label8:
        return $z1;
    }

    public int getInactiveReasons(com.android.emailcommon.provider.Policy)
    {
        com.android.email.SecurityPolicy r0;
        com.android.emailcommon.provider.Policy r1, $r3;
        byte b0, $b13, $b16, $b17, $b25;
        android.app.admin.DevicePolicyManager r2, $r6;
        long l1, l2, l3, $l15, $l18, $l20, $l21;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i19, $i22, $i23, $i24, $i26, $i27, i28;
        android.content.ComponentName $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r5;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: com.android.emailcommon.provider.Policy;

        if r1 != null goto label01;

        r1 = virtualinvoke r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy getAggregatePolicy()>();

     label01:
        $r3 = <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy NO_POLICY>;

        if r1 != $r3 goto label02;

        return 0;

     label02:
        b0 = 0;

        r2 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        $z1 = virtualinvoke r0.<com.android.email.SecurityPolicy: boolean isActiveAdmin()>();

        if $z1 == 0 goto label17;

        $i4 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        if $i4 <= 0 goto label03;

        $r13 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i27 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName)>($r13);

        $i26 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        if $i27 >= $i26 goto label03;

        b0 = b0 | 4;

     label03:
        $i5 = r1.<com.android.emailcommon.provider.Policy: int mPasswordMode>;

        if $i5 <= 0 goto label05;

        $r12 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i24 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName)>($r12);

        $i23 = virtualinvoke r1.<com.android.emailcommon.provider.Policy: int getDPManagerPasswordQuality()>();

        if $i24 >= $i23 goto label04;

        b0 = b0 | 4;

     label04:
        $z6 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: boolean isActivePasswordSufficient()>();

        if $z6 != 0 goto label05;

        b0 = b0 | 4;

     label05:
        $i7 = r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        if $i7 <= 0 goto label06;

        $r11 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $l21 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: long getMaximumTimeToLock(android.content.ComponentName)>($r11);

        $i22 = r1.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i19 = $i22 * 1000;

        $l20 = (long) $i19;

        $b25 = $l21 cmp $l20;

        if $b25 <= 0 goto label06;

        b0 = b0 | 2;

     label06:
        $i6 = r1.<com.android.emailcommon.provider.Policy: int mPasswordExpirationDays>;

        if $i6 <= 0 goto label11;

        $r9 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        l1 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: long getPasswordExpirationTimeout(android.content.ComponentName)>($r9);

        $b13 = l1 cmp 0L;

        if $b13 == 0 goto label07;

        $l18 = virtualinvoke r1.<com.android.emailcommon.provider.Policy: long getDPManagerPasswordExpirationTimeout()>();

        $b17 = l1 cmp $l18;

        if $b17 <= 0 goto label08;

     label07:
        b0 = b0 | 4;

     label08:
        $r10 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        l2 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>($r10);

        $l15 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l3 = l2 - $l15;

        $b16 = l3 cmp 0L;

        if $b16 >= 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        z0 = $z5;

        if z0 == 0 goto label11;

        b0 = b0 | 4;

     label11:
        $i9 = r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        if $i9 <= 0 goto label12;

        $r8 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i12 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName)>($r8);

        $i14 = r1.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        if $i12 >= $i14 goto label12;

        b0 = b0 | 2;

     label12:
        $i8 = r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i8 <= 0 goto label13;

        $r7 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i11 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName)>($r7);

        $i10 = r1.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        if $i11 >= $i10 goto label13;

        b0 = b0 | 4;

     label13:
        $z3 = r1.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        if $z3 == 0 goto label14;

        $r6 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        i28 = virtualinvoke $r6.<android.app.admin.DevicePolicyManager: int getStorageEncryptionStatus()>();

        if i28 == 3 goto label14;

        b0 = b0 | 8;

     label14:
        $z2 = r1.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        if $z2 == 0 goto label15;

        $r4 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z4 = virtualinvoke r2.<android.app.admin.DevicePolicyManager: boolean getCameraDisabled(android.content.ComponentName)>($r4);

        if $z4 != 0 goto label15;

        b0 = b0 | 2;

     label15:
        $r5 = r1.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        if $r5 == null goto label16;

        b0 = b0 | 16;

     label16:
        return b0;

     label17:
        return 1;
    }

    public void setActivePolicies()
    {
        com.android.email.SecurityPolicy r0;
        android.app.admin.DevicePolicyManager r1;
        com.android.emailcommon.provider.Policy r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.content.ComponentName $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r19;
        int $i0, $i1, $i2, $i3, $i5, $i7, $i8;
        long $l4, $l6;
        java.lang.StringBuilder $r15, $r16, $r18;
        java.lang.String $r17;
        java.lang.Object[] $r20, $r21;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        r2 = virtualinvoke r0.<com.android.email.SecurityPolicy: com.android.emailcommon.provider.Policy getAggregatePolicy()>();

        $r3 = <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy NO_POLICY>;

        if r2 != $r3 goto label2;

        $z4 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z4 == 0 goto label1;

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", "setActivePolicies: none, remove admin", $r21);

     label1:
        $r19 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void removeActiveAdmin(android.content.ComponentName)>($r19);

        goto label4;

     label2:
        $z0 = virtualinvoke r0.<com.android.email.SecurityPolicy: boolean isActiveAdmin()>();

        if $z0 == 0 goto label4;

        $z1 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z1 == 0 goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setActivePolicies: ");

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r17, $r20);

     label3:
        $r4 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i0 = virtualinvoke r2.<com.android.emailcommon.provider.Policy: int getDPManagerPasswordQuality()>();

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordQuality(android.content.ComponentName,int)>($r4, $i0);

        $r5 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i1 = r2.<com.android.emailcommon.provider.Policy: int mPasswordMinLength>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordMinimumLength(android.content.ComponentName,int)>($r5, $i1);

        $r6 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i2 = r2.<com.android.emailcommon.provider.Policy: int mMaxScreenLockTime>;

        $i3 = $i2 * 1000;

        $l4 = (long) $i3;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setMaximumTimeToLock(android.content.ComponentName,long)>($r6, $l4);

        $r7 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i5 = r2.<com.android.emailcommon.provider.Policy: int mPasswordMaxFails>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>($r7, $i5);

        $r8 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $l6 = virtualinvoke r2.<com.android.emailcommon.provider.Policy: long getDPManagerPasswordExpirationTimeout()>();

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordExpirationTimeout(android.content.ComponentName,long)>($r8, $l6);

        $r9 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i7 = r2.<com.android.emailcommon.provider.Policy: int mPasswordHistory>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordHistoryLength(android.content.ComponentName,int)>($r9, $i7);

        $r11 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordMinimumSymbols(android.content.ComponentName,int)>($r11, 0);

        $r10 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordMinimumNumeric(android.content.ComponentName,int)>($r10, 0);

        $r12 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $i8 = r2.<com.android.emailcommon.provider.Policy: int mPasswordComplexChars>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setPasswordMinimumNonLetter(android.content.ComponentName,int)>($r12, $i8);

        $r13 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z2 = r2.<com.android.emailcommon.provider.Policy: boolean mDontAllowCamera>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void setCameraDisabled(android.content.ComponentName,boolean)>($r13, $z2);

        $r14 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z3 = r2.<com.android.emailcommon.provider.Policy: boolean mRequireEncryption>;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: int setStorageEncryption(android.content.ComponentName,boolean)>($r14, $z3);

     label4:
        return;
    }

    public static void setAccountHoldFlag(android.content.Context, long, boolean)
    {
        android.content.Context r0;
        long l0;
        boolean z0;
        com.android.emailcommon.provider.Account r1;
        com.android.email.NotificationController $r2;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        r1 = staticinvoke <com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)>(r0, l0);

        if r1 == null goto label1;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>(r0, r1, z0);

        if z0 == 0 goto label1;

        $r2 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>(r0);

        virtualinvoke $r2.<com.android.email.NotificationController: void showSecurityNeededNotification(com.android.emailcommon.provider.Account)>(r1);

     label1:
        return;
    }

    public static void setAccountHoldFlag(android.content.Context, com.android.emailcommon.provider.Account, boolean)
    {
        android.content.Context r0;
        com.android.emailcommon.provider.Account r1;
        boolean z0;
        android.content.ContentValues r2, $r3;
        int $i0, $i1, $i2, $i4, $i5;
        java.lang.Integer $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $i4 = r1.<com.android.emailcommon.provider.Account: int mFlags>;

        $i5 = $i4 | 32;

        r1.<com.android.emailcommon.provider.Account: int mFlags> = $i5;

        goto label2;

     label1:
        $i0 = r1.<com.android.emailcommon.provider.Account: int mFlags>;

        $i1 = $i0 & -33;

        r1.<com.android.emailcommon.provider.Account: int mFlags> = $i1;

     label2:
        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        r2 = $r3;

        $i2 = r1.<com.android.emailcommon.provider.Account: int mFlags>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("flags", $r4);

        virtualinvoke r1.<com.android.emailcommon.provider.Account: int update(android.content.Context,android.content.ContentValues)>(r0, r2);

        return;
    }

    public void policiesRequired(long)
    {
        com.android.email.SecurityPolicy r0;
        long l0, $l1, $l3;
        com.android.emailcommon.provider.Account r1;
        com.android.emailcommon.provider.Policy r2;
        android.content.Context $r3, $r4, $r5, $r7, $r8;
        byte $b2;
        boolean $z0;
        java.lang.String $r6, $r14, $r18;
        com.android.email.NotificationController $r9, $r11;
        java.lang.StringBuilder $r10, $r12, $r13, $r15, $r16;
        java.lang.Object[] $r17;

        r0 := @this: com.android.email.SecurityPolicy;

        l0 := @parameter0: long;

        $r3 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        r1 = staticinvoke <com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)>($r3, l0);

        if r1 != null goto label1;

        return;

     label1:
        $l1 = r1.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $l3 = r1.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        r2 = staticinvoke <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long)>($r4, $l3);

        if r2 != null goto label3;

        return;

     label3:
        $z0 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z0 == 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("policiesRequired for ");

        $r14 = r1.<com.android.emailcommon.provider.Account: java.lang.String mDisplayName>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r18, $r17);

     label4:
        $r5 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>($r5, r1, 1);

        $r6 = r2.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        if $r6 != null goto label5;

        $r8 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r11 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r8);

        virtualinvoke $r11.<com.android.email.NotificationController: void showSecurityNeededNotification(com.android.emailcommon.provider.Account)>(r1);

        goto label6;

     label5:
        $r7 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r9 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r7);

        virtualinvoke $r9.<com.android.email.NotificationController: void showSecurityUnsupportedNotification(com.android.emailcommon.provider.Account)>(r1);

     label6:
        return;
    }

    public static void clearAccountPolicy(android.content.Context, com.android.emailcommon.provider.Account)
    {
        android.content.Context r0;
        com.android.emailcommon.provider.Account r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)>(r0, r1, null, null);

        return;
    }

    public static void setAccountPolicy(android.content.Context, com.android.emailcommon.provider.Account, com.android.emailcommon.provider.Policy, java.lang.String)
    {
        android.content.Context r0;
        com.android.emailcommon.provider.Account r1;
        com.android.emailcommon.provider.Policy r2;
        java.lang.String r3, $r16;
        java.util.ArrayList r4, $r6;
        long $l0, $l1, $l3, $l4;
        android.net.Uri $r7, $r8, $r17, $r19, $r22, $r25, $r29;
        android.content.ContentProviderOperation$Builder $r9, $r10, $r12, $r18, $r21, $r23, $r27, $r28, $r30;
        java.lang.Integer $r11;
        android.content.ContentProviderOperation $r13, $r20, $r26, $r33;
        android.content.ContentResolver $r14;
        byte $b2;
        android.content.ContentValues $r24;
        android.os.RemoteException $r31;
        java.lang.IllegalStateException $r32;
        android.content.OperationApplicationException $r34;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        r2 := @parameter2: com.android.emailcommon.provider.Policy;

        r3 := @parameter3: java.lang.String;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r4 = $r6;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.emailcommon.provider.Policy: void normalize()>();

        $r22 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $r21 = staticinvoke <android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)>($r22);

        $r24 = virtualinvoke r2.<com.android.emailcommon.provider.Policy: android.content.ContentValues toContentValues()>();

        $r23 = virtualinvoke $r21.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValues(android.content.ContentValues)>($r24);

        $r26 = virtualinvoke $r23.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

        $r25 = <com.android.emailcommon.provider.Account: android.net.Uri CONTENT_URI>;

        $l4 = r1.<com.android.emailcommon.provider.Account: long mId>;

        $r29 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r25, $l4);

        $r30 = staticinvoke <android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>($r29);

        $r27 = virtualinvoke $r30.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValueBackReference(java.lang.String,int)>("policyKey", 0);

        $r28 = virtualinvoke $r27.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>("securitySyncKey", r3);

        $r33 = virtualinvoke $r28.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r33);

        goto label2;

     label1:
        $r7 = <com.android.emailcommon.provider.Account: android.net.Uri CONTENT_URI>;

        $l0 = r1.<com.android.emailcommon.provider.Account: long mId>;

        $r8 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r7, $l0);

        $r9 = staticinvoke <android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>($r8);

        $r10 = virtualinvoke $r9.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>("securitySyncKey", null);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r12 = virtualinvoke $r10.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation$Builder withValue(java.lang.String,java.lang.Object)>("policyKey", $r11);

        $r13 = virtualinvoke $r12.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

     label2:
        $l1 = r1.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $r17 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $l3 = r1.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        $r19 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r17, $l3);

        $r18 = staticinvoke <android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)>($r19);

        $r20 = virtualinvoke $r18.<android.content.ContentProviderOperation$Builder: android.content.ContentProviderOperation build()>();

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

     label3:
        $r14 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        virtualinvoke $r14.<android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)>($r16, r4);

        virtualinvoke r1.<com.android.emailcommon.provider.Account: void refresh(android.content.Context)>(r0);

        staticinvoke <com.android.email.SecurityPolicy: void syncAccount(android.content.Context,com.android.emailcommon.provider.Account)>(r0, r1);

     label4:
        goto label7;

     label5:
        $r31 := @caughtexception;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception setting account policy.");

        throw $r32;

     label6:
        $r34 := @caughtexception;

     label7:
        return;

        catch android.os.RemoteException from label3 to label4 with label5;
        catch android.content.OperationApplicationException from label3 to label4 with label6;
    }

    private static void syncAccount(android.content.Context, com.android.emailcommon.provider.Account)
    {
        android.content.Context r0;
        com.android.emailcommon.provider.Account r1;
        com.android.email.service.EmailServiceUtils$EmailServiceInfo r2;
        android.accounts.Account r3, $r6;
        android.os.Bundle r4, $r9;
        java.lang.String $r5, $r7, $r8, $r10, $r12, $r13;
        java.lang.Object[] $r11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        $r5 = virtualinvoke r1.<com.android.emailcommon.provider.Account: java.lang.String getProtocol(android.content.Context)>(r0);

        r2 = staticinvoke <com.android.email.service.EmailServiceUtils: com.android.email.service.EmailServiceUtils$EmailServiceInfo getServiceInfo(android.content.Context,java.lang.String)>(r0, $r5);

        $r6 = new android.accounts.Account;

        $r8 = r1.<com.android.emailcommon.provider.Account: java.lang.String mEmailAddress>;

        $r7 = r2.<com.android.email.service.EmailServiceUtils$EmailServiceInfo: java.lang.String accountType>;

        specialinvoke $r6.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>($r8, $r7);

        r3 = $r6;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>(int)>(3);

        r4 = $r9;

        virtualinvoke r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("force", 1);

        virtualinvoke r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("do_not_retry", 1);

        virtualinvoke r4.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("expedited", 1);

        $r10 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        staticinvoke <android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)>(r3, $r10, r4);

        $r11 = newarray (java.lang.Object)[2];

        $r12 = virtualinvoke r1.<com.android.emailcommon.provider.Account: java.lang.String toString()>();

        $r11[0] = $r12;

        $r13 = virtualinvoke r4.<android.os.Bundle: java.lang.String toString()>();

        $r11[1] = $r13;

        staticinvoke <com.android.mail.utils.LogUtils: int i(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", "requestSync SecurityPolicy syncAccount %s, %s", $r11);

        return;
    }

    public void syncAccount(com.android.emailcommon.provider.Account)
    {
        com.android.email.SecurityPolicy r0;
        com.android.emailcommon.provider.Account r1;
        android.content.Context $r2;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: com.android.emailcommon.provider.Account;

        $r2 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        staticinvoke <com.android.email.SecurityPolicy: void syncAccount(android.content.Context,com.android.emailcommon.provider.Account)>($r2, r1);

        return;
    }

    public void setAccountPolicy(long, com.android.emailcommon.provider.Policy, java.lang.String, boolean)
    {
        com.android.email.SecurityPolicy r0;
        long l0, $l1, $l11;
        com.android.emailcommon.provider.Policy r1, r4;
        java.lang.String r2, $r8, $r9, $r11, $r16, $r20, $r22, $r26, $r27, $r33, $r35, $r37, $r42, $r45;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.android.emailcommon.provider.Account r3;
        android.net.Uri r5;
        android.content.Context $r6, $r7, $r17, $r19, $r29, $r41, $r44, $r47, $r48;
        byte $b2;
        java.lang.StringBuilder $r10, $r12, $r13, $r14, $r23, $r24, $r25, $r28, $r32, $r34, $r38, $r39;
        java.lang.Object[] $r15, $r21, $r31, $r36, $r46;
        com.android.email.NotificationController $r18, $r30, $r43;
        android.content.ContentResolver $r40;
        int $i9, $i10;

        r0 := @this: com.android.email.SecurityPolicy;

        l0 := @parameter0: long;

        r1 := @parameter1: com.android.emailcommon.provider.Policy;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r6 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        r3 = staticinvoke <com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)>($r6, l0);

        if r3 != null goto label01;

        return;

     label01:
        r4 = null;

        $l1 = r3.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label02;

        $r48 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $l11 = r3.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        r4 = staticinvoke <com.android.emailcommon.provider.Policy: com.android.emailcommon.provider.Policy restorePolicyWithId(android.content.Context,long)>($r48, $l11);

     label02:
        if r4 == null goto label04;

        if r2 == null goto label04;

        $z8 = r4.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        $z7 = r1.<com.android.emailcommon.provider.Policy: boolean mDontAllowAttachments>;

        if $z8 != $z7 goto label03;

        $i10 = r4.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        $i9 = r1.<com.android.emailcommon.provider.Policy: int mMaxAttachmentSize>;

        if $i10 == $i9 goto label04;

     label03:
        $r47 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        staticinvoke <com.android.emailcommon.provider.Policy: void setAttachmentFlagsForNewPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy)>($r47, r3, r1);

     label04:
        if r4 == null goto label05;

        $z5 = virtualinvoke r4.<com.android.emailcommon.provider.Policy: boolean equals(java.lang.Object)>(r1);

        if $z5 != 0 goto label06;

     label05:
        $z6 = 1;

        goto label07;

     label06:
        $z6 = 0;

     label07:
        z1 = $z6;

        if z1 != 0 goto label08;

        $r42 = r3.<com.android.emailcommon.provider.Account: java.lang.String mSecuritySyncKey>;

        $z4 = staticinvoke <com.android.emailcommon.utility.TextUtilities: boolean stringOrNullEquals(java.lang.String,java.lang.String)>(r2, $r42);

        if $z4 == 0 goto label08;

        $r45 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r46 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r45, "setAccountPolicy; policy unchanged", $r46);

        goto label09;

     label08:
        $r7 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountPolicy(android.content.Context,com.android.emailcommon.provider.Account,com.android.emailcommon.provider.Policy,java.lang.String)>($r7, r3, r1, r2);

        virtualinvoke r0.<com.android.email.SecurityPolicy: void policiesUpdated()>();

     label09:
        z2 = 0;

        $r8 = r1.<com.android.emailcommon.provider.Policy: java.lang.String mProtocolPoliciesUnsupported>;

        if $r8 == null goto label11;

        $r35 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notify policies for ");

        $r33 = r3.<com.android.emailcommon.provider.Account: java.lang.String mDisplayName>;

        $r39 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported.");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r35, $r37, $r36);

        z2 = 1;

        if z0 == 0 goto label10;

        $r44 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r43 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r44);

        virtualinvoke $r43.<com.android.email.NotificationController: void showSecurityUnsupportedNotification(com.android.emailcommon.provider.Account)>(r3);

     label10:
        r5 = staticinvoke <com.android.email.provider.EmailProvider: android.net.Uri uiUri(java.lang.String,long)>("uiaccountdata", l0);

        $r41 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r40 = virtualinvoke $r41.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r40.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r5, null, null);

        goto label14;

     label11:
        $z3 = virtualinvoke r0.<com.android.email.SecurityPolicy: boolean isActive(com.android.emailcommon.provider.Policy)>(r1);

        if $z3 == 0 goto label13;

        if z1 == 0 goto label12;

        $r22 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notify policies for ");

        $r27 = r3.<com.android.emailcommon.provider.Account: java.lang.String mDisplayName>;

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" changed.");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r22, $r26, $r31);

        if z0 == 0 goto label14;

        $r29 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r30 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r29);

        virtualinvoke $r30.<com.android.email.NotificationController: void showSecurityChangedNotification(com.android.emailcommon.provider.Account)>(r3);

        goto label14;

     label12:
        $r20 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r20, "Policy is active and unchanged; do not notify.", $r21);

        goto label14;

     label13:
        z2 = 1;

        $r9 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notify policies for ");

        $r11 = r3.<com.android.emailcommon.provider.Account: java.lang.String mDisplayName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are not being enforced.");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r9, $r16, $r15);

        if z0 == 0 goto label14;

        $r19 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r18 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r19);

        virtualinvoke $r18.<com.android.email.NotificationController: void showSecurityNeededNotification(com.android.emailcommon.provider.Account)>(r3);

     label14:
        $r17 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>($r17, r3, z2);

        return;
    }

    public void clearNotification()
    {
        com.android.email.SecurityPolicy r0;
        android.content.Context $r1;
        com.android.email.NotificationController $r2;

        r0 := @this: com.android.email.SecurityPolicy;

        $r1 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r2 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r1);

        virtualinvoke $r2.<com.android.email.NotificationController: void cancelSecurityNeededNotification()>();

        return;
    }

    public void remoteWipe()
    {
        com.android.email.SecurityPolicy r0;
        android.app.admin.DevicePolicyManager r1;
        android.content.ComponentName $r2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.String $r4;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        $r2 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z0 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>($r2);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.app.admin.DevicePolicyManager: void wipeData(int)>(1);

        goto label2;

     label1:
        $r4 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r4, "Could not remote wipe because not device admin.", $r3);

     label2:
        return;
    }

    public boolean isActiveAdmin()
    {
        com.android.email.SecurityPolicy r0;
        android.app.admin.DevicePolicyManager r1;
        android.content.ComponentName $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        $r2 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z0 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean isAdminActive(android.content.ComponentName)>($r2);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z1 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>($r3, 6);

        if $z1 == 0 goto label1;

        $r4 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z2 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>($r4, 7);

        if $z2 == 0 goto label1;

        $r5 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        $z3 = virtualinvoke r1.<android.app.admin.DevicePolicyManager: boolean hasGrantedPolicy(android.content.ComponentName,int)>($r5, 8);

        if $z3 == 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public android.content.ComponentName getAdminComponent()
    {
        com.android.email.SecurityPolicy r0;
        android.content.ComponentName $r1;

        r0 := @this: com.android.email.SecurityPolicy;

        $r1 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        return $r1;
    }

    void deleteSecuredAccounts(android.content.Context)
    {
        com.android.email.SecurityPolicy r0;
        android.content.Context r1;
        android.content.ContentResolver r2;
        android.database.Cursor r3;
        long l0;
        android.net.Uri r4, $r7;
        java.lang.Throwable r5, $r14;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;
        int $i1;
        java.lang.Object[] $r12;
        java.lang.String $r13;
        boolean $z0;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = <com.android.emailcommon.provider.Account: android.net.Uri CONTENT_URI>;

        $r6 = <com.android.emailcommon.provider.EmailContent: java.lang.String[] ID_PROJECTION>;

        r3 = virtualinvoke r2.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r7, $r6, "policyKey IS NOT NULL AND policyKey!=0", null, null);

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Email administration disabled; deleting ");

        $i1 = interfaceinvoke r3.<android.database.Cursor: int getCount()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" secured account(s)");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("Email/SecurityPolicy", $r13, $r12);

     label2:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r3.<android.database.Cursor: long getLong(int)>(0);

        r4 = staticinvoke <com.android.email.provider.EmailProvider: android.net.Uri uiUri(java.lang.String,long)>("uiaccount", l0);

        virtualinvoke r2.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r4, null, null);

        goto label2;

     label3:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        goto label6;

     label4:
        $r14 := @caughtexception;

        r5 = $r14;

     label5:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        throw r5;

     label6:
        virtualinvoke r0.<com.android.email.SecurityPolicy: void policiesUpdated()>();

        staticinvoke <com.android.email.provider.AccountReconciler: void reconcileAccounts(android.content.Context)>(r1);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void onAdminEnabled(boolean)
    {
        com.android.email.SecurityPolicy r0;
        boolean z0;
        android.content.Context $r1;

        r0 := @this: com.android.email.SecurityPolicy;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $r1 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        virtualinvoke r0.<com.android.email.SecurityPolicy: void deleteSecuredAccounts(android.content.Context)>($r1);

     label1:
        return;
    }

    private void onPasswordExpiring(android.content.Context)
    {
        com.android.email.SecurityPolicy r0;
        android.content.Context r1, $r5, $r7;
        long l0, l1, l2, $l4;
        boolean z0, z1, $z2;
        byte $b3, $b5;
        android.app.admin.DevicePolicyManager $r2;
        android.content.ComponentName $r3;
        com.android.email.NotificationController $r4, $r6;

        r0 := @this: com.android.email.SecurityPolicy;

        r1 := @parameter0: android.content.Context;

        l0 = staticinvoke <com.android.email.SecurityPolicy: long findShortestExpiration(android.content.Context)>(r1);

        $b3 = l0 cmp -1L;

        if $b3 != 0 goto label1;

        return;

     label1:
        $r2 = virtualinvoke r0.<com.android.email.SecurityPolicy: android.app.admin.DevicePolicyManager getDPM()>();

        $r3 = r0.<com.android.email.SecurityPolicy: android.content.ComponentName mAdminName>;

        l1 = virtualinvoke $r2.<android.app.admin.DevicePolicyManager: long getPasswordExpiration(android.content.ComponentName)>($r3);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        l2 = l1 - $l4;

        $b5 = l2 cmp 0L;

        if $b5 >= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 != 0 goto label4;

        $r7 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r6 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r7);

        virtualinvoke $r6.<com.android.email.NotificationController: void showPasswordExpiringNotificationSynchronous(long)>(l0);

        goto label5;

     label4:
        z1 = staticinvoke <com.android.email.SecurityPolicy: boolean wipeExpiredAccounts(android.content.Context)>(r1);

        if z1 == 0 goto label5;

        $r5 = r0.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        $r4 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>($r5);

        virtualinvoke $r4.<com.android.email.NotificationController: void showPasswordExpiredNotificationSynchronous(long)>(l0);

     label5:
        return;
    }

    static long findShortestExpiration(android.content.Context)
    {
        android.content.Context r0;
        long l0, $l2;
        android.net.Uri $r1;
        java.lang.String[] $r2;
        java.lang.Long $r3, $r4;
        byte $b1;

        r0 := @parameter0: android.content.Context;

        $r1 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $r2 = <com.android.emailcommon.provider.Policy: java.lang.String[] ID_PROJECTION>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(-1L);

        $r4 = staticinvoke <com.android.emailcommon.utility.Utility: java.lang.Long getFirstRowLong(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,int,java.lang.Long)>(r0, $r1, $r2, "passwordExpirationDays>0", null, "passwordExpirationDays ASC", 0, $r3);

        l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return -1L;

     label1:
        $l2 = staticinvoke <com.android.emailcommon.provider.Policy: long getAccountIdWithPolicyKey(android.content.Context,long)>(r0, l0);

        return $l2;
    }

    static boolean wipeExpiredAccounts(android.content.Context)
    {
        android.content.Context r0;
        boolean z0, $z1;
        android.database.Cursor r1;
        long l0, l1;
        com.android.emailcommon.provider.Account r2;
        android.net.Uri r3, $r7;
        java.lang.Throwable r4, $r9;
        android.content.ContentResolver $r5, $r8;
        java.lang.String[] $r6;
        byte $b2;

        r0 := @parameter0: android.content.Context;

        z0 = 0;

        $r5 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = <com.android.emailcommon.provider.Policy: android.net.Uri CONTENT_URI>;

        $r6 = <com.android.emailcommon.provider.Policy: java.lang.String[] ID_PROJECTION>;

        r1 = virtualinvoke $r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r7, $r6, "passwordExpirationDays>0", null, null);

        if r1 != null goto label1;

        return 0;

     label1:
        $z1 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label4;

        l0 = interfaceinvoke r1.<android.database.Cursor: long getLong(int)>(0);

        l1 = staticinvoke <com.android.emailcommon.provider.Policy: long getAccountIdWithPolicyKey(android.content.Context,long)>(r0, l0);

        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label2;

        goto label1;

     label2:
        r2 = staticinvoke <com.android.emailcommon.provider.Account: com.android.emailcommon.provider.Account restoreAccountWithId(android.content.Context,long)>(r0, l1);

        if r2 == null goto label3;

        staticinvoke <com.android.email.SecurityPolicy: void setAccountHoldFlag(android.content.Context,com.android.emailcommon.provider.Account,boolean)>(r0, r2, 1);

        r3 = staticinvoke <com.android.email.provider.EmailProvider: android.net.Uri uiUri(java.lang.String,long)>("uiaccountdata", l1);

        $r8 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r8.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r3, null, null);

        z0 = 1;

     label3:
        goto label1;

     label4:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

     label6:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw r4;

     label7:
        return z0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void onDeviceAdminReceiverMessage(android.content.Context, int)
    {
        android.content.Context r0, $r2;
        int i0;
        com.android.email.SecurityPolicy r1;
        com.android.email.NotificationController $r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 = staticinvoke <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)>(r0);

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r1.<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)>(1);

        goto label5;

     label2:
        virtualinvoke r1.<com.android.email.SecurityPolicy: void onAdminEnabled(boolean)>(0);

        goto label5;

     label3:
        staticinvoke <com.android.emailcommon.provider.Account: void clearSecurityHoldOnAllAccounts(android.content.Context)>(r0);

        $r3 = staticinvoke <com.android.email.NotificationController: com.android.email.NotificationController getInstance(android.content.Context)>(r0);

        virtualinvoke $r3.<com.android.email.NotificationController: void cancelPasswordExpirationNotifications()>();

        goto label5;

     label4:
        $r2 = r1.<com.android.email.SecurityPolicy: android.content.Context mContext>;

        specialinvoke r1.<com.android.email.SecurityPolicy: void onPasswordExpiring(android.content.Context)>($r2);

     label5:
        return;
    }

    static void <clinit>()
    {
        <com.android.email.SecurityPolicy: int INACTIVE_PROTOCOL_POLICIES> = 16;

        <com.android.email.SecurityPolicy: int INACTIVE_NEED_ENCRYPTION> = 8;

        <com.android.email.SecurityPolicy: int INACTIVE_NEED_PASSWORD> = 4;

        <com.android.email.SecurityPolicy: int INACTIVE_NEED_CONFIGURATION> = 2;

        <com.android.email.SecurityPolicy: int INACTIVE_NEED_ACTIVATION> = 1;

        <com.android.email.SecurityPolicy: java.lang.String HAS_PASSWORD_EXPIRATION> = "passwordExpirationDays>0";

        <com.android.email.SecurityPolicy: int DEVICE_ADMIN_MESSAGE_PASSWORD_EXPIRING> = 4;

        <com.android.email.SecurityPolicy: int DEVICE_ADMIN_MESSAGE_PASSWORD_CHANGED> = 3;

        <com.android.email.SecurityPolicy: int DEVICE_ADMIN_MESSAGE_DISABLED> = 2;

        <com.android.email.SecurityPolicy: int DEVICE_ADMIN_MESSAGE_ENABLED> = 1;

        <com.android.email.SecurityPolicy: java.lang.String TAG> = "Email/SecurityPolicy";

        <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy sInstance> = null;

        return;
    }
}
