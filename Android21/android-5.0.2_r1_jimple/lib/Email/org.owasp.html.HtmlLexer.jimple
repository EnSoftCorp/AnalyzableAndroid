final class org.owasp.html.HtmlLexer extends org.owasp.html.AbstractTokenStream
{
    private final java.lang.String input;
    private final org.owasp.html.HtmlInputSplitter splitter;
    private org.owasp.html.HtmlLexer$State state;
    private final java.util.LinkedList lookahead;
    private static final java.util.Set VALUELESS_ATTRIB_NAMES;

    public void <init>(java.lang.String)
    {
        org.owasp.html.HtmlLexer r0;
        java.lang.String r1;
        org.owasp.html.HtmlLexer$State $r2;
        java.util.LinkedList $r3;
        org.owasp.html.HtmlInputSplitter $r4;

        r0 := @this: org.owasp.html.HtmlLexer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.owasp.html.AbstractTokenStream: void <init>()>();

        $r2 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State OUTSIDE_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r2;

        $r3 = staticinvoke <com.google.common.collect.Lists: java.util.LinkedList newLinkedList()>();

        r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead> = $r3;

        r0.<org.owasp.html.HtmlLexer: java.lang.String input> = r1;

        $r4 = new org.owasp.html.HtmlInputSplitter;

        specialinvoke $r4.<org.owasp.html.HtmlInputSplitter: void <init>(java.lang.String)>(r1);

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlInputSplitter splitter> = $r4;

        return;
    }

    static java.lang.String canonicalName(java.lang.String)
    {
        java.lang.String r0, $r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r1 = r0;

        goto label2;

     label1:
        $r1 = staticinvoke <org.owasp.html.Strings: java.lang.String toLowerCase(java.lang.String)>(r0);

     label2:
        return $r1;
    }

    protected org.owasp.html.HtmlToken produce()
    {
        org.owasp.html.HtmlLexer r0;
        org.owasp.html.HtmlToken r1, $r5, $r14, $r33;
        org.owasp.html.HtmlTokenType $r2, $r9, $r10, $r12, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29, $r30, $r34, $r36, $r38;
        int[] $r3, $r15;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.owasp.html.HtmlLexer$State $r4, $r6, $r7, $r8, $r11, $r13, $r24, $r31, $r35, $r39;
        boolean $z0, $z1;
        java.lang.String $r32, $r37;

        r0 := @this: org.owasp.html.HtmlLexer;

        r1 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken readToken()>();

        if r1 != null goto label01;

        return null;

     label01:
        $r3 = <org.owasp.html.HtmlLexer$1: int[] $SwitchMap$org$owasp$html$HtmlTokenType>;

        $r2 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $i0 = virtualinvoke $r2.<org.owasp.html.HtmlTokenType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label05;
            default: goto label06;
        };

     label02:
        $r4 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State IN_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r4;

        goto label16;

     label03:
        $r7 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state>;

        $r6 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State SAW_EQ>;

        if $r7 != $r6 goto label04;

        $r10 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TAGEND>;

        $r9 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r10 != $r9 goto label04;

        specialinvoke r0.<org.owasp.html.HtmlLexer: void pushbackToken(org.owasp.html.HtmlToken)>(r1);

        $r11 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State IN_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r11;

        $i2 = r1.<org.owasp.html.HtmlToken: int start>;

        $i3 = r1.<org.owasp.html.HtmlToken: int start>;

        $r12 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType ATTRVALUE>;

        $r14 = staticinvoke <org.owasp.html.HtmlToken: org.owasp.html.HtmlToken instance(int,int,org.owasp.html.HtmlTokenType)>($i2, $i3, $r12);

        return $r14;

     label04:
        $r8 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State OUTSIDE_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r8;

        goto label16;

     label05:
        $r5 = virtualinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken produce()>();

        return $r5;

     label06:
        $r15 = <org.owasp.html.HtmlLexer$1: int[] $SwitchMap$org$owasp$html$HtmlLexer$State>;

        $r13 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state>;

        $i4 = virtualinvoke $r13.<org.owasp.html.HtmlLexer$State: int ordinal()>();

        $i5 = $r15[$i4];

        tableswitch($i5)
        {
            case 1: goto label07;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label13;
            default: goto label16;
        };

     label07:
        $r17 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r16 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r17 == $r16 goto label08;

        $r18 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType UNESCAPED>;

        $r19 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r18 != $r19 goto label16;

     label08:
        r1 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken collapseSubsequent(org.owasp.html.HtmlToken)>(r1);

        goto label16;

     label09:
        $r38 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r34 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r38 != $r34 goto label16;

        $r37 = r0.<org.owasp.html.HtmlLexer: java.lang.String input>;

        $z1 = virtualinvoke r1.<org.owasp.html.HtmlToken: boolean tokenInContextMatches(java.lang.String,java.lang.String)>($r37, "=");

        if $z1 != 0 goto label16;

        $r36 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType ATTRNAME>;

        r1 = staticinvoke <org.owasp.html.HtmlInputSplitter: org.owasp.html.HtmlToken reclassify(org.owasp.html.HtmlToken,org.owasp.html.HtmlTokenType)>(r1, $r36);

        $r39 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State SAW_NAME>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r39;

        goto label16;

     label10:
        $r27 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r26 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r27 != $r26 goto label12;

        $r32 = r0.<org.owasp.html.HtmlLexer: java.lang.String input>;

        $z0 = virtualinvoke r1.<org.owasp.html.HtmlToken: boolean tokenInContextMatches(java.lang.String,java.lang.String)>($r32, "=");

        if $z0 == 0 goto label11;

        $r35 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State SAW_EQ>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r35;

        $r33 = virtualinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken produce()>();

        return $r33;

     label11:
        $r30 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType ATTRNAME>;

        r1 = staticinvoke <org.owasp.html.HtmlInputSplitter: org.owasp.html.HtmlToken reclassify(org.owasp.html.HtmlToken,org.owasp.html.HtmlTokenType)>(r1, $r30);

        goto label16;

     label12:
        $r31 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State IN_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r31;

        goto label16;

     label13:
        $r20 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r21 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r20 == $r21 goto label14;

        $r29 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType QSTRING>;

        $r28 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r29 != $r28 goto label16;

     label14:
        $r22 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r23 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r22 != $r23 goto label15;

        r1 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken collapseAttributeName(org.owasp.html.HtmlToken)>(r1);

     label15:
        $r25 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType ATTRVALUE>;

        r1 = staticinvoke <org.owasp.html.HtmlInputSplitter: org.owasp.html.HtmlToken reclassify(org.owasp.html.HtmlToken,org.owasp.html.HtmlTokenType)>(r1, $r25);

        $r24 = <org.owasp.html.HtmlLexer$State: org.owasp.html.HtmlLexer$State IN_TAG>;

        r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlLexer$State state> = $r24;

     label16:
        return r1;
    }

    private org.owasp.html.HtmlToken collapseSubsequent(org.owasp.html.HtmlToken)
    {
        org.owasp.html.HtmlLexer r0;
        org.owasp.html.HtmlToken r1, r2, r3, $r4;
        org.owasp.html.HtmlTokenType $r5, $r6;

        r0 := @this: org.owasp.html.HtmlLexer;

        r1 := @parameter0: org.owasp.html.HtmlToken;

        r2 = r1;

     label1:
        $r4 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken peekToken(int)>(0);

        r3 = $r4;

        if $r4 == null goto label2;

        $r6 = r3.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r5 = r1.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        if $r6 != $r5 goto label2;

        r2 = staticinvoke <org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken join(org.owasp.html.HtmlToken,org.owasp.html.HtmlToken)>(r2, r3);

        specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken readToken()>();

        goto label1;

     label2:
        return r2;
    }

    private org.owasp.html.HtmlToken collapseAttributeName(org.owasp.html.HtmlToken)
    {
        org.owasp.html.HtmlLexer r0;
        org.owasp.html.HtmlToken r1, r2, r3, r4, $r5, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        org.owasp.html.HtmlTokenType $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r18, $r19;
        java.lang.String $r15, $r16, $r17;
        boolean $z0, $z1;

        r0 := @this: org.owasp.html.HtmlLexer;

        r1 := @parameter0: org.owasp.html.HtmlToken;

        i0 = 0;

     label01:
        $r5 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken peekToken(int)>(i0);

        r2 = $r5;

        if $r5 == null goto label09;

        $r10 = r2.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r9 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType IGNORABLE>;

        if $r10 != $r9 goto label07;

        $i2 = i0 + 1;

        r3 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken peekToken(int)>($i2);

        if r3 != null goto label02;

        goto label09;

     label02:
        $r14 = r3.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r13 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        if $r14 == $r13 goto label03;

        goto label09;

     label03:
        $r15 = r0.<org.owasp.html.HtmlLexer: java.lang.String input>;

        $i4 = r3.<org.owasp.html.HtmlToken: int start>;

        $i3 = r3.<org.owasp.html.HtmlToken: int end>;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3);

        $z0 = staticinvoke <org.owasp.html.HtmlLexer: boolean isValuelessAttribute(java.lang.String)>($r16);

        if $z0 == 0 goto label04;

        goto label09;

     label04:
        $i5 = i0 + 2;

        r4 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken peekToken(int)>($i5);

        if r4 == null goto label05;

        $r18 = r4.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r19 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType IGNORABLE>;

        if $r18 != $r19 goto label05;

        $i6 = i0 + 3;

        r4 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken peekToken(int)>($i6);

     label05:
        if r4 == null goto label09;

        $r17 = r0.<org.owasp.html.HtmlLexer: java.lang.String input>;

        $z1 = virtualinvoke r4.<org.owasp.html.HtmlToken: boolean tokenInContextMatches(java.lang.String,java.lang.String)>($r17, "=");

        if $z1 == 0 goto label06;

        goto label09;

     label06:
        goto label08;

     label07:
        $r12 = r2.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r11 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        if $r12 == $r11 goto label08;

        goto label09;

     label08:
        i0 = i0 + 1;

        goto label01;

     label09:
        if i0 != 0 goto label10;

        return r1;

     label10:
        i7 = r1.<org.owasp.html.HtmlToken: int end>;

     label11:
        $r6 = specialinvoke r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlToken readToken()>();

        i8 = $r6.<org.owasp.html.HtmlToken: int end>;

        i0 = i0 + -1;

        if i0 > 0 goto label11;

        $i1 = r1.<org.owasp.html.HtmlToken: int start>;

        $r7 = <org.owasp.html.HtmlTokenType: org.owasp.html.HtmlTokenType TEXT>;

        $r8 = staticinvoke <org.owasp.html.HtmlToken: org.owasp.html.HtmlToken instance(int,int,org.owasp.html.HtmlTokenType)>($i1, i8, $r7);

        return $r8;
    }

    private static org.owasp.html.HtmlToken join(org.owasp.html.HtmlToken, org.owasp.html.HtmlToken)
    {
        org.owasp.html.HtmlToken r0, r1, $r3;
        org.owasp.html.HtmlTokenType $r2;
        int $i0, $i1;

        r0 := @parameter0: org.owasp.html.HtmlToken;

        r1 := @parameter1: org.owasp.html.HtmlToken;

        $i1 = r0.<org.owasp.html.HtmlToken: int start>;

        $i0 = r1.<org.owasp.html.HtmlToken: int end>;

        $r2 = r0.<org.owasp.html.HtmlToken: org.owasp.html.HtmlTokenType type>;

        $r3 = staticinvoke <org.owasp.html.HtmlToken: org.owasp.html.HtmlToken instance(int,int,org.owasp.html.HtmlTokenType)>($i1, $i0, $r2);

        return $r3;
    }

    private org.owasp.html.HtmlToken readToken()
    {
        org.owasp.html.HtmlLexer r0;
        java.util.LinkedList $r1, $r5;
        boolean $z0, $z1;
        org.owasp.html.HtmlInputSplitter $r2, $r3;
        org.owasp.html.HtmlToken $r4, $r7;
        java.lang.Object $r6;

        r0 := @this: org.owasp.html.HtmlLexer;

        $r1 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $z0 = virtualinvoke $r1.<java.util.LinkedList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $r6 = virtualinvoke $r5.<java.util.LinkedList: java.lang.Object remove()>();

        $r7 = (org.owasp.html.HtmlToken) $r6;

        return $r7;

     label1:
        $r2 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlInputSplitter splitter>;

        $z1 = virtualinvoke $r2.<org.owasp.html.HtmlInputSplitter: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlInputSplitter splitter>;

        $r4 = virtualinvoke $r3.<org.owasp.html.HtmlInputSplitter: org.owasp.html.HtmlToken next()>();

        return $r4;

     label2:
        return null;
    }

    private org.owasp.html.HtmlToken peekToken(int)
    {
        org.owasp.html.HtmlLexer r0;
        int i0, $i1, $i2;
        java.util.LinkedList $r1, $r2, $r3, $r8;
        java.lang.Object $r4;
        org.owasp.html.HtmlToken $r5, $r9;
        org.owasp.html.HtmlInputSplitter $r6, $r7;
        boolean $z0;

        r0 := @this: org.owasp.html.HtmlLexer;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $i1 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i1 > i0 goto label2;

        $r6 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlInputSplitter splitter>;

        $z0 = virtualinvoke $r6.<org.owasp.html.HtmlInputSplitter: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $r7 = r0.<org.owasp.html.HtmlLexer: org.owasp.html.HtmlInputSplitter splitter>;

        $r9 = virtualinvoke $r7.<org.owasp.html.HtmlInputSplitter: org.owasp.html.HtmlToken next()>();

        virtualinvoke $r8.<java.util.LinkedList: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        $r2 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $i2 = virtualinvoke $r2.<java.util.LinkedList: int size()>();

        if $i2 <= i0 goto label3;

        $r3 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object get(int)>(i0);

        $r5 = (org.owasp.html.HtmlToken) $r4;

        goto label4;

     label3:
        $r5 = null;

     label4:
        return $r5;
    }

    private void pushbackToken(org.owasp.html.HtmlToken)
    {
        org.owasp.html.HtmlLexer r0;
        org.owasp.html.HtmlToken r1;
        java.util.LinkedList $r2;

        r0 := @this: org.owasp.html.HtmlLexer;

        r1 := @parameter0: org.owasp.html.HtmlToken;

        $r2 = r0.<org.owasp.html.HtmlLexer: java.util.LinkedList lookahead>;

        virtualinvoke $r2.<java.util.LinkedList: void addFirst(java.lang.Object)>(r1);

        return;
    }

    private static boolean isValuelessAttribute(java.lang.String)
    {
        java.lang.String r0, $r2;
        boolean z0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.owasp.html.HtmlLexer: java.util.Set VALUELESS_ATTRIB_NAMES>;

        $r2 = staticinvoke <org.owasp.html.Strings: java.lang.String toLowerCase(java.lang.String)>(r0);

        z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        return z0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "multiple";

        $r0[1] = "nohref";

        $r0[2] = "noresize";

        $r0[3] = "noshade";

        $r0[4] = "nowrap";

        $r0[5] = "readonly";

        $r0[6] = "selected";

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("checked", "compact", "declare", "defer", "disabled", "ismap", $r0);

        <org.owasp.html.HtmlLexer: java.util.Set VALUELESS_ATTRIB_NAMES> = $r1;

        return;
    }
}
