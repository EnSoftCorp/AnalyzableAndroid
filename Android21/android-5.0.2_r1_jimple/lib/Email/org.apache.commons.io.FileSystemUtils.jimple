public class org.apache.commons.io.FileSystemUtils extends java.lang.Object
{
    private static final org.apache.commons.io.FileSystemUtils INSTANCE;
    private static final int INIT_PROBLEM;
    private static final int OTHER;
    private static final int WINDOWS;
    private static final int UNIX;
    private static final int POSIX_UNIX;
    private static final int OS;

    public void <init>()
    {
        org.apache.commons.io.FileSystemUtils r0;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long freeSpace(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        int $i0;
        org.apache.commons.io.FileSystemUtils $r1;
        long $l1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i0 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>(r0, $i0, 0);

        return $l1;
    }

    public static long freeSpaceKb(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        int $i0;
        org.apache.commons.io.FileSystemUtils $r1;
        long $l1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE>;

        $i0 = <org.apache.commons.io.FileSystemUtils: int OS>;

        $l1 = virtualinvoke $r1.<org.apache.commons.io.FileSystemUtils: long freeSpaceOS(java.lang.String,int,boolean)>(r0, $i0, 1);

        return $l1;
    }

    long freeSpaceOS(java.lang.String, int, boolean) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String r1;
        int i0;
        boolean z0;
        long $l1, $l2, $l3, $l4;
        java.lang.IllegalStateException $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r4;

     label1:
        tableswitch(i0)
        {
            case 0: goto label7;
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label6;
            default: goto label8;
        };

     label2:
        if z0 == 0 goto label3;

        $l2 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>(r1);

        $l1 = $l2 / 1024L;

        goto label4;

     label3:
        $l1 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceWindows(java.lang.String)>(r1);

     label4:
        return $l1;

     label5:
        $l4 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>(r1, z0, 0);

        return $l4;

     label6:
        $l3 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long freeSpaceUnix(java.lang.String,boolean,boolean)>(r1, z0, 1);

        return $l3;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unsupported operating system");

        throw $r2;

     label8:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Exception caught when determining operating system");

        throw $r3;
    }

    long freeSpaceWindows(java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String r1, r4, $r9, $r14, r17;
        java.lang.String[] r2, $r5;
        java.util.List r3;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r12, $r13, $r15;
        java.io.IOException $r11;
        java.lang.Object $r16;
        char $c4;
        long $l5;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String;

        r17 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r1);

        $i1 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i1 <= 2 goto label1;

        $c4 = virtualinvoke r17.<java.lang.String: char charAt(int)>(1);

        if $c4 != 58 goto label1;

        r17 = virtualinvoke r17.<java.lang.String: java.lang.String substring(int,int)>(0, 2);

     label1:
        $r5 = newarray (java.lang.String)[3];

        $r5[0] = "cmd.exe";

        $r5[1] = "/C";

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dir /-c ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[2] = $r9;

        r2 = $r5;

        r3 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>(r2, 2147483647);

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        i0 = $i2 - 1;

     label2:
        if i0 < 0 goto label4;

        $r16 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        r4 = (java.lang.String) $r16;

        $i3 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i3 <= 0 goto label3;

        $l5 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseDir(java.lang.String,java.lang.String)>(r4, r17);

        return $l5;

     label3:
        i0 = i0 + -1;

        goto label2;

     label4:
        $r11 = new java.io.IOException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return any info for path \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r11;
    }

    long parseDir(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String r1, r2, $r4, $r5, $r11;
        int i0, i1, i2, i4, $i5, $i6, $i9;
        char c3, $c8, $c10, c11;
        java.lang.StringBuffer $r3, r13;
        long $l7;
        java.lang.StringBuilder $r7, $r9, $r10, $r12;
        java.io.IOException $r8;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 = 0;

        i1 = 0;

        $i5 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = $i5 - 1;

     label01:
        if i2 < 0 goto label03;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c3);

        if $z1 == 0 goto label02;

        i1 = i2 + 1;

        goto label03;

     label02:
        i2 = i2 + -1;

        goto label01;

     label03:
        if i2 < 0 goto label05;

        c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c11);

        if $z0 != 0 goto label04;

        if c11 == 44 goto label04;

        if c11 == 46 goto label04;

        i0 = i2 + 1;

        goto label05;

     label04:
        i2 = i2 + -1;

        goto label03;

     label05:
        if i2 >= 0 goto label06;

        $r8 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'dir /-c\' did not return valid info for path \'");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label06:
        $r3 = new java.lang.StringBuffer;

        $r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        r13 = $r3;

        i4 = 0;

     label07:
        $i6 = virtualinvoke r13.<java.lang.StringBuffer: int length()>();

        if i4 >= $i6 goto label10;

        $c8 = virtualinvoke r13.<java.lang.StringBuffer: char charAt(int)>(i4);

        if $c8 == 44 goto label08;

        $c10 = virtualinvoke r13.<java.lang.StringBuffer: char charAt(int)>(i4);

        if $c10 != 46 goto label09;

     label08:
        $i9 = i4;

        i4 = i4 + -1;

        virtualinvoke r13.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i9);

     label09:
        i4 = i4 + 1;

        goto label07;

     label10:
        $r5 = virtualinvoke r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $l7 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>($r5, r2);

        return $l7;
    }

    long freeSpaceUnix(java.lang.String, boolean, boolean) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String r1, r2, r5, r7, $r19, $r30, r36, r37;
        boolean z0, z1;
        java.lang.String[] r3, $r8;
        java.util.List r4;
        java.util.StringTokenizer r6, $r9, $r23;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        java.lang.Object $r10, $r22;
        long $l4;
        java.io.IOException $r14, $r20;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, $r33, $r35;
        java.lang.IllegalArgumentException $r34;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r34 = new java.lang.IllegalArgumentException;

        specialinvoke $r34.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Path must not be empty");

        throw $r34;

     label1:
        r36 = staticinvoke <org.apache.commons.io.FilenameUtils: java.lang.String normalize(java.lang.String)>(r1);

        r2 = "-";

        if z0 == 0 goto label2;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("k");

        r2 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        if z1 == 0 goto label3;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("P");

        r2 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= 1 goto label4;

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "df";

        $r8[1] = r2;

        $r8[2] = r36;

        goto label5;

     label4:
        $r8 = newarray (java.lang.String)[2];

        $r8[0] = "df";

        $r8[1] = r36;

     label5:
        r3 = $r8;

        r4 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.util.List performCommand(java.lang.String[],int)>(r3, 3);

        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i2 >= 2 goto label6;

        $r20 = new java.io.IOException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'df\' did not return info as expected for path \'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r24 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- response was ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String)>($r30);

        throw $r20;

     label6:
        $r10 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (java.lang.String) $r10;

        $r9 = new java.util.StringTokenizer;

        specialinvoke $r9.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r5, " ");

        r6 = $r9;

        $i3 = virtualinvoke r6.<java.util.StringTokenizer: int countTokens()>();

        if $i3 >= 4 goto label8;

        $i5 = virtualinvoke r6.<java.util.StringTokenizer: int countTokens()>();

        if $i5 != 1 goto label7;

        $i6 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i6 < 3 goto label7;

        $r22 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(2);

        r7 = (java.lang.String) $r22;

        $r23 = new java.util.StringTokenizer;

        specialinvoke $r23.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r7, " ");

        r6 = $r23;

        goto label9;

     label7:
        $r14 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'df\' did not return data as expected for path \'");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label8:
        virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label9:
        virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r37 = virtualinvoke r6.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $l4 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: long parseBytes(java.lang.String,java.lang.String)>(r37, r36);

        return $l4;
    }

    long parseBytes(java.lang.String, java.lang.String) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String r1, r2, $r8, $r14;
        long l0;
        byte $b1;
        java.io.IOException $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r15;
        java.lang.NumberFormatException $r9;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r1);

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'df\' did not find free space in response for path \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return l0;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line \'df\' did not return numeric data as expected for path \'");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'- check path is valid");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r10;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    java.util.List performCommand(java.lang.String[], int) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String[] r1;
        int i0, $i1, $i3, $i4, $i5;
        java.util.ArrayList r2, r9, $r11;
        java.lang.Process r3;
        java.io.InputStream r4, r6;
        java.io.OutputStream r5;
        java.io.BufferedReader r7, $r12;
        java.lang.String r8, $r20, $r26, $r28, $r31, $r39, r40;
        java.lang.Throwable r10, $r38;
        java.io.InputStreamReader $r13;
        java.io.IOException $r14, $r19, $r32;
        java.lang.StringBuilder $r15, $r16, $r17, $r21, $r22, $r23, $r25, $r27, $r30, $r33, $r34, $r36, $r37;
        java.util.List $r18, $r24, $r35;
        java.lang.InterruptedException $r29, r41;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>(20);

        r2 = $r11;

        r3 = null;

        r4 = null;

        r5 = null;

        r6 = null;

        r7 = null;

     label01:
        r3 = virtualinvoke r0.<org.apache.commons.io.FileSystemUtils: java.lang.Process openProcess(java.lang.String[])>(r1);

        r4 = virtualinvoke r3.<java.lang.Process: java.io.InputStream getInputStream()>();

        r5 = virtualinvoke r3.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        r6 = virtualinvoke r3.<java.lang.Process: java.io.InputStream getErrorStream()>();

        $r12 = new java.io.BufferedReader;

        $r13 = new java.io.InputStreamReader;

        specialinvoke $r13.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r4);

        specialinvoke $r12.<java.io.BufferedReader: void <init>(java.io.Reader)>($r13);

        r7 = $r12;

        r8 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();

     label02:
        if r8 == null goto label03;

        $i5 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i5 >= i0 goto label03;

        $r26 = virtualinvoke r8.<java.lang.String: java.lang.String toLowerCase()>();

        r40 = virtualinvoke $r26.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r40);

        r8 = virtualinvoke r7.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label02;

     label03:
        virtualinvoke r3.<java.lang.Process: int waitFor()>();

        $i1 = virtualinvoke r3.<java.lang.Process: int exitValue()>();

        if $i1 == 0 goto label04;

        $r19 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line returned OS error code \'");

        $i4 = virtualinvoke r3.<java.lang.Process: int exitValue()>();

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r23 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for command ");

        $r24 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r19;

     label04:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i3 != 0 goto label05;

        $r14 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line did not return any info for command ");

        $r18 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label05:
        r9 = r2;

     label06:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r7);

        if r3 == null goto label07;

        virtualinvoke r3.<java.lang.Process: void destroy()>();

     label07:
        return r9;

     label08:
        $r29 := @caughtexception;

        r41 = $r29;

        $r32 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command line threw an InterruptedException \'");

        $r31 = virtualinvoke r41.<java.lang.InterruptedException: java.lang.String getMessage()>();

        $r37 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for command ");

        $r35 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1);

        $r34 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r39 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>($r39);

        throw $r32;

     label09:
        $r38 := @caughtexception;

        r10 = $r38;

     label10:
        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r4);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r5);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r6);

        staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.Reader)>(r7);

        if r3 == null goto label11;

        virtualinvoke r3.<java.lang.Process: void destroy()>();

     label11:
        throw r10;

        catch java.lang.InterruptedException from label01 to label06 with label08;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    java.lang.Process openProcess(java.lang.String[]) throws java.io.IOException
    {
        org.apache.commons.io.FileSystemUtils r0;
        java.lang.String[] r1;
        java.lang.Runtime $r2;
        java.lang.Process $r3;

        r0 := @this: org.apache.commons.io.FileSystemUtils;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r3 = virtualinvoke $r2.<java.lang.Runtime: java.lang.Process exec(java.lang.String[])>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.String r0, r4;
        org.apache.commons.io.FileSystemUtils $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.Exception $r2;
        java.io.IOException $r3;
        byte b13;

        <org.apache.commons.io.FileSystemUtils: int POSIX_UNIX> = 3;

        <org.apache.commons.io.FileSystemUtils: int UNIX> = 2;

        <org.apache.commons.io.FileSystemUtils: int WINDOWS> = 1;

        <org.apache.commons.io.FileSystemUtils: int OTHER> = 0;

        <org.apache.commons.io.FileSystemUtils: int INIT_PROBLEM> = -1;

        $r1 = new org.apache.commons.io.FileSystemUtils;

        specialinvoke $r1.<org.apache.commons.io.FileSystemUtils: void <init>()>();

        <org.apache.commons.io.FileSystemUtils: org.apache.commons.io.FileSystemUtils INSTANCE> = $r1;

     label01:
        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        if r0 != null goto label02;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("os.name not found");

        throw $r3;

     label02:
        r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("windows");

        if $i0 == -1 goto label03;

        b13 = 1;

        goto label08;

     label03:
        $i1 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("linux");

        if $i1 != -1 goto label04;

        $i2 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("sun os");

        if $i2 != -1 goto label04;

        $i3 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("sunos");

        if $i3 != -1 goto label04;

        $i4 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("solaris");

        if $i4 != -1 goto label04;

        $i5 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("mpe/ix");

        if $i5 != -1 goto label04;

        $i6 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("freebsd");

        if $i6 != -1 goto label04;

        $i7 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("irix");

        if $i7 != -1 goto label04;

        $i8 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("digital unix");

        if $i8 != -1 goto label04;

        $i9 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("unix");

        if $i9 != -1 goto label04;

        $i10 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("mac os x");

        if $i10 == -1 goto label05;

     label04:
        b13 = 2;

        goto label08;

     label05:
        $i12 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("hp-ux");

        if $i12 != -1 goto label06;

        $i11 = virtualinvoke r4.<java.lang.String: int indexOf(java.lang.String)>("aix");

        if $i11 == -1 goto label07;

     label06:
        b13 = 3;

        goto label08;

     label07:
        b13 = 0;

     label08:
        goto label10;

     label09:
        $r2 := @caughtexception;

        b13 = -1;

     label10:
        <org.apache.commons.io.FileSystemUtils: int OS> = b13;

        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }
}
