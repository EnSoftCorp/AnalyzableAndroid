public class org.owasp.html.HtmlStreamRenderer extends java.lang.Object implements org.owasp.html.HtmlStreamEventReceiver
{
    private final java.lang.Appendable output;
    private final org.owasp.html.Handler ioExHandler;
    private final org.owasp.html.Handler badHtmlHandler;
    private java.lang.String lastTagOpened;
    private java.lang.StringBuilder pendingUnescaped;
    private boolean open;

    public static org.owasp.html.HtmlStreamRenderer create(java.lang.Appendable, org.owasp.html.Handler, org.owasp.html.Handler)
    {
        java.lang.Appendable r0;
        org.owasp.html.Handler r1, r2;
        boolean $z0;
        org.owasp.html.HtmlStreamRenderer $r3;
        org.owasp.html.HtmlStreamRenderer$CloseableHtmlStreamRenderer $r4;

        r0 := @parameter0: java.lang.Appendable;

        r1 := @parameter1: org.owasp.html.Handler;

        r2 := @parameter2: org.owasp.html.Handler;

        $z0 = r0 instanceof java.io.Closeable;

        if $z0 == 0 goto label1;

        $r4 = new org.owasp.html.HtmlStreamRenderer$CloseableHtmlStreamRenderer;

        specialinvoke $r4.<org.owasp.html.HtmlStreamRenderer$CloseableHtmlStreamRenderer: void <init>(java.lang.Appendable,org.owasp.html.Handler,org.owasp.html.Handler)>(r0, r1, r2);

        return $r4;

     label1:
        $r3 = new org.owasp.html.HtmlStreamRenderer;

        specialinvoke $r3.<org.owasp.html.HtmlStreamRenderer: void <init>(java.lang.Appendable,org.owasp.html.Handler,org.owasp.html.Handler)>(r0, r1, r2);

        return $r3;
    }

    public static org.owasp.html.HtmlStreamRenderer create(java.lang.StringBuilder, org.owasp.html.Handler)
    {
        java.lang.StringBuilder r0;
        org.owasp.html.Handler r1, $r2;
        org.owasp.html.HtmlStreamRenderer $r3;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: org.owasp.html.Handler;

        $r2 = <org.owasp.html.Handler: org.owasp.html.Handler PROPAGATE>;

        $r3 = staticinvoke <org.owasp.html.HtmlStreamRenderer: org.owasp.html.HtmlStreamRenderer create(java.lang.Appendable,org.owasp.html.Handler,org.owasp.html.Handler)>(r0, $r2, r1);

        return $r3;
    }

    private void <init>(java.lang.Appendable, org.owasp.html.Handler, org.owasp.html.Handler)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.Appendable r1;
        org.owasp.html.Handler r2, r3;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.owasp.html.Handler;

        r3 := @parameter2: org.owasp.html.Handler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output> = r1;

        r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler ioExHandler> = r2;

        r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler badHtmlHandler> = r3;

        return;
    }

    private final void error(java.lang.String, java.lang.CharSequence)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1, $r10;
        java.lang.CharSequence r2;
        org.owasp.html.Handler $r3, $r4, $r6;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.CharSequence;

        $r4 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler badHtmlHandler>;

        $r3 = <org.owasp.html.Handler: org.owasp.html.Handler DO_NOTHING>;

        if $r4 == $r3 goto label1;

        $r6 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler badHtmlHandler>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.owasp.html.Handler: void handle(java.lang.Object)>($r10);

     label1:
        return;
    }

    public final void openDocument() throws java.lang.IllegalStateException
    {
        org.owasp.html.HtmlStreamRenderer r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        r0.<org.owasp.html.HtmlStreamRenderer: boolean open> = 1;

        return;
    }

    public final void closeDocument() throws java.lang.IllegalStateException
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.io.IOException r1, $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.Appendable $r3, $r4;
        java.io.Flushable $r5;
        java.lang.String $r6;
        java.lang.IllegalStateException $r7;
        org.owasp.html.Handler $r9;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        $r2 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        if $r2 == null goto label2;

        $r6 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.String lastTagOpened>;

        virtualinvoke r0.<org.owasp.html.HtmlStreamRenderer: void closeTag(java.lang.String)>($r6);

     label2:
        r0.<org.owasp.html.HtmlStreamRenderer: boolean open> = 0;

        $r3 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        $z1 = $r3 instanceof java.io.Flushable;

        if $z1 == 0 goto label6;

     label3:
        $r4 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        $r5 = (java.io.Flushable) $r4;

        interfaceinvoke $r5.<java.io.Flushable: void flush()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler ioExHandler>;

        interfaceinvoke $r9.<org.owasp.html.Handler: void handle(java.lang.Object)>(r1);

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public final boolean isDocumentOpen()
    {
        org.owasp.html.HtmlStreamRenderer r0;
        boolean $z0;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        return $z0;
    }

    public final void openTag(java.lang.String, java.util.List)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1;
        java.util.List r2;
        java.io.IOException r3, $r4;
        org.owasp.html.Handler $r5;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

     label1:
        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void writeOpenTag(java.lang.String,java.util.List)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $r5 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler ioExHandler>;

        interfaceinvoke $r5.<org.owasp.html.Handler: void handle(java.lang.Object)>(r3);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void writeOpenTag(java.lang.String, java.util.List) throws java.io.IOException
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1, r4, r5, r30, r31;
        java.util.List r2;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r6, $r9;
        int[] $r7;
        org.owasp.html.HtmlTextEscapingMode $r8;
        int $i0, $i1, $i2;
        java.lang.Appendable $r10, $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r25, $r27;
        java.lang.Object $r16, $r18;
        java.lang.IllegalStateException $r29;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        if $z0 != 0 goto label01;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>()>();

        throw $r29;

     label01:
        r30 = staticinvoke <org.owasp.html.HtmlStreamRenderer: java.lang.String safeName(java.lang.String)>(r1);

        $z1 = staticinvoke <org.owasp.html.HtmlStreamRenderer: boolean isValidHtmlName(java.lang.String)>(r30);

        if $z1 != 0 goto label02;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Invalid element name", r30);

        return;

     label02:
        $r6 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        if $r6 == null goto label03;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Tag content cannot appear inside CDATA element", r30);

        return;

     label03:
        $r7 = <org.owasp.html.HtmlStreamRenderer$1: int[] $SwitchMap$org$owasp$html$HtmlTextEscapingMode>;

        $r8 = staticinvoke <org.owasp.html.HtmlTextEscapingMode: org.owasp.html.HtmlTextEscapingMode getModeForTag(java.lang.String)>(r30);

        $i0 = virtualinvoke $r8.<org.owasp.html.HtmlTextEscapingMode: int ordinal()>();

        $i1 = $r7[$i0];

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label04;
            case 3: goto label04;
            default: goto label05;
        };

     label04:
        r0.<org.owasp.html.HtmlStreamRenderer: java.lang.String lastTagOpened> = r30;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped> = $r9;

        goto label05;

     label05:
        $r10 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        $r12 = interfaceinvoke $r10.<java.lang.Appendable: java.lang.Appendable append(char)>(60);

        interfaceinvoke $r12.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r30);

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r16;

        $r18 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r18;

        r31 = staticinvoke <org.owasp.html.HtmlLexer: java.lang.String canonicalName(java.lang.String)>(r4);

        $z4 = staticinvoke <org.owasp.html.HtmlStreamRenderer: boolean isValidHtmlName(java.lang.String)>(r31);

        if $z4 != 0 goto label07;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Invalid attr name", r31);

        goto label06;

     label07:
        $r19 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        $r21 = interfaceinvoke $r19.<java.lang.Appendable: java.lang.Appendable append(char)>(32);

        $r20 = interfaceinvoke $r21.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r31);

        $r23 = interfaceinvoke $r20.<java.lang.Appendable: java.lang.Appendable append(char)>(61);

        interfaceinvoke $r23.<java.lang.Appendable: java.lang.Appendable append(char)>(34);

        $r22 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        staticinvoke <org.owasp.html.Encoding: void encodeHtmlOnto(java.lang.String,java.lang.Appendable)>(r5, $r22);

        $i2 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(96);

        if $i2 == -1 goto label08;

        $r25 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        interfaceinvoke $r25.<java.lang.Appendable: java.lang.Appendable append(char)>(32);

     label08:
        $r27 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        interfaceinvoke $r27.<java.lang.Appendable: java.lang.Appendable append(char)>(34);

        goto label06;

     label09:
        $z3 = staticinvoke <org.owasp.html.HtmlTextEscapingMode: boolean isVoidElement(java.lang.String)>(r30);

        if $z3 == 0 goto label10;

        $r14 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        interfaceinvoke $r14.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(" /");

     label10:
        $r13 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        interfaceinvoke $r13.<java.lang.Appendable: java.lang.Appendable append(char)>(62);

        return;
    }

    public final void closeTag(java.lang.String)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1, $r3;
        java.io.IOException r2, $r4;
        org.owasp.html.Handler $r5;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <org.owasp.html.HtmlStreamRenderer: java.lang.String safeName(java.lang.String)>(r1);

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void writeCloseTag(java.lang.String)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler ioExHandler>;

        interfaceinvoke $r5.<org.owasp.html.Handler: void handle(java.lang.Object)>(r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private final void writeCloseTag(java.lang.String) throws java.io.IOException
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1, $r8, $r9, $r10, r15;
        java.lang.StringBuilder r2, $r3;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Appendable $r4, $r5, $r6, $r12;
        java.lang.CharSequence $r11;
        java.lang.IllegalStateException $r13;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        if $z0 != 0 goto label1;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>()>();

        throw $r13;

     label1:
        r15 = staticinvoke <org.owasp.html.HtmlLexer: java.lang.String canonicalName(java.lang.String)>(r1);

        $z1 = staticinvoke <org.owasp.html.HtmlStreamRenderer: boolean isValidHtmlName(java.lang.String)>(r15);

        if $z1 != 0 goto label2;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Invalid element name", r15);

        return;

     label2:
        $r3 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        if $r3 == null goto label6;

        $r8 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.String lastTagOpened>;

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z2 != 0 goto label3;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Tag content cannot appear inside CDATA element", r15);

        return;

     label3:
        r2 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped> = null;

        staticinvoke <org.owasp.html.Encoding: void stripBannedCodeunits(java.lang.StringBuilder)>(r2);

        $r9 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.String lastTagOpened>;

        i0 = staticinvoke <org.owasp.html.HtmlStreamRenderer: int checkHtmlCdataCloseable(java.lang.String,java.lang.StringBuilder)>($r9, r2);

        if i0 != -1 goto label4;

        $r12 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        interfaceinvoke $r12.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        goto label5;

     label4:
        $i1 = i0 + 10;

        $i3 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i3);

        $r11 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>(i0, $i2);

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void error(java.lang.String,java.lang.CharSequence)>("Invalid CDATA text content", $r11);

     label5:
        $r10 = "plaintext";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r15);

        if $z3 == 0 goto label6;

        return;

     label6:
        $r4 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        $r5 = interfaceinvoke $r4.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("</");

        $r6 = interfaceinvoke $r5.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r15);

        interfaceinvoke $r6.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(">");

        return;
    }

    public final void text(java.lang.String)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1;
        java.io.IOException r2, $r3;
        org.owasp.html.Handler $r4;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

     label1:
        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void writeText(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        $r4 = r0.<org.owasp.html.HtmlStreamRenderer: org.owasp.html.Handler ioExHandler>;

        interfaceinvoke $r4.<org.owasp.html.Handler: void handle(java.lang.Object)>(r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private final void writeText(java.lang.String) throws java.io.IOException
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r4;
        java.lang.Appendable $r3;
        java.lang.IllegalStateException $r6;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.owasp.html.HtmlStreamRenderer: boolean open>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        $r2 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        if $r2 == null goto label2;

        $r4 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.StringBuilder pendingUnescaped>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        goto label3;

     label2:
        $r3 = r0.<org.owasp.html.HtmlStreamRenderer: java.lang.Appendable output>;

        staticinvoke <org.owasp.html.Encoding: void encodeHtmlOnto(java.lang.String,java.lang.Appendable)>(r1, $r3);

     label3:
        return;
    }

    private static int checkHtmlCdataCloseable(java.lang.String, java.lang.StringBuilder)
    {
        java.lang.String r0, $r2;
        java.lang.StringBuilder r1;
        int i0, i1, i2, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i20;
        char c3, $c5, $c7, $c14, $c19, $c21, $c22;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.StringBuilder;

        i0 = -1;

        i1 = 0;

        i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

     label01:
        if i1 >= i2 goto label09;

        c3 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(i1);

        lookupswitch(c3)
        {
            case 60: goto label02;
            case 62: goto label06;
            default: goto label08;
        };

     label02:
        $i9 = i1 + 3;

        if $i9 >= i2 goto label04;

        $i17 = i1 + 1;

        $c19 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i17);

        if 33 != $c19 goto label04;

        $i18 = i1 + 2;

        $c21 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i18);

        if 45 != $c21 goto label04;

        $i20 = i1 + 3;

        $c22 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i20);

        if 45 != $c22 goto label04;

        if i0 != -1 goto label03;

        i0 = i1;

        goto label08;

     label03:
        return i1;

     label04:
        $i11 = i1 + 1;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        $i13 = $i11 + $i10;

        if $i13 >= i2 goto label08;

        $i12 = i1 + 1;

        $c14 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i12);

        if 47 != $c14 goto label08;

        $i15 = i1 + 2;

        $i16 = virtualinvoke r0.<java.lang.String: int length()>();

        $z0 = staticinvoke <org.owasp.html.Strings: boolean regionMatchesIgnoreCase(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>(r1, $i15, r0, 0, $i16);

        if $z0 == 0 goto label08;

        if i0 >= 0 goto label05;

        return i1;

     label05:
        $r2 = "script";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label08;

        return i1;

     label06:
        if i1 < 2 goto label08;

        $i4 = i1 - 1;

        $c5 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i4);

        if 45 != $c5 goto label08;

        $i6 = i1 - 2;

        $c7 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i6);

        if 45 != $c7 goto label08;

        if i0 >= 0 goto label07;

        $i8 = i1 - 2;

        return $i8;

     label07:
        i0 = -1;

        goto label08;

     label08:
        i1 = i1 + 1;

        goto label01;

     label09:
        if i0 < 0 goto label10;

        return i0;

     label10:
        return -1;
    }

    static boolean isValidHtmlName(java.lang.String)
    {
        java.lang.String r0;
        int i0, i1, $i3, $i4;
        boolean z0;
        char c2;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label01;

        return 0;

     label01:
        if i0 <= 128 goto label02;

        return 0;

     label02:
        z0 = 0;

        i1 = 0;

     label03:
        if i1 >= i0 goto label14;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        lookupswitch(c2)
        {
            case 45: goto label07;
            case 58: goto label04;
            default: goto label09;
        };

     label04:
        if z0 == 0 goto label05;

        return 0;

     label05:
        z0 = 1;

        if i1 == 0 goto label06;

        $i3 = i1 + 1;

        if $i3 != i0 goto label13;

     label06:
        return 0;

     label07:
        if i1 == 0 goto label08;

        $i4 = i1 + 1;

        if $i4 != i0 goto label13;

     label08:
        return 0;

     label09:
        if c2 > 57 goto label11;

        if i1 == 0 goto label10;

        if c2 >= 48 goto label13;

     label10:
        return 0;

     label11:
        if 65 > c2 goto label12;

        if c2 > 122 goto label12;

        if 90 >= c2 goto label13;

        if c2 >= 97 goto label13;

        return 0;

     label12:
        return 0;

     label13:
        i1 = i1 + 1;

        goto label03;

     label14:
        return 1;
    }

    static java.lang.String safeName(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, r4;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r4 = staticinvoke <org.owasp.html.HtmlLexer: java.lang.String canonicalName(java.lang.String)>(r0);

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        lookupswitch($i0)
        {
            case 3: goto label1;
            case 7: goto label2;
            case 9: goto label3;
            default: goto label4;
        };

     label1:
        $r3 = "xmp";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label4;

        return "pre";

     label2:
        $r2 = "listing";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label4;

        return "pre";

     label3:
        $r1 = "plaintext";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        return "pre";

     label4:
        return r4;
    }

    void <init>(java.lang.Appendable, org.owasp.html.Handler, org.owasp.html.Handler, org.owasp.html.HtmlStreamRenderer$1)
    {
        org.owasp.html.HtmlStreamRenderer r0;
        java.lang.Appendable r1;
        org.owasp.html.Handler r2, r3;
        org.owasp.html.HtmlStreamRenderer$1 r4;

        r0 := @this: org.owasp.html.HtmlStreamRenderer;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: org.owasp.html.Handler;

        r3 := @parameter2: org.owasp.html.Handler;

        r4 := @parameter3: org.owasp.html.HtmlStreamRenderer$1;

        specialinvoke r0.<org.owasp.html.HtmlStreamRenderer: void <init>(java.lang.Appendable,org.owasp.html.Handler,org.owasp.html.Handler)>(r1, r2, r3);

        return;
    }
}
