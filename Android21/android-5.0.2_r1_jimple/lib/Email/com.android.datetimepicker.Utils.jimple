public class com.android.datetimepicker.Utils extends java.lang.Object
{
    public static final int MONDAY_BEFORE_JULIAN_EPOCH;
    public static final int PULSE_ANIMATOR_DURATION;
    public static final int SELECTED_ALPHA;
    public static final int SELECTED_ALPHA_THEME_DARK;
    public static final int FULL_ALPHA;
    static final java.lang.String SHARED_PREFS_NAME;

    public void <init>()
    {
        com.android.datetimepicker.Utils r0;

        r0 := @this: com.android.datetimepicker.Utils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isJellybeanOrLater()
    {
        int $i0;
        boolean $z0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void tryAccessibilityAnnounce(android.view.View, java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.lang.CharSequence;

        $z0 = staticinvoke <com.android.datetimepicker.Utils: boolean isJellybeanOrLater()>();

        if $z0 == 0 goto label1;

        if r0 == null goto label1;

        if r1 == null goto label1;

        virtualinvoke r0.<android.view.View: void announceForAccessibility(java.lang.CharSequence)>(r1);

     label1:
        return;
    }

    public static int getDaysInMonth(int, int)
    {
        int i0, i1, $i2;
        byte $b3;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label2;
            case 9: goto label1;
            case 10: goto label2;
            case 11: goto label1;
            default: goto label6;
        };

     label1:
        return 31;

     label2:
        return 30;

     label3:
        $i2 = i1 % 4;

        if $i2 != 0 goto label4;

        $b3 = 29;

        goto label5;

     label4:
        $b3 = 28;

     label5:
        return $b3;

     label6:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid Month");

        throw $r0;
    }

    public static int getJulianMondayFromWeeksSinceEpoch(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 * 7;

        $i2 = 2440585 + $i1;

        return $i2;
    }

    public static int getWeeksSinceEpochFromJulianDay(int, int)
    {
        int i0, i1, i2, i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = 4 - i1;

        if i2 >= 0 goto label1;

        i2 = i2 + 7;

     label1:
        i3 = 2440588 - i2;

        $i4 = i0 - i3;

        $i5 = $i4 / 7;

        return $i5;
    }

    public static android.animation.ObjectAnimator getPulseAnimator(android.view.View, float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.animation.Keyframe r1, r2, r3, r4;
        android.animation.PropertyValuesHolder r5, r6;
        android.animation.ObjectAnimator r7;
        android.animation.Keyframe[] $r8, $r9;
        android.animation.PropertyValuesHolder[] $r10;

        r0 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r1 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>(0.0F, 1.0F);

        r2 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>(0.275F, f0);

        r3 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>(0.69F, f1);

        r4 = staticinvoke <android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>(1.0F, 1.0F);

        $r8 = newarray (android.animation.Keyframe)[4];

        $r8[0] = r1;

        $r8[1] = r2;

        $r8[2] = r3;

        $r8[3] = r4;

        r5 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>("scaleX", $r8);

        $r9 = newarray (android.animation.Keyframe)[4];

        $r9[0] = r1;

        $r9[1] = r2;

        $r9[2] = r3;

        $r9[3] = r4;

        r6 = staticinvoke <android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>("scaleY", $r9);

        $r10 = newarray (android.animation.PropertyValuesHolder)[2];

        $r10[0] = r5;

        $r10[1] = r6;

        r7 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>(r0, $r10);

        virtualinvoke r7.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(544L);

        return r7;
    }

    public static void <clinit>()
    {
        <com.android.datetimepicker.Utils: java.lang.String SHARED_PREFS_NAME> = "com.android.calendar_preferences";

        <com.android.datetimepicker.Utils: int FULL_ALPHA> = 255;

        <com.android.datetimepicker.Utils: int SELECTED_ALPHA_THEME_DARK> = 102;

        <com.android.datetimepicker.Utils: int SELECTED_ALPHA> = 51;

        <com.android.datetimepicker.Utils: int PULSE_ANIMATOR_DURATION> = 544;

        <com.android.datetimepicker.Utils: int MONDAY_BEFORE_JULIAN_EPOCH> = 2440585;

        return;
    }
}
