public abstract class com.android.datetimepicker.date.DayPickerView extends android.widget.ListView implements android.widget.AbsListView$OnScrollListener, com.android.datetimepicker.date.DatePickerDialog$OnDateChangedListener
{
    private static final java.lang.String TAG;
    protected static final int SCROLL_HYST_WEEKS;
    protected static final int GOTO_SCROLL_DURATION;
    protected static final int SCROLL_CHANGE_DELAY;
    public static final int DAYS_PER_WEEK;
    public static int LIST_TOP_OFFSET;
    protected int mNumWeeks;
    protected boolean mShowWeekNumber;
    protected int mDaysPerWeek;
    private static java.text.SimpleDateFormat YEAR_FORMAT;
    protected float mFriction;
    protected android.content.Context mContext;
    protected android.os.Handler mHandler;
    protected com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay;
    protected com.android.datetimepicker.date.MonthAdapter mAdapter;
    protected com.android.datetimepicker.date.MonthAdapter$CalendarDay mTempDay;
    protected int mFirstDayOfWeek;
    protected java.lang.CharSequence mPrevMonthName;
    protected int mCurrentMonthDisplayed;
    protected long mPreviousScrollPosition;
    protected int mPreviousScrollState;
    protected int mCurrentScrollState;
    private com.android.datetimepicker.date.DatePickerController mController;
    private boolean mPerformingScroll;
    protected com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable mScrollStateChangedRunnable;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay $r3, $r4;
        com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable $r5;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ListView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<com.android.datetimepicker.date.DayPickerView: int mNumWeeks> = 6;

        r0.<com.android.datetimepicker.date.DayPickerView: boolean mShowWeekNumber> = 0;

        r0.<com.android.datetimepicker.date.DayPickerView: int mDaysPerWeek> = 7;

        r0.<com.android.datetimepicker.date.DayPickerView: float mFriction> = 1.0F;

        $r3 = new com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        specialinvoke $r3.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void <init>()>();

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay> = $r3;

        $r4 = new com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        specialinvoke $r4.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void <init>()>();

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mTempDay> = $r4;

        r0.<com.android.datetimepicker.date.DayPickerView: int mPreviousScrollState> = 0;

        r0.<com.android.datetimepicker.date.DayPickerView: int mCurrentScrollState> = 0;

        $r5 = new com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable;

        specialinvoke $r5.<com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable: void <init>(com.android.datetimepicker.date.DayPickerView)>(r0);

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable mScrollStateChangedRunnable> = $r5;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void init(android.content.Context)>(r1);

        return;
    }

    public void <init>(android.content.Context, com.android.datetimepicker.date.DatePickerController)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.content.Context r1;
        com.android.datetimepicker.date.DatePickerController r2;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay $r3, $r4;
        com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable $r5;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.datetimepicker.date.DatePickerController;

        specialinvoke r0.<android.widget.ListView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.date.DayPickerView: int mNumWeeks> = 6;

        r0.<com.android.datetimepicker.date.DayPickerView: boolean mShowWeekNumber> = 0;

        r0.<com.android.datetimepicker.date.DayPickerView: int mDaysPerWeek> = 7;

        r0.<com.android.datetimepicker.date.DayPickerView: float mFriction> = 1.0F;

        $r3 = new com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        specialinvoke $r3.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void <init>()>();

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay> = $r3;

        $r4 = new com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        specialinvoke $r4.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void <init>()>();

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mTempDay> = $r4;

        r0.<com.android.datetimepicker.date.DayPickerView: int mPreviousScrollState> = 0;

        r0.<com.android.datetimepicker.date.DayPickerView: int mCurrentScrollState> = 0;

        $r5 = new com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable;

        specialinvoke $r5.<com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable: void <init>(com.android.datetimepicker.date.DayPickerView)>(r0);

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable mScrollStateChangedRunnable> = $r5;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void init(android.content.Context)>(r1);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setController(com.android.datetimepicker.date.DatePickerController)>(r2);

        return;
    }

    public void setController(com.android.datetimepicker.date.DatePickerController)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.DatePickerController r1, $r2;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: com.android.datetimepicker.date.DatePickerController;

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController> = r1;

        $r2 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController>;

        interfaceinvoke $r2.<com.android.datetimepicker.date.DatePickerController: void registerOnDateChangedListener(com.android.datetimepicker.date.DatePickerDialog$OnDateChangedListener)>(r0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void refreshAdapter()>();

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void onDateChanged()>();

        return;
    }

    public void init(android.content.Context)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.content.Context r1;
        android.os.Handler $r2;
        android.widget.AbsListView$LayoutParams $r3;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.content.Context;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        r0.<com.android.datetimepicker.date.DayPickerView: android.os.Handler mHandler> = $r2;

        $r3 = new android.widget.AbsListView$LayoutParams;

        specialinvoke $r3.<android.widget.AbsListView$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r3);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setDrawSelectorOnTop(boolean)>(0);

        r0.<com.android.datetimepicker.date.DayPickerView: android.content.Context mContext> = r1;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setUpListView()>();

        return;
    }

    public void onChange()
    {
        com.android.datetimepicker.date.DayPickerView r0;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void refreshAdapter()>();

        return;
    }

    protected void refreshAdapter()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.MonthAdapter $r1, $r3, $r4, $r7;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay $r2;
        android.content.Context $r5;
        com.android.datetimepicker.date.DatePickerController $r6;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        $r1 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter mAdapter>;

        if $r1 != null goto label1;

        $r5 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.content.Context getContext()>();

        $r6 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController>;

        $r7 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter createMonthAdapter(android.content.Context,com.android.datetimepicker.date.DatePickerController)>($r5, $r6);

        r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter mAdapter> = $r7;

        goto label2;

     label1:
        $r3 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter mAdapter>;

        $r2 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay>;

        virtualinvoke $r3.<com.android.datetimepicker.date.MonthAdapter: void setSelectedDay(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>($r2);

     label2:
        $r4 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter mAdapter>;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setAdapter(android.widget.ListAdapter)>($r4);

        return;
    }

    public abstract com.android.datetimepicker.date.MonthAdapter createMonthAdapter(android.content.Context, com.android.datetimepicker.date.DatePickerController);

    protected void setUpListView()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        float $f0, $f1, $f2;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setCacheColorHint(int)>(0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setDivider(android.graphics.drawable.Drawable)>(null);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setItemsCanFocus(boolean)>(1);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setFastScrollEnabled(boolean)>(0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setVerticalScrollBarEnabled(boolean)>(0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setOnScrollListener(android.widget.AbsListView$OnScrollListener)>(r0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setFadingEdgeLength(int)>(0);

        $f0 = staticinvoke <android.view.ViewConfiguration: float getScrollFriction()>();

        $f1 = r0.<com.android.datetimepicker.date.DayPickerView: float mFriction>;

        $f2 = $f0 * $f1;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setFriction(float)>($f2);

        return;
    }

    public boolean goTo(com.android.datetimepicker.date.MonthAdapter$CalendarDay, boolean, boolean, boolean)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r1, $r3, $r5, $r7, $r11, $r17;
        boolean z0, z1, z2, $z4, $z5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i13;
        android.view.View r2;
        com.android.datetimepicker.date.DatePickerController $r4;
        java.lang.StringBuilder $r6, $r8, $r10, $r12, $r14, $r15, $r16, $r18;
        java.lang.String $r9, $r19;
        com.android.datetimepicker.date.MonthAdapter $r13;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        if z1 == 0 goto label01;

        $r17 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay>;

        virtualinvoke $r17.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void set(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>(r1);

     label01:
        $r3 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mTempDay>;

        virtualinvoke $r3.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void set(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>(r1);

        $i3 = r1.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year>;

        $r4 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController>;

        $i4 = interfaceinvoke $r4.<com.android.datetimepicker.date.DatePickerController: int getMinYear()>();

        $i5 = $i3 - $i4;

        $i8 = $i5 * 12;

        $i6 = r1.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        i0 = $i8 + $i6;

        i1 = 0;

     label02:
        $i7 = i1;

        i1 = i1 + 1;

        r2 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.view.View getChildAt(int)>($i7);

        if r2 != null goto label03;

        goto label05;

     label03:
        i13 = virtualinvoke r2.<android.view.View: int getTop()>();

        $z5 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MonthFragment", 3);

        if $z5 == 0 goto label04;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child at ");

        $i11 = i1 - 1;

        $r14 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has top ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i13);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MonthFragment", $r19);

     label04:
        if i13 < 0 goto label02;

     label05:
        if r2 == null goto label06;

        i2 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getPositionForView(android.view.View)>(r2);

        goto label07;

     label06:
        i2 = 0;

     label07:
        if z1 == 0 goto label08;

        $r13 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter mAdapter>;

        $r11 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay>;

        virtualinvoke $r13.<com.android.datetimepicker.date.MonthAdapter: void setSelectedDay(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>($r11);

     label08:
        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("MonthFragment", 3);

        if $z4 == 0 goto label09;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GoTo position ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("MonthFragment", $r9);

     label09:
        if i0 != i2 goto label10;

        if z2 == 0 goto label12;

     label10:
        $r5 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mTempDay>;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setMonthDisplayed(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>($r5);

        r0.<com.android.datetimepicker.date.DayPickerView: int mPreviousScrollState> = 2;

        if z0 == 0 goto label11;

        $i9 = <com.android.datetimepicker.date.DayPickerView: int LIST_TOP_OFFSET>;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void smoothScrollToPositionFromTop(int,int,int)>(i0, $i9, 250);

        return 1;

     label11:
        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void postSetSelection(int)>(i0);

        goto label13;

     label12:
        if z1 == 0 goto label13;

        $r7 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay mSelectedDay>;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void setMonthDisplayed(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>($r7);

     label13:
        return 0;
    }

    public void postSetSelection(int)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        int i0;
        com.android.datetimepicker.date.DayPickerView$1 $r1;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void clearFocus()>();

        $r1 = new com.android.datetimepicker.date.DayPickerView$1;

        specialinvoke $r1.<com.android.datetimepicker.date.DayPickerView$1: void <init>(com.android.datetimepicker.date.DayPickerView,int)>(r0, i0);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: boolean post(java.lang.Runnable)>($r1);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void onScrollStateChanged(android.widget.AbsListView,int)>(r0, 0);

        return;
    }

    public void onScroll(android.widget.AbsListView, int, int, int)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.widget.AbsListView r1;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.datetimepicker.date.MonthView r2;
        long l3;
        android.view.View $r3;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.widget.AbsListView;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r3 = virtualinvoke r1.<android.widget.AbsListView: android.view.View getChildAt(int)>(0);

        r2 = (com.android.datetimepicker.date.MonthView) $r3;

        if r2 != null goto label1;

        return;

     label1:
        $i4 = virtualinvoke r1.<android.widget.AbsListView: int getFirstVisiblePosition()>();

        $i5 = virtualinvoke r2.<com.android.datetimepicker.date.MonthView: int getHeight()>();

        $i6 = $i4 * $i5;

        $i7 = virtualinvoke r2.<com.android.datetimepicker.date.MonthView: int getBottom()>();

        $i8 = $i6 - $i7;

        l3 = (long) $i8;

        r0.<com.android.datetimepicker.date.DayPickerView: long mPreviousScrollPosition> = l3;

        $i9 = r0.<com.android.datetimepicker.date.DayPickerView: int mCurrentScrollState>;

        r0.<com.android.datetimepicker.date.DayPickerView: int mPreviousScrollState> = $i9;

        return;
    }

    protected void setMonthDisplayed(com.android.datetimepicker.date.MonthAdapter$CalendarDay)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r1;
        int $i0;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        $i0 = r1.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        r0.<com.android.datetimepicker.date.DayPickerView: int mCurrentMonthDisplayed> = $i0;

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: void invalidateViews()>();

        return;
    }

    public void onScrollStateChanged(android.widget.AbsListView, int)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.widget.AbsListView r1;
        int i0;
        com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable $r2;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.widget.AbsListView;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable mScrollStateChangedRunnable>;

        virtualinvoke $r2.<com.android.datetimepicker.date.DayPickerView$ScrollStateRunnable: void doScrollStateChange(android.widget.AbsListView,int)>(r1, i0);

        return;
    }

    public int getMostVisiblePosition()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10;
        android.view.View r1;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        i0 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getFirstVisiblePosition()>();

        i1 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getHeight()>();

        i2 = 0;

        i3 = 0;

        i4 = 0;

        i5 = 0;

     label1:
        if i5 >= i1 goto label4;

        r1 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.view.View getChildAt(int)>(i4);

        if r1 != null goto label2;

        goto label4;

     label2:
        i5 = virtualinvoke r1.<android.view.View: int getBottom()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i1);

        $i10 = virtualinvoke r1.<android.view.View: int getTop()>();

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);

        i6 = $i8 - $i9;

        if i6 <= i2 goto label3;

        i3 = i4;

        i2 = i6;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $i7 = i0 + i3;

        return $i7;
    }

    public void onDateChanged()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.DatePickerController $r1;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay $r2;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        $r1 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController>;

        $r2 = interfaceinvoke $r1.<com.android.datetimepicker.date.DatePickerController: com.android.datetimepicker.date.MonthAdapter$CalendarDay getSelectedDay()>();

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: boolean goTo(com.android.datetimepicker.date.MonthAdapter$CalendarDay,boolean,boolean,boolean)>($r2, 0, 1, 1);

        return;
    }

    private com.android.datetimepicker.date.MonthAdapter$CalendarDay findAccessibilityFocus()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        int i0, i1, $i2;
        android.view.View r1;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r2;
        boolean $z0;
        com.android.datetimepicker.date.MonthView $r3, $r4;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        i0 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r1 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.view.View getChildAt(int)>(i1);

        $z0 = r1 instanceof com.android.datetimepicker.date.MonthView;

        if $z0 == 0 goto label3;

        $r3 = (com.android.datetimepicker.date.MonthView) r1;

        r2 = virtualinvoke $r3.<com.android.datetimepicker.date.MonthView: com.android.datetimepicker.date.MonthAdapter$CalendarDay getAccessibilityFocus()>();

        if r2 == null goto label3;

        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 != 17 goto label2;

        $r4 = (com.android.datetimepicker.date.MonthView) r1;

        virtualinvoke $r4.<com.android.datetimepicker.date.MonthView: void clearAccessibilityFocus()>();

     label2:
        return r2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return null;
    }

    private boolean restoreAccessibilityFocus(com.android.datetimepicker.date.MonthAdapter$CalendarDay)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r1;
        int i0, i1;
        android.view.View r2;
        boolean $z0, $z1;
        com.android.datetimepicker.date.MonthView $r3;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getChildCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.view.View getChildAt(int)>(i1);

        $z0 = r2 instanceof com.android.datetimepicker.date.MonthView;

        if $z0 == 0 goto label3;

        $r3 = (com.android.datetimepicker.date.MonthView) r2;

        $z1 = virtualinvoke $r3.<com.android.datetimepicker.date.MonthView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    protected void layoutChildren()
    {
        com.android.datetimepicker.date.DayPickerView r0;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r1;
        boolean $z0;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 = specialinvoke r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.MonthAdapter$CalendarDay findAccessibilityFocus()>();

        specialinvoke r0.<android.widget.ListView: void layoutChildren()>();

        $z0 = r0.<com.android.datetimepicker.date.DayPickerView: boolean mPerformingScroll>;

        if $z0 == 0 goto label1;

        r0.<com.android.datetimepicker.date.DayPickerView: boolean mPerformingScroll> = 0;

        goto label2;

     label1:
        specialinvoke r0.<com.android.datetimepicker.date.DayPickerView: boolean restoreAccessibilityFocus(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>(r1);

     label2:
        return;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.widget.ListView: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setItemCount(int)>(-1);

        return;
    }

    private static java.lang.String getMonthAndYearString(com.android.datetimepicker.date.MonthAdapter$CalendarDay)
    {
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r0;
        java.util.Calendar r1;
        java.lang.StringBuffer r2, $r3;
        int $i0, $i1, $i2;
        java.util.Locale $r4;
        java.lang.String $r5, $r11, $r12;
        java.text.SimpleDateFormat $r8;
        java.util.Date $r9;

        r0 := @parameter0: com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $i2 = r0.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year>;

        $i1 = r0.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        $i0 = r0.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int day>;

        virtualinvoke r1.<java.util.Calendar: void set(int,int,int)>($i2, $i1, $i0);

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r2 = $r3;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = virtualinvoke r1.<java.util.Calendar: java.lang.String getDisplayName(int,int,java.util.Locale)>(2, 2, $r4);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r8 = <com.android.datetimepicker.date.DayPickerView: java.text.SimpleDateFormat YEAR_FORMAT>;

        $r9 = virtualinvoke r1.<java.util.Calendar: java.util.Date getTime()>();

        $r11 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r9);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r12 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        android.view.accessibility.AccessibilityNodeInfo r1;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.ListView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(4096);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(8192);

        return;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        com.android.datetimepicker.date.DayPickerView r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        android.os.Bundle r1;
        com.android.datetimepicker.date.MonthAdapter$CalendarDay r2, $r5;
        android.view.View r3;
        com.android.datetimepicker.date.DatePickerController $r4;
        java.lang.String $r6;
        boolean $z1;

        r0 := @this: com.android.datetimepicker.date.DayPickerView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        if i0 == 4096 goto label1;

        if i0 == 8192 goto label1;

        $z1 = specialinvoke r0.<android.widget.ListView: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        return $z1;

     label1:
        i1 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: int getFirstVisiblePosition()>();

        i2 = i1 % 12;

        $i4 = i1 / 12;

        $r4 = r0.<com.android.datetimepicker.date.DayPickerView: com.android.datetimepicker.date.DatePickerController mController>;

        $i5 = interfaceinvoke $r4.<com.android.datetimepicker.date.DatePickerController: int getMinYear()>();

        i3 = $i4 + $i5;

        $r5 = new com.android.datetimepicker.date.MonthAdapter$CalendarDay;

        specialinvoke $r5.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: void <init>(int,int,int)>(i3, i2, 1);

        r2 = $r5;

        if i0 != 4096 goto label2;

        $i13 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        $i12 = $i13 + 1;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month> = $i12;

        $i15 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        if $i15 != 12 goto label3;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month> = 0;

        $i14 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year>;

        $i16 = $i14 + 1;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year> = $i16;

        goto label3;

     label2:
        if i0 != 8192 goto label3;

        r3 = virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: android.view.View getChildAt(int)>(0);

        if r3 == null goto label3;

        $i7 = virtualinvoke r3.<android.view.View: int getTop()>();

        if $i7 < -1 goto label3;

        $i6 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        $i9 = $i6 - 1;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month> = $i9;

        $i8 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month>;

        if $i8 != -1 goto label3;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int month> = 11;

        $i11 = r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year>;

        $i10 = $i11 - 1;

        r2.<com.android.datetimepicker.date.MonthAdapter$CalendarDay: int year> = $i10;

     label3:
        $r6 = staticinvoke <com.android.datetimepicker.date.DayPickerView: java.lang.String getMonthAndYearString(com.android.datetimepicker.date.MonthAdapter$CalendarDay)>(r2);

        staticinvoke <com.android.datetimepicker.Utils: void tryAccessibilityAnnounce(android.view.View,java.lang.CharSequence)>(r0, $r6);

        virtualinvoke r0.<com.android.datetimepicker.date.DayPickerView: boolean goTo(com.android.datetimepicker.date.MonthAdapter$CalendarDay,boolean,boolean,boolean)>(r2, 1, 0, 1);

        r0.<com.android.datetimepicker.date.DayPickerView: boolean mPerformingScroll> = 1;

        return 1;
    }

    static void <clinit>()
    {
        java.text.SimpleDateFormat $r0;
        java.util.Locale $r1;

        <com.android.datetimepicker.date.DayPickerView: int DAYS_PER_WEEK> = 7;

        <com.android.datetimepicker.date.DayPickerView: int SCROLL_CHANGE_DELAY> = 40;

        <com.android.datetimepicker.date.DayPickerView: int GOTO_SCROLL_DURATION> = 250;

        <com.android.datetimepicker.date.DayPickerView: int SCROLL_HYST_WEEKS> = 2;

        <com.android.datetimepicker.date.DayPickerView: java.lang.String TAG> = "MonthFragment";

        <com.android.datetimepicker.date.DayPickerView: int LIST_TOP_OFFSET> = -1;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("yyyy", $r1);

        <com.android.datetimepicker.date.DayPickerView: java.text.SimpleDateFormat YEAR_FORMAT> = $r0;

        return;
    }
}
