final class com.android.mail.utils.HtmlSanitizer$3 extends java.lang.Object implements org.owasp.html.Handler
{

    void <init>()
    {
        com.android.mail.utils.HtmlSanitizer$3 r0;

        r0 := @this: com.android.mail.utils.HtmlSanitizer$3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void handle(java.lang.String)
    {
        com.android.mail.utils.HtmlSanitizer$3 r0;
        java.lang.String r1, $r2, $r6;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.AssertionError $r7;

        r0 := @this: com.android.mail.utils.HtmlSanitizer$3;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <com.android.mail.utils.HtmlSanitizer: java.lang.String access$000()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mangled HTML content cannot be parsed: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>($r2, $r6);

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r7;
    }

    public volatile void handle(java.lang.Object)
    {
        com.android.mail.utils.HtmlSanitizer$3 r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: com.android.mail.utils.HtmlSanitizer$3;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.String) r1;

        virtualinvoke r0.<com.android.mail.utils.HtmlSanitizer$3: void handle(java.lang.String)>($r2);

        return;
    }
}
