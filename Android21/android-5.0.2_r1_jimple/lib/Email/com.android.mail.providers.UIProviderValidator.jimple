public class com.android.mail.providers.UIProviderValidator extends java.lang.Object
{

    public void <init>()
    {
        com.android.mail.providers.UIProviderValidator r0;

        r0 := @this: com.android.mail.providers.UIProviderValidator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] validateAccountProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] ACCOUNTS_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String[] validateFolderProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] FOLDERS_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String[] validateAccountCookieProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] ACCOUNT_COOKIE_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String[] validateConversationProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] CONVERSATION_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String[] validateMessageProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] MESSAGE_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    public static java.lang.String[] validateAttachmentProjection(java.lang.String[])
    {
        java.lang.String[] r0, $r1, $r2;

        r0 := @parameter0: java.lang.String[];

        $r1 = <com.android.mail.providers.UIProvider: java.lang.String[] ATTACHMENT_PROJECTION>;

        $r2 = staticinvoke <com.android.mail.providers.UIProviderValidator: java.lang.String[] getValidProjection(java.lang.String[],java.lang.String[])>(r0, $r1);

        return $r2;
    }

    private static java.lang.String[] getValidProjection(java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r0, r1, r2;
        com.google.common.collect.ImmutableSet $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        if r0 == null goto label2;

        $r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.lang.Object[])>(r1);

        $z0 = staticinvoke <com.android.mail.providers.UIProviderValidator: boolean isValidProjection(java.lang.String[],java.util.Set)>(r0, $r3);

        if $z0 == 0 goto label1;

        r2 = r0;

        goto label3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid projection: ");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label2:
        r2 = r1;

     label3:
        return r2;
    }

    private static boolean isValidProjection(java.lang.String[], java.util.Set)
    {
        java.lang.String[] r0, r2;
        java.util.Set r1;
        int i0, i1;
        java.lang.String r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.util.Set;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }
}
