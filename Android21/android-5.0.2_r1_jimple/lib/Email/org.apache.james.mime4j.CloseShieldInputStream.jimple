public class org.apache.james.mime4j.CloseShieldInputStream extends java.io.InputStream
{
    private java.io.InputStream is;

    public void <init>(java.io.InputStream)
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is> = r1;

        return;
    }

    public java.io.InputStream getUnderlyingStream()
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        return $r1;
    }

    public int read() throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int available() throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close() throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is> = null;

        return;
    }

    public synchronized void reset() throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

        return;
    }

    public boolean markSupported()
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $z0 = virtualinvoke $r2.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }

    public synchronized void mark(int)
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        int i0;
        java.io.InputStream $r1, $r2;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        virtualinvoke $r2.<java.io.InputStream: void mark(int)>(i0);

     label1:
        return;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        long l0, $l1;
        java.io.InputStream $r1;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $l1 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>(l0);

        return $l1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        byte[] r1;
        java.io.InputStream $r2;
        int $i0;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r2 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r1);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.io.InputStream $r2;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.james.mime4j.CloseShieldInputStream: void checkIfClosed()>();

        $r2 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        $i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    private void checkIfClosed() throws java.io.IOException
    {
        org.apache.james.mime4j.CloseShieldInputStream r0;
        java.io.InputStream $r1;
        java.io.IOException $r2;

        r0 := @this: org.apache.james.mime4j.CloseShieldInputStream;

        $r1 = r0.<org.apache.james.mime4j.CloseShieldInputStream: java.io.InputStream is>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r2;

     label1:
        return;
    }
}
