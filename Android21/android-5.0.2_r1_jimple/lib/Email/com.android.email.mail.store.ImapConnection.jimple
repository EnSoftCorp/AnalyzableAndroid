class com.android.email.mail.store.ImapConnection extends java.lang.Object
{
    private static final boolean DEBUG_FORCE_SEND_ID;
    public static final int CAPABILITY_ID;
    public static final int CAPABILITY_NAMESPACE;
    public static final int CAPABILITY_STARTTLS;
    public static final int CAPABILITY_UIDPLUS;
    private int mCapabilities;
    static final java.lang.String IMAP_REDACTED_LOG;
    com.android.email.mail.transport.MailTransport mTransport;
    private com.android.email.mail.store.imap.ImapResponseParser mParser;
    private com.android.email.mail.store.ImapStore mImapStore;
    private java.lang.String mLoginPhrase;
    private java.lang.String mAccessToken;
    private java.lang.String mIdPhrase;
    private static final int DISCOURSE_LOGGER_SIZE;
    private final com.android.email.mail.transport.DiscourseLogger mDiscourse;
    private final java.util.concurrent.atomic.AtomicInteger mNextCommandTag;

    void <init>(com.android.email.mail.store.ImapStore)
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.ImapStore r1;
        com.android.email.mail.transport.DiscourseLogger $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: com.android.email.mail.store.ImapStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mIdPhrase> = null;

        $r2 = new com.android.email.mail.transport.DiscourseLogger;

        specialinvoke $r2.<com.android.email.mail.transport.DiscourseLogger: void <init>(int)>(64);

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.DiscourseLogger mDiscourse> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.android.email.mail.store.ImapConnection: java.util.concurrent.atomic.AtomicInteger mNextCommandTag> = $r3;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void setStore(com.android.email.mail.store.ImapStore)>(r1);

        return;
    }

    void setStore(com.android.email.mail.store.ImapStore)
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.ImapStore r1;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: com.android.email.mail.store.ImapStore;

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore> = r1;

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase> = null;

        return;
    }

    java.lang.String getLoginPhrase() throws com.android.emailcommon.mail.MessagingException, java.io.IOException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.lang.String r1, r2, $r4, $r5, $r7, $r9, $r13, $r17, $r18, $r19, $r27, $r32, $r36, $r41, $r42, $r43;
        com.android.email.mail.store.ImapStore $r3, $r6, $r8, $r12, $r15, $r21, $r23, $r28;
        boolean $z0, $z1;
        java.lang.StringBuilder $r10, $r11, $r14, $r16, $r20, $r26, $r29, $r30, $r31, $r33, $r34, $r35, $r37, $r38, $r40, $r44;
        com.android.email.mail.internet.AuthenticationCache $r22;
        android.content.Context $r24;
        com.android.emailcommon.provider.Account $r25;
        byte[] $r39;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r3 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $z0 = virtualinvoke $r3.<com.android.email.mail.store.ImapStore: boolean getUseOAuth()>();

        if $z0 == 0 goto label3;

        $r22 = staticinvoke <com.android.email.mail.internet.AuthenticationCache: com.android.email.mail.internet.AuthenticationCache getInstance()>();

        $r21 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r24 = virtualinvoke $r21.<com.android.email.mail.store.ImapStore: android.content.Context getContext()>();

        $r23 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r25 = virtualinvoke $r23.<com.android.email.mail.store.ImapStore: com.android.emailcommon.provider.Account getAccount()>();

        r1 = virtualinvoke $r22.<com.android.email.mail.internet.AuthenticationCache: java.lang.String retrieveAccessToken(android.content.Context,com.android.emailcommon.provider.Account)>($r24, $r25);

        $r27 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase>;

        if $r27 == null goto label1;

        $r42 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mAccessToken>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r42, r1);

        if $z1 != 0 goto label2;

     label1:
        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mAccessToken> = r1;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("user=");

        $r28 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r32 = virtualinvoke $r28.<com.android.email.mail.store.ImapStore: java.lang.String getUsername()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("auth=Bearer ");

        $r36 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mAccessToken>;

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(1);

        r2 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AUTHENTICATE XOAUTH2 ");

        $r39 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>();

        $r43 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r39, 2);

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r41 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase> = $r41;

     label2:
        goto label4;

     label3:
        $r4 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase>;

        if $r4 != null goto label4;

        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r7 = virtualinvoke $r6.<com.android.email.mail.store.ImapStore: java.lang.String getUsername()>();

        if $r7 == null goto label4;

        $r8 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r9 = virtualinvoke $r8.<com.android.email.mail.store.ImapStore: java.lang.String getPassword()>();

        if $r9 == null goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LOGIN ");

        $r12 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r13 = virtualinvoke $r12.<com.android.email.mail.store.ImapStore: java.lang.String getUsername()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r18 = virtualinvoke $r15.<com.android.email.mail.store.ImapStore: java.lang.String getPassword()>();

        $r17 = staticinvoke <com.android.email.mail.store.imap.ImapUtility: java.lang.String imapQuoted(java.lang.String)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase> = $r19;

     label4:
        $r5 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase>;

        return $r5;
    }

    void open() throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponse r1, r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String r3, $r15, $r17, $r22;
        java.lang.Throwable r4, $r19;
        com.android.email.mail.transport.MailTransport $r5, $r6, $r7, $r11, $r13;
        com.android.email.mail.store.imap.ImapResponseParser $r8;
        com.android.email.mail.store.ImapStore $r10, $r12;
        javax.net.ssl.SSLException $r14, r23;
        com.android.emailcommon.mail.CertificateValidationException $r16;
        java.lang.Object[] $r18, $r21;
        java.io.IOException $r20, r24;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r5 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r5 == null goto label01;

        $r13 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        $z3 = virtualinvoke $r13.<com.android.email.mail.transport.MailTransport: boolean isOpen()>();

        if $z3 == 0 goto label01;

        return;

     label01:
        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r6 != null goto label02;

        $r12 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r11 = virtualinvoke $r12.<com.android.email.mail.store.ImapStore: com.android.email.mail.transport.MailTransport cloneTransport()>();

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport> = $r11;

     label02:
        $r7 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        virtualinvoke $r7.<com.android.email.mail.transport.MailTransport: void open()>();

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void createParser()>();

        $r8 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        virtualinvoke $r8.<com.android.email.mail.store.imap.ImapResponseParser: com.android.email.mail.store.imap.ImapResponse readResponse()>();

        r1 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse queryCapabilities()>();

        z0 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean contains(java.lang.String)>("STARTTLS");

        r2 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse doStartTls(boolean)>(z0);

        if r2 == null goto label03;

        r1 = r2;

     label03:
        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void setCapabilities(com.android.email.mail.store.imap.ImapResponse)>(r1);

        r3 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: java.lang.String flatten()>();

        $z1 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: boolean isCapable(int)>(1);

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void doSendId(boolean,java.lang.String)>($z1, r3);

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void doLogin()>();

        $z2 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: boolean isCapable(int)>(2);

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void doGetNamespace(boolean)>($z2);

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void doGetPathSeparator()>();

        $r10 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        virtualinvoke $r10.<com.android.email.mail.store.ImapStore: void ensurePrefixIsValid()>();

     label04:
        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        goto label11;

     label05:
        $r14 := @caughtexception;

        r23 = $r14;

        $z4 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z4 == 0 goto label06;

        $r17 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r17, r23, "SSLException", $r18);

     label06:
        $r16 = new com.android.emailcommon.mail.CertificateValidationException;

        $r15 = virtualinvoke r23.<javax.net.ssl.SSLException: java.lang.String getMessage()>();

        specialinvoke $r16.<com.android.emailcommon.mail.CertificateValidationException: void <init>(java.lang.String,java.lang.Throwable)>($r15, r23);

        throw $r16;

     label07:
        $r20 := @caughtexception;

        r24 = $r20;

        $z5 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z5 == 0 goto label08;

        $r22 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r22, r24, "IOException", $r21);

     label08:
        throw r24;

     label09:
        $r19 := @caughtexception;

        r4 = $r19;

     label10:
        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        throw r4;

     label11:
        return;

        catch javax.net.ssl.SSLException from label01 to label04 with label05;
        catch java.io.IOException from label01 to label04 with label07;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label10 with label09;
    }

    void close()
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.transport.MailTransport $r1, $r2;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        virtualinvoke $r2.<com.android.email.mail.transport.MailTransport: void close()>();

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport> = null;

     label1:
        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser> = null;

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore> = null;

        return;
    }

    private boolean isCapable(int)
    {
        com.android.email.mail.store.ImapConnection r0;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.email.mail.store.ImapConnection: int mCapabilities>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setCapabilities(com.android.email.mail.store.imap.ImapResponse)
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponse r1;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: com.android.email.mail.store.imap.ImapResponse;

        $z0 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean contains(java.lang.String)>("ID");

        if $z0 == 0 goto label1;

        $i6 = r0.<com.android.email.mail.store.ImapConnection: int mCapabilities>;

        $i7 = $i6 | 1;

        r0.<com.android.email.mail.store.ImapConnection: int mCapabilities> = $i7;

     label1:
        $z1 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean contains(java.lang.String)>("NAMESPACE");

        if $z1 == 0 goto label2;

        $i4 = r0.<com.android.email.mail.store.ImapConnection: int mCapabilities>;

        $i5 = $i4 | 2;

        r0.<com.android.email.mail.store.ImapConnection: int mCapabilities> = $i5;

     label2:
        $z2 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean contains(java.lang.String)>("UIDPLUS");

        if $z2 == 0 goto label3;

        $i2 = r0.<com.android.email.mail.store.ImapConnection: int mCapabilities>;

        $i3 = $i2 | 8;

        r0.<com.android.email.mail.store.ImapConnection: int mCapabilities> = $i3;

     label3:
        $z3 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean contains(java.lang.String)>("STARTTLS");

        if $z3 == 0 goto label4;

        $i0 = r0.<com.android.email.mail.store.ImapConnection: int mCapabilities>;

        $i1 = $i0 | 4;

        r0.<com.android.email.mail.store.ImapConnection: int mCapabilities> = $i1;

     label4:
        return;
    }

    private void createParser()
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponseParser $r1;
        com.android.email.mail.transport.MailTransport $r2;
        java.io.InputStream $r3;
        com.android.email.mail.transport.DiscourseLogger $r4;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        $r1 = new com.android.email.mail.store.imap.ImapResponseParser;

        $r2 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        $r3 = virtualinvoke $r2.<com.android.email.mail.transport.MailTransport: java.io.InputStream getInputStream()>();

        $r4 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.DiscourseLogger mDiscourse>;

        specialinvoke $r1.<com.android.email.mail.store.imap.ImapResponseParser: void <init>(java.io.InputStream,com.android.email.mail.transport.DiscourseLogger)>($r3, $r4);

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser> = $r1;

        return;
    }

    void destroyResponses()
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponseParser $r1, $r2;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        virtualinvoke $r2.<com.android.email.mail.store.imap.ImapResponseParser: void destroyResponses()>();

     label1:
        return;
    }

    boolean isTransportOpenForTest()
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.transport.MailTransport $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        $z0 = virtualinvoke $r2.<com.android.email.mail.transport.MailTransport: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    com.android.email.mail.store.imap.ImapResponse readResponse() throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponseParser $r1;
        com.android.email.mail.store.imap.ImapResponse $r2;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        $r2 = virtualinvoke $r1.<com.android.email.mail.store.imap.ImapResponseParser: com.android.email.mail.store.imap.ImapResponse readResponse()>();

        return $r2;
    }

    java.lang.String sendCommand(java.lang.String, boolean) throws com.android.emailcommon.mail.MessagingException, java.io.IOException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.lang.String r1, $r3, $r4, $r5;
        boolean z0;
        java.lang.Object[] $r2;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r2 = newarray (java.lang.Object)[1];

        if z0 == 0 goto label1;

        $r5 = "[IMAP command redacted]";

        goto label2;

     label1:
        $r5 = r1;

     label2:
        $r2[0] = $r5;

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r3, "sendCommand %s", $r2);

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void open()>();

        $r4 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String sendCommandInternal(java.lang.String,boolean)>(r1, z0);

        return $r4;
    }

    java.lang.String sendCommandInternal(java.lang.String, boolean) throws com.android.emailcommon.mail.MessagingException, java.io.IOException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.lang.String r1, r2, r3, $r12, $r13;
        boolean z0;
        com.android.email.mail.transport.MailTransport $r4, $r10;
        java.util.concurrent.atomic.AtomicInteger $r5;
        int $i0;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        com.android.email.mail.transport.DiscourseLogger $r11;
        java.io.IOException $r14;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r4 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r4 != null goto label1;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Null transport");

        throw $r14;

     label1:
        $r5 = r0.<com.android.email.mail.store.ImapConnection: java.util.concurrent.atomic.AtomicInteger mNextCommandTag>;

        $i0 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if z0 == 0 goto label2;

        $r12 = "[IMAP command redacted]";

        goto label3;

     label2:
        $r12 = null;

     label3:
        virtualinvoke $r10.<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)>(r3, $r12);

        $r11 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.DiscourseLogger mDiscourse>;

        if z0 == 0 goto label4;

        $r13 = "[IMAP command redacted]";

        goto label5;

     label4:
        $r13 = r3;

     label5:
        virtualinvoke $r11.<com.android.email.mail.transport.DiscourseLogger: void addSentCommand(java.lang.String)>($r13);

        return r2;
    }

    java.lang.String sendComplexCommand(java.util.List, boolean) throws com.android.emailcommon.mail.MessagingException, java.io.IOException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.util.List r1;
        boolean z0, $z1;
        java.lang.String r2, r3, $r8;
        int i0, i1, $i2;
        com.android.email.mail.store.imap.ImapResponse r4;
        java.util.concurrent.atomic.AtomicInteger $r5;
        java.lang.Object $r6;
        com.android.email.mail.transport.MailTransport $r7;
        com.android.email.mail.transport.DiscourseLogger $r9;
        java.lang.StringBuilder $r10, $r12, $r13, $r14;
        com.android.emailcommon.mail.MessagingException $r11;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void open()>();

        $r5 = r0.<com.android.email.mail.store.ImapConnection: java.util.concurrent.atomic.AtomicInteger mNextCommandTag>;

        $i2 = virtualinvoke $r5.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        $r6 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.lang.String) $r6;

        if i1 != 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        r4 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse readResponse()>();

        $z1 = virtualinvoke r4.<com.android.email.mail.store.imap.ImapResponse: boolean isContinuationRequest()>();

        if $z1 != 0 goto label3;

        $r11 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r11.<com.android.emailcommon.mail.MessagingException: void <init>(java.lang.String)>("Expected continuation request");

        throw $r11;

     label3:
        $r7 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        virtualinvoke $r7.<com.android.email.mail.transport.MailTransport: void writeLine(java.lang.String,java.lang.String)>(r3, null);

        $r9 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.DiscourseLogger mDiscourse>;

        if z0 == 0 goto label4;

        $r8 = "[IMAP command redacted]";

        goto label5;

     label4:
        $r8 = r3;

     label5:
        virtualinvoke $r9.<com.android.email.mail.transport.DiscourseLogger: void addSentCommand(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label1;

     label6:
        return r2;
    }

    java.util.List executeSimpleCommand(java.lang.String) throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.lang.String r1;
        java.util.List $r2;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    java.util.List getCommandResponses() throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.util.ArrayList r1, $r6;
        com.android.email.mail.store.imap.ImapResponse r2;
        java.lang.String r3, r4, r5, $r10;
        com.android.email.mail.store.imap.ImapResponseParser $r7;
        boolean $z1, $z2, $z3;
        com.android.email.mail.store.imap.ImapString $r8, $r9;
        com.android.email.mail.store.ImapStore$ImapException $r11;
        com.android.emailcommon.mail.MessagingException $r12;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r1 = $r6;

     label1:
        $r7 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        r2 = virtualinvoke $r7.<com.android.email.mail.store.imap.ImapResponseParser: com.android.email.mail.store.imap.ImapResponse readResponse()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        $z1 = virtualinvoke r2.<com.android.email.mail.store.imap.ImapResponse: boolean isTagged()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r2.<com.android.email.mail.store.imap.ImapResponse: boolean isOk()>();

        if $z2 != 0 goto label3;

        r3 = virtualinvoke r2.<com.android.email.mail.store.imap.ImapResponse: java.lang.String toString()>();

        $r8 = virtualinvoke r2.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty()>();

        r4 = virtualinvoke $r8.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        $r9 = virtualinvoke r2.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty()>();

        r5 = virtualinvoke $r9.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        $r10 = "UNAVAILABLE";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label2;

        $r12 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r12.<com.android.emailcommon.mail.MessagingException: void <init>(int,java.lang.String)>(19, r4);

        throw $r12;

     label2:
        $r11 = new com.android.email.mail.store.ImapStore$ImapException;

        specialinvoke $r11.<com.android.email.mail.store.ImapStore$ImapException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r5);

        throw $r11;

     label3:
        return r1;
    }

    java.util.List executeSimpleCommand(java.lang.String, boolean) throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.lang.String r1;
        boolean z0;
        java.util.List $r3;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String sendCommand(java.lang.String,boolean)>(r1, z0);

        $r3 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List getCommandResponses()>();

        return $r3;
    }

    java.util.List executeComplexCommand(java.util.List, boolean) throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.util.List r1, $r3;
        boolean z0;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String sendComplexCommand(java.util.List,boolean)>(r1, z0);

        $r3 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List getCommandResponses()>();

        return $r3;
    }

    private com.android.email.mail.store.imap.ImapResponse queryCapabilities() throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponse r1, r3;
        java.util.Iterator r2;
        java.util.List $r4;
        boolean $z0, $z1;
        com.android.emailcommon.mail.MessagingException $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        r1 = null;

        $r4 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("CAPABILITY");

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.email.mail.store.imap.ImapResponse) $r6;

        $z1 = virtualinvoke r3.<com.android.email.mail.store.imap.ImapResponse: boolean is(int,java.lang.String)>(0, "CAPABILITY");

        if $z1 == 0 goto label2;

        r1 = r3;

        goto label3;

     label2:
        goto label1;

     label3:
        if r1 != null goto label4;

        $r5 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r5.<com.android.emailcommon.mail.MessagingException: void <init>(java.lang.String)>("Invalid CAPABILITY response received");

        throw $r5;

     label4:
        return r1;
    }

    private void doSendId(boolean, java.lang.String) throws com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, r2, r3, $r6, $r10, $r11, $r13, $r19, $r21;
        com.android.email.mail.store.ImapStore$ImapException r4, $r20;
        com.android.email.mail.transport.MailTransport $r5;
        com.android.email.mail.store.ImapStore $r7, $r9;
        android.content.Context $r8;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.io.IOException $r18;
        java.lang.Object[] $r22;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        r2 = virtualinvoke $r5.<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>();

        $r6 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".secureserver.net");

        if $z1 == 0 goto label2;

        return;

     label2:
        $r7 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r8 = virtualinvoke $r7.<com.android.email.mail.store.ImapStore: android.content.Context getContext()>();

        $r9 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r10 = virtualinvoke $r9.<com.android.email.mail.store.ImapStore: java.lang.String getUsername()>();

        r3 = staticinvoke <com.android.email.mail.store.ImapStore: java.lang.String getImapId(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>($r8, $r10, r2, r1);

        if r3 == null goto label3;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ID (");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mIdPhrase> = $r19;

     label3:
        $r11 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mIdPhrase>;

        if $r11 == null goto label9;

     label4:
        $r13 = r0.<com.android.email.mail.store.ImapConnection: java.lang.String mIdPhrase>;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>($r13);

     label5:
        goto label9;

     label6:
        $r20 := @caughtexception;

        r4 = $r20;

        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 == 0 goto label7;

        $r21 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r22 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r21, r4, "ImapException", $r22);

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

     label9:
        return;

        catch com.android.email.mail.store.ImapStore$ImapException from label4 to label5 with label6;
        catch java.io.IOException from label4 to label5 with label8;
    }

    private void doGetNamespace(boolean) throws com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List r1;
        com.android.email.mail.store.ImapStore$ImapException r2, $r15;
        com.android.email.mail.store.imap.ImapResponse r3;
        com.android.email.mail.store.imap.ImapList r4, r5;
        java.lang.String r6, $r12, $r13, $r18;
        com.android.email.mail.store.ImapStore $r7, $r10, $r11;
        java.lang.Object $r8;
        com.android.email.mail.store.imap.ImapString $r9, $r14;
        java.io.IOException $r16;
        java.lang.Object[] $r17;
        java.util.Iterator r20;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label9;

        $r7 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $z1 = virtualinvoke $r7.<com.android.email.mail.store.ImapStore: boolean isUserPrefixSet()>();

        if $z1 != 0 goto label9;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        r1 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("NAMESPACE");

     label2:
        goto label6;

     label3:
        $r15 := @caughtexception;

        r2 = $r15;

        $z5 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z5 == 0 goto label4;

        $r18 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r17 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r18, r2, "ImapException", $r17);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

     label6:
        r20 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r8 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.email.mail.store.imap.ImapResponse) $r8;

        $z3 = virtualinvoke r3.<com.android.email.mail.store.imap.ImapResponse: boolean isDataResponse(int,java.lang.String)>(0, "NAMESPACE");

        if $z3 == 0 goto label8;

        r4 = virtualinvoke r3.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapList getListOrEmpty(int)>(1);

        r5 = virtualinvoke r4.<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapList getListOrEmpty(int)>(0);

        $r9 = virtualinvoke r5.<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)>(0);

        r6 = virtualinvoke $r9.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        $z4 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z4 != 0 goto label8;

        $r10 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r12 = staticinvoke <com.android.email.mail.store.ImapStore: java.lang.String decodeFolderName(java.lang.String,java.lang.String)>(r6, null);

        virtualinvoke $r10.<com.android.email.mail.store.ImapStore: void setPathPrefix(java.lang.String)>($r12);

        $r11 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r14 = virtualinvoke r5.<com.android.email.mail.store.imap.ImapList: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)>(1);

        $r13 = virtualinvoke $r14.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        virtualinvoke $r11.<com.android.email.mail.store.ImapStore: void setPathSeparator(java.lang.String)>($r13);

     label8:
        goto label7;

     label9:
        return;

        catch com.android.email.mail.store.ImapStore$ImapException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label5;
    }

    private void doLogin() throws java.io.IOException, com.android.emailcommon.mail.MessagingException, com.android.emailcommon.mail.AuthenticationFailedException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.ImapStore$ImapException r1, $r7;
        java.lang.String r2, r3, $r5, $r8, $r10, $r12;
        com.android.email.mail.store.ImapStore $r4;
        boolean $z0, $z1, $z2, $z3;
        com.android.emailcommon.mail.AuthenticationFailedException $r9;
        com.android.emailcommon.mail.MessagingException $r11;
        java.lang.Object[] $r13;

        r0 := @this: com.android.email.mail.store.ImapConnection;

     label1:
        $r4 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $z0 = virtualinvoke $r4.<com.android.email.mail.store.ImapStore: boolean getUseOAuth()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void doSASLAuth()>();

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String getLoginPhrase()>();

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String,boolean)>($r5, 1);

     label3:
        goto label8;

     label4:
        $r7 := @caughtexception;

        r1 = $r7;

        $z1 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z1 == 0 goto label5;

        $r12 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r12, r1, "ImapException", $r13);

     label5:
        r2 = virtualinvoke r1.<com.android.email.mail.store.ImapStore$ImapException: java.lang.String getResponseCode()>();

        r3 = virtualinvoke r1.<com.android.email.mail.store.ImapStore$ImapException: java.lang.String getAlertText()>();

        $r8 = "AUTHENTICATIONFAILED";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label6;

        $r10 = "EXPIRED";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label7;

     label6:
        $r9 = new com.android.emailcommon.mail.AuthenticationFailedException;

        specialinvoke $r9.<com.android.emailcommon.mail.AuthenticationFailedException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r1);

        throw $r9;

     label7:
        $r11 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r11.<com.android.emailcommon.mail.MessagingException: void <init>(java.lang.String,java.lang.Throwable)>(r3, r1);

        throw $r11;

     label8:
        return;

        catch com.android.email.mail.store.ImapStore$ImapException from label1 to label3 with label4;
    }

    private void doSASLAuth() throws com.android.emailcommon.mail.MessagingException, java.io.IOException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponse r1, r11;
        java.lang.Object[] $r2, $r4, $r7;
        java.lang.String $r3, $r5, $r8;
        boolean $z0, $z1;
        com.android.email.mail.transport.MailTransport $r6, $r9;
        com.android.emailcommon.mail.AuthenticationFailedException $r10;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r3 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r2 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r3, "doSASLAuth", $r2);

        r1 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse getOAuthResponse()>();

        $z0 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean isOk()>();

        if $z0 != 0 goto label2;

        $r5 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r5, "failed to authenticate, retrying", $r4);

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        r0.<com.android.email.mail.store.ImapConnection: java.lang.String mLoginPhrase> = null;

        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        if $r6 == null goto label1;

        $r9 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        virtualinvoke $r9.<com.android.email.mail.transport.MailTransport: void close()>();

        r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport> = null;

     label1:
        r11 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse getOAuthResponse()>();

        $z1 = virtualinvoke r11.<com.android.email.mail.store.imap.ImapResponse: boolean isOk()>();

        if $z1 != 0 goto label2;

        $r8 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r8, "failed to authenticate, giving up", $r7);

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: void destroyResponses()>();

        $r10 = new com.android.emailcommon.mail.AuthenticationFailedException;

        specialinvoke $r10.<com.android.emailcommon.mail.AuthenticationFailedException: void <init>(java.lang.String)>("OAuth failed after refresh");

        throw $r10;

     label2:
        return;
    }

    private com.android.email.mail.store.imap.ImapResponse getOAuthResponse() throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.store.imap.ImapResponse r1;
        java.lang.String r2, r3, $r4, $r8;
        com.android.email.mail.store.imap.ImapResponseParser $r6;
        boolean $z0, $z1, $z2, $z3;
        com.android.email.mail.store.imap.ImapString $r7, $r9;
        com.android.emailcommon.mail.MessagingException $r11;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r4 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String getLoginPhrase()>();

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String sendCommandInternal(java.lang.String,boolean)>($r4, 1);

     label1:
        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponseParser mParser>;

        r1 = virtualinvoke $r6.<com.android.email.mail.store.imap.ImapResponseParser: com.android.email.mail.store.imap.ImapResponse readResponse()>();

        $z0 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean isTagged()>();

        if $z0 != 0 goto label2;

        $z3 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean isContinuationRequest()>();

        if $z3 == 0 goto label1;

     label2:
        $z1 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: boolean isContinuationRequest()>();

        if $z1 == 0 goto label3;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.lang.String sendCommandInternal(java.lang.String,boolean)>("", 1);

        r1 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse readResponse()>();

     label3:
        $r7 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getResponseCodeOrEmpty()>();

        r2 = virtualinvoke $r7.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        $r8 = "UNAVAILABLE";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label4;

        $r9 = virtualinvoke r1.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getAlertTextOrEmpty()>();

        r3 = virtualinvoke $r9.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        $r11 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r11.<com.android.emailcommon.mail.MessagingException: void <init>(int,java.lang.String)>(19, r3);

        throw $r11;

     label4:
        return r1;
    }

    private void doGetPathSeparator() throws com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        java.util.List r1;
        com.android.email.mail.store.ImapStore$ImapException r2, $r9;
        com.android.email.mail.store.imap.ImapResponse r3;
        com.android.email.mail.store.ImapStore $r4, $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r5;
        com.android.email.mail.store.imap.ImapString $r7;
        java.lang.String $r8, $r11;
        java.lang.Object[] $r10;
        java.io.IOException $r12;
        java.util.Iterator r14;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r4 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $z0 = virtualinvoke $r4.<com.android.email.mail.store.ImapStore: boolean isUserPrefixSet()>();

        if $z0 == 0 goto label9;

        r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label1:
        r1 = virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("LIST \"\" \"\"");

     label2:
        goto label6;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $z3 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z3 == 0 goto label4;

        $r11 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r11, r2, "ImapException", $r10);

     label4:
        goto label6;

     label5:
        $r12 := @caughtexception;

     label6:
        r14 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label9;

        $r5 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.email.mail.store.imap.ImapResponse) $r5;

        $z2 = virtualinvoke r3.<com.android.email.mail.store.imap.ImapResponse: boolean isDataResponse(int,java.lang.String)>(0, "LIST");

        if $z2 == 0 goto label8;

        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.ImapStore mImapStore>;

        $r7 = virtualinvoke r3.<com.android.email.mail.store.imap.ImapResponse: com.android.email.mail.store.imap.ImapString getStringOrEmpty(int)>(2);

        $r8 = virtualinvoke $r7.<com.android.email.mail.store.imap.ImapString: java.lang.String getString()>();

        virtualinvoke $r6.<com.android.email.mail.store.ImapStore: void setPathSeparator(java.lang.String)>($r8);

     label8:
        goto label7;

     label9:
        return;

        catch com.android.email.mail.store.ImapStore$ImapException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label5;
    }

    private com.android.email.mail.store.imap.ImapResponse doStartTls(boolean) throws java.io.IOException, com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.store.ImapConnection r0;
        boolean z0, $z1, $z2;
        com.android.email.mail.transport.MailTransport $r1, $r6;
        com.android.emailcommon.mail.MessagingException $r2;
        java.lang.Object[] $r3;
        java.lang.String $r4;
        com.android.email.mail.store.imap.ImapResponse $r7;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        $z1 = virtualinvoke $r1.<com.android.email.mail.transport.MailTransport: boolean canTryTlsSecurity()>();

        if $z1 == 0 goto label3;

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.email.mail.store.ImapConnection: java.util.List executeSimpleCommand(java.lang.String)>("STARTTLS");

        $r6 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.MailTransport mTransport>;

        virtualinvoke $r6.<com.android.email.mail.transport.MailTransport: void reopenTls()>();

        specialinvoke r0.<com.android.email.mail.store.ImapConnection: void createParser()>();

        $r7 = specialinvoke r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.store.imap.ImapResponse queryCapabilities()>();

        return $r7;

     label1:
        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 == 0 goto label2;

        $r4 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r4, "TLS not supported but required", $r3);

     label2:
        $r2 = new com.android.emailcommon.mail.MessagingException;

        specialinvoke $r2.<com.android.emailcommon.mail.MessagingException: void <init>(int)>(2);

        throw $r2;

     label3:
        return null;
    }

    void logLastDiscourse()
    {
        com.android.email.mail.store.ImapConnection r0;
        com.android.email.mail.transport.DiscourseLogger $r1;

        r0 := @this: com.android.email.mail.store.ImapConnection;

        $r1 = r0.<com.android.email.mail.store.ImapConnection: com.android.email.mail.transport.DiscourseLogger mDiscourse>;

        virtualinvoke $r1.<com.android.email.mail.transport.DiscourseLogger: void logLastDiscourse()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.email.mail.store.ImapConnection: int DISCOURSE_LOGGER_SIZE> = 64;

        <com.android.email.mail.store.ImapConnection: java.lang.String IMAP_REDACTED_LOG> = "[IMAP command redacted]";

        <com.android.email.mail.store.ImapConnection: int CAPABILITY_UIDPLUS> = 8;

        <com.android.email.mail.store.ImapConnection: int CAPABILITY_STARTTLS> = 4;

        <com.android.email.mail.store.ImapConnection: int CAPABILITY_NAMESPACE> = 2;

        <com.android.email.mail.store.ImapConnection: int CAPABILITY_ID> = 1;

        <com.android.email.mail.store.ImapConnection: boolean DEBUG_FORCE_SEND_ID> = 0;

        return;
    }
}
