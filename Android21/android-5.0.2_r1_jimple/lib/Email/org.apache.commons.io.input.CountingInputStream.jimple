public class org.apache.commons.io.input.CountingInputStream extends org.apache.commons.io.input.ProxyInputStream
{
    private long count;

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.io.input.CountingInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.input.CountingInputStream r0;
        byte[] r1;
        int i0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        r1 := @parameter0: byte[];

        i0 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[])>(r1);

        $l1 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        if i0 < 0 goto label1;

        $l3 = (long) i0;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        $l2 = $l1 + $l3;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l2;

        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.input.CountingInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        long $l3, $l4, $l5;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        if i2 < 0 goto label1;

        $l5 = (long) i2;

        goto label2;

     label1:
        $l5 = 0L;

     label2:
        $l4 = $l3 + $l5;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l4;

        return i2;
    }

    public int read() throws java.io.IOException
    {
        org.apache.commons.io.input.CountingInputStream r0;
        int i0;
        long $l1, $l2, $l3;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        i0 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: int read()>();

        $l1 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        if i0 < 0 goto label1;

        $l3 = 1L;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        $l2 = $l1 + $l3;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l2;

        return i0;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long l0, l1, $l2, $l3;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        l0 := @parameter0: long;

        l1 = specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: long skip(long)>(l0);

        $l2 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        $l3 = $l2 + l1;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = $l3;

        return l1;
    }

    public synchronized int getCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long l0;
        byte $b1;
        int $i2;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long getByteCount()>();

        $b1 = l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        $i2 = (int) l0;

        return $i2;
    }

    public synchronized int resetCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long l0;
        byte $b1;
        int $i2;
        java.lang.ArithmeticException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        l0 = virtualinvoke r0.<org.apache.commons.io.input.CountingInputStream: long resetByteCount()>();

        $b1 = l0 cmp 2147483647L;

        if $b1 <= 0 goto label1;

        $r1 = new java.lang.ArithmeticException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The byte count ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large to be converted to an int");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label1:
        $i2 = (int) l0;

        return $i2;
    }

    public synchronized long getByteCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        $l0 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        return $l0;
    }

    public synchronized long resetByteCount()
    {
        org.apache.commons.io.input.CountingInputStream r0;
        long l0;

        r0 := @this: org.apache.commons.io.input.CountingInputStream;

        l0 = r0.<org.apache.commons.io.input.CountingInputStream: long count>;

        r0.<org.apache.commons.io.input.CountingInputStream: long count> = 0L;

        return l0;
    }
}
