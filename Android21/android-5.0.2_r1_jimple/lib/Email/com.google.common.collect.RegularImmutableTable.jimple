abstract class com.google.common.collect.RegularImmutableTable extends com.google.common.collect.ImmutableTable
{
    private final com.google.common.collect.ImmutableSet cellSet;
    private static final com.google.common.base.Function GET_VALUE_FUNCTION;
    private transient volatile com.google.common.collect.ImmutableList valueList;

    private void <init>(com.google.common.collect.ImmutableSet)
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        r1 := @parameter0: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<com.google.common.collect.ImmutableTable: void <init>()>();

        r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet> = r1;

        return;
    }

    private com.google.common.base.Function getValueFunction()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.base.Function $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = <com.google.common.collect.RegularImmutableTable: com.google.common.base.Function GET_VALUE_FUNCTION>;

        return $r1;
    }

    public final com.google.common.collect.ImmutableCollection values()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableList r1, $r5;
        com.google.common.collect.ImmutableSet $r2;
        com.google.common.base.Function $r3;
        java.lang.Iterable $r4;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        r1 = r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableList valueList>;

        if r1 != null goto label1;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        $r3 = specialinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.base.Function getValueFunction()>();

        $r4 = staticinvoke <com.google.common.collect.Iterables: java.lang.Iterable transform(java.lang.Iterable,com.google.common.base.Function)>($r2, $r3);

        $r5 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r4);

        r1 = $r5;

        r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableList valueList> = $r5;

     label1:
        return r1;
    }

    public final int size()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;
        int $i0;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        $i0 = virtualinvoke $r1.<com.google.common.collect.ImmutableSet: int size()>();

        return $i0;
    }

    public final boolean containsValue(java.lang.Object)
    {
        com.google.common.collect.RegularImmutableTable r0;
        java.lang.Object r1;
        com.google.common.collect.ImmutableCollection $r2;
        boolean $z0;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        $z0 = virtualinvoke $r2.<com.google.common.collect.ImmutableCollection: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public final boolean isEmpty()
    {
        com.google.common.collect.RegularImmutableTable r0;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        return 0;
    }

    public final com.google.common.collect.ImmutableSet cellSet()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet>;

        return $r1;
    }

    static final com.google.common.collect.RegularImmutableTable forCells(java.util.List, java.util.Comparator, java.util.Comparator)
    {
        java.util.List r0;
        java.util.Comparator r1, r2;
        com.google.common.collect.RegularImmutableTable$2 r3, $r5;
        com.google.common.collect.RegularImmutableTable $r6;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        r2 := @parameter2: java.util.Comparator;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        if r1 != null goto label1;

        if r2 == null goto label2;

     label1:
        $r5 = new com.google.common.collect.RegularImmutableTable$2;

        specialinvoke $r5.<com.google.common.collect.RegularImmutableTable$2: void <init>(java.util.Comparator,java.util.Comparator)>(r1, r2);

        r3 = $r5;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r0, r3);

     label2:
        $r6 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)>(r0, r1, r2);

        return $r6;
    }

    static final com.google.common.collect.RegularImmutableTable forCells(java.lang.Iterable)
    {
        java.lang.Iterable r0;
        com.google.common.collect.RegularImmutableTable $r1;

        r0 := @parameter0: java.lang.Iterable;

        $r1 = staticinvoke <com.google.common.collect.RegularImmutableTable: com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable,java.util.Comparator,java.util.Comparator)>(r0, null, null);

        return $r1;
    }

    private static final com.google.common.collect.RegularImmutableTable forCellsInternal(java.lang.Iterable, java.util.Comparator, java.util.Comparator)
    {
        java.lang.Iterable r0;
        java.util.Comparator r1, r2;
        com.google.common.collect.ImmutableSet$Builder r3, r4, r5;
        java.util.Iterator r6;
        com.google.common.collect.Table$Cell r7;
        java.util.ArrayList r8, r9;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;
        com.google.common.collect.RegularImmutableTable $r10;
        java.lang.Object $r11, $r12, $r16;
        com.google.common.collect.ImmutableSet r17, r18, r19;
        com.google.common.collect.RegularImmutableTable$DenseImmutableTable r20;
        com.google.common.collect.RegularImmutableTable$SparseImmutableTable r21;

        r0 := @parameter0: java.lang.Iterable;

        r1 := @parameter1: java.util.Comparator;

        r2 := @parameter2: java.util.Comparator;

        r3 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        r5 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()>();

        r6 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.google.common.collect.Table$Cell) $r11;

        virtualinvoke r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>(r7);

        $r12 = interfaceinvoke r7.<com.google.common.collect.Table$Cell: java.lang.Object getRowKey()>();

        virtualinvoke r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r12);

        $r16 = interfaceinvoke r7.<com.google.common.collect.Table$Cell: java.lang.Object getColumnKey()>();

        virtualinvoke r5.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)>($r16);

        goto label1;

     label2:
        r17 = virtualinvoke r3.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        r18 = virtualinvoke r4.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        if r1 == null goto label3;

        r8 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r18);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r8, r1);

        r18 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r8);

     label3:
        r19 = virtualinvoke r5.<com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()>();

        if r2 == null goto label4;

        r9 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Iterable)>(r19);

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r9, r2);

        r19 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r9);

     label4:
        $i1 = virtualinvoke r17.<com.google.common.collect.ImmutableSet: int size()>();

        $i0 = virtualinvoke r18.<com.google.common.collect.ImmutableSet: int size()>();

        $i3 = virtualinvoke r19.<com.google.common.collect.ImmutableSet: int size()>();

        $i2 = $i0 * $i3;

        $i4 = $i2 / 2;

        if $i1 <= $i4 goto label5;

        r20 = new com.google.common.collect.RegularImmutableTable$DenseImmutableTable;

        $r10 = r20;

        specialinvoke r20.<com.google.common.collect.RegularImmutableTable$DenseImmutableTable: void <init>(com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>(r17, r18, r19);

        goto label6;

     label5:
        r21 = new com.google.common.collect.RegularImmutableTable$SparseImmutableTable;

        $r10 = r21;

        specialinvoke r21.<com.google.common.collect.RegularImmutableTable$SparseImmutableTable: void <init>(com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet,com.google.common.collect.ImmutableSet)>(r17, r18, r19);

     label6:
        return $r10;
    }

    public volatile java.util.Collection values()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableCollection $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableCollection values()>();

        return $r1;
    }

    public volatile java.util.Set cellSet()
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet $r1;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        $r1 = virtualinvoke r0.<com.google.common.collect.RegularImmutableTable: com.google.common.collect.ImmutableSet cellSet()>();

        return $r1;
    }

    void <init>(com.google.common.collect.ImmutableSet, com.google.common.collect.RegularImmutableTable$1)
    {
        com.google.common.collect.RegularImmutableTable r0;
        com.google.common.collect.ImmutableSet r1;
        com.google.common.collect.RegularImmutableTable$1 r2;

        r0 := @this: com.google.common.collect.RegularImmutableTable;

        r1 := @parameter0: com.google.common.collect.ImmutableSet;

        r2 := @parameter1: com.google.common.collect.RegularImmutableTable$1;

        specialinvoke r0.<com.google.common.collect.RegularImmutableTable: void <init>(com.google.common.collect.ImmutableSet)>(r1);

        return;
    }

    static void <clinit>()
    {
        com.google.common.collect.RegularImmutableTable$1 $r0;

        $r0 = new com.google.common.collect.RegularImmutableTable$1;

        specialinvoke $r0.<com.google.common.collect.RegularImmutableTable$1: void <init>()>();

        <com.google.common.collect.RegularImmutableTable: com.google.common.base.Function GET_VALUE_FUNCTION> = $r0;

        return;
    }
}
