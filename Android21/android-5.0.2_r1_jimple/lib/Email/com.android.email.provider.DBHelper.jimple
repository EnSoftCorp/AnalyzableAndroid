public final class com.android.email.provider.DBHelper extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final java.lang.String LEGACY_SCHEME_IMAP;
    private static final java.lang.String LEGACY_SCHEME_POP3;
    private static final java.lang.String LEGACY_SCHEME_EAS;
    private static final java.lang.String WHERE_ID;
    private static final java.lang.String TRIGGER_MAILBOX_DELETE;
    private static final java.lang.String TRIGGER_ACCOUNT_DELETE;
    private static final java.lang.String TRIGGER_HOST_AUTH_DELETE;
    public static final int DATABASE_VERSION;
    public static final int BODY_DATABASE_VERSION;
    private static java.lang.String MESSAGE_CHANGE_LOG_COLUMNS;
    private static final java.lang.String[] V21_ACCOUNT_PROJECTION;
    private static final int V21_ACCOUNT_RECV;
    private static final int V21_ACCOUNT_EMAIL;
    private static final java.lang.String[] V21_HOSTAUTH_PROJECTION;
    private static final int V21_HOSTAUTH_PROTOCOL;
    private static final int V21_HOSTAUTH_PASSWORD;
    private static final java.lang.String[] V25_ACCOUNT_PROJECTION;
    private static final int V25_ACCOUNT_ID;
    private static final int V25_ACCOUNT_FLAGS;
    private static final int V25_ACCOUNT_RECV;
    private static final java.lang.String[] V25_HOSTAUTH_PROJECTION;
    private static final int V25_HOSTAUTH_PROTOCOL;
    private static final int[] ADDRESS_COLUMN_INDICES;
    private static final java.lang.String[] ADDRESS_COLUMN_NAMES;

    public void <init>()
    {
        com.android.email.provider.DBHelper r0;

        r0 := @this: com.android.email.provider.DBHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.lang.String createIndex(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r4, $r13;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create index ");

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    static void createMessageCountTriggers(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger message_count_message_insert after insert on Message begin update Mailbox set messageCount=messageCount+1  where _id=NEW.mailboxKey; end");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger message_count_message_delete after delete on Message begin update Mailbox set messageCount=messageCount-1  where _id=OLD.mailboxKey; end");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger message_count_message_move after update of mailboxKey on Message begin update Mailbox set messageCount=messageCount-1  where _id=OLD.mailboxKey; update Mailbox set messageCount=messageCount+1 where _id=NEW.mailboxKey; end");

        return;
    }

    static void createCredentialsTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, provider text,accessToken text,refreshToken text,expiration integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Credential");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger host_auth_delete after delete on HostAuth begin delete from Credential where _id=old.credentialKey and (select count(*) from HostAuth where credentialKey=old.credentialKey)=0; end");

        return;
    }

    static void dropDeleteDuplicateMessagesTrigger(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop trigger message_delete_duplicates_on_insert");

        return;
    }

    static void createDeleteDuplicateMessagesTrigger(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29;
        java.lang.String $r4, $r30;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create trigger message_delete_duplicates_on_insert before insert on Message for each row when new.syncServerId is not null and (select type from Mailbox where _id=new.mailboxKey)!=8 and (select HostAuth.protocol from HostAuth,Account where new.accountKey=Account._id and Account.hostAuthKeyRecv=HostAuth._id)=\'");

        $r4 = virtualinvoke r0.<android.content.Context: java.lang.String getString(int)>(2131296973);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" begin delete from ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where new.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syncServerId");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syncServerId");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and new.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accountKey");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accountKey");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and (select ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mailbox");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Mailbox");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mailboxKey");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")!=");

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(8);

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; end");

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r30);

        return;
    }

    static void createMessageTable(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String r2, r3, r4, r7, $r16, $r20, $r24, $r26;
        java.lang.String[] r5, r6, $r27;
        int i0, i1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r21, $r22, $r23, $r25;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        r2 = "displayName text, timeStamp integer, subject text, flagRead integer, flagLoaded integer, flagFavorite integer, flagAttachment integer, flags integer, clientId integer, messageId text, mailboxKey integer, accountKey integer, fromList text, toList text, ccList text, bccList text, replyToList text, meetingInfo text, snippet text, protocolSearchInfo text, threadTopic text, syncData text, flagSeen integer, mainMailboxKey integer);";

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (_id integer primary key autoincrement, syncServerId text, syncServerTimeStamp integer, ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (_id integer unique, syncServerId text, syncServerTimeStamp integer, ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Message");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r16);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Message_Updates");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r20);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Message_Deletes");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r24);

        $r27 = newarray (java.lang.String)[5];

        $r27[0] = "timeStamp";

        $r27[1] = "flagRead";

        $r27[2] = "flagLoaded";

        $r27[3] = "mailboxKey";

        $r27[4] = "syncServerId";

        r5 = $r27;

        r6 = r5;

        i0 = lengthof r6;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r7 = r6[i1];

        $r26 = staticinvoke <com.android.email.provider.DBHelper: java.lang.String createIndex(java.lang.String,java.lang.String)>("Message", r7);

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r26);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger message_delete before delete on Message begin delete from Attachment  where messageKey=old._id; end");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger unread_message_insert before insert on Message when NEW.flagRead=0 begin update Mailbox set unreadCount=unreadCount+1  where _id=NEW.mailboxKey; end");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger unread_message_delete before delete on Message when OLD.flagRead=0 begin update Mailbox set unreadCount=unreadCount-1  where _id=OLD.mailboxKey; end");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger unread_message_move before update of mailboxKey on Message when OLD.flagRead=0 begin update Mailbox set unreadCount=unreadCount-1  where _id=OLD.mailboxKey; update Mailbox set unreadCount=unreadCount+1 where _id=NEW.mailboxKey; end");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger unread_message_read before update of flagRead on Message when OLD.flagRead!=NEW.flagRead begin update Mailbox set unreadCount=unreadCount+ case OLD.flagRead when 0 then -1 else 1 end  where _id=OLD.mailboxKey; end");

        staticinvoke <com.android.email.provider.DBHelper: void createMessageCountTriggers(android.database.sqlite.SQLiteDatabase)>(r1);

        staticinvoke <com.android.email.provider.DBHelper: void createDeleteDuplicateMessagesTrigger(android.content.Context,android.database.sqlite.SQLiteDatabase)>(r0, r1);

        return;
    }

    static void resetMessageTable(android.content.Context, android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;
        int i0, i1;
        android.database.SQLException $r3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Message");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Message_Updates");

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Message_Deletes");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <com.android.email.provider.DBHelper: void createMessageTable(android.content.Context,android.database.sqlite.SQLiteDatabase)>(r0, r1);

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void createMessageChangeLogTableIndices(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r2, $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <com.android.email.provider.DBHelper: java.lang.String createIndex(java.lang.String,java.lang.String)>(r1, "messageKey");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r3 = staticinvoke <com.android.email.provider.DBHelper: java.lang.String createIndex(java.lang.String,java.lang.String)>(r1, "accountKey");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r3);

        return;
    }

    private static void createMessageChangeLogTableTriggers(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r14, $r26;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r27;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create trigger ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_delete_message before delete on ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Message");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for each row begin delete from ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("messageKey");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=old.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; end");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create trigger ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_delete_account before delete on ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Account");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for each row begin delete from ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where ");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("accountKey");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=old.");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; end");

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r26);

        return;
    }

    private static void createMessageMoveTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r3, $r13;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table MessageMove (");

        $r3 = <com.android.email.provider.DBHelper: java.lang.String MESSAGE_CHANGE_LOG_COLUMNS>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srcFolderKey");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dstFolderKey");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer, ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srcFolderServerId");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" text, ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dstFolderServerId");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" text);");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r13);

        staticinvoke <com.android.email.provider.DBHelper: void createMessageChangeLogTableIndices(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "MessageMove");

        staticinvoke <com.android.email.provider.DBHelper: void createMessageChangeLogTableTriggers(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "MessageMove");

        return;
    }

    private static void createMessageStateChangeTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.String $r3, $r13;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table MessageStateChange (");

        $r3 = <com.android.email.provider.DBHelper: java.lang.String MESSAGE_CHANGE_LOG_COLUMNS>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("oldFlagRead");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("newFlagRead");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer, ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("oldFlagFavorite");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer, ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("newFlagFavorite");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" integer);");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r13);

        staticinvoke <com.android.email.provider.DBHelper: void createMessageChangeLogTableIndices(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "MessageStateChange");

        staticinvoke <com.android.email.provider.DBHelper: void createMessageChangeLogTableTriggers(android.database.sqlite.SQLiteDatabase,java.lang.String)>(r0, "MessageStateChange");

        return;
    }

    static void createAccountTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, displayName text, emailAddress text, syncKey text, syncLookback integer, syncInterval text, hostAuthKeyRecv integer, hostAuthKeySend integer, flags integer, isDefault integer, compatibilityUuid text, senderName text, ringtoneUri text, protocolVersion text, newMessageCount integer, securityFlags integer, securitySyncKey text, signature text, policyKey integer, maxAttachmentSize integer, pingDuration integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Account");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger account_delete before delete on Account begin delete from Mailbox where accountKey=old._id; delete from HostAuth where _id=old.hostAuthKeyRecv; delete from HostAuth where _id=old.hostAuthKeySend; delete from Policy where _id=old.policyKey; end");

        return;
    }

    static void resetAccountTable(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        android.database.SQLException $r2;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Account");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <com.android.email.provider.DBHelper: void createAccountTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    static void createPolicyTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, passwordMode integer, passwordMinLength integer, passwordExpirationDays integer, passwordHistory integer, passwordComplexChars integer, passwordMaxFails integer, maxScreenLockTime integer, requireRemoteWipe integer, requireEncryption integer, requireEncryptionExternal integer, requireManualSyncRoaming integer, dontAllowCamera integer, dontAllowAttachments integer, dontAllowHtml integer, maxAttachmentSize integer, maxTextTruncationSize integer, maxHTMLTruncationSize integer, maxEmailLookback integer, maxCalendarLookback integer, passwordRecoveryEnabled integer, protocolPoliciesEnforced text, protocolPoliciesUnsupported text);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Policy");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        return;
    }

    static void createHostAuthTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, protocol text, address text, port integer, flags integer, login text, password text, domain text, accountKey integer,certAlias text,serverCert blob,credentialKey integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table HostAuth");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        return;
    }

    static void resetHostAuthTable(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        android.database.SQLException $r2;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table HostAuth");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <com.android.email.provider.DBHelper: void createHostAuthTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    static void createMailboxTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, displayName text, serverId text, parentServerId text, parentKey integer, accountKey integer, type integer, delimiter integer, syncKey text, syncLookback integer, syncInterval integer, syncTime integer, unreadCount integer, flagVisible integer, flags integer, visibleLimit integer, syncStatus text, messageCount integer not null default 0, lastTouchedTime integer default 0, uiSyncStatus integer default 0, uiLastSyncResult integer default 0, lastNotifiedMessageKey integer not null default 0, lastNotifiedMessageCount integer not null default 0, totalCount integer, hierarchicalName text, lastFullSyncTime integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Mailbox");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create index mailbox_serverId on Mailbox (serverId)");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create index mailbox_accountKey on Mailbox (accountKey)");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("create trigger mailbox_delete before delete on Mailbox begin delete from Message  where mailboxKey=old._id; delete from Message_Updates  where mailboxKey=old._id; delete from Message_Deletes  where mailboxKey=old._id; end");

        return;
    }

    static void resetMailboxTable(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        android.database.SQLException $r2;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Mailbox");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <com.android.email.provider.DBHelper: void createMailboxTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    static void createAttachmentTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5, $r6;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, fileName text, mimeType text, size integer, contentId text, contentUri text, messageKey integer, location text, encoding text, content text, flags integer, content_bytes blob, accountKey integer, uiState integer, uiDestination integer, uiDownloadedSize integer, cachedFile text);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Attachment");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        $r6 = staticinvoke <com.android.email.provider.DBHelper: java.lang.String createIndex(java.lang.String,java.lang.String)>("Attachment", "messageKey");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r6);

        return;
    }

    static void resetAttachmentTable(android.database.sqlite.SQLiteDatabase, int, int)
    {
        android.database.sqlite.SQLiteDatabase r0;
        int i0, i1;
        android.database.SQLException $r2;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Attachment");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        staticinvoke <com.android.email.provider.DBHelper: void createAttachmentTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    static void createQuickResponseTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, quickResponse text, accountKey integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table QuickResponse");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        return;
    }

    static void createBodyTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        java.lang.String r1, $r5, $r6;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 = " (_id integer primary key autoincrement, messageKey integer, htmlContent text, textContent text, htmlReply text, textReply text, sourceMessageKey text, introText text, quotedTextStartPos integer);";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create table Body");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

        $r6 = staticinvoke <com.android.email.provider.DBHelper: java.lang.String createIndex(java.lang.String,java.lang.String)>("Body", "messageKey");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r6);

        return;
    }

    private static void upgradeBodyToVersion5(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("drop table Body");

        staticinvoke <com.android.email.provider.DBHelper: void createBodyTable(android.database.sqlite.SQLiteDatabase)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>("EmailProvider", r1, "Exception upgrading EmailProviderBody.db from <v5", $r3);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeBodyFromVersion5ToVersion6(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("alter table Body add introText text");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>("EmailProvider", r1, "Exception upgrading EmailProviderBody.db from v5 to v6", $r3);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeBodyFromVersion6ToVersion8(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.Object[] $r3;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("alter table Body add quotedTextStartPos integer");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>("EmailProvider", r1, "Exception upgrading EmailProviderBody.db from v6 to v8", $r3);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeBodyFromVersion100ToVersion101(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.String[] r2, $r11;
        android.database.Cursor r3;
        android.database.sqlite.SQLiteStatement r4, r5;
        long l0;
        java.lang.String r6, $r19, $r23, r28;
        java.io.File r7, r29;
        java.io.FileWriter r8, $r12, $r14, r30;
        java.lang.Throwable r9, r10, $r25, $r26;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r13;
        java.lang.Object[] $r15, $r18, $r22;
        android.database.SQLException $r16, r32;
        java.io.IOException $r17, r33;
        java.lang.RuntimeException $r20;
        android.database.sqlite.SQLiteDoneException $r21, $r24, r27, r31;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

     label01:
        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "messageKey";

        r2 = $r11;

        r3 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Body", r2, null, null, null, null, null);

        if r3 != null goto label02;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not read body table for upgrade");

        throw $r13;

     label02:
        r4 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("SELECT htmlContent FROM Body WHERE messageKey=?");

        r5 = virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>("SELECT textContent FROM Body WHERE messageKey=?");

     label03:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label20;

        l0 = interfaceinvoke r3.<android.database.Cursor: long getLong(int)>(0);

        virtualinvoke r4.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(1, l0);

     label04:
        r6 = virtualinvoke r4.<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z1 != 0 goto label09;

        r7 = staticinvoke <com.android.email.provider.EmailProvider: java.io.File getBodyFile(android.content.Context,long,java.lang.String)>(r0, l0, "html");

        $r14 = new java.io.FileWriter;

        specialinvoke $r14.<java.io.FileWriter: void <init>(java.io.File)>(r7);

        r8 = $r14;

     label05:
        virtualinvoke r8.<java.io.FileWriter: void write(java.lang.String)>(r6);

     label06:
        virtualinvoke r8.<java.io.FileWriter: void close()>();

        goto label09;

     label07:
        $r26 := @caughtexception;

        r9 = $r26;

     label08:
        virtualinvoke r8.<java.io.FileWriter: void close()>();

        throw r9;

     label09:
        goto label11;

     label10:
        $r21 := @caughtexception;

        r27 = $r21;

        $r19 = <com.android.mail.utils.LogUtils: java.lang.String TAG>;

        $r18 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int v(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r19, r27, "Done with the HTML column", $r18);

     label11:
        virtualinvoke r5.<android.database.sqlite.SQLiteStatement: void bindLong(int,long)>(1, l0);

     label12:
        r28 = virtualinvoke r5.<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r28);

        if $z2 != 0 goto label17;

        r29 = staticinvoke <com.android.email.provider.EmailProvider: java.io.File getBodyFile(android.content.Context,long,java.lang.String)>(r0, l0, "txt");

        $r12 = new java.io.FileWriter;

        specialinvoke $r12.<java.io.FileWriter: void <init>(java.io.File)>(r29);

        r30 = $r12;

     label13:
        virtualinvoke r30.<java.io.FileWriter: void write(java.lang.String)>(r28);

     label14:
        virtualinvoke r30.<java.io.FileWriter: void close()>();

        goto label17;

     label15:
        $r25 := @caughtexception;

        r10 = $r25;

     label16:
        virtualinvoke r30.<java.io.FileWriter: void close()>();

        throw r10;

     label17:
        goto label19;

     label18:
        $r24 := @caughtexception;

        r31 = $r24;

        $r23 = <com.android.mail.utils.LogUtils: java.lang.String TAG>;

        $r22 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int v(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>($r23, r31, "Done with the text column", $r22);

     label19:
        goto label03;

     label20:
        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Body set htmlContent=NULL,textContent=NULL");

     label21:
        goto label24;

     label22:
        $r16 := @caughtexception;

        r32 = $r16;

        $r15 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])>("EmailProvider", r32, "Exception upgrading EmailProviderBody.db from v100 to v101", $r15);

        goto label24;

     label23:
        $r17 := @caughtexception;

        r33 = $r17;

        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r33);

        throw $r20;

     label24:
        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch android.database.sqlite.SQLiteDoneException from label04 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch android.database.sqlite.SQLiteDoneException from label12 to label17 with label18;
        catch android.database.SQLException from label01 to label21 with label22;
        catch java.io.IOException from label01 to label21 with label23;
    }

    static void recalculateMessageCount(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set messageCount= (select count(*) from Message where mailboxKey = Mailbox._id)");

        return;
    }

    static void convertPolicyFlagsToPolicyTable(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.Cursor r1;
        android.content.ContentValues r2, $r7, $r8;
        java.lang.String[] r3, $r6;
        long l0, l1, $l2;
        com.android.emailcommon.provider.Policy r4;
        java.lang.Throwable r5, $r11;
        boolean $z0;
        java.lang.Long $r9;
        java.lang.String $r10;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "_id";

        $r6[1] = "securityFlags";

        r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Account", $r6, "securityFlags>0", null, null, null, null);

     label1:
        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        r2 = $r7;

        r3 = newarray (java.lang.String)[1];

     label2:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label3;

        l0 = interfaceinvoke r1.<android.database.Cursor: long getLong(int)>(1);

        r4 = staticinvoke <com.android.emailcommon.service.LegacyPolicySet: com.android.emailcommon.provider.Policy flagsToPolicy(long)>(l0);

        $r8 = virtualinvoke r4.<com.android.emailcommon.provider.Policy: android.content.ContentValues toContentValues()>();

        l1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("Policy", null, $r8);

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("policyKey", $r9);

        virtualinvoke r2.<android.content.ContentValues: void putNull(java.lang.String)>("securityFlags");

        $l2 = interfaceinvoke r1.<android.database.Cursor: long getLong(int)>(0);

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        r3[0] = $r10;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("Account", r2, "_id=?", r3);

        goto label2;

     label3:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        goto label6;

     label4:
        $r11 := @caughtexception;

        r5 = $r11;

     label5:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    static void upgradeFromVersion17ToVersion18(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE Mailbox SET serverId=displayName WHERE Mailbox._id IN ( SELECT Mailbox._id FROM Mailbox,Account,HostAuth WHERE (Mailbox.parentKey isnull OR Mailbox.parentKey=0 ) AND Mailbox.accountKey=Account._id AND Account.hostAuthKeyRecv=HostAuth._id AND ( HostAuth.protocol=\'imap\' OR HostAuth.protocol=\'pop3\' ) )");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 17 to 18 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r6, $r7);

     label4:
        staticinvoke <com.android.email.provider.ContentCache: void invalidateAllCaches()>();

        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void createAccountManagerAccount(android.content.Context, java.lang.String, java.lang.String, java.lang.String)
    {
        android.content.Context r0;
        java.lang.String r1, r2, r3, $r8, $r9;
        android.accounts.AccountManager r4;
        android.accounts.Account r5, $r7;
        boolean $z0;
        java.lang.Object[] $r6;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 = staticinvoke <android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>(r0);

        $z0 = staticinvoke <com.android.email.provider.DBHelper: boolean isAccountPresent(android.accounts.AccountManager,java.lang.String,java.lang.String)>(r4, r1, r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r1;

        $r6[1] = r2;

        staticinvoke <com.android.mail.utils.LogUtils: int v(java.lang.String,java.lang.String,java.lang.Object[])>("Email", "Creating account %s %s", $r6);

        $r7 = new android.accounts.Account;

        specialinvoke $r7.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r5 = $r7;

        virtualinvoke r4.<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>(r5, r3, null);

        $r8 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        staticinvoke <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>(r5, $r8, 1);

        $r9 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        staticinvoke <android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>(r5, $r9, 1);

        staticinvoke <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>(r5, "com.android.contacts", 0);

        staticinvoke <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>(r5, "com.android.calendar", 0);

        return;
    }

    private static boolean isAccountPresent(android.accounts.AccountManager, java.lang.String, java.lang.String)
    {
        android.accounts.AccountManager r0;
        java.lang.String r1, r2, $r6, $r7;
        android.accounts.Account[] r3, r4;
        int i0, i1;
        android.accounts.Account r5;
        boolean $z0, $z1;

        r0 := @parameter0: android.accounts.AccountManager;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 = virtualinvoke r0.<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>(r2);

        if r3 == null goto label3;

        r4 = r3;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r5 = r4[i1];

        $r6 = r5.<android.accounts.Account: java.lang.String name>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r6, r1);

        if $z0 == 0 goto label2;

        $r7 = r5.<android.accounts.Account: java.lang.String type>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    static void upgradeFromVersion21ToVersion22(android.database.sqlite.SQLiteDatabase, android.content.Context)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.content.Context r1;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: android.content.Context;

        staticinvoke <com.android.email.provider.DBHelper: void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase,android.content.Context)>(r0, r1);

        return;
    }

    private static void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase, android.content.Context)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.content.Context r1;
        com.google.common.collect.ImmutableMap r2;
        android.database.Cursor r3, r5;
        java.lang.String[] r4, $r17, $r19;
        java.lang.String r6, $r11, $r13, $r16, $r18, $r20, $r22, $r23, $r25, $r27, $r31, $r32, $r35, $r36, $r37, $r39, $r43, $r47;
        android.accounts.Account r7, $r34;
        java.lang.Throwable r8, r9, $r41, $r42;
        com.google.common.collect.ImmutableMap$Builder $r10, $r12, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r21, $r38;
        java.lang.StringBuilder $r24, $r26, $r28, $r29, $r30, $r44, $r45, $r46;
        java.lang.Object[] $r33, $r48;
        android.database.SQLException $r40, r49;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: android.content.Context;

        $r10 = new com.google.common.collect.ImmutableMap$Builder;

        specialinvoke $r10.<com.google.common.collect.ImmutableMap$Builder: void <init>()>();

        $r11 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131296957);

        $r12 = virtualinvoke $r10.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("pop3", $r11);

        $r13 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131296959);

        $r14 = virtualinvoke $r12.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("imap", $r13);

        $r16 = virtualinvoke r1.<android.content.Context: java.lang.String getString(int)>(2131296956);

        $r15 = virtualinvoke $r14.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap$Builder put(java.lang.Object,java.lang.Object)>("eas", $r16);

        r2 = virtualinvoke $r15.<com.google.common.collect.ImmutableMap$Builder: com.google.common.collect.ImmutableMap build()>();

     label01:
        $r17 = <com.android.email.provider.DBHelper: java.lang.String[] V21_ACCOUNT_PROJECTION>;

        r3 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Account", $r17, null, null, null, null, null);

     label02:
        r4 = newarray (java.lang.String)[1];

     label03:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label12;

        $r18 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(0);

        r4[0] = $r18;

        $r19 = <com.android.email.provider.DBHelper: java.lang.String[] V21_HOSTAUTH_PROJECTION>;

        r5 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("HostAuth", $r19, "_id=?", r4, null, null, null);

     label04:
        $z1 = interfaceinvoke r5.<android.database.Cursor: boolean moveToFirst()>();

        if $z1 == 0 goto label08;

        r6 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r20 = "imap";

        $z2 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z2 != 0 goto label05;

        $r31 = "pop3";

        $z5 = virtualinvoke $r31.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z5 == 0 goto label07;

     label05:
        $z3 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z3 == 0 goto label06;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Create AccountManager account for ");

        $r29 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("account: ");

        $r27 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r32 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r32, $r33);

     label06:
        $r23 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r21 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r22 = (java.lang.String) $r21;

        $r25 = interfaceinvoke r5.<android.database.Cursor: java.lang.String getString(int)>(1);

        staticinvoke <com.android.email.provider.DBHelper: void createAccountManagerAccount(android.content.Context,java.lang.String,java.lang.String,java.lang.String)>(r1, $r23, $r22, $r25);

        goto label08;

     label07:
        $r35 = "eas";

        $z4 = virtualinvoke $r35.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 == 0 goto label08;

        $r34 = new android.accounts.Account;

        $r39 = interfaceinvoke r3.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r38 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r37 = (java.lang.String) $r38;

        specialinvoke $r34.<android.accounts.Account: void <init>(java.lang.String,java.lang.String)>($r39, $r37);

        r7 = $r34;

        $r36 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        staticinvoke <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)>(r7, $r36, 1);

        $r43 = <com.android.emailcommon.provider.EmailContent: java.lang.String AUTHORITY>;

        staticinvoke <android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>(r7, $r43, 1);

     label08:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        goto label11;

     label09:
        $r42 := @caughtexception;

        r8 = $r42;

     label10:
        interfaceinvoke r5.<android.database.Cursor: void close()>();

        throw r8;

     label11:
        goto label03;

     label12:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        goto label15;

     label13:
        $r41 := @caughtexception;

        r9 = $r41;

     label14:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        throw r9;

     label15:
        goto label17;

     label16:
        $r40 := @caughtexception;

        r49 = $r40;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while migrating accounts ");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r49);

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r47, $r48);

     label17:
        return;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label02 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch android.database.SQLException from label01 to label15 with label16;
    }

    private static void upgradeFromVersion22ToVersion23(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("alter table Mailbox add column lastTouchedTime integer default 0;");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 22 to 23 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r6, $r7);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeFromVersion23ToVersion24(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("alter table HostAuth add column certAlias text;");

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 23 to 24 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r6, $r7);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeFromVersion24ToVersion25(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.Object[] $r7;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label1:
        staticinvoke <com.android.email.provider.DBHelper: void createQuickResponseTable(android.database.sqlite.SQLiteDatabase)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 24 to 25 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r6, $r7);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeFromVersion25ToVersion26(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.Cursor r1, r4;
        android.content.ContentValues r2, $r10;
        java.lang.String[] r3, $r9, $r12, $r14;
        java.lang.String r5, r6, $r11, $r13, $r20;
        int i0, $i1;
        java.lang.Throwable r7, r8, $r16, $r22;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r15;
        java.lang.StringBuilder $r17, $r19, $r21;
        android.database.SQLException $r18, r24;
        java.lang.Object[] $r23;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label01:
        $r9 = <com.android.email.provider.DBHelper: java.lang.String[] V25_ACCOUNT_PROJECTION>;

        r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Account", $r9, null, null, null, null, null);

        $r10 = new android.content.ContentValues;

        specialinvoke $r10.<android.content.ContentValues: void <init>()>();

        r2 = $r10;

     label02:
        r3 = newarray (java.lang.String)[1];

     label03:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label09;

        $r11 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(2);

        r3[0] = $r11;

        $r12 = <com.android.email.provider.DBHelper: java.lang.String[] V25_HOSTAUTH_PROJECTION>;

        r4 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("HostAuth", $r12, "_id=?", r3, null, null, null);

     label04:
        $z1 = interfaceinvoke r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z1 == 0 goto label05;

        r5 = interfaceinvoke r4.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r13 = "imap";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z2 == 0 goto label05;

        r6 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        i0 = interfaceinvoke r1.<android.database.Cursor: int getInt(int)>(1);

        $i1 = i0 | 2048;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("flags", $r15);

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = r6;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("Account", r2, "_id=?", $r14);

     label05:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        goto label08;

     label06:
        $r16 := @caughtexception;

        r7 = $r16;

     label07:
        interfaceinvoke r4.<android.database.Cursor: void close()>();

        throw r7;

     label08:
        goto label03;

     label09:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        goto label12;

     label10:
        $r22 := @caughtexception;

        r8 = $r22;

     label11:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw r8;

     label12:
        goto label14;

     label13:
        $r18 := @caughtexception;

        r24 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 25 to 26 ");

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r20, $r23);

     label14:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label02 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch android.database.SQLException from label01 to label12 with label13;
    }

    private static void upgradeFromVersion29ToVersion30(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.Cursor r1;
        android.content.ContentValues r2, $r7;
        java.lang.String[] r3, $r6, $r13;
        int i0, $i1, $i3;
        com.android.emailcommon.mail.Address[] r4;
        java.lang.Throwable r5, $r14;
        boolean $z0;
        int[] $r8, $r10;
        java.lang.String $r9, $r11, $r12, $r15, $r19;
        java.lang.StringBuilder $r16, $r18, $r20;
        android.database.SQLException $r17, r22;
        java.lang.Object[] $r21;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label01:
        $r6 = <com.android.emailcommon.provider.EmailContent$Message: java.lang.String[] CONTENT_PROJECTION>;

        r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Message", $r6, null, null, null, null, null);

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        r2 = $r7;

        r3 = newarray (java.lang.String)[1];

     label02:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label05;

        i0 = 0;

     label03:
        $r8 = <com.android.email.provider.DBHelper: int[] ADDRESS_COLUMN_INDICES>;

        $i1 = lengthof $r8;

        if i0 >= $i1 goto label04;

        $r10 = <com.android.email.provider.DBHelper: int[] ADDRESS_COLUMN_INDICES>;

        $i3 = $r10[i0];

        $r11 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>($i3);

        r4 = staticinvoke <com.android.emailcommon.mail.Address: com.android.emailcommon.mail.Address[] fromHeader(java.lang.String)>($r11);

        $r13 = <com.android.email.provider.DBHelper: java.lang.String[] ADDRESS_COLUMN_NAMES>;

        $r12 = $r13[i0];

        $r15 = staticinvoke <com.android.emailcommon.mail.Address: java.lang.String toHeader(com.android.emailcommon.mail.Address[])>(r4);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r12, $r15);

        i0 = i0 + 1;

        goto label03;

     label04:
        $r9 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        r3[0] = $r9;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("Message", r2, "_id=?", r3);

        goto label02;

     label05:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        goto label08;

     label06:
        $r14 := @caughtexception;

        r5 = $r14;

     label07:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw r5;

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        r22 = $r17;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 29 to 30 ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r19, $r21);

     label10:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.database.SQLException from label01 to label08 with label09;
    }

    private static void upgradeFromVersion125ToVersion126(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.Cursor r1;
        android.content.ContentValues r2, $r7;
        java.lang.String[] r3, $r6, $r13;
        int i0, $i1, $i3;
        com.android.emailcommon.mail.Address[] r4;
        java.lang.Throwable r5, $r14;
        boolean $z0;
        int[] $r8, $r10;
        java.lang.String $r9, $r11, $r12, $r15, $r19;
        java.lang.StringBuilder $r16, $r18, $r20;
        android.database.SQLException $r17, r22;
        java.lang.Object[] $r21;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label01:
        $r6 = <com.android.emailcommon.provider.EmailContent$Message: java.lang.String[] CONTENT_PROJECTION>;

        r1 = virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("Message", $r6, null, null, null, null, null);

        $r7 = new android.content.ContentValues;

        specialinvoke $r7.<android.content.ContentValues: void <init>()>();

        r2 = $r7;

        r3 = newarray (java.lang.String)[1];

     label02:
        $z0 = interfaceinvoke r1.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label05;

        i0 = 0;

     label03:
        $r8 = <com.android.email.provider.DBHelper: int[] ADDRESS_COLUMN_INDICES>;

        $i1 = lengthof $r8;

        if i0 >= $i1 goto label04;

        $r10 = <com.android.email.provider.DBHelper: int[] ADDRESS_COLUMN_INDICES>;

        $i3 = $r10[i0];

        $r11 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>($i3);

        r4 = staticinvoke <com.android.emailcommon.mail.Address: com.android.emailcommon.mail.Address[] fromHeader(java.lang.String)>($r11);

        $r13 = <com.android.email.provider.DBHelper: java.lang.String[] ADDRESS_COLUMN_NAMES>;

        $r12 = $r13[i0];

        $r15 = staticinvoke <com.android.emailcommon.mail.Address: java.lang.String toString(com.android.emailcommon.mail.Address[])>(r4);

        virtualinvoke r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r12, $r15);

        i0 = i0 + 1;

        goto label03;

     label04:
        $r9 = interfaceinvoke r1.<android.database.Cursor: java.lang.String getString(int)>(0);

        r3[0] = $r9;

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("Message", r2, "_id=?", r3);

        goto label02;

     label05:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        goto label08;

     label06:
        $r14 := @caughtexception;

        r5 = $r14;

     label07:
        interfaceinvoke r1.<android.database.Cursor: void close()>();

        throw r5;

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        r22 = $r17;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 125 to 126 ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r19, $r21);

     label10:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.database.SQLException from label01 to label08 with label09;
    }

    private static void upgradeFromVersion126ToVersion127(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r26, $r27, $r28;
        java.lang.String $r4, $r18, $r25, $r29;
        android.database.SQLException $r24, r31;
        java.lang.Object[] $r30;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE Account SET flags=flags|");

        $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(6272L);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IN (SELECT t1.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Account");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" t1 INNER JOIN ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HostAuth");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" t2 ON t1.");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hostAuthKeyRecv");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=t2._id WHERE t2.");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocol");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r18 = virtualinvoke r0.<android.content.Context: java.lang.String getString(int)>(2131296973);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AND CAST(t1.");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("protocolVersion");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AS REAL)>=12.0)");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r25);

     label2:
        goto label4;

     label3:
        $r24 := @caughtexception;

        r31 = $r24;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 126 to 127 ");

        $r27 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r29, $r30);

     label4:
        return;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    private static void upgradeToEmail2(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.database.SQLException r1, $r2, $r8, $r15, $r21, r26, r27, r28;
        java.lang.StringBuilder $r3, $r4, $r5, $r9, $r10, $r11, $r14, $r16, $r18, $r20, $r22, $r24;
        java.lang.String $r6, $r12, $r17, $r23;
        java.lang.Object[] $r7, $r13, $r19, $r25;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

     label01:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set lastNotifiedMessageKey=0 where lastNotifiedMessageKey IS NULL");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set lastNotifiedMessageCount=0 where lastNotifiedMessageCount IS NULL");

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        r1 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 31 to 32/100 ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r12, $r13);

     label04:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Attachment set uiState=3 where contentUri is not null;");

     label05:
        goto label07;

     label06:
        $r2 := @caughtexception;

        r26 = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 32 to 33/100 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r6, $r7);

     label07:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set lastTouchedTime = 2 WHERE type = 3");

        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set lastTouchedTime = 1 WHERE type = 5");

     label08:
        goto label10;

     label09:
        $r21 := @caughtexception;

        r27 = $r21;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 34 to 35/100 ");

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r23, $r25);

     label10:
        virtualinvoke r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("update Mailbox set flags=flags|64 where (flags&8)!=0 and accountKey IN (SELECT Account._id from Account,HostAuth where Account.hostAuthKeyRecv=HostAuth._id and protocol=\'eas\')");

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        r28 = $r15;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception upgrading EmailProvider.db from 35/36 to 37/100 ");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int w(java.lang.String,java.lang.String,java.lang.Object[])>("EmailProvider", $r17, $r19);

     label13:
        return;

        catch android.database.SQLException from label01 to label02 with label03;
        catch android.database.SQLException from label04 to label05 with label06;
        catch android.database.SQLException from label07 to label08 with label09;
        catch android.database.SQLException from label10 to label11 with label12;
    }

    static void access$000(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeBodyToVersion5(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$100(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeBodyFromVersion5ToVersion6(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$200(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeBodyFromVersion6ToVersion8(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$300(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeBodyFromVersion100ToVersion101(android.content.Context,android.database.sqlite.SQLiteDatabase)>(r0, r1);

        return;
    }

    static void access$400(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void createMessageMoveTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$500(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void createMessageStateChangeTable(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$600(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion22ToVersion23(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$700(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion23ToVersion24(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$800(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion24ToVersion25(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$900(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion25ToVersion26(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$1000(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion29ToVersion30(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$1100(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeToEmail2(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$1200(android.database.sqlite.SQLiteDatabase, android.content.Context)
    {
        android.database.sqlite.SQLiteDatabase r0;
        android.content.Context r1;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        r1 := @parameter1: android.content.Context;

        staticinvoke <com.android.email.provider.DBHelper: void migrateLegacyAccounts(android.database.sqlite.SQLiteDatabase,android.content.Context)>(r0, r1);

        return;
    }

    static void access$1300(android.database.sqlite.SQLiteDatabase)
    {
        android.database.sqlite.SQLiteDatabase r0;

        r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion125ToVersion126(android.database.sqlite.SQLiteDatabase)>(r0);

        return;
    }

    static void access$1400(android.content.Context, android.database.sqlite.SQLiteDatabase)
    {
        android.content.Context r0;
        android.database.sqlite.SQLiteDatabase r1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.database.sqlite.SQLiteDatabase;

        staticinvoke <com.android.email.provider.DBHelper: void upgradeFromVersion126ToVersion127(android.content.Context,android.database.sqlite.SQLiteDatabase)>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0, $r1, $r2, $r3, $r5;
        int[] $r4;

        <com.android.email.provider.DBHelper: int V25_HOSTAUTH_PROTOCOL> = 0;

        <com.android.email.provider.DBHelper: int V25_ACCOUNT_RECV> = 2;

        <com.android.email.provider.DBHelper: int V25_ACCOUNT_FLAGS> = 1;

        <com.android.email.provider.DBHelper: int V25_ACCOUNT_ID> = 0;

        <com.android.email.provider.DBHelper: int V21_HOSTAUTH_PASSWORD> = 1;

        <com.android.email.provider.DBHelper: int V21_HOSTAUTH_PROTOCOL> = 0;

        <com.android.email.provider.DBHelper: int V21_ACCOUNT_EMAIL> = 1;

        <com.android.email.provider.DBHelper: int V21_ACCOUNT_RECV> = 0;

        <com.android.email.provider.DBHelper: int BODY_DATABASE_VERSION> = 101;

        <com.android.email.provider.DBHelper: int DATABASE_VERSION> = 127;

        <com.android.email.provider.DBHelper: java.lang.String TRIGGER_HOST_AUTH_DELETE> = "create trigger host_auth_delete after delete on HostAuth begin delete from Credential where _id=old.credentialKey and (select count(*) from HostAuth where credentialKey=old.credentialKey)=0; end";

        <com.android.email.provider.DBHelper: java.lang.String TRIGGER_ACCOUNT_DELETE> = "create trigger account_delete before delete on Account begin delete from Mailbox where accountKey=old._id; delete from HostAuth where _id=old.hostAuthKeyRecv; delete from HostAuth where _id=old.hostAuthKeySend; delete from Policy where _id=old.policyKey; end";

        <com.android.email.provider.DBHelper: java.lang.String TRIGGER_MAILBOX_DELETE> = "create trigger mailbox_delete before delete on Mailbox begin delete from Message  where mailboxKey=old._id; delete from Message_Updates  where mailboxKey=old._id; delete from Message_Deletes  where mailboxKey=old._id; end";

        <com.android.email.provider.DBHelper: java.lang.String WHERE_ID> = "_id=?";

        <com.android.email.provider.DBHelper: java.lang.String LEGACY_SCHEME_EAS> = "eas";

        <com.android.email.provider.DBHelper: java.lang.String LEGACY_SCHEME_POP3> = "pop3";

        <com.android.email.provider.DBHelper: java.lang.String LEGACY_SCHEME_IMAP> = "imap";

        <com.android.email.provider.DBHelper: java.lang.String TAG> = "EmailProvider";

        <com.android.email.provider.DBHelper: java.lang.String MESSAGE_CHANGE_LOG_COLUMNS> = "_id integer primary key autoincrement, messageKey integer, messageServerId text, accountKey integer, status integer, ";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "hostAuthKeyRecv";

        $r0[1] = "emailAddress";

        <com.android.email.provider.DBHelper: java.lang.String[] V21_ACCOUNT_PROJECTION> = $r0;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "protocol";

        $r1[1] = "password";

        <com.android.email.provider.DBHelper: java.lang.String[] V21_HOSTAUTH_PROJECTION> = $r1;

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "_id";

        $r2[1] = "flags";

        $r2[2] = "hostAuthKeyRecv";

        <com.android.email.provider.DBHelper: java.lang.String[] V25_ACCOUNT_PROJECTION> = $r2;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "protocol";

        <com.android.email.provider.DBHelper: java.lang.String[] V25_HOSTAUTH_PROJECTION> = $r3;

        $r4 = newarray (int)[5];

        $r4[0] = 17;

        $r4[1] = 16;

        $r4[2] = 14;

        $r4[3] = 18;

        $r4[4] = 15;

        <com.android.email.provider.DBHelper: int[] ADDRESS_COLUMN_INDICES> = $r4;

        $r5 = newarray (java.lang.String)[5];

        $r5[0] = "bccList";

        $r5[1] = "ccList";

        $r5[2] = "fromList";

        $r5[3] = "replyToList";

        $r5[4] = "toList";

        <com.android.email.provider.DBHelper: java.lang.String[] ADDRESS_COLUMN_NAMES> = $r5;

        return;
    }
}
