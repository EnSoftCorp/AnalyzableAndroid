public class com.android.datetimepicker.HapticFeedbackController extends java.lang.Object
{
    private static final int VIBRATE_DELAY_MS;
    private static final int VIBRATE_LENGTH_MS;
    private final android.content.Context mContext;
    private final android.database.ContentObserver mContentObserver;
    private android.os.Vibrator mVibrator;
    private boolean mIsGloballyEnabled;
    private long mLastVibrate;

    private static boolean checkGlobalSetting(android.content.Context)
    {
        android.content.Context r0;
        android.content.ContentResolver $r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "haptic_feedback_enabled", 0);

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void <init>(android.content.Context)
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        android.content.Context r1;
        com.android.datetimepicker.HapticFeedbackController$1 $r2;

        r0 := @this: com.android.datetimepicker.HapticFeedbackController;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext> = r1;

        $r2 = new com.android.datetimepicker.HapticFeedbackController$1;

        specialinvoke $r2.<com.android.datetimepicker.HapticFeedbackController$1: void <init>(com.android.datetimepicker.HapticFeedbackController,android.os.Handler)>(r0, null);

        r0.<com.android.datetimepicker.HapticFeedbackController: android.database.ContentObserver mContentObserver> = $r2;

        return;
    }

    public void start()
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        android.net.Uri r1;
        android.content.Context $r2, $r5, $r6;
        java.lang.Object $r3;
        android.os.Vibrator $r4;
        boolean $z0;
        android.content.ContentResolver $r7;
        android.database.ContentObserver $r8;

        r0 := @this: com.android.datetimepicker.HapticFeedbackController;

        $r2 = r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("vibrator");

        $r4 = (android.os.Vibrator) $r3;

        r0.<com.android.datetimepicker.HapticFeedbackController: android.os.Vibrator mVibrator> = $r4;

        $r5 = r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.datetimepicker.HapticFeedbackController: boolean checkGlobalSetting(android.content.Context)>($r5);

        r0.<com.android.datetimepicker.HapticFeedbackController: boolean mIsGloballyEnabled> = $z0;

        r1 = staticinvoke <android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>("haptic_feedback_enabled");

        $r6 = r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = r0.<com.android.datetimepicker.HapticFeedbackController: android.database.ContentObserver mContentObserver>;

        virtualinvoke $r7.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>(r1, 0, $r8);

        return;
    }

    public void stop()
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.database.ContentObserver $r3;

        r0 := @this: com.android.datetimepicker.HapticFeedbackController;

        r0.<com.android.datetimepicker.HapticFeedbackController: android.os.Vibrator mVibrator> = null;

        $r1 = r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = r0.<com.android.datetimepicker.HapticFeedbackController: android.database.ContentObserver mContentObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r3);

        return;
    }

    public void tryVibrate()
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        long l0, $l1, $l2;
        android.os.Vibrator $r1, $r2;
        boolean $z0;
        byte $b3;

        r0 := @this: com.android.datetimepicker.HapticFeedbackController;

        $r1 = r0.<com.android.datetimepicker.HapticFeedbackController: android.os.Vibrator mVibrator>;

        if $r1 == null goto label1;

        $z0 = r0.<com.android.datetimepicker.HapticFeedbackController: boolean mIsGloballyEnabled>;

        if $z0 == 0 goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.datetimepicker.HapticFeedbackController: long mLastVibrate>;

        $l2 = l0 - $l1;

        $b3 = $l2 cmp 125L;

        if $b3 < 0 goto label1;

        $r2 = r0.<com.android.datetimepicker.HapticFeedbackController: android.os.Vibrator mVibrator>;

        virtualinvoke $r2.<android.os.Vibrator: void vibrate(long)>(5L);

        r0.<com.android.datetimepicker.HapticFeedbackController: long mLastVibrate> = l0;

     label1:
        return;
    }

    static boolean access$002(com.android.datetimepicker.HapticFeedbackController, boolean)
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        boolean z0;

        r0 := @parameter0: com.android.datetimepicker.HapticFeedbackController;

        z0 := @parameter1: boolean;

        r0.<com.android.datetimepicker.HapticFeedbackController: boolean mIsGloballyEnabled> = z0;

        return z0;
    }

    static android.content.Context access$100(com.android.datetimepicker.HapticFeedbackController)
    {
        com.android.datetimepicker.HapticFeedbackController r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.datetimepicker.HapticFeedbackController;

        $r1 = r0.<com.android.datetimepicker.HapticFeedbackController: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$200(android.content.Context)
    {
        android.content.Context r0;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $z0 = staticinvoke <com.android.datetimepicker.HapticFeedbackController: boolean checkGlobalSetting(android.content.Context)>(r0);

        return $z0;
    }

    public static void <clinit>()
    {
        <com.android.datetimepicker.HapticFeedbackController: int VIBRATE_LENGTH_MS> = 5;

        <com.android.datetimepicker.HapticFeedbackController: int VIBRATE_DELAY_MS> = 125;

        return;
    }
}
