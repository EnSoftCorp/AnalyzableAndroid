public class com.android.ex.photo.util.ImageUtils extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static final long MIN_NORMAL_CLASS;
    private static final long MIN_SMALL_CLASS;
    private static final java.lang.String BASE64_URI_PREFIX;
    private static final java.util.regex.Pattern BASE64_IMAGE_URI_PATTERN;
    public static final com.android.ex.photo.util.ImageUtils$ImageSize sUseImageSize;

    public void <init>()
    {
        com.android.ex.photo.util.ImageUtils r0;

        r0 := @this: com.android.ex.photo.util.ImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isImageMimeType(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("image/");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult createLocalBitmap(android.content.ContentResolver, android.net.Uri, int)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult r2, $r6;
        com.android.ex.photo.util.ImageUtils$InputStreamFactory r3;
        android.graphics.Point r4;
        android.graphics.BitmapFactory$Options r5, $r7;
        java.io.FileNotFoundException $r8;
        android.graphics.Bitmap $r9;
        java.io.IOException $r10;
        java.lang.IllegalArgumentException $r11;
        java.lang.SecurityException $r12;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        i0 := @parameter2: int;

        $r6 = new com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult;

        specialinvoke $r6.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: void <init>()>();

        r2 = $r6;

        r3 = staticinvoke <com.android.ex.photo.util.ImageUtils: com.android.ex.photo.util.ImageUtils$InputStreamFactory createInputStreamFactory(android.content.ContentResolver,android.net.Uri)>(r0, r1);

     label1:
        r4 = staticinvoke <com.android.ex.photo.util.ImageUtils: android.graphics.Point getImageBounds(com.android.ex.photo.util.ImageUtils$InputStreamFactory)>(r3);

        if r4 != null goto label3;

        r2.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: int status> = 1;

     label2:
        return r2;

     label3:
        $r7 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r7.<android.graphics.BitmapFactory$Options: void <init>()>();

        r5 = $r7;

        $i1 = r4.<android.graphics.Point: int x>;

        $i4 = $i1 / i0;

        $i2 = r4.<android.graphics.Point: int y>;

        $i3 = $i2 / i0;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        r5.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i5;

        $r9 = staticinvoke <com.android.ex.photo.util.ImageUtils: android.graphics.Bitmap decodeStream(com.android.ex.photo.util.ImageUtils$InputStreamFactory,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r3, null, r5);

        r2.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: android.graphics.Bitmap bitmap> = $r9;

        r2.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: int status> = 0;

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        goto label9;

     label6:
        $r10 := @caughtexception;

        r2.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: int status> = 1;

        goto label9;

     label7:
        $r11 := @caughtexception;

        goto label9;

     label8:
        $r12 := @caughtexception;

        r2.<com.android.ex.photo.loaders.PhotoBitmapLoaderInterface$BitmapResult: int status> = 1;

     label9:
        return r2;

        catch java.io.FileNotFoundException from label1 to label2 with label5;
        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.IllegalArgumentException from label1 to label2 with label7;
        catch java.lang.IllegalArgumentException from label3 to label4 with label7;
        catch java.lang.SecurityException from label1 to label2 with label8;
        catch java.lang.SecurityException from label3 to label4 with label8;
    }

    public static android.graphics.Bitmap decodeStream(com.android.ex.photo.util.ImageUtils$InputStreamFactory, android.graphics.Rect, android.graphics.BitmapFactory$Options) throws java.io.FileNotFoundException
    {
        com.android.ex.photo.util.ImageUtils$InputStreamFactory r0;
        android.graphics.Rect r1;
        android.graphics.BitmapFactory$Options r2;
        java.io.InputStream r3;
        int i0, $i1, $i2;
        android.graphics.Bitmap r4, r6, r18;
        android.graphics.Matrix r5, $r8;
        java.lang.Throwable r7, $r16;
        float $f0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r9;
        java.lang.OutOfMemoryError $r10, r19;
        java.io.IOException $r11, $r12, $r13, $r14, $r15, $r17, r20;

        r0 := @parameter0: com.android.ex.photo.util.ImageUtils$InputStreamFactory;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.BitmapFactory$Options;

        r3 = null;

     label01:
        r3 = interfaceinvoke r0.<com.android.ex.photo.util.ImageUtils$InputStreamFactory: java.io.InputStream createInputStream()>();

        i0 = staticinvoke <com.android.ex.photo.util.Exif: int getOrientation(java.io.InputStream,long)>(r3, -1L);

        if r3 == null goto label02;

        virtualinvoke r3.<java.io.InputStream: void close()>();

     label02:
        r3 = interfaceinvoke r0.<com.android.ex.photo.util.ImageUtils$InputStreamFactory: java.io.InputStream createInputStream()>();

        r4 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r3, r1, r2);

        if r3 == null goto label03;

        if r4 != null goto label03;

        $z0 = r2.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds>;

        if $z0 != 0 goto label03;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ImageUtils", "ImageUtils#decodeStream(InputStream, Rect, Options): Image bytes cannot be decoded into a Bitmap");

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Image bytes cannot be decoded into a Bitmap.");

        throw $r9;

     label03:
        if r4 == null goto label09;

        if i0 == 0 goto label09;

        $r8 = new android.graphics.Matrix;

        specialinvoke $r8.<android.graphics.Matrix: void <init>()>();

        r5 = $r8;

        $f0 = (float) i0;

        virtualinvoke r5.<android.graphics.Matrix: boolean postRotate(float)>($f0);

        $i2 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        r6 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>(r4, 0, 0, $i2, $i1, r5, 1);

     label04:
        if r3 == null goto label08;

     label05:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label06:
        goto label08;

     label07:
        $r14 := @caughtexception;

     label08:
        return r6;

     label09:
        r18 = r4;

     label10:
        if r3 == null goto label14;

     label11:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

     label14:
        return r18;

     label15:
        $r10 := @caughtexception;

        r19 = $r10;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImageUtils", "ImageUtils#decodeStream(InputStream, Rect, Options) threw an OOME", r19);

     label16:
        if r3 == null goto label20;

     label17:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label18:
        goto label20;

     label19:
        $r11 := @caughtexception;

     label20:
        return null;

     label21:
        $r17 := @caughtexception;

        r20 = $r17;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ImageUtils", "ImageUtils#decodeStream(InputStream, Rect, Options) threw an IOE", r20);

     label22:
        if r3 == null goto label26;

     label23:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label24:
        goto label26;

     label25:
        $r15 := @caughtexception;

     label26:
        return null;

     label27:
        $r16 := @caughtexception;

        r7 = $r16;

     label28:
        if r3 == null goto label32;

     label29:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label30:
        goto label32;

     label31:
        $r13 := @caughtexception;

     label32:
        throw r7;

        catch java.io.IOException from label05 to label06 with label07;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.lang.OutOfMemoryError from label01 to label04 with label15;
        catch java.lang.OutOfMemoryError from label09 to label10 with label15;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.io.IOException from label01 to label04 with label21;
        catch java.io.IOException from label09 to label10 with label21;
        catch java.io.IOException from label23 to label24 with label25;
        catch java.lang.Throwable from label01 to label04 with label27;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.lang.Throwable from label15 to label16 with label27;
        catch java.lang.Throwable from label21 to label22 with label27;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    private static android.graphics.Point getImageBounds(com.android.ex.photo.util.ImageUtils$InputStreamFactory) throws java.io.IOException
    {
        com.android.ex.photo.util.ImageUtils$InputStreamFactory r0;
        android.graphics.BitmapFactory$Options r1, $r2;
        android.graphics.Point $r4;
        int $i0, $i1;

        r0 := @parameter0: com.android.ex.photo.util.ImageUtils$InputStreamFactory;

        $r2 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r2.<android.graphics.BitmapFactory$Options: void <init>()>();

        r1 = $r2;

        r1.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        staticinvoke <com.android.ex.photo.util.ImageUtils: android.graphics.Bitmap decodeStream(com.android.ex.photo.util.ImageUtils$InputStreamFactory,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r0, null, r1);

        $r4 = new android.graphics.Point;

        $i1 = r1.<android.graphics.BitmapFactory$Options: int outWidth>;

        $i0 = r1.<android.graphics.BitmapFactory$Options: int outHeight>;

        specialinvoke $r4.<android.graphics.Point: void <init>(int,int)>($i1, $i0);

        return $r4;
    }

    private static com.android.ex.photo.util.ImageUtils$InputStreamFactory createInputStreamFactory(android.content.ContentResolver, android.net.Uri)
    {
        android.content.ContentResolver r0;
        android.net.Uri r1;
        java.lang.String r2, $r3;
        boolean $z0;
        com.android.ex.photo.util.ImageUtils$BaseInputStreamFactory $r4;
        com.android.ex.photo.util.ImageUtils$DataInputStreamFactory $r5;

        r0 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        r2 = virtualinvoke r1.<android.net.Uri: java.lang.String getScheme()>();

        $r3 = "data";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r5 = new com.android.ex.photo.util.ImageUtils$DataInputStreamFactory;

        specialinvoke $r5.<com.android.ex.photo.util.ImageUtils$DataInputStreamFactory: void <init>(android.content.ContentResolver,android.net.Uri)>(r0, r1);

        return $r5;

     label1:
        $r4 = new com.android.ex.photo.util.ImageUtils$BaseInputStreamFactory;

        specialinvoke $r4.<com.android.ex.photo.util.ImageUtils$BaseInputStreamFactory: void <init>(android.content.ContentResolver,android.net.Uri)>(r0, r1);

        return $r4;
    }

    static java.util.regex.Pattern access$000()
    {
        java.util.regex.Pattern $r0;

        $r0 = <com.android.ex.photo.util.ImageUtils: java.util.regex.Pattern BASE64_IMAGE_URI_PATTERN>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        int $i0, $i1, $i4;
        long $l2, $l5;
        byte $b3, $b6;
        com.android.ex.photo.util.ImageUtils$ImageSize $r1, $r2, $r3, $r4;

        <com.android.ex.photo.util.ImageUtils: java.lang.String BASE64_URI_PREFIX> = "base64,";

        <com.android.ex.photo.util.ImageUtils: long MIN_SMALL_CLASS> = 24L;

        <com.android.ex.photo.util.ImageUtils: long MIN_NORMAL_CLASS> = 32L;

        <com.android.ex.photo.util.ImageUtils: java.lang.String TAG> = "ImageUtils";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^(?:.*;)?base64,.*");

        <com.android.ex.photo.util.ImageUtils: java.util.regex.Pattern BASE64_IMAGE_URI_PATTERN> = $r0;

        $i0 = <android.os.Build$VERSION: int SDK_INT>;

        if $i0 < 11 goto label1;

        $r4 = <com.android.ex.photo.util.ImageUtils$ImageSize: com.android.ex.photo.util.ImageUtils$ImageSize NORMAL>;

        <com.android.ex.photo.util.ImageUtils: com.android.ex.photo.util.ImageUtils$ImageSize sUseImageSize> = $r4;

        goto label4;

     label1:
        $i1 = <com.android.ex.photo.PhotoViewController: int sMemoryClass>;

        $l2 = (long) $i1;

        $b3 = $l2 cmp 32L;

        if $b3 < 0 goto label2;

        $r3 = <com.android.ex.photo.util.ImageUtils$ImageSize: com.android.ex.photo.util.ImageUtils$ImageSize NORMAL>;

        <com.android.ex.photo.util.ImageUtils: com.android.ex.photo.util.ImageUtils$ImageSize sUseImageSize> = $r3;

        goto label4;

     label2:
        $i4 = <com.android.ex.photo.PhotoViewController: int sMemoryClass>;

        $l5 = (long) $i4;

        $b6 = $l5 cmp 24L;

        if $b6 < 0 goto label3;

        $r2 = <com.android.ex.photo.util.ImageUtils$ImageSize: com.android.ex.photo.util.ImageUtils$ImageSize SMALL>;

        <com.android.ex.photo.util.ImageUtils: com.android.ex.photo.util.ImageUtils$ImageSize sUseImageSize> = $r2;

        goto label4;

     label3:
        $r1 = <com.android.ex.photo.util.ImageUtils$ImageSize: com.android.ex.photo.util.ImageUtils$ImageSize EXTRA_SMALL>;

        <com.android.ex.photo.util.ImageUtils: com.android.ex.photo.util.ImageUtils$ImageSize sUseImageSize> = $r1;

     label4:
        return;
    }
}
