class org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy extends java.lang.Object implements org.owasp.html.HtmlSanitizer$Policy
{
    final com.google.common.collect.ImmutableMap elAndAttrPolicies;
    final com.google.common.collect.ImmutableSet allowedTextContainers;
    private final org.owasp.html.HtmlStreamEventReceiver out;
    transient boolean skipText;
    private final java.util.List openElementStack;
    static final com.google.common.collect.ImmutableSet SKIPPABLE_ELEMENT_CONTENT;

    void <init>(org.owasp.html.HtmlStreamEventReceiver, com.google.common.collect.ImmutableMap, com.google.common.collect.ImmutableSet)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        org.owasp.html.HtmlStreamEventReceiver r1;
        com.google.common.collect.ImmutableMap r2;
        com.google.common.collect.ImmutableSet r3;
        java.util.ArrayList $r4;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: org.owasp.html.HtmlStreamEventReceiver;

        r2 := @parameter1: com.google.common.collect.ImmutableMap;

        r3 := @parameter2: com.google.common.collect.ImmutableSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = 1;

        $r4 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack> = $r4;

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out> = r1;

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableMap elAndAttrPolicies> = r2;

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableSet allowedTextContainers> = r3;

        return;
    }

    public void openDocument()
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        java.util.List $r1;
        org.owasp.html.HtmlStreamEventReceiver $r2;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = 0;

        $r1 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        $r2 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r2.<org.owasp.html.HtmlStreamEventReceiver: void openDocument()>();

        return;
    }

    public void closeDocument()
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        int i0, $i1;
        java.lang.String r1;
        java.util.List $r2, $r3, $r5;
        org.owasp.html.HtmlStreamEventReceiver $r4, $r7;
        java.lang.Object $r6;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        $r2 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label3;

        $r5 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        r1 = (java.lang.String) $r6;

        if r1 == null goto label2;

        $r7 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r7.<org.owasp.html.HtmlStreamEventReceiver: void closeTag(java.lang.String)>(r1);

     label2:
        i0 = i0 + -2;

        goto label1;

     label3:
        $r3 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = 1;

        $r4 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r4.<org.owasp.html.HtmlStreamEventReceiver: void closeDocument()>();

        return;
    }

    public void text(java.lang.String)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        java.lang.String r1;
        boolean $z0;
        org.owasp.html.HtmlStreamEventReceiver $r2;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r2.<org.owasp.html.HtmlStreamEventReceiver: void text(java.lang.String)>(r1);

     label1:
        return;
    }

    public void openTag(java.lang.String, java.util.List)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        java.lang.String r1, r4;
        java.util.List r2;
        org.owasp.html.ElementAndAttributePolicies r3;
        com.google.common.collect.ImmutableMap $r5;
        java.lang.Object $r6;
        boolean $z0, $z1;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.List;

        $r5 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableMap elAndAttrPolicies>;

        $r6 = virtualinvoke $r5.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (org.owasp.html.ElementAndAttributePolicies) $r6;

        r4 = staticinvoke <org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.lang.String applyPolicies(java.lang.String,java.util.List,org.owasp.html.ElementAndAttributePolicies)>(r1, r2, r3);

        if r4 == null goto label2;

        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = r3.<org.owasp.html.ElementAndAttributePolicies: boolean skipIfEmpty>;

        if $z1 != 0 goto label2;

     label1:
        virtualinvoke r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: void writeOpenTag(org.owasp.html.ElementAndAttributePolicies,java.lang.String,java.util.List)>(r3, r4, r2);

        return;

     label2:
        virtualinvoke r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: void deferOpenTag(java.lang.String)>(r1);

        return;
    }

    static final java.lang.String applyPolicies(java.lang.String, java.util.List, org.owasp.html.ElementAndAttributePolicies)
    {
        java.lang.String r0, r3, r5, r7, r8;
        java.util.List r1;
        org.owasp.html.ElementAndAttributePolicies r2;
        java.util.ListIterator r4;
        org.owasp.html.AttributePolicy r6;
        boolean $z0;
        org.owasp.html.ElementPolicy $r9;
        java.lang.Object $r10, $r12, $r13;
        com.google.common.collect.ImmutableMap $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: org.owasp.html.ElementAndAttributePolicies;

        if r2 == null goto label6;

        r4 = interfaceinvoke r1.<java.util.List: java.util.ListIterator listIterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r10;

        $r11 = r2.<org.owasp.html.ElementAndAttributePolicies: com.google.common.collect.ImmutableMap attrPolicies>;

        $r12 = virtualinvoke $r11.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r5);

        r6 = (org.owasp.html.AttributePolicy) $r12;

        if r6 != null goto label2;

        interfaceinvoke r4.<java.util.ListIterator: void remove()>();

        interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r4.<java.util.ListIterator: void remove()>();

        goto label4;

     label2:
        $r13 = interfaceinvoke r4.<java.util.ListIterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r13;

        r8 = interfaceinvoke r6.<org.owasp.html.AttributePolicy: java.lang.String apply(java.lang.String,java.lang.String,java.lang.String)>(r0, r5, r7);

        if r8 != null goto label3;

        interfaceinvoke r4.<java.util.ListIterator: void remove()>();

        interfaceinvoke r4.<java.util.ListIterator: java.lang.Object previous()>();

        interfaceinvoke r4.<java.util.ListIterator: void remove()>();

        goto label4;

     label3:
        interfaceinvoke r4.<java.util.ListIterator: void set(java.lang.Object)>(r8);

     label4:
        goto label1;

     label5:
        $r9 = r2.<org.owasp.html.ElementAndAttributePolicies: org.owasp.html.ElementPolicy elPolicy>;

        r3 = interfaceinvoke $r9.<org.owasp.html.ElementPolicy: java.lang.String apply(java.lang.String,java.util.List)>(r0, r1);

        goto label7;

     label6:
        r3 = null;

     label7:
        return r3;
    }

    public void closeTag(java.lang.String)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        java.lang.String r1, r2, r3, r16;
        int i0, i1, i2, $i3, i4;
        java.util.List $r4, $r5, $r6, $r10, $r11, $r12, $r13;
        java.lang.Object $r7, $r9, $r15;
        com.google.common.collect.ImmutableSet $r8;
        boolean $z0, $z1, $z2;
        org.owasp.html.HtmlStreamEventReceiver $r14;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = i0;

     label01:
        if i1 <= 0 goto label06;

        i1 = i1 + -2;

        $r10 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r9 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i1);

        r2 = (java.lang.String) $r9;

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z2 == 0 goto label05;

        i2 = i0 - 1;

     label02:
        if i2 <= i1 goto label04;

        $r12 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r15 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i2);

        r3 = (java.lang.String) $r15;

        if r3 == null goto label03;

        $r14 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r14.<org.owasp.html.HtmlStreamEventReceiver: void closeTag(java.lang.String)>(r3);

     label03:
        i2 = i2 + -2;

        goto label02;

     label04:
        $r11 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r13 = interfaceinvoke $r11.<java.util.List: java.util.List subList(int,int)>(i1, i0);

        interfaceinvoke $r13.<java.util.List: void clear()>();

        goto label06;

     label05:
        goto label01;

     label06:
        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = 0;

        $r5 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        i4 = $i3 - 1;

     label07:
        if i4 < 0 goto label11;

        $r6 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        r16 = (java.lang.String) $r7;

        if r16 == null goto label10;

        $r8 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableSet allowedTextContainers>;

        $z0 = virtualinvoke $r8.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r16);

        if $z0 != 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = $z1;

        goto label11;

     label10:
        i4 = i4 + -2;

        goto label07;

     label11:
        return;
    }

    void writeOpenTag(org.owasp.html.ElementAndAttributePolicies, java.lang.String, java.util.List)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        org.owasp.html.ElementAndAttributePolicies r1;
        java.lang.String r2, $r5;
        java.util.List r3, $r6, $r7;
        boolean $z0, $z3, $z4;
        org.owasp.html.HtmlStreamEventReceiver $r4;
        com.google.common.collect.ImmutableSet $r8;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: org.owasp.html.ElementAndAttributePolicies;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.List;

        $z0 = r1.<org.owasp.html.ElementAndAttributePolicies: boolean isVoid>;

        if $z0 != 0 goto label3;

        $r6 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        $r5 = r1.<org.owasp.html.ElementAndAttributePolicies: java.lang.String elementName>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r7 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r8 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableSet allowedTextContainers>;

        $z3 = virtualinvoke $r8.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r2);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = $z4;

     label3:
        $r4 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: org.owasp.html.HtmlStreamEventReceiver out>;

        interfaceinvoke $r4.<org.owasp.html.HtmlStreamEventReceiver: void openTag(java.lang.String,java.util.List)>(r2, r3);

        return;
    }

    void deferOpenTag(java.lang.String)
    {
        org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy r0;
        java.lang.String r1;
        boolean $z0, $z1;
        com.google.common.collect.ImmutableSet $r2;
        java.util.List $r3, $r4;

        r0 := @this: org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.owasp.html.HtmlTextEscapingMode: boolean isVoidElement(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: java.util.List openElementStack>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(null);

     label1:
        $r2 = <org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableSet SKIPPABLE_ELEMENT_CONTENT>;

        $z1 = virtualinvoke $r2.<com.google.common.collect.ImmutableSet: boolean contains(java.lang.Object)>(r1);

        r0.<org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: boolean skipText> = $z1;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        com.google.common.collect.ImmutableSet $r1;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "iframe";

        $r0[1] = "object";

        $r0[2] = "frame";

        $r0[3] = "frameset";

        $r0[4] = "title";

        $r1 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>("script", "style", "noscript", "nostyle", "noembed", "noframes", $r0);

        <org.owasp.html.ElementAndAttributePolicyBasedSanitizerPolicy: com.google.common.collect.ImmutableSet SKIPPABLE_ELEMENT_CONTENT> = $r1;

        return;
    }
}
