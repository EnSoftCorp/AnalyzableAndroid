public class com.android.bitmap.UnrefedBitmapCache extends com.android.bitmap.UnrefedPooledCache implements com.android.bitmap.BitmapCache
{
    private boolean mBlocking;
    private final java.lang.Object mLock;
    private android.util.LruCache mNullRequests;
    private static final boolean DEBUG;
    private static final java.lang.String TAG;

    public void <init>(int, float, int)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        int i0, i1;
        float f0;
        java.lang.Object $r1;
        android.util.LruCache $r2;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.bitmap.UnrefedPooledCache: void <init>(int,float)>(i0, f0);

        r0.<com.android.bitmap.UnrefedBitmapCache: boolean mBlocking> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock> = $r1;

        if i1 <= 0 goto label1;

        $r2 = new android.util.LruCache;

        specialinvoke $r2.<android.util.LruCache: void <init>(int)>(i1);

        r0.<com.android.bitmap.UnrefedBitmapCache: android.util.LruCache mNullRequests> = $r2;

     label1:
        return;
    }

    public void setBlocking(boolean)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        boolean z0, $z1;
        java.lang.Object r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        z0 := @parameter0: boolean;

        $r3 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<com.android.bitmap.UnrefedBitmapCache: boolean mBlocking> = z0;

        $z1 = r0.<com.android.bitmap.UnrefedBitmapCache: boolean mBlocking>;

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected int sizeOf(com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.ReusableBitmap r1;
        int $i0;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.ReusableBitmap;

        $i0 = virtualinvoke r1.<com.android.bitmap.ReusableBitmap: int getByteCount()>();

        return $i0;
    }

    public com.android.bitmap.ReusableBitmap poll()
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.ReusableBitmap r1, $r7;
        java.lang.Object r2, $r5, $r8;
        java.lang.Throwable r4, $r10;
        com.android.bitmap.Poolable $r6;
        boolean $z0;
        java.lang.InterruptedException $r9;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        $r5 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $r6 = specialinvoke r0.<com.android.bitmap.UnrefedPooledCache: com.android.bitmap.Poolable poll()>();

        $r7 = (com.android.bitmap.ReusableBitmap) $r6;

        r1 = $r7;

        if $r7 != null goto label06;

        $z0 = r0.<com.android.bitmap.UnrefedBitmapCache: boolean mBlocking>;

        if $z0 == 0 goto label06;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("sleep");

     label02:
        $r8 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        virtualinvoke $r8.<java.lang.Object: void wait()>();

     label03:
        goto label05;

     label04:
        $r9 := @caughtexception;

     label05:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label01;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        return r1;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void offer(com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.ReusableBitmap r1;
        java.lang.Object r2, $r4, $r5;
        java.lang.Throwable r3, $r6;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.ReusableBitmap;

        $r4 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<com.android.bitmap.UnrefedPooledCache: void offer(com.android.bitmap.Poolable)>(r1);

        $r5 = r0.<com.android.bitmap.UnrefedBitmapCache: java.lang.Object mLock>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public com.android.bitmap.ReusableBitmap get(com.android.bitmap.RequestKey, boolean)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.RequestKey r1;
        boolean z0;
        android.util.LruCache $r2, $r5;
        com.android.bitmap.Poolable $r3;
        com.android.bitmap.ReusableBitmap $r4;
        java.lang.Object $r6;
        com.android.bitmap.ReusableBitmap$NullReusableBitmap $r7;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.bitmap.UnrefedBitmapCache: android.util.LruCache mNullRequests>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.bitmap.UnrefedBitmapCache: android.util.LruCache mNullRequests>;

        $r6 = virtualinvoke $r5.<android.util.LruCache: java.lang.Object get(java.lang.Object)>(r1);

        if $r6 == null goto label1;

        $r7 = staticinvoke <com.android.bitmap.ReusableBitmap$NullReusableBitmap: com.android.bitmap.ReusableBitmap$NullReusableBitmap getInstance()>();

        return $r7;

     label1:
        $r3 = specialinvoke r0.<com.android.bitmap.UnrefedPooledCache: com.android.bitmap.Poolable get(java.lang.Object,boolean)>(r1, z0);

        $r4 = (com.android.bitmap.ReusableBitmap) $r3;

        return $r4;
    }

    public com.android.bitmap.ReusableBitmap put(com.android.bitmap.RequestKey, com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.RequestKey r1;
        com.android.bitmap.ReusableBitmap r2, $r5;
        android.util.LruCache $r3, $r6;
        com.android.bitmap.Poolable $r4;
        com.android.bitmap.ReusableBitmap$NullReusableBitmap $r7, $r9;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        r2 := @parameter1: com.android.bitmap.ReusableBitmap;

        $r3 = r0.<com.android.bitmap.UnrefedBitmapCache: android.util.LruCache mNullRequests>;

        if $r3 == null goto label2;

        if r2 == null goto label1;

        $r9 = staticinvoke <com.android.bitmap.ReusableBitmap$NullReusableBitmap: com.android.bitmap.ReusableBitmap$NullReusableBitmap getInstance()>();

        if r2 != $r9 goto label2;

     label1:
        $r6 = r0.<com.android.bitmap.UnrefedBitmapCache: android.util.LruCache mNullRequests>;

        $r7 = staticinvoke <com.android.bitmap.ReusableBitmap$NullReusableBitmap: com.android.bitmap.ReusableBitmap$NullReusableBitmap getInstance()>();

        virtualinvoke $r6.<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        return null;

     label2:
        $r4 = specialinvoke r0.<com.android.bitmap.UnrefedPooledCache: com.android.bitmap.Poolable put(java.lang.Object,com.android.bitmap.Poolable)>(r1, r2);

        $r5 = (com.android.bitmap.ReusableBitmap) $r4;

        return $r5;
    }

    protected volatile int sizeOf(com.android.bitmap.Poolable)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.Poolable r1;
        com.android.bitmap.ReusableBitmap $r2;
        int $i0;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.Poolable;

        $r2 = (com.android.bitmap.ReusableBitmap) r1;

        $i0 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: int sizeOf(com.android.bitmap.ReusableBitmap)>($r2);

        return $i0;
    }

    public volatile com.android.bitmap.Poolable poll()
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.ReusableBitmap $r1;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        $r1 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap poll()>();

        return $r1;
    }

    public volatile void offer(com.android.bitmap.Poolable)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.Poolable r1;
        com.android.bitmap.ReusableBitmap $r2;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: com.android.bitmap.Poolable;

        $r2 = (com.android.bitmap.ReusableBitmap) r1;

        virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: void offer(com.android.bitmap.ReusableBitmap)>($r2);

        return;
    }

    public volatile com.android.bitmap.Poolable put(java.lang.Object, com.android.bitmap.Poolable)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        java.lang.Object r1;
        com.android.bitmap.Poolable r2;
        com.android.bitmap.ReusableBitmap $r3, $r5;
        com.android.bitmap.RequestKey $r4;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.android.bitmap.Poolable;

        $r4 = (com.android.bitmap.RequestKey) r1;

        $r3 = (com.android.bitmap.ReusableBitmap) r2;

        $r5 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap put(com.android.bitmap.RequestKey,com.android.bitmap.ReusableBitmap)>($r4, $r3);

        return $r5;
    }

    public volatile com.android.bitmap.Poolable get(java.lang.Object, boolean)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        java.lang.Object r1;
        boolean z0;
        com.android.bitmap.RequestKey $r2;
        com.android.bitmap.ReusableBitmap $r3;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (com.android.bitmap.RequestKey) r1;

        $r3 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap get(com.android.bitmap.RequestKey,boolean)>($r2, z0);

        return $r3;
    }

    public volatile java.lang.Object poll()
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        com.android.bitmap.ReusableBitmap $r1;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        $r1 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap poll()>();

        return $r1;
    }

    public volatile void offer(java.lang.Object)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        java.lang.Object r1;
        com.android.bitmap.ReusableBitmap $r2;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.android.bitmap.ReusableBitmap) r1;

        virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: void offer(com.android.bitmap.ReusableBitmap)>($r2);

        return;
    }

    public volatile java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        java.lang.Object r1, r2;
        com.android.bitmap.ReusableBitmap $r3, $r5;
        com.android.bitmap.RequestKey $r4;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.android.bitmap.RequestKey) r1;

        $r3 = (com.android.bitmap.ReusableBitmap) r2;

        $r5 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap put(com.android.bitmap.RequestKey,com.android.bitmap.ReusableBitmap)>($r4, $r3);

        return $r5;
    }

    public volatile java.lang.Object get(java.lang.Object, boolean)
    {
        com.android.bitmap.UnrefedBitmapCache r0;
        java.lang.Object r1;
        boolean z0;
        com.android.bitmap.RequestKey $r2;
        com.android.bitmap.ReusableBitmap $r3;

        r0 := @this: com.android.bitmap.UnrefedBitmapCache;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = (com.android.bitmap.RequestKey) r1;

        $r3 = virtualinvoke r0.<com.android.bitmap.UnrefedBitmapCache: com.android.bitmap.ReusableBitmap get(com.android.bitmap.RequestKey,boolean)>($r2, z0);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.bitmap.UnrefedBitmapCache: boolean DEBUG> = 0;

        $r0 = class "com/android/bitmap/UnrefedBitmapCache";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.bitmap.UnrefedBitmapCache: java.lang.String TAG> = $r1;

        return;
    }
}
