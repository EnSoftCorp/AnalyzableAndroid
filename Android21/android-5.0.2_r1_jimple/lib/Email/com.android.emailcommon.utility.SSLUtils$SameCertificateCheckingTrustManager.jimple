class com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager extends java.lang.Object implements javax.net.ssl.X509TrustManager
{
    private final com.android.emailcommon.provider.HostAuth mHostAuth;
    private final android.content.Context mContext;
    private java.security.PublicKey mPublicKey;

    void <init>(android.content.Context, com.android.emailcommon.provider.HostAuth)
    {
        com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager r0;
        android.content.Context r1;
        com.android.emailcommon.provider.HostAuth r2, $r10;
        android.database.Cursor r3;
        java.lang.Throwable r4, $r11;
        android.content.ContentResolver $r5;
        java.lang.String[] $r6, $r7;
        long $l0;
        android.net.Uri $r8;
        java.lang.String $r9;
        boolean $z0;
        byte[] $r12;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.emailcommon.provider.HostAuth;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: android.content.Context mContext> = r1;

        r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth> = r2;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = <com.android.emailcommon.provider.HostAuth: android.net.Uri CONTENT_URI>;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "serverCert";

        $r7 = newarray (java.lang.String)[1];

        $l0 = r2.<com.android.emailcommon.provider.HostAuth: long mId>;

        $r9 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r7[0] = $r9;

        r3 = virtualinvoke $r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r8, $r6, "_id=?", $r7, null);

        if r3 == null goto label5;

     label1:
        $z0 = interfaceinvoke r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $r10 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $r12 = interfaceinvoke r3.<android.database.Cursor: byte[] getBlob(int)>(0);

        $r10.<com.android.emailcommon.provider.HostAuth: byte[] mServerCert> = $r12;

     label2:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        goto label5;

     label3:
        $r11 := @caughtexception;

        r4 = $r11;

     label4:
        interfaceinvoke r3.<android.database.Cursor: void close()>();

        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        java.security.cert.CertificateException $r3;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        $r3 = new java.security.cert.CertificateException;

        specialinvoke $r3.<java.security.cert.CertificateException: void <init>(java.lang.String)>("We don\'t check client certificates");

        throw $r3;
    }

    public void checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager r0;
        java.security.cert.X509Certificate[] r1;
        java.lang.String r2;
        java.security.cert.X509Certificate r3;
        java.io.ByteArrayInputStream r4, $r19;
        java.security.cert.Certificate r5;
        int $i0;
        com.android.emailcommon.provider.HostAuth $r7, $r9, $r13, $r22;
        byte[] $r8, $r21, r27;
        android.content.ContentValues $r10, r28;
        android.content.Context $r11;
        android.content.ContentResolver $r12;
        android.net.Uri $r14, $r15;
        long $l1;
        java.security.PublicKey $r16, $r17, $r18, $r25;
        boolean $z0;
        java.security.cert.CertificateException $r20, $r24;
        java.security.cert.CertificateFactory $r23;
        java.io.IOException $r26;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager;

        r1 := @parameter0: java.security.cert.X509Certificate[];

        r2 := @parameter1: java.lang.String;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r24 = new java.security.cert.CertificateException;

        specialinvoke $r24.<java.security.cert.CertificateException: void <init>(java.lang.String)>("No certificates?");

        throw $r24;

     label1:
        r3 = r1[0];

        $r7 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $r8 = $r7.<com.android.emailcommon.provider.HostAuth: byte[] mServerCert>;

        if $r8 == null goto label6;

        $r17 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: java.security.PublicKey mPublicKey>;

        if $r17 != null goto label5;

        $r19 = new java.io.ByteArrayInputStream;

        $r22 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $r21 = $r22.<com.android.emailcommon.provider.HostAuth: byte[] mServerCert>;

        specialinvoke $r19.<java.io.ByteArrayInputStream: void <init>(byte[])>($r21);

        r4 = $r19;

        $r23 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X509");

        r5 = virtualinvoke $r23.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r4);

        $r25 = virtualinvoke r5.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: java.security.PublicKey mPublicKey> = $r25;

     label2:
        virtualinvoke r4.<java.io.ByteArrayInputStream: void close()>();

     label3:
        goto label5;

     label4:
        $r26 := @caughtexception;

     label5:
        $r16 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: java.security.PublicKey mPublicKey>;

        $r18 = virtualinvoke r3.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        $z0 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>($r18);

        if $z0 != 0 goto label7;

        $r20 = new java.security.cert.CertificateException;

        specialinvoke $r20.<java.security.cert.CertificateException: void <init>(java.lang.String)>("PublicKey has changed since initial connection!");

        throw $r20;

     label6:
        r27 = virtualinvoke r3.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        $r9 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $r9.<com.android.emailcommon.provider.HostAuth: byte[] mServerCert> = r27;

        $r10 = new android.content.ContentValues;

        specialinvoke $r10.<android.content.ContentValues: void <init>()>();

        r28 = $r10;

        virtualinvoke r28.<android.content.ContentValues: void put(java.lang.String,byte[])>("serverCert", r27);

        $r11 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r14 = <com.android.emailcommon.provider.HostAuth: android.net.Uri CONTENT_URI>;

        $r13 = r0.<com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $l1 = $r13.<com.android.emailcommon.provider.HostAuth: long mId>;

        $r15 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r14, $l1);

        virtualinvoke $r12.<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>($r15, r28, null, null);

     label7:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.security.cert.X509Certificate[] getAcceptedIssuers()
    {
        com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager r0;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$SameCertificateCheckingTrustManager;

        return null;
    }
}
