public class com.android.bitmap.drawable.BasicBitmapDrawable extends android.graphics.drawable.Drawable implements com.android.bitmap.DecodeTask$DecodeCallback, android.graphics.drawable.Drawable$Callback, com.android.bitmap.RequestKey$Callback
{
    protected static android.graphics.Rect sRect;
    protected com.android.bitmap.RequestKey mCurrKey;
    protected com.android.bitmap.RequestKey mPrevKey;
    protected int mDecodeWidth;
    protected int mDecodeHeight;
    protected final android.graphics.Paint mPaint;
    private final com.android.bitmap.BitmapCache mCache;
    private final boolean mLimitDensity;
    private final float mDensity;
    private com.android.bitmap.ReusableBitmap mBitmap;
    private com.android.bitmap.DecodeTask mTask;
    private com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask;
    private static final int CPU_COUNT;
    private static final int CORE_POOL_SIZE;
    private static final int MAXIMUM_POOL_SIZE;
    private static final java.util.concurrent.Executor SMALL_POOL_EXECUTOR;
    private static final java.util.concurrent.Executor EXECUTOR;
    private static final int MAX_BITMAP_DENSITY;
    private static final float VERTICAL_CENTER;
    private static final float NO_MULTIPLIER;
    private static final java.lang.String TAG;
    private static final boolean DEBUG;

    public void <init>(android.content.res.Resources, com.android.bitmap.BitmapCache, boolean)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.content.res.Resources r1;
        com.android.bitmap.BitmapCache r2;
        boolean z0;
        android.graphics.Paint $r3, $r5, $r6, $r7;
        android.util.DisplayMetrics $r4;
        float $f0;
        android.graphics.Rect $r8, $r9;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.content.res.Resources;

        r2 := @parameter1: com.android.bitmap.BitmapCache;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint> = $r3;

        $r4 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r4.<android.util.DisplayMetrics: float density>;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: float mDensity> = $f0;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.BitmapCache mCache> = r2;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean mLimitDensity> = z0;

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r5.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

        $r6 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r7 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r7.<android.graphics.Paint: void setDither(boolean)>(1);

        $r8 = <com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect sRect>;

        if $r8 != null goto label1;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        <com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect sRect> = $r9;

     label1:
        return;
    }

    public final com.android.bitmap.RequestKey getKey()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey $r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        return $r1;
    }

    public final com.android.bitmap.RequestKey getPreviousKey()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey $r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mPrevKey>;

        return $r1;
    }

    protected com.android.bitmap.ReusableBitmap getBitmap()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.ReusableBitmap $r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        return $r1;
    }

    public void setDecodeDimensions(int, int)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        int i0, i1, $i2, $i3;
        com.android.bitmap.RequestKey $r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeWidth>;

        if $i2 == 0 goto label1;

        $i3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeHeight>;

        if $i3 != 0 goto label2;

     label1:
        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeWidth> = i0;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeHeight> = i1;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void setImage(com.android.bitmap.RequestKey)>($r1);

     label2:
        return;
    }

    public void bind(com.android.bitmap.RequestKey)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("bind");

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;

     label1:
        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void setImage(com.android.bitmap.RequestKey)>(r1);

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;
    }

    public void unbind()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void unbind(boolean)>(0);

        return;
    }

    public void unbind(boolean)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        boolean z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("unbind");

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void setImage(com.android.bitmap.RequestKey)>(null);

        if z0 != 0 goto label1;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mPrevKey> = null;

     label1:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;
    }

    protected void setImage(com.android.bitmap.RequestKey)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1, $r4;
        com.android.bitmap.ReusableBitmap r2, $r3, $r11;
        com.android.bitmap.DecodeTask $r5, $r10;
        com.android.bitmap.RequestKey$Cancelable $r6, $r9;
        com.android.bitmap.BitmapCache $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("set image");

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("release reference");

        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        if $r3 == null goto label1;

        $r11 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        virtualinvoke $r11.<com.android.bitmap.ReusableBitmap: void releaseReference()>();

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap> = null;

     label1:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        $r4 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mPrevKey> = $r4;

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey> = r1;

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask>;

        if $r5 == null goto label2;

        $r10 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask>;

        virtualinvoke $r10.<com.android.bitmap.DecodeTask: void cancel()>();

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask> = null;

     label2:
        $r6 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask>;

        if $r6 == null goto label3;

        $r9 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask>;

        interfaceinvoke $r9.<com.android.bitmap.RequestKey$Cancelable: void cancel()>();

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask> = null;

     label3:
        if r1 != null goto label4;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void invalidateSelf()>();

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;

     label4:
        $r7 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.BitmapCache mCache>;

        $r8 = interfaceinvoke $r7.<com.android.bitmap.BitmapCache: java.lang.Object get(java.lang.Object,boolean)>(r1, 1);

        r2 = (com.android.bitmap.ReusableBitmap) $r8;

        if r2 == null goto label5;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void setBitmap(com.android.bitmap.ReusableBitmap)>(r2);

        goto label6;

     label5:
        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void loadFileDescriptorFactory()>();

     label6:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;
    }

    protected void setBitmap(com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.ReusableBitmap r1, $r2;
        boolean $z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.ReusableBitmap;

        $z0 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean hasBitmap()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        virtualinvoke $r2.<com.android.bitmap.ReusableBitmap: void releaseReference()>();

     label1:
        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap> = r1;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void invalidateSelf()>();

        return;
    }

    protected void loadFileDescriptorFactory()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey $r1, $r2, $r3;
        int $i0, $i1;
        com.android.bitmap.RequestKey$Cancelable $r4, $r5;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        if $r1 == null goto label1;

        $i0 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeWidth>;

        if $i0 == 0 goto label1;

        $i1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeHeight>;

        if $i1 != 0 goto label2;

     label1:
        return;

     label2:
        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $r4 = interfaceinvoke $r3.<com.android.bitmap.RequestKey: com.android.bitmap.RequestKey$Cancelable createFileDescriptorFactoryAsync(com.android.bitmap.RequestKey,com.android.bitmap.RequestKey$Callback)>($r2, r0);

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask> = $r4;

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask>;

        if $r5 != null goto label3;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void decode(com.android.bitmap.RequestKey$FileDescriptorFactory)>(null);

     label3:
        return;
    }

    public void fileDescriptorFactoryCreated(com.android.bitmap.RequestKey, com.android.bitmap.RequestKey$FileDescriptorFactory)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1, $r4;
        com.android.bitmap.RequestKey$FileDescriptorFactory r2;
        com.android.bitmap.RequestKey$Cancelable $r3;
        boolean $z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        r2 := @parameter1: com.android.bitmap.RequestKey$FileDescriptorFactory;

        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask>;

        if $r3 != null goto label1;

        return;

     label1:
        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey$Cancelable mCreateFileDescriptorFactoryTask> = null;

        $r4 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void decode(com.android.bitmap.RequestKey$FileDescriptorFactory)>(r2);

     label2:
        return;
    }

    protected void decode(com.android.bitmap.RequestKey$FileDescriptorFactory)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey$FileDescriptorFactory r1;
        int i0, i1, $i2, $i3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        boolean $z0;
        com.android.bitmap.DecodeTask $r2, $r4, $r7, $r11;
        com.android.bitmap.DecodeTask$DecodeOptions $r3, r12;
        com.android.bitmap.BitmapCache $r5;
        com.android.bitmap.RequestKey $r6;
        java.util.concurrent.Executor $r8;
        java.lang.Void[] $r9;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey$FileDescriptorFactory;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("decode");

        $z0 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean mLimitDensity>;

        if $z0 == 0 goto label1;

        $f2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: float mDensity>;

        $f3 = 1.5F / $f2;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f3);

        $i2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeWidth>;

        $f4 = (float) $i2;

        $f5 = $f4 * f0;

        i0 = (int) $f5;

        $i3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeHeight>;

        $f7 = (float) $i3;

        $f6 = $f7 * f0;

        i1 = (int) $f6;

        goto label2;

     label1:
        i0 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeWidth>;

        i1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: int mDecodeHeight>;

     label2:
        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask>;

        if $r2 == null goto label3;

        $r11 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask>;

        virtualinvoke $r11.<com.android.bitmap.DecodeTask: void cancel()>();

     label3:
        $r3 = new com.android.bitmap.DecodeTask$DecodeOptions;

        $f1 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: float getDecodeVerticalCenter()>();

        specialinvoke $r3.<com.android.bitmap.DecodeTask$DecodeOptions: void <init>(int,int,float,int)>(i0, i1, $f1, 0);

        r12 = $r3;

        $r4 = new com.android.bitmap.DecodeTask;

        $r6 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.BitmapCache mCache>;

        specialinvoke $r4.<com.android.bitmap.DecodeTask: void <init>(com.android.bitmap.RequestKey,com.android.bitmap.DecodeTask$DecodeOptions,com.android.bitmap.RequestKey$FileDescriptorFactory,com.android.bitmap.DecodeTask$DecodeCallback,com.android.bitmap.BitmapCache)>($r6, r12, r1, r0, $r5);

        r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask> = $r4;

        $r7 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.DecodeTask mTask>;

        $r8 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: java.util.concurrent.Executor getExecutor()>();

        $r9 = newarray (java.lang.Void)[0];

        virtualinvoke $r7.<com.android.bitmap.DecodeTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r8, $r9);

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return;
    }

    protected java.util.concurrent.Executor getExecutor()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        java.util.concurrent.Executor $r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = <com.android.bitmap.drawable.BasicBitmapDrawable: java.util.concurrent.Executor EXECUTOR>;

        return $r1;
    }

    protected float getDrawVerticalCenter()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        return 0.5F;
    }

    protected float getDrawVerticalOffsetMultiplier()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        return 1.0F;
    }

    protected float getDecodeVerticalCenter()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        return 0.5F;
    }

    public void draw(android.graphics.Canvas)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, r3, $r6, $r9, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        boolean $z0, $z1;
        com.android.bitmap.ReusableBitmap $r4, $r5, $r7, $r8, $r10;
        float $f0, $f1, $f2, $f3, $f4;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect getBounds()>();

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean hasBitmap()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $i1 = virtualinvoke $r4.<com.android.bitmap.ReusableBitmap: int getLogicalWidth()>();

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $i2 = virtualinvoke $r5.<com.android.bitmap.ReusableBitmap: int getLogicalHeight()>();

        $i3 = virtualinvoke r2.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $i5 = virtualinvoke r2.<android.graphics.Rect: int height()>();

        $f0 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: float getDrawVerticalCenter()>();

        $f1 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: float getDrawVerticalOffsetMultiplier()>();

        $r6 = <com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect sRect>;

        staticinvoke <com.android.bitmap.util.BitmapUtils: void calculateCroppedSrcRect(int,int,int,int,int,int,float,boolean,float,android.graphics.Rect)>($i1, $i2, $i3, $i4, $i5, 2147483647, $f0, 0, $f1, $r6);

        $r7 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        i0 = virtualinvoke $r7.<com.android.bitmap.ReusableBitmap: int getOrientation()>();

        $r9 = new android.graphics.Rect;

        $r8 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $i6 = virtualinvoke $r8.<com.android.bitmap.ReusableBitmap: int getLogicalWidth()>();

        $r10 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $i7 = virtualinvoke $r10.<com.android.bitmap.ReusableBitmap: int getLogicalHeight()>();

        specialinvoke $r9.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i6, $i7);

        $r11 = <com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect sRect>;

        staticinvoke <com.android.bitmap.util.RectUtils: void rotateRectForOrientation(int,android.graphics.Rect,android.graphics.Rect)>(i0, $r9, $r11);

        $r12 = new android.graphics.Rect;

        specialinvoke $r12.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        r3 = $r12;

        $i8 = virtualinvoke r2.<android.graphics.Rect: int centerX()>();

        $i10 = virtualinvoke r2.<android.graphics.Rect: int centerY()>();

        staticinvoke <com.android.bitmap.util.RectUtils: void rotateRect(int,int,int,android.graphics.Rect)>(i0, $i8, $i10, r3);

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $f2 = (float) i0;

        $i9 = virtualinvoke r2.<android.graphics.Rect: int centerX()>();

        $f4 = (float) $i9;

        $i12 = virtualinvoke r2.<android.graphics.Rect: int centerY()>();

        $f3 = (float) $i12;

        virtualinvoke r1.<android.graphics.Canvas: void rotate(float,float,float)>($f2, $f4, $f3);

        $r13 = <com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Rect sRect>;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void onDrawBitmap(android.graphics.Canvas,android.graphics.Rect,android.graphics.Rect)>(r1, $r13, r3);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label2:
        return;
    }

    protected boolean hasBitmap()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.ReusableBitmap $r1, $r2;
        android.graphics.Bitmap $r3;
        boolean $z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $r3 = $r2.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void onDrawBitmap(android.graphics.Canvas, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, r3;
        boolean $z0;
        com.android.bitmap.ReusableBitmap $r4;
        android.graphics.Paint $r5;
        android.graphics.Bitmap $r6;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Rect;

        $z0 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean hasBitmap()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $r6 = $r4.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        $r5 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>($r6, r2, r3, $r5);

     label1:
        return;
    }

    public void setAlpha(int)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        int i0, i1;
        android.graphics.Paint $r1, $r2;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        i1 = virtualinvoke $r1.<android.graphics.Paint: int getAlpha()>();

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>(i0);

        if i0 == i1 goto label1;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void invalidateSelf()>();

     label1:
        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.ColorFilter r1;
        android.graphics.Paint $r2;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.ColorFilter;

        $r2 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>(r1);

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public int getOpacity()
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        boolean $z0, $z1;
        com.android.bitmap.ReusableBitmap $r1;
        android.graphics.Bitmap $r2;
        byte $b0;
        android.graphics.Paint $r3;
        int $i1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        $z0 = virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: boolean hasBitmap()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.ReusableBitmap mBitmap>;

        $r2 = $r1.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        $z1 = virtualinvoke $r2.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z1 != 0 goto label1;

        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: android.graphics.Paint mPaint>;

        $i1 = virtualinvoke $r3.<android.graphics.Paint: int getAlpha()>();

        if $i1 >= 255 goto label2;

     label1:
        $b0 = -3;

        goto label3;

     label2:
        $b0 = -1;

     label3:
        return $b0;
    }

    public void onDecodeBegin(com.android.bitmap.RequestKey)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        return;
    }

    public void onDecodeComplete(com.android.bitmap.RequestKey, com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1, $r3;
        com.android.bitmap.ReusableBitmap r2;
        boolean $z0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        r2 := @parameter1: com.android.bitmap.ReusableBitmap;

        $r3 = r0.<com.android.bitmap.drawable.BasicBitmapDrawable: com.android.bitmap.RequestKey mCurrKey>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void setBitmap(com.android.bitmap.ReusableBitmap)>(r2);

        goto label2;

     label1:
        if r2 == null goto label2;

        virtualinvoke r2.<com.android.bitmap.ReusableBitmap: void releaseReference()>();

     label2:
        return;
    }

    public void onDecodeCancel(com.android.bitmap.RequestKey)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        com.android.bitmap.RequestKey r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void invalidateSelf()>();

        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        long l0;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l0 := @parameter2: long;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void scheduleSelf(java.lang.Runnable,long)>(r2, l0);

        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        com.android.bitmap.drawable.BasicBitmapDrawable r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;

        r0 := @this: com.android.bitmap.drawable.BasicBitmapDrawable;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        virtualinvoke r0.<com.android.bitmap.drawable.BasicBitmapDrawable: void unscheduleSelf(java.lang.Runnable)>(r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Runtime $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;
        com.android.bitmap.NamedThreadFactory $r4;
        java.util.concurrent.Executor $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        <com.android.bitmap.drawable.BasicBitmapDrawable: boolean DEBUG> = 0;

        <com.android.bitmap.drawable.BasicBitmapDrawable: float NO_MULTIPLIER> = 1.0F;

        <com.android.bitmap.drawable.BasicBitmapDrawable: float VERTICAL_CENTER> = 0.5F;

        <com.android.bitmap.drawable.BasicBitmapDrawable: int MAX_BITMAP_DENSITY> = 240;

        $r0 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r0.<java.lang.Runtime: int availableProcessors()>();

        <com.android.bitmap.drawable.BasicBitmapDrawable: int CPU_COUNT> = $i0;

        $i1 = <com.android.bitmap.drawable.BasicBitmapDrawable: int CPU_COUNT>;

        $i2 = $i1 + 1;

        <com.android.bitmap.drawable.BasicBitmapDrawable: int CORE_POOL_SIZE> = $i2;

        $i3 = <com.android.bitmap.drawable.BasicBitmapDrawable: int CPU_COUNT>;

        $i4 = $i3 * 2;

        $i5 = $i4 + 1;

        <com.android.bitmap.drawable.BasicBitmapDrawable: int MAXIMUM_POOL_SIZE> = $i5;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $i6 = <com.android.bitmap.drawable.BasicBitmapDrawable: int CORE_POOL_SIZE>;

        $i7 = <com.android.bitmap.drawable.BasicBitmapDrawable: int MAXIMUM_POOL_SIZE>;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>(int)>(128);

        $r4 = new com.android.bitmap.NamedThreadFactory;

        specialinvoke $r4.<com.android.bitmap.NamedThreadFactory: void <init>(java.lang.String)>("decode");

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>($i6, $i7, 1L, $r3, $r2, $r4);

        <com.android.bitmap.drawable.BasicBitmapDrawable: java.util.concurrent.Executor SMALL_POOL_EXECUTOR> = $r1;

        $r5 = <com.android.bitmap.drawable.BasicBitmapDrawable: java.util.concurrent.Executor SMALL_POOL_EXECUTOR>;

        <com.android.bitmap.drawable.BasicBitmapDrawable: java.util.concurrent.Executor EXECUTOR> = $r5;

        $r6 = class "com/android/bitmap/drawable/BasicBitmapDrawable";

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.bitmap.drawable.BasicBitmapDrawable: java.lang.String TAG> = $r7;

        return;
    }
}
