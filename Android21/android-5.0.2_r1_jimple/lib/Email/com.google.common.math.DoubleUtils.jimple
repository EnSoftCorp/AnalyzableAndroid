final class com.google.common.math.DoubleUtils extends java.lang.Object
{
    static final long SIGNIFICAND_MASK;
    static final long EXPONENT_MASK;
    static final long SIGN_MASK;
    static final int SIGNIFICAND_BITS;
    static final int EXPONENT_BIAS;
    static final int MIN_DOUBLE_EXPONENT;
    static final int MAX_DOUBLE_EXPONENT;
    static final long IMPLICIT_BIT;
    private static final long ONE_BITS;

    private void <init>()
    {
        com.google.common.math.DoubleUtils r0;

        r0 := @this: com.google.common.math.DoubleUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static double next(double, boolean)
    {
        double d0, $d1, $d2;
        boolean z0, $z1;
        long l0, l3;
        byte $b1, $b2;

        d0 := @parameter0: double;

        z0 := @parameter1: boolean;

        $b1 = d0 cmpl 0.0;

        if $b1 != 0 goto label3;

        if z0 == 0 goto label1;

        $d2 = 4.9E-324;

        goto label2;

     label1:
        $d2 = -4.9E-324;

     label2:
        return $d2;

     label3:
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b2 = d0 cmpg 0.0;

        if $b2 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if $z1 != z0 goto label6;

        l3 = l0 - 1L;

        goto label7;

     label6:
        l3 = l0 + 1L;

     label7:
        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d1;
    }

    static int getExponent(double)
    {
        double d0;
        long l0, $l2, $l3;
        int i1, i4;

        d0 := @parameter0: double;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = l0 & 9218868437227405312L;

        $l3 = $l2 >> 52;

        i1 = (int) $l3;

        i4 = i1 + -1023;

        return i4;
    }

    static strictfp double scalb(double, int)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;
        int i0, i1, i2, $i5;
        long l3, $l4, $l6, l7, l8;
        boolean $z0, $z1, $z2;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        i1 = staticinvoke <com.google.common.math.DoubleUtils: int getExponent(double)>(d0);

        lookupswitch(i1)
        {
            case -1023: goto label2;
            case 1024: goto label1;
            default: goto label3;
        };

     label1:
        return d0;

     label2:
        $d1 = (double) i0;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(2.0, $d1);

        $d3 = d0 * $d2;

        return $d3;

     label3:
        i2 = i1 + i0;

        if -1022 > i2 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        if i2 > 1023 goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        $z0 = $z1 & $z2;

        if $z0 == 0 goto label8;

        l3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l7 = l3 & -9218868437227405313L;

        $i5 = i2 + 1023;

        $l4 = (long) $i5;

        $l6 = $l4 << 52;

        l8 = l7 | $l6;

        $d7 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l8);

        return $d7;

     label8:
        $d4 = (double) i0;

        $d5 = staticinvoke <java.lang.StrictMath: double pow(double,double)>(2.0, $d4);

        $d6 = d0 * $d5;

        return $d6;
    }

    static long getSignificand(double)
    {
        double d0;
        int i0;
        long l1, $l2, l3;
        boolean $z0;

        d0 := @parameter0: double;

        $z0 = staticinvoke <com.google.common.math.DoubleUtils: boolean isFinite(double)>(d0);

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "not a normal value");

        i0 = staticinvoke <com.google.common.math.DoubleUtils: int getExponent(double)>(d0);

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l3 = l1 & 4503599627370495L;

        if i0 != -1023 goto label1;

        $l2 = l3 << 1;

        goto label2;

     label1:
        $l2 = l3 | 4503599627370496L;

     label2:
        return $l2;
    }

    static boolean isFinite(double)
    {
        double d0;
        int $i0;
        boolean $z0;

        d0 := @parameter0: double;

        $i0 = staticinvoke <com.google.common.math.DoubleUtils: int getExponent(double)>(d0);

        if $i0 > 1023 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isNormal(double)
    {
        double d0;
        int $i0;
        boolean $z0;

        d0 := @parameter0: double;

        $i0 = staticinvoke <com.google.common.math.DoubleUtils: int getExponent(double)>(d0);

        if $i0 < -1022 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static double scaleNormalize(double)
    {
        double d0, $d1;
        long l0, $l1, $l2, $l3;

        d0 := @parameter0: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l0 = $l1 & 4503599627370495L;

        $l2 = <com.google.common.math.DoubleUtils: long ONE_BITS>;

        $l3 = l0 | $l2;

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);

        return $d1;
    }

    static double bigToDouble(java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2;
        int i0, i1, $i6, $i7, $i11, $i13, $i18, $i19;
        long l2, l3, l4, l5, $l9, $l10, $l12, $l14, $l15, $l16, $l20, l21, l22, l23;
        boolean z0, $z1;
        byte $b8, $b17;
        double $d0, $d1, $d2, $d3;

        r0 := @parameter0: java.math.BigInteger;

        r1 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger abs()>();

        $i6 = virtualinvoke r1.<java.math.BigInteger: int bitLength()>();

        i0 = $i6 - 1;

        if i0 >= 63 goto label1;

        $l20 = virtualinvoke r0.<java.math.BigInteger: long longValue()>();

        $d1 = (double) $l20;

        return $d1;

     label1:
        if i0 <= 1023 goto label2;

        $i18 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        $d2 = (double) $i18;

        $d3 = $d2 * #Infinity;

        return $d3;

     label2:
        $i7 = i0 - 52;

        i1 = $i7 - 1;

        $r2 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger shiftRight(int)>(i1);

        l2 = virtualinvoke $r2.<java.math.BigInteger: long longValue()>();

        l3 = l2 >> 1;

        l21 = l3 & 4503599627370495L;

        $l9 = l2 & 1L;

        $b8 = $l9 cmp 0L;

        if $b8 == 0 goto label4;

        $l15 = l21 & 1L;

        $b17 = $l15 cmp 0L;

        if $b17 != 0 goto label3;

        $i19 = virtualinvoke r1.<java.math.BigInteger: int getLowestSetBit()>();

        if $i19 >= i1 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        z0 = $z1;

        if z0 == 0 goto label6;

        $l16 = l21 + 1L;

        goto label7;

     label6:
        $l16 = l21;

     label7:
        l4 = $l16;

        $i11 = i0 + 1023;

        $l10 = (long) $i11;

        l5 = $l10 << 52;

        l22 = l5 + l4;

        $i13 = virtualinvoke r0.<java.math.BigInteger: int signum()>();

        $l12 = (long) $i13;

        $l14 = $l12 & -9223372036854775808L;

        l23 = l22 | $l14;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l23);

        return $d0;
    }

    static void <clinit>()
    {
        long $l0;

        <com.google.common.math.DoubleUtils: long IMPLICIT_BIT> = 4503599627370496L;

        <com.google.common.math.DoubleUtils: int MAX_DOUBLE_EXPONENT> = 1023;

        <com.google.common.math.DoubleUtils: int MIN_DOUBLE_EXPONENT> = -1022;

        <com.google.common.math.DoubleUtils: int EXPONENT_BIAS> = 1023;

        <com.google.common.math.DoubleUtils: int SIGNIFICAND_BITS> = 52;

        <com.google.common.math.DoubleUtils: long SIGN_MASK> = -9223372036854775808L;

        <com.google.common.math.DoubleUtils: long EXPONENT_MASK> = 9218868437227405312L;

        <com.google.common.math.DoubleUtils: long SIGNIFICAND_MASK> = 4503599627370495L;

        $l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(1.0);

        <com.google.common.math.DoubleUtils: long ONE_BITS> = $l0;

        return;
    }
}
