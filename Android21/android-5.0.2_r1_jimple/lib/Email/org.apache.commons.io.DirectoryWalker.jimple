public abstract class org.apache.commons.io.DirectoryWalker extends java.lang.Object
{
    private final java.io.FileFilter filter;
    private final int depthLimit;

    protected void <init>()
    {
        org.apache.commons.io.DirectoryWalker r0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void <init>(java.io.FileFilter,int)>(null, -1);

        return;
    }

    protected void <init>(java.io.FileFilter, int)
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.FileFilter r1;
        int i0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.FileFilter;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = r1;

        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = i0;

        return;
    }

    protected void <init>(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter, int)
    {
        org.apache.commons.io.DirectoryWalker r0;
        org.apache.commons.io.filefilter.IOFileFilter r1, r2, $r3, $r4, $r5, r6, r7, r8, r9;
        int i0;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: org.apache.commons.io.filefilter.IOFileFilter;

        r2 := @parameter1: org.apache.commons.io.filefilter.IOFileFilter;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        if r2 != null goto label1;

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = null;

        goto label6;

     label1:
        if r1 == null goto label2;

        $r5 = r1;

        goto label3;

     label2:
        $r5 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

     label3:
        r6 = $r5;

        if r2 == null goto label4;

        $r4 = r2;

        goto label5;

     label4:
        $r4 = <org.apache.commons.io.filefilter.TrueFileFilter: org.apache.commons.io.filefilter.IOFileFilter TRUE>;

     label5:
        r7 = $r4;

        r8 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)>(r6);

        r9 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)>(r7);

        $r3 = staticinvoke <org.apache.commons.io.filefilter.FileFilterUtils: org.apache.commons.io.filefilter.IOFileFilter orFileFilter(org.apache.commons.io.filefilter.IOFileFilter,org.apache.commons.io.filefilter.IOFileFilter)>(r8, r9);

        r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter> = $r3;

     label6:
        r0.<org.apache.commons.io.DirectoryWalker: int depthLimit> = i0;

        return;
    }

    protected final void walk(java.io.File, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException r3, $r5;
        java.lang.NullPointerException $r4;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Start Directory is null");

        throw $r4;

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleStart(java.io.File,java.util.Collection)>(r1, r2);

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(r1, 0, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleEnd(java.util.Collection)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleCancelled(java.io.File,java.util.Collection,org.apache.commons.io.DirectoryWalker$CancelException)>(r1, r2, r3);

     label4:
        return;

        catch org.apache.commons.io.DirectoryWalker$CancelException from label1 to label2 with label3;
    }

    private void walk(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1, r4;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.Collection r2;
        java.io.File[] r3, $r7;
        boolean $z0, $z1;
        java.io.FileFilter $r5, $r6;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleDirectory(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        if $z0 == 0 goto label9;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryStart(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        i1 = i0 + 1;

        $i3 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if $i3 < 0 goto label1;

        $i5 = r0.<org.apache.commons.io.DirectoryWalker: int depthLimit>;

        if i1 > $i5 goto label8;

     label1:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        $r5 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        if $r5 != null goto label2;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles()>();

        goto label3;

     label2:
        $r6 = r0.<org.apache.commons.io.DirectoryWalker: java.io.FileFilter filter>;

        $r7 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r6);

     label3:
        r3 = $r7;

        if r3 != null goto label4;

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleRestricted(java.io.File,int,java.util.Collection)>(r1, i1, r2);

        goto label8;

     label4:
        i2 = 0;

     label5:
        $i4 = lengthof r3;

        if i2 >= $i4 goto label8;

        r4 = r3[i2];

        $z1 = virtualinvoke r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label6;

        specialinvoke r0.<org.apache.commons.io.DirectoryWalker: void walk(java.io.File,int,java.util.Collection)>(r4, i1, r2);

        goto label7;

     label6:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r4, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleFile(java.io.File,int,java.util.Collection)>(r4, i1, r2);

        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r4, i1, r2);

     label7:
        i2 = i2 + 1;

        goto label5;

     label8:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void handleDirectoryEnd(java.io.File,int,java.util.Collection)>(r1, i0, r2);

     label9:
        virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: void checkIfCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        return;
    }

    protected final void checkIfCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;
        boolean $z0;
        org.apache.commons.io.DirectoryWalker$CancelException $r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        $z0 = virtualinvoke r0.<org.apache.commons.io.DirectoryWalker: boolean handleIsCancelled(java.io.File,int,java.util.Collection)>(r1, i0, r2);

        if $z0 == 0 goto label1;

        $r3 = new org.apache.commons.io.DirectoryWalker$CancelException;

        specialinvoke $r3.<org.apache.commons.io.DirectoryWalker$CancelException: void <init>(java.io.File,int)>(r1, i0);

        throw $r3;

     label1:
        return;
    }

    protected boolean handleIsCancelled(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 0;
    }

    protected void handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        java.util.Collection r2;
        org.apache.commons.io.DirectoryWalker$CancelException r3;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: org.apache.commons.io.DirectoryWalker$CancelException;

        throw r3;
    }

    protected void handleStart(java.io.File, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.util.Collection;

        return;
    }

    protected boolean handleDirectory(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return 1;
    }

    protected void handleDirectoryStart(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleFile(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleRestricted(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleDirectoryEnd(java.io.File, int, java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.io.File r1;
        int i0;
        java.util.Collection r2;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.Collection;

        return;
    }

    protected void handleEnd(java.util.Collection) throws java.io.IOException
    {
        org.apache.commons.io.DirectoryWalker r0;
        java.util.Collection r1;

        r0 := @this: org.apache.commons.io.DirectoryWalker;

        r1 := @parameter0: java.util.Collection;

        return;
    }
}
