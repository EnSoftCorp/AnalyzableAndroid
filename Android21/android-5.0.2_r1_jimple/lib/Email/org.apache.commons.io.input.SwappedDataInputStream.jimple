public class org.apache.commons.io.input.SwappedDataInputStream extends org.apache.commons.io.input.ProxyInputStream implements java.io.DataInput
{

    public void <init>(java.io.InputStream)
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.io.input.ProxyInputStream: void <init>(java.io.InputStream)>(r1);

        return;
    }

    public boolean readBoolean() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $b0 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: byte readByte()>();

        if 0 != $b0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public byte readByte() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        int $i0;
        byte $b1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        $b1 = (byte) $i0;

        return $b1;
    }

    public char readChar() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        short $s0;
        char $c1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $s0 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: short readShort()>();

        $c1 = (char) $s0;

        return $c1;
    }

    public double readDouble() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        double $d0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $d0 = staticinvoke <org.apache.commons.io.EndianUtils: double readSwappedDouble(java.io.InputStream)>($r1);

        return $d0;
    }

    public float readFloat() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        float $f0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $f0 = staticinvoke <org.apache.commons.io.EndianUtils: float readSwappedFloat(java.io.InputStream)>($r1);

        return $f0;
    }

    public void readFully(byte[]) throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: void readFully(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void readFully(byte[], int, int) throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, i4, $i5;
        java.io.EOFException $r2;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i1;

     label1:
        if i2 <= 0 goto label3;

        $i5 = i1 - i2;

        i3 = i0 + $i5;

        i4 = virtualinvoke r0.<org.apache.commons.io.input.SwappedDataInputStream: int read(byte[],int,int)>(r1, i3, i2);

        if -1 != i4 goto label2;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label2:
        i2 = i2 - i4;

        goto label1;

     label3:
        return;
    }

    public int readInt() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedInteger(java.io.InputStream)>($r1);

        return $i0;
    }

    public java.lang.String readLine() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported: readLine()");

        throw $r1;
    }

    public long readLong() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        long $l0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $l0 = staticinvoke <org.apache.commons.io.EndianUtils: long readSwappedLong(java.io.InputStream)>($r1);

        return $l0;
    }

    public short readShort() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        short $s0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $s0 = staticinvoke <org.apache.commons.io.EndianUtils: short readSwappedShort(java.io.InputStream)>($r1);

        return $s0;
    }

    public int readUnsignedByte() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int readUnsignedShort() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.io.InputStream $r1;
        int $i0;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $i0 = staticinvoke <org.apache.commons.io.EndianUtils: int readSwappedUnsignedShort(java.io.InputStream)>($r1);

        return $i0;
    }

    public java.lang.String readUTF() throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Operation not supported: readUTF()");

        throw $r1;
    }

    public int skipBytes(int) throws java.io.IOException, java.io.EOFException
    {
        org.apache.commons.io.input.SwappedDataInputStream r0;
        int i0, $i3;
        long $l1, $l2;
        java.io.InputStream $r1;

        r0 := @this: org.apache.commons.io.input.SwappedDataInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.io.input.SwappedDataInputStream: java.io.InputStream in>;

        $l1 = (long) i0;

        $l2 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l1);

        $i3 = (int) $l2;

        return $i3;
    }
}
