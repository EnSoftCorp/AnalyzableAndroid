public class com.android.email.mail.transport.MailTransport extends java.lang.Object
{
    public static final int SOCKET_CONNECT_TIMEOUT;
    public static final int SOCKET_READ_TIMEOUT;
    private static final javax.net.ssl.HostnameVerifier HOSTNAME_VERIFIER;
    private final java.lang.String mDebugLabel;
    private final android.content.Context mContext;
    protected final com.android.emailcommon.provider.HostAuth mHostAuth;
    private java.net.Socket mSocket;
    private java.io.InputStream mIn;
    private java.io.OutputStream mOut;

    public void <init>(android.content.Context, java.lang.String, com.android.emailcommon.provider.HostAuth)
    {
        com.android.email.mail.transport.MailTransport r0;
        android.content.Context r1;
        java.lang.String r2;
        com.android.emailcommon.provider.HostAuth r3;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.emailcommon.provider.HostAuth;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.email.mail.transport.MailTransport: android.content.Context mContext> = r1;

        r0.<com.android.email.mail.transport.MailTransport: java.lang.String mDebugLabel> = r2;

        r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth> = r3;

        return;
    }

    public com.android.email.mail.transport.MailTransport clone()
    {
        com.android.email.mail.transport.MailTransport r0, $r1;
        com.android.emailcommon.provider.HostAuth $r2;
        java.lang.String $r3;
        android.content.Context $r4;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = new com.android.email.mail.transport.MailTransport;

        $r4 = r0.<com.android.email.mail.transport.MailTransport: android.content.Context mContext>;

        $r3 = r0.<com.android.email.mail.transport.MailTransport: java.lang.String mDebugLabel>;

        $r2 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        specialinvoke $r1.<com.android.email.mail.transport.MailTransport: void <init>(android.content.Context,java.lang.String,com.android.emailcommon.provider.HostAuth)>($r4, $r3, $r2);

        return $r1;
    }

    public java.lang.String getHost()
    {
        com.android.email.mail.transport.MailTransport r0;
        com.android.emailcommon.provider.HostAuth $r1;
        java.lang.String $r2;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $r2 = $r1.<com.android.emailcommon.provider.HostAuth: java.lang.String mAddress>;

        return $r2;
    }

    public int getPort()
    {
        com.android.email.mail.transport.MailTransport r0;
        com.android.emailcommon.provider.HostAuth $r1;
        int $i0;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $i0 = $r1.<com.android.emailcommon.provider.HostAuth: int mPort>;

        return $i0;
    }

    public boolean canTrySslSecurity()
    {
        com.android.email.mail.transport.MailTransport r0;
        com.android.emailcommon.provider.HostAuth $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $i0 = $r1.<com.android.emailcommon.provider.HostAuth: int mFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean canTryTlsSecurity()
    {
        com.android.email.mail.transport.MailTransport r0;
        com.android.emailcommon.provider.HostAuth $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $i0 = $r1.<com.android.emailcommon.provider.HostAuth: int mFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean canTrustAllCertificates()
    {
        com.android.email.mail.transport.MailTransport r0;
        com.android.emailcommon.provider.HostAuth $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $i0 = $r1.<com.android.emailcommon.provider.HostAuth: int mFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void open() throws com.android.emailcommon.mail.MessagingException, com.android.emailcommon.mail.CertificateValidationException
    {
        com.android.email.mail.transport.MailTransport r0;
        java.net.InetSocketAddress r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.String $r3, $r13, $r21, $r23, $r24, $r26, $r31, $r34, $r36, $r37, $r40, $r41, $r42, $r45, $r46, $r47;
        int $i0, $i1;
        java.net.Socket $r4, $r5, $r7, $r10, $r12, $r14, $r19;
        java.io.BufferedInputStream $r6;
        java.io.InputStream $r8;
        java.io.BufferedOutputStream $r9;
        java.io.OutputStream $r11;
        com.android.emailcommon.provider.HostAuth $r15;
        android.content.Context $r16;
        android.net.SSLCertificateSocketFactory $r17;
        java.lang.StringBuilder $r18, $r20, $r22, $r25, $r27, $r28, $r30;
        java.lang.Object[] $r29, $r35, $r44, $r49;
        com.android.emailcommon.mail.MessagingException $r32, $r38;
        java.lang.IllegalArgumentException $r33, r52;
        java.io.IOException $r39, r51;
        javax.net.ssl.SSLException $r43, r50;
        com.android.emailcommon.mail.CertificateValidationException $r48;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $z0 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z0 == 0 goto label01;

        $r21 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*** ");

        $r23 = r0.<com.android.email.mail.transport.MailTransport: java.lang.String mDebugLabel>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" open ");

        $r24 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i1 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: int getPort()>();

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r21, $r31, $r29);

     label01:
        $r2 = new java.net.InetSocketAddress;

        $r3 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: int getPort()>();

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r3, $i0);

        r1 = $r2;

        $z1 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean canTrySslSecurity()>();

        if $z1 == 0 goto label02;

        $r16 = r0.<com.android.email.mail.transport.MailTransport: android.content.Context mContext>;

        $r15 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $z4 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean canTrustAllCertificates()>();

        $r17 = staticinvoke <com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(android.content.Context,com.android.emailcommon.provider.HostAuth,boolean)>($r16, $r15, $z4);

        $r19 = virtualinvoke $r17.<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()>();

        r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket> = $r19;

        goto label03;

     label02:
        $r4 = new java.net.Socket;

        specialinvoke $r4.<java.net.Socket: void <init>()>();

        r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket> = $r4;

     label03:
        $r5 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        virtualinvoke $r5.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r1, 10000);

        $z2 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean canTrySslSecurity()>();

        if $z2 == 0 goto label04;

        $z3 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean canTrustAllCertificates()>();

        if $z3 != 0 goto label04;

        $r14 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r13 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>();

        staticinvoke <com.android.email.mail.transport.MailTransport: void verifyHostname(java.net.Socket,java.lang.String)>($r14, $r13);

     label04:
        $r6 = new java.io.BufferedInputStream;

        $r7 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r8 = virtualinvoke $r7.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r8, 1024);

        r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn> = $r6;

        $r9 = new java.io.BufferedOutputStream;

        $r10 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r11 = virtualinvoke $r10.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r9.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r11, 512);

        r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut> = $r9;

        $r12 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        virtualinvoke $r12.<java.net.Socket: void setSoTimeout(int)>(60000);

     label05:
        goto label12;

     label06:
        $r43 := @caughtexception;

        r50 = $r43;

        $z7 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z7 == 0 goto label07;

        $r46 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r45 = virtualinvoke r50.<javax.net.ssl.SSLException: java.lang.String toString()>();

        $r49 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r46, $r45, $r49);

     label07:
        $r48 = new com.android.emailcommon.mail.CertificateValidationException;

        $r47 = virtualinvoke r50.<javax.net.ssl.SSLException: java.lang.String getMessage()>();

        specialinvoke $r48.<com.android.emailcommon.mail.CertificateValidationException: void <init>(java.lang.String,java.lang.Throwable)>($r47, r50);

        throw $r48;

     label08:
        $r39 := @caughtexception;

        r51 = $r39;

        $z6 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z6 == 0 goto label09;

        $r41 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r40 = virtualinvoke r51.<java.io.IOException: java.lang.String toString()>();

        $r44 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r41, $r40, $r44);

     label09:
        $r38 = new com.android.emailcommon.mail.MessagingException;

        $r42 = virtualinvoke r51.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r38.<com.android.emailcommon.mail.MessagingException: void <init>(int,java.lang.String)>(1, $r42);

        throw $r38;

     label10:
        $r33 := @caughtexception;

        r52 = $r33;

        $z5 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z5 == 0 goto label11;

        $r37 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r34 = virtualinvoke r52.<java.lang.IllegalArgumentException: java.lang.String toString()>();

        $r35 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r37, $r34, $r35);

     label11:
        $r32 = new com.android.emailcommon.mail.MessagingException;

        $r36 = virtualinvoke r52.<java.lang.IllegalArgumentException: java.lang.String toString()>();

        specialinvoke $r32.<com.android.emailcommon.mail.MessagingException: void <init>(int,java.lang.String)>(0, $r36);

        throw $r32;

     label12:
        return;

        catch javax.net.ssl.SSLException from label01 to label05 with label06;
        catch java.io.IOException from label01 to label05 with label08;
        catch java.lang.IllegalArgumentException from label01 to label05 with label10;
    }

    public void reopenTls() throws com.android.emailcommon.mail.MessagingException
    {
        com.android.email.mail.transport.MailTransport r0;
        javax.net.ssl.SSLException r1, $r21;
        android.content.Context $r2;
        com.android.emailcommon.provider.HostAuth $r3;
        boolean $z0, $z1, $z2;
        android.net.SSLCertificateSocketFactory $r4;
        java.net.Socket $r5, $r7, $r8, $r10, $r13;
        java.lang.String $r6, $r17, $r18, $r19, $r22, $r24, $r25;
        int $i0;
        java.io.BufferedInputStream $r9;
        java.io.InputStream $r11;
        java.io.BufferedOutputStream $r12;
        java.io.IOException $r14, r27;
        java.io.OutputStream $r15;
        com.android.emailcommon.mail.MessagingException $r16;
        java.lang.Object[] $r20, $r26;
        com.android.emailcommon.mail.CertificateValidationException $r23;

        r0 := @this: com.android.email.mail.transport.MailTransport;

     label1:
        $r2 = r0.<com.android.email.mail.transport.MailTransport: android.content.Context mContext>;

        $r3 = r0.<com.android.email.mail.transport.MailTransport: com.android.emailcommon.provider.HostAuth mHostAuth>;

        $z0 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean canTrustAllCertificates()>();

        $r4 = staticinvoke <com.android.emailcommon.utility.SSLUtils: android.net.SSLCertificateSocketFactory getSSLSocketFactory(android.content.Context,com.android.emailcommon.provider.HostAuth,boolean)>($r2, $r3, $z0);

        $r5 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r6 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.lang.String getHost()>();

        $i0 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: int getPort()>();

        $r7 = virtualinvoke $r4.<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r5, $r6, $i0, 1);

        r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket> = $r7;

        $r8 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        virtualinvoke $r8.<java.net.Socket: void setSoTimeout(int)>(60000);

        $r9 = new java.io.BufferedInputStream;

        $r10 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r11 = virtualinvoke $r10.<java.net.Socket: java.io.InputStream getInputStream()>();

        specialinvoke $r9.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r11, 1024);

        r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn> = $r9;

        $r12 = new java.io.BufferedOutputStream;

        $r13 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r15 = virtualinvoke $r13.<java.net.Socket: java.io.OutputStream getOutputStream()>();

        specialinvoke $r12.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r15, 512);

        r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut> = $r12;

     label2:
        goto label7;

     label3:
        $r21 := @caughtexception;

        r1 = $r21;

        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 == 0 goto label4;

        $r25 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r24 = virtualinvoke r1.<javax.net.ssl.SSLException: java.lang.String toString()>();

        $r26 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r25, $r24, $r26);

     label4:
        $r23 = new com.android.emailcommon.mail.CertificateValidationException;

        $r22 = virtualinvoke r1.<javax.net.ssl.SSLException: java.lang.String getMessage()>();

        specialinvoke $r23.<com.android.emailcommon.mail.CertificateValidationException: void <init>(java.lang.String,java.lang.Throwable)>($r22, r1);

        throw $r23;

     label5:
        $r14 := @caughtexception;

        r27 = $r14;

        $z1 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z1 == 0 goto label6;

        $r19 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r18 = virtualinvoke r27.<java.io.IOException: java.lang.String toString()>();

        $r20 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r19, $r18, $r20);

     label6:
        $r16 = new com.android.emailcommon.mail.MessagingException;

        $r17 = virtualinvoke r27.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r16.<com.android.emailcommon.mail.MessagingException: void <init>(int,java.lang.String)>(1, $r17);

        throw $r16;

     label7:
        return;

        catch javax.net.ssl.SSLException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label5;
    }

    private static void verifyHostname(java.net.Socket, java.lang.String) throws java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1, $r9;
        javax.net.ssl.SSLSocket r2;
        javax.net.ssl.SSLSession r3;
        javax.net.ssl.HostnameVerifier $r4;
        boolean $z0;
        javax.net.ssl.SSLPeerUnverifiedException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        javax.net.ssl.SSLException $r10;

        r0 := @parameter0: java.net.Socket;

        r1 := @parameter1: java.lang.String;

        r2 = (javax.net.ssl.SSLSocket) r0;

        virtualinvoke r2.<javax.net.ssl.SSLSocket: void startHandshake()>();

        r3 = virtualinvoke r2.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        if r3 != null goto label1;

        $r10 = new javax.net.ssl.SSLException;

        specialinvoke $r10.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Cannot verify SSL socket without session");

        throw $r10;

     label1:
        $r4 = <com.android.email.mail.transport.MailTransport: javax.net.ssl.HostnameVerifier HOSTNAME_VERIFIER>;

        $z0 = interfaceinvoke $r4.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>(r1, r3);

        if $z0 != 0 goto label2;

        $r5 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate hostname not useable for server: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        return;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        com.android.email.mail.transport.MailTransport r0;
        java.net.Socket $r1;
        int $i0;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

        return $i0;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        com.android.email.mail.transport.MailTransport r0;
        int i0;
        java.net.Socket $r1;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>(i0);

        return;
    }

    public boolean isOpen()
    {
        com.android.email.mail.transport.MailTransport r0;
        java.io.InputStream $r1;
        java.io.OutputStream $r2;
        java.net.Socket $r3, $r4, $r5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        if $r3 == null goto label1;

        $r4 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $z0 = virtualinvoke $r4.<java.net.Socket: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $z1 = virtualinvoke $r5.<java.net.Socket: boolean isClosed()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public void close()
    {
        com.android.email.mail.transport.MailTransport r0;
        java.io.InputStream $r2;
        java.io.OutputStream $r3;
        java.net.Socket $r4;
        java.lang.Exception $r5, $r6, $r7;

        r0 := @this: com.android.email.mail.transport.MailTransport;

     label01:
        $r2 = r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label02:
        goto label04;

     label03:
        $r5 := @caughtexception;

     label04:
        $r3 = r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label05:
        goto label07;

     label06:
        $r6 := @caughtexception;

     label07:
        $r4 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        virtualinvoke $r4.<java.net.Socket: void close()>();

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

     label10:
        r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn> = null;

        r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut> = null;

        r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket> = null;

        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    public java.io.InputStream getInputStream()
    {
        com.android.email.mail.transport.MailTransport r0;
        java.io.InputStream $r1;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream mIn>;

        return $r1;
    }

    public java.io.OutputStream getOutputStream()
    {
        com.android.email.mail.transport.MailTransport r0;
        java.io.OutputStream $r1;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream mOut>;

        return $r1;
    }

    public void writeLine(java.lang.String, java.lang.String) throws java.io.IOException
    {
        com.android.email.mail.transport.MailTransport r0;
        java.lang.String r1, r2, $r6, $r9, $r13, $r14;
        java.io.OutputStream r3;
        boolean $z0, $z1;
        byte[] $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r11, $r12, $r15;
        java.lang.Object[] $r10, $r16;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z0 == 0 goto label2;

        if r2 == null goto label1;

        $z1 = <com.android.emailcommon.Logging: boolean DEBUG_SENSITIVE>;

        if $z1 != 0 goto label1;

        $r13 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>> ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r13, $r14, $r16);

        goto label2;

     label1:
        $r6 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>> ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r6, $r9, $r10);

     label2:
        r3 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.io.OutputStream getOutputStream()>();

        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        virtualinvoke r3.<java.io.OutputStream: void write(byte[])>($r4);

        virtualinvoke r3.<java.io.OutputStream: void write(int)>(13);

        virtualinvoke r3.<java.io.OutputStream: void write(int)>(10);

        virtualinvoke r3.<java.io.OutputStream: void flush()>();

        return;
    }

    public java.lang.String readLine(boolean) throws java.io.IOException
    {
        com.android.email.mail.transport.MailTransport r0;
        boolean z0, $z1, $z2;
        java.lang.StringBuffer r1, $r4;
        java.io.InputStream r2;
        int i0, $i1;
        java.lang.String r3, $r6, $r9, $r12;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.Object[] $r10, $r11;
        char $c4, $c5, $c6;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        z0 := @parameter0: boolean;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        r1 = $r4;

        r2 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: java.io.InputStream getInputStream()>();

     label1:
        $i1 = virtualinvoke r2.<java.io.InputStream: int read()>();

        i0 = $i1;

        if $i1 == -1 goto label4;

        $c5 = (char) i0;

        if $c5 != 13 goto label2;

        goto label1;

     label2:
        $c4 = (char) i0;

        if $c4 != 10 goto label3;

        goto label4;

     label3:
        $c6 = (char) i0;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        goto label1;

     label4:
        if i0 != -1 goto label5;

        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 == 0 goto label5;

        $r12 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r12, "End of stream reached while trying to read line.", $r11);

     label5:
        r3 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>();

        if z0 == 0 goto label6;

        $z1 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z1 == 0 goto label6;

        $r6 = <com.android.emailcommon.Logging: java.lang.String LOG_TAG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<< ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>($r6, $r9, $r10);

     label6:
        return r3;
    }

    public java.net.InetAddress getLocalAddress()
    {
        com.android.email.mail.transport.MailTransport r0;
        boolean $z0;
        java.net.Socket $r1;
        java.net.InetAddress $r2;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $z0 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: boolean isOpen()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.email.mail.transport.MailTransport: java.net.Socket mSocket>;

        $r2 = virtualinvoke $r1.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        return $r2;

     label1:
        return null;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        com.android.email.mail.transport.MailTransport r0, $r1;

        r0 := @this: com.android.email.mail.transport.MailTransport;

        $r1 = virtualinvoke r0.<com.android.email.mail.transport.MailTransport: com.android.email.mail.transport.MailTransport clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        javax.net.ssl.HostnameVerifier $r0;

        <com.android.email.mail.transport.MailTransport: int SOCKET_READ_TIMEOUT> = 60000;

        <com.android.email.mail.transport.MailTransport: int SOCKET_CONNECT_TIMEOUT> = 10000;

        $r0 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.HostnameVerifier getDefaultHostnameVerifier()>();

        <com.android.email.mail.transport.MailTransport: javax.net.ssl.HostnameVerifier HOSTNAME_VERIFIER> = $r0;

        return;
    }
}
