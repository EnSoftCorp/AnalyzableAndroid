public abstract class org.apache.james.mime4j.field.Field extends java.lang.Object
{
    public static final java.lang.String SENDER;
    public static final java.lang.String FROM;
    public static final java.lang.String TO;
    public static final java.lang.String CC;
    public static final java.lang.String BCC;
    public static final java.lang.String REPLY_TO;
    public static final java.lang.String RESENT_SENDER;
    public static final java.lang.String RESENT_FROM;
    public static final java.lang.String RESENT_TO;
    public static final java.lang.String RESENT_CC;
    public static final java.lang.String RESENT_BCC;
    public static final java.lang.String DATE;
    public static final java.lang.String RESENT_DATE;
    public static final java.lang.String SUBJECT;
    public static final java.lang.String CONTENT_TYPE;
    public static final java.lang.String CONTENT_TRANSFER_ENCODING;
    private static final java.lang.String FIELD_NAME_PATTERN;
    private static final java.util.regex.Pattern fieldNamePattern;
    private static final org.apache.james.mime4j.field.DefaultFieldParser parser;
    private final java.lang.String name;
    private final java.lang.String body;
    private final java.lang.String raw;

    protected void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.apache.james.mime4j.field.Field;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.james.mime4j.field.Field: java.lang.String name> = r1;

        r0.<org.apache.james.mime4j.field.Field: java.lang.String body> = r2;

        r0.<org.apache.james.mime4j.field.Field: java.lang.String raw> = r3;

        return;
    }

    public static org.apache.james.mime4j.field.Field parse(java.lang.String)
    {
        java.lang.String r0, r1, r3, r4;
        java.util.regex.Matcher r2;
        java.util.regex.Pattern $r5;
        boolean $z0;
        int $i0, $i1;
        org.apache.james.mime4j.field.DefaultFieldParser $r6;
        org.apache.james.mime4j.field.Field $r7;
        char $c2;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\r|\n", "");

        $r5 = <org.apache.james.mime4j.field.Field: java.util.regex.Pattern fieldNamePattern>;

        r2 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid field in string");

        throw $r8;

     label1:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = virtualinvoke r2.<java.util.regex.Matcher: int end()>();

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if $c2 != 32 goto label2;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>(1);

     label2:
        $r6 = <org.apache.james.mime4j.field.Field: org.apache.james.mime4j.field.DefaultFieldParser parser>;

        $r7 = virtualinvoke $r6.<org.apache.james.mime4j.field.DefaultFieldParser: org.apache.james.mime4j.field.Field parse(java.lang.String,java.lang.String,java.lang.String)>(r3, r4, r0);

        return $r7;
    }

    public static org.apache.james.mime4j.field.DefaultFieldParser getParser()
    {
        org.apache.james.mime4j.field.DefaultFieldParser $r0;

        $r0 = <org.apache.james.mime4j.field.Field: org.apache.james.mime4j.field.DefaultFieldParser parser>;

        return $r0;
    }

    public java.lang.String getName()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String name>;

        return $r1;
    }

    public java.lang.String getRaw()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String raw>;

        return $r1;
    }

    public java.lang.String getBody()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String body>;

        return $r1;
    }

    public boolean isContentType()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r2 = "Content-Type";

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isSubject()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r2 = "Subject";

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isFrom()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r2 = "From";

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public boolean isTo()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r2 = "To";

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.james.mime4j.field.Field r0;
        java.lang.String $r1;

        r0 := @this: org.apache.james.mime4j.field.Field;

        $r1 = r0.<org.apache.james.mime4j.field.Field: java.lang.String raw>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        org.apache.james.mime4j.field.DefaultFieldParser $r1;

        <org.apache.james.mime4j.field.Field: java.lang.String FIELD_NAME_PATTERN> = "^([\\x21-\\x39\\x3b-\\x7e]+)[ \t]*:";

        <org.apache.james.mime4j.field.Field: java.lang.String CONTENT_TRANSFER_ENCODING> = "Content-Transfer-Encoding";

        <org.apache.james.mime4j.field.Field: java.lang.String CONTENT_TYPE> = "Content-Type";

        <org.apache.james.mime4j.field.Field: java.lang.String SUBJECT> = "Subject";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_DATE> = "Resent-Date";

        <org.apache.james.mime4j.field.Field: java.lang.String DATE> = "Date";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_BCC> = "Resent-Bcc";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_CC> = "Resent-Cc";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_TO> = "Resent-To";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_FROM> = "Resent-From";

        <org.apache.james.mime4j.field.Field: java.lang.String RESENT_SENDER> = "Resent-Sender";

        <org.apache.james.mime4j.field.Field: java.lang.String REPLY_TO> = "Reply-To";

        <org.apache.james.mime4j.field.Field: java.lang.String BCC> = "Bcc";

        <org.apache.james.mime4j.field.Field: java.lang.String CC> = "Cc";

        <org.apache.james.mime4j.field.Field: java.lang.String TO> = "To";

        <org.apache.james.mime4j.field.Field: java.lang.String FROM> = "From";

        <org.apache.james.mime4j.field.Field: java.lang.String SENDER> = "Sender";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("^([\\x21-\\x39\\x3b-\\x7e]+)[ \t]*:");

        <org.apache.james.mime4j.field.Field: java.util.regex.Pattern fieldNamePattern> = $r0;

        $r1 = new org.apache.james.mime4j.field.DefaultFieldParser;

        specialinvoke $r1.<org.apache.james.mime4j.field.DefaultFieldParser: void <init>()>();

        <org.apache.james.mime4j.field.Field: org.apache.james.mime4j.field.DefaultFieldParser parser> = $r1;

        return;
    }
}
