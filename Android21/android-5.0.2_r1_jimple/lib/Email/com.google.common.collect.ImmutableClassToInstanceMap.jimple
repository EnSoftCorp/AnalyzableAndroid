public final class com.google.common.collect.ImmutableClassToInstanceMap extends com.google.common.collect.ForwardingMap implements com.google.common.collect.ClassToInstanceMap
{
    private final com.google.common.collect.ImmutableMap delegate;

    public static com.google.common.collect.ImmutableClassToInstanceMap$Builder builder()
    {
        com.google.common.collect.ImmutableClassToInstanceMap$Builder $r0;

        $r0 = new com.google.common.collect.ImmutableClassToInstanceMap$Builder;

        specialinvoke $r0.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: void <init>()>();

        return $r0;
    }

    public static com.google.common.collect.ImmutableClassToInstanceMap copyOf(java.util.Map)
    {
        java.util.Map r0;
        com.google.common.collect.ImmutableClassToInstanceMap r1, $r4;
        boolean $z0;
        com.google.common.collect.ImmutableClassToInstanceMap$Builder $r2, $r3;

        r0 := @parameter0: java.util.Map;

        $z0 = r0 instanceof com.google.common.collect.ImmutableClassToInstanceMap;

        if $z0 == 0 goto label1;

        r1 = (com.google.common.collect.ImmutableClassToInstanceMap) r0;

        return r1;

     label1:
        $r2 = new com.google.common.collect.ImmutableClassToInstanceMap$Builder;

        specialinvoke $r2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: void <init>()>();

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap$Builder putAll(java.util.Map)>(r0);

        $r4 = virtualinvoke $r3.<com.google.common.collect.ImmutableClassToInstanceMap$Builder: com.google.common.collect.ImmutableClassToInstanceMap build()>();

        return $r4;
    }

    private void <init>(com.google.common.collect.ImmutableMap)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        r1 := @parameter0: com.google.common.collect.ImmutableMap;

        specialinvoke r0.<com.google.common.collect.ForwardingMap: void <init>()>();

        r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate> = r1;

        return;
    }

    protected java.util.Map delegate()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap $r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 = r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        return $r1;
    }

    public java.lang.Object getInstance(java.lang.Class)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        java.lang.Class r1;
        com.google.common.collect.ImmutableMap $r2;
        java.lang.Object $r3;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<com.google.common.collect.ImmutableClassToInstanceMap: com.google.common.collect.ImmutableMap delegate>;

        $r3 = virtualinvoke $r2.<com.google.common.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object putInstance(java.lang.Class, java.lang.Object)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        java.lang.Class r1;
        java.lang.Object r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    protected volatile java.lang.Object delegate()
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        java.util.Map $r1;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        $r1 = virtualinvoke r0.<com.google.common.collect.ImmutableClassToInstanceMap: java.util.Map delegate()>();

        return $r1;
    }

    void <init>(com.google.common.collect.ImmutableMap, com.google.common.collect.ImmutableClassToInstanceMap$1)
    {
        com.google.common.collect.ImmutableClassToInstanceMap r0;
        com.google.common.collect.ImmutableMap r1;
        com.google.common.collect.ImmutableClassToInstanceMap$1 r2;

        r0 := @this: com.google.common.collect.ImmutableClassToInstanceMap;

        r1 := @parameter0: com.google.common.collect.ImmutableMap;

        r2 := @parameter1: com.google.common.collect.ImmutableClassToInstanceMap$1;

        specialinvoke r0.<com.google.common.collect.ImmutableClassToInstanceMap: void <init>(com.google.common.collect.ImmutableMap)>(r1);

        return;
    }
}
