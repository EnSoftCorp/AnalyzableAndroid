class com.android.email.service.AccountService$1 extends com.android.emailcommon.service.IAccountService$Stub
{
    final com.android.email.service.AccountService this$0;

    void <init>(com.android.email.service.AccountService)
    {
        com.android.email.service.AccountService$1 r0;
        com.android.email.service.AccountService r1;

        r0 := @this: com.android.email.service.AccountService$1;

        r1 := @parameter0: com.android.email.service.AccountService;

        r0.<com.android.email.service.AccountService$1: com.android.email.service.AccountService this$0> = r1;

        specialinvoke r0.<com.android.emailcommon.service.IAccountService$Stub: void <init>()>();

        return;
    }

    public int getAccountColor(long)
    {
        com.android.email.service.AccountService$1 r0;
        long l0;
        com.android.email.service.AccountService $r1;
        android.content.Context $r2;
        com.android.email.ResourceHelper $r3;
        int $i1;

        r0 := @this: com.android.email.service.AccountService$1;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.email.service.AccountService$1: com.android.email.service.AccountService this$0>;

        $r2 = staticinvoke <com.android.email.service.AccountService: android.content.Context access$000(com.android.email.service.AccountService)>($r1);

        $r3 = staticinvoke <com.android.email.ResourceHelper: com.android.email.ResourceHelper getInstance(android.content.Context)>($r2);

        $i1 = virtualinvoke $r3.<com.android.email.ResourceHelper: int getAccountColor(long)>(l0);

        return $i1;
    }

    public android.os.Bundle getConfigurationData(java.lang.String)
    {
        com.android.email.service.AccountService$1 r0;
        java.lang.String r1;
        android.os.Bundle r2, $r3;
        com.android.email.service.AccountService $r4;
        android.content.Context $r5;
        com.android.emailcommon.VendorPolicyLoader $r6;
        boolean $z0;

        r0 := @this: com.android.email.service.AccountService$1;

        r1 := @parameter0: java.lang.String;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        r2 = $r3;

        $r4 = r0.<com.android.email.service.AccountService$1: com.android.email.service.AccountService this$0>;

        $r5 = staticinvoke <com.android.email.service.AccountService: android.content.Context access$000(com.android.email.service.AccountService)>($r4);

        $r6 = staticinvoke <com.android.emailcommon.VendorPolicyLoader: com.android.emailcommon.VendorPolicyLoader getInstance(android.content.Context)>($r5);

        $z0 = virtualinvoke $r6.<com.android.emailcommon.VendorPolicyLoader: boolean useAlternateExchangeStrings()>();

        virtualinvoke r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("com.android.email.EXCHANGE_CONFIGURATION_USE_ALTERNATE_STRINGS", $z0);

        return r2;
    }

    public java.lang.String getDeviceId()
    {
        com.android.email.service.AccountService$1 r0;
        com.android.email.service.AccountService$1$1 $r2;
        com.android.email.service.AccountService $r4;
        android.content.Context $r5;
        java.lang.String $r6;
        java.io.IOException $r7;

        r0 := @this: com.android.email.service.AccountService$1;

     label1:
        $r2 = new com.android.email.service.AccountService$1$1;

        specialinvoke $r2.<com.android.email.service.AccountService$1$1: void <init>(com.android.email.service.AccountService$1)>(r0);

        staticinvoke <com.android.emailcommon.utility.EmailAsyncTask: com.android.emailcommon.utility.EmailAsyncTask runAsyncSerial(java.lang.Runnable)>($r2);

        $r4 = r0.<com.android.email.service.AccountService$1: com.android.email.service.AccountService this$0>;

        $r5 = staticinvoke <com.android.email.service.AccountService: android.content.Context access$000(com.android.email.service.AccountService)>($r4);

        $r6 = staticinvoke <com.android.emailcommon.Device: java.lang.String getDeviceId(android.content.Context)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
