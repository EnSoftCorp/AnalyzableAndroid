class com.beetstra.jutf7.UTF7StyleCharsetDecoder extends java.nio.charset.CharsetDecoder
{
    private final com.beetstra.jutf7.Base64Util base64;
    private final byte shift;
    private final byte unshift;
    private final boolean strict;
    private boolean base64mode;
    private int bitsRead;
    private int tempChar;
    private boolean justShifted;
    private boolean justUnshifted;

    void <init>(com.beetstra.jutf7.UTF7StyleCharset, com.beetstra.jutf7.Base64Util, boolean)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        com.beetstra.jutf7.UTF7StyleCharset r1;
        com.beetstra.jutf7.Base64Util r2;
        boolean z0;
        byte $b0, $b1;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: com.beetstra.jutf7.UTF7StyleCharset;

        r2 := @parameter1: com.beetstra.jutf7.Base64Util;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.nio.charset.CharsetDecoder: void <init>(java.nio.charset.Charset,float,float)>(r1, 0.6F, 1.0F);

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: com.beetstra.jutf7.Base64Util base64> = r2;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict> = z0;

        $b0 = virtualinvoke r1.<com.beetstra.jutf7.UTF7StyleCharset: byte shift()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift> = $b0;

        $b1 = virtualinvoke r1.<com.beetstra.jutf7.UTF7StyleCharset: byte unshift()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte unshift> = $b1;

        return;
    }

    protected java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer, java.nio.CharBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer r1;
        java.nio.CharBuffer r2;
        byte b0, $b1, $b3, $b5;
        java.nio.charset.CoderResult r3, $r4, $r6, $r7, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        char $c2, $c4;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.CharBuffer;

     label01:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label14;

        b0 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        $z1 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode>;

        if $z1 == 0 goto label09;

        $b3 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte unshift>;

        if b0 != $b3 goto label06;

        $z6 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z6 == 0 goto label02;

        $r11 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>(r1);

        return $r11;

     label02:
        $z8 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted>;

        if $z8 == 0 goto label04;

        $z7 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z7 != 0 goto label03;

        $r9 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>(r1);

        return $r9;

     label03:
        $b5 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift>;

        $c4 = (char) $b5;

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c4);

        goto label05;

     label04:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 1;

     label05:
        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

        goto label08;

     label06:
        $z5 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z5 != 0 goto label07;

        $r8 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>(r1);

        return $r8;

     label07:
        r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult handleBase64(java.nio.ByteBuffer,java.nio.CharBuffer,byte)>(r1, r2, b0);

        if r3 == null goto label08;

        return r3;

     label08:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted> = 0;

        goto label13;

     label09:
        $b1 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: byte shift>;

        if b0 != $b1 goto label11;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode> = 1;

        $z3 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted>;

        if $z3 == 0 goto label10;

        $z4 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z4 == 0 goto label10;

        $r7 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>(r1);

        return $r7;

     label10:
        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justShifted> = 1;

        goto label01;

     label11:
        $z2 = virtualinvoke r2.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label12;

        $r6 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)>(r1);

        return $r6;

     label12:
        $c2 = (char) b0;

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c2);

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 0;

     label13:
        goto label01;

     label14:
        $r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r4;
    }

    private java.nio.charset.CoderResult overflow(java.nio.ByteBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1;
        java.nio.charset.CoderResult $r3;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i1 = $i0 - 1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r3 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return $r3;
    }

    private java.nio.charset.CoderResult handleBase64(java.nio.ByteBuffer, java.nio.CharBuffer, byte)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer r1;
        java.nio.CharBuffer r2;
        byte b0;
        java.nio.charset.CoderResult r3, $r6;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        com.beetstra.jutf7.Base64Util $r4;
        boolean $z0, $z1;
        char $c2, $c13;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.CharBuffer;

        b0 := @parameter2: byte;

        r3 = null;

        $r4 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: com.beetstra.jutf7.Base64Util base64>;

        i1 = virtualinvoke $r4.<com.beetstra.jutf7.Base64Util: int getSextet(byte)>(b0);

        if i1 < 0 goto label2;

        $i3 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i4 = $i3 + 6;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = $i4;

        $i6 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        if $i6 >= 16 goto label1;

        $i22 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $i19 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i18 = 16 - $i19;

        $i21 = i1 << $i18;

        $i20 = $i22 + $i21;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i20;

        goto label5;

     label1:
        $i5 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i8 = $i5 - 16;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = $i8;

        $i9 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $i7 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i10 = i1 >> $i7;

        $i12 = $i9 + $i10;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i12;

        $i11 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        $c13 = (char) $i11;

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c13);

        $i15 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        $i14 = 16 - $i15;

        $i17 = i1 << $i14;

        $i16 = $i17 & 65535;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = $i16;

        goto label5;

     label2:
        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z0 == 0 goto label3;

        $r6 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>(r1);

        return $r6;

     label3:
        $c2 = (char) b0;

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(char)>($c2);

        $z1 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z1 == 0 goto label4;

        r3 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)>(r1);

     label4:
        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

     label5:
        return r3;
    }

    protected java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.CharBuffer r1;
        boolean $z0, $z1, $z2;
        java.nio.charset.CoderResult $r2, $r3;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: java.nio.CharBuffer;

        $z0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode>;

        if $z0 == 0 goto label1;

        $z2 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean strict>;

        if $z2 != 0 goto label2;

     label1:
        $z1 = specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64bitsWaiting()>();

        if $z1 == 0 goto label3;

     label2:
        $r3 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);

        return $r3;

     label3:
        $r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r2;
    }

    protected void implReset()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        specialinvoke r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: void setUnshifted()>();

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean justUnshifted> = 0;

        return;
    }

    private java.nio.charset.CoderResult malformed(java.nio.ByteBuffer)
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1;
        java.nio.charset.CoderResult $r3;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i1 = $i0 - 1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i1);

        $r3 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>(1);

        return $r3;
    }

    private boolean base64bitsWaiting()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        $i0 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar>;

        if $i0 != 0 goto label1;

        $i1 = r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead>;

        if $i1 < 6 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private void setUnshifted()
    {
        com.beetstra.jutf7.UTF7StyleCharsetDecoder r0;

        r0 := @this: com.beetstra.jutf7.UTF7StyleCharsetDecoder;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: boolean base64mode> = 0;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int bitsRead> = 0;

        r0.<com.beetstra.jutf7.UTF7StyleCharsetDecoder: int tempChar> = 0;

        return;
    }
}
