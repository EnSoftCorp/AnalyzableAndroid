public class com.android.bitmap.ReusableBitmap extends java.lang.Object implements com.android.bitmap.Poolable
{
    public final android.graphics.Bitmap bmp;
    private int mWidth;
    private int mHeight;
    private int mOrientation;
    private int mRefCount;
    private final boolean mReusable;

    public void <init>(android.graphics.Bitmap)
    {
        com.android.bitmap.ReusableBitmap r0;
        android.graphics.Bitmap r1;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<com.android.bitmap.ReusableBitmap: void <init>(android.graphics.Bitmap,boolean)>(r1, 1);

        return;
    }

    public void <init>(android.graphics.Bitmap, boolean)
    {
        com.android.bitmap.ReusableBitmap r0;
        android.graphics.Bitmap r1;
        boolean z0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        r1 := @parameter0: android.graphics.Bitmap;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.bitmap.ReusableBitmap: int mRefCount> = 0;

        r0.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp> = r1;

        r0.<com.android.bitmap.ReusableBitmap: boolean mReusable> = z0;

        return;
    }

    public boolean isEligibleForPooling()
    {
        com.android.bitmap.ReusableBitmap r0;
        boolean $z0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $z0 = r0.<com.android.bitmap.ReusableBitmap: boolean mReusable>;

        return $z0;
    }

    public void setLogicalWidth(int)
    {
        com.android.bitmap.ReusableBitmap r0;
        int i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        i0 := @parameter0: int;

        r0.<com.android.bitmap.ReusableBitmap: int mWidth> = i0;

        return;
    }

    public void setLogicalHeight(int)
    {
        com.android.bitmap.ReusableBitmap r0;
        int i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        i0 := @parameter0: int;

        r0.<com.android.bitmap.ReusableBitmap: int mHeight> = i0;

        return;
    }

    public int getLogicalWidth()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mWidth>;

        return $i0;
    }

    public int getLogicalHeight()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mHeight>;

        return $i0;
    }

    public int getOrientation()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mOrientation>;

        return $i0;
    }

    public void setOrientation(int)
    {
        com.android.bitmap.ReusableBitmap r0;
        int i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        i0 := @parameter0: int;

        r0.<com.android.bitmap.ReusableBitmap: int mOrientation> = i0;

        return;
    }

    public int getByteCount()
    {
        com.android.bitmap.ReusableBitmap r0;
        android.graphics.Bitmap $r1;
        int $i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $r1 = r0.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getByteCount()>();

        return $i0;
    }

    public void acquireReference()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0, $i1;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mRefCount>;

        $i1 = $i0 + 1;

        r0.<com.android.bitmap.ReusableBitmap: int mRefCount> = $i1;

        return;
    }

    public void releaseReference()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mRefCount>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        $i1 = r0.<com.android.bitmap.ReusableBitmap: int mRefCount>;

        $i2 = $i1 - 1;

        r0.<com.android.bitmap.ReusableBitmap: int mRefCount> = $i2;

        return;
    }

    public int getRefCount()
    {
        com.android.bitmap.ReusableBitmap r0;
        int $i0;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mRefCount>;

        return $i0;
    }

    public java.lang.String toString()
    {
        com.android.bitmap.ReusableBitmap r0;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3, $r19;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        android.graphics.Bitmap $r10, $r17, $r20;

        r0 := @this: com.android.bitmap.ReusableBitmap;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        r1 = $r2;

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" refCount=");

        $i0 = r0.<com.android.bitmap.ReusableBitmap: int mRefCount>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mReusable=");

        $z0 = r0.<com.android.bitmap.ReusableBitmap: boolean mReusable>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bmp=");

        $r10 = r0.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" logicalW/H=");

        $i1 = r0.<com.android.bitmap.ReusableBitmap: int mWidth>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i2 = r0.<com.android.bitmap.ReusableBitmap: int mHeight>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = r0.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        if $r17 == null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sz=");

        $r20 = r0.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        $i3 = virtualinvoke $r20.<android.graphics.Bitmap: int getByteCount()>();

        $i4 = $i3 >> 10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KB");

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r19 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;
    }
}
