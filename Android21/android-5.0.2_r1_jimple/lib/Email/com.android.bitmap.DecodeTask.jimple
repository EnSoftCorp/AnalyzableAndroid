public class com.android.bitmap.DecodeTask extends android.os.AsyncTask
{
    private final com.android.bitmap.RequestKey mKey;
    private final com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts;
    private final com.android.bitmap.RequestKey$FileDescriptorFactory mFactory;
    private final com.android.bitmap.DecodeTask$DecodeCallback mDecodeCallback;
    private final com.android.bitmap.BitmapCache mCache;
    private final android.graphics.BitmapFactory$Options mOpts;
    private com.android.bitmap.ReusableBitmap mInBitmap;
    private static final boolean CROP_DURING_DECODE;
    private static final java.lang.String TAG;
    public static final boolean DEBUG;

    public void <init>(com.android.bitmap.RequestKey, com.android.bitmap.DecodeTask$DecodeOptions, com.android.bitmap.RequestKey$FileDescriptorFactory, com.android.bitmap.DecodeTask$DecodeCallback, com.android.bitmap.BitmapCache)
    {
        com.android.bitmap.DecodeTask r0;
        com.android.bitmap.RequestKey r1;
        com.android.bitmap.DecodeTask$DecodeOptions r2;
        com.android.bitmap.RequestKey$FileDescriptorFactory r3;
        com.android.bitmap.DecodeTask$DecodeCallback r4;
        com.android.bitmap.BitmapCache r5;
        android.graphics.BitmapFactory$Options $r6;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: com.android.bitmap.RequestKey;

        r2 := @parameter1: com.android.bitmap.DecodeTask$DecodeOptions;

        r3 := @parameter2: com.android.bitmap.RequestKey$FileDescriptorFactory;

        r4 := @parameter3: com.android.bitmap.DecodeTask$DecodeCallback;

        r5 := @parameter4: com.android.bitmap.BitmapCache;

        specialinvoke r0.<android.os.AsyncTask: void <init>()>();

        $r6 = new android.graphics.BitmapFactory$Options;

        specialinvoke $r6.<android.graphics.BitmapFactory$Options: void <init>()>();

        r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts> = $r6;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap> = null;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey> = r1;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts> = r2;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey$FileDescriptorFactory mFactory> = r3;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeCallback mDecodeCallback> = r4;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache> = r5;

        return;
    }

    protected transient com.android.bitmap.ReusableBitmap doInBackground(java.lang.Void[])
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Void[] r1, $r2;
        com.android.bitmap.ReusableBitmap $r3;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Void[];

        $r2 = newarray (java.lang.Void)[0];

        virtualinvoke r0.<com.android.bitmap.DecodeTask: void publishProgress(java.lang.Object[])>($r2);

        $r3 = virtualinvoke r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap decode()>();

        return $r3;
    }

    public com.android.bitmap.ReusableBitmap decode()
    {
        com.android.bitmap.DecodeTask r0;
        com.android.bitmap.ReusableBitmap r1, $r33, $r34, $r37, $r39, $r46, $r47, $r56, $r57, $r60, $r62, $r66, $r72, $r73, $r77, $r78, $r80, $r81, $r85, $r87, $r92, $r93, $r97, $r100, $r103, $r104, $r107, $r112, $r114, $r115, $r118, $r119, $r120, $r121, $r127, $r131, $r132, $r141, $r142, $r146, $r147, $r154, $r155, $r169, $r171, $r176, $r178, $r204, $r205;
        android.os.ParcelFileDescriptor r2, r4;
        java.io.InputStream r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i35, i36;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.BitmapRegionDecoder r5;
        android.graphics.Bitmap r6, $r86, $r91, r225;
        java.lang.Throwable r7, r8, r9, $r182, $r185, $r188;
        com.android.bitmap.RequestKey$FileDescriptorFactory $r10, $r136, $r140;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19;
        com.android.bitmap.RequestKey $r11, $r41, $r49, $r59, $r65, $r71, $r75, $r83, $r89, $r105, $r111, $r123, $r125, $r134, $r145, $r149, $r150, $r165, $r172, $r202;
        android.graphics.BitmapFactory$Options $r12, $r13, $r14, $r15, $r18, $r21, $r22, $r23, $r32, $r36, $r42, $r43, $r44, $r45, $r52, $r68, $r90, $r98, $r99, $r108, $r137, $r214, $r221, $r222;
        com.android.bitmap.DecodeTask$DecodeOptions $r16, $r17, $r19, $r28, $r29, $r30, $r31, $r95, $r96;
        android.graphics.Rect $r20, $r35, r226;
        java.lang.StringBuilder $r24, $r25, $r27, $r51, $r53, $r54, $r213, $r216, $r218, $r220, $r224;
        java.lang.String $r26, $r50, $r215, $r217, $r223;
        com.android.bitmap.BitmapCache $r38, $r40, $r48, $r55, $r58, $r61, $r64, $r67, $r69, $r70, $r74, $r76, $r79, $r82, $r84, $r88, $r101, $r102, $r106, $r110, $r113, $r116, $r117, $r122, $r124, $r126, $r129, $r130, $r133, $r139, $r143, $r144, $r148, $r156, $r160, $r166, $r170, $r173, $r177, $r203, $r206;
        java.io.FileDescriptor $r63, $r109;
        android.graphics.Bitmap$Config $r94;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8;
        java.lang.Object $r128;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r135;
        java.io.IOException $r138, $r151, $r152, $r153, $r157, $r158, $r159, $r161, $r162, $r163, $r164, $r167, $r168, $r174, $r175, $r179, $r180, $r181, $r183, $r184, $r186, $r187, $r189, $r190, $r191, $r192, $r193, $r194, $r195, $r196, $r198, $r199, $r200, $r201, $r207, $r208, $r209, $r210, $r211, $r212, r227;
        java.lang.Exception $r197, r229;
        java.lang.IllegalArgumentException $r219, r228;
        long l34;

        r0 := @this: com.android.bitmap.DecodeTask;

        $z0 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z0 == 0 goto label001;

        return null;

     label001:
        r1 = null;

        r2 = null;

        r3 = null;

     label002:
        $r10 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey$FileDescriptorFactory mFactory>;

        if $r10 == null goto label003;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("create fd");

        $r140 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey$FileDescriptorFactory mFactory>;

        r2 = interfaceinvoke $r140.<com.android.bitmap.RequestKey$FileDescriptorFactory: android.os.ParcelFileDescriptor createFileDescriptor()>();

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label027;

     label003:
        r3 = specialinvoke r0.<com.android.bitmap.DecodeTask: java.io.InputStream reset(java.io.InputStream)>(r3);

        if r3 != null goto label015;

     label004:
        if r2 == null goto label008;

     label005:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label006:
        goto label008;

     label007:
        $r195 := @caughtexception;

     label008:
        if r3 == null goto label012;

     label009:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label010:
        goto label012;

     label011:
        $r157 := @caughtexception;

     label012:
        $r143 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r145 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r143.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r145, r1);

        if r1 == null goto label013;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label014;

     label013:
        $r141 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r141 == null goto label014;

        $r139 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r142 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r139.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r142);

     label014:
        return null;

     label015:
        $z1 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z1 == 0 goto label027;

     label016:
        if r2 == null goto label020;

     label017:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label018:
        goto label020;

     label019:
        $r181 := @caughtexception;

     label020:
        if r3 == null goto label024;

     label021:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label022:
        goto label024;

     label023:
        $r183 := @caughtexception;

     label024:
        $r148 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r149 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r148.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r149, r1);

        if r1 == null goto label025;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label026;

     label025:
        $r146 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r146 == null goto label026;

        $r144 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r147 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r144.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r147);

     label026:
        return null;

     label027:
        $i2 = <android.os.Build$VERSION: int SDK_INT>;

        if $i2 < 16 goto label028;

        $z16 = 1;

        goto label029;

     label028:
        $z16 = 0;

     label029:
        z18 = $z16;

        if z18 == 0 goto label030;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("poll for reusable bitmap");

        $r129 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r128 = interfaceinvoke $r129.<com.android.bitmap.BitmapCache: java.lang.Object poll()>();

        $r127 = (com.android.bitmap.ReusableBitmap) $r128;

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap> = $r127;

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

     label030:
        $z2 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z2 == 0 goto label042;

     label031:
        if r2 == null goto label035;

     label032:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label033:
        goto label035;

     label034:
        $r138 := @caughtexception;

     label035:
        if r3 == null goto label039;

     label036:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label037:
        goto label039;

     label038:
        $r209 := @caughtexception;

     label039:
        $r133 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r134 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r133.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r134, r1);

        if r1 == null goto label040;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label041;

     label040:
        $r132 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r132 == null goto label041;

        $r130 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r131 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r130.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r131);

     label041:
        return null;

     label042:
        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("get bytesize");

        if r2 == null goto label043;

        l34 = virtualinvoke r2.<android.os.ParcelFileDescriptor: long getStatSize()>();

        goto label044;

     label043:
        l34 = -1L;

     label044:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("get orientation");

        $r11 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        $z3 = interfaceinvoke $r11.<com.android.bitmap.RequestKey: boolean hasOrientationExif()>();

        if $z3 == 0 goto label049;

        if r2 == null goto label045;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("create orientation fd and stream");

        $r136 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey$FileDescriptorFactory mFactory>;

        r4 = interfaceinvoke $r136.<com.android.bitmap.RequestKey$FileDescriptorFactory: android.os.ParcelFileDescriptor createFileDescriptor()>();

        $r135 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r135.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r4);

        r3 = $r135;

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

     label045:
        i0 = staticinvoke <com.android.bitmap.util.Exif: int getOrientation(java.io.InputStream,long)>(r3, l34);

        if r2 == null goto label050;

     label046:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label047:
        goto label050;

     label048:
        $r200 := @caughtexception;

        goto label050;

     label049:
        i0 = 0;

     label050:
        if i0 == 0 goto label051;

        if i0 != 180 goto label052;

     label051:
        $z15 = 1;

        goto label053;

     label052:
        $z15 = 0;

     label053:
        z19 = $z15;

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        if i0 == 0 goto label054;

        $r114 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r114 == null goto label054;

        $r116 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r115 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r116.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r115);

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap> = null;

        $r137 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r137.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = null;

     label054:
        $z4 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z4 == 0 goto label066;

     label055:
        if r2 == null goto label059;

     label056:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label057:
        goto label059;

     label058:
        $r159 := @caughtexception;

     label059:
        if r3 == null goto label063;

     label060:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label061:
        goto label063;

     label062:
        $r196 := @caughtexception;

     label063:
        $r117 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r123 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r117.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r123, r1);

        if r1 == null goto label064;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label065;

     label064:
        $r118 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r118 == null goto label065;

        $r113 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r119 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r113.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r119);

     label065:
        return null;

     label066:
        if r2 != null goto label090;

        r3 = specialinvoke r0.<com.android.bitmap.DecodeTask: java.io.InputStream reset(java.io.InputStream)>(r3);

        if r3 != null goto label078;

     label067:
        if r2 == null goto label071;

     label068:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label069:
        goto label071;

     label070:
        $r210 := @caughtexception;

     label071:
        if r3 == null goto label075;

     label072:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label073:
        goto label075;

     label074:
        $r163 := @caughtexception;

     label075:
        $r126 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r125 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r126.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r125, r1);

        if r1 == null goto label076;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label077;

     label076:
        $r120 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r120 == null goto label077;

        $r122 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r121 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r122.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r121);

     label077:
        return null;

     label078:
        $z14 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z14 == 0 goto label090;

     label079:
        if r2 == null goto label083;

     label080:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label081:
        goto label083;

     label082:
        $r198 := @caughtexception;

     label083:
        if r3 == null goto label087;

     label084:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label085:
        goto label087;

     label086:
        $r207 := @caughtexception;

     label087:
        $r102 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r105 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r102.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r105, r1);

        if r1 == null goto label088;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label089;

     label088:
        $r104 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r104 == null goto label089;

        $r124 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r103 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r124.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r103);

     label089:
        return null;

     label090:
        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("decodeBounds");

        $r12 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r12.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 1;

        if r2 == null goto label091;

        $r109 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r108 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r109, null, $r108);

        goto label092;

     label091:
        $r14 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r3, null, $r14);

     label092:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        $z5 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z5 == 0 goto label104;

     label093:
        if r2 == null goto label097;

     label094:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label095:
        goto label097;

     label096:
        $r212 := @caughtexception;

     label097:
        if r3 == null goto label101;

     label098:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label099:
        goto label101;

     label100:
        $r211 := @caughtexception;

     label101:
        $r110 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r111 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r110.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r111, r1);

        if r1 == null goto label102;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label103;

     label102:
        $r112 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r112 == null goto label103;

        $r106 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r107 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r106.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r107);

     label103:
        return null;

     label104:
        if z19 == 0 goto label105;

        $r98 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        i35 = $r98.<android.graphics.BitmapFactory$Options: int outWidth>;

        $r99 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        i36 = $r99.<android.graphics.BitmapFactory$Options: int outHeight>;

        goto label106;

     label105:
        $r13 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        i35 = $r13.<android.graphics.BitmapFactory$Options: int outHeight>;

        $r15 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        i36 = $r15.<android.graphics.BitmapFactory$Options: int outWidth>;

     label106:
        $f3 = (float) i35;

        $r16 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i3 = $r16.<com.android.bitmap.DecodeTask$DecodeOptions: int destW>;

        $f1 = (float) $i3;

        $f4 = $f3 / $f1;

        $f5 = (float) i36;

        $r17 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i4 = $r17.<com.android.bitmap.DecodeTask$DecodeOptions: int destH>;

        $f2 = (float) $i4;

        $f6 = $f5 / $f2;

        f0 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f6);

        $r19 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i6 = $r19.<com.android.bitmap.DecodeTask$DecodeOptions: int sampleSizeStrategy>;

        tableswitch($i6)
        {
            case 0: goto label109;
            case 1: goto label107;
            case 2: goto label108;
            default: goto label109;
        };

     label107:
        i1 = (int) f0;

        goto label110;

     label108:
        $d5 = (double) f0;

        $d6 = staticinvoke <java.lang.Math: double ceil(double)>($d5);

        i1 = (int) $d6;

        goto label110;

     label109:
        $d8 = (double) f0;

        $d7 = staticinvoke <java.lang.Math: double log(double)>($d8);

        $d1 = staticinvoke <java.lang.Math: double log(double)>(2.0);

        $d2 = $d7 / $d1;

        $d0 = 0.5 + $d2;

        $i31 = (int) $d0;

        $d3 = (double) $i31;

        $d4 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d3);

        i1 = (int) $d4;

     label110:
        $r18 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(1, i1);

        $r18.<android.graphics.BitmapFactory$Options: int inSampleSize> = $i5;

        $r22 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r22.<android.graphics.BitmapFactory$Options: boolean inJustDecodeBounds> = 0;

        $r21 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r21.<android.graphics.BitmapFactory$Options: boolean inMutable> = 1;

        if z18 == 0 goto label123;

        if i0 != 0 goto label123;

        $r93 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r93 != null goto label122;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("create reusable bitmap");

        $r97 = new com.android.bitmap.ReusableBitmap;

        $r96 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i29 = $r96.<com.android.bitmap.DecodeTask$DecodeOptions: int destW>;

        $r95 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i30 = $r95.<com.android.bitmap.DecodeTask$DecodeOptions: int destH>;

        $r94 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r86 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i29, $i30, $r94);

        specialinvoke $r97.<com.android.bitmap.ReusableBitmap: void <init>(android.graphics.Bitmap)>($r86);

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap> = $r97;

        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        $z13 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z13 == 0 goto label122;

     label111:
        if r2 == null goto label115;

     label112:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label113:
        goto label115;

     label114:
        $r184 := @caughtexception;

     label115:
        if r3 == null goto label119;

     label116:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label117:
        goto label119;

     label118:
        $r167 := @caughtexception;

     label119:
        $r88 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r89 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r88.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, r1);

        if r1 == null goto label120;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label121;

     label120:
        $r87 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r87 == null goto label121;

        $r101 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r100 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r101.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r100);

     label121:
        return null;

     label122:
        $r90 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r92 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        $r91 = $r92.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        $r90.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = $r91;

     label123:
        $z6 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z6 == 0 goto label135;

     label124:
        if r2 == null goto label128;

     label125:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label126:
        goto label128;

     label127:
        $r190 := @caughtexception;

     label128:
        if r3 == null goto label132;

     label129:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label130:
        goto label132;

     label131:
        $r199 := @caughtexception;

     label132:
        $r76 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r75 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r76.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r75, r1);

        if r1 == null goto label133;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label134;

     label133:
        $r77 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r77 == null goto label134;

        $r79 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r78 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r79.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r78);

     label134:
        return null;

     label135:
        if r2 != null goto label159;

        r3 = specialinvoke r0.<com.android.bitmap.DecodeTask: java.io.InputStream reset(java.io.InputStream)>(r3);

        if r3 != null goto label147;

     label136:
        if r2 == null goto label140;

     label137:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label138:
        goto label140;

     label139:
        $r194 := @caughtexception;

     label140:
        if r3 == null goto label144;

     label141:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label142:
        goto label144;

     label143:
        $r162 := @caughtexception;

     label144:
        $r84 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r83 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r84.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r83, r1);

        if r1 == null goto label145;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label146;

     label145:
        $r85 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r85 == null goto label146;

        $r74 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r73 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r74.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r73);

     label146:
        return null;

     label147:
        $z12 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z12 == 0 goto label159;

     label148:
        if r2 == null goto label152;

     label149:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label150:
        goto label152;

     label151:
        $r164 := @caughtexception;

     label152:
        if r3 == null goto label156;

     label153:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label154:
        goto label156;

     label155:
        $r193 := @caughtexception;

     label156:
        $r64 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r65 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r64.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r65, r1);

        if r1 == null goto label157;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label158;

     label157:
        $r80 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r80 == null goto label158;

        $r82 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r81 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r82.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r81);

     label158:
        return null;

     label159:
        r225 = null;

        $r20 = new android.graphics.Rect;

        specialinvoke $r20.<android.graphics.Rect: void <init>()>();

        r226 = $r20;

     label160:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decodeCropped");

        $r23 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i7 = $r23.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>($r26);

        if r2 == null goto label161;

        $r63 = virtualinvoke r2.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        r5 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)>($r63, 1);

        goto label162;

     label161:
        r5 = staticinvoke <android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>(r3, 1);

     label162:
        $z7 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z7 == 0 goto label163;

        r6 = null;

        goto label164;

     label163:
        $r29 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i11 = $r29.<com.android.bitmap.DecodeTask$DecodeOptions: int destW>;

        $r30 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i10 = $r30.<com.android.bitmap.DecodeTask$DecodeOptions: int destH>;

        $r31 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $i9 = $r31.<com.android.bitmap.DecodeTask$DecodeOptions: int destH>;

        $r32 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i8 = $r32.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r28 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeOptions mDecodeOpts>;

        $f7 = $r28.<com.android.bitmap.DecodeTask$DecodeOptions: float verticalCenter>;

        staticinvoke <com.android.bitmap.util.BitmapUtils: void calculateCroppedSrcRect(int,int,int,int,int,int,float,boolean,float,android.graphics.Rect)>(i35, i36, $i11, $i10, $i9, $i8, $f7, 1, 1.0F, r226);

        $r35 = new android.graphics.Rect;

        specialinvoke $r35.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, i35, i36);

        staticinvoke <com.android.bitmap.util.RectUtils: void rotateRectForOrientation(int,android.graphics.Rect,android.graphics.Rect)>(i0, $r35, r226);

        $r36 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        r6 = virtualinvoke r5.<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r226, $r36);

     label164:
        virtualinvoke r5.<android.graphics.BitmapRegionDecoder: void recycle()>();

        r225 = r6;

     label165:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label196;

     label166:
        $r201 := @caughtexception;

        r227 = $r201;

        if r2 != null goto label192;

        r3 = specialinvoke r0.<com.android.bitmap.DecodeTask: java.io.InputStream reset(java.io.InputStream)>(r3);

        if r3 != null goto label179;

     label167:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

     label168:
        if r2 == null goto label172;

     label169:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label170:
        goto label172;

     label171:
        $r208 := @caughtexception;

     label172:
        if r3 == null goto label176;

     label173:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label174:
        goto label176;

     label175:
        $r180 := @caughtexception;

     label176:
        $r203 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r202 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r203.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r202, r1);

        if r1 == null goto label177;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label178;

     label177:
        $r204 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r204 == null goto label178;

        $r206 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r205 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r206.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r205);

     label178:
        return null;

     label179:
        $z17 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z17 == 0 goto label192;

     label180:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

     label181:
        if r2 == null goto label185;

     label182:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label183:
        goto label185;

     label184:
        $r187 := @caughtexception;

     label185:
        if r3 == null goto label189;

     label186:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label187:
        goto label189;

     label188:
        $r175 := @caughtexception;

     label189:
        $r173 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r172 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r173.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r172, r1);

        if r1 == null goto label190;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label191;

     label190:
        $r178 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r178 == null goto label191;

        $r177 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r176 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r177.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r176);

     label191:
        return null;

     label192:
        virtualinvoke r227.<java.io.IOException: void printStackTrace()>();

     label193:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label196;

     label194:
        $r188 := @caughtexception;

        r8 = $r188;

     label195:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        throw r8;

     label196:
        $z8 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z8 == 0 goto label208;

     label197:
        if r2 == null goto label201;

     label198:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label199:
        goto label201;

     label200:
        $r191 := @caughtexception;

     label201:
        if r3 == null goto label205;

     label202:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label203:
        goto label205;

     label204:
        $r186 := @caughtexception;

     label205:
        $r70 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r71 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r70.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, r1);

        if r1 == null goto label206;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label207;

     label206:
        $r72 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r72 == null goto label207;

        $r61 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r62 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r61.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r62);

     label207:
        return null;

     label208:
        if r225 != null goto label228;

        $z10 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z10 != 0 goto label228;

     label209:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decode");

        $r52 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i28 = $r52.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r51 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>($r50);

        $r60 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r60 == null goto label210;

        $r69 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r66 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r69.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r66);

        r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap> = null;

        $r68 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r68.<android.graphics.BitmapFactory$Options: android.graphics.Bitmap inBitmap> = null;

     label210:
        r225 = specialinvoke r0.<com.android.bitmap.DecodeTask: android.graphics.Bitmap decode(android.os.ParcelFileDescriptor,java.io.InputStream)>(r2, r3);

     label211:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label216;

     label212:
        $r219 := @caughtexception;

        r228 = $r219;

        $r217 = <com.android.bitmap.DecodeTask: java.lang.String TAG>;

        $r220 = new java.lang.StringBuilder;

        specialinvoke $r220.<java.lang.StringBuilder: void <init>()>();

        $r218 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("decode failed: reason=\'");

        $r215 = virtualinvoke r228.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r216 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r215);

        $r213 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ss=");

        $r214 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i33 = $r214.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $r224 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i33);

        $r223 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r217, $r223);

        $r222 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i32 = $r222.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        if $i32 <= 1 goto label213;

        $r221 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $r221.<android.graphics.BitmapFactory$Options: int inSampleSize> = 1;

        r225 = specialinvoke r0.<com.android.bitmap.DecodeTask: android.graphics.Bitmap decode(android.os.ParcelFileDescriptor,java.io.InputStream)>(r2, r3);

     label213:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        goto label216;

     label214:
        $r185 := @caughtexception;

        r7 = $r185;

     label215:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        throw r7;

     label216:
        $z11 = virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean isCancelled()>();

        if $z11 == 0 goto label228;

     label217:
        if r2 == null goto label221;

     label218:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label219:
        goto label221;

     label220:
        $r179 := @caughtexception;

     label221:
        if r3 == null goto label225;

     label222:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label223:
        goto label225;

     label224:
        $r174 := @caughtexception;

     label225:
        $r58 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r59 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r58.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, r1);

        if r1 == null goto label226;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label227;

     label226:
        $r57 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r57 == null goto label227;

        $r67 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r56 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r67.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r56);

     label227:
        return null;

     label228:
        if r225 != null goto label240;

     label229:
        if r2 == null goto label233;

     label230:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label231:
        goto label233;

     label232:
        $r152 := @caughtexception;

     label233:
        if r3 == null goto label237;

     label234:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label235:
        goto label237;

     label236:
        $r153 := @caughtexception;

     label237:
        $r48 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r49 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r48.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, r1);

        if r1 == null goto label238;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label239;

     label238:
        $r46 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r46 == null goto label239;

        $r55 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r47 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r55.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r47);

     label239:
        return null;

     label240:
        $r33 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r33 == null goto label242;

        r1 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        $z9 = virtualinvoke r226.<android.graphics.Rect: boolean isEmpty()>();

        if $z9 != 0 goto label241;

        $i24 = r226.<android.graphics.Rect: int right>;

        $i15 = r226.<android.graphics.Rect: int left>;

        $i23 = $i24 - $i15;

        $r45 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i22 = $r45.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $i20 = $i23 / $i22;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalWidth(int)>($i20);

        $i19 = r226.<android.graphics.Rect: int bottom>;

        $i21 = r226.<android.graphics.Rect: int top>;

        $i27 = $i19 - $i21;

        $r44 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i26 = $r44.<android.graphics.BitmapFactory$Options: int inSampleSize>;

        $i25 = $i27 / $i26;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalHeight(int)>($i25);

        goto label244;

     label241:
        $r43 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i14 = $r43.<android.graphics.BitmapFactory$Options: int outWidth>;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalWidth(int)>($i14);

        $r42 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        $i16 = $r42.<android.graphics.BitmapFactory$Options: int outHeight>;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalHeight(int)>($i16);

        goto label244;

     label242:
        $r34 = new com.android.bitmap.ReusableBitmap;

        specialinvoke $r34.<com.android.bitmap.ReusableBitmap: void <init>(android.graphics.Bitmap,boolean)>(r225, 0);

        r1 = $r34;

        if z19 == 0 goto label243;

        $i18 = virtualinvoke r225.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalWidth(int)>($i18);

        $i17 = virtualinvoke r225.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalHeight(int)>($i17);

        goto label244;

     label243:
        $i13 = virtualinvoke r225.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalWidth(int)>($i13);

        $i12 = virtualinvoke r225.<android.graphics.Bitmap: int getWidth()>();

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setLogicalHeight(int)>($i12);

     label244:
        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void setOrientation(int)>(i0);

     label245:
        if r2 == null goto label249;

     label246:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label247:
        goto label249;

     label248:
        $r189 := @caughtexception;

     label249:
        if r3 == null goto label253;

     label250:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label251:
        goto label253;

     label252:
        $r158 := @caughtexception;

     label253:
        $r40 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r41 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r40.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, r1);

        if r1 == null goto label254;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label278;

     label254:
        $r37 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r37 == null goto label278;

        $r38 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r39 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r38.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r39);

        goto label278;

     label255:
        $r197 := @caughtexception;

        r229 = $r197;

        virtualinvoke r229.<java.lang.Exception: void printStackTrace()>();

     label256:
        if r2 == null goto label260;

     label257:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label258:
        goto label260;

     label259:
        $r168 := @caughtexception;

     label260:
        if r3 == null goto label264;

     label261:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label262:
        goto label264;

     label263:
        $r161 := @caughtexception;

     label264:
        $r166 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r165 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r166.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r165, r1);

        if r1 == null goto label265;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label278;

     label265:
        $r171 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r171 == null goto label278;

        $r170 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r169 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r170.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r169);

        goto label278;

     label266:
        $r182 := @caughtexception;

        r9 = $r182;

     label267:
        if r2 == null goto label271;

     label268:
        virtualinvoke r2.<android.os.ParcelFileDescriptor: void close()>();

     label269:
        goto label271;

     label270:
        $r151 := @caughtexception;

     label271:
        if r3 == null goto label275;

     label272:
        virtualinvoke r3.<java.io.InputStream: void close()>();

     label273:
        goto label275;

     label274:
        $r192 := @caughtexception;

     label275:
        $r156 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r150 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r156.<com.android.bitmap.BitmapCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r150, r1);

        if r1 == null goto label276;

        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void acquireReference()>();

        goto label277;

     label276:
        $r155 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r155 == null goto label277;

        $r160 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.BitmapCache mCache>;

        $r154 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        interfaceinvoke $r160.<com.android.bitmap.BitmapCache: void offer(java.lang.Object)>($r154);

     label277:
        throw r9;

     label278:
        return r1;

        catch java.io.IOException from label005 to label006 with label007;
        catch java.io.IOException from label009 to label010 with label011;
        catch java.io.IOException from label017 to label018 with label019;
        catch java.io.IOException from label021 to label022 with label023;
        catch java.io.IOException from label032 to label033 with label034;
        catch java.io.IOException from label036 to label037 with label038;
        catch java.io.IOException from label046 to label047 with label048;
        catch java.io.IOException from label056 to label057 with label058;
        catch java.io.IOException from label060 to label061 with label062;
        catch java.io.IOException from label068 to label069 with label070;
        catch java.io.IOException from label072 to label073 with label074;
        catch java.io.IOException from label080 to label081 with label082;
        catch java.io.IOException from label084 to label085 with label086;
        catch java.io.IOException from label094 to label095 with label096;
        catch java.io.IOException from label098 to label099 with label100;
        catch java.io.IOException from label112 to label113 with label114;
        catch java.io.IOException from label116 to label117 with label118;
        catch java.io.IOException from label125 to label126 with label127;
        catch java.io.IOException from label129 to label130 with label131;
        catch java.io.IOException from label137 to label138 with label139;
        catch java.io.IOException from label141 to label142 with label143;
        catch java.io.IOException from label149 to label150 with label151;
        catch java.io.IOException from label153 to label154 with label155;
        catch java.io.IOException from label160 to label165 with label166;
        catch java.io.IOException from label169 to label170 with label171;
        catch java.io.IOException from label173 to label174 with label175;
        catch java.io.IOException from label182 to label183 with label184;
        catch java.io.IOException from label186 to label187 with label188;
        catch java.lang.Throwable from label160 to label165 with label194;
        catch java.lang.Throwable from label166 to label167 with label194;
        catch java.lang.Throwable from label179 to label180 with label194;
        catch java.lang.Throwable from label192 to label193 with label194;
        catch java.lang.Throwable from label194 to label195 with label194;
        catch java.io.IOException from label198 to label199 with label200;
        catch java.io.IOException from label202 to label203 with label204;
        catch java.lang.IllegalArgumentException from label209 to label211 with label212;
        catch java.lang.Throwable from label209 to label211 with label214;
        catch java.lang.Throwable from label212 to label213 with label214;
        catch java.lang.Throwable from label214 to label215 with label214;
        catch java.io.IOException from label218 to label219 with label220;
        catch java.io.IOException from label222 to label223 with label224;
        catch java.io.IOException from label230 to label231 with label232;
        catch java.io.IOException from label234 to label235 with label236;
        catch java.io.IOException from label246 to label247 with label248;
        catch java.io.IOException from label250 to label251 with label252;
        catch java.lang.Exception from label002 to label004 with label255;
        catch java.lang.Exception from label015 to label016 with label255;
        catch java.lang.Exception from label027 to label031 with label255;
        catch java.lang.Exception from label042 to label055 with label255;
        catch java.lang.Exception from label066 to label067 with label255;
        catch java.lang.Exception from label078 to label079 with label255;
        catch java.lang.Exception from label090 to label093 with label255;
        catch java.lang.Exception from label104 to label111 with label255;
        catch java.lang.Exception from label122 to label124 with label255;
        catch java.lang.Exception from label135 to label136 with label255;
        catch java.lang.Exception from label147 to label148 with label255;
        catch java.lang.Exception from label159 to label168 with label255;
        catch java.lang.Exception from label179 to label181 with label255;
        catch java.lang.Exception from label192 to label197 with label255;
        catch java.lang.Exception from label208 to label217 with label255;
        catch java.lang.Exception from label228 to label229 with label255;
        catch java.lang.Exception from label240 to label245 with label255;
        catch java.io.IOException from label257 to label258 with label259;
        catch java.io.IOException from label261 to label262 with label263;
        catch java.lang.Throwable from label002 to label004 with label266;
        catch java.lang.Throwable from label015 to label016 with label266;
        catch java.lang.Throwable from label027 to label031 with label266;
        catch java.lang.Throwable from label042 to label055 with label266;
        catch java.lang.Throwable from label066 to label067 with label266;
        catch java.lang.Throwable from label078 to label079 with label266;
        catch java.lang.Throwable from label090 to label093 with label266;
        catch java.lang.Throwable from label104 to label111 with label266;
        catch java.lang.Throwable from label122 to label124 with label266;
        catch java.lang.Throwable from label135 to label136 with label266;
        catch java.lang.Throwable from label147 to label148 with label266;
        catch java.lang.Throwable from label159 to label168 with label266;
        catch java.lang.Throwable from label179 to label181 with label266;
        catch java.lang.Throwable from label192 to label197 with label266;
        catch java.lang.Throwable from label208 to label217 with label266;
        catch java.lang.Throwable from label228 to label229 with label266;
        catch java.lang.Throwable from label240 to label245 with label266;
        catch java.lang.Throwable from label255 to label256 with label266;
        catch java.io.IOException from label268 to label269 with label270;
        catch java.io.IOException from label272 to label273 with label274;
        catch java.lang.Throwable from label266 to label267 with label266;
    }

    private java.io.InputStream reset(java.io.InputStream) throws java.io.IOException
    {
        com.android.bitmap.DecodeTask r0;
        java.io.InputStream r1;
        boolean $z0;
        com.android.bitmap.RequestKey $r3, $r4;
        java.io.IOException $r5;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.io.InputStream;

        staticinvoke <com.android.bitmap.util.Trace: void beginSection(java.lang.String)>("create stream");

        if r1 != null goto label1;

        $r4 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        r1 = interfaceinvoke $r4.<com.android.bitmap.RequestKey: java.io.InputStream createInputStream()>();

        goto label6;

     label1:
        $z0 = virtualinvoke r1.<java.io.InputStream: boolean markSupported()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.io.InputStream: void reset()>();

        goto label6;

     label2:
        virtualinvoke r1.<java.io.InputStream: void close()>();

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

     label5:
        $r3 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        r1 = interfaceinvoke $r3.<com.android.bitmap.RequestKey: java.io.InputStream createInputStream()>();

     label6:
        staticinvoke <com.android.bitmap.util.Trace: void endSection()>();

        return r1;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private android.graphics.Bitmap decode(android.os.ParcelFileDescriptor, java.io.InputStream)
    {
        com.android.bitmap.DecodeTask r0;
        android.os.ParcelFileDescriptor r1;
        java.io.InputStream r2;
        android.graphics.Bitmap r3;
        android.graphics.BitmapFactory$Options $r4, $r6;
        java.io.FileDescriptor $r5;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: android.os.ParcelFileDescriptor;

        r2 := @parameter1: java.io.InputStream;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r6 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r5, null, $r6);

        goto label2;

     label1:
        $r4 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        r3 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>(r2, null, $r4);

     label2:
        return r3;
    }

    public void cancel()
    {
        com.android.bitmap.DecodeTask r0;
        android.graphics.BitmapFactory$Options $r1;

        r0 := @this: com.android.bitmap.DecodeTask;

        virtualinvoke r0.<com.android.bitmap.DecodeTask: boolean cancel(boolean)>(1);

        $r1 = r0.<com.android.bitmap.DecodeTask: android.graphics.BitmapFactory$Options mOpts>;

        virtualinvoke $r1.<android.graphics.BitmapFactory$Options: void requestCancelDecode()>();

        return;
    }

    protected transient void onProgressUpdate(java.lang.Void[])
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Void[] r1;
        com.android.bitmap.RequestKey $r2;
        com.android.bitmap.DecodeTask$DecodeCallback $r3;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Void[];

        $r3 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeCallback mDecodeCallback>;

        $r2 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r3.<com.android.bitmap.DecodeTask$DecodeCallback: void onDecodeBegin(com.android.bitmap.RequestKey)>($r2);

        return;
    }

    public void onPostExecute(com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.DecodeTask r0;
        com.android.bitmap.ReusableBitmap r1;
        com.android.bitmap.RequestKey $r2;
        com.android.bitmap.DecodeTask$DecodeCallback $r3;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: com.android.bitmap.ReusableBitmap;

        $r3 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeCallback mDecodeCallback>;

        $r2 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r3.<com.android.bitmap.DecodeTask$DecodeCallback: void onDecodeComplete(com.android.bitmap.RequestKey,com.android.bitmap.ReusableBitmap)>($r2, r1);

        return;
    }

    protected void onCancelled(com.android.bitmap.ReusableBitmap)
    {
        com.android.bitmap.DecodeTask r0;
        com.android.bitmap.ReusableBitmap r1, $r4;
        com.android.bitmap.RequestKey $r2;
        com.android.bitmap.DecodeTask$DecodeCallback $r3;
        android.graphics.Bitmap $r5;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: com.android.bitmap.ReusableBitmap;

        $r3 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.DecodeTask$DecodeCallback mDecodeCallback>;

        $r2 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.RequestKey mKey>;

        interfaceinvoke $r3.<com.android.bitmap.DecodeTask$DecodeCallback: void onDecodeCancel(com.android.bitmap.RequestKey)>($r2);

        if r1 != null goto label1;

        return;

     label1:
        virtualinvoke r1.<com.android.bitmap.ReusableBitmap: void releaseReference()>();

        $r4 = r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap mInBitmap>;

        if $r4 != null goto label2;

        $r5 = r1.<com.android.bitmap.ReusableBitmap: android.graphics.Bitmap bmp>;

        virtualinvoke $r5.<android.graphics.Bitmap: void recycle()>();

     label2:
        return;
    }

    protected volatile void onCancelled(java.lang.Object)
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Object r1;
        com.android.bitmap.ReusableBitmap $r2;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.android.bitmap.ReusableBitmap) r1;

        virtualinvoke r0.<com.android.bitmap.DecodeTask: void onCancelled(com.android.bitmap.ReusableBitmap)>($r2);

        return;
    }

    protected volatile void onProgressUpdate(java.lang.Object[])
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Object[] r1;
        java.lang.Void[] $r2;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Void[]) r1;

        virtualinvoke r0.<com.android.bitmap.DecodeTask: void onProgressUpdate(java.lang.Void[])>($r2);

        return;
    }

    public volatile void onPostExecute(java.lang.Object)
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Object r1;
        com.android.bitmap.ReusableBitmap $r2;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.android.bitmap.ReusableBitmap) r1;

        virtualinvoke r0.<com.android.bitmap.DecodeTask: void onPostExecute(com.android.bitmap.ReusableBitmap)>($r2);

        return;
    }

    protected volatile java.lang.Object doInBackground(java.lang.Object[])
    {
        com.android.bitmap.DecodeTask r0;
        java.lang.Object[] r1;
        java.lang.Void[] $r2;
        com.android.bitmap.ReusableBitmap $r3;

        r0 := @this: com.android.bitmap.DecodeTask;

        r1 := @parameter0: java.lang.Object[];

        $r2 = (java.lang.Void[]) r1;

        $r3 = virtualinvoke r0.<com.android.bitmap.DecodeTask: com.android.bitmap.ReusableBitmap doInBackground(java.lang.Void[])>($r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.bitmap.DecodeTask: boolean DEBUG> = 0;

        <com.android.bitmap.DecodeTask: boolean CROP_DURING_DECODE> = 1;

        $r0 = class "com/android/bitmap/DecodeTask";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.bitmap.DecodeTask: java.lang.String TAG> = $r1;

        return;
    }
}
