public final class com.google.common.util.concurrent.Monitor extends java.lang.Object
{
    private final boolean fair;
    private final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.ArrayList activeGuards;

    public void <init>()
    {
        com.google.common.util.concurrent.Monitor r0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        com.google.common.util.concurrent.Monitor r0;
        boolean z0;
        java.util.ArrayList $r1;
        java.util.concurrent.locks.ReentrantLock $r2;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)>(1);

        r0.<com.google.common.util.concurrent.Monitor: java.util.ArrayList activeGuards> = $r1;

        r0.<com.google.common.util.concurrent.Monitor: boolean fair> = z0;

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(z0);

        r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        return;
    }

    public void enter()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }

    public void enterInterruptibly() throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

        return;
    }

    public boolean enter(long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.Monitor r0;
        long l0, l1, l2, l3, $l4, $l5;
        java.util.concurrent.TimeUnit r1, $r4;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable r3, $r8;
        java.lang.Thread $r5, $r7;
        java.lang.InterruptedException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z2 = r0.<com.google.common.util.concurrent.Monitor: boolean fair>;

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z3 == 0 goto label1;

        return 1;

     label1:
        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        l3 = l2;

        z0 = 0;

     label2:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        z1 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(l3, $r4);

     label3:
        if z0 == 0 goto label4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label4:
        return z1;

     label5:
        $r6 := @caughtexception;

        z0 = 1;

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l5 - l1;

        l3 = l2 - $l4;

        goto label2;

     label6:
        $r8 := @caughtexception;

        r3 = $r8;

     label7:
        if z0 == 0 goto label8;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label8:
        throw r3;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public boolean enterInterruptibly(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $z0;
    }

    public boolean tryEnter()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        return $z0;
    }

    public void enterWhen(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r4;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1, z2;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalMonitorStateException $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r4 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        z0 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        z1 = 0;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)>(r1, z0);

        z2 = 1;

     label3:
        if z2 != 0 goto label7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        if z1 != 0 goto label6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r4;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1, z2;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalMonitorStateException $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r4 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        z0 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        z1 = 0;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)>(r1, z0);

        z2 = 1;

     label3:
        if z2 != 0 goto label7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        if z1 != 0 goto label6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean enterWhen(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r5;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0, l1, l2, $l3, $l4, $l5;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0, $z1, $z2, $z3, z4, z5;
        java.lang.Throwable r4, $r7;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r5 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r5 == r0 goto label01;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label01:
        r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        z0 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        $z1 = r0.<com.google.common.util.concurrent.Monitor: boolean fair>;

        if $z1 != 0 goto label02;

        $z3 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z3 == 0 goto label02;

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        goto label04;

     label02:
        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $z2 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(l0, r2);

        if $z2 != 0 goto label03;

        return 0;

     label03:
        $l3 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $l4 = $l5 - l2;

        l1 = $l3 - $l4;

     label04:
        z4 = 0;

     label05:
        z5 = specialinvoke r0.<com.google.common.util.concurrent.Monitor: boolean waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,boolean)>(r1, l1, z0);

     label06:
        if z5 != 0 goto label10;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label10;

     label07:
        $r7 := @caughtexception;

        r4 = $r7;

     label08:
        if z4 != 0 goto label09;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label09:
        throw r4;

     label10:
        return z5;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    public boolean enterWhenUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.Monitor r0, $r7;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0, l1, l2, l3, $l6, $l7, $l10, $l11, l12;
        java.util.concurrent.TimeUnit r2, $r8;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, z7, z8;
        java.lang.Throwable r4, r5, r6, $r12, $r14, $r15;
        java.lang.Thread $r9, $r10, $r13;
        java.lang.IllegalMonitorStateException $r11;
        java.lang.InterruptedException $r16;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r7 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r7 == r0 goto label01;

        $r11 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r11.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r11;

     label01:
        r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        z0 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        z1 = 0;

     label02:
        $z4 = r0.<com.google.common.util.concurrent.Monitor: boolean fair>;

        if $z4 != 0 goto label03;

        $z6 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z6 == 0 goto label03;

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        goto label15;

     label03:
        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        l12 = l3;

     label04:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $z5 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(l12, $r8);

        if $z5 == 0 goto label06;

     label05:
        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        $l6 = $l7 - l2;

        l1 = l3 - $l6;

        goto label15;

     label06:
        z3 = 0;

     label07:
        staticinvoke <java.lang.System: long nanoTime()>();

     label08:
        if z1 == 0 goto label09;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

     label09:
        return z3;

     label10:
        $r16 := @caughtexception;

        z1 = 1;

     label11:
        $l10 = staticinvoke <java.lang.System: long nanoTime()>();

        $l11 = $l10 - l2;

        l12 = l3 - $l11;

        goto label14;

     label12:
        $r14 := @caughtexception;

        r4 = $r14;

     label13:
        staticinvoke <java.lang.System: long nanoTime()>();

        throw r4;

     label14:
        goto label04;

     label15:
        z7 = 0;

     label16:
        z8 = specialinvoke r0.<com.google.common.util.concurrent.Monitor: boolean waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,boolean)>(r1, l1, z0);

     label17:
        if z8 != 0 goto label21;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label21;

     label18:
        $r15 := @caughtexception;

        r6 = $r15;

     label19:
        if z7 != 0 goto label20;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label20:
        throw r6;

     label21:
        z2 = z8;

     label22:
        if z1 == 0 goto label23;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void interrupt()>();

     label23:
        return z2;

     label24:
        $r12 := @caughtexception;

        r5 = $r12;

     label25:
        if z1 == 0 goto label26;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

     label26:
        throw r5;

        catch java.lang.InterruptedException from label04 to label05 with label10;
        catch java.lang.InterruptedException from label06 to label07 with label10;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label02 to label08 with label24;
        catch java.lang.Throwable from label10 to label22 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r4;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalMonitorStateException $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r4 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        z0 = 0;

     label2:
        z1 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

     label3:
        if z1 != 0 goto label7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        if z0 != 0 goto label6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label6:
        throw r3;

     label7:
        return z1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r4;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, z1;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalMonitorStateException $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r4 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

        z0 = 0;

     label2:
        z1 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

     label3:
        if z1 != 0 goto label7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

     label5:
        if z0 != 0 goto label6;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label6:
        throw r3;

     label7:
        return z1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean enterIf(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.Monitor r0, $r5;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r7;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r5 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r5 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z1 = virtualinvoke r0.<com.google.common.util.concurrent.Monitor: boolean enter(long,java.util.concurrent.TimeUnit)>(l0, r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        z0 = 0;

     label3:
        z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

     label4:
        if z2 != 0 goto label8;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

     label6:
        if z0 != 0 goto label7;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label7:
        throw r4;

     label8:
        return z2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean enterIfInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r5;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r7;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r5 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r5 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z1 = virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: boolean tryLock(long,java.util.concurrent.TimeUnit)>(l0, r2);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        z0 = 0;

     label3:
        z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

     label4:
        if z2 != 0 goto label8;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

     label6:
        if z0 != 0 goto label7;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label7:
        throw r4;

     label8:
        return z2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean tryEnterIf(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r4;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0, $z1, z2;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalMonitorStateException $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r4 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r4 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z1 = virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        z0 = 0;

     label3:
        z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

     label4:
        if z2 != 0 goto label8;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

     label6:
        if z0 != 0 goto label7;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label7:
        throw r3;

     label8:
        return z2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void waitFor(com.google.common.util.concurrent.Monitor$Guard) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r2;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock $r3;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r4, $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r2 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r4.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r4;

     label2:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)>(r1, 1);

        return;
    }

    public void waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r2;
        com.google.common.util.concurrent.Monitor$Guard r1;
        java.util.concurrent.locks.ReentrantLock $r3;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r4, $r5;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r2 == r0 goto label1;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r4.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r4;

     label2:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,boolean)>(r1, 1);

        return;
    }

    public boolean waitFor(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0, $r3;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock $r4;
        boolean $z0, $z1;
        java.lang.IllegalMonitorStateException $r5, $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r3 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label2:
        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z1 = specialinvoke r0.<com.google.common.util.concurrent.Monitor: boolean waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,boolean)>(r1, $l1, 1);

        return $z1;
    }

    public boolean waitForUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, java.util.concurrent.TimeUnit)
    {
        com.google.common.util.concurrent.Monitor r0, $r3;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.locks.ReentrantLock $r4;
        boolean $z0, $z1;
        java.lang.IllegalMonitorStateException $r5, $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r3 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r5.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r5;

     label2:
        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z1 = specialinvoke r0.<com.google.common.util.concurrent.Monitor: boolean waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard,long,boolean)>(r1, $l1, 1);

        return $z1;
    }

    public void leave()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        java.lang.IllegalMonitorStateException $r3;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r3.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(null);

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isFair()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isFair()>();

        return $z0;
    }

    public boolean isOccupied()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>();

        return $z0;
    }

    public boolean isOccupiedByCurrentThread()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        return $z0;
    }

    public int getOccupiedDepth()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        int $i0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>();

        return $i0;
    }

    public int getQueueLength()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        int $i0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>();

        return $i0;
    }

    public boolean hasQueuedThreads()
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThreads()>();

        return $z0;
    }

    public boolean hasQueuedThread(java.lang.Thread)
    {
        com.google.common.util.concurrent.Monitor r0;
        java.lang.Thread r1;
        java.util.concurrent.locks.ReentrantLock $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: java.lang.Thread;

        $r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: boolean hasQueuedThread(java.lang.Thread)>(r1);

        return $z0;
    }

    public boolean hasWaiters(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r3;
        com.google.common.util.concurrent.Monitor$Guard r1;
        boolean z0, $z1;
        java.lang.Throwable r2, $r7;
        java.util.concurrent.locks.ReentrantLock $r4, $r5, $r8;
        int $i0;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r3 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r3 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $i0 = r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount>;

        if $i0 <= 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

     label5:
        $r5 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label6:
        $r7 := @caughtexception;

        r2 = $r7;

     label7:
        $r8 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int getWaitQueueLength(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0, $r3;
        com.google.common.util.concurrent.Monitor$Guard r1;
        int i0;
        java.lang.Throwable r2, $r7;
        java.util.concurrent.locks.ReentrantLock $r4, $r5, $r8;
        java.lang.IllegalMonitorStateException $r6;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $r3 = r1.<com.google.common.util.concurrent.Monitor$Guard: com.google.common.util.concurrent.Monitor monitor>;

        if $r3 == r0 goto label1;

        $r6 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r6.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        i0 = r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount>;

     label3:
        $r5 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

     label5:
        $r8 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1, r3, r4;
        java.util.ArrayList r2;
        int i0, i1, $i2, i3;
        java.lang.Object $r5, $r9;
        boolean $z0;
        java.util.concurrent.locks.Condition $r6, $r10;
        java.lang.Throwable $r7, r11;
        java.lang.RuntimeException $r8;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.ArrayList activeGuards>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label01:
        i1 = 0;

     label02:
        if i1 >= i0 goto label06;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r3 = (com.google.common.util.concurrent.Monitor$Guard) $r5;

        if r3 != r1 goto label03;

        $i2 = r3.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount>;

        if $i2 != 1 goto label03;

        goto label05;

     label03:
        $z0 = virtualinvoke r3.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z0 == 0 goto label05;

        $r6 = r3.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void signal()>();

     label04:
        return;

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        goto label10;

     label07:
        $r7 := @caughtexception;

        r11 = $r7;

        i3 = 0;

     label08:
        if i3 >= i0 goto label09;

        $r9 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r4 = (com.google.common.util.concurrent.Monitor$Guard) $r9;

        $r10 = r4.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: void signalAll()>();

        i3 = i3 + 1;

        goto label08;

     label09:
        $r8 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(r11);

        throw $r8;

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        int i0, $i1, $i2;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $i1 = r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount>;

        $i2 = $i1 + 1;

        r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount> = $i2;

        i0 = $i1;

        if i0 != 0 goto label1;

        $r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.ArrayList activeGuards>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        int i0, $i1, $i2;
        java.util.ArrayList $r2;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        $i1 = r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount>;

        $i2 = $i1 - 1;

        r1.<com.google.common.util.concurrent.Monitor$Guard: int waiterCount> = $i2;

        i0 = $i2;

        if i0 != 0 goto label1;

        $r2 = r0.<com.google.common.util.concurrent.Monitor: java.util.ArrayList activeGuards>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        boolean z0, $z1, $z2;
        java.util.concurrent.locks.Condition r2;
        java.lang.InterruptedException r3, $r10;
        java.lang.Throwable r4, r5, $r6, $r9;
        java.lang.Thread $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z1 != 0 goto label14;

        if z0 == 0 goto label01;

        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(null);

     label01:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label02:
        r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

     label03:
        interfaceinvoke r2.<java.util.concurrent.locks.Condition: void await()>();

     label04:
        goto label10;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

     label06:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label07:
        goto label09;

     label08:
        $r6 := @caughtexception;

        r4 = $r6;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        $r8 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(r4);

        throw $r8;

     label09:
        throw r3;

     label10:
        $z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z2 == 0 goto label03;

     label11:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        goto label14;

     label12:
        $r9 := @caughtexception;

        r5 = $r9;

     label13:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        throw r5;

     label14:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, boolean)
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        boolean z0, $z1, $z2;
        java.util.concurrent.locks.Condition r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z1 != 0 goto label7;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(null);

     label1:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label2:
        r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

     label3:
        interfaceinvoke r2.<java.util.concurrent.locks.Condition: void awaitUninterruptibly()>();

        $z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z2 == 0 goto label3;

     label4:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        goto label7;

     label5:
        $r4 := @caughtexception;

        r3 = $r4;

     label6:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean waitInterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean) throws java.lang.InterruptedException
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0;
        boolean z0, z1, $z2, $z3;
        java.util.concurrent.locks.Condition r2;
        java.lang.Throwable r3, r4, $r5, $r8;
        byte $b1;
        java.lang.Thread $r6;
        java.lang.RuntimeException $r7;
        java.lang.InterruptedException $r9, r10;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $z2 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z2 != 0 goto label16;

        if z0 == 0 goto label01;

        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(null);

     label01:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label02:
        r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

     label03:
        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label05;

        z1 = 0;

     label04:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        return z1;

     label05:
        l0 = interfaceinvoke r2.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l0);

     label06:
        goto label12;

     label07:
        $r9 := @caughtexception;

        r10 = $r9;

     label08:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

        $r7 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(r3);

        throw $r7;

     label11:
        throw r10;

     label12:
        $z3 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z3 == 0 goto label03;

     label13:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        goto label16;

     label14:
        $r8 := @caughtexception;

        r4 = $r8;

     label15:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        throw r4;

     label16:
        return 1;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label02 to label04 with label14;
        catch java.lang.Throwable from label05 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private boolean waitUninterruptibly(com.google.common.util.concurrent.Monitor$Guard, long, boolean)
    {
        com.google.common.util.concurrent.Monitor r0;
        com.google.common.util.concurrent.Monitor$Guard r1;
        long l0, l1, l2, $l4, $l5;
        boolean z0, z1, z2, $z3, $z4;
        java.util.concurrent.locks.Condition r2;
        java.lang.Throwable r3, r4, r5, $r9, $r11, $r14;
        byte $b3;
        java.lang.Thread $r6, $r7, $r8, $r13;
        java.lang.InterruptedException $r10;
        java.lang.RuntimeException $r12;

        r0 := @this: com.google.common.util.concurrent.Monitor;

        r1 := @parameter0: com.google.common.util.concurrent.Monitor$Guard;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $z3 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z3 != 0 goto label23;

        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        if z0 == 0 goto label01;

        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(null);

     label01:
        z1 = 0;

     label02:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void incrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label03:
        r2 = r1.<com.google.common.util.concurrent.Monitor$Guard: java.util.concurrent.locks.Condition condition>;

        l2 = l0;

     label04:
        $b3 = l2 cmp 0L;

        if $b3 > 0 goto label08;

        z2 = 0;

     label05:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label06:
        if z1 == 0 goto label07;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label07:
        return z2;

     label08:
        l2 = interfaceinvoke r2.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l2);

     label09:
        goto label15;

     label10:
        $r10 := @caughtexception;

     label11:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void signalConditionsOfSatisfiedGuards(com.google.common.util.concurrent.Monitor$Guard)>(r1);

     label12:
        goto label14;

     label13:
        $r11 := @caughtexception;

        r3 = $r11;

        $r13 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r13.<java.lang.Thread: void interrupt()>();

        $r12 = staticinvoke <com.google.common.base.Throwables: java.lang.RuntimeException propagate(java.lang.Throwable)>(r3);

        throw $r12;

     label14:
        z1 = 1;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        $l5 = $l4 - l1;

        l2 = l0 - $l5;

     label15:
        $z4 = virtualinvoke r1.<com.google.common.util.concurrent.Monitor$Guard: boolean isSatisfied()>();

        if $z4 == 0 goto label04;

     label16:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        goto label19;

     label17:
        $r14 := @caughtexception;

        r4 = $r14;

     label18:
        specialinvoke r0.<com.google.common.util.concurrent.Monitor: void decrementWaiters(com.google.common.util.concurrent.Monitor$Guard)>(r1);

        throw r4;

     label19:
        if z1 == 0 goto label23;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        goto label23;

     label20:
        $r9 := @caughtexception;

        r5 = $r9;

     label21:
        if z1 == 0 goto label22;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

     label22:
        throw r5;

     label23:
        return 1;

        catch java.lang.InterruptedException from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label03 to label05 with label17;
        catch java.lang.Throwable from label08 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label02 to label06 with label20;
        catch java.lang.Throwable from label08 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    static java.util.concurrent.locks.ReentrantLock access$000(com.google.common.util.concurrent.Monitor)
    {
        com.google.common.util.concurrent.Monitor r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        r0 := @parameter0: com.google.common.util.concurrent.Monitor;

        $r1 = r0.<com.google.common.util.concurrent.Monitor: java.util.concurrent.locks.ReentrantLock lock>;

        return $r1;
    }
}
