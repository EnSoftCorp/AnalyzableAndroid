public abstract class org.apache.commons.io.output.ThresholdingOutputStream extends java.io.OutputStream
{
    private int threshold;
    private long written;
    private boolean thresholdExceeded;

    public void <init>(int)
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        int i0;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold> = i0;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        int i0;
        java.io.OutputStream $r1;
        long $l1, $l2;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(1);

        $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        $l1 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        $l2 = $l1 + 1L;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = $l2;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        byte[] r1;
        int $i0, $i1;
        java.io.OutputStream $r2;
        long $l2, $l3, $l4;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>($i0);

        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        $l3 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        $i1 = lengthof r1;

        $l2 = (long) $i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = $l4;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;
        long $l2, $l3, $l4;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void checkThreshold(int)>(i1);

        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        $l3 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        $l2 = (long) i1;

        $l4 = $l3 + $l2;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = $l4;

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        java.io.OutputStream $r2;
        java.io.IOException $r3;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

     label1:
        virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void flush()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        $r2 = virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: java.io.OutputStream getStream()>();

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getThreshold()
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        int $i0;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        $i0 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;

        return $i0;
    }

    public long getByteCount()
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        $l0 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        return $l0;
    }

    public boolean isThresholdExceeded()
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        int $i0;
        long $l1, $l2;
        byte $b3;
        boolean $z0;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        $l2 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        $i0 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;

        $l1 = (long) $i0;

        $b3 = $l2 cmp $l1;

        if $b3 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void checkThreshold(int) throws java.io.IOException
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;
        int i0, $i3;
        boolean $z0;
        long $l1, $l2, $l4, $l5;
        byte $b6;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded>;

        if $z0 != 0 goto label1;

        $l2 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written>;

        $l1 = (long) i0;

        $l5 = $l2 + $l1;

        $i3 = r0.<org.apache.commons.io.output.ThresholdingOutputStream: int threshold>;

        $l4 = (long) $i3;

        $b6 = $l5 cmp $l4;

        if $b6 <= 0 goto label1;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded> = 1;

        virtualinvoke r0.<org.apache.commons.io.output.ThresholdingOutputStream: void thresholdReached()>();

     label1:
        return;
    }

    protected void resetByteCount()
    {
        org.apache.commons.io.output.ThresholdingOutputStream r0;

        r0 := @this: org.apache.commons.io.output.ThresholdingOutputStream;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: boolean thresholdExceeded> = 0;

        r0.<org.apache.commons.io.output.ThresholdingOutputStream: long written> = 0L;

        return;
    }

    protected abstract java.io.OutputStream getStream() throws java.io.IOException;

    protected abstract void thresholdReached() throws java.io.IOException;
}
