class com.beetstra.jutf7.Base64Util extends java.lang.Object
{
    private static final int ALPHABET_LENGTH;
    private final char[] alphabet;
    private final int[] inverseAlphabet;

    void <init>(java.lang.String)
    {
        com.beetstra.jutf7.Base64Util r0;
        java.lang.String r1, $r13, $r17;
        int i0, $i2, $i3, $i4;
        char c1;
        char[] $r2, $r5, $r6;
        int[] $r3, $r4, $r7;
        java.lang.IllegalArgumentException $r8, $r12;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16, $r18;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        r0.<com.beetstra.jutf7.Base64Util: char[] alphabet> = $r2;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 == 64 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("alphabet has incorrect length (should be 64, not ");

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label1:
        $r3 = newarray (int)[128];

        r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet> = $r3;

        $r4 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r4, -1);

        i0 = 0;

     label2:
        $r5 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        $i3 = lengthof $r5;

        if i0 >= $i3 goto label4;

        $r6 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        c1 = $r6[i0];

        if c1 < 128 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid character in alphabet: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label3:
        $r7 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $r7[c1] = i0;

        i0 = i0 + 1;

        goto label2;

     label4:
        return;
    }

    int getSextet(byte)
    {
        com.beetstra.jutf7.Base64Util r0;
        byte b0;
        int[] $r1;
        int $i1;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        b0 := @parameter0: byte;

        if b0 < 128 goto label1;

        return -1;

     label1:
        $r1 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $i1 = $r1[b0];

        return $i1;
    }

    boolean contains(char)
    {
        com.beetstra.jutf7.Base64Util r0;
        char c0;
        int[] $r1;
        int $i1;
        boolean $z0;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        c0 := @parameter0: char;

        if c0 < 128 goto label1;

        return 0;

     label1:
        $r1 = r0.<com.beetstra.jutf7.Base64Util: int[] inverseAlphabet>;

        $i1 = $r1[c0];

        if $i1 < 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    byte getChar(int)
    {
        com.beetstra.jutf7.Base64Util r0;
        int i0;
        char[] $r1;
        char $c1;
        byte $b2;

        r0 := @this: com.beetstra.jutf7.Base64Util;

        i0 := @parameter0: int;

        $r1 = r0.<com.beetstra.jutf7.Base64Util: char[] alphabet>;

        $c1 = $r1[i0];

        $b2 = (byte) $c1;

        return $b2;
    }

    public static void <clinit>()
    {
        <com.beetstra.jutf7.Base64Util: int ALPHABET_LENGTH> = 64;

        return;
    }
}
