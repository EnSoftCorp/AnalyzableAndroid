public class com.android.email.activity.setup.AccountSecurity extends android.app.Activity
{
    private static final java.lang.String TAG;
    private static final boolean DEBUG;
    private static final java.lang.String EXTRA_ACCOUNT_ID;
    private static final java.lang.String EXTRA_SHOW_DIALOG;
    private static final java.lang.String EXTRA_PASSWORD_EXPIRING;
    private static final java.lang.String EXTRA_PASSWORD_EXPIRED;
    private static final java.lang.String SAVESTATE_INITIALIZED_TAG;
    private static final java.lang.String SAVESTATE_TRIED_ADD_ADMINISTRATOR_TAG;
    private static final java.lang.String SAVESTATE_TRIED_SET_PASSWORD_TAG;
    private static final java.lang.String SAVESTATE_TRIED_SET_ENCRYPTION_TAG;
    private static final java.lang.String SAVESTATE_ACCOUNT_TAG;
    private static final int REQUEST_ENABLE;
    private static final int REQUEST_PASSWORD;
    private static final int REQUEST_ENCRYPTION;
    private boolean mTriedAddAdministrator;
    private boolean mTriedSetPassword;
    private boolean mTriedSetEncryption;
    private com.android.emailcommon.provider.Account mAccount;
    protected boolean mInitialized;
    private android.os.Handler mHandler;
    private boolean mActivityResumed;
    private static final int ACCOUNT_POLICY_LOADER_ID;
    private com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks mAPLoaderCallbacks;
    private android.os.Bundle mAPLoaderArgs;

    public void <init>()
    {
        com.android.email.activity.setup.AccountSecurity r0;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        specialinvoke r0.<android.app.Activity: void <init>()>();

        return;
    }

    public static android.content.Intent actionUpdateSecurityIntent(android.content.Context, long, boolean)
    {
        android.content.Context r0;
        long l0;
        boolean z0;
        android.content.Intent r1, $r2;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>(r0, class "com/android/email/activity/setup/AccountSecurity");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("ACCOUNT_ID", l0);

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("SHOW_DIALOG", z0);

        return r1;
    }

    public static android.content.Intent actionDevicePasswordExpirationIntent(android.content.Context, long, boolean)
    {
        android.content.Context r0;
        long l0;
        boolean z0;
        com.android.email.activity.setup.ForwardingIntent r1, $r2;
        java.lang.String $r5;

        r0 := @parameter0: android.content.Context;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $r2 = new com.android.email.activity.setup.ForwardingIntent;

        specialinvoke $r2.<com.android.email.activity.setup.ForwardingIntent: void <init>(android.content.Context,java.lang.Class)>(r0, class "com/android/email/activity/setup/AccountSecurity");

        r1 = $r2;

        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("ACCOUNT_ID", l0);

        if z0 == 0 goto label1;

        $r5 = "EXPIRED";

        goto label2;

     label1:
        $r5 = "EXPIRING";

     label2:
        virtualinvoke r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>($r5, 1);

        return r1;
    }

    public void onCreate(android.os.Bundle)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        android.os.Bundle r1, $r5;
        android.content.Intent r2;
        long l0;
        com.android.email.SecurityPolicy r3;
        android.os.Handler $r4;
        byte $b1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.Parcelable $r6;
        com.android.emailcommon.provider.Account $r7;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);

        $r4 = new android.os.Handler;

        specialinvoke $r4.<android.os.Handler: void <init>()>();

        r0.<com.android.email.activity.setup.AccountSecurity: android.os.Handler mHandler> = $r4;

        r2 = virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: android.content.Intent getIntent()>();

        l0 = virtualinvoke r2.<android.content.Intent: long getLongExtra(java.lang.String,long)>("ACCOUNT_ID", -1L);

        r3 = staticinvoke <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)>(r0);

        virtualinvoke r3.<com.android.email.SecurityPolicy: void clearNotification()>();

        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label1;

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        return;

     label1:
        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("initialized", 0);

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mInitialized> = $z1;

        $z2 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("triedAddAdministrator", 0);

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedAddAdministrator> = $z2;

        $z3 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("triedSetpassword", 0);

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetPassword> = $z3;

        $z4 = virtualinvoke r1.<android.os.Bundle: boolean getBoolean(java.lang.String,boolean)>("triedSetEncryption", 0);

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetEncryption> = $z4;

        $r6 = virtualinvoke r1.<android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)>("account");

        $r7 = (com.android.emailcommon.provider.Account) $r6;

        r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount> = $r7;

     label2:
        $z0 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mInitialized>;

        if $z0 != 0 goto label3;

        $r5 = virtualinvoke r2.<android.content.Intent: android.os.Bundle getExtras()>();

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void startAccountAndPolicyLoader(android.os.Bundle)>($r5);

     label3:
        return;
    }

    protected void onSaveInstanceState(android.os.Bundle)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        android.os.Bundle r1;
        boolean $z0, $z1, $z2, $z3;
        com.android.emailcommon.provider.Account $r2;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Activity: void onSaveInstanceState(android.os.Bundle)>(r1);

        $z0 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mInitialized>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("initialized", $z0);

        $z1 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedAddAdministrator>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("triedAddAdministrator", $z1);

        $z2 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetPassword>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("triedSetpassword", $z2);

        $z3 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetEncryption>;

        virtualinvoke r1.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("triedSetEncryption", $z3);

        $r2 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        virtualinvoke r1.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("account", $r2);

        return;
    }

    protected void onPause()
    {
        com.android.email.activity.setup.AccountSecurity r0;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        specialinvoke r0.<android.app.Activity: void onPause()>();

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mActivityResumed> = 0;

        return;
    }

    protected void onResume()
    {
        com.android.email.activity.setup.AccountSecurity r0;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        specialinvoke r0.<android.app.Activity: void onResume()>();

        r0.<com.android.email.activity.setup.AccountSecurity: boolean mActivityResumed> = 1;

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void tickleAccountAndPolicyLoader()>();

        return;
    }

    protected boolean isActivityResumed()
    {
        com.android.email.activity.setup.AccountSecurity r0;
        boolean $z0;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        $z0 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mActivityResumed>;

        return $z0;
    }

    private void tickleAccountAndPolicyLoader()
    {
        com.android.email.activity.setup.AccountSecurity r0;
        boolean $z0;
        android.app.LoaderManager $r1;
        com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks $r2;
        android.os.Bundle $r3;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        $z0 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mInitialized>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: android.app.LoaderManager getLoaderManager()>();

        $r3 = r0.<com.android.email.activity.setup.AccountSecurity: android.os.Bundle mAPLoaderArgs>;

        $r2 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks mAPLoaderCallbacks>;

        virtualinvoke $r1.<android.app.LoaderManager: android.content.Loader initLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>(0, $r3, $r2);

     label1:
        return;
    }

    private void startAccountAndPolicyLoader(android.os.Bundle)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        android.os.Bundle r1;
        com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks $r2;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter0: android.os.Bundle;

        r0.<com.android.email.activity.setup.AccountSecurity: android.os.Bundle mAPLoaderArgs> = r1;

        $r2 = new com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks;

        specialinvoke $r2.<com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks: void <init>(com.android.email.activity.setup.AccountSecurity,com.android.email.activity.setup.AccountSecurity$1)>(r0, null);

        r0.<com.android.email.activity.setup.AccountSecurity: com.android.email.activity.setup.AccountSecurity$AccountAndPolicyLoaderCallbacks mAPLoaderCallbacks> = $r2;

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void tickleAccountAndPolicyLoader()>();

        return;
    }

    protected void completeCreate(com.android.emailcommon.provider.Account, boolean, boolean, boolean)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        com.android.emailcommon.provider.Account r1, $r5, $r8, $r9, $r10;
        boolean z0, z1, z2, $z3, $z4;
        android.app.FragmentManager r2, r14;
        com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog r3;
        android.app.Fragment $r4, $r11;
        java.lang.String $r6, $r12;
        java.lang.Object[] $r7, $r13;
        byte $b1;
        long $l2;
        com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog r15;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter0: com.android.emailcommon.provider.Account;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount> = r1;

        if z1 != 0 goto label01;

        if z2 == 0 goto label05;

     label01:
        r2 = virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: android.app.FragmentManager getFragmentManager()>();

        $r4 = virtualinvoke r2.<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>("password_expiration");

        if $r4 != null goto label04;

        $r5 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        $r6 = virtualinvoke $r5.<com.android.emailcommon.provider.Account: java.lang.String getDisplayName()>();

        r3 = staticinvoke <com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog newInstance(java.lang.String,boolean)>($r6, z2);

        $z3 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z3 != 0 goto label02;

        goto label03;

     label02:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Showing password expiration dialog", $r7);

     label03:
        virtualinvoke r3.<com.android.email.activity.setup.AccountSecurity$PasswordExpirationDialog: void show(android.app.FragmentManager,java.lang.String)>(r2, "password_expiration");

     label04:
        return;

     label05:
        $r8 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        $l2 = $r8.<com.android.emailcommon.provider.Account: long mPolicyKey>;

        $b1 = $l2 cmp 0L;

        if $b1 == 0 goto label11;

        if z0 == 0 goto label09;

        r14 = virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: android.app.FragmentManager getFragmentManager()>();

        $r11 = virtualinvoke r14.<android.app.FragmentManager: android.app.Fragment findFragmentByTag(java.lang.String)>("security_needed");

        if $r11 != null goto label08;

        $r10 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        $r12 = virtualinvoke $r10.<com.android.emailcommon.provider.Account: java.lang.String getDisplayName()>();

        r15 = staticinvoke <com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog newInstance(java.lang.String)>($r12);

        $z4 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z4 != 0 goto label06;

        goto label07;

     label06:
        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Showing security needed dialog", $r13);

     label07:
        virtualinvoke r15.<com.android.email.activity.setup.AccountSecurity$SecurityNeededDialog: void show(android.app.FragmentManager,java.lang.String)>(r14, "security_needed");

     label08:
        goto label10;

     label09:
        $r9 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void tryAdvanceSecurity(com.android.emailcommon.provider.Account)>($r9);

     label10:
        return;

     label11:
        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        return;
    }

    protected void onActivityResult(int, int, android.content.Intent)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        int i0, i1;
        android.content.Intent r1;
        com.android.emailcommon.provider.Account $r2;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

        $r2 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void tryAdvanceSecurity(com.android.emailcommon.provider.Account)>($r2);

        specialinvoke r0.<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>(i0, i1, r1);

        return;
    }

    private void tryAdvanceSecurity(com.android.emailcommon.provider.Account)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        com.android.emailcommon.provider.Account r1;
        com.android.email.SecurityPolicy r2;
        com.android.emailcommon.provider.HostAuth r3;
        android.content.Intent r4, $r7, $r10, $r15, r23, r24;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        int $i0, $i1, i11;
        java.lang.Object[] $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r18, $r19, $r22;
        android.content.ComponentName $r14;
        java.lang.String $r16, $r20;

        r0 := @this: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter0: com.android.emailcommon.provider.Account;

        r2 = staticinvoke <com.android.email.SecurityPolicy: com.android.email.SecurityPolicy getInstance(android.content.Context)>(r0);

        $z0 = virtualinvoke r2.<com.android.email.SecurityPolicy: boolean isActiveAdmin()>();

        if $z0 != 0 goto label10;

        $z11 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedAddAdministrator>;

        if $z11 == 0 goto label03;

        $z13 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z13 != 0 goto label01;

        goto label02;

     label01:
        $r22 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Not active admin: repost notification", $r22);

     label02:
        staticinvoke <com.android.email.activity.setup.AccountSecurity: void repostNotification(com.android.emailcommon.provider.Account,com.android.email.SecurityPolicy)>(r1, r2);

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        goto label09;

     label03:
        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedAddAdministrator> = 1;

        r3 = r1.<com.android.emailcommon.provider.Account: com.android.emailcommon.provider.HostAuth mHostAuthRecv>;

        if r3 != null goto label06;

        $z12 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z12 != 0 goto label04;

        goto label05;

     label04:
        $r19 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "No HostAuth: repost notification", $r19);

     label05:
        staticinvoke <com.android.email.activity.setup.AccountSecurity: void repostNotification(com.android.emailcommon.provider.Account,com.android.email.SecurityPolicy)>(r1, r2);

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        goto label09;

     label06:
        $z10 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z10 != 0 goto label07;

        goto label08;

     label07:
        $r13 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Not active admin: post initial notification", $r13);

     label08:
        $r15 = new android.content.Intent;

        specialinvoke $r15.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.ADD_DEVICE_ADMIN");

        r4 = $r15;

        $r14 = virtualinvoke r2.<com.android.email.SecurityPolicy: android.content.ComponentName getAdminComponent()>();

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.app.extra.DEVICE_ADMIN", $r14);

        $r18 = newarray (java.lang.Object)[1];

        $r16 = r3.<com.android.emailcommon.provider.HostAuth: java.lang.String mAddress>;

        $r18[0] = $r16;

        $r20 = virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: java.lang.String getString(int,java.lang.Object[])>(2131296862, $r18);

        virtualinvoke r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.app.extra.ADD_EXPLANATION", $r20);

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void startActivityForResult(android.content.Intent,int)>(r4, 1);

     label09:
        return;

     label10:
        $z1 = virtualinvoke r2.<com.android.email.SecurityPolicy: boolean isActive(com.android.emailcommon.provider.Policy)>(null);

        if $z1 == 0 goto label13;

        $z9 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z9 != 0 goto label11;

        goto label12;

     label11:
        $r12 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Security active; clear holds", $r12);

     label12:
        staticinvoke <com.android.emailcommon.provider.Account: void clearSecurityHoldOnAllAccounts(android.content.Context)>(r0);

        virtualinvoke r2.<com.android.email.SecurityPolicy: void syncAccount(com.android.emailcommon.provider.Account)>(r1);

        virtualinvoke r2.<com.android.email.SecurityPolicy: void clearNotification()>();

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        return;

     label13:
        virtualinvoke r2.<com.android.email.SecurityPolicy: void setActivePolicies()>();

        i11 = virtualinvoke r2.<com.android.email.SecurityPolicy: int getInactiveReasons(com.android.emailcommon.provider.Policy)>(null);

        $i0 = i11 & 4;

        if $i0 == 0 goto label20;

        $z7 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetPassword>;

        if $z7 == 0 goto label16;

        $z8 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z8 != 0 goto label14;

        goto label15;

     label14:
        $r11 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Password needed; repost notification", $r11);

     label15:
        staticinvoke <com.android.email.activity.setup.AccountSecurity: void repostNotification(com.android.emailcommon.provider.Account,com.android.email.SecurityPolicy)>(r1, r2);

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        goto label19;

     label16:
        $z6 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z6 != 0 goto label17;

        goto label18;

     label17:
        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Password needed; request it via DPM", $r9);

     label18:
        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetPassword> = 1;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.SET_NEW_PASSWORD");

        r23 = $r10;

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void startActivityForResult(android.content.Intent,int)>(r23, 2);

     label19:
        return;

     label20:
        $i1 = i11 & 8;

        if $i1 == 0 goto label27;

        $z3 = r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetEncryption>;

        if $z3 == 0 goto label23;

        $z5 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z5 != 0 goto label21;

        goto label22;

     label21:
        $r8 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Encryption needed; repost notification", $r8);

     label22:
        staticinvoke <com.android.email.activity.setup.AccountSecurity: void repostNotification(com.android.emailcommon.provider.Account,com.android.email.SecurityPolicy)>(r1, r2);

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        goto label26;

     label23:
        $z4 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z4 != 0 goto label24;

        goto label25;

     label24:
        $r6 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Encryption needed; request it via DPM", $r6);

     label25:
        r0.<com.android.email.activity.setup.AccountSecurity: boolean mTriedSetEncryption> = 1;

        $r7 = new android.content.Intent;

        specialinvoke $r7.<android.content.Intent: void <init>(java.lang.String)>("android.app.action.START_ENCRYPTION");

        r24 = $r7;

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void startActivityForResult(android.content.Intent,int)>(r24, 3);

     label26:
        return;

     label27:
        $z2 = <com.android.email2.ui.MailActivityEmail: boolean DEBUG>;

        if $z2 != 0 goto label28;

        goto label29;

     label28:
        $r5 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int d(java.lang.String,java.lang.String,java.lang.Object[])>("Email/AccountSecurity", "Policies enforced; clear holds", $r5);

     label29:
        staticinvoke <com.android.emailcommon.provider.Account: void clearSecurityHoldOnAllAccounts(android.content.Context)>(r0);

        virtualinvoke r2.<com.android.email.SecurityPolicy: void syncAccount(com.android.emailcommon.provider.Account)>(r1);

        virtualinvoke r2.<com.android.email.SecurityPolicy: void clearNotification()>();

        virtualinvoke r0.<com.android.email.activity.setup.AccountSecurity: void finish()>();

        return;
    }

    private static void repostNotification(com.android.emailcommon.provider.Account, com.android.email.SecurityPolicy)
    {
        com.android.emailcommon.provider.Account r0;
        com.android.email.SecurityPolicy r1;
        com.android.email.activity.setup.AccountSecurity$1 $r2;
        java.lang.Void[] $r3;
        java.util.concurrent.Executor $r4;

        r0 := @parameter0: com.android.emailcommon.provider.Account;

        r1 := @parameter1: com.android.email.SecurityPolicy;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = new com.android.email.activity.setup.AccountSecurity$1;

        specialinvoke $r2.<com.android.email.activity.setup.AccountSecurity$1: void <init>(com.android.email.SecurityPolicy,com.android.emailcommon.provider.Account)>(r1, r0);

        $r4 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r3 = newarray (java.lang.Void)[0];

        virtualinvoke $r2.<com.android.email.activity.setup.AccountSecurity$1: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r4, $r3);

        return;
    }

    static android.os.Handler access$100(com.android.email.activity.setup.AccountSecurity)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.email.activity.setup.AccountSecurity;

        $r1 = r0.<com.android.email.activity.setup.AccountSecurity: android.os.Handler mHandler>;

        return $r1;
    }

    static com.android.emailcommon.provider.Account access$200(com.android.email.activity.setup.AccountSecurity)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        com.android.emailcommon.provider.Account $r1;

        r0 := @parameter0: com.android.email.activity.setup.AccountSecurity;

        $r1 = r0.<com.android.email.activity.setup.AccountSecurity: com.android.emailcommon.provider.Account mAccount>;

        return $r1;
    }

    static void access$300(com.android.email.activity.setup.AccountSecurity, com.android.emailcommon.provider.Account)
    {
        com.android.email.activity.setup.AccountSecurity r0;
        com.android.emailcommon.provider.Account r1;

        r0 := @parameter0: com.android.email.activity.setup.AccountSecurity;

        r1 := @parameter1: com.android.emailcommon.provider.Account;

        specialinvoke r0.<com.android.email.activity.setup.AccountSecurity: void tryAdvanceSecurity(com.android.emailcommon.provider.Account)>(r1);

        return;
    }

    static void access$400(com.android.emailcommon.provider.Account, com.android.email.SecurityPolicy)
    {
        com.android.emailcommon.provider.Account r0;
        com.android.email.SecurityPolicy r1;

        r0 := @parameter0: com.android.emailcommon.provider.Account;

        r1 := @parameter1: com.android.email.SecurityPolicy;

        staticinvoke <com.android.email.activity.setup.AccountSecurity: void repostNotification(com.android.emailcommon.provider.Account,com.android.email.SecurityPolicy)>(r0, r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.email.activity.setup.AccountSecurity: int ACCOUNT_POLICY_LOADER_ID> = 0;

        <com.android.email.activity.setup.AccountSecurity: int REQUEST_ENCRYPTION> = 3;

        <com.android.email.activity.setup.AccountSecurity: int REQUEST_PASSWORD> = 2;

        <com.android.email.activity.setup.AccountSecurity: int REQUEST_ENABLE> = 1;

        <com.android.email.activity.setup.AccountSecurity: java.lang.String SAVESTATE_ACCOUNT_TAG> = "account";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String SAVESTATE_TRIED_SET_ENCRYPTION_TAG> = "triedSetEncryption";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String SAVESTATE_TRIED_SET_PASSWORD_TAG> = "triedSetpassword";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String SAVESTATE_TRIED_ADD_ADMINISTRATOR_TAG> = "triedAddAdministrator";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String SAVESTATE_INITIALIZED_TAG> = "initialized";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String EXTRA_PASSWORD_EXPIRED> = "EXPIRED";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String EXTRA_PASSWORD_EXPIRING> = "EXPIRING";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String EXTRA_SHOW_DIALOG> = "SHOW_DIALOG";

        <com.android.email.activity.setup.AccountSecurity: java.lang.String EXTRA_ACCOUNT_ID> = "ACCOUNT_ID";

        <com.android.email.activity.setup.AccountSecurity: boolean DEBUG> = 0;

        <com.android.email.activity.setup.AccountSecurity: java.lang.String TAG> = "Email/AccountSecurity";

        return;
    }
}
