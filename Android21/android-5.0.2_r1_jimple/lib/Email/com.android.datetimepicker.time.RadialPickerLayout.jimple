public class com.android.datetimepicker.time.RadialPickerLayout extends android.widget.FrameLayout implements android.view.View$OnTouchListener
{
    private static final java.lang.String TAG;
    private final int TOUCH_SLOP;
    private final int TAP_TIMEOUT;
    private static final int VISIBLE_DEGREES_STEP_SIZE;
    private static final int HOUR_VALUE_TO_DEGREES_STEP_SIZE;
    private static final int MINUTE_VALUE_TO_DEGREES_STEP_SIZE;
    private static final int HOUR_INDEX;
    private static final int MINUTE_INDEX;
    private static final int AMPM_INDEX;
    private static final int ENABLE_PICKER_INDEX;
    private static final int AM;
    private static final int PM;
    private int mLastValueSelected;
    private com.android.datetimepicker.HapticFeedbackController mHapticFeedbackController;
    private com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener;
    private boolean mTimeInitialized;
    private int mCurrentHoursOfDay;
    private int mCurrentMinutes;
    private boolean mIs24HourMode;
    private boolean mHideAmPm;
    private int mCurrentItemShowing;
    private com.android.datetimepicker.time.CircleView mCircleView;
    private com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView;
    private com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView;
    private com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView;
    private com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView;
    private com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView;
    private android.view.View mGrayBox;
    private int[] mSnapPrefer30sMap;
    private boolean mInputEnabled;
    private int mIsTouchingAmOrPm;
    private boolean mDoingMove;
    private boolean mDoingTouch;
    private int mDownDegrees;
    private float mDownX;
    private float mDownY;
    private android.view.accessibility.AccessibilityManager mAccessibilityManager;
    private android.animation.AnimatorSet mTransition;
    private android.os.Handler mHandler;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.view.ViewConfiguration r3;
        android.os.Handler $r4;
        int $i0, $i1, $i2, $i3;
        com.android.datetimepicker.time.CircleView $r5, $r6;
        com.android.datetimepicker.time.AmPmCirclesView $r7, $r8;
        com.android.datetimepicker.time.RadialTextsView $r9, $r10, $r11, $r12;
        com.android.datetimepicker.time.RadialSelectorView $r13, $r14, $r15, $r16;
        android.view.ViewGroup$LayoutParams $r17;
        android.view.View $r18, $r19, $r20, $r22, $r24;
        android.content.res.Resources $r21;
        java.lang.Object $r23;
        android.view.accessibility.AccessibilityManager $r25;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm> = -1;

        $r4 = new android.os.Handler;

        specialinvoke $r4.<android.os.Handler: void <init>()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler> = $r4;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setOnTouchListener(android.view.View$OnTouchListener)>(r0);

        r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i0 = virtualinvoke r3.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int TOUCH_SLOP> = $i0;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int TAP_TIMEOUT> = $i1;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove> = 0;

        $r5 = new com.android.datetimepicker.time.CircleView;

        specialinvoke $r5.<com.android.datetimepicker.time.CircleView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.CircleView mCircleView> = $r5;

        $r6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.CircleView mCircleView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r6);

        $r7 = new com.android.datetimepicker.time.AmPmCirclesView;

        specialinvoke $r7.<com.android.datetimepicker.time.AmPmCirclesView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView> = $r7;

        $r8 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r8);

        $r9 = new com.android.datetimepicker.time.RadialTextsView;

        specialinvoke $r9.<com.android.datetimepicker.time.RadialTextsView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView> = $r9;

        $r10 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r10);

        $r11 = new com.android.datetimepicker.time.RadialTextsView;

        specialinvoke $r11.<com.android.datetimepicker.time.RadialTextsView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView> = $r11;

        $r12 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r12);

        $r14 = new com.android.datetimepicker.time.RadialSelectorView;

        specialinvoke $r14.<com.android.datetimepicker.time.RadialSelectorView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView> = $r14;

        $r13 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r13);

        $r16 = new com.android.datetimepicker.time.RadialSelectorView;

        specialinvoke $r16.<com.android.datetimepicker.time.RadialSelectorView: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView> = $r16;

        $r15 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r15);

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void preparePrefer30sMap()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mLastValueSelected> = -1;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mInputEnabled> = 1;

        $r18 = new android.view.View;

        specialinvoke $r18.<android.view.View: void <init>(android.content.Context)>(r1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox> = $r18;

        $r20 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox>;

        $r17 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r17.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke $r20.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r17);

        $r19 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox>;

        $r21 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: android.content.res.Resources getResources()>();

        $i2 = <com.android.datetimepicker.R$color: int transparent_black>;

        $i3 = virtualinvoke $r21.<android.content.res.Resources: int getColor(int)>($i2);

        virtualinvoke $r19.<android.view.View: void setBackgroundColor(int)>($i3);

        $r22 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox>;

        virtualinvoke $r22.<android.view.View: void setVisibility(int)>(4);

        $r24 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox>;

        virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void addView(android.view.View)>($r24);

        $r23 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r25 = (android.view.accessibility.AccessibilityManager) $r23;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.accessibility.AccessibilityManager mAccessibilityManager> = $r25;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mTimeInitialized> = 0;

        return;
    }

    public void onMeasure(int, int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0);

        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i1);

        i5 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i1);

        i6 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i4);

        $i7 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i6, i3);

        $i8 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i6, i5);

        specialinvoke r0.<android.widget.FrameLayout: void onMeasure(int,int)>($i7, $i8);

        return;
    }

    public void setOnValueSelectedListener(com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener r1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener> = r1;

        return;
    }

    public void initialize(android.content.Context, com.android.datetimepicker.HapticFeedbackController, int, int, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.content.Context r1;
        com.android.datetimepicker.HapticFeedbackController r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i11;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        android.content.res.Resources r3;
        int[] r4, r5, r6, $r13, $r14, $r15;
        java.lang.String[] r7, r8, r9, $r22;
        android.view.accessibility.AccessibilityManager $r10;
        com.android.datetimepicker.time.CircleView $r11, $r12;
        com.android.datetimepicker.time.RadialTextsView $r16, $r17, $r18, $r20;
        com.android.datetimepicker.time.RadialSelectorView $r19, $r21;
        java.lang.Object[] $r23, $r25, $r28, $r30;
        java.lang.String $r24, $r29, $r31;
        java.lang.Integer $r26, $r27, $r32, $r33;
        com.android.datetimepicker.time.AmPmCirclesView $r34, $r35;
        byte $b10;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.datetimepicker.HapticFeedbackController;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        $z1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mTimeInitialized>;

        if $z1 == 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RadialPickerLayout", "Time has already been initialized.");

        return;

     label01:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.HapticFeedbackController mHapticFeedbackController> = r2;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode> = z0;

        $r10 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z2 = virtualinvoke $r10.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z2 == 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

     label03:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm> = $z4;

        $r12 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.CircleView mCircleView>;

        $z3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        virtualinvoke $r12.<com.android.datetimepicker.time.CircleView: void initialize(android.content.Context,boolean)>(r1, $z3);

        $r11 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.CircleView mCircleView>;

        virtualinvoke $r11.<com.android.datetimepicker.time.CircleView: void invalidate()>();

        $z5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        if $z5 != 0 goto label06;

        $r34 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        if i0 >= 12 goto label04;

        $b10 = 0;

        goto label05;

     label04:
        $b10 = 1;

     label05:
        virtualinvoke $r34.<com.android.datetimepicker.time.AmPmCirclesView: void initialize(android.content.Context,int)>(r1, $b10);

        $r35 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r35.<com.android.datetimepicker.time.AmPmCirclesView: void invalidate()>();

     label06:
        r3 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r14 = newarray (int)[12];

        $r14[0] = 12;

        $r14[1] = 1;

        $r14[2] = 2;

        $r14[3] = 3;

        $r14[4] = 4;

        $r14[5] = 5;

        $r14[6] = 6;

        $r14[7] = 7;

        $r14[8] = 8;

        $r14[9] = 9;

        $r14[10] = 10;

        $r14[11] = 11;

        r4 = $r14;

        $r13 = newarray (int)[12];

        $r13[0] = 0;

        $r13[1] = 13;

        $r13[2] = 14;

        $r13[3] = 15;

        $r13[4] = 16;

        $r13[5] = 17;

        $r13[6] = 18;

        $r13[7] = 19;

        $r13[8] = 20;

        $r13[9] = 21;

        $r13[10] = 22;

        $r13[11] = 23;

        r5 = $r13;

        $r15 = newarray (int)[12];

        $r15[0] = 0;

        $r15[1] = 5;

        $r15[2] = 10;

        $r15[3] = 15;

        $r15[4] = 20;

        $r15[5] = 25;

        $r15[6] = 30;

        $r15[7] = 35;

        $r15[8] = 40;

        $r15[9] = 45;

        $r15[10] = 50;

        $r15[11] = 55;

        r6 = $r15;

        r7 = newarray (java.lang.String)[12];

        r8 = newarray (java.lang.String)[12];

        r9 = newarray (java.lang.String)[12];

        i2 = 0;

     label07:
        if i2 >= 12 goto label10;

        if z0 == 0 goto label08;

        $r30 = newarray (java.lang.Object)[1];

        $i8 = r5[i2];

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r30[0] = $r33;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02d", $r30);

        goto label09;

     label08:
        $r23 = newarray (java.lang.Object)[1];

        $i5 = r4[i2];

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r23[0] = $r26;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $r23);

     label09:
        r7[i2] = $r24;

        $r25 = newarray (java.lang.Object)[1];

        $i6 = r4[i2];

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r25[0] = $r27;

        $r29 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $r25);

        r8[i2] = $r29;

        $r28 = newarray (java.lang.Object)[1];

        $i7 = r6[i2];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r28[0] = $r32;

        $r31 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02d", $r28);

        r9[i2] = $r31;

        i2 = i2 + 1;

        goto label07;

     label10:
        $r17 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        if z0 == 0 goto label11;

        $r22 = r8;

        goto label12;

     label11:
        $r22 = null;

     label12:
        $z6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        virtualinvoke $r17.<com.android.datetimepicker.time.RadialTextsView: void initialize(android.content.res.Resources,java.lang.String[],java.lang.String[],boolean,boolean)>(r3, r7, $r22, $z6, 1);

        $r16 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        virtualinvoke $r16.<com.android.datetimepicker.time.RadialTextsView: void invalidate()>();

        $r18 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        $z7 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        virtualinvoke $r18.<com.android.datetimepicker.time.RadialTextsView: void initialize(android.content.res.Resources,java.lang.String[],java.lang.String[],boolean,boolean)>(r3, r9, null, $z7, 0);

        $r20 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        virtualinvoke $r20.<com.android.datetimepicker.time.RadialTextsView: void invalidate()>();

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(0, i0);

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(1, i1);

        $i4 = i0 % 12;

        i11 = $i4 * 30;

        $r19 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $z8 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        $z10 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean isHourInnerCircle(int)>(i0);

        virtualinvoke $r19.<com.android.datetimepicker.time.RadialSelectorView: void initialize(android.content.Context,boolean,boolean,boolean,int,boolean)>(r1, $z8, z0, 1, i11, $z10);

        i3 = i1 * 6;

        $r21 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        $z9 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        virtualinvoke $r21.<com.android.datetimepicker.time.RadialSelectorView: void initialize(android.content.Context,boolean,boolean,boolean,int,boolean)>(r1, $z9, 0, 0, i3, 0);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mTimeInitialized> = 1;

        return;
    }

    void setTheme(android.content.Context, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.content.Context r1;
        boolean z0;
        com.android.datetimepicker.time.CircleView $r2;
        com.android.datetimepicker.time.AmPmCirclesView $r3;
        com.android.datetimepicker.time.RadialTextsView $r4, $r5;
        com.android.datetimepicker.time.RadialSelectorView $r6, $r7;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.CircleView mCircleView>;

        virtualinvoke $r2.<com.android.datetimepicker.time.CircleView: void setTheme(android.content.Context,boolean)>(r1, z0);

        $r3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r3.<com.android.datetimepicker.time.AmPmCirclesView: void setTheme(android.content.Context,boolean)>(r1, z0);

        $r4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        virtualinvoke $r4.<com.android.datetimepicker.time.RadialTextsView: void setTheme(android.content.Context,boolean)>(r1, z0);

        $r5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        virtualinvoke $r5.<com.android.datetimepicker.time.RadialTextsView: void setTheme(android.content.Context,boolean)>(r1, z0);

        $r6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        virtualinvoke $r6.<com.android.datetimepicker.time.RadialSelectorView: void setTheme(android.content.Context,boolean)>(r1, z0);

        $r7 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        virtualinvoke $r7.<com.android.datetimepicker.time.RadialSelectorView: void setTheme(android.content.Context,boolean)>(r1, z0);

        return;
    }

    public void setTime(int, int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setItem(int,int)>(0, i0);

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setItem(int,int)>(1, i1);

        return;
    }

    private void setItem(int, int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1, i2, $i3, i4;
        com.android.datetimepicker.time.RadialSelectorView $r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(0, i1);

        $i3 = i1 % 12;

        i2 = $i3 * 30;

        $r3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $z0 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean isHourInnerCircle(int)>(i1);

        virtualinvoke $r3.<com.android.datetimepicker.time.RadialSelectorView: void setSelection(int,boolean,boolean)>(i2, $z0, 0);

        $r4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        virtualinvoke $r4.<com.android.datetimepicker.time.RadialSelectorView: void invalidate()>();

        goto label2;

     label1:
        if i0 != 1 goto label2;

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(1, i1);

        i4 = i1 * 6;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        virtualinvoke $r1.<com.android.datetimepicker.time.RadialSelectorView: void setSelection(int,boolean,boolean)>(i4, 0, 0);

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        virtualinvoke $r2.<com.android.datetimepicker.time.RadialSelectorView: void invalidate()>();

     label2:
        return;
    }

    private boolean isHourInnerCircle(int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z0 == 0 goto label1;

        if i0 > 12 goto label1;

        if i0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public int getHours()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        return $i0;
    }

    public int getMinutes()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentMinutes>;

        return $i0;
    }

    private int getCurrentlyShowingValue()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        if i0 != 0 goto label1;

        $i2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        return $i2;

     label1:
        if i0 != 1 goto label2;

        $i1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentMinutes>;

        return $i1;

     label2:
        return -1;
    }

    public int getIsCurrentlyAmOrPm()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0, $i1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        if $i0 >= 12 goto label1;

        return 0;

     label1:
        $i1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        if $i1 >= 24 goto label2;

        return 1;

     label2:
        return -1;
    }

    private void setValueForItem(int, int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay> = i1;

        goto label4;

     label1:
        if i0 != 1 goto label2;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentMinutes> = i1;

        goto label4;

     label2:
        if i0 != 2 goto label4;

        if i1 != 0 goto label3;

        $i5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        $i6 = $i5 % 12;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay> = $i6;

        goto label4;

     label3:
        if i1 != 1 goto label4;

        $i2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay>;

        $i3 = $i2 % 12;

        $i4 = $i3 + 12;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentHoursOfDay> = $i4;

     label4:
        return;
    }

    public void setAmOrPm(int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0;
        com.android.datetimepicker.time.AmPmCirclesView $r1, $r2;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r1.<com.android.datetimepicker.time.AmPmCirclesView: void setAmOrPm(int)>(i0);

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r2.<com.android.datetimepicker.time.AmPmCirclesView: void invalidate()>();

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(2, i0);

        return;
    }

    private void preparePrefer30sMap()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1, i3, $i4;
        byte b2;
        int[] $r1, $r2;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        $r1 = newarray (int)[361];

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int[] mSnapPrefer30sMap> = $r1;

        i0 = 0;

        i1 = 1;

        b2 = 8;

        i3 = 0;

     label1:
        if i3 >= 361 goto label7;

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int[] mSnapPrefer30sMap>;

        $r2[i3] = i0;

        if i1 != b2 goto label5;

        i0 = i0 + 6;

        if i0 != 360 goto label2;

        b2 = 7;

        goto label4;

     label2:
        $i4 = i0 % 30;

        if $i4 != 0 goto label3;

        b2 = 14;

        goto label4;

     label3:
        b2 = 4;

     label4:
        i1 = 1;

        goto label6;

     label5:
        i1 = i1 + 1;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;
    }

    private int snapPrefer30s(int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, $i1;
        int[] $r1, $r2;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int[] mSnapPrefer30sMap>;

        if $r1 != null goto label1;

        return -1;

     label1:
        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int[] mSnapPrefer30sMap>;

        $i1 = $r2[i0];

        return $i1;
    }

    private static int snapOnly30s(int, int)
    {
        int i0, i1, i3, i4, $i5, $i6, $i7, i8;
        byte b2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        b2 = 30;

        $i5 = i0 / b2;

        i3 = $i5 * b2;

        i4 = i3 + b2;

        if i1 != 1 goto label1;

        i8 = i4;

        goto label5;

     label1:
        if i1 != -1 goto label3;

        if i0 != i3 goto label2;

        i3 = i3 - b2;

     label2:
        i8 = i3;

        goto label5;

     label3:
        $i7 = i0 - i3;

        $i6 = i4 - i0;

        if $i7 >= $i6 goto label4;

        i8 = i3;

        goto label5;

     label4:
        i8 = i4;

     label5:
        return i8;
    }

    private int reselectSelector(int, boolean, boolean, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1, i3, i4;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        byte b2;
        com.android.datetimepicker.time.RadialSelectorView r1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        if i0 != -1 goto label01;

        return -1;

     label01:
        i1 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        if z1 != 0 goto label02;

        if i1 != 1 goto label02;

        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        z3 = $z6;

        if z3 == 0 goto label04;

        i4 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int snapPrefer30s(int)>(i0);

        goto label05;

     label04:
        i4 = staticinvoke <com.android.datetimepicker.time.RadialPickerLayout: int snapOnly30s(int,int)>(i0, 0);

     label05:
        if i1 != 0 goto label06;

        r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        b2 = 30;

        goto label07;

     label06:
        r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        b2 = 6;

     label07:
        virtualinvoke r1.<com.android.datetimepicker.time.RadialSelectorView: void setSelection(int,boolean,boolean)>(i4, z0, z2);

        virtualinvoke r1.<com.android.datetimepicker.time.RadialSelectorView: void invalidate()>();

        if i1 != 0 goto label10;

        $z5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z5 == 0 goto label09;

        if i4 != 0 goto label08;

        if z0 == 0 goto label08;

        i4 = 360;

        goto label11;

     label08:
        if i4 != 360 goto label11;

        if z0 != 0 goto label11;

        i4 = 0;

        goto label11;

     label09:
        if i4 != 0 goto label11;

        i4 = 360;

        goto label11;

     label10:
        if i4 != 360 goto label11;

        if i1 != 1 goto label11;

        i4 = 0;

     label11:
        i3 = i4 / b2;

        if i1 != 0 goto label12;

        $z4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z4 == 0 goto label12;

        if z0 != 0 goto label12;

        if i4 == 0 goto label12;

        i3 = i3 + 12;

     label12:
        return i3;
    }

    private int getDegreesFromCoords(float, float, boolean, java.lang.Boolean[])
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        float f0, f1;
        boolean z0;
        java.lang.Boolean[] r1;
        int i0, $i1, $i2;
        com.android.datetimepicker.time.RadialSelectorView $r2, $r3;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.Boolean[];

        i0 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        if i0 != 0 goto label1;

        $r3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $i2 = virtualinvoke $r3.<com.android.datetimepicker.time.RadialSelectorView: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>(f0, f1, z0, r1);

        return $i2;

     label1:
        if i0 != 1 goto label2;

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        $i1 = virtualinvoke $r2.<com.android.datetimepicker.time.RadialSelectorView: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>(f0, f1, z0, r1);

        return $i1;

     label2:
        return -1;
    }

    public int getCurrentItemShowing()
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentItemShowing>;

        if $i0 == 0 goto label1;

        $i2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentItemShowing>;

        if $i2 == 1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current item showing was unfortunately set to ");

        $i3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentItemShowing>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RadialPickerLayout", $r4);

        return -1;

     label1:
        $i1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentItemShowing>;

        return $i1;
    }

    public void setCurrentItemShowing(int, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i1;
        boolean z0, $z1;
        android.animation.ObjectAnimator[] r1;
        short s2, $s3, $s4, s6;
        float $f0, $f1, $f2, $f3;
        com.android.datetimepicker.time.RadialTextsView $r2, $r4, $r12, $r16, $r22, $r23;
        com.android.datetimepicker.time.RadialSelectorView $r3, $r5, $r13, $r19, $r21, $r27;
        android.animation.AnimatorSet $r6, $r7, $r8, $r9, $r10, $r11;
        android.animation.ObjectAnimator $r14, $r15, $r17, $r18, $r20, $r24, $r25, $r26;
        java.lang.StringBuilder $r28, $r29, $r30;
        java.lang.String $r31;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 == 0 goto label01;

        if i0 == 1 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TimePicker does not support view at index ");

        $r28 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RadialPickerLayout", $r31);

        return;

     label01:
        i1 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mCurrentItemShowing> = i0;

        if z0 == 0 goto label05;

        if i0 == i1 goto label05;

        r1 = newarray (android.animation.ObjectAnimator)[4];

        if i0 != 1 goto label02;

        $r22 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        $r20 = virtualinvoke $r22.<com.android.datetimepicker.time.RadialTextsView: android.animation.ObjectAnimator getDisappearAnimator()>();

        r1[0] = $r20;

        $r21 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $r24 = virtualinvoke $r21.<com.android.datetimepicker.time.RadialSelectorView: android.animation.ObjectAnimator getDisappearAnimator()>();

        r1[1] = $r24;

        $r23 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        $r26 = virtualinvoke $r23.<com.android.datetimepicker.time.RadialTextsView: android.animation.ObjectAnimator getReappearAnimator()>();

        r1[2] = $r26;

        $r27 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        $r25 = virtualinvoke $r27.<com.android.datetimepicker.time.RadialSelectorView: android.animation.ObjectAnimator getReappearAnimator()>();

        r1[3] = $r25;

        goto label03;

     label02:
        if i0 != 0 goto label03;

        $r12 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        $r14 = virtualinvoke $r12.<com.android.datetimepicker.time.RadialTextsView: android.animation.ObjectAnimator getReappearAnimator()>();

        r1[0] = $r14;

        $r13 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $r15 = virtualinvoke $r13.<com.android.datetimepicker.time.RadialSelectorView: android.animation.ObjectAnimator getReappearAnimator()>();

        r1[1] = $r15;

        $r16 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        $r18 = virtualinvoke $r16.<com.android.datetimepicker.time.RadialTextsView: android.animation.ObjectAnimator getDisappearAnimator()>();

        r1[2] = $r18;

        $r19 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        $r17 = virtualinvoke $r19.<com.android.datetimepicker.time.RadialSelectorView: android.animation.ObjectAnimator getDisappearAnimator()>();

        r1[3] = $r17;

     label03:
        $r6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition>;

        if $r6 == null goto label04;

        $r9 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition>;

        $z1 = virtualinvoke $r9.<android.animation.AnimatorSet: boolean isRunning()>();

        if $z1 == 0 goto label04;

        $r11 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition>;

        virtualinvoke $r11.<android.animation.AnimatorSet: void end()>();

     label04:
        $r8 = new android.animation.AnimatorSet;

        specialinvoke $r8.<android.animation.AnimatorSet: void <init>()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition> = $r8;

        $r7 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition>;

        virtualinvoke $r7.<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>(r1);

        $r10 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.animation.AnimatorSet mTransition>;

        virtualinvoke $r10.<android.animation.AnimatorSet: void start()>();

        goto label10;

     label05:
        if i0 != 0 goto label06;

        $s4 = 255;

        goto label07;

     label06:
        $s4 = 0;

     label07:
        s6 = $s4;

        if i0 != 1 goto label08;

        $s3 = 255;

        goto label09;

     label08:
        $s3 = 0;

     label09:
        s2 = $s3;

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mHourRadialTextsView>;

        $f0 = (float) s6;

        virtualinvoke $r2.<com.android.datetimepicker.time.RadialTextsView: void setAlpha(float)>($f0);

        $r3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mHourRadialSelectorView>;

        $f1 = (float) s6;

        virtualinvoke $r3.<com.android.datetimepicker.time.RadialSelectorView: void setAlpha(float)>($f1);

        $r4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialTextsView mMinuteRadialTextsView>;

        $f2 = (float) s2;

        virtualinvoke $r4.<com.android.datetimepicker.time.RadialTextsView: void setAlpha(float)>($f2);

        $r5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialSelectorView mMinuteRadialSelectorView>;

        $f3 = (float) s2;

        virtualinvoke $r5.<com.android.datetimepicker.time.RadialSelectorView: void setAlpha(float)>($f3);

     label10:
        return;
    }

    public boolean onTouch(android.view.View, android.view.MotionEvent)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.view.View r1;
        android.view.MotionEvent r2;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, f9;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i34, i35, i36, i37;
        java.lang.Boolean[] r3;
        boolean z0, $z1, $z2, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Boolean $r4, $r18, $r26;
        com.android.datetimepicker.HapticFeedbackController $r5, $r10, $r20;
        android.os.Handler $r6, $r11, $r13, $r16, $r24;
        com.android.datetimepicker.time.RadialPickerLayout$1 $r7;
        long $l5, $l10;
        android.view.accessibility.AccessibilityManager $r8;
        com.android.datetimepicker.time.RadialPickerLayout$2 $r9;
        com.android.datetimepicker.time.AmPmCirclesView $r12, $r14, $r15, $r17, $r21, $r22, $r23, $r25;
        com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener $r19, $r27, $r28, $r29;
        byte $b19, $b22;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.MotionEvent;

        f0 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();

        r3 = newarray (java.lang.Boolean)[1];

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        r3[0] = $r4;

        $i3 = virtualinvoke r2.<android.view.MotionEvent: int getAction()>();

        tableswitch($i3)
        {
            case 0: goto label01;
            case 1: goto label15;
            case 2: goto label08;
            default: goto label25;
        };

     label01:
        $z2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mInputEnabled>;

        if $z2 != 0 goto label02;

        return 1;

     label02:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: float mDownX> = f0;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: float mDownY> = f1;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mLastValueSelected> = -1;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove> = 0;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingTouch> = 1;

        $z1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mHideAmPm>;

        if $z1 != 0 goto label03;

        $r12 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        $i12 = virtualinvoke $r12.<com.android.datetimepicker.time.AmPmCirclesView: int getIsTouchingAmOrPm(float,float)>(f0, f1);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm> = $i12;

        goto label04;

     label03:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm> = -1;

     label04:
        $i4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i4 == 0 goto label05;

        $i7 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i7 != 1 goto label06;

     label05:
        $r5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.HapticFeedbackController mHapticFeedbackController>;

        virtualinvoke $r5.<com.android.datetimepicker.HapticFeedbackController: void tryVibrate()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees> = -1;

        $r6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler>;

        $r7 = new com.android.datetimepicker.time.RadialPickerLayout$1;

        specialinvoke $r7.<com.android.datetimepicker.time.RadialPickerLayout$1: void <init>(com.android.datetimepicker.time.RadialPickerLayout)>(r0);

        $i6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int TAP_TIMEOUT>;

        $l5 = (long) $i6;

        virtualinvoke $r6.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r7, $l5);

        goto label07;

     label06:
        $r8 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        z0 = virtualinvoke $r8.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        $i9 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>(f0, f1, z0, r3);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees> = $i9;

        $i8 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees>;

        if $i8 == -1 goto label07;

        $r10 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.HapticFeedbackController mHapticFeedbackController>;

        virtualinvoke $r10.<com.android.datetimepicker.HapticFeedbackController: void tryVibrate()>();

        $r11 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler>;

        $r9 = new com.android.datetimepicker.time.RadialPickerLayout$2;

        specialinvoke $r9.<com.android.datetimepicker.time.RadialPickerLayout$2: void <init>(com.android.datetimepicker.time.RadialPickerLayout,java.lang.Boolean[])>(r0, r3);

        $i11 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int TAP_TIMEOUT>;

        $l10 = (long) $i11;

        virtualinvoke $r11.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r9, $l10);

     label07:
        return 1;

     label08:
        $z5 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mInputEnabled>;

        if $z5 != 0 goto label09;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RadialPickerLayout", "Input was disabled, but received ACTION_MOVE.");

        return 1;

     label09:
        $f3 = r0.<com.android.datetimepicker.time.RadialPickerLayout: float mDownY>;

        $f6 = f1 - $f3;

        f9 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $f4 = r0.<com.android.datetimepicker.time.RadialPickerLayout: float mDownX>;

        $f5 = f0 - $f4;

        f2 = staticinvoke <java.lang.Math: float abs(float)>($f5);

        $z6 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove>;

        if $z6 != 0 goto label10;

        $i21 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int TOUCH_SLOP>;

        $f8 = (float) $i21;

        $b22 = f2 cmpg $f8;

        if $b22 > 0 goto label10;

        $i23 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int TOUCH_SLOP>;

        $f7 = (float) $i23;

        $b19 = f9 cmpg $f7;

        if $b19 > 0 goto label10;

        goto label25;

     label10:
        $i13 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i13 == 0 goto label11;

        $i16 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i16 != 1 goto label12;

     label11:
        $r13 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler>;

        virtualinvoke $r13.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r15 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        i2 = virtualinvoke $r15.<com.android.datetimepicker.time.AmPmCirclesView: int getIsTouchingAmOrPm(float,float)>(f0, f1);

        $i14 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if i2 == $i14 goto label25;

        $r14 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r14.<com.android.datetimepicker.time.AmPmCirclesView: void setAmOrPmPressed(int)>(-1);

        $r17 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r17.<com.android.datetimepicker.time.AmPmCirclesView: void invalidate()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm> = -1;

        goto label25;

     label12:
        $i15 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees>;

        if $i15 != -1 goto label13;

        goto label25;

     label13:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove> = 1;

        $r16 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler>;

        virtualinvoke $r16.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        i0 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>(f0, f1, 1, r3);

        if i0 == -1 goto label14;

        $r18 = r3[0];

        $z7 = virtualinvoke $r18.<java.lang.Boolean: boolean booleanValue()>();

        i1 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int reselectSelector(int,boolean,boolean,boolean)>(i0, $z7, 0, 1);

        $i18 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mLastValueSelected>;

        if i1 == $i18 goto label14;

        $r20 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.HapticFeedbackController mHapticFeedbackController>;

        virtualinvoke $r20.<com.android.datetimepicker.HapticFeedbackController: void tryVibrate()>();

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mLastValueSelected> = i1;

        $r19 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        $i17 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        interfaceinvoke $r19.<com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener: void onValueSelected(int,int,boolean)>($i17, i1, 0);

     label14:
        return 1;

     label15:
        $z8 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mInputEnabled>;

        if $z8 != 0 goto label16;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RadialPickerLayout", "Input was disabled, but received ACTION_UP.");

        $r29 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        interfaceinvoke $r29.<com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(3, 1, 0);

        return 1;

     label16:
        $r24 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.os.Handler mHandler>;

        virtualinvoke $r24.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingTouch> = 0;

        $i25 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i25 == 0 goto label17;

        $i29 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if $i29 != 1 goto label19;

     label17:
        $r25 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        i34 = virtualinvoke $r25.<com.android.datetimepicker.time.AmPmCirclesView: int getIsTouchingAmOrPm(float,float)>(f0, f1);

        $r21 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r21.<com.android.datetimepicker.time.AmPmCirclesView: void setAmOrPmPressed(int)>(-1);

        $r22 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r22.<com.android.datetimepicker.time.AmPmCirclesView: void invalidate()>();

        $i24 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        if i34 != $i24 goto label18;

        $r23 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        virtualinvoke $r23.<com.android.datetimepicker.time.AmPmCirclesView: void setAmOrPm(int)>(i34);

        $i28 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getIsCurrentlyAmOrPm()>();

        if $i28 == i34 goto label18;

        $r27 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        $i27 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        interfaceinvoke $r27.<com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(2, $i27, 0);

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>(2, i34);

     label18:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm> = -1;

        goto label25;

     label19:
        $i26 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees>;

        if $i26 == -1 goto label24;

        $z9 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove>;

        i35 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getDegreesFromCoords(float,float,boolean,java.lang.Boolean[])>(f0, f1, $z9, r3);

        if i35 == -1 goto label24;

        $r26 = r3[0];

        $z12 = virtualinvoke $r26.<java.lang.Boolean: boolean booleanValue()>();

        $z11 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove>;

        if $z11 != 0 goto label20;

        $z13 = 1;

        goto label21;

     label20:
        $z13 = 0;

     label21:
        i36 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int reselectSelector(int,boolean,boolean,boolean)>(i35, $z12, $z13, 0);

        $i32 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        if $i32 != 0 goto label23;

        $z10 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z10 != 0 goto label23;

        i37 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getIsCurrentlyAmOrPm()>();

        if i37 != 0 goto label22;

        if i36 != 12 goto label22;

        i36 = 0;

        goto label23;

     label22:
        if i37 != 1 goto label23;

        if i36 == 12 goto label23;

        i36 = i36 + 12;

     label23:
        $i30 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setValueForItem(int,int)>($i30, i36);

        $r28 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        $i31 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        interfaceinvoke $r28.<com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener: void onValueSelected(int,int,boolean)>($i31, i36, 1);

     label24:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove> = 0;

        return 1;

     label25:
        return 0;
    }

    public boolean trySettingInputEnabled(boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        boolean z0, $z1;
        android.view.View $r1;
        byte $b0;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingTouch>;

        if $z1 == 0 goto label1;

        if z0 != 0 goto label1;

        return 0;

     label1:
        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mInputEnabled> = z0;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: android.view.View mGrayBox>;

        if z0 == 0 goto label2;

        $b0 = 4;

        goto label3;

     label2:
        $b0 = 0;

     label3:
        virtualinvoke $r1.<android.view.View: void setVisibility(int)>($b0);

        return 1;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.view.accessibility.AccessibilityNodeInfo r1;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.FrameLayout: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(4096);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(8192);

        return;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.text.format.Time r2, $r5;
        long l0;
        short s1;
        java.lang.String r3;
        int $i2, $i3, $i4;
        boolean $z0, $z1;
        java.util.List $r4, $r7;
        android.content.Context $r6;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i2 != 32 goto label2;

        $r4 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = new android.text.format.Time;

        specialinvoke $r5.<android.text.format.Time: void <init>()>();

        r2 = $r5;

        $i3 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getHours()>();

        r2.<android.text.format.Time: int hour> = $i3;

        $i4 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getMinutes()>();

        r2.<android.text.format.Time: int minute> = $i4;

        l0 = virtualinvoke r2.<android.text.format.Time: long normalize(boolean)>(1);

        s1 = 1;

        $z1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z1 == 0 goto label1;

        s1 = s1 | 128;

     label1:
        $r6 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: android.content.Context getContext()>();

        r3 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>($r6, l0, s1);

        $r7 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3);

        return 1;

     label2:
        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z0;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, i2, i4, i5, i7, i8;
        android.os.Bundle r1;
        byte b1, b3, b6, b9;
        boolean $z1, $z2;
        com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener $r2;

        r0 := @this: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $z1 = specialinvoke r0.<android.widget.FrameLayout: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        if $z1 == 0 goto label01;

        return 1;

     label01:
        b1 = 0;

        if i0 != 4096 goto label02;

        b1 = 1;

        goto label03;

     label02:
        if i0 != 8192 goto label03;

        b1 = -1;

     label03:
        if b1 == 0 goto label11;

        i2 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentlyShowingValue()>();

        b3 = 0;

        i4 = virtualinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int getCurrentItemShowing()>();

        if i4 != 0 goto label04;

        b3 = 30;

        i2 = i2 % 12;

        goto label05;

     label04:
        if i4 != 1 goto label05;

        b3 = 6;

     label05:
        i5 = i2 * b3;

        i7 = staticinvoke <com.android.datetimepicker.time.RadialPickerLayout: int snapOnly30s(int,int)>(i5, b1);

        i8 = i7 / b3;

        b6 = 0;

        if i4 != 0 goto label07;

        $z2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mIs24HourMode>;

        if $z2 == 0 goto label06;

        b9 = 23;

        goto label08;

     label06:
        b9 = 12;

        b6 = 1;

        goto label08;

     label07:
        b9 = 55;

     label08:
        if i8 <= b9 goto label09;

        i8 = b6;

        goto label10;

     label09:
        if i8 >= b6 goto label10;

        i8 = b9;

     label10:
        specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: void setItem(int,int)>(i4, i8);

        $r2 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        interfaceinvoke $r2.<com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(i4, i8, 0);

        return 1;

     label11:
        return 0;
    }

    static int access$000(com.android.datetimepicker.time.RadialPickerLayout)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mIsTouchingAmOrPm>;

        return $i0;
    }

    static com.android.datetimepicker.time.AmPmCirclesView access$100(com.android.datetimepicker.time.RadialPickerLayout)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        com.android.datetimepicker.time.AmPmCirclesView $r1;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.AmPmCirclesView mAmPmCirclesView>;

        return $r1;
    }

    static boolean access$202(com.android.datetimepicker.time.RadialPickerLayout, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        boolean z0;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        z0 := @parameter1: boolean;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: boolean mDoingMove> = z0;

        return z0;
    }

    static int access$300(com.android.datetimepicker.time.RadialPickerLayout)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int $i0;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        $i0 = r0.<com.android.datetimepicker.time.RadialPickerLayout: int mDownDegrees>;

        return $i0;
    }

    static int access$400(com.android.datetimepicker.time.RadialPickerLayout, int, boolean, boolean, boolean)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0, $i1;
        boolean z0, z1, z2;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        $i1 = specialinvoke r0.<com.android.datetimepicker.time.RadialPickerLayout: int reselectSelector(int,boolean,boolean,boolean)>(i0, z0, z1, z2);

        return $i1;
    }

    static int access$502(com.android.datetimepicker.time.RadialPickerLayout, int)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        int i0;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        i0 := @parameter1: int;

        r0.<com.android.datetimepicker.time.RadialPickerLayout: int mLastValueSelected> = i0;

        return i0;
    }

    static com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener access$600(com.android.datetimepicker.time.RadialPickerLayout)
    {
        com.android.datetimepicker.time.RadialPickerLayout r0;
        com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener $r1;

        r0 := @parameter0: com.android.datetimepicker.time.RadialPickerLayout;

        $r1 = r0.<com.android.datetimepicker.time.RadialPickerLayout: com.android.datetimepicker.time.RadialPickerLayout$OnValueSelectedListener mListener>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.android.datetimepicker.time.RadialPickerLayout: int PM> = 1;

        <com.android.datetimepicker.time.RadialPickerLayout: int AM> = 0;

        <com.android.datetimepicker.time.RadialPickerLayout: int ENABLE_PICKER_INDEX> = 3;

        <com.android.datetimepicker.time.RadialPickerLayout: int AMPM_INDEX> = 2;

        <com.android.datetimepicker.time.RadialPickerLayout: int MINUTE_INDEX> = 1;

        <com.android.datetimepicker.time.RadialPickerLayout: int HOUR_INDEX> = 0;

        <com.android.datetimepicker.time.RadialPickerLayout: int MINUTE_VALUE_TO_DEGREES_STEP_SIZE> = 6;

        <com.android.datetimepicker.time.RadialPickerLayout: int HOUR_VALUE_TO_DEGREES_STEP_SIZE> = 30;

        <com.android.datetimepicker.time.RadialPickerLayout: int VISIBLE_DEGREES_STEP_SIZE> = 30;

        <com.android.datetimepicker.time.RadialPickerLayout: java.lang.String TAG> = "RadialPickerLayout";

        return;
    }
}
