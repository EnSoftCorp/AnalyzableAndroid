public final class com.google.common.net.InetAddresses extends java.lang.Object
{
    private static final int IPV4_PART_COUNT;
    private static final int IPV6_PART_COUNT;
    private static final java.net.Inet4Address LOOPBACK4;
    private static final java.net.Inet4Address ANY4;

    private void <init>()
    {
        com.google.common.net.InetAddresses r0;

        r0 := @this: com.google.common.net.InetAddresses;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.net.Inet4Address getInet4Address(byte[])
    {
        byte[] r0;
        java.net.InetAddress r1;
        int $i0, $i1;
        java.lang.Object[] $r2, $r6, $r10;
        boolean $z0, $z1;
        java.lang.Integer $r3;
        java.net.Inet4Address $r4;
        java.net.UnknownHostException $r5, $r9, r14;
        java.lang.String $r7, $r8, $r12, $r13;
        java.lang.IllegalArgumentException $r11;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $i1 = lengthof r0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r2[0] = $r3;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Byte array has invalid length for an IPv4 address: %s != 4.", $r2);

     label3:
        r1 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r0);

        $z1 = r1 instanceof java.net.Inet4Address;

        if $z1 != 0 goto label4;

        $r5 = new java.net.UnknownHostException;

        $r6 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6[0] = $r8;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is not an IPv4 address.", $r6);

        specialinvoke $r5.<java.net.UnknownHostException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label4:
        $r4 = (java.net.Inet4Address) r1;

     label5:
        return $r4;

     label6:
        $r9 := @caughtexception;

        r14 = $r9;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = newarray (java.lang.Object)[1];

        $r13 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        $r10[0] = $r13;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host address \'%s\' is not a valid IPv4 address.", $r10);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r14);

        throw $r11;

        catch java.net.UnknownHostException from label3 to label5 with label6;
    }

    public static java.net.InetAddress forString(java.lang.String)
    {
        java.lang.String r0, $r6, $r10;
        byte[] r1;
        java.net.UnknownHostException r2, $r7;
        java.net.InetAddress $r3;
        java.lang.IllegalArgumentException $r4, $r8;
        java.lang.Object[] $r5, $r9;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>(r0);

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = r0;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is not an IP string literal.", $r5);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label2:
        return $r3;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is extremely broken.", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, r2);

        throw $r8;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    public static boolean isInetAddress(java.lang.String)
    {
        java.lang.String r0;
        byte[] $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>(r0);

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static byte[] ipStringToBytes(java.lang.String)
    {
        java.lang.String r0;
        boolean z0, z1;
        int i0, $i2, $i3;
        char c1;
        byte[] $r1, $r2;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        z1 = 0;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label6;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 != 46 goto label2;

        z1 = 1;

        goto label5;

     label2:
        if c1 != 58 goto label4;

        if z1 == 0 goto label3;

        return null;

     label3:
        z0 = 1;

        goto label5;

     label4:
        $i3 = staticinvoke <java.lang.Character: int digit(char,int)>(c1, 16);

        if $i3 != -1 goto label5;

        return null;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        if z0 == 0 goto label8;

        if z1 == 0 goto label7;

        r0 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String convertDottedQuadToHex(java.lang.String)>(r0);

        if r0 != null goto label7;

        return null;

     label7:
        $r2 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV6(java.lang.String)>(r0);

        return $r2;

     label8:
        if z1 == 0 goto label9;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>(r0);

        return $r1;

     label9:
        return null;
    }

    private static byte[] textToNumericFormatV4(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1;
        byte[] r2;
        int i0, $i1, $i2;
        byte $b3;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\.", 5);

        $i1 = lengthof r1;

        if $i1 == 4 goto label1;

        return null;

     label1:
        r2 = newarray (byte)[4];

     label2:
        i0 = 0;

     label3:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label4;

        $r3 = r1[i0];

        $b3 = staticinvoke <com.google.common.net.InetAddresses: byte parseOctet(java.lang.String)>($r3);

        r2[i0] = $b3;

        i0 = i0 + 1;

        goto label3;

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        return null;

     label6:
        return r2;

        catch java.lang.NumberFormatException from label2 to label4 with label5;
    }

    private static byte[] textToNumericFormatV6(java.lang.String)
    {
        java.lang.String r0, $r4, $r7, $r9, $r10, $r12;
        java.lang.String[] r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23;
        java.nio.ByteBuffer r2;
        byte[] $r3;
        short $s12, $s13;
        java.lang.NumberFormatException $r11;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 10);

        $i5 = lengthof r1;

        if $i5 < 3 goto label01;

        $i6 = lengthof r1;

        if $i6 <= 9 goto label02;

     label01:
        return null;

     label02:
        i0 = -1;

        i1 = 1;

     label03:
        $i7 = lengthof r1;

        $i8 = $i7 - 1;

        if i1 >= $i8 goto label06;

        $r12 = r1[i1];

        $i19 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i19 != 0 goto label05;

        if i0 < 0 goto label04;

        return null;

     label04:
        i0 = i1;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        if i0 < 0 goto label08;

        i21 = i0;

        $i14 = lengthof r1;

        $i15 = $i14 - i0;

        i2 = $i15 - 1;

        $r9 = r1[0];

        $i17 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i17 != 0 goto label07;

        i21 = i21 + -1;

        if i21 == 0 goto label07;

        return null;

     label07:
        $i16 = lengthof r1;

        $i18 = $i16 - 1;

        $r10 = r1[$i18];

        $i20 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i20 != 0 goto label09;

        i2 = i2 + -1;

        if i2 == 0 goto label09;

        return null;

     label08:
        i21 = lengthof r1;

        i2 = 0;

     label09:
        $i9 = i21 + i2;

        i3 = 8 - $i9;

        if i0 < 0 goto label10;

        if i3 < 1 goto label11;

        goto label12;

     label10:
        if i3 == 0 goto label12;

     label11:
        return null;

     label12:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

     label13:
        i4 = 0;

     label14:
        if i4 >= i21 goto label15;

        $r7 = r1[i4];

        $s13 = staticinvoke <com.google.common.net.InetAddresses: short parseHextet(java.lang.String)>($r7);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s13);

        i4 = i4 + 1;

        goto label14;

     label15:
        i22 = 0;

     label16:
        if i22 >= i3 goto label17;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(0);

        i22 = i22 + 1;

        goto label16;

     label17:
        i23 = i2;

     label18:
        if i23 <= 0 goto label19;

        $i11 = lengthof r1;

        $i10 = $i11 - i23;

        $r4 = r1[$i10];

        $s12 = staticinvoke <com.google.common.net.InetAddresses: short parseHextet(java.lang.String)>($r4);

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>($s12);

        i23 = i23 + -1;

        goto label18;

     label19:
        goto label21;

     label20:
        $r11 := @caughtexception;

        return null;

     label21:
        $r3 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;

        catch java.lang.NumberFormatException from label13 to label19 with label20;
    }

    private static java.lang.String convertDottedQuadToHex(java.lang.String)
    {
        java.lang.String r0, r1, r2, r4, r5, $r11;
        int i0, $i1, $i2, $i6, $i8, $i13, $i14;
        byte[] r3;
        byte $b3, $b5, $b10, $b12;
        short $s4, $s7, $s9, $s11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(58);

        $i1 = i0 + 1;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = i0 + 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        r3 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>(r2);

        if r3 != null goto label1;

        return null;

     label1:
        $b3 = r3[0];

        $s4 = $b3 & 255;

        $i6 = $s4 << 8;

        $b5 = r3[1];

        $s7 = $b5 & 255;

        $i8 = $i6 | $s7;

        r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $b10 = r3[2];

        $s9 = $b10 & 255;

        $i14 = $s9 << 8;

        $b12 = r3[3];

        $s11 = $b12 & 255;

        $i13 = $i14 | $s11;

        r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i13);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static byte parseOctet(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2;
        java.lang.NumberFormatException $r1;
        boolean $z0;
        byte $b1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        if i0 > 255 goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $z0 == 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 <= 1 goto label2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label2:
        $b1 = (byte) i0;

        return $b1;
    }

    private static short parseHextet(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        short $s1;
        java.lang.NumberFormatException $r1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16);

        if i0 <= 65535 goto label1;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label1:
        $s1 = (short) i0;

        return $s1;
    }

    public static java.lang.String toAddrString(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] r1;
        int[] r2;
        int i0, $i1, $i2, $i3, $i4, $i7;
        boolean $z0, $z1;
        java.lang.String $r4, $r5;
        byte $b5, $b6;

        r0 := @parameter0: java.net.InetAddress;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r5;

     label1:
        $z1 = r0 instanceof java.net.Inet6Address;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1);

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        r2 = newarray (int)[8];

        i0 = 0;

     label2:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label3;

        $i2 = 2 * i0;

        $b6 = r1[$i2];

        $i3 = 2 * i0;

        $i4 = $i3 + 1;

        $b5 = r1[$i4];

        $i7 = staticinvoke <com.google.common.primitives.Ints: int fromBytes(byte,byte,byte,byte)>(0, 0, $b6, $b5);

        r2[i0] = $i7;

        i0 = i0 + 1;

        goto label2;

     label3:
        staticinvoke <com.google.common.net.InetAddresses: void compressLongestRunOfZeroes(int[])>(r2);

        $r4 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String hextetsToIPv6String(int[])>(r2);

        return $r4;
    }

    private static void compressLongestRunOfZeroes(int[])
    {
        int[] r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @parameter0: int[];

        i0 = -1;

        i1 = -1;

        i2 = -1;

        i3 = 0;

     label1:
        $i5 = lengthof r0;

        $i6 = $i5 + 1;

        if i3 >= $i6 goto label5;

        $i8 = lengthof r0;

        if i3 >= $i8 goto label2;

        $i9 = r0[i3];

        if $i9 != 0 goto label2;

        if i2 >= 0 goto label4;

        i2 = i3;

        goto label4;

     label2:
        if i2 < 0 goto label4;

        i4 = i3 - i2;

        if i4 <= i1 goto label3;

        i0 = i2;

        i1 = i4;

     label3:
        i2 = -1;

     label4:
        i3 = i3 + 1;

        goto label1;

     label5:
        if i1 < 2 goto label6;

        $i7 = i0 + i1;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, i0, $i7, -1);

     label6:
        return;
    }

    private static java.lang.String hextetsToIPv6String(int[])
    {
        int[] r0;
        java.lang.StringBuilder r1, $r2;
        boolean z0, z1, $z2;
        int i0, $i1, $i2, $i3;
        java.lang.String $r3, $r5;

        r0 := @parameter0: int[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(39);

        r1 = $r2;

        z0 = 0;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label8;

        $i2 = r0[i0];

        if $i2 < 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z1 = $z2;

        if z1 == 0 goto label5;

        if z0 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label4:
        $i3 = r0[i0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        goto label7;

     label5:
        if i0 == 0 goto label6;

        if z0 == 0 goto label7;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::");

     label7:
        z0 = z1;

        i0 = i0 + 1;

        goto label1;

     label8:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String toUriString(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        boolean $z0;
        java.lang.String $r1, $r4, $r7;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label1:
        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        return $r1;
    }

    public static java.net.InetAddress forUriString(java.lang.String)
    {
        java.lang.String r0, $r6, $r7, $r13;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r1, $r8, $r14;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r9, $r10, $r11, $r12;
        java.net.InetAddress r15, r16;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "host string is empty");

     label03:
        r15 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>(r0);

        $z0 = r15 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label05;

     label04:
        return r15;

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

     label07:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z2 != 0 goto label09;

     label08:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid address: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r1;

     label09:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i2 - 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

        r16 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>($r7);

        $z3 = r16 instanceof java.net.Inet6Address;

        if $z3 == 0 goto label10;

        return r16;

     label10:
        $r8 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid address: \"");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

        catch java.lang.IllegalArgumentException from label03 to label04 with label06;
    }

    public static boolean isUriInetAddress(java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forUriString(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static boolean isCompatIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] r1;
        boolean $z0;
        byte $b0, $b1, $b2, $b3, $b4;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = virtualinvoke r0.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = r1[12];

        if $b0 != 0 goto label3;

        $b1 = r1[13];

        if $b1 != 0 goto label3;

        $b2 = r1[14];

        if $b2 != 0 goto label3;

        $b3 = r1[15];

        if $b3 == 0 goto label2;

        $b4 = r1[15];

        if $b4 != 1 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        byte[] $r3, $r4;
        java.net.Inet4Address $r5;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not IPv4-compatible.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 12, 16);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean is6to4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] r1;
        byte $b0, $b1;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = r1[0];

        if $b0 != 32 goto label1;

        $b1 = r1[1];

        if $b1 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        byte[] $r3, $r4;
        java.net.Inet4Address $r5;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not a 6to4 address.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 2, 6);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean isTeredoAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] r1;
        byte $b0, $b1, $b2, $b3;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = r1[0];

        if $b0 != 32 goto label1;

        $b1 = r1[1];

        if $b1 != 1 goto label1;

        $b2 = r1[2];

        if $b2 != 0 goto label1;

        $b3 = r1[3];

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] r1, r3, $r6;
        java.net.Inet4Address r2, r10;
        int i0, i1, i2, $i6;
        boolean $z0;
        java.lang.Object[] $r4;
        java.lang.String $r5;
        com.google.common.io.ByteArrayDataInput $r7, $r8;
        short $s3, $s4, $s5;
        com.google.common.net.InetAddresses$TeredoInfo $r9;
        byte $b7, $b8, $b9;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r4[0] = $r5;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not a Teredo address.", $r4);

        r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r6 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>(r1, 4, 8);

        r2 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r6);

        $r7 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>(r1, 8);

        $s3 = interfaceinvoke $r7.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        i0 = $s3 & 65535;

        $r8 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>(r1, 10);

        $s5 = interfaceinvoke $r8.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        $s4 = $s5 ^ -1;

        i1 = $s4 & 65535;

        r3 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>(r1, 12, 16);

        i2 = 0;

     label1:
        $i6 = lengthof r3;

        if i2 >= $i6 goto label2;

        $b8 = r3[i2];

        $b7 = $b8 ^ -1;

        $b9 = (byte) $b7;

        r3[i2] = $b9;

        i2 = i2 + 1;

        goto label1;

     label2:
        r10 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>(r3);

        $r9 = new com.google.common.net.InetAddresses$TeredoInfo;

        specialinvoke $r9.<com.google.common.net.InetAddresses$TeredoInfo: void <init>(java.net.Inet4Address,java.net.Inet4Address,int,int)>(r2, r10, i1, i0);

        return $r9;
    }

    public static boolean isIsatapAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] r1;
        boolean $z0, $z1;
        byte $b0, $b1, $b2, $b3, $b4;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = r1[8];

        $b1 = $b0 | 3;

        if $b1 == 3 goto label2;

        return 0;

     label2:
        $b2 = r1[9];

        if $b2 != 0 goto label3;

        $b3 = r1[10];

        if $b3 != 94 goto label3;

        $b4 = r1[11];

        if $b4 != -2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        byte[] $r3, $r4;
        java.net.Inet4Address $r5;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isIsatapAddress(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not an ISATAP address.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 12, 16);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;
        com.google.common.net.InetAddresses$TeredoInfo $r5;
        java.net.Inet4Address $r6, $r7, $r8;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)>(r0);

        return $r8;

     label1:
        $z1 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)>(r0);

        return $r7;

     label2:
        $z2 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z2 == 0 goto label3;

        $r5 = staticinvoke <com.google.common.net.InetAddresses: com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)>(r0);

        $r6 = virtualinvoke $r5.<com.google.common.net.InetAddresses$TeredoInfo: java.net.Inet4Address getClient()>();

        return $r6;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String toAddrString(java.net.InetAddress)>(r0);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' has no embedded IPv4 address.", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public static boolean isMappedIPv4Address(java.lang.String)
    {
        java.lang.String r0;
        byte[] r1;
        int i0, $i1, i4;
        byte $b2, $b3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] ipStringToBytes(java.lang.String)>(r0);

        if r1 == null goto label7;

        $i1 = lengthof r1;

        if $i1 != 16 goto label7;

        i0 = 0;

     label1:
        if i0 >= 10 goto label3;

        $b3 = r1[i0];

        if $b3 == 0 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        i4 = 10;

     label4:
        if i4 >= 12 goto label6;

        $b2 = r1[i4];

        if $b2 == -1 goto label5;

        return 0;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;
    }

    public static java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] r1, $r2, $r4;
        boolean z0, $z1, $z2;
        int i0, i2, $i3, i8;
        java.nio.ByteBuffer $r3;
        java.net.Inet4Address $r5, $r6, $r7, $r8, $r9;
        byte $b4, $b5, $b6;
        java.net.Inet6Address r10;
        long l7;

        r0 := @parameter0: java.net.InetAddress;

        $z1 = r0 instanceof java.net.Inet4Address;

        if $z1 == 0 goto label1;

        $r9 = (java.net.Inet4Address) r0;

        return $r9;

     label1:
        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        z0 = 1;

        i0 = 0;

     label2:
        if i0 >= 15 goto label4;

        $b6 = r1[i0];

        if $b6 == 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        if z0 == 0 goto label5;

        $b5 = r1[15];

        if $b5 != 1 goto label5;

        $r8 = <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4>;

        return $r8;

     label5:
        if z0 == 0 goto label6;

        $b4 = r1[15];

        if $b4 != 0 goto label6;

        $r7 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return $r7;

     label6:
        r10 = (java.net.Inet6Address) r0;

        $z2 = staticinvoke <com.google.common.net.InetAddresses: boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)>(r10);

        if $z2 == 0 goto label7;

        $r6 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)>(r10);

        $i3 = virtualinvoke $r6.<java.net.Inet4Address: int hashCode()>();

        l7 = (long) $i3;

        goto label8;

     label7:
        $r2 = virtualinvoke r10.<java.net.Inet6Address: byte[] getAddress()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, 0, 8);

        l7 = virtualinvoke $r3.<java.nio.ByteBuffer: long getLong()>();

     label8:
        i2 = staticinvoke <com.google.common.net.InetAddresses: int hash64To32(long)>(l7);

        i8 = i2 | -536870912;

        if i8 != -1 goto label9;

        i8 = -2;

     label9:
        $r4 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>(i8);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    static int hash64To32(long)
    {
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, l8, l9, l10, l11, l12, l13;
        int $i7;

        l0 := @parameter0: long;

        $l2 = l0 ^ -1L;

        $l1 = l0 << 18;

        l8 = $l2 + $l1;

        $l3 = l8 >>> 31;

        l9 = l8 ^ $l3;

        l10 = l9 * 21L;

        $l4 = l10 >>> 11;

        l11 = l10 ^ $l4;

        $l5 = l11 << 6;

        l12 = l11 + $l5;

        $l6 = l12 >>> 22;

        l13 = l12 ^ $l6;

        $i7 = (int) l13;

        return $i7;
    }

    public static int coerceToInteger(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        java.net.Inet4Address $r1;
        byte[] $r2;
        com.google.common.io.ByteArrayDataInput $r3;
        int $i0;

        r0 := @parameter0: java.net.InetAddress;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)>(r0);

        $r2 = virtualinvoke $r1.<java.net.Inet4Address: byte[] getAddress()>();

        $r3 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[])>($r2);

        $i0 = interfaceinvoke $r3.<com.google.common.io.ByteArrayDataInput: int readInt()>();

        return $i0;
    }

    public static java.net.Inet4Address fromInteger(int)
    {
        int i0;
        byte[] $r0;
        java.net.Inet4Address $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>(i0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r0);

        return $r1;
    }

    public static java.net.InetAddress fromLittleEndianByteArray(byte[]) throws java.net.UnknownHostException
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.net.InetAddress $r2;
        byte $b6;

        r0 := @parameter0: byte[];

        $i1 = lengthof r0;

        r1 = newarray (byte)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $i3 = lengthof r0;

        $i4 = $i3 - i0;

        $i5 = $i4 - 1;

        $b6 = r0[$i5];

        r1[i0] = $b6;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

        return $r2;
    }

    public static java.net.InetAddress increment(java.net.InetAddress)
    {
        java.net.InetAddress r0, $r4;
        byte[] r1;
        int i0, $i1, $i3;
        java.net.UnknownHostException r2, $r5;
        java.lang.Object[] $r3;
        byte $b2, $b4, $b5;
        boolean $z0;
        java.lang.AssertionError $r6;

        r0 := @parameter0: java.net.InetAddress;

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        $i1 = lengthof r1;

        i0 = $i1 - 1;

     label1:
        if i0 < 0 goto label2;

        $b5 = r1[i0];

        if $b5 != -1 goto label2;

        r1[i0] = 0;

        i0 = i0 + -1;

        goto label1;

     label2:
        if i0 < 0 goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Incrementing %s would wrap.", $r3);

        $b2 = r1[i0];

        $i3 = $b2 + 1;

        $b4 = (byte) $i3;

        r1[i0] = $b4;

     label5:
        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

     label6:
        return $r4;

     label7:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r6;

        catch java.net.UnknownHostException from label5 to label6 with label7;
    }

    public static boolean isMaximum(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] r1;
        int i0, $i1;
        byte $b2;

        r0 := @parameter0: java.net.InetAddress;

        r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $b2 = r1[i0];

        if $b2 == -1 goto label2;

        return 0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static byte[] copyOfRange(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i3 = lengthof r0;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i3);

        $i4 = i1 - i0;

        r1 = newarray (byte)[$i4];

        $i5 = i2 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i5);

        return r1;
    }

    static java.net.Inet4Address access$000()
    {
        java.net.Inet4Address $r0;

        $r0 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return $r0;
    }

    static void <clinit>()
    {
        java.net.InetAddress $r0, $r2;
        java.net.Inet4Address $r1, $r3;

        <com.google.common.net.InetAddresses: int IPV6_PART_COUNT> = 8;

        <com.google.common.net.InetAddresses: int IPV4_PART_COUNT> = 4;

        $r0 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("127.0.0.1");

        $r1 = (java.net.Inet4Address) $r0;

        <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4> = $r1;

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("0.0.0.0");

        $r3 = (java.net.Inet4Address) $r2;

        <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4> = $r3;

        return;
    }
}
