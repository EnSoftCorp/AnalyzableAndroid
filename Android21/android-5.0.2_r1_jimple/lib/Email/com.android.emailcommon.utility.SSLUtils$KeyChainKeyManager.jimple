public class com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager extends com.android.emailcommon.utility.SSLUtils$StubKeyManager
{
    private final java.lang.String mClientAlias;
    private final java.security.cert.X509Certificate[] mCertificateChain;
    private final java.security.PrivateKey mPrivateKey;

    public static com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager fromAlias(android.content.Context, java.lang.String) throws java.security.cert.CertificateException
    {
        android.content.Context r0;
        java.lang.String r1;
        java.security.cert.X509Certificate[] r2;
        android.security.KeyChainException r3, r4, $r7, $r11;
        java.security.cert.CertificateException $r5, $r8, $r10, $r12, $r14;
        com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager $r6;
        java.lang.InterruptedException $r9, $r13, r15, r17;
        java.security.PrivateKey r16;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label01:
        r2 = staticinvoke <android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>(r0, r1);

     label02:
        goto label05;

     label03:
        $r7 := @caughtexception;

        r3 = $r7;

        staticinvoke <com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: void logError(java.lang.String,java.lang.String,java.lang.Exception)>(r1, "certificate chain", r3);

        $r8 = new java.security.cert.CertificateException;

        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label04:
        $r9 := @caughtexception;

        r15 = $r9;

        staticinvoke <com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: void logError(java.lang.String,java.lang.String,java.lang.Exception)>(r1, "certificate chain", r15);

        $r10 = new java.security.cert.CertificateException;

        specialinvoke $r10.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r15);

        throw $r10;

     label05:
        r16 = staticinvoke <android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)>(r0, r1);

     label06:
        goto label09;

     label07:
        $r11 := @caughtexception;

        r4 = $r11;

        staticinvoke <com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: void logError(java.lang.String,java.lang.String,java.lang.Exception)>(r1, "private key", r4);

        $r12 = new java.security.cert.CertificateException;

        specialinvoke $r12.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r4);

        throw $r12;

     label08:
        $r13 := @caughtexception;

        r17 = $r13;

        staticinvoke <com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: void logError(java.lang.String,java.lang.String,java.lang.Exception)>(r1, "private key", r17);

        $r14 = new java.security.cert.CertificateException;

        specialinvoke $r14.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r17);

        throw $r14;

     label09:
        if r2 == null goto label10;

        if r16 != null goto label11;

     label10:
        $r5 = new java.security.cert.CertificateException;

        specialinvoke $r5.<java.security.cert.CertificateException: void <init>(java.lang.String)>("Can\'t access certificate from keystore");

        throw $r5;

     label11:
        $r6 = new com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager;

        specialinvoke $r6.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: void <init>(java.lang.String,java.security.cert.X509Certificate[],java.security.PrivateKey)>(r1, r2, r16);

        return $r6;

        catch android.security.KeyChainException from label01 to label02 with label03;
        catch java.lang.InterruptedException from label01 to label02 with label04;
        catch android.security.KeyChainException from label05 to label06 with label07;
        catch java.lang.InterruptedException from label05 to label06 with label08;
    }

    private static void logError(java.lang.String, java.lang.String, java.lang.Exception)
    {
        java.lang.String r0, r1, $r8;
        java.lang.Exception r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.Object[] $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[0];

        staticinvoke <com.android.mail.utils.LogUtils: int e(java.lang.String,java.lang.String,java.lang.Object[])>("Email.Ssl", $r8, $r9);

        return;
    }

    private void <init>(java.lang.String, java.security.cert.X509Certificate[], java.security.PrivateKey)
    {
        com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager r0;
        java.lang.String r1;
        java.security.cert.X509Certificate[] r2;
        java.security.PrivateKey r3;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.cert.X509Certificate[];

        r3 := @parameter2: java.security.PrivateKey;

        specialinvoke r0.<com.android.emailcommon.utility.SSLUtils$StubKeyManager: void <init>(com.android.emailcommon.utility.SSLUtils$1)>(null);

        r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String mClientAlias> = r1;

        r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] mCertificateChain> = r2;

        r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey mPrivateKey> = r3;

        return;
    }

    public java.lang.String chooseClientAlias(java.lang.String[], java.security.Principal[], java.net.Socket)
    {
        com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager r0;
        java.lang.String[] r1;
        java.security.Principal[] r2;
        java.net.Socket r3;
        java.lang.String $r4;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: java.security.Principal[];

        r3 := @parameter2: java.net.Socket;

        $r4 = r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.lang.String mClientAlias>;

        return $r4;
    }

    public java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)
    {
        com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager r0;
        java.lang.String r1;
        java.security.cert.X509Certificate[] $r2;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.cert.X509Certificate[] mCertificateChain>;

        return $r2;
    }

    public java.security.PrivateKey getPrivateKey(java.lang.String)
    {
        com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager r0;
        java.lang.String r1;
        java.security.PrivateKey $r2;

        r0 := @this: com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.emailcommon.utility.SSLUtils$KeyChainKeyManager: java.security.PrivateKey mPrivateKey>;

        return $r2;
    }
}
