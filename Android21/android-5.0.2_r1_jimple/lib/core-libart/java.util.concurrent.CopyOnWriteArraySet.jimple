public class java.util.concurrent.CopyOnWriteArraySet extends java.util.AbstractSet implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.CopyOnWriteArrayList al;

    public void <init>()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r1 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.Collection r1;
        java.util.concurrent.CopyOnWriteArrayList $r2, $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        $r2 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al> = $r2;

        $r3 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        virtualinvoke $r3.<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>(r1);

        return;
    }

    public int size()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>();

        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.lang.Object r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.lang.Object[] r1, $r3;
        java.util.concurrent.CopyOnWriteArrayList $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public void clear()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void clear()>();

        return;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.lang.Object r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.lang.Object r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean addIfAbsent(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.Collection r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.Collection r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: int addAllAbsent(java.util.Collection)>(r1);

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.Collection r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.Collection r1;
        java.util.concurrent.CopyOnWriteArrayList $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.util.concurrent.CopyOnWriteArrayList $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArraySet r0;
        java.lang.Object r1, r6, $r9;
        java.util.Set r2, $r7;
        java.util.Iterator r3;
        java.lang.Object[] r4;
        int i0, i1, i2;
        boolean[] r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.concurrent.CopyOnWriteArrayList $r8;

        r0 := @this: java.util.concurrent.CopyOnWriteArraySet;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof java.util.Set;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r7 = (java.util.Set) r1;

        r2 = (java.util.Set) $r7;

        r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        $r8 = r0.<java.util.concurrent.CopyOnWriteArraySet: java.util.concurrent.CopyOnWriteArrayList al>;

        r4 = virtualinvoke $r8.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>();

        i0 = lengthof r4;

        r5 = newarray (boolean)[i0];

        i1 = 0;

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        i1 = i1 + 1;

        if i1 <= i0 goto label04;

        return 0;

     label04:
        r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        i2 = 0;

     label05:
        if i2 >= i0 goto label07;

        $z3 = r5[i2];

        if $z3 != 0 goto label06;

        $r9 = r4[i2];

        $z4 = staticinvoke <java.util.concurrent.CopyOnWriteArraySet: boolean eq(java.lang.Object,java.lang.Object)>(r6, $r9);

        if $z4 == 0 goto label06;

        r5[i2] = 1;

        goto label03;

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        return 0;

     label08:
        if i1 != i0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        return $z2;
    }

    private static boolean eq(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label2;

        if r1 != null goto label1;

        $z0 = 1;

        goto label3;

     label1:
        $z0 = 0;

        goto label3;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

     label3:
        return $z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.CopyOnWriteArraySet: long serialVersionUID> = 5457747651344034263L;

        return;
    }
}
