public class java.net.Socket extends java.lang.Object implements java.io.Closeable
{
    private static java.net.SocketImplFactory factory;
    final java.net.SocketImpl impl;
    private final java.net.Proxy proxy;
    volatile boolean isCreated;
    private boolean isBound;
    private boolean isConnected;
    private boolean isClosed;
    private boolean isInputShutdown;
    private boolean isOutputShutdown;
    private java.net.InetAddress localAddress;
    private final java.lang.Object connectLock;

    public void <init>()
    {
        java.net.Socket r0;
        java.net.InetAddress $r1;
        java.net.SocketImplFactory $r3, $r5;
        java.net.SocketImpl $r4;
        java.lang.Object r6;
        java.net.PlainSocketImpl r7;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: boolean isCreated> = 0;

        r0.<java.net.Socket: boolean isBound> = 0;

        r0.<java.net.Socket: boolean isConnected> = 0;

        r0.<java.net.Socket: boolean isClosed> = 0;

        r0.<java.net.Socket: boolean isInputShutdown> = 0;

        r0.<java.net.Socket: boolean isOutputShutdown> = 0;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r1;

        r6 = new java.lang.Object;

        specialinvoke r6.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: java.lang.Object connectLock> = r6;

        $r3 = <java.net.Socket: java.net.SocketImplFactory factory>;

        if $r3 == null goto label1;

        $r5 = <java.net.Socket: java.net.SocketImplFactory factory>;

        $r4 = interfaceinvoke $r5.<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>();

        goto label2;

     label1:
        r7 = new java.net.PlainSocketImpl;

        $r4 = r7;

        specialinvoke r7.<java.net.PlainSocketImpl: void <init>()>();

     label2:
        r0.<java.net.Socket: java.net.SocketImpl impl> = $r4;

        r0.<java.net.Socket: java.net.Proxy proxy> = null;

        return;
    }

    public void <init>(java.net.Proxy)
    {
        java.net.Socket r0;
        java.net.Proxy r1;
        java.net.InetAddress $r2;
        java.lang.StringBuilder $r6, $r7, r15;
        java.lang.String $r8;
        java.net.Proxy$Type $r9, $r10;
        java.net.SocketImplFactory $r11, $r13;
        java.net.SocketImpl $r12;
        java.lang.Object r14;
        java.lang.IllegalArgumentException r16;
        java.net.PlainSocketImpl r17;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.Proxy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: boolean isCreated> = 0;

        r0.<java.net.Socket: boolean isBound> = 0;

        r0.<java.net.Socket: boolean isConnected> = 0;

        r0.<java.net.Socket: boolean isClosed> = 0;

        r0.<java.net.Socket: boolean isInputShutdown> = 0;

        r0.<java.net.Socket: boolean isOutputShutdown> = 0;

        $r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r2;

        r14 = new java.lang.Object;

        specialinvoke r14.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: java.lang.Object connectLock> = r14;

        if r1 == null goto label1;

        $r9 = virtualinvoke r1.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r10 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r9 != $r10 goto label2;

     label1:
        r16 = new java.lang.IllegalArgumentException;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid proxy: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r16;

     label2:
        r0.<java.net.Socket: java.net.Proxy proxy> = r1;

        $r11 = <java.net.Socket: java.net.SocketImplFactory factory>;

        if $r11 == null goto label3;

        $r13 = <java.net.Socket: java.net.SocketImplFactory factory>;

        $r12 = interfaceinvoke $r13.<java.net.SocketImplFactory: java.net.SocketImpl createSocketImpl()>();

        goto label4;

     label3:
        r17 = new java.net.PlainSocketImpl;

        $r12 = r17;

        specialinvoke r17.<java.net.PlainSocketImpl: void <init>(java.net.Proxy)>(r1);

     label4:
        r0.<java.net.Socket: java.net.SocketImpl impl> = $r12;

        return;
    }

    private void tryAllAddresses(java.lang.String, int, java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.net.InetAddress r2, r4, r7;
        boolean z0;
        java.net.InetAddress[] r3;
        java.io.IOException $r6;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>(r1);

        i2 = 0;

     label1:
        $i3 = lengthof r3;

        $i4 = $i3 - 1;

        if i2 >= $i4 goto label5;

        r4 = r3[i2];

     label2:
        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r4, i0);

        specialinvoke r0.<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>(r4, i0, r2, i1, z0);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        i2 = i2 + 1;

        goto label1;

     label5:
        $i5 = lengthof r3;

        $i6 = $i5 - 1;

        r7 = r3[$i6];

        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r7, i0);

        specialinvoke r0.<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>(r7, i0, r2, i1, z0);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public void <init>(java.lang.String, int) throws java.net.UnknownHostException, java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, null, 0);

        return;
    }

    public void <init>(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1;
        int i0, i1;
        java.net.InetAddress r2;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        specialinvoke r0.<java.net.Socket: void tryAllAddresses(java.lang.String,int,java.net.InetAddress,int,boolean)>(r1, i0, r2, i1, 1);

        return;
    }

    public void <init>(java.lang.String, int, boolean) throws java.io.IOException
    {
        java.net.Socket r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        specialinvoke r0.<java.net.Socket: void tryAllAddresses(java.lang.String,int,java.net.InetAddress,int,boolean)>(r1, i0, null, 0, z0);

        return;
    }

    public void <init>(java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r1, i0);

        specialinvoke r0.<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>(r1, i0, null, 0, 1);

        return;
    }

    public void <init>(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.InetAddress r1, r2;
        int i0, i1;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r1, i0);

        specialinvoke r0.<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>(r1, i0, r2, i1, 1);

        return;
    }

    public void <init>(java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.InetAddress r1;
        int i0;
        boolean z0;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r1, i0);

        specialinvoke r0.<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)>(r1, i0, null, 0, z0);

        return;
    }

    protected void <init>(java.net.SocketImpl) throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl r1;
        java.net.InetAddress $r2;
        java.lang.Object $r3;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.SocketImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: boolean isCreated> = 0;

        r0.<java.net.Socket: boolean isBound> = 0;

        r0.<java.net.Socket: boolean isConnected> = 0;

        r0.<java.net.Socket: boolean isClosed> = 0;

        r0.<java.net.Socket: boolean isInputShutdown> = 0;

        r0.<java.net.Socket: boolean isOutputShutdown> = 0;

        $r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.net.Socket: java.lang.Object connectLock> = $r3;

        r0.<java.net.Socket: java.net.SocketImpl impl> = r1;

        r0.<java.net.Socket: java.net.Proxy proxy> = null;

        return;
    }

    private void checkDestination(java.net.InetAddress, int)
    {
        java.net.Socket r0;
        java.net.InetAddress r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 <= 65535 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.InetAddress $r1;
        java.net.SocketImpl $r2;

        r0 := @this: java.net.Socket;

        r0.<java.net.Socket: boolean isClosed> = 1;

        r0.<java.net.Socket: boolean isConnected> = 0;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r1;

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r2.<java.net.SocketImpl: void close()>();

        return;
    }

    public void onClose()
    {
        java.net.Socket r0;
        java.net.InetAddress $r1;
        java.net.SocketImpl $r2;

        r0 := @this: java.net.Socket;

        r0.<java.net.Socket: boolean isClosed> = 1;

        r0.<java.net.Socket: boolean isConnected> = 0;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r1;

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r2.<java.net.SocketImpl: void onClose()>();

        return;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.net.InetAddress $r2;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.net.InetAddress getInetAddress()>();

        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.io.InputStream $r2;
        java.net.SocketException $r3;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(0);

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isInputShutdown()>();

        if $z0 == 0 goto label1;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket input is shutdown");

        throw $r3;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.io.InputStream getInputStream()>();

        return $r2;
    }

    public boolean getKeepAlive() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(8);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.net.Socket r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.Socket;

        $r1 = r0.<java.net.Socket: java.net.InetAddress localAddress>;

        return $r1;
    }

    public int getLocalPort()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        int $i0;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isBound()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $i0 = virtualinvoke $r1.<java.net.SocketImpl: int getLocalPort()>();

        return $i0;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.io.OutputStream $r2;
        java.net.SocketException $r3;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(0);

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isOutputShutdown()>();

        if $z0 == 0 goto label1;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Socket output is shutdown");

        throw $r3;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.io.OutputStream getOutputStream()>();

        return $r2;
    }

    public int getPort()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        int $i0;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $i0 = virtualinvoke $r1.<java.net.SocketImpl: int getPort()>();

        return $i0;
    }

    public int getSoLinger() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.lang.Object r1;
        java.net.SocketImpl $r2;
        boolean $z0;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        r1 = virtualinvoke $r2.<java.net.SocketImpl: java.lang.Object getOption(int)>(128);

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Integer) r1;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return -1;
    }

    public synchronized int getReceiveBufferSize() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4098);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public synchronized int getSendBufferSize() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4097);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public synchronized int getSoTimeout() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4102);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public boolean getTcpNoDelay() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(1);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setKeepAlive(boolean) throws java.net.SocketException
    {
        java.net.Socket r0;
        boolean z0;
        java.net.SocketImpl $r1, $r2;
        java.lang.Boolean $r3;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        if $r1 == null goto label1;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(8, $r3);

     label1:
        return;
    }

    public static synchronized void setSocketImplFactory(java.net.SocketImplFactory) throws java.io.IOException
    {
        java.net.SocketImplFactory r0, $r1;
        java.net.SocketException $r2;

        r0 := @parameter0: java.net.SocketImplFactory;

        $r1 = <java.net.Socket: java.net.SocketImplFactory factory>;

        if $r1 == null goto label1;

        $r2 = new java.net.SocketException;

        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Factory already set");

        throw $r2;

     label1:
        <java.net.Socket: java.net.SocketImplFactory factory> = r0;

        return;
    }

    public synchronized void setSendBufferSize(int) throws java.net.SocketException
    {
        java.net.Socket r0;
        int i0;
        java.net.SocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 1");

        throw $r3;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4097, $r2);

        return;
    }

    public synchronized void setReceiveBufferSize(int) throws java.net.SocketException
    {
        java.net.Socket r0;
        int i0;
        java.net.SocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 1");

        throw $r3;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4098, $r2);

        return;
    }

    public void setSoLinger(boolean, int) throws java.net.SocketException
    {
        java.net.Socket r0;
        boolean z0;
        int i0;
        java.lang.Boolean $r1;
        java.net.SocketImpl $r2, $r3;
        java.lang.Integer $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if z0 == 0 goto label1;

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r5;

     label1:
        if z0 == 0 goto label2;

        $r3 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r3.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(128, $r4);

        goto label3;

     label2:
        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r1 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r2.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(128, $r1);

     label3:
        return;
    }

    public synchronized void setSoTimeout(int) throws java.net.SocketException
    {
        java.net.Socket r0;
        int i0;
        java.net.SocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r3;

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4102, $r2);

        return;
    }

    public void setTcpNoDelay(boolean) throws java.net.SocketException
    {
        java.net.Socket r0;
        boolean z0;
        java.net.SocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(1, $r2);

        return;
    }

    private void startupSocket(java.net.InetAddress, int, java.net.InetAddress, int, boolean) throws java.io.IOException
    {
        java.net.Socket r0, r4;
        java.net.InetAddress r1, r2, r3, $r16;
        int i0, i1;
        boolean z0, $z1;
        java.io.IOException r5, $r18;
        java.lang.Throwable r6, $r19;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11;
        java.net.SocketImpl $r13, $r14, $r15, $r17;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        z0 := @parameter4: boolean;

        if i1 < 0 goto label01;

        if i1 <= 65535 goto label02;

     label01:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local port out of range: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label02:
        if r2 != null goto label03;

        $r16 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        goto label04;

     label03:
        $r16 = r2;

     label04:
        r3 = $r16;

        r4 = r0;

        entermonitor r0;

     label05:
        $r14 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r14.<java.net.SocketImpl: void create(boolean)>(z0);

        r0.<java.net.Socket: boolean isCreated> = 1;

     label06:
        if z0 == 0 goto label07;

        $z1 = specialinvoke r0.<java.net.Socket: boolean usingSocks()>();

        if $z1 != 0 goto label08;

     label07:
        $r13 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r13.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>(r3, i1);

     label08:
        r0.<java.net.Socket: boolean isBound> = 1;

        specialinvoke r0.<java.net.Socket: void cacheLocalAddress()>();

        $r15 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r15.<java.net.SocketImpl: void connect(java.net.InetAddress,int)>(r1, i0);

        r0.<java.net.Socket: boolean isConnected> = 1;

        specialinvoke r0.<java.net.Socket: void cacheLocalAddress()>();

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        r5 = $r18;

        $r17 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r17.<java.net.SocketImpl: void close()>();

        throw r5;

     label11:
        exitmonitor r4;

     label12:
        goto label15;

     label13:
        $r19 := @caughtexception;

        r6 = $r19;

        exitmonitor r4;

     label14:
        throw r6;

     label15:
        return;

        catch java.io.IOException from label06 to label09 with label10;
        catch java.lang.Throwable from label05 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private boolean usingSocks()
    {
        java.net.Socket r0;
        java.net.Proxy $r1, $r2;
        java.net.Proxy$Type $r3, $r4;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $r1 = r0.<java.net.Socket: java.net.Proxy proxy>;

        if $r1 == null goto label1;

        $r2 = r0.<java.net.Socket: java.net.Proxy proxy>;

        $r3 = virtualinvoke $r2.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r4 = <java.net.Proxy$Type: java.net.Proxy$Type SOCKS>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.lang.String $r2;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return "Socket[unconnected]";

     label1:
        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.String toString()>();

        return $r2;
    }

    public void shutdownInput() throws java.io.IOException
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.net.SocketException $r2;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isInputShutdown()>();

        if $z0 == 0 goto label1;

        $r2 = new java.net.SocketException;

        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket input is shutdown");

        throw $r2;

     label1:
        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(0);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r1.<java.net.SocketImpl: void shutdownInput()>();

        r0.<java.net.Socket: boolean isInputShutdown> = 1;

        return;
    }

    public void shutdownOutput() throws java.io.IOException
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.SocketImpl $r1;
        java.net.SocketException $r2;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isOutputShutdown()>();

        if $z0 == 0 goto label1;

        $r2 = new java.net.SocketException;

        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket output is shutdown");

        throw $r2;

     label1:
        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(0);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r1.<java.net.SocketImpl: void shutdownOutput()>();

        r0.<java.net.Socket: boolean isOutputShutdown> = 1;

        return;
    }

    private void checkOpenAndCreate(boolean) throws java.net.SocketException
    {
        java.net.Socket r0, r1;
        boolean z0, $z1, $z2, $z3, $z4;
        java.net.SocketException r2, $r6, $r7, $r8, $r9;
        java.lang.Throwable r3, $r11;
        java.net.SocketImpl $r5;
        java.io.IOException $r10, r13;
        java.lang.String $r12;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<java.net.Socket: boolean isClosed()>();

        if $z1 == 0 goto label01;

        $r7 = new java.net.SocketException;

        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r7;

     label01:
        if z0 != 0 goto label03;

        $z4 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z4 != 0 goto label02;

        $r6 = new java.net.SocketException;

        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected");

        throw $r6;

     label02:
        return;

     label03:
        $z2 = r0.<java.net.Socket: boolean isCreated>;

        if $z2 == 0 goto label04;

        return;

     label04:
        r1 = r0;

        entermonitor r0;

     label05:
        $z3 = r0.<java.net.Socket: boolean isCreated>;

        if $z3 == 0 goto label07;

        exitmonitor r1;

     label06:
        return;

     label07:
        $r5 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r5.<java.net.SocketImpl: void create(boolean)>(1);

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r2 = $r8;

        throw r2;

     label10:
        $r10 := @caughtexception;

        r13 = $r10;

        $r9 = new java.net.SocketException;

        $r12 = virtualinvoke r13.<java.io.IOException: java.lang.String toString()>();

        specialinvoke $r9.<java.net.SocketException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label11:
        r0.<java.net.Socket: boolean isCreated> = 1;

        exitmonitor r1;

     label12:
        goto label15;

     label13:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label14:
        throw r3;

     label15:
        return;

        catch java.net.SocketException from label07 to label08 with label09;
        catch java.io.IOException from label07 to label08 with label10;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isBound()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        $i0 = virtualinvoke r0.<java.net.Socket: int getLocalPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public java.net.SocketAddress getRemoteSocketAddress()
    {
        java.net.Socket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.Socket;

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $i0 = virtualinvoke r0.<java.net.Socket: int getPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public boolean isBound()
    {
        java.net.Socket r0;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $z0 = r0.<java.net.Socket: boolean isBound>;

        return $z0;
    }

    public boolean isConnected()
    {
        java.net.Socket r0;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $z0 = r0.<java.net.Socket: boolean isConnected>;

        return $z0;
    }

    public boolean isClosed()
    {
        java.net.Socket r0;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $z0 = r0.<java.net.Socket: boolean isClosed>;

        return $z0;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.Socket r0, r25;
        java.net.SocketAddress r1;
        int i0;
        java.net.InetAddress r2, $r6;
        java.net.InetSocketAddress r3;
        java.io.IOException r4, $r21;
        java.lang.Throwable r5, $r23;
        boolean $z0, $z1;
        java.net.SocketImpl $r8, $r24;
        java.net.UnknownHostException $r9;
        java.lang.StringBuilder $r10, $r12, $r14, $r15, $r18, $r20;
        java.lang.String $r11, $r13, $r19;
        java.lang.IllegalArgumentException $r16;
        java.lang.Class $r17;
        java.net.BindException $r22;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $z0 = virtualinvoke r0.<java.net.Socket: boolean isBound()>();

        if $z0 == 0 goto label01;

        $r22 = new java.net.BindException;

        specialinvoke $r22.<java.net.BindException: void <init>(java.lang.String)>("Socket is already bound");

        throw $r22;

     label01:
        if r1 != null goto label02;

        i0 = 0;

        r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        goto label05;

     label02:
        $z1 = r1 instanceof java.net.InetSocketAddress;

        if $z1 != 0 goto label03;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local address not an InetSocketAddress: ");

        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label03:
        r3 = (java.net.InetSocketAddress) r1;

        $r6 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r2 = $r6;

        if $r6 != null goto label04;

        $r9 = new java.net.UnknownHostException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r11 = virtualinvoke r3.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.net.UnknownHostException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label04:
        i0 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();

     label05:
        r25 = r0;

        entermonitor r0;

     label06:
        $r8 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r8.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>(r2, i0);

        r0.<java.net.Socket: boolean isBound> = 1;

        specialinvoke r0.<java.net.Socket: void cacheLocalAddress()>();

     label07:
        goto label09;

     label08:
        $r21 := @caughtexception;

        r4 = $r21;

        $r24 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r24.<java.net.SocketImpl: void close()>();

        throw r4;

     label09:
        exitmonitor r25;

     label10:
        goto label13;

     label11:
        $r23 := @caughtexception;

        r5 = $r23;

        exitmonitor r25;

     label12:
        throw r5;

     label13:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void onBind(java.net.InetAddress, int)
    {
        java.net.Socket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.SocketImpl $r2;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.Socket: boolean isBound> = 1;

        r0.<java.net.Socket: java.net.InetAddress localAddress> = r1;

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r2.<java.net.SocketImpl: void onBind(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    public void connect(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.SocketAddress r1;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.SocketAddress;

        virtualinvoke r0.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r1, 0);

        return;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        java.net.Socket r0;
        java.net.SocketAddress r1;
        int i0, i1;
        java.net.InetSocketAddress r2;
        java.net.InetAddress r3, $r7, $r11;
        java.lang.Object r4, $r8;
        java.io.IOException r5, $r25;
        java.lang.Throwable r6, $r29;
        boolean $z0, $z1, $z2, $z3;
        java.net.SocketImpl $r9, $r10, $r28;
        java.lang.StringBuilder $r12, $r15, $r17, $r18, $r21, $r23;
        java.net.UnknownHostException $r13;
        java.lang.String $r14, $r16, $r22;
        java.lang.IllegalArgumentException $r19, $r24, $r26;
        java.lang.Class $r20;
        java.net.SocketException $r27;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if i0 >= 0 goto label01;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r24;

     label01:
        $z0 = virtualinvoke r0.<java.net.Socket: boolean isConnected()>();

        if $z0 == 0 goto label02;

        $r27 = new java.net.SocketException;

        specialinvoke $r27.<java.net.SocketException: void <init>(java.lang.String)>("Already connected");

        throw $r27;

     label02:
        if r1 != null goto label03;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("remoteAddr == null");

        throw $r26;

     label03:
        $z1 = r1 instanceof java.net.InetSocketAddress;

        if $z1 != 0 goto label04;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remote address not an InetSocketAddress: ");

        $r20 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label04:
        r2 = (java.net.InetSocketAddress) r1;

        $r7 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r3 = $r7;

        if $r7 != null goto label05;

        $r13 = new java.net.UnknownHostException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r14 = virtualinvoke r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.net.UnknownHostException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label05:
        i1 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke r0.<java.net.Socket: void checkDestination(java.net.InetAddress,int)>(r3, i1);

        $r8 = r0.<java.net.Socket: java.lang.Object connectLock>;

        r4 = $r8;

        entermonitor $r8;

     label06:
        $z2 = virtualinvoke r0.<java.net.Socket: boolean isBound()>();

        if $z2 != 0 goto label08;

        $z3 = specialinvoke r0.<java.net.Socket: boolean usingSocks()>();

        if $z3 != 0 goto label07;

        $r10 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r11 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        virtualinvoke $r10.<java.net.SocketImpl: void bind(java.net.InetAddress,int)>($r11, 0);

     label07:
        r0.<java.net.Socket: boolean isBound> = 1;

     label08:
        $r9 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r9.<java.net.SocketImpl: void connect(java.net.SocketAddress,int)>(r1, i0);

        r0.<java.net.Socket: boolean isConnected> = 1;

        specialinvoke r0.<java.net.Socket: void cacheLocalAddress()>();

     label09:
        goto label11;

     label10:
        $r25 := @caughtexception;

        r5 = $r25;

        $r28 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r28.<java.net.SocketImpl: void close()>();

        throw r5;

     label11:
        exitmonitor r4;

     label12:
        goto label15;

     label13:
        $r29 := @caughtexception;

        r6 = $r29;

        exitmonitor r4;

     label14:
        throw r6;

     label15:
        return;

        catch java.io.IOException from label06 to label09 with label10;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void onConnect(java.net.InetAddress, int)
    {
        java.net.Socket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.SocketImpl $r2;

        r0 := @this: java.net.Socket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.Socket: boolean isConnected> = 1;

        $r2 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r2.<java.net.SocketImpl: void onConnect(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    public boolean isInputShutdown()
    {
        java.net.Socket r0;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $z0 = r0.<java.net.Socket: boolean isInputShutdown>;

        return $z0;
    }

    public boolean isOutputShutdown()
    {
        java.net.Socket r0;
        boolean $z0;

        r0 := @this: java.net.Socket;

        $z0 = r0.<java.net.Socket: boolean isOutputShutdown>;

        return $z0;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        java.net.Socket r0;
        boolean z0;
        java.net.SocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4, $r2);

        return;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setOOBInline(boolean) throws java.net.SocketException
    {
        java.net.Socket r0;
        boolean z0;
        java.net.SocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.Socket;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4099, $r2);

        return;
    }

    public boolean getOOBInline() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(4099);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        java.net.Socket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.net.SocketImpl $r6;
        java.lang.Integer $r7;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        if i0 < 0 goto label1;

        if i0 <= 255 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value doesn\'t fit in an unsigned byte: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(3, $r7);

        return;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.Socket;

        specialinvoke r0.<java.net.Socket: void checkOpenAndCreate(boolean)>(1);

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.lang.Object getOption(int)>(3);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public void sendUrgentData(int) throws java.io.IOException
    {
        java.net.Socket r0;
        int i0;
        java.net.SocketImpl $r1;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        virtualinvoke $r1.<java.net.SocketImpl: void sendUrgentData(int)>(i0);

        return;
    }

    void accepted() throws java.net.SocketException
    {
        java.net.Socket r0;

        r0 := @this: java.net.Socket;

        r0.<java.net.Socket: boolean isConnected> = 1;

        r0.<java.net.Socket: boolean isBound> = 1;

        r0.<java.net.Socket: boolean isCreated> = 1;

        specialinvoke r0.<java.net.Socket: void cacheLocalAddress()>();

        return;
    }

    private void cacheLocalAddress() throws java.net.SocketException
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.io.FileDescriptor $r2;
        java.net.InetAddress $r3;

        r0 := @this: java.net.Socket;

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = $r1.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        $r3 = staticinvoke <libcore.io.IoBridge: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor)>($r2);

        r0.<java.net.Socket: java.net.InetAddress localAddress> = $r3;

        return;
    }

    public java.nio.channels.SocketChannel getChannel()
    {
        java.net.Socket r0;

        r0 := @this: java.net.Socket;

        return null;
    }

    public java.io.FileDescriptor getFileDescriptor$()
    {
        java.net.Socket r0;
        java.net.SocketImpl $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.Socket;

        $r1 = r0.<java.net.Socket: java.net.SocketImpl impl>;

        $r2 = $r1.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        return $r2;
    }

    public void setPerformancePreferences(int, int, int)
    {
        java.net.Socket r0;
        int i0, i1, i2;

        r0 := @this: java.net.Socket;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        return;
    }
}
