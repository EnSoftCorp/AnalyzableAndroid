class java.util.EnumMap$EnumMapIterator extends java.lang.Object implements java.util.Iterator
{
    int position;
    int prePosition;
    final java.util.EnumMap enumMap;
    final java.util.MapEntry$Type type;

    void <init>(java.util.MapEntry$Type, java.util.EnumMap)
    {
        java.util.EnumMap$EnumMapIterator r0;
        java.util.MapEntry$Type r1;
        java.util.EnumMap r2;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        r1 := @parameter0: java.util.MapEntry$Type;

        r2 := @parameter1: java.util.EnumMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.EnumMap$EnumMapIterator: int position> = 0;

        r0.<java.util.EnumMap$EnumMapIterator: int prePosition> = -1;

        r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap> = r2;

        r0.<java.util.EnumMap$EnumMapIterator: java.util.MapEntry$Type type> = r1;

        return;
    }

    public boolean hasNext()
    {
        java.util.EnumMap$EnumMapIterator r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.EnumMap $r1, $r2;
        boolean $z0, $z1;
        boolean[] $r3;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        $r1 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        i0 = $r1.<java.util.EnumMap: int enumSize>;

     label1:
        $i1 = r0.<java.util.EnumMap$EnumMapIterator: int position>;

        if $i1 >= i0 goto label3;

        $r2 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r3 = $r2.<java.util.EnumMap: boolean[] hasMapping>;

        $i3 = r0.<java.util.EnumMap$EnumMapIterator: int position>;

        $z1 = $r3[$i3];

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $i4 = r0.<java.util.EnumMap$EnumMapIterator: int position>;

        $i5 = $i4 + 1;

        r0.<java.util.EnumMap$EnumMapIterator: int position> = $i5;

        goto label1;

     label3:
        $i2 = r0.<java.util.EnumMap$EnumMapIterator: int position>;

        if $i2 == i0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.EnumMap$EnumMapIterator r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.util.MapEntry $r1;
        java.util.EnumMap $r2, $r4;
        java.lang.Enum[] $r3;
        java.lang.Object[] $r5;
        java.lang.Object $r6, $r9;
        java.lang.Enum $r7;
        java.util.MapEntry$Type $r8;
        java.util.NoSuchElementException $r10;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        $z0 = virtualinvoke r0.<java.util.EnumMap$EnumMapIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r10 = new java.util.NoSuchElementException;

        specialinvoke $r10.<java.util.NoSuchElementException: void <init>()>();

        throw $r10;

     label1:
        $i0 = r0.<java.util.EnumMap$EnumMapIterator: int position>;

        $i1 = $i0 + 1;

        r0.<java.util.EnumMap$EnumMapIterator: int position> = $i1;

        r0.<java.util.EnumMap$EnumMapIterator: int prePosition> = $i0;

        $r8 = r0.<java.util.EnumMap$EnumMapIterator: java.util.MapEntry$Type type>;

        $r1 = new java.util.MapEntry;

        $r2 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r3 = $r2.<java.util.EnumMap: java.lang.Enum[] keys>;

        $i2 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $r7 = $r3[$i2];

        $r4 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r5 = $r4.<java.util.EnumMap: java.lang.Object[] values>;

        $i3 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $r6 = $r5[$i3];

        specialinvoke $r1.<java.util.MapEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r9 = interfaceinvoke $r8.<java.util.MapEntry$Type: java.lang.Object get(java.util.MapEntry)>($r1);

        return $r9;
    }

    public void remove()
    {
        java.util.EnumMap$EnumMapIterator r0;
        java.util.EnumMap $r1, $r3, $r6;
        int $i0, $i1;
        boolean[] $r2;
        boolean $z0;
        java.lang.Enum[] $r4;
        java.lang.Enum $r5;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        specialinvoke r0.<java.util.EnumMap$EnumMapIterator: void checkStatus()>();

        $r1 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r2 = $r1.<java.util.EnumMap: boolean[] hasMapping>;

        $i0 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $z0 = $r2[$i0];

        if $z0 == 0 goto label1;

        $r6 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r3 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r4 = $r3.<java.util.EnumMap: java.lang.Enum[] keys>;

        $i1 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $r5 = $r4[$i1];

        virtualinvoke $r6.<java.util.EnumMap: java.lang.Object remove(java.lang.Object)>($r5);

     label1:
        r0.<java.util.EnumMap$EnumMapIterator: int prePosition> = -1;

        return;
    }

    public java.lang.String toString()
    {
        java.util.EnumMap$EnumMapIterator r0;
        int $i0, $i1, $i2;
        java.util.MapEntry $r1;
        java.util.EnumMap $r2, $r4;
        java.lang.Enum[] $r3;
        java.lang.Object[] $r5;
        java.lang.Object $r6, $r9;
        java.lang.Enum $r7;
        java.util.MapEntry$Type $r8;
        java.lang.String $r10, $r11;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        $i0 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        if $i0 != -1 goto label1;

        $r11 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r11;

     label1:
        $r8 = r0.<java.util.EnumMap$EnumMapIterator: java.util.MapEntry$Type type>;

        $r1 = new java.util.MapEntry;

        $r2 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r3 = $r2.<java.util.EnumMap: java.lang.Enum[] keys>;

        $i1 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $r7 = $r3[$i1];

        $r4 = r0.<java.util.EnumMap$EnumMapIterator: java.util.EnumMap enumMap>;

        $r5 = $r4.<java.util.EnumMap: java.lang.Object[] values>;

        $i2 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        $r6 = $r5[$i2];

        specialinvoke $r1.<java.util.MapEntry: void <init>(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r9 = interfaceinvoke $r8.<java.util.MapEntry$Type: java.lang.Object get(java.util.MapEntry)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        return $r10;
    }

    private void checkStatus()
    {
        java.util.EnumMap$EnumMapIterator r0;
        int $i0;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.EnumMap$EnumMapIterator;

        $i0 = r0.<java.util.EnumMap$EnumMapIterator: int prePosition>;

        if $i0 != -1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }
}
