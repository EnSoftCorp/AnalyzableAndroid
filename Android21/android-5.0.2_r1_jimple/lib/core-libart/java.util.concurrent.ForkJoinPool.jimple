public class java.util.concurrent.ForkJoinPool extends java.util.concurrent.AbstractExecutorService
{
    static final java.lang.ThreadLocal submitters;
    public static final java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;
    private static final java.lang.RuntimePermission modifyThreadPermission;
    static final java.util.concurrent.ForkJoinPool common;
    static final int commonParallelism;
    private static int poolNumberSequence;
    private static final long IDLE_TIMEOUT;
    private static final long FAST_IDLE_TIMEOUT;
    private static final long TIMEOUT_SLOP;
    private static final int MAX_HELP;
    private static final int SEED_INCREMENT;
    private static final int AC_SHIFT;
    private static final int TC_SHIFT;
    private static final int ST_SHIFT;
    private static final int EC_SHIFT;
    private static final int SMASK;
    private static final int MAX_CAP;
    private static final int EVENMASK;
    private static final int SQMASK;
    private static final int SHORT_SIGN;
    private static final int INT_SIGN;
    private static final long STOP_BIT;
    private static final long AC_MASK;
    private static final long TC_MASK;
    private static final long TC_UNIT;
    private static final long AC_UNIT;
    private static final int UAC_SHIFT;
    private static final int UTC_SHIFT;
    private static final int UAC_MASK;
    private static final int UTC_MASK;
    private static final int UAC_UNIT;
    private static final int UTC_UNIT;
    private static final int E_MASK;
    private static final int E_SEQ;
    private static final int SHUTDOWN;
    private static final int PL_LOCK;
    private static final int PL_SIGNAL;
    private static final int PL_SPINS;
    static final int LIFO_QUEUE;
    static final int FIFO_QUEUE;
    static final int SHARED_QUEUE;
    volatile long pad00;
    volatile long pad01;
    volatile long pad02;
    volatile long pad03;
    volatile long pad04;
    volatile long pad05;
    volatile long pad06;
    volatile long stealCount;
    volatile long ctl;
    volatile int plock;
    volatile int indexSeed;
    final short parallelism;
    final short mode;
    java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues;
    final java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory;
    final java.lang.Thread$UncaughtExceptionHandler ueh;
    final java.lang.String workerNamePrefix;
    volatile java.lang.Object pad10;
    volatile java.lang.Object pad11;
    volatile java.lang.Object pad12;
    volatile java.lang.Object pad13;
    volatile java.lang.Object pad14;
    volatile java.lang.Object pad15;
    volatile java.lang.Object pad16;
    volatile java.lang.Object pad17;
    volatile java.lang.Object pad18;
    volatile java.lang.Object pad19;
    volatile java.lang.Object pad1a;
    volatile java.lang.Object pad1b;
    private static final sun.misc.Unsafe U;
    private static final long CTL;
    private static final long PARKBLOCKER;
    private static final int ABASE;
    private static final int ASHIFT;
    private static final long STEALCOUNT;
    private static final long PLOCK;
    private static final long INDEXSEED;
    private static final long QBASE;
    private static final long QLOCK;

    private static void checkPermission()
    {
        java.lang.SecurityManager r0;
        java.lang.RuntimePermission $r1;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r1 = <java.util.concurrent.ForkJoinPool: java.lang.RuntimePermission modifyThreadPermission>;

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r1);

     label1:
        return;
    }

    private static final synchronized int nextPoolId()
    {
        int $i0, $i1;

        $i0 = <java.util.concurrent.ForkJoinPool: int poolNumberSequence>;

        $i1 = $i0 + 1;

        <java.util.concurrent.ForkJoinPool: int poolNumberSequence> = $i1;

        return $i1;
    }

    private int acquirePlock()
    {
        java.util.concurrent.ForkJoinPool r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8, $i9, $i11;
        java.lang.Throwable r4, $r11;
        long $l6, $l10;
        sun.misc.Unsafe $r5, $r8;
        boolean $z0, $z1;
        java.util.concurrent.ThreadLocalRandom $r7;
        java.lang.Thread $r9;
        java.lang.InterruptedException $r10;
        java.lang.SecurityException $r12;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 = 256;

     label01:
        $i3 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i1 = $i3;

        $i4 = $i3 & 2;

        if $i4 != 0 goto label02;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l10 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $i11 = i1 + 2;

        i2 = $i11;

        $z1 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l10, i1, $i11);

        if $z1 == 0 goto label02;

        return i2;

     label02:
        if i0 < 0 goto label03;

        $r7 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $i9 = virtualinvoke $r7.<java.util.concurrent.ThreadLocalRandom: int nextInt()>();

        if $i9 < 0 goto label01;

        i0 = i0 + -1;

        goto label01;

     label03:
        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $i5 = i1 | 1;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l6, i1, $i5);

        if $z0 == 0 goto label01;

        r1 = r0;

        entermonitor r0;

     label04:
        $i7 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i8 = $i7 & 1;

        if $i8 == 0 goto label12;

     label05:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label06:
        goto label13;

     label07:
        $r10 := @caughtexception;

     label08:
        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        goto label13;

     label12:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label13:
        exitmonitor r1;

     label14:
        goto label17;

     label15:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label16:
        throw r4;

     label17:
        goto label01;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.SecurityException from label08 to label09 with label10;
        catch java.lang.Throwable from label04 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private void releasePlock(int)
    {
        java.util.concurrent.ForkJoinPool r0, r1;
        int i0;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        r0.<java.util.concurrent.ForkJoinPool: int plock> = i0;

        r1 = r0;

        entermonitor r0;

     label1:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void tryAddWorker()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l3, $l4, $l5, $l13, $l15, $l16, $l17;
        int i1, i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1, $r6;
        java.lang.Throwable r2, r4, $r7;
        java.util.concurrent.ForkJoinWorkerThread r3, $r8;
        sun.misc.Unsafe $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

     label1:
        $l4 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l0 = $l4;

        $l5 = $l4 >>> 32;

        $i6 = (int) $l5;

        i1 = $i6;

        if $i6 >= 0 goto label8;

        $i7 = i1 & 32768;

        if $i7 == 0 goto label8;

        $i8 = (int) l0;

        i2 = $i8;

        if $i8 < 0 goto label8;

        $i10 = i1 + 1;

        $i11 = $i10 & 65535;

        $i9 = i1 + 65536;

        $i12 = $i9 & -65536;

        $i14 = $i11 | $i12;

        $l13 = (long) $i14;

        $l15 = $l13 << 32;

        $l16 = (long) i2;

        l3 = $l15 | $l16;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l17 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l17, l0, l3);

        if $z0 == 0 goto label7;

        r2 = null;

        r3 = null;

     label2:
        $r6 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

        r1 = $r6;

        if $r6 == null goto label4;

        $r8 = interfaceinvoke r1.<java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory: java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)>(r0);

        r3 = $r8;

        if $r8 == null goto label4;

        virtualinvoke r3.<java.util.concurrent.ForkJoinWorkerThread: void start()>();

     label3:
        goto label8;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        r2 = r4;

     label6:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r3, r2);

        goto label8;

     label7:
        goto label1;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
    }

    final java.util.concurrent.ForkJoinPool$WorkQueue registerWorker(java.util.concurrent.ForkJoinWorkerThread)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Thread$UncaughtExceptionHandler r2, $r6;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3, $r9, $r16;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i10, $i12, $i13, $i14, $i15, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i28, i30, i31, i32;
        java.util.concurrent.ForkJoinPool$WorkQueue r4, $r8, $r14, $r17;
        java.lang.Throwable r5, $r20;
        sun.misc.Unsafe $r7, $r10, $r18, $r19;
        long $l9, $l16, $l27, $l29;
        boolean $z0, $z1, $z2, $z3;
        short $s11, $s17, $s18, $s19;
        java.lang.String $r11, $r12, $r13;
        java.lang.Object[] $r15;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinWorkerThread;

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setDaemon(boolean)>(1);

        $r6 = r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh>;

        r2 = $r6;

        if $r6 == null goto label01;

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(r2);

     label01:
        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l9 = <java.util.concurrent.ForkJoinPool: long INDEXSEED>;

        $i8 = r0.<java.util.concurrent.ForkJoinPool: int indexSeed>;

        i0 = $i8;

        i30 = i0 + 1640531527;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l9, $i8, i30);

        if $z0 == 0 goto label01;

        if i30 == 0 goto label01;

        $r8 = new java.util.concurrent.ForkJoinPool$WorkQueue;

        $s11 = r0.<java.util.concurrent.ForkJoinPool: short mode>;

        specialinvoke $r8.<java.util.concurrent.ForkJoinPool$WorkQueue: void <init>(java.util.concurrent.ForkJoinPool,java.util.concurrent.ForkJoinWorkerThread,int,int)>(r0, r1, $s11, i30);

        r4 = $r8;

        $i10 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i1 = $i10;

        $i12 = $i10 & 2;

        if $i12 != 0 goto label02;

        $r18 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l27 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i31 = i1 + 2;

        $z2 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l27, i1, i31);

        if $z2 != 0 goto label03;

     label02:
        i31 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label03:
        $i15 = i31 & -2147483648;

        $i14 = i31 + 2;

        $i13 = $i14 & 2147483647;

        i2 = $i15 | $i13;

     label04:
        $r9 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r3 = $r9;

        if $r9 == null goto label09;

        i3 = lengthof r3;

        i4 = i3 - 1;

        $i20 = i30 << 1;

        i5 = $i20 | 1;

        $i21 = i5 & i4;

        i32 = $i21;

        $r14 = r3[$i21];

        if $r14 == null goto label08;

        i6 = 0;

        if i3 > 4 goto label05;

        $i28 = 2;

        goto label06;

     label05:
        $i24 = i3 >>> 1;

        $i25 = $i24 & 65534;

        $i28 = $i25 + 2;

     label06:
        i7 = $i28;

     label07:
        $i22 = i32 + i7;

        $i23 = $i22 & i4;

        i32 = $i23;

        $r17 = r3[$i23];

        if $r17 == null goto label08;

        i6 = i6 + 1;

        if i6 < i3 goto label07;

        $i26 = i3 << 1;

        i3 = $i26;

        $r15 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r3, $i26);

        $r16 = (java.util.concurrent.ForkJoinPool$WorkQueue[]) $r15;

        r3 = $r16;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues> = $r16;

        i4 = i3 - 1;

        i6 = 0;

        goto label07;

     label08:
        $s19 = (short) i32;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex> = $s19;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i32;

        r3[i32] = r4;

     label09:
        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l16 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l16, i31, i2);

        if $z1 != 0 goto label13;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i2);

        goto label13;

     label10:
        $r20 := @caughtexception;

        r5 = $r20;

     label11:
        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l29 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z3 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l29, i31, i2);

        if $z3 != 0 goto label12;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i2);

     label12:
        throw r5;

     label13:
        $r13 = r0.<java.util.concurrent.ForkJoinPool: java.lang.String workerNamePrefix>;

        $s17 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex>;

        $s18 = $s17 >>> 1;

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($s18);

        $r12 = virtualinvoke $r13.<java.lang.String: java.lang.String concat(java.lang.String)>($r11);

        virtualinvoke r1.<java.util.concurrent.ForkJoinWorkerThread: void setName(java.lang.String)>($r12);

        return r4;

        catch java.lang.Throwable from label04 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    final void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread, java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinWorkerThread r1;
        java.lang.Throwable r2, r6, $r20;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, $r9, $r12, $r16, r21;
        int i0, i2, i4, $i16, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i30, $i32, $i35, $i37, $i39, $i40, $i41, $i42, $i44, i47, i50, i51;
        long l1, l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l17, $l23, $l28, $l29, $l31, $l33, $l34, $l36, $l38, $l43, $l45, $l46, l48, l49;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r4, r5, $r10;
        short s3, $s18;
        sun.misc.Unsafe $r7, $r11, $r13, $r15, $r17, $r18, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.concurrent.ForkJoinTask[] $r8;
        java.lang.Thread $r14, r22;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinWorkerThread;

        r2 := @parameter1: java.lang.Throwable;

        r3 = null;

        if r1 == null goto label09;

        $r12 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        r3 = $r12;

        if $r12 == null goto label09;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

     label01:
        $r15 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l38 = <java.util.concurrent.ForkJoinPool: long STEALCOUNT>;

        $l36 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        l1 = $l36;

        $i35 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $l34 = (long) $i35;

        $l33 = l1 + $l34;

        $z3 = virtualinvoke $r15.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l38, $l36, $l33);

        if $z3 == 0 goto label01;

        $i37 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i0 = $i37;

        $i41 = $i37 & 2;

        if $i41 != 0 goto label02;

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l43 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i47 = i0 + 2;

        $z6 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l43, i0, i47);

        if $z6 != 0 goto label03;

     label02:
        i47 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label03:
        $i44 = i47 & -2147483648;

        $i40 = i47 + 2;

        $i39 = $i40 & 2147483647;

        i2 = $i44 | $i39;

     label04:
        s3 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex>;

        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r5 == null goto label05;

        if s3 < 0 goto label05;

        $i42 = lengthof r5;

        if s3 >= $i42 goto label05;

        $r16 = r5[s3];

        if $r16 != r3 goto label05;

        r5[s3] = null;

     label05:
        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l45 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z4 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l45, i47, i2);

        if $z4 != 0 goto label09;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i2);

        goto label09;

     label06:
        $r20 := @caughtexception;

        r6 = $r20;

     label07:
        $r18 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l46 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z5 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l46, i47, i2);

        if $z5 != 0 goto label08;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i2);

     label08:
        throw r6;

     label09:
        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l14 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l6 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l48 = $l6;

        $l7 = l48 - 281474976710656L;

        $l11 = $l7 & -281474976710656L;

        $l9 = l48 - 4294967296L;

        $l8 = $l9 & 281470681743360L;

        $l13 = $l11 | $l8;

        $l10 = l48 & 4294967295L;

        $l12 = $l13 | $l10;

        $z1 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l14, $l6, $l12);

        if $z1 == 0 goto label09;

        $z0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label15;

        if r3 == null goto label15;

        $r8 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r8 == null goto label15;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: void cancelAll()>();

     label10:
        $l15 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l49 = $l15;

        $l17 = $l15 >>> 32;

        $i16 = (int) $l17;

        i50 = $i16;

        if $i16 >= 0 goto label15;

        $i19 = (int) l49;

        i4 = $i19;

        if $i19 < 0 goto label15;

        if i4 <= 0 goto label14;

        $r10 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r4 = $r10;

        if $r10 == null goto label15;

        $i21 = i4 & 65535;

        i51 = $i21;

        $i20 = lengthof r4;

        if $i21 >= $i20 goto label15;

        $r9 = r4[i51];

        r21 = $r9;

        if $r9 != null goto label11;

        goto label15;

     label11:
        $i24 = r21.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i25 = $i24 & 2147483647;

        $l29 = (long) $i25;

        $i22 = i50 + 65536;

        $l23 = (long) $i22;

        $l28 = $l23 << 32;

        l5 = $l29 | $l28;

        $i27 = r21.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i26 = i4 | -2147483648;

        if $i27 == $i26 goto label12;

        goto label15;

     label12:
        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l31 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r11.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l31, l49, l5);

        if $z2 == 0 goto label13;

        $i30 = i4 + 65536;

        $i32 = $i30 & 2147483647;

        r21.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i32;

        $r14 = r21.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        r22 = $r14;

        if $r14 == null goto label15;

        $r13 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r13.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r22);

        goto label15;

     label13:
        goto label10;

     label14:
        $s18 = (short) i50;

        if $s18 >= 0 goto label15;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void tryAddWorker()>();

        goto label15;

     label15:
        if r2 != null goto label16;

        staticinvoke <java.util.concurrent.ForkJoinTask: void helpExpungeStaleExceptions()>();

        goto label17;

     label16:
        staticinvoke <java.util.concurrent.ForkJoinTask: void rethrow(java.lang.Throwable)>(r2);

     label17:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    final void externalPush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinPool$Submitter r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, $r8;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23;
        java.util.concurrent.ForkJoinTask[] r4, $r10;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r5;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7;
        long $l12, $l20;
        boolean $z0;
        sun.misc.Unsafe $r9, $r11;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        i5 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        if r2 == null goto label3;

        if i5 <= 0 goto label3;

        if r5 == null goto label3;

        $i7 = lengthof r5;

        $i9 = $i7 - 1;

        i1 = $i9;

        if $i9 < 0 goto label3;

        $i8 = r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        i0 = $i8;

        $i11 = i1 & $i8;

        $i10 = $i11 & 126;

        $r8 = r5[$i10];

        r3 = $r8;

        if $r8 == null goto label3;

        if i0 == 0 goto label3;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l12 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z0 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r3, $l12, 0, 1);

        if $z0 == 0 goto label3;

        $r10 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r4 = $r10;

        if $r10 == null goto label2;

        $i13 = lengthof r4;

        $i15 = $i13 - 1;

        i4 = $i15;

        $i14 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i2 = $i14;

        $i17 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i16 = $i14 - $i17;

        i3 = $i16;

        if $i15 <= $i16 goto label2;

        $i18 = i4 & i2;

        $i19 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i22 = $i18 << $i19;

        $i21 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i6 = $i22 + $i21;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l20 = (long) i6;

        virtualinvoke $r11.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r4, $l20, r1);

        $i23 = i2 + 1;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i23;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        if i3 > 1 goto label1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue)>(r5, r3);

     label1:
        return;

     label2:
        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label3:
        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void fullExternalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return;
    }

    private void fullExternalPush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        int i0, i1, i2, i3, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i41, $i42, $i43, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i55, $i56, $i57, $i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i74, i75, i76;
        java.util.concurrent.ForkJoinPool$Submitter r2, $r26;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3, r5, $r9, $r10, $r13, $r14, $r17, r29, r30, r33;
        java.util.concurrent.ForkJoinPool$WorkQueue r4, $r15, $r16, $r18, r32;
        short s4, $s28;
        java.lang.Throwable r6, $r28;
        java.lang.ThreadLocal $r7, $r27;
        java.lang.Object $r8;
        long $l18, $l22, $l33, $l39, $l40, $l44, $l54;
        sun.misc.Unsafe $r11, $r12, $r19, $r20, $r21, $r24, $r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.util.concurrent.ForkJoinTask[] $r22, r31;
        java.util.concurrent.RejectedExecutionException $r23;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        $r7 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.concurrent.ForkJoinPool$Submitter) $r8;

     label01:
        if r2 != null goto label02;

        $r25 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l54 = <java.util.concurrent.ForkJoinPool: long INDEXSEED>;

        $i57 = r0.<java.util.concurrent.ForkJoinPool: int indexSeed>;

        i59 = $i57;

        i0 = i59 + 1640531527;

        $z5 = virtualinvoke $r25.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l54, $i57, i0);

        if $z5 == 0 goto label03;

        if i0 == 0 goto label03;

        $r27 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r26 = new java.util.concurrent.ForkJoinPool$Submitter;

        specialinvoke $r26.<java.util.concurrent.ForkJoinPool$Submitter: void <init>(int)>(i0);

        r2 = $r26;

        virtualinvoke $r27.<java.lang.ThreadLocal: void set(java.lang.Object)>($r26);

        goto label03;

     label02:
        if i0 != 0 goto label03;

        i60 = r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i50 = i60 << 13;

        i61 = i60 ^ $i50;

        $i56 = i61 >>> 17;

        i62 = i61 ^ $i56;

        $i55 = i62 << 5;

        $i58 = i62 ^ $i55;

        i0 = $i58;

        r2.<java.util.concurrent.ForkJoinPool$Submitter: int seed> = $i58;

     label03:
        $i8 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i1 = $i8;

        if $i8 >= 0 goto label04;

        $r23 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r23.<java.util.concurrent.RejectedExecutionException: void <init>()>();

        throw $r23;

     label04:
        if i1 == 0 goto label05;

        $r13 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r3 = $r13;

        if $r13 == null goto label05;

        $i23 = lengthof r3;

        $i26 = $i23 - 1;

        i2 = $i26;

        if $i26 >= 0 goto label16;

     label05:
        s4 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        if s4 <= 1 goto label06;

        $i24 = s4 - 1;

        goto label07;

     label06:
        $i24 = 1;

     label07:
        i5 = $i24;

        $i7 = i5 >>> 1;

        i63 = i5 | $i7;

        $i10 = i63 >>> 2;

        i64 = i63 | $i10;

        $i9 = i64 >>> 4;

        i65 = i64 | $i9;

        $i12 = i65 >>> 8;

        i66 = i65 | $i12;

        $i11 = i66 >>> 16;

        i67 = i66 | $i11;

        $i13 = i67 + 1;

        i68 = $i13 << 1;

        $r9 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r29 = $r9;

        if $r9 == null goto label08;

        $i21 = lengthof r29;

        if $i21 != 0 goto label09;

     label08:
        $r14 = newarray (java.util.concurrent.ForkJoinPool$WorkQueue)[i68];

        goto label10;

     label09:
        $r14 = null;

     label10:
        r5 = $r14;

        $i15 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i69 = $i15;

        $i14 = $i15 & 2;

        if $i14 != 0 goto label11;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l22 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i70 = i69 + 2;

        $z1 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l22, i69, i70);

        if $z1 != 0 goto label12;

     label11:
        i70 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label12:
        $r10 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r30 = $r10;

        if $r10 == null goto label13;

        $i20 = lengthof r30;

        if $i20 != 0 goto label14;

     label13:
        if r5 == null goto label14;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues> = r5;

     label14:
        $i19 = i70 & -2147483648;

        $i17 = i70 + 2;

        $i16 = $i17 & 2147483647;

        i6 = $i19 | $i16;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l18 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z0 = virtualinvoke $r11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l18, i70, i6);

        if $z0 != 0 goto label15;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i6);

     label15:
        goto label31;

     label16:
        $i27 = i0 & i2;

        $i25 = $i27 & 126;

        i3 = $i25;

        $r15 = r3[$i25];

        r4 = $r15;

        if $r15 == null goto label25;

        $i38 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock>;

        if $i38 != 0 goto label24;

        $r20 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l39 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z3 = virtualinvoke $r20.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r4, $l39, 0, 1);

        if $z3 == 0 goto label24;

        r31 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        i71 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        z6 = 0;

     label17:
        if r31 == null goto label18;

        $i48 = lengthof r31;

        $i52 = i71 + 1;

        $i53 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i49 = $i52 - $i53;

        if $i48 > $i49 goto label19;

     label18:
        $r22 = virtualinvoke r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

        r31 = $r22;

        if $r22 == null goto label20;

     label19:
        $i45 = lengthof r31;

        $i46 = $i45 - 1;

        $i41 = $i46 & i71;

        $i47 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i43 = $i41 << $i47;

        $i42 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i72 = $i43 + $i42;

        $r24 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l44 = (long) i72;

        virtualinvoke $r24.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r31, $l44, r1);

        $i51 = i71 + 1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i51;

        z6 = 1;

     label20:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        goto label23;

     label21:
        $r28 := @caughtexception;

        r6 = $r28;

     label22:
        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        throw r6;

     label23:
        if z6 == 0 goto label24;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue)>(r3, r4);

        return;

     label24:
        i0 = 0;

        goto label31;

     label25:
        $i30 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $i29 = $i30 & 2;

        if $i29 != 0 goto label30;

        $r16 = new java.util.concurrent.ForkJoinPool$WorkQueue;

        specialinvoke $r16.<java.util.concurrent.ForkJoinPool$WorkQueue: void <init>(java.util.concurrent.ForkJoinPool,java.util.concurrent.ForkJoinWorkerThread,int,int)>(r0, null, -1, i0);

        r32 = $r16;

        $s28 = (short) i3;

        r32.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex> = $s28;

        $i32 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i74 = $i32;

        $i31 = $i32 & 2;

        if $i31 != 0 goto label26;

        $r21 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l40 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i75 = i74 + 2;

        $z4 = virtualinvoke $r21.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l40, i74, i75);

        if $z4 != 0 goto label27;

     label26:
        i75 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label27:
        $r17 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r33 = $r17;

        if $r17 == null goto label28;

        $i37 = lengthof r33;

        if i3 >= $i37 goto label28;

        $r18 = r33[i3];

        if $r18 != null goto label28;

        r33[i3] = r32;

     label28:
        $i34 = i75 & -2147483648;

        $i36 = i75 + 2;

        $i35 = $i36 & 2147483647;

        i76 = $i34 | $i35;

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l33 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z2 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l33, i75, i76);

        if $z2 != 0 goto label29;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i76);

     label29:
        goto label31;

     label30:
        i0 = 0;

     label31:
        goto label01;

        catch java.lang.Throwable from label17 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    final void incrementActiveCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

     label1:
        $r1 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l0 = $l1;

        $l4 = l0 & 281474976710655L;

        $l2 = l0 & -281474976710656L;

        $l3 = $l2 + 281474976710656L;

        $l5 = $l4 | $l3;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l6, $l1, $l5);

        if $z0 == 0 goto label1;

        return;
    }

    final void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[], java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, r3, $r5;
        long l0, l4, $l6, $l7, $l14, $l16, $l17, $l22;
        int i1, i2, i3, i5, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i18, $i19, $i20, $i21, $i23;
        java.lang.Thread r4, $r6;
        sun.misc.Unsafe $r7, $r8;
        boolean $z0;
        short $s24;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue[];

        r2 := @parameter1: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        $l6 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l0 = $l6;

        $l7 = $l6 >>> 32;

        $i8 = (int) $l7;

        i2 = $i8;

        if $i8 < 0 goto label2;

        goto label7;

     label2:
        $i10 = (int) l0;

        i1 = $i10;

        if $i10 > 0 goto label3;

        $s24 = (short) i2;

        if $s24 >= 0 goto label7;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void tryAddWorker()>();

        goto label7;

     label3:
        if r1 == null goto label7;

        $i11 = lengthof r1;

        $i9 = i1 & 65535;

        i3 = $i9;

        if $i11 <= $i9 goto label7;

        $r5 = r1[i3];

        r3 = $r5;

        if $r5 != null goto label4;

        goto label7;

     label4:
        $i13 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i12 = $i13 & 2147483647;

        $l16 = (long) $i12;

        $i15 = i2 + 65536;

        $l14 = (long) $i15;

        $l17 = $l14 << 32;

        l4 = $l16 | $l17;

        $i19 = i1 + 65536;

        i5 = $i19 & 2147483647;

        $i21 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i18 = i1 | -2147483648;

        if $i21 != $i18 goto label5;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l22 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l22, l0, l4);

        if $z0 == 0 goto label5;

        r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i5;

        $r6 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        r4 = $r6;

        if $r6 == null goto label7;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r7.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r4);

        goto label7;

     label5:
        if r2 == null goto label6;

        $i23 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i20 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i23 < $i20 goto label6;

        goto label7;

     label6:
        goto label1;

     label7:
        return;
    }

    final void runWorker(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

        i0 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint>;

     label1:
        $i1 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int scan(java.util.concurrent.ForkJoinPool$WorkQueue,int)>(r1, i0);

        if $i1 != 0 goto label2;

        $i2 = i0 << 13;

        i5 = i0 ^ $i2;

        $i3 = i5 >>> 17;

        i6 = i5 ^ $i3;

        $i4 = i6 << 5;

        i0 = i6 ^ $i4;

        goto label1;

     label2:
        return;
    }

    private final int scan(java.util.concurrent.ForkJoinPool$WorkQueue, int)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3, $r7;
        int i0, i1, i3, i4, i5, i6, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i36, $i37, $i38;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2, $r6;
        long l2, l7, $l14, $l16, $l18, $l19, $l20, $l35, l39;
        java.util.concurrent.ForkJoinTask[] r4, $r9;
        java.util.concurrent.ForkJoinTask r5, $r13;
        byte $b17;
        sun.misc.Unsafe $r8, $r10, $r12, $r14;
        boolean $z0, $z1;
        java.lang.Object $r11;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 := @parameter1: int;

        l2 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $r6 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r2 = $r6;

        if $r6 == null goto label8;

        $i8 = lengthof r2;

        $i10 = $i8 - 1;

        i1 = $i10;

        if $i10 < 0 goto label8;

        if r1 == null goto label8;

        $i9 = i1 + i1;

        i3 = $i9 + 1;

        i4 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

     label1:
        $i12 = i0 - i3;

        $i11 = $i12 & i1;

        $r7 = r2[$i11];

        r3 = $r7;

        if $r7 == null goto label4;

        $i23 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i5 = $i23;

        $i25 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i26 = $i23 - $i25;

        if $i26 >= 0 goto label4;

        $r9 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r4 = $r9;

        if $r9 == null goto label4;

        $i24 = lengthof r4;

        $i29 = $i24 - 1;

        $i27 = $i29 & i5;

        $i30 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i31 = $i27 << $i30;

        $i28 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        $i32 = $i31 + $i28;

        l7 = (long) $i32;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r11 = virtualinvoke $r10.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r4, l7);

        $r13 = (java.util.concurrent.ForkJoinTask) $r11;

        r5 = $r13;

        if $r13 == null goto label8;

        if i4 >= 0 goto label2;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void helpRelease(long,java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinPool$WorkQueue,int)>(l2, r2, r1, r3, i5);

        goto label8;

     label2:
        $i33 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i33 != i5 goto label8;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $z1 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r4, l7, r5, null);

        if $z1 == 0 goto label8;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l35 = <java.util.concurrent.ForkJoinPool: long QBASE>;

        $i36 = i5 + 1;

        virtualinvoke $r14.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r3, $l35, $i36);

        $i38 = i5 + 1;

        $i34 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i37 = $i38 - $i34;

        if $i37 >= 0 goto label3;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue)>(r2, r3);

     label3:
        virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: void runTask(java.util.concurrent.ForkJoinTask)>(r5);

        goto label8;

     label4:
        i3 = i3 + -1;

        if i3 >= 0 goto label7;

        $i13 = (int) l2;

        i6 = $i13;

        $i15 = i4 | $i13;

        if $i15 >= 0 goto label5;

        $i22 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int awaitWork(java.util.concurrent.ForkJoinPool$WorkQueue,long,int)>(r1, l2, i4);

        return $i22;

     label5:
        $l14 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b17 = $l14 cmp l2;

        if $b17 != 0 goto label8;

        $l18 = (long) i4;

        $l16 = l2 - 281474976710656L;

        $l19 = $l16 & -4294967296L;

        l39 = $l18 | $l19;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait> = i6;

        $i21 = i4 | -2147483648;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i21;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l20, l2, l39);

        if $z0 != 0 goto label6;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i4;

     label6:
        goto label8;

     label7:
        goto label1;

     label8:
        return 0;
    }

    private final int awaitWork(java.util.concurrent.ForkJoinPool$WorkQueue, long, int)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        long l0, l4, l5, l9, $l12, $l16, $l21, $l25, $l26, $l27, $l31, $l32, $l33, $l35, $l37, $l39, $l40, $l45, $l46, $l47, $l48, $l51, $l52, $l53, $l54, $l55, $l56, l57;
        int i1, i2, i3, i6, i7, i8, $i10, $i13, $i18, $i20, $i22, $i24, $i36, $i41, $i43, $i44, $i49, $i50;
        short s11, $s15, $s42;
        boolean $z0, $z1, $z2, $z3;
        byte $b14, $b19, $b23, $b28, $b29, $b30, $b38;
        sun.misc.Unsafe $r2, $r3, $r4, $r5, $r6;
        java.lang.Thread r7;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        $i10 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock>;

        i2 = $i10;

        if $i10 < 0 goto label13;

        $i13 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i13 != i1 goto label13;

        $l12 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b14 = $l12 cmp l0;

        if $b14 != 0 goto label13;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label13;

        i6 = (int) l0;

        $l16 = l0 >>> 32;

        i7 = (int) $l16;

        $i18 = i7 >> 16;

        $s15 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        i8 = $i18 + $s15;

        if i6 < 0 goto label01;

        if i8 > 0 goto label02;

        $z3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 0);

        if $z3 == 0 goto label02;

     label01:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        i2 = -1;

        goto label13;

     label02:
        $i20 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        i3 = $i20;

        if $i20 == 0 goto label04;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals> = 0;

     label03:
        $r6 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l52 = <java.util.concurrent.ForkJoinPool: long STEALCOUNT>;

        $l55 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        l9 = $l55;

        $l56 = (long) i3;

        $l51 = l9 + $l56;

        $z2 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l52, $l55, $l51);

        if $z2 == 0 goto label03;

        goto label13;

     label04:
        if i8 > 0 goto label05;

        $i44 = i6 | -2147483648;

        if i1 == $i44 goto label06;

     label05:
        $l54 = 0L;

        goto label07;

     label06:
        $i43 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i50 = $i43 & 2147483647;

        $l53 = (long) $i50;

        $i49 = i7 + 65536;

        $l48 = (long) $i49;

        $l47 = $l48 << 32;

        $l54 = $l53 | $l47;

     label07:
        l57 = $l54;

        $b19 = l57 cmp 0L;

        if $b19 == 0 goto label10;

        $l37 = l0 >>> 32;

        $i36 = (int) $l37;

        $s42 = (short) $i36;

        s11 = neg $s42;

        if s11 >= 0 goto label08;

        $l45 = 200000000L;

        goto label09;

     label08:
        $i41 = s11 + 1;

        $l40 = (long) $i41;

        $l45 = $l40 * 2000000000L;

     label09:
        l4 = $l45;

        $l39 = staticinvoke <java.lang.System: long nanoTime()>();

        $l46 = $l39 + l4;

        l5 = $l46 - 2000000L;

        goto label11;

     label10:
        l5 = 0L;

        l4 = 0L;

     label11:
        $i22 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i22 != i1 goto label13;

        $l21 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b23 = $l21 cmp l0;

        if $b23 != 0 goto label13;

        r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l26 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r7, $l26, r0);

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = r7;

        $i24 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i24 != i1 goto label12;

        $l35 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b38 = $l35 cmp l0;

        if $b38 != 0 goto label12;

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r5.<sun.misc.Unsafe: void park(boolean,long)>(0, l4);

     label12:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker> = null;

        $r3 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l25 = <java.util.concurrent.ForkJoinPool: long PARKBLOCKER>;

        virtualinvoke $r3.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r7, $l25, null);

        $b29 = l4 cmp 0L;

        if $b29 == 0 goto label13;

        $l27 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b28 = $l27 cmp l0;

        if $b28 != 0 goto label13;

        $l32 = staticinvoke <java.lang.System: long nanoTime()>();

        $l33 = l5 - $l32;

        $b30 = $l33 cmp 0L;

        if $b30 > 0 goto label13;

        $r4 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l31 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z1 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l31, l0, l57);

        if $z1 == 0 goto label13;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        i2 = -1;

     label13:
        return i2;
    }

    private final void helpRelease(long, java.util.concurrent.ForkJoinPool$WorkQueue[], java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinPool$WorkQueue, int)
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l4, $l10, $l13, $l17, $l18, $l20, $l23;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, r3, r4, $r6;
        int i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i11, $i14, $i15, $i16, $i19, $i21, $i22, $i24, $i25;
        java.lang.Thread r5, $r9;
        byte $b12;
        sun.misc.Unsafe $r7, $r8;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.ForkJoinPool$WorkQueue[];

        r2 := @parameter2: java.util.concurrent.ForkJoinPool$WorkQueue;

        r3 := @parameter3: java.util.concurrent.ForkJoinPool$WorkQueue;

        i1 := @parameter4: int;

        if r2 == null goto label1;

        $i6 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i6 >= 0 goto label1;

        $i7 = (int) l0;

        i2 = $i7;

        if $i7 <= 0 goto label1;

        if r1 == null goto label1;

        $i8 = lengthof r1;

        $i9 = i2 & 65535;

        i3 = $i9;

        if $i8 <= $i9 goto label1;

        $r6 = r1[i3];

        r4 = $r6;

        if $r6 == null goto label1;

        $l10 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b12 = $l10 cmp l0;

        if $b12 != 0 goto label1;

        $i11 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i14 = $i11 & 2147483647;

        $l20 = (long) $i14;

        $l13 = l0 >>> 32;

        $i16 = (int) $l13;

        $i15 = $i16 + 65536;

        $l18 = (long) $i15;

        $l17 = $l18 << 32;

        l4 = $l20 | $l17;

        $i19 = i2 + 65536;

        i5 = $i19 & 2147483647;

        if r3 == null goto label1;

        $i22 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i22 != i1 goto label1;

        $i21 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i21 >= 0 goto label1;

        $i25 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i24 = i2 | -2147483648;

        if $i25 != $i24 goto label1;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l23 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l23, l0, l4);

        if $z0 == 0 goto label1;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i5;

        $r9 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        r5 = $r9;

        if $r9 == null goto label1;

        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r8.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r5);

     label1:
        return;
    }

    private int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r4, r5, $r10, $r11;
        java.util.concurrent.ForkJoinTask r2, r3, r7, r8, $r12, $r13, $r14, $r18, $r19, $r22, $r23, $r24, r26;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i35, $i37, $i38, $i39, $i41;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r6, $r9;
        java.util.concurrent.ForkJoinTask[] $r15, r25;
        java.lang.Object $r16;
        sun.misc.Unsafe $r17, $r20, $r21;
        long $l33, $l34, $l36;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        i1 = 0;

        if r2 == null goto label21;

        if r1 == null goto label21;

        $i9 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i10 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i12 = $i9 - $i10;

        if $i12 < 0 goto label21;

     label01:
        r3 = r2;

        r4 = r1;

     label02:
        $i11 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i3 = $i11;

        if $i11 >= 0 goto label03;

        i0 = i3;

        goto label21;

     label03:
        $r9 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r6 = $r9;

        if $r9 == null goto label21;

        $i13 = lengthof r6;

        $i15 = $i13 - 1;

        i2 = $i15;

        if $i15 > 0 goto label04;

        goto label21;

     label04:
        $i14 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint>;

        $i17 = $i14 | 1;

        $i16 = $i17 & i2;

        i4 = $i16;

        $r10 = r6[$i16];

        r5 = $r10;

        if $r10 == null goto label05;

        $r24 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r24 == r3 goto label09;

     label05:
        i5 = i4;

     label06:
        $i18 = i4 + 2;

        $i20 = $i18 & i2;

        i4 = $i20;

        $i19 = $i20 & 15;

        if $i19 != 1 goto label07;

        $i41 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i41 < 0 goto label01;

        $r23 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r23 == r3 goto label07;

        goto label01;

     label07:
        $r11 = r6[i4];

        r5 = $r11;

        if $r11 == null goto label08;

        $r12 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r12 != r3 goto label08;

        r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = i4;

        goto label09;

     label08:
        if i4 != i5 goto label06;

        goto label21;

     label09:
        $i21 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i21 >= 0 goto label10;

        goto label01;

     label10:
        $i22 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i6 = $i22;

        $i24 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i25 = $i22 - $i24;

        if $i25 >= 0 goto label16;

        $r15 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r25 = $r15;

        if $r15 == null goto label16;

        $i26 = lengthof r25;

        $i27 = $i26 - 1;

        $i31 = $i27 & i6;

        $i30 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i29 = $i31 << $i30;

        $i28 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        i7 = $i29 + $i28;

        $r17 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l33 = (long) i7;

        $r16 = virtualinvoke $r17.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r25, $l33);

        r7 = (java.util.concurrent.ForkJoinTask) $r16;

        $i32 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i32 < 0 goto label01;

        $r19 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r19 != r3 goto label01;

        $r18 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r18 == r3 goto label11;

        goto label01;

     label11:
        i0 = 1;

        $i35 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i35 != i6 goto label15;

        if r7 != null goto label12;

        goto label21;

     label12:
        $r20 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l34 = (long) i7;

        $z0 = virtualinvoke $r20.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r25, $l34, r7, null);

        if $z0 == 0 goto label15;

        $r21 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l36 = <java.util.concurrent.ForkJoinPool: long QBASE>;

        $i37 = i6 + 1;

        virtualinvoke $r21.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r5, $l36, $i37);

        r8 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        i8 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

     label13:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r7;

        virtualinvoke r7.<java.util.concurrent.ForkJoinTask: int doExec()>();

        $i39 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i39 < 0 goto label14;

        $i38 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i38 == i8 goto label14;

        $r22 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pop()>();

        r7 = $r22;

        if $r22 != null goto label13;

     label14:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r8;

        goto label21;

     label15:
        goto label19;

     label16:
        r26 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        $i23 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i23 < 0 goto label01;

        $r13 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        if $r13 != r3 goto label01;

        $r14 = r5.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        if $r14 == r3 goto label17;

        goto label01;

     label17:
        if r26 == null goto label21;

        i1 = i1 + 1;

        if i1 != 64 goto label18;

        goto label21;

     label18:
        r3 = r26;

        r4 = r5;

        goto label20;

     label19:
        goto label09;

     label20:
        goto label02;

     label21:
        return i0;
    }

    private int helpComplete(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r4, $r6;
        java.util.concurrent.CountedCompleter r2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r3, $r5;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11;
        long l4, $l12, $l14;
        boolean $z0, $z1;
        byte $b13;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.CountedCompleter;

        i1 = 0;

        $r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r3 = $r5;

        if $r5 == null goto label8;

        $i6 = lengthof r3;

        $i7 = $i6 - 1;

        i0 = $i7;

        if $i7 < 0 goto label8;

        if r1 == null goto label8;

        if r2 == null goto label8;

        i2 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex>;

        $i8 = i0 + i0;

        i3 = $i8 + 1;

        l4 = 0L;

        i5 = i3;

     label1:
        $i9 = r2.<java.util.concurrent.CountedCompleter: int status>;

        i1 = $i9;

        if $i9 >= 0 goto label2;

        goto label8;

     label2:
        $z0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean internalPopAndExecCC(java.util.concurrent.CountedCompleter)>(r2);

        if $z0 == 0 goto label3;

        i5 = i3;

        goto label7;

     label3:
        $i11 = r2.<java.util.concurrent.CountedCompleter: int status>;

        i1 = $i11;

        if $i11 >= 0 goto label4;

        goto label8;

     label4:
        $i10 = i2 & i0;

        $r6 = r3[$i10];

        r4 = $r6;

        if $r6 == null goto label5;

        $z1 = virtualinvoke r4.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean pollAndExecCC(java.util.concurrent.CountedCompleter)>(r2);

        if $z1 == 0 goto label5;

        i5 = i3;

        goto label7;

     label5:
        i5 = i5 + -1;

        if i5 >= 0 goto label7;

        $l14 = l4;

        $l12 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l4 = $l12;

        $b13 = $l14 cmp $l12;

        if $b13 != 0 goto label6;

        goto label8;

     label6:
        i5 = i3;

     label7:
        i2 = i2 + 2;

        goto label1;

     label8:
        return i1;
    }

    final boolean tryCompensate(long)
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l5, $l8, $l13, $l16, $l17, $l18, $l19, $l21, $l22, $l24, $l25, $l26, $l28, $l32, $l34, l35, l36;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1;
        short s1, s4, $s15;
        int i2, i3, i6, $i7, $i9, $i10, $i12, $i14, $i20, $i23, $i27, $i29, $i30, $i31, $i33;
        java.util.concurrent.ForkJoinPool$WorkQueue r2;
        java.lang.Thread r3, $r11;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r4, $r9;
        java.util.concurrent.ForkJoinWorkerThread r5, $r8;
        java.lang.Throwable r6, $r13, r15;
        byte $b11;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r7, $r10, $r12, $r14;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 := @parameter0: long;

        r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        s1 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        i2 = (int) l0;

        if r1 == null goto label11;

        $i7 = lengthof r1;

        $i9 = $i7 - 1;

        i3 = $i9;

        if $i9 < 0 goto label11;

        if i2 < 0 goto label11;

        $l8 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $b11 = $l8 cmp l0;

        if $b11 != 0 goto label11;

        $i10 = i2 & i3;

        r2 = r1[$i10];

        if i2 == 0 goto label03;

        if r2 == null goto label03;

        $i29 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i27 = $i29 & 2147483647;

        $l32 = (long) $i27;

        $l28 = l0 & -4294967296L;

        l5 = $l32 | $l28;

        $i33 = i2 + 65536;

        i6 = $i33 & 2147483647;

        $i31 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i30 = i2 | -2147483648;

        if $i31 != $i30 goto label02;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l34 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l34, l0, l5);

        if $z2 == 0 goto label02;

        r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = i6;

        $r11 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        r3 = $r11;

        if $r11 == null goto label01;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r14.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r3);

     label01:
        return 1;

     label02:
        goto label11;

     label03:
        $l13 = l0 >>> 32;

        $i12 = (int) $l13;

        $s15 = (short) $i12;

        s4 = $s15;

        if $s15 < 0 goto label05;

        $l22 = l0 >> 48;

        $i23 = (int) $l22;

        $i20 = $i23 + s1;

        if $i20 <= 1 goto label05;

        $l21 = l0 - 281474976710656L;

        $l26 = $l21 & -281474976710656L;

        $l25 = l0 & 281474976710655L;

        l35 = $l26 | $l25;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l24, l0, l35);

        if $z1 == 0 goto label04;

        return 1;

     label04:
        goto label11;

     label05:
        $i14 = s4 + s1;

        if $i14 >= 32767 goto label11;

        $l17 = l0 + 4294967296L;

        $l19 = $l17 & 281470681743360L;

        $l16 = l0 & -281470681743361L;

        l36 = $l19 | $l16;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l18 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l18, l0, l36);

        if $z0 == 0 goto label11;

        r15 = null;

        r5 = null;

     label06:
        $r9 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

        r4 = $r9;

        if $r9 == null goto label08;

        $r8 = interfaceinvoke r4.<java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory: java.util.concurrent.ForkJoinWorkerThread newThread(java.util.concurrent.ForkJoinPool)>(r0);

        r5 = $r8;

        if $r8 == null goto label08;

        virtualinvoke r5.<java.util.concurrent.ForkJoinWorkerThread: void start()>();

     label07:
        return 1;

     label08:
        goto label10;

     label09:
        $r13 := @caughtexception;

        r6 = $r13;

        r15 = r6;

     label10:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r5, r15);

     label11:
        return 0;

        catch java.lang.Throwable from label06 to label07 with label09;
    }

    final int awaitJoin(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask r2, r3, r4;
        int i0, $i2, $i3, $i4, $i5, $i12, $i13, $i14;
        long l1, $l6, $l7, $l8, $l9, $l10, $l11, l15;
        java.lang.Throwable r6, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        sun.misc.Unsafe $r7;
        java.util.concurrent.CountedCompleter $r9;
        java.lang.InterruptedException $r11;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        i0 = 0;

        if r2 == null goto label17;

        $i2 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i2;

        if $i2 < 0 goto label17;

        if r1 == null goto label17;

        r3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r2;

     label01:
        $z0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)>(r2);

        if $z0 == 0 goto label02;

        $i14 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i14;

        if $i14 >= 0 goto label01;

     label02:
        if i0 < 0 goto label03;

        $z4 = r2 instanceof java.util.concurrent.CountedCompleter;

        if $z4 == 0 goto label03;

        $r9 = (java.util.concurrent.CountedCompleter) r2;

        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int helpComplete(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.CountedCompleter)>(r1, $r9);

     label03:
        l1 = 0L;

     label04:
        if i0 < 0 goto label16;

        $i3 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i3;

        if $i3 < 0 goto label16;

        $i4 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r1, r2);

        i0 = $i4;

        if $i4 != 0 goto label04;

        $i5 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i5;

        if $i5 < 0 goto label04;

        $z1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryCompensate(long)>(l1);

        if $z1 != 0 goto label05;

        l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        goto label04;

     label05:
        $z2 = virtualinvoke r2.<java.util.concurrent.ForkJoinTask: boolean trySetSignal()>();

        if $z2 == 0 goto label15;

        $i12 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i12;

        if $i12 < 0 goto label15;

        r4 = r2;

        entermonitor r2;

     label06:
        $i13 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i13 < 0 goto label10;

     label07:
        virtualinvoke r2.<java.lang.Object: void wait()>();

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        goto label11;

     label10:
        virtualinvoke r2.<java.lang.Object: void notifyAll()>();

     label11:
        exitmonitor r4;

     label12:
        goto label15;

     label13:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r4;

     label14:
        throw r6;

     label15:
        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l11 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l6 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l15 = $l6;

        $l10 = l15 & 281474976710655L;

        $l8 = l15 & -281474976710656L;

        $l7 = $l8 + 281474976710656L;

        $l9 = $l10 | $l7;

        $z3 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l11, $l6, $l9);

        if $z3 == 0 goto label15;

        goto label04;

     label16:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r3;

     label17:
        return i0;

        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    final void helpJoinOnce(java.util.concurrent.ForkJoinPool$WorkQueue, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        java.util.concurrent.ForkJoinTask r2, r3;
        int i0, $i1, $i2, $i3, $i5;
        boolean $z0, $z1;
        java.util.concurrent.CountedCompleter $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 := @parameter1: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label5;

        if r2 == null goto label5;

        $i1 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i1;

        if $i1 < 0 goto label5;

        r3 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r2;

     label1:
        $z0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)>(r2);

        if $z0 == 0 goto label2;

        $i5 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i5;

        if $i5 >= 0 goto label1;

     label2:
        if i0 < 0 goto label4;

        $z1 = r2 instanceof java.util.concurrent.CountedCompleter;

        if $z1 == 0 goto label3;

        $r4 = (java.util.concurrent.CountedCompleter) r2;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: int helpComplete(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.CountedCompleter)>(r1, $r4);

     label3:
        $i2 = r2.<java.util.concurrent.ForkJoinTask: int status>;

        if $i2 < 0 goto label4;

        $i3 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int tryHelpStealer(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r1, r2);

        if $i3 > 0 goto label3;

     label4:
        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin> = r3;

     label5:
        return;
    }

    private java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r5;
        java.util.concurrent.ThreadLocalRandom $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r3 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        i0 = virtualinvoke $r3.<java.util.concurrent.ThreadLocalRandom: int nextInt()>();

     label1:
        i1 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        $r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r4;

        if $r4 == null goto label4;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        i2 = $i6;

        if $i6 < 0 goto label4;

        $i7 = i2 + 1;

        i3 = $i7 << 2;

     label2:
        if i3 < 0 goto label4;

        $i8 = i0 - i3;

        $i9 = $i8 << 1;

        $i11 = $i9 | 1;

        $i10 = $i11 & i2;

        $r5 = r1[$i10];

        r2 = $r5;

        if $r5 == null goto label3;

        $i14 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i12 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i13 = $i14 - $i12;

        if $i13 >= 0 goto label3;

        return r2;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        $i4 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i4 != i1 goto label5;

        return null;

     label5:
        goto label1;
    }

    final void helpQuiescePool(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3, $r6;
        java.util.concurrent.ForkJoinTask r2, r4, $r5, $r9, r11;
        boolean z0, $z1, $z2, $z3;
        long l0, l2, $l3, $l4, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l21, $l25, $l26, $l28, $l29, $l30, $l31, l33, l34;
        int i1, $i6, $i7, $i18, $i20, $i22, $i23, $i24;
        short $s5, $s19;
        sun.misc.Unsafe $r7, $r8, $r10;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

        r2 = r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        z0 = 1;

     label01:
        $r5 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask nextLocalTask()>();

        r4 = $r5;

        if $r5 == null goto label02;

        virtualinvoke r4.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label01;

     label02:
        $r6 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue()>();

        r3 = $r6;

        if $r6 == null goto label05;

        if z0 != 0 goto label04;

        z0 = 1;

     label03:
        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l29 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l28 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l0 = $l28;

        $l30 = l0 & 281474976710655L;

        $l25 = l0 & -281474976710656L;

        $l26 = $l25 + 281474976710656L;

        $l31 = $l30 | $l26;

        $z3 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l29, $l28, $l31);

        if $z3 == 0 goto label03;

     label04:
        $i23 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i1 = $i23;

        $i24 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i22 = $i23 - $i24;

        if $i22 >= 0 goto label09;

        $r9 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i1);

        r11 = $r9;

        if $r9 == null goto label09;

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r11;

        virtualinvoke r11.<java.util.concurrent.ForkJoinTask: int doExec()>();

        r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r2;

        goto label09;

     label05:
        if z0 == 0 goto label08;

        $l13 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l33 = $l13;

        $l17 = $l13 & 281474976710655L;

        $l15 = l33 & -281474976710656L;

        $l14 = $l15 - 281474976710656L;

        l2 = $l17 | $l14;

        $l16 = l2 >> 48;

        $i18 = (int) $l16;

        $s19 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i20 = $i18 + $s19;

        if $i20 != 0 goto label06;

        goto label10;

     label06:
        $r8 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l21 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z2 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l21, l33, l2);

        if $z2 == 0 goto label07;

        z0 = 0;

     label07:
        goto label09;

     label08:
        $l3 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l34 = $l3;

        $l4 = $l3 >> 48;

        $i7 = (int) $l4;

        $s5 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i6 = $i7 + $s5;

        if $i6 > 0 goto label09;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l12 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l11 = l34 & 281474976710655L;

        $l9 = l34 & -281474976710656L;

        $l8 = $l9 + 281474976710656L;

        $l10 = $l11 | $l8;

        $z1 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l12, l34, $l10);

        if $z1 == 0 goto label09;

        goto label10;

     label09:
        goto label01;

     label10:
        return;
    }

    final java.util.concurrent.ForkJoinTask nextTaskFor(java.util.concurrent.ForkJoinPool$WorkQueue)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue r1, r3, $r5;
        java.util.concurrent.ForkJoinTask r2, $r4, $r6, r7;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        $r4 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask nextLocalTask()>();

        r2 = $r4;

        if $r4 == null goto label2;

        return r2;

     label2:
        $r5 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue findNonEmptyStealQueue()>();

        r3 = $r5;

        if $r5 != null goto label3;

        return null;

     label3:
        $i1 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i0 = $i1;

        $i2 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = $i1 - $i2;

        if $i3 >= 0 goto label4;

        $r6 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i0);

        r7 = $r6;

        if $r6 == null goto label4;

        return r7;

     label4:
        goto label1;
    }

    static int getSurplusQueuedTaskCount()
    {
        java.lang.Thread r0, $r4;
        java.util.concurrent.ForkJoinWorkerThread r1, $r5;
        java.util.concurrent.ForkJoinPool r2, $r6;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, $r7;
        short s0, $s7, $s9, $s10, $s12, s14, s15, s16;
        int i1, i2, $i3, $i4, $i8, $i11;
        boolean $z0;
        long $l5, $l6;
        byte $b13;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r4;

        $z0 = $r4 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label6;

        $r5 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        r1 = $r5;

        $r6 = $r5.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        r2 = $r6;

        s0 = $r6.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $r7 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        r3 = $r7;

        $i4 = $r7.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i3 = r3.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i1 = $i4 - $i3;

        $l5 = r2.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l6 = $l5 >> 48;

        $i8 = (int) $l6;

        i2 = $i8 + s0;

        $s7 = s0 >>> 1;

        s14 = $s7;

        if i2 <= $s7 goto label1;

        $b13 = 0;

        goto label5;

     label1:
        $s10 = s14 >>> 1;

        s15 = $s10;

        if i2 <= $s10 goto label2;

        $b13 = 1;

        goto label5;

     label2:
        $s9 = s15 >>> 1;

        s16 = $s9;

        if i2 <= $s9 goto label3;

        $b13 = 2;

        goto label5;

     label3:
        $s12 = s16 >>> 1;

        if i2 <= $s12 goto label4;

        $b13 = 4;

        goto label5;

     label4:
        $b13 = 8;

     label5:
        $i11 = i1 - $b13;

        return $i11;

     label6:
        return 0;
    }

    private boolean tryTerminate(boolean, boolean)
    {
        java.util.concurrent.ForkJoinPool r0, r1, $r6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int i0, i1, i2, i3, i4, $i7, $i13, $i15, $i16, $i17, $i19, $i25, $i26, $i27, $i28, $i29, $i32, $i33, $i35, $i36, $i37, $i38, $i41, $i43, $i44, i46, i48, i49, i50;
        java.lang.Throwable r2, $r21, $r22;
        java.util.concurrent.ForkJoinWorkerThread r3, $r12;
        long l5, l6, $l8, $l9, $l10, $l12, $l14, $l18, $l20, $l21, $l22, $l23, $l24, $l31, $l34, $l42, $l45, l47;
        java.lang.Thread r5, $r11;
        byte $b11;
        sun.misc.Unsafe $r7, $r10, $r14, $r15, $r19, $r20;
        java.util.concurrent.ForkJoinPool$WorkQueue[] $r8, $r17, r23, r25;
        java.util.concurrent.ForkJoinPool$WorkQueue $r9, $r13, $r16, r24, r26, r27;
        short $s30, $s39, $s40;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r6 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        if r0 != $r6 goto label01;

        return 0;

     label01:
        $i7 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        i0 = $i7;

        if $i7 < 0 goto label05;

        if z1 != 0 goto label02;

        return 0;

     label02:
        $i37 = i0 & 2;

        if $i37 != 0 goto label03;

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l42 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        i46 = i0 + 2;

        $z7 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l42, i0, i46);

        if $z7 != 0 goto label04;

     label03:
        i46 = specialinvoke r0.<java.util.concurrent.ForkJoinPool: int acquirePlock()>();

     label04:
        $i43 = i46 + 2;

        $i44 = $i43 & 2147483647;

        i1 = $i44 | -2147483648;

        $r20 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l45 = <java.util.concurrent.ForkJoinPool: long PLOCK>;

        $z6 = virtualinvoke $r20.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l45, i46, i1);

        if $z6 != 0 goto label05;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void releasePlock(int)>(i1);

     label05:
        $l9 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l47 = $l9;

        $l8 = $l9 & 2147483648L;

        $b11 = $l8 cmp 0L;

        if $b11 == 0 goto label11;

        $l34 = l47 >>> 32;

        $i38 = (int) $l34;

        $s40 = (short) $i38;

        $s39 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i41 = $s40 + $s39;

        if $i41 > 0 goto label10;

        r1 = r0;

        entermonitor r0;

     label06:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r22 := @caughtexception;

        r2 = $r22;

        exitmonitor r1;

     label09:
        throw r2;

     label10:
        return 1;

     label11:
        if z0 != 0 goto label16;

        $l31 = l47 >> 48;

        $i29 = (int) $l31;

        $s30 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i33 = $i29 + $s30;

        if $i33 <= 0 goto label12;

        return 0;

     label12:
        $r17 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r23 = $r17;

        if $r17 == null goto label16;

        i2 = 0;

     label13:
        $i32 = lengthof r23;

        if i2 >= $i32 goto label16;

        $r16 = r23[i2];

        r24 = $r16;

        if $r16 == null goto label15;

        $z5 = virtualinvoke r24.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z5 == 0 goto label14;

        $i36 = i2 & 1;

        if $i36 == 0 goto label15;

        $i35 = r24.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i35 < 0 goto label15;

     label14:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue)>(r23, r24);

        return 0;

     label15:
        i2 = i2 + 1;

        goto label13;

     label16:
        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l12 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $l10 = l47 | 2147483648L;

        $z2 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l12, l47, $l10);

        if $z2 == 0 goto label05;

        i48 = 0;

     label17:
        if i48 >= 3 goto label27;

        $r8 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r25 = $r8;

        if $r8 == null goto label26;

        i3 = lengthof r25;

        i4 = 0;

     label18:
        if i4 >= i3 goto label24;

        $r13 = r25[i4];

        r26 = $r13;

        if $r13 == null goto label23;

        r26.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        if i48 <= 0 goto label23;

        virtualinvoke r26.<java.util.concurrent.ForkJoinPool$WorkQueue: void cancelAll()>();

        if i48 <= 1 goto label23;

        $r12 = r26.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner>;

        r3 = $r12;

        if $r12 == null goto label23;

        $z4 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z4 != 0 goto label22;

     label19:
        virtualinvoke r3.<java.lang.Thread: void interrupt()>();

     label20:
        goto label22;

     label21:
        $r21 := @caughtexception;

     label22:
        $r15 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r15.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r3);

     label23:
        i4 = i4 + 1;

        goto label18;

     label24:
        $l14 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l5 = $l14;

        $i13 = (int) $l14;

        $i16 = $i13 & 2147483647;

        i49 = $i16;

        if $i16 == 0 goto label26;

        $i15 = i49 & 65535;

        i50 = $i15;

        if $i15 >= i3 goto label26;

        if i50 < 0 goto label26;

        $r9 = r25[i50];

        r27 = $r9;

        if $r9 == null goto label26;

        $i19 = r27.<java.util.concurrent.ForkJoinPool$WorkQueue: int nextWait>;

        $i17 = $i19 & 2147483647;

        $l23 = (long) $i17;

        $l18 = l5 + 281474976710656L;

        $l22 = $l18 & -281474976710656L;

        $l21 = $l23 | $l22;

        $l20 = l5 & 281472829227008L;

        l6 = $l21 | $l20;

        $i26 = r27.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        $i25 = i49 | -2147483648;

        if $i26 != $i25 goto label25;

        $r10 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.ForkJoinPool: long CTL>;

        $z3 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l24, l5, l6);

        if $z3 == 0 goto label25;

        $i28 = i49 + 65536;

        $i27 = $i28 & 2147483647;

        r27.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount> = $i27;

        r27.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = -1;

        $r11 = r27.<java.util.concurrent.ForkJoinPool$WorkQueue: java.lang.Thread parker>;

        r5 = $r11;

        if $r11 == null goto label25;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        virtualinvoke $r14.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r5);

     label25:
        goto label24;

     label26:
        i48 = i48 + 1;

        goto label17;

     label27:
        goto label05;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label19 to label20 with label21;
    }

    static java.util.concurrent.ForkJoinPool$WorkQueue commonSubmitterQueue()
    {
        java.util.concurrent.ForkJoinPool$Submitter r0, $r5;
        java.util.concurrent.ForkJoinPool r1, $r6;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue $r8;

        $r3 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (java.util.concurrent.ForkJoinPool$Submitter) $r4;

        r0 = $r5;

        if $r5 == null goto label1;

        $r6 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        r1 = $r6;

        if $r6 == null goto label1;

        $r7 = r1.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r2 = $r7;

        if $r7 == null goto label1;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        i0 = $i2;

        if $i2 < 0 goto label1;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i4 = i0 & $i3;

        $i5 = $i4 & 126;

        $r8 = r2[$i5];

        goto label2;

     label1:
        $r8 = null;

     label2:
        return $r8;
    }

    final boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r8;
        java.util.concurrent.ForkJoinTask[] r3, $r9, $r13;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        java.util.concurrent.ForkJoinPool$Submitter r4;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r5;
        boolean z0, $z1, $z2;
        long l2, $l19;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7, $r10;
        sun.misc.Unsafe $r11, $r12, $r14;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        z0 = 0;

        if r4 == null goto label2;

        if r5 == null goto label2;

        $i3 = lengthof r5;

        $i4 = $i3 - 1;

        i0 = $i4;

        if $i4 < 0 goto label2;

        $i5 = r4.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        $i7 = $i5 & i0;

        $i6 = $i7 & 126;

        $r8 = r5[$i6];

        r2 = $r8;

        if $r8 == null goto label2;

        $i9 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i8 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = $i8;

        if $i9 == $i8 goto label2;

        $r9 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r3 = $r9;

        if $r9 == null goto label2;

        $i11 = lengthof r3;

        $i13 = $i11 - 1;

        $i10 = i1 - 1;

        $i15 = $i13 & $i10;

        $i12 = <java.util.concurrent.ForkJoinPool: int ASHIFT>;

        $i17 = $i15 << $i12;

        $i14 = <java.util.concurrent.ForkJoinPool: int ABASE>;

        $i16 = $i17 + $i14;

        l2 = (long) $i16;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r10 = virtualinvoke $r11.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r3, l2);

        if $r10 != r1 goto label2;

        $r12 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $l19 = <java.util.concurrent.ForkJoinPool: long QLOCK>;

        $z1 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r2, $l19, 0, 1);

        if $z1 == 0 goto label2;

        $i18 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i18 != i1 goto label1;

        $r13 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r13 != r3 goto label1;

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $z2 = virtualinvoke $r14.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r3, l2, r1, null);

        if $z2 == 0 goto label1;

        $i20 = i1 - 1;

        r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i20;

        z0 = 1;

     label1:
        r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label2:
        return z0;
    }

    final int externalHelpComplete(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.CountedCompleter r1;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, r5, $r8, $r9;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i18;
        java.util.concurrent.ForkJoinPool$Submitter r3;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r4;
        long l4, $l15, $l17;
        java.lang.ThreadLocal $r6;
        java.lang.Object $r7;
        boolean $z0, $z1;
        byte $b16;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        $r6 = <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters>;

        $r7 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.util.concurrent.ForkJoinPool$Submitter) $r7;

        r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        i2 = 0;

        if r3 == null goto label8;

        if r4 == null goto label8;

        $i6 = lengthof r4;

        $i8 = $i6 - 1;

        i0 = $i8;

        if $i8 < 0 goto label8;

        $i7 = r3.<java.util.concurrent.ForkJoinPool$Submitter: int seed>;

        i1 = $i7;

        $i10 = $i7 & i0;

        $i9 = $i10 & 126;

        $r8 = r4[$i9];

        r2 = $r8;

        if $r8 == null goto label8;

        if r1 == null goto label8;

        $i11 = i0 + i0;

        i3 = $i11 + 1;

        l4 = 0L;

        i18 = i1 | 1;

        i5 = i3;

     label1:
        $i12 = r1.<java.util.concurrent.CountedCompleter: int status>;

        i2 = $i12;

        if $i12 >= 0 goto label2;

        goto label8;

     label2:
        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean externalPopAndExecCC(java.util.concurrent.CountedCompleter)>(r1);

        if $z0 == 0 goto label3;

        i5 = i3;

        goto label7;

     label3:
        $i14 = r1.<java.util.concurrent.CountedCompleter: int status>;

        i2 = $i14;

        if $i14 >= 0 goto label4;

        goto label8;

     label4:
        $i13 = i18 & i0;

        $r9 = r4[$i13];

        r5 = $r9;

        if $r9 == null goto label5;

        $z1 = virtualinvoke r5.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean pollAndExecCC(java.util.concurrent.CountedCompleter)>(r1);

        if $z1 == 0 goto label5;

        i5 = i3;

        goto label7;

     label5:
        i5 = i5 + -1;

        if i5 >= 0 goto label7;

        $l17 = l4;

        $l15 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        l4 = $l15;

        $b16 = $l17 cmp $l15;

        if $b16 != 0 goto label6;

        goto label8;

     label6:
        i5 = i3;

     label7:
        i18 = i18 + 2;

        goto label1;

     label8:
        return i2;
    }

    public void <init>()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runtime $r1;
        int $i0, $i1;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>(32767, $i0);

        $r2 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>($i1, $r2, null, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        $r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>(i0, $r1, null, 0);

        return;
    }

    public void <init>(int, java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory, java.lang.Thread$UncaughtExceptionHandler, boolean)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, $i1, $i3;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1, $r3;
        java.lang.Thread$UncaughtExceptionHandler r2;
        boolean z0;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        byte $b2;
        java.lang.String $r8;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory;

        r2 := @parameter2: java.lang.Thread$UncaughtExceptionHandler;

        z0 := @parameter3: boolean;

        $i1 = staticinvoke <java.util.concurrent.ForkJoinPool: int checkParallelism(int)>(i0);

        $r3 = staticinvoke <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory checkFactory(java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory)>(r1);

        if z0 == 0 goto label1;

        $b2 = 1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ForkJoinPool-");

        $i3 = staticinvoke <java.util.concurrent.ForkJoinPool: int nextPoolId()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-worker-");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,int,java.lang.String)>($i1, $r3, r2, $b2, $r8);

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        return;
    }

    private static int checkParallelism(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        if i0 <= 32767 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        return i0;
    }

    private static java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory checkFactory(java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory)
    {
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return r0;
    }

    private void <init>(int, java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory, java.lang.Thread$UncaughtExceptionHandler, int, java.lang.String)
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, $i5;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r1;
        java.lang.Thread$UncaughtExceptionHandler r2;
        java.lang.String r3;
        long l2, $l6, $l7, $l8, $l9, $l10;
        short $s3, $s4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory;

        r2 := @parameter2: java.lang.Thread$UncaughtExceptionHandler;

        i1 := @parameter3: int;

        r3 := @parameter4: java.lang.String;

        specialinvoke r0.<java.util.concurrent.AbstractExecutorService: void <init>()>();

        r0.<java.util.concurrent.ForkJoinPool: java.lang.String workerNamePrefix> = r3;

        r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory> = r1;

        r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh> = r2;

        $s3 = (short) i1;

        r0.<java.util.concurrent.ForkJoinPool: short mode> = $s3;

        $s4 = (short) i0;

        r0.<java.util.concurrent.ForkJoinPool: short parallelism> = $s4;

        $i5 = neg i0;

        l2 = (long) $i5;

        $l6 = l2 << 48;

        $l9 = $l6 & -281474976710656L;

        $l7 = l2 << 32;

        $l8 = $l7 & 281470681743360L;

        $l10 = $l9 | $l8;

        r0.<java.util.concurrent.ForkJoinPool: long ctl> = $l10;

        return;
    }

    public static java.util.concurrent.ForkJoinPool commonPool()
    {
        java.util.concurrent.ForkJoinPool $r0;

        $r0 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        return $r0;
    }

    public java.lang.Object invoke(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        $r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinTask: java.lang.Object join()>();

        return $r2;
    }

    public void execute(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return;
    }

    public void execute(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask r2;
        boolean $z0;
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r1 instanceof java.util.concurrent.ForkJoinTask;

        if $z0 == 0 goto label2;

        r2 = (java.util.concurrent.ForkJoinTask) r1;

        goto label3;

     label2:
        $r3 = new java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$RunnableExecuteAction: void <init>(java.lang.Runnable)>(r1);

        r2 = $r3;

     label3:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return;
    }

    public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinTask r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r1);

        return r1;
    }

    public java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask$AdaptedCallable r2, $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r1);

        r2 = $r3;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return r2;
    }

    public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask$AdaptedRunnable r3, $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r4 = new java.util.concurrent.ForkJoinTask$AdaptedRunnable;

        specialinvoke $r4.<java.util.concurrent.ForkJoinTask$AdaptedRunnable: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        r3 = $r4;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r3);

        return r3;
    }

    public java.util.concurrent.ForkJoinTask submit(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask r2;
        boolean $z0;
        java.util.concurrent.ForkJoinTask$AdaptedRunnableAction $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        $z0 = r1 instanceof java.util.concurrent.ForkJoinTask;

        if $z0 == 0 goto label2;

        r2 = (java.util.concurrent.ForkJoinTask) r1;

        goto label3;

     label2:
        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedRunnableAction;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void <init>(java.lang.Runnable)>(r1);

        r2 = $r3;

     label3:
        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r2);

        return r2;
    }

    public java.util.List invokeAll(java.util.Collection)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r7, r17;
        boolean z0, $z1;
        java.util.Iterator r3;
        java.util.concurrent.Callable r4;
        java.util.concurrent.ForkJoinTask$AdaptedCallable r5, $r13;
        java.lang.Throwable r6, $r14;
        int i0, i1, $i2, i3, i4, i5, i6;
        java.util.concurrent.Future $r8, $r15;
        java.lang.Object $r9, $r10, $r11, $r16;
        java.util.concurrent.ForkJoinTask $r12;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.Collection;

        $r7 = new java.util.ArrayList;

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r7.<java.util.ArrayList: void <init>(int)>($i2);

        r2 = $r7;

        z0 = 0;

     label01:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.Callable) $r11;

        $r13 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r13.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r4);

        r5 = $r13;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r5);

        goto label02;

     label03:
        i3 = 0;

        i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label04:
        if i3 >= i4 goto label05;

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r12 = (java.util.concurrent.ForkJoinTask) $r10;

        virtualinvoke $r12.<java.util.concurrent.ForkJoinTask: void quietlyJoin()>();

        i3 = i3 + 1;

        goto label04;

     label05:
        z0 = 1;

        r17 = r2;

     label06:
        if z0 != 0 goto label08;

        i5 = 0;

        i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label07:
        if i5 >= i6 goto label08;

        $r9 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r8 = (java.util.concurrent.Future) $r9;

        interfaceinvoke $r8.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        i5 = i5 + 1;

        goto label07;

     label08:
        return r17;

     label09:
        $r14 := @caughtexception;

        r6 = $r14;

     label10:
        if z0 != 0 goto label12;

        i0 = 0;

        i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label11:
        if i0 >= i1 goto label12;

        $r16 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r15 = (java.util.concurrent.Future) $r16;

        interfaceinvoke $r15.<java.util.concurrent.Future: boolean cancel(boolean)>(0);

        i0 = i0 + 1;

        goto label11;

     label12:
        throw r6;

        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory getFactory()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory factory>;

        return $r1;
    }

    public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Thread$UncaughtExceptionHandler $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r1 = r0.<java.util.concurrent.ForkJoinPool: java.lang.Thread$UncaughtExceptionHandler ueh>;

        return $r1;
    }

    public int getParallelism()
    {
        java.util.concurrent.ForkJoinPool r0;
        short s0, $s1, $s2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $s1 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        s0 = $s1;

        if $s1 <= 0 goto label1;

        $s2 = s0;

        goto label2;

     label1:
        $s2 = 1;

     label2:
        return $s2;
    }

    public static int getCommonPoolParallelism()
    {
        int $i0;

        $i0 = <java.util.concurrent.ForkJoinPool: int commonParallelism>;

        return $i0;
    }

    public int getPoolSize()
    {
        java.util.concurrent.ForkJoinPool r0;
        long $l0, $l1;
        int $i2, $i5;
        short $s3, $s4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $s4 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        $s3 = (short) $i2;

        $i5 = $s4 + $s3;

        return $i5;
    }

    public boolean getAsyncMode()
    {
        java.util.concurrent.ForkJoinPool r0;
        short $s0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $s0 = r0.<java.util.concurrent.ForkJoinPool: short mode>;

        if $s0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getRunningThreadCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, $i2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 = 0;

        $r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r3;

        if $r3 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r4 = r1[i1];

        r2 = $r4;

        if $r4 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isApparentlyUnblocked()>();

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return i0;
    }

    public int getActiveThreadCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, $i3, $i5;
        long $l1, $l2;
        short $s4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $s4 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $l1 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l2 = $l1 >> 48;

        $i3 = (int) $l2;

        i0 = $s4 + $i3;

        if i0 > 0 goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $i5 = i0;

     label2:
        return $i5;
    }

    public boolean isQuiescent()
    {
        java.util.concurrent.ForkJoinPool r0;
        long $l0, $l1;
        int $i2, $i4;
        short $s3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $s3 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = $l0 >> 48;

        $i2 = (int) $l1;

        $i4 = $s3 + $i2;

        if $i4 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getStealCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l4;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r4;
        int i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        $r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r3;

        if $r3 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r4 = r1[i1];

        r2 = $r4;

        if $r4 == null goto label2;

        $i3 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $l4 = (long) $i3;

        l0 = l0 + $l4;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return l0;
    }

    public long getQueuedTaskCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l4;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r4;
        int i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = 0L;

        $r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r3;

        if $r3 == null goto label3;

        i1 = 1;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r4 = r1[i1];

        r2 = $r4;

        if $r4 == null goto label2;

        $i3 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        $l4 = (long) $i3;

        l0 = l0 + $l4;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return l0;
    }

    public int getQueuedSubmissionCount()
    {
        java.util.concurrent.ForkJoinPool r0;
        int i0, i1, $i2, $i3;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        i0 = 0;

        $r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r3;

        if $r3 == null goto label3;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r4 = r1[i1];

        r2 = $r4;

        if $r4 == null goto label2;

        $i3 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        i0 = i0 + $i3;

     label2:
        i1 = i1 + 2;

        goto label1;

     label3:
        return i0;
    }

    public boolean hasQueuedSubmissions()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r3;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r4;
        int i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r3 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r3;

        if $r3 == null goto label3;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r4 = r1[i0];

        r2 = $r4;

        if $r4 == null goto label2;

        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        return 1;

     label2:
        i0 = i0 + 2;

        goto label1;

     label3:
        return 0;
    }

    protected java.util.concurrent.ForkJoinTask pollSubmission()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r5;
        java.util.concurrent.ForkJoinTask r3, $r6;
        int i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r4;

        if $r4 == null goto label3;

        i0 = 0;

     label1:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label3;

        $r5 = r1[i0];

        r2 = $r5;

        if $r5 == null goto label2;

        $r6 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        r3 = $r6;

        if $r6 == null goto label2;

        return r3;

     label2:
        i0 = i0 + 2;

        goto label1;

     label3:
        return null;
    }

    protected int drainTasksTo(java.util.Collection)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.Collection r1;
        int i0, i1, $i2;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r2, $r5;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, $r6;
        java.util.concurrent.ForkJoinTask r4, $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.Collection;

        i0 = 0;

        $r5 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r2 = $r5;

        if $r5 == null goto label4;

        i1 = 0;

     label1:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label4;

        $r6 = r2[i1];

        r3 = $r6;

        if $r6 == null goto label3;

     label2:
        $r7 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        r4 = $r7;

        if $r7 == null goto label3;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r4);

        i0 = i0 + 1;

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, l1, l3, l4, $l8, $l12, $l14, $l18, $l20, $l21;
        int i2, i5, i6, i7, $i10, $i11, $i15, $i16, $i17, $i19, i23;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r1, $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue r2, $r28;
        java.lang.String r3, $r7, $r24, $r25, $r27;
        short $s9, s22;
        byte $b13;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r26;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = 0L;

        l1 = 0L;

        i2 = 0;

        l3 = r0.<java.util.concurrent.ForkJoinPool: long stealCount>;

        l4 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $r4 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r1 = $r4;

        if $r4 == null goto label04;

        i5 = 0;

     label01:
        $i17 = lengthof r1;

        if i5 >= $i17 goto label04;

        $r28 = r1[i5];

        r2 = $r28;

        if $r28 == null goto label03;

        i6 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

        $i16 = i5 & 1;

        if $i16 != 0 goto label02;

        $l21 = (long) i6;

        l1 = l1 + $l21;

        goto label03;

     label02:
        $l20 = (long) i6;

        l0 = l0 + $l20;

        $i19 = r2.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $l18 = (long) $i19;

        l3 = l3 + $l18;

        $z0 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean isApparentlyUnblocked()>();

        if $z0 == 0 goto label03;

        i2 = i2 + 1;

     label03:
        i5 = i5 + 1;

        goto label01;

     label04:
        s22 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $l8 = l4 >>> 32;

        $i10 = (int) $l8;

        $s9 = (short) $i10;

        i23 = s22 + $s9;

        $l12 = l4 >> 48;

        $i11 = (int) $l12;

        i7 = s22 + $i11;

        if i7 >= 0 goto label05;

        i7 = 0;

     label05:
        $l14 = l4 & 2147483648L;

        $b13 = $l14 cmp 0L;

        if $b13 == 0 goto label08;

        if i23 != 0 goto label06;

        $r25 = "Terminated";

        goto label07;

     label06:
        $r25 = "Terminating";

     label07:
        r3 = $r25;

        goto label11;

     label08:
        $i15 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i15 >= 0 goto label09;

        $r24 = "Shutting down";

        goto label10;

     label09:
        $r24 = "Running";

     label10:
        r3 = $r24;

     label11:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", parallelism = ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s22);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        $r12 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active = ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", running = ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", steals = ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", tasks = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", submissions = ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;
    }

    public void shutdown()
    {
        java.util.concurrent.ForkJoinPool r0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(0, 1);

        return;
    }

    public java.util.List shutdownNow()
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.List $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        staticinvoke <java.util.concurrent.ForkJoinPool: void checkPermission()>();

        specialinvoke r0.<java.util.concurrent.ForkJoinPool: boolean tryTerminate(boolean,boolean)>(1, 1);

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l1, $l3;
        byte $b2;
        int $i4, $i7;
        short $s5, $s6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = l0 & 2147483648L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $l3 = l0 >>> 32;

        $i4 = (int) $l3;

        $s6 = (short) $i4;

        $s5 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i7 = $s6 + $s5;

        if $i7 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isTerminating()
    {
        java.util.concurrent.ForkJoinPool r0;
        long l0, $l1, $l3;
        byte $b2;
        int $i4, $i7;
        short $s5, $s6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 = r0.<java.util.concurrent.ForkJoinPool: long ctl>;

        $l1 = l0 & 2147483648L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        $l3 = l0 >>> 32;

        $i4 = (int) $l3;

        $s6 = (short) $i4;

        $s5 = r0.<java.util.concurrent.ForkJoinPool: short parallelism>;

        $i7 = $s6 + $s5;

        if $i7 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isShutdown()
    {
        java.util.concurrent.ForkJoinPool r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        $i0 = r0.<java.util.concurrent.ForkJoinPool: int plock>;

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean awaitTermination(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.ForkJoinPool r0, r2, $r4;
        long l0, l1, l2, l3, $l4, $l8, $l9;
        java.util.concurrent.TimeUnit r1, $r6;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z1, $z2;
        byte $b5, $b6, $b7;
        java.lang.InterruptedException $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label01;

        $r7 = new java.lang.InterruptedException;

        specialinvoke $r7.<java.lang.InterruptedException: void <init>()>();

        throw $r7;

     label01:
        $r4 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        if r0 != $r4 goto label02;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return 0;

     label02:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean isTerminated()>();

        if $z1 == 0 goto label03;

        return 1;

     label03:
        $b5 = l1 cmp 0L;

        if $b5 > 0 goto label04;

        return 0;

     label04:
        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l4 + l1;

        r2 = r0;

        entermonitor r0;

     label05:
        $z2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean isTerminated()>();

        if $z2 == 0 goto label07;

        exitmonitor r2;

     label06:
        return 1;

     label07:
        $b6 = l1 cmp 0L;

        if $b6 > 0 goto label09;

        exitmonitor r2;

     label08:
        return 0;

     label09:
        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l3 = virtualinvoke $r6.<java.util.concurrent.TimeUnit: long toMillis(long)>(l1);

        $b7 = l3 cmp 0L;

        if $b7 <= 0 goto label10;

        $l8 = l3;

        goto label11;

     label10:
        $l8 = 1L;

     label11:
        virtualinvoke r0.<java.lang.Object: void wait(long)>($l8);

        $l9 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l2 - $l9;

        goto label05;

     label12:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label13:
        throw r3;

        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label13 with label12;
    }

    public boolean awaitQuiescence(long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ForkJoinPool r0, $r11;
        long l0, l1, l2, $l15, $l17;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.ForkJoinWorkerThread r2, $r10;
        java.lang.Thread r3;
        java.util.concurrent.ForkJoinPool$WorkQueue[] r4, $r7;
        int i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16;
        boolean z0, $z1, $z2;
        java.util.concurrent.ForkJoinTask r5, $r9;
        java.util.concurrent.ForkJoinPool$WorkQueue r6, $r8, $r12;
        byte $b18;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = r3 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z1 == 0 goto label1;

        $r10 = (java.util.concurrent.ForkJoinWorkerThread) r3;

        r2 = $r10;

        $r11 = $r10.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        if $r11 != r0 goto label1;

        $r12 = r2.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool: void helpQuiescePool(java.util.concurrent.ForkJoinPool$WorkQueue)>($r12);

        return 1;

     label1:
        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        i3 = 0;

        z0 = 1;

     label2:
        $z2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: boolean isQuiescent()>();

        if $z2 != 0 goto label8;

        $r7 = r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        r4 = $r7;

        if $r7 == null goto label8;

        $i8 = lengthof r4;

        $i7 = $i8 - 1;

        i4 = $i7;

        if $i7 < 0 goto label8;

        if z0 != 0 goto label4;

        $l15 = staticinvoke <java.lang.System: long nanoTime()>();

        $l17 = $l15 - l2;

        $b18 = $l17 cmp l1;

        if $b18 <= 0 goto label3;

        return 0;

     label3:
        staticinvoke <java.lang.Thread: void yield()>();

     label4:
        z0 = 0;

        $i10 = i4 + 1;

        i5 = $i10 << 2;

     label5:
        if i5 < 0 goto label7;

        $i9 = i3;

        i3 = i3 + 1;

        $i11 = $i9 & i4;

        $r8 = r4[$i11];

        r6 = $r8;

        if $r8 == null goto label6;

        $i13 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i6 = $i13;

        $i12 = r6.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i16 = $i13 - $i12;

        if $i16 >= 0 goto label6;

        z0 = 1;

        $r9 = virtualinvoke r6.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pollAt(int)>(i6);

        r5 = $r9;

        if $r9 == null goto label7;

        virtualinvoke r5.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label7;

     label6:
        i5 = i5 + -1;

        goto label5;

     label7:
        goto label2;

     label8:
        return 1;
    }

    static void quiesceCommonPool()
    {
        java.util.concurrent.TimeUnit $r0;
        java.util.concurrent.ForkJoinPool $r1;

        $r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r1.<java.util.concurrent.ForkJoinPool: boolean awaitQuiescence(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r0);

        return;
    }

    public static void managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker) throws java.lang.InterruptedException
    {
        java.util.concurrent.ForkJoinPool$ManagedBlocker r0;
        java.lang.Thread r1;
        java.util.concurrent.ForkJoinPool r2;
        java.lang.Throwable r3, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.concurrent.ForkJoinWorkerThread $r4;
        long $l0;

        r0 := @parameter0: java.util.concurrent.ForkJoinPool$ManagedBlocker;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = r1 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label8;

        $r4 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        r2 = $r4.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

     label1:
        $z3 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z3 != 0 goto label7;

        $l0 = r2.<java.util.concurrent.ForkJoinPool: long ctl>;

        $z4 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool: boolean tryCompensate(long)>($l0);

        if $z4 == 0 goto label1;

     label2:
        $z5 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z5 != 0 goto label3;

        $z6 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean block()>();

        if $z6 == 0 goto label2;

     label3:
        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

        r3 = $r5;

     label5:
        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

        throw r3;

     label6:
        goto label7;

     label7:
        goto label9;

     label8:
        $z1 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean isReleasable()>();

        if $z1 != 0 goto label9;

        $z2 = interfaceinvoke r0.<java.util.concurrent.ForkJoinPool$ManagedBlocker: boolean block()>();

        if $z2 == 0 goto label8;

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask$AdaptedRunnable $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.util.concurrent.ForkJoinTask$AdaptedRunnable;

        specialinvoke $r3.<java.util.concurrent.ForkJoinTask$AdaptedRunnable: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask$AdaptedCallable $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r2.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    private static java.util.concurrent.ForkJoinPool makeCommonPool()
    {
        int i0, $i1, $i2;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory r0;
        java.lang.Thread$UncaughtExceptionHandler r1;
        java.lang.String r2, r3, r4;
        java.util.concurrent.ForkJoinPool $r5;
        java.lang.Runtime $r6;
        java.lang.ClassLoader $r7, $r11;
        java.lang.Class $r8, $r10;
        java.lang.Object $r9, $r12;
        java.lang.Exception $r13;

        i0 = -1;

        r0 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        r1 = null;

     label1:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.parallelism");

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.threadFactory");

        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.concurrent.ForkJoinPool.common.exceptionHandler");

        if r2 == null goto label2;

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        if r3 == null goto label3;

        $r11 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r10 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r3);

        $r12 = virtualinvoke $r10.<java.lang.Class: java.lang.Object newInstance()>();

        r0 = (java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory) $r12;

     label3:
        if r4 == null goto label4;

        $r7 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r8 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r4);

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.Object newInstance()>();

        r1 = (java.lang.Thread$UncaughtExceptionHandler) $r9;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

     label6:
        if i0 >= 0 goto label7;

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r6.<java.lang.Runtime: int availableProcessors()>();

        $i2 = $i1 - 1;

        i0 = $i2;

        if $i2 >= 0 goto label7;

        i0 = 0;

     label7:
        if i0 <= 32767 goto label8;

        i0 = 32767;

     label8:
        $r5 = new java.util.concurrent.ForkJoinPool;

        specialinvoke $r5.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,int,java.lang.String)>(i0, r0, r1, 0, "ForkJoinPool.commonPool-worker-");

        return $r5;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public volatile java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.ForkJoinTask $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    public volatile java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.ForkJoinTask $r3;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public volatile java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinPool r0;
        java.lang.Runnable r1;
        java.util.concurrent.ForkJoinTask $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool;

        r1 := @parameter0: java.lang.Runnable;

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask submit(java.lang.Runnable)>(r1);

        return $r2;
    }

    static java.util.concurrent.ForkJoinPool access$000()
    {
        java.util.concurrent.ForkJoinPool $r0;

        $r0 = staticinvoke <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool makeCommonPool()>();

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class r0, r1, r2, r3;
        int i0, $i8, $i9, $i10, $i11, $i12;
        sun.misc.Unsafe $r4, $r5, $r7, $r9, $r11, $r14, $r15, $r18, $r19, $r20;
        java.lang.reflect.Field $r6, $r8, $r10, $r12, $r13, $r16, $r17;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.RuntimePermission $r21;
        java.util.concurrent.ForkJoinPool$1 $r22;
        java.lang.ThreadLocal $r23;
        java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory $r24;
        java.util.concurrent.ForkJoinPool $r25, $r27;
        short $s13, s14;
        java.lang.Object $r26;
        java.lang.Error $r28, $r29;
        java.lang.Exception $r30, r31;

        <java.util.concurrent.ForkJoinPool: int SHARED_QUEUE> = -1;

        <java.util.concurrent.ForkJoinPool: int FIFO_QUEUE> = 1;

        <java.util.concurrent.ForkJoinPool: int LIFO_QUEUE> = 0;

        <java.util.concurrent.ForkJoinPool: int PL_SPINS> = 256;

        <java.util.concurrent.ForkJoinPool: int PL_SIGNAL> = 1;

        <java.util.concurrent.ForkJoinPool: int PL_LOCK> = 2;

        <java.util.concurrent.ForkJoinPool: int SHUTDOWN> = -2147483648;

        <java.util.concurrent.ForkJoinPool: int E_SEQ> = 65536;

        <java.util.concurrent.ForkJoinPool: int E_MASK> = 2147483647;

        <java.util.concurrent.ForkJoinPool: int UTC_UNIT> = 1;

        <java.util.concurrent.ForkJoinPool: int UAC_UNIT> = 65536;

        <java.util.concurrent.ForkJoinPool: int UTC_MASK> = 65535;

        <java.util.concurrent.ForkJoinPool: int UAC_MASK> = -65536;

        <java.util.concurrent.ForkJoinPool: int UTC_SHIFT> = 0;

        <java.util.concurrent.ForkJoinPool: int UAC_SHIFT> = 16;

        <java.util.concurrent.ForkJoinPool: long AC_UNIT> = 281474976710656L;

        <java.util.concurrent.ForkJoinPool: long TC_UNIT> = 4294967296L;

        <java.util.concurrent.ForkJoinPool: long TC_MASK> = 281470681743360L;

        <java.util.concurrent.ForkJoinPool: long AC_MASK> = -281474976710656L;

        <java.util.concurrent.ForkJoinPool: long STOP_BIT> = 2147483648L;

        <java.util.concurrent.ForkJoinPool: int INT_SIGN> = -2147483648;

        <java.util.concurrent.ForkJoinPool: int SHORT_SIGN> = 32768;

        <java.util.concurrent.ForkJoinPool: int SQMASK> = 126;

        <java.util.concurrent.ForkJoinPool: int EVENMASK> = 65534;

        <java.util.concurrent.ForkJoinPool: int MAX_CAP> = 32767;

        <java.util.concurrent.ForkJoinPool: int SMASK> = 65535;

        <java.util.concurrent.ForkJoinPool: int EC_SHIFT> = 16;

        <java.util.concurrent.ForkJoinPool: int ST_SHIFT> = 31;

        <java.util.concurrent.ForkJoinPool: int TC_SHIFT> = 32;

        <java.util.concurrent.ForkJoinPool: int AC_SHIFT> = 48;

        <java.util.concurrent.ForkJoinPool: int SEED_INCREMENT> = 1640531527;

        <java.util.concurrent.ForkJoinPool: int MAX_HELP> = 64;

        <java.util.concurrent.ForkJoinPool: long TIMEOUT_SLOP> = 2000000L;

        <java.util.concurrent.ForkJoinPool: long FAST_IDLE_TIMEOUT> = 200000000L;

        <java.util.concurrent.ForkJoinPool: long IDLE_TIMEOUT> = 2000000000L;

     label1:
        $r4 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U> = $r4;

        r0 = class "java/util/concurrent/ForkJoinPool";

        $r5 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("ctl");

        $l1 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.ForkJoinPool: long CTL> = $l1;

        $r7 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r8 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("stealCount");

        $l2 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r8);

        <java.util.concurrent.ForkJoinPool: long STEALCOUNT> = $l2;

        $r9 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("plock");

        $l3 = virtualinvoke $r9.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.ForkJoinPool: long PLOCK> = $l3;

        $r11 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("indexSeed");

        $l4 = virtualinvoke $r11.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r12);

        <java.util.concurrent.ForkJoinPool: long INDEXSEED> = $l4;

        r1 = class "java/lang/Thread";

        $r14 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l5 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.ForkJoinPool: long PARKBLOCKER> = $l5;

        r2 = class "java/util/concurrent/ForkJoinPool$WorkQueue";

        $r15 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r16 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("base");

        $l6 = virtualinvoke $r15.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r16);

        <java.util.concurrent.ForkJoinPool: long QBASE> = $l6;

        $r18 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $r17 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("qlock");

        $l7 = virtualinvoke $r18.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r17);

        <java.util.concurrent.ForkJoinPool: long QLOCK> = $l7;

        r3 = class "[Ljava/util/concurrent/ForkJoinTask;";

        $r19 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        $i8 = virtualinvoke $r19.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r3);

        <java.util.concurrent.ForkJoinPool: int ABASE> = $i8;

        $r20 = <java.util.concurrent.ForkJoinPool: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r20.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r3);

        $i9 = i0 - 1;

        $i12 = i0 & $i9;

        if $i12 == 0 goto label2;

        $r29 = new java.lang.Error;

        specialinvoke $r29.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r29;

     label2:
        $i10 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i11 = 31 - $i10;

        <java.util.concurrent.ForkJoinPool: int ASHIFT> = $i11;

     label3:
        goto label5;

     label4:
        $r30 := @caughtexception;

        r31 = $r30;

        $r28 = new java.lang.Error;

        specialinvoke $r28.<java.lang.Error: void <init>(java.lang.Throwable)>(r31);

        throw $r28;

     label5:
        $r23 = new java.lang.ThreadLocal;

        specialinvoke $r23.<java.lang.ThreadLocal: void <init>()>();

        <java.util.concurrent.ForkJoinPool: java.lang.ThreadLocal submitters> = $r23;

        $r24 = new java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory;

        specialinvoke $r24.<java.util.concurrent.ForkJoinPool$DefaultForkJoinWorkerThreadFactory: void <init>()>();

        <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory> = $r24;

        $r21 = new java.lang.RuntimePermission;

        specialinvoke $r21.<java.lang.RuntimePermission: void <init>(java.lang.String)>("modifyThread");

        <java.util.concurrent.ForkJoinPool: java.lang.RuntimePermission modifyThreadPermission> = $r21;

        $r22 = new java.util.concurrent.ForkJoinPool$1;

        specialinvoke $r22.<java.util.concurrent.ForkJoinPool$1: void <init>()>();

        $r26 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r22);

        $r27 = (java.util.concurrent.ForkJoinPool) $r26;

        <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common> = $r27;

        $r25 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        s14 = $r25.<java.util.concurrent.ForkJoinPool: short parallelism>;

        if s14 <= 0 goto label6;

        $s13 = s14;

        goto label7;

     label6:
        $s13 = 1;

     label7:
        <java.util.concurrent.ForkJoinPool: int commonParallelism> = $s13;

        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
