public class java.security.cert.Certificate$CertificateRep extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.String type;
    private final byte[] data;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    protected void <init>(java.lang.String, byte[])
    {
        java.security.cert.Certificate$CertificateRep r0;
        java.lang.String r1;
        byte[] r2;

        r0 := @this: java.security.cert.Certificate$CertificateRep;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.cert.Certificate$CertificateRep: java.lang.String type> = r1;

        r0.<java.security.cert.Certificate$CertificateRep: byte[] data> = r2;

        return;
    }

    protected java.lang.Object readResolve() throws java.io.ObjectStreamException
    {
        java.security.cert.Certificate$CertificateRep r0;
        java.security.cert.CertificateFactory r1;
        java.lang.String $r2, $r11;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.security.cert.Certificate $r5;
        java.lang.Throwable $r6, r12;
        java.io.NotSerializableException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: java.security.cert.Certificate$CertificateRep;

     label1:
        $r2 = r0.<java.security.cert.Certificate$CertificateRep: java.lang.String type>;

        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>($r2);

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = r0.<java.security.cert.Certificate$CertificateRep: byte[] data>;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r12 = $r6;

        $r7 = new java.io.NotSerializableException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not resolve certificate: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.NotSerializableException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;
        java.io.ObjectStreamField $r1, $r2;

        <java.security.cert.Certificate$CertificateRep: long serialVersionUID> = -8563758940495660020L;

        $r0 = newarray (java.io.ObjectStreamField)[2];

        $r1 = new java.io.ObjectStreamField;

        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("type", class "java/lang/String");

        $r0[0] = $r1;

        $r2 = new java.io.ObjectStreamField;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class,boolean)>("data", class "[B", 1);

        $r0[1] = $r2;

        <java.security.cert.Certificate$CertificateRep: java.io.ObjectStreamField[] serialPersistentFields> = $r0;

        return;
    }
}
