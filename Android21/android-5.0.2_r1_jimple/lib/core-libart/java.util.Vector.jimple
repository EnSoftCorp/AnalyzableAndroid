public class java.util.Vector extends java.util.AbstractList implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    protected int elementCount;
    protected java.lang.Object[] elementData;
    protected int capacityIncrement;
    private static final int DEFAULT_SIZE;

    public void <init>()
    {
        java.util.Vector r0;

        r0 := @this: java.util.Vector;

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>(10, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.Vector r0;
        int i0;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>(i0, 0);

        return;
    }

    public void <init>(int, int)
    {
        java.util.Vector r0;
        int i0, i1;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>(i0);

        r0.<java.util.Vector: java.lang.Object[] elementData> = $r1;

        r0.<java.util.Vector: int elementCount> = 0;

        r0.<java.util.Vector: int capacityIncrement> = i1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke r0.<java.util.Vector: void <init>(int,int)>($i0, 0);

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = r0.<java.util.Vector: int elementCount>;

        $i2 = $i1 + 1;

        r0.<java.util.Vector: int elementCount> = $i2;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r3[$i1] = $r4;

        goto label1;

     label2:
        return;
    }

    private java.lang.Object[] newElementArray(int)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[i0];

        $r2 = (java.lang.Object[]) $r1;

        return $r2;
    }

    public void add(int, java.lang.Object)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r1, i0);

        return;
    }

    public synchronized boolean add(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<java.util.Vector: int elementCount>;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label1:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = r0.<java.util.Vector: int elementCount>;

        $i3 = $i2 + 1;

        r0.<java.util.Vector: int elementCount> = $i3;

        $r3[$i2] = r1;

        $i4 = r0.<java.util.Vector: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.Vector: int modCount> = $i5;

        return 1;
    }

    public synchronized boolean addAll(int, java.util.Collection)
    {
        java.util.Vector r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4, $r5, $r7, $r8;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        if i0 < 0 goto label6;

        $i5 = r0.<java.util.Vector: int elementCount>;

        if i0 > $i5 goto label6;

        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i1 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = lengthof $r4;

        $i6 = r0.<java.util.Vector: int elementCount>;

        $i8 = $i7 - $i6;

        i2 = i1 - $i8;

        if i2 <= 0 goto label2;

        specialinvoke r0.<java.util.Vector: void growBy(int)>(i2);

     label2:
        $i9 = r0.<java.util.Vector: int elementCount>;

        i3 = $i9 - i0;

        if i3 <= 0 goto label3;

        $r7 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r8 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i15 = i0 + i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i0, $r8, $i15, i3);

     label3:
        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i14 = i0;

        i0 = i0 + 1;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5[$i14] = $r6;

        goto label4;

     label5:
        $i11 = r0.<java.util.Vector: int elementCount>;

        $i10 = $i11 + i1;

        r0.<java.util.Vector: int elementCount> = $i10;

        $i13 = r0.<java.util.Vector: int modCount>;

        $i12 = $i13 + 1;

        r0.<java.util.Vector: int modCount> = $i12;

        return 1;

     label6:
        $i4 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i4);

        throw $r3;
    }

    public synchronized boolean addAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $i0 = r0.<java.util.Vector: int elementCount>;

        $z0 = virtualinvoke r0.<java.util.Vector: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }

    public synchronized void addElement(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i1 = r0.<java.util.Vector: int elementCount>;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label1;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label1:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = r0.<java.util.Vector: int elementCount>;

        $i3 = $i2 + 1;

        r0.<java.util.Vector: int elementCount> = $i3;

        $r3[$i2] = r1;

        $i4 = r0.<java.util.Vector: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.Vector: int modCount> = $i5;

        return;
    }

    public synchronized int capacity()
    {
        java.util.Vector r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.Vector;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void clear()
    {
        java.util.Vector r0;

        r0 := @this: java.util.Vector;

        virtualinvoke r0.<java.util.Vector: void removeAllElements()>();

        return;
    }

    public synchronized java.lang.Object clone()
    {
        java.util.Vector r0, r1;
        java.lang.Object $r2, $r4;
        java.lang.Object[] $r3, $r5;
        java.lang.CloneNotSupportedException $r6, r8;
        java.lang.AssertionError $r7;

        r0 := @this: java.util.Vector;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.Vector) $r2;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        r1.<java.util.Vector: java.lang.Object[] elementData> = $r5;

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized boolean containsAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.AbstractList: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public synchronized void copyInto(java.lang.Object[])
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i0);

        return;
    }

    public synchronized java.lang.Object elementAt(int)
    {
        java.util.Vector r0;
        int i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = $r2[i0];

        return $r3;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r1 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r1;
    }

    public java.util.Enumeration elements()
    {
        java.util.Vector r0;
        java.util.Vector$1 $r1;

        r0 := @this: java.util.Vector;

        $r1 = new java.util.Vector$1;

        specialinvoke $r1.<java.util.Vector$1: void <init>(java.util.Vector)>(r0);

        return $r1;
    }

    public synchronized void ensureCapacity(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] $r1, $r2, $r3;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = lengthof $r1;

        if $i2 >= i0 goto label5;

        $i3 = r0.<java.util.Vector: int capacityIncrement>;

        if $i3 > 0 goto label1;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = lengthof $r3;

        goto label2;

     label1:
        $i5 = r0.<java.util.Vector: int capacityIncrement>;

     label2:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i4 = lengthof $r2;

        i1 = $i5 + $i4;

        if i0 <= i1 goto label3;

        $i6 = i0;

        goto label4;

     label3:
        $i6 = i1;

     label4:
        specialinvoke r0.<java.util.Vector: void grow(int)>($i6);

     label5:
        return;
    }

    public synchronized boolean equals(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1, r4, r5;
        java.util.List r2;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r3;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r6;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.List;

        if $z0 == 0 goto label8;

        r2 = (java.util.List) r1;

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = r0.<java.util.Vector: int elementCount>;

        if $i1 == $i2 goto label2;

        return 0;

     label2:
        i0 = 0;

        r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i3 = i0;

        i0 = i0 + 1;

        r4 = $r6[$i3];

        r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r4 != null goto label4;

        if r5 != null goto label5;

        goto label6;

     label4:
        $z2 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z2 != 0 goto label6;

     label5:
        return 0;

     label6:
        goto label3;

     label7:
        return 1;

     label8:
        return 0;
    }

    public synchronized java.lang.Object firstElement()
    {
        java.util.Vector r0;
        int $i0;
        java.util.NoSuchElementException $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Vector;

        $i0 = r0.<java.util.Vector: int elementCount>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = $r2[0];

        return $r3;

     label1:
        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object get(int)
    {
        java.util.Vector r0;
        int i0;
        java.lang.Object $r1;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        return $r1;
    }

    private void grow(int)
    {
        java.util.Vector r0;
        int i0, $i1;
        java.lang.Object[] r1, $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>(i0);

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;
    }

    private void growByOne()
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: java.util.Vector;

        $i0 = r0.<java.util.Vector: int capacityIncrement>;

        if $i0 > 0 goto label1;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i4 = lengthof $r4;

        i5 = $i4;

        if $i4 != 0 goto label2;

        i5 = 1;

        goto label2;

     label1:
        i5 = r0.<java.util.Vector: int capacityIncrement>;

     label2:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = lengthof $r2;

        $i2 = $i1 + i5;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>($i2);

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i3 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i3);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;
    }

    private void growBy(int)
    {
        java.util.Vector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $i1 = r0.<java.util.Vector: int capacityIncrement>;

        if $i1 > 0 goto label2;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i9 = lengthof $r4;

        i10 = $i9;

        if $i9 != 0 goto label1;

        i10 = i0;

     label1:
        if i10 >= i0 goto label3;

        i10 = i10 + i10;

        goto label1;

     label2:
        $i2 = r0.<java.util.Vector: int capacityIncrement>;

        $i4 = i0 / $i2;

        $i3 = r0.<java.util.Vector: int capacityIncrement>;

        i10 = $i4 * $i3;

        if i10 >= i0 goto label3;

        $i8 = r0.<java.util.Vector: int capacityIncrement>;

        i10 = i10 + $i8;

     label3:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = lengthof $r2;

        $i6 = $i5 + i10;

        r1 = specialinvoke r0.<java.util.Vector: java.lang.Object[] newElementArray(int)>($i6);

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i7);

        r0.<java.util.Vector: java.lang.Object[] elementData> = r1;

        return;
    }

    public synchronized int hashCode()
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r1, $r3;
        java.lang.Object $r2, $r4;

        r0 := @this: java.util.Vector;

        i0 = 1;

        i1 = 0;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        if i1 >= $i2 goto label4;

        $i3 = 31 * i0;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r2 = $r1[i1];

        if $r2 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r4 = $r3[i1];

        $i4 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label3:
        i0 = $i3 + $i4;

        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

        return $i0;
    }

    public synchronized int indexOf(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1, $r3, $r5;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object[] $r2, $r4;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r1 == null goto label4;

        i1 = i0;

     label1:
        $i3 = r0.<java.util.Vector: int elementCount>;

        if i1 >= $i3 goto label3;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5 = $r4[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i4 = i0;

     label5:
        $i2 = r0.<java.util.Vector: int elementCount>;

        if i4 >= $i2 goto label7;

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = $r2[i4];

        if $r3 != null goto label6;

        return i4;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        return -1;
    }

    public synchronized void insertElementAt(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3, $r4, $r5, $r6;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 < 0 goto label3;

        $i3 = r0.<java.util.Vector: int elementCount>;

        if i0 > $i3 goto label3;

        $i5 = r0.<java.util.Vector: int elementCount>;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i4 = lengthof $r3;

        if $i5 != $i4 goto label1;

        specialinvoke r0.<java.util.Vector: void growByOne()>();

     label1:
        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

        if i1 <= 0 goto label2;

        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i11 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r5, $i11, i1);

     label2:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r4[i0] = r1;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $i8 = $i7 + 1;

        r0.<java.util.Vector: int elementCount> = $i8;

        $i9 = r0.<java.util.Vector: int modCount>;

        $i10 = $i9 + 1;

        r0.<java.util.Vector: int modCount> = $i10;

        goto label4;

     label3:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r2 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r2;

     label4:
        return;
    }

    public synchronized boolean isEmpty()
    {
        java.util.Vector r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.Vector;

        $i0 = r0.<java.util.Vector: int elementCount>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized java.lang.Object lastElement()
    {
        java.util.Vector r0;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: java.util.Vector;

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.Vector: int elementCount>;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public synchronized int lastIndexOf(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<java.util.Vector: int elementCount>;

        $i1 = $i0 - 1;

        $i2 = virtualinvoke r0.<java.util.Vector: int lastIndexOf(java.lang.Object,int)>(r1, $i1);

        return $i2;
    }

    public synchronized int lastIndexOf(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1, $r4, $r6;
        int i0, i1, $i2, $i3, i4;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3, $r5;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i2 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i2 goto label8;

        if r1 == null goto label4;

        i1 = i0;

     label1:
        if i1 < 0 goto label3;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r6 = $r5[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        goto label7;

     label4:
        i4 = i0;

     label5:
        if i4 < 0 goto label7;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r4 = $r3[i4];

        if $r4 != null goto label6;

        return i4;

     label6:
        i4 = i4 + -1;

        goto label5;

     label7:
        return -1;

     label8:
        $i3 = r0.<java.util.Vector: int elementCount>;

        $r2 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i3);

        throw $r2;
    }

    public synchronized java.lang.Object remove(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3, $r4, $r5, $r6;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i2 goto label2;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r1 = $r3[i0];

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = $i4 - 1;

        r0.<java.util.Vector: int elementCount> = $i5;

        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

        if i1 <= 0 goto label1;

        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i10 = i0 + 1;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i10, $r5, i0, i1);

     label1:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $r4[$i7] = null;

        $i8 = r0.<java.util.Vector: int modCount>;

        $i9 = $i8 + 1;

        r0.<java.util.Vector: int modCount> = $i9;

        return r1;

     label2:
        $i3 = r0.<java.util.Vector: int elementCount>;

        $r2 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i3);

        throw $r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.Vector: boolean removeElement(java.lang.Object)>(r1);

        return $z0;
    }

    public synchronized boolean removeAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.AbstractList: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public synchronized void removeAllElements()
    {
        java.util.Vector r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;

        r0 := @this: java.util.Vector;

        i0 = 0;

     label1:
        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label2;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r1[i0] = null;

        i0 = i0 + 1;

        goto label1;

     label2:
        $i2 = r0.<java.util.Vector: int modCount>;

        $i3 = $i2 + 1;

        r0.<java.util.Vector: int modCount> = $i3;

        r0.<java.util.Vector: int elementCount> = 0;

        return;
    }

    public synchronized boolean removeElement(java.lang.Object)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0, $i1;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        $i1 = virtualinvoke r0.<java.util.Vector: int indexOf(java.lang.Object,int)>(r1, 0);

        i0 = $i1;

        if $i1 != -1 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<java.util.Vector: void removeElementAt(int)>(i0);

        return 1;
    }

    public synchronized void removeElementAt(int)
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        java.lang.Object[] $r2, $r3, $r4;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $i3 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i3 goto label2;

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = $i4 - 1;

        r0.<java.util.Vector: int elementCount> = $i5;

        $i6 = r0.<java.util.Vector: int elementCount>;

        i1 = $i6 - i0;

        if i1 <= 0 goto label1;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i10 = i0 + 1;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, $r3, i0, i1);

     label1:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i7 = r0.<java.util.Vector: int elementCount>;

        $r2[$i7] = null;

        $i8 = r0.<java.util.Vector: int modCount>;

        $i9 = $i8 + 1;

        r0.<java.util.Vector: int modCount> = $i9;

        goto label3;

     label2:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r1 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r1;

     label3:
        return;
    }

    protected void removeRange(int, int)
    {
        java.util.Vector r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.Object[] $r2, $r3, $r4, $r5;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label4;

        if i0 > i1 goto label4;

        $i3 = r0.<java.util.Vector: int elementCount>;

        if i1 > $i3 goto label4;

        if i0 != i1 goto label1;

        return;

     label1:
        $i4 = r0.<java.util.Vector: int elementCount>;

        if i1 == $i4 goto label2;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i8 = r0.<java.util.Vector: int elementCount>;

        $i9 = $i8 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, i1, $r3, i0, $i9);

        $i12 = r0.<java.util.Vector: int elementCount>;

        $i10 = i1 - i0;

        i2 = $i12 - $i10;

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i11 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r5, i2, $i11, null);

        r0.<java.util.Vector: int elementCount> = i2;

        goto label3;

     label2:
        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r2, i0, $i5, null);

        r0.<java.util.Vector: int elementCount> = i0;

     label3:
        $i6 = r0.<java.util.Vector: int modCount>;

        $i7 = $i6 + 1;

        r0.<java.util.Vector: int modCount> = $i7;

        goto label5;

     label4:
        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label5:
        return;
    }

    public synchronized boolean retainAll(java.util.Collection)
    {
        java.util.Vector r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<java.util.AbstractList: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public synchronized java.lang.Object set(int, java.lang.Object)
    {
        java.util.Vector r0;
        int i0, $i1, $i2;
        java.lang.Object r1, r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object[] $r4, $r5;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label1;

        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        r2 = $r4[i0];

        $r5 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5[i0] = r1;

        return r2;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r3 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r3;
    }

    public synchronized void setElementAt(java.lang.Object, int)
    {
        java.util.Vector r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Object[] $r3;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r3[i0] = r1;

        goto label2;

     label1:
        $i2 = r0.<java.util.Vector: int elementCount>;

        $r2 = staticinvoke <java.util.Vector: java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int,int)>(i0, $i2);

        throw $r2;

     label2:
        return;
    }

    private static java.lang.ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException(int, int)
    {
        int i0, i1;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int,int)>(i1, i0);

        throw $r0;
    }

    public synchronized void setSize(int)
    {
        java.util.Vector r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object[] $r1;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        $i1 = r0.<java.util.Vector: int elementCount>;

        if i0 != $i1 goto label1;

        return;

     label1:
        virtualinvoke r0.<java.util.Vector: void ensureCapacity(int)>(i0);

        $i2 = r0.<java.util.Vector: int elementCount>;

        if $i2 <= i0 goto label2;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i5 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, i0, $i5, null);

     label2:
        r0.<java.util.Vector: int elementCount> = i0;

        $i3 = r0.<java.util.Vector: int modCount>;

        $i4 = $i3 + 1;

        r0.<java.util.Vector: int modCount> = $i4;

        return;
    }

    public synchronized int size()
    {
        java.util.Vector r0;
        int $i0;

        r0 := @this: java.util.Vector;

        $i0 = r0.<java.util.Vector: int elementCount>;

        return $i0;
    }

    public synchronized java.util.List subList(int, int)
    {
        java.util.Vector r0;
        int i0, i1;
        java.util.Collections$SynchronizedRandomAccessList $r1;
        java.util.List $r2;

        r0 := @this: java.util.Vector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.util.Collections$SynchronizedRandomAccessList;

        $r2 = specialinvoke r0.<java.util.AbstractList: java.util.List subList(int,int)>(i0, i1);

        specialinvoke $r1.<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List,java.lang.Object)>($r2, r0);

        return $r1;
    }

    public synchronized java.lang.Object[] toArray()
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r2;
        int $i0, $i1;

        r0 := @this: java.util.Vector;

        $i0 = r0.<java.util.Vector: int elementCount>;

        r1 = newarray (java.lang.Object)[$i0];

        $r2 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public synchronized java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Vector r0;
        java.lang.Object[] r1, $r3, $r6;
        java.lang.Class r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r5;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.lang.Object[];

        $i1 = r0.<java.util.Vector: int elementCount>;

        $i0 = lengthof r1;

        if $i1 <= $i0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $i6 = r0.<java.util.Vector: int elementCount>;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r2, $i6);

        $r6 = (java.lang.Object[]) $r5;

        r1 = (java.lang.Object[]) $r6;

     label1:
        $r3 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i2 = r0.<java.util.Vector: int elementCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i2);

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label2;

        $i5 = r0.<java.util.Vector: int elementCount>;

        r1[$i5] = null;

     label2:
        return r1;
    }

    public synchronized java.lang.String toString()
    {
        java.util.Vector r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder r1, $r2;
        java.lang.Object[] $r4, $r6, $r13, $r15;
        java.lang.Object $r5, $r7, $r12, $r14;
        java.lang.String $r11;

        r0 := @this: java.util.Vector;

        $i2 = r0.<java.util.Vector: int elementCount>;

        if $i2 != 0 goto label1;

        return "[]";

     label1:
        $i3 = r0.<java.util.Vector: int elementCount>;

        i0 = $i3 - 1;

        $r2 = new java.lang.StringBuilder;

        $i4 = r0.<java.util.Vector: int elementCount>;

        $i5 = $i4 * 16;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i5);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r13 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r12 = $r13[i1];

        if $r12 != r0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

        goto label4;

     label3:
        $r15 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r14 = $r15[i1];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        i1 = i1 + 1;

        goto label2;

     label5:
        $r4 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r5 = $r4[i0];

        if $r5 != r0 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

        goto label7;

     label6:
        $r6 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $r7 = $r6[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public synchronized void trimToSize()
    {
        java.util.Vector r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.Vector;

        $r1 = r0.<java.util.Vector: java.lang.Object[] elementData>;

        $i1 = lengthof $r1;

        $i0 = r0.<java.util.Vector: int elementCount>;

        if $i1 == $i0 goto label1;

        $i2 = r0.<java.util.Vector: int elementCount>;

        specialinvoke r0.<java.util.Vector: void grow(int)>($i2);

     label1:
        return;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Vector r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: java.util.Vector;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    public static void <clinit>()
    {
        <java.util.Vector: int DEFAULT_SIZE> = 10;

        <java.util.Vector: long serialVersionUID> = -2767605614048989439L;

        return;
    }
}
