public class java.io.LineNumberInputStream extends java.io.FilterInputStream
{
    private int lineNumber;
    private int markedLineNumber;
    private int lastChar;
    private int markedLastChar;

    public void <init>(java.io.InputStream)
    {
        java.io.LineNumberInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.io.LineNumberInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<java.io.LineNumberInputStream: int markedLineNumber> = -1;

        r0.<java.io.LineNumberInputStream: int lastChar> = -1;

        return;
    }

    public int available() throws java.io.IOException
    {
        java.io.LineNumberInputStream r0;
        java.io.InputStream $r1;
        int $i0, $i1, $i2, $i3;
        byte $b4;

        r0 := @this: java.io.LineNumberInputStream;

        $r1 = r0.<java.io.LineNumberInputStream: java.io.InputStream in>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        $i2 = $i0 / 2;

        $i1 = r0.<java.io.LineNumberInputStream: int lastChar>;

        if $i1 != -1 goto label1;

        $b4 = 0;

        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i3 = $i2 + $b4;

        return $i3;
    }

    public int getLineNumber()
    {
        java.io.LineNumberInputStream r0;
        int $i0;

        r0 := @this: java.io.LineNumberInputStream;

        $i0 = r0.<java.io.LineNumberInputStream: int lineNumber>;

        return $i0;
    }

    public void mark(int)
    {
        java.io.LineNumberInputStream r0;
        int i0, $i1, $i2;
        java.io.InputStream $r1;

        r0 := @this: java.io.LineNumberInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.LineNumberInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>(i0);

        $i1 = r0.<java.io.LineNumberInputStream: int lineNumber>;

        r0.<java.io.LineNumberInputStream: int markedLineNumber> = $i1;

        $i2 = r0.<java.io.LineNumberInputStream: int lastChar>;

        r0.<java.io.LineNumberInputStream: int markedLastChar> = $i2;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.LineNumberInputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        java.io.InputStream $r1, $r2;

        r0 := @this: java.io.LineNumberInputStream;

        i0 = r0.<java.io.LineNumberInputStream: int lastChar>;

        if i0 != -1 goto label1;

        $r2 = r0.<java.io.LineNumberInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        goto label2;

     label1:
        r0.<java.io.LineNumberInputStream: int lastChar> = -1;

     label2:
        lookupswitch(i0)
        {
            case 10: goto label4;
            case 13: goto label3;
            default: goto label5;
        };

     label3:
        i0 = 10;

        $r1 = r0.<java.io.LineNumberInputStream: java.io.InputStream in>;

        $i1 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        r0.<java.io.LineNumberInputStream: int lastChar> = $i1;

        $i2 = r0.<java.io.LineNumberInputStream: int lastChar>;

        if $i2 != 10 goto label4;

        r0.<java.io.LineNumberInputStream: int lastChar> = -1;

     label4:
        $i3 = r0.<java.io.LineNumberInputStream: int lineNumber>;

        $i4 = $i3 + 1;

        r0.<java.io.LineNumberInputStream: int lineNumber> = $i4;

     label5:
        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.io.LineNumberInputStream r0;
        byte[] r1;
        int i0, i1, i2, i3, $i4, $i6, $i7;
        java.io.IOException r2, $r3;
        byte $b5;

        r0 := @this: java.io.LineNumberInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        i2 = 0;

     label01:
        if i2 >= i1 goto label10;

     label02:
        i3 = virtualinvoke r0.<java.io.LineNumberInputStream: int read()>();

     label03:
        goto label06;

     label04:
        $r3 := @caughtexception;

        r2 = $r3;

        if i2 == 0 goto label05;

        return i2;

     label05:
        throw r2;

     label06:
        if i3 != -1 goto label09;

        if i2 != 0 goto label07;

        $i7 = -1;

        goto label08;

     label07:
        $i7 = i2;

     label08:
        return $i7;

     label09:
        $i6 = i0 + i2;

        $b5 = (byte) i3;

        r1[$i6] = $b5;

        i2 = i2 + 1;

        goto label01;

     label10:
        return i1;

        catch java.io.IOException from label02 to label03 with label04;
    }

    public void reset() throws java.io.IOException
    {
        java.io.LineNumberInputStream r0;
        java.io.InputStream $r1;
        int $i0, $i1;

        r0 := @this: java.io.LineNumberInputStream;

        $r1 = r0.<java.io.LineNumberInputStream: java.io.InputStream in>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

        $i0 = r0.<java.io.LineNumberInputStream: int markedLineNumber>;

        r0.<java.io.LineNumberInputStream: int lineNumber> = $i0;

        $i1 = r0.<java.io.LineNumberInputStream: int markedLastChar>;

        r0.<java.io.LineNumberInputStream: int lastChar> = $i1;

        return;
    }

    public void setLineNumber(int)
    {
        java.io.LineNumberInputStream r0;
        int i0;

        r0 := @this: java.io.LineNumberInputStream;

        i0 := @parameter0: int;

        r0.<java.io.LineNumberInputStream: int lineNumber> = i0;

        return;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.LineNumberInputStream r0;
        long l0, $l1;

        r0 := @this: java.io.LineNumberInputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l1;
    }
}
