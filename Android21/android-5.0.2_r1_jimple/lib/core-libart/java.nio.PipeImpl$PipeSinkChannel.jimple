class java.nio.PipeImpl$PipeSinkChannel extends java.nio.channels.Pipe$SinkChannel implements java.nio.FileDescriptorChannel
{
    private final java.io.FileDescriptor fd;
    private final java.nio.channels.SocketChannel channel;
    final java.nio.PipeImpl this$0;

    private void <init>(java.nio.PipeImpl, java.nio.channels.spi.SelectorProvider, java.io.FileDescriptor) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.PipeImpl r1;
        java.nio.channels.spi.SelectorProvider r2;
        java.io.FileDescriptor r3;
        java.nio.SocketChannelImpl $r4;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        r1 := @parameter0: java.nio.PipeImpl;

        r2 := @parameter1: java.nio.channels.spi.SelectorProvider;

        r3 := @parameter2: java.io.FileDescriptor;

        r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.PipeImpl this$0> = r1;

        specialinvoke r0.<java.nio.channels.Pipe$SinkChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r2);

        r0.<java.nio.PipeImpl$PipeSinkChannel: java.io.FileDescriptor fd> = r3;

        $r4 = new java.nio.SocketChannelImpl;

        specialinvoke $r4.<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,java.io.FileDescriptor)>(r2, r3);

        r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.channels.SocketChannel channel> = $r4;

        return;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.channels.SocketChannel $r1;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        $r1 = r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r1.<java.nio.channels.SocketChannel: void close()>();

        return;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<java.nio.PipeImpl$PipeSinkChannel: java.io.FileDescriptor getFD()>();

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r1, z0);

        return;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.ByteBuffer r1;
        java.nio.channels.SocketChannel $r2;
        int $i0;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.channels.SocketChannel channel>;

        $i0 = virtualinvoke $r2.<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)>(r1);

        return $i0;
    }

    public long write(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.ByteBuffer[] r1;
        java.nio.channels.SocketChannel $r2;
        long $l0;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        r1 := @parameter0: java.nio.ByteBuffer[];

        $r2 = r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.channels.SocketChannel channel>;

        $l0 = virtualinvoke $r2.<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[])>(r1);

        return $l0;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1;
        java.nio.channels.SocketChannel $r2;
        long $l2;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.nio.PipeImpl$PipeSinkChannel: java.nio.channels.SocketChannel channel>;

        $l2 = virtualinvoke $r2.<java.nio.channels.SocketChannel: long write(java.nio.ByteBuffer[],int,int)>(r1, i0, i1);

        return $l2;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        $r1 = r0.<java.nio.PipeImpl$PipeSinkChannel: java.io.FileDescriptor fd>;

        return $r1;
    }

    void <init>(java.nio.PipeImpl, java.nio.channels.spi.SelectorProvider, java.io.FileDescriptor, java.nio.PipeImpl$1) throws java.io.IOException
    {
        java.nio.PipeImpl$PipeSinkChannel r0;
        java.nio.PipeImpl r1;
        java.nio.channels.spi.SelectorProvider r2;
        java.io.FileDescriptor r3;
        java.nio.PipeImpl$1 r4;

        r0 := @this: java.nio.PipeImpl$PipeSinkChannel;

        r1 := @parameter0: java.nio.PipeImpl;

        r2 := @parameter1: java.nio.channels.spi.SelectorProvider;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.nio.PipeImpl$1;

        specialinvoke r0.<java.nio.PipeImpl$PipeSinkChannel: void <init>(java.nio.PipeImpl,java.nio.channels.spi.SelectorProvider,java.io.FileDescriptor)>(r1, r2, r3);

        return;
    }
}
