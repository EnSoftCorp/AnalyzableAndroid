class libcore.util.CollectionUtils$1$1 extends java.lang.Object implements java.util.Iterator
{
    private final java.util.Iterator delegate;
    private boolean removeIsOkay;
    private java.lang.Object next;
    final libcore.util.CollectionUtils$1 this$0;

    void <init>(libcore.util.CollectionUtils$1)
    {
        libcore.util.CollectionUtils$1$1 r0;
        libcore.util.CollectionUtils$1 r1, $r2;
        java.lang.Iterable $r3;
        java.util.Iterator $r4;

        r0 := @this: libcore.util.CollectionUtils$1$1;

        r1 := @parameter0: libcore.util.CollectionUtils$1;

        r0.<libcore.util.CollectionUtils$1$1: libcore.util.CollectionUtils$1 this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r0.<libcore.util.CollectionUtils$1$1: libcore.util.CollectionUtils$1 this$0>;

        $r3 = $r2.<libcore.util.CollectionUtils$1: java.lang.Iterable val$iterable>;

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

        r0.<libcore.util.CollectionUtils$1$1: java.util.Iterator delegate> = $r4;

        return;
    }

    private void computeNext()
    {
        libcore.util.CollectionUtils$1$1 r0;
        java.lang.Object $r1, $r4, $r6, $r8;
        java.util.Iterator $r2, $r3, $r9;
        boolean $z0, $z1;
        java.lang.ref.Reference $r5;
        libcore.util.CollectionUtils$1 $r7;

        r0 := @this: libcore.util.CollectionUtils$1$1;

        r0.<libcore.util.CollectionUtils$1$1: boolean removeIsOkay> = 0;

     label1:
        $r1 = r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next>;

        if $r1 != null goto label2;

        $r2 = r0.<libcore.util.CollectionUtils$1$1: java.util.Iterator delegate>;

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<libcore.util.CollectionUtils$1$1: java.util.Iterator delegate>;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.ref.Reference) $r4;

        $r6 = virtualinvoke $r5.<java.lang.ref.Reference: java.lang.Object get()>();

        r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next> = $r6;

        $r7 = r0.<libcore.util.CollectionUtils$1$1: libcore.util.CollectionUtils$1 this$0>;

        $z1 = $r7.<libcore.util.CollectionUtils$1: boolean val$trim>;

        if $z1 == 0 goto label1;

        $r8 = r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next>;

        if $r8 != null goto label1;

        $r9 = r0.<libcore.util.CollectionUtils$1$1: java.util.Iterator delegate>;

        interfaceinvoke $r9.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public boolean hasNext()
    {
        libcore.util.CollectionUtils$1$1 r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: libcore.util.CollectionUtils$1$1;

        specialinvoke r0.<libcore.util.CollectionUtils$1$1: void computeNext()>();

        $r1 = r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        libcore.util.CollectionUtils$1$1 r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: libcore.util.CollectionUtils$1$1;

        $z0 = virtualinvoke r0.<libcore.util.CollectionUtils$1$1: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next>;

        r0.<libcore.util.CollectionUtils$1$1: boolean removeIsOkay> = 1;

        r0.<libcore.util.CollectionUtils$1$1: java.lang.Object next> = null;

        return r1;
    }

    public void remove()
    {
        libcore.util.CollectionUtils$1$1 r0;
        boolean $z0;
        java.util.Iterator $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: libcore.util.CollectionUtils$1$1;

        $z0 = r0.<libcore.util.CollectionUtils$1$1: boolean removeIsOkay>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<libcore.util.CollectionUtils$1$1: java.util.Iterator delegate>;

        interfaceinvoke $r1.<java.util.Iterator: void remove()>();

        return;
    }
}
