class java.util.concurrent.atomic.AtomicMarkableReference$Pair extends java.lang.Object
{
    final java.lang.Object reference;
    final boolean mark;

    private void <init>(java.lang.Object, boolean)
    {
        java.util.concurrent.atomic.AtomicMarkableReference$Pair r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.atomic.AtomicMarkableReference$Pair;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.atomic.AtomicMarkableReference$Pair: java.lang.Object reference> = r1;

        r0.<java.util.concurrent.atomic.AtomicMarkableReference$Pair: boolean mark> = z0;

        return;
    }

    static java.util.concurrent.atomic.AtomicMarkableReference$Pair of(java.lang.Object, boolean)
    {
        java.lang.Object r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicMarkableReference$Pair $r1;

        r0 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r1 = new java.util.concurrent.atomic.AtomicMarkableReference$Pair;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicMarkableReference$Pair: void <init>(java.lang.Object,boolean)>(r0, z0);

        return $r1;
    }
}
