final class java.util.concurrent.ForkJoinTask$RunnableExecuteAction extends java.util.concurrent.ForkJoinTask
{
    final java.lang.Runnable runnable;
    private static final long serialVersionUID;

    void <init>(java.lang.Runnable)
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Runnable r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<java.util.concurrent.ForkJoinTask$RunnableExecuteAction: java.lang.Runnable runnable> = r1;

        return;
    }

    public final java.lang.Void getRawResult()
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        return null;
    }

    public final void setRawResult(java.lang.Void)
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Void r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        r1 := @parameter0: java.lang.Void;

        return;
    }

    public final boolean exec()
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Runnable $r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        $r1 = r0.<java.util.concurrent.ForkJoinTask$RunnableExecuteAction: java.lang.Runnable runnable>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return 1;
    }

    void internalPropagateException(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        r1 := @parameter0: java.lang.Throwable;

        staticinvoke <java.util.concurrent.ForkJoinTask$RunnableExecuteAction: void rethrow(java.lang.Throwable)>(r1);

        return;
    }

    public volatile void setRawResult(java.lang.Object)
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Object r1;
        java.lang.Void $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Void) r1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask$RunnableExecuteAction: void setRawResult(java.lang.Void)>($r2);

        return;
    }

    public volatile java.lang.Object getRawResult()
    {
        java.util.concurrent.ForkJoinTask$RunnableExecuteAction r0;
        java.lang.Void $r1;

        r0 := @this: java.util.concurrent.ForkJoinTask$RunnableExecuteAction;

        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask$RunnableExecuteAction: java.lang.Void getRawResult()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ForkJoinTask$RunnableExecuteAction: long serialVersionUID> = 5232453952276885070L;

        return;
    }
}
