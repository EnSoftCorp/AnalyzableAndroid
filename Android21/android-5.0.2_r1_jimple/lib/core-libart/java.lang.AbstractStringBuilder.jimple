abstract class java.lang.AbstractStringBuilder extends java.lang.Object
{
    static final int INITIAL_CAPACITY;
    private char[] value;
    private int count;
    private boolean shared;

    final char[] getValue()
    {
        java.lang.AbstractStringBuilder r0;
        char[] $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        return $r1;
    }

    final char[] shareValue()
    {
        java.lang.AbstractStringBuilder r0;
        char[] $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 1;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        return $r1;
    }

    final void set(char[], int) throws java.io.InvalidObjectException
    {
        java.lang.AbstractStringBuilder r0;
        char[] r1;
        int i0, $i1;
        java.io.InvalidObjectException $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        if r1 != null goto label1;

        r1 = <libcore.util.EmptyArray: char[] CHAR>;

     label1:
        $i1 = lengthof r1;

        if $i1 >= i0 goto label2;

        $r2 = new java.io.InvalidObjectException;

        specialinvoke $r2.<java.io.InvalidObjectException: void <init>(java.lang.String)>("count out of range");

        throw $r2;

     label2:
        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: int count> = i0;

        return;
    }

    void <init>()
    {
        java.lang.AbstractStringBuilder r0;
        char[] $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (char)[16];

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r1;

        return;
    }

    void <init>(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0;
        char[] $r1;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = newarray (char)[i0];

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r1;

        return;
    }

    void <init>(java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int $i0, $i1, $i2, $i3;
        char[] $r2, $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r0.<java.lang.AbstractStringBuilder: int count> = $i0;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i2 = $i1 + 16;

        $r2 = newarray (char)[$i2];

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r2;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        virtualinvoke r1.<java.lang.String: void _getChars(int,int,char[],int)>(0, $i3, $r3, 0);

        return;
    }

    private void enlargeBuffer(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] r1, $r2, $r3, $r4;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = lengthof $r2;

        $i4 = $i2 >> 1;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = lengthof $r3;

        $i5 = $i4 + $i3;

        i1 = $i5 + 2;

        if i0 <= i1 goto label1;

        $i7 = i0;

        goto label2;

     label1:
        $i7 = i1;

     label2:
        r1 = newarray (char)[$i7];

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r4, 0, r1, 0, $i6);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        return;
    }

    final void appendNull()
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        char[] $r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.lang.AbstractStringBuilder;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        i0 = $i1 + 4;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = lengthof $r1;

        if i0 <= $i2 goto label1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i0);

     label1:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = $i3 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i4;

        $r2[$i3] = 110;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i6 = $i5 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i6;

        $r3[$i5] = 117;

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i8 = $i7 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i8;

        $r4[$i7] = 108;

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i9 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i10 = $i9 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i10;

        $r5[$i9] = 108;

        return;
    }

    final void append0(char[])
    {
        java.lang.AbstractStringBuilder r0;
        char[] r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: char[];

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i1 = lengthof r1;

        i0 = $i2 + $i1;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = lengthof $r2;

        if i0 <= $i3 goto label1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i0);

     label1:
        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, 0, $r3, $i5, $i4);

        r0.<java.lang.AbstractStringBuilder: int count> = i0;

        return;
    }

    final void append0(char[], int, int)
    {
        java.lang.AbstractStringBuilder r0;
        char[] r1, $r2, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        i2 = $i4 + i1;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i5 = lengthof $r2;

        if i2 <= $i5 goto label1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i2);

     label1:
        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i0, $r3, $i6, i1);

        r0.<java.lang.AbstractStringBuilder: int count> = i2;

        return;
    }

    final void append0(char)
    {
        java.lang.AbstractStringBuilder r0;
        char c0;
        char[] $r1, $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.lang.AbstractStringBuilder;

        c0 := @parameter0: char;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i6 = $i5 + 1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>($i6);

     label1:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = $i3 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i4;

        $r2[$i3] = c0;

        return;
    }

    final void append0(java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4;
        char[] $r2, $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void appendNull()>();

        return;

     label1:
        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        i1 = $i2 + i0;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = lengthof $r2;

        if i1 <= $i3 goto label2;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i1);

     label2:
        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        virtualinvoke r1.<java.lang.String: void _getChars(int,int,char[],int)>(0, i0, $r3, $i4);

        r0.<java.lang.AbstractStringBuilder: int count> = i1;

        return;
    }

    final void append0(java.lang.CharSequence, int, int)
    {
        java.lang.AbstractStringBuilder r0, r2;
        java.lang.CharSequence r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, i13;
        java.lang.IndexOutOfBoundsException $r3;
        char[] $r4, $r5, $r6, $r7, $r9, $r11, $r12;
        boolean $z0, $z1, $z2;
        char $c10;
        java.lang.String $r8;
        java.lang.Object $r10;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $i5 = i0 | i1;

        if $i5 < 0 goto label2;

        if i0 > i1 goto label2;

        $i6 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i1 <= $i6 goto label3;

     label2:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        i2 = i1 - i0;

        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

        i3 = $i7 + i2;

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i8 = lengthof $r4;

        if i3 <= $i8 goto label4;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i3);

        goto label5;

     label4:
        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 == 0 goto label5;

        $r11 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r10 = virtualinvoke $r11.<java.lang.Object: java.lang.Object clone()>();

        $r12 = (char[]) $r10;

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r12;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label5:
        $z1 = r1 instanceof java.lang.String;

        if $z1 == 0 goto label6;

        $r8 = (java.lang.String) r1;

        $r9 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i12 = r0.<java.lang.AbstractStringBuilder: int count>;

        virtualinvoke $r8.<java.lang.String: void _getChars(int,int,char[],int)>(i0, i1, $r9, $i12);

        goto label9;

     label6:
        $z2 = r1 instanceof java.lang.AbstractStringBuilder;

        if $z2 == 0 goto label7;

        r2 = (java.lang.AbstractStringBuilder) r1;

        $r7 = r2.<java.lang.AbstractStringBuilder: char[] value>;

        $r6 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i11 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r7, i0, $r6, $i11, i2);

        goto label9;

     label7:
        i13 = r0.<java.lang.AbstractStringBuilder: int count>;

        i4 = i0;

     label8:
        if i4 >= i1 goto label9;

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i9 = i13;

        i13 = i13 + 1;

        $c10 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i4);

        $r5[$i9] = $c10;

        i4 = i4 + 1;

        goto label8;

     label9:
        r0.<java.lang.AbstractStringBuilder: int count> = i3;

        return;
    }

    public int capacity()
    {
        java.lang.AbstractStringBuilder r0;
        char[] $r1;
        int $i0;

        r0 := @this: java.lang.AbstractStringBuilder;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public char charAt(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;
        char $c2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;

     label2:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $c2 = $r2[i0];

        return $c2;
    }

    private java.lang.StringIndexOutOfBoundsException indexAndLength(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1;
        java.lang.StringIndexOutOfBoundsException $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringIndexOutOfBoundsException;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int,int)>($i1, i0);

        throw $r1;
    }

    private java.lang.StringIndexOutOfBoundsException startEndAndLength(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3;
        java.lang.StringIndexOutOfBoundsException $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = new java.lang.StringIndexOutOfBoundsException;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i2 = i1 - i0;

        specialinvoke $r1.<java.lang.StringIndexOutOfBoundsException: void <init>(int,int,int)>($i3, i0, $i2);

        throw $r1;
    }

    final void delete0(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] r1, $r3, $r4, $r5, $r6, $r7;
        java.lang.StringIndexOutOfBoundsException $r2;
        boolean $z0;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 <= $i3 goto label1;

        i1 = r0.<java.lang.AbstractStringBuilder: int count>;

     label1:
        if i0 < 0 goto label2;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i4 goto label2;

        if i0 <= i1 goto label3;

     label2:
        $r2 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException startEndAndLength(int,int)>(i0, i1);

        throw $r2;

     label3:
        if i1 != i0 goto label4;

        return;

     label4:
        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        i2 = $i5 - i1;

        if i2 < 0 goto label6;

        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 != 0 goto label5;

        $r7 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r7, i1, $r5, i0, i2);

        goto label6;

     label5:
        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i9 = lengthof $r3;

        r1 = newarray (char)[$i9];

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r4, 0, r1, 0, i0);

        $r6 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r6, i1, r1, i0, i2);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label6:
        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i6 = i1 - i0;

        $i8 = $i7 - $i6;

        r0.<java.lang.AbstractStringBuilder: int count> = $i8;

        return;
    }

    final void deleteCharAt0(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2;
        java.lang.StringIndexOutOfBoundsException $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;

     label2:
        $i2 = i0 + 1;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void delete0(int,int)>(i0, $i2);

        return;
    }

    public void ensureCapacity(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        char[] $r1, $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = lengthof $r1;

        if i0 <= $i2 goto label1;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = lengthof $r2;

        $i4 = $i3 * 2;

        i1 = $i4 + 2;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i0);

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>($i5);

     label1:
        return;
    }

    public void getChars(int, int, char[], int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5;
        char[] r1, $r3;
        java.lang.StringIndexOutOfBoundsException $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i3 goto label1;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 > $i4 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r2 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException startEndAndLength(int,int)>(i0, i1);

        throw $r2;

     label2:
        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i5 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r3, i0, r1, i2, $i5);

        return;
    }

    final void insert0(int, char[])
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] r1, $r3;
        java.lang.StringIndexOutOfBoundsException $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        if i0 < 0 goto label1;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 <= $i1 goto label2;

     label1:
        $r2 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r2;

     label2:
        $i2 = lengthof r1;

        if $i2 == 0 goto label3;

        $i3 = lengthof r1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void move(int,int)>($i3, i0);

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, 0, $r3, i0, $i4);

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i5 = lengthof r1;

        $i7 = $i6 + $i5;

        r0.<java.lang.AbstractStringBuilder: int count> = $i7;

     label3:
        return;
    }

    final void insert0(int, char[], int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] r1, $r15;
        java.lang.StringIndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14;
        java.lang.String $r13;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 < 0 goto label2;

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i6 goto label2;

        if i1 < 0 goto label2;

        if i2 < 0 goto label2;

        $i5 = lengthof r1;

        $i7 = $i5 - i1;

        if i2 > $i7 goto label2;

        if i2 == 0 goto label1;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void move(int,int)>(i2, i0);

        $r15 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i1, $r15, i0, i2);

        $i9 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i8 = $i9 + i2;

        r0.<java.lang.AbstractStringBuilder: int count> = $i8;

     label1:
        return;

     label2:
        $r2 = new java.lang.StringIndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("this.length=");

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; index=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; chars.length=");

        $i4 = lengthof r1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; start=");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; length=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r2;
    }

    final void insert0(int, char)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i2, $i3, $i4, $i5;
        char c1;
        java.lang.ArrayIndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        if i0 < 0 goto label1;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 <= $i3 goto label2;

     label1:
        $r1 = new java.lang.ArrayIndexOutOfBoundsException;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        specialinvoke $r1.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int,int)>($i2, i0);

        throw $r1;

     label2:
        specialinvoke r0.<java.lang.AbstractStringBuilder: void move(int,int)>(1, i0);

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r2[i0] = c1;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i5 = $i4 + 1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i5;

        return;
    }

    final void insert0(int, java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String r1;
        java.lang.StringIndexOutOfBoundsException $r2;
        char[] $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        if i0 < 0 goto label3;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i2 goto label3;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 == 0 goto label2;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void move(int,int)>(i1, i0);

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        virtualinvoke r1.<java.lang.String: void _getChars(int,int,char[],int)>(0, i1, $r3, i0);

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = $i3 + i1;

        r0.<java.lang.AbstractStringBuilder: int count> = $i4;

     label2:
        goto label4;

     label3:
        $r2 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r2;

     label4:
        return;
    }

    final void insert0(int, java.lang.CharSequence, int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.CharSequence r1, $r3;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.String $r4;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $i3 = i0 | i1;

        $i4 = $i3 | i2;

        if $i4 < 0 goto label2;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i5 goto label2;

        if i1 > i2 goto label2;

        $i6 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i2 <= $i6 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i1, i2);

        $r4 = interfaceinvoke $r3.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void insert0(int,java.lang.String)>(i0, $r4);

        return;
    }

    public int length()
    {
        java.lang.AbstractStringBuilder r0;
        int $i0;

        r0 := @this: java.lang.AbstractStringBuilder;

        $i0 = r0.<java.lang.AbstractStringBuilder: int count>;

        return $i0;
    }

    private void move(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        char[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i4 = lengthof $r2;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i5 = $i4 - $i3;

        if $i5 < i0 goto label2;

        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 != 0 goto label1;

        $r7 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r8 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i15 = i1 + i0;

        $i14 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i16 = $i14 - i1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r7, i1, $r8, $i15, $i16);

        return;

     label1:
        $r6 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        i2 = lengthof $r6;

        goto label3;

     label2:
        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i10 = $i6 + i0;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i7 = lengthof $r3;

        $i8 = $i7 * 2;

        $i9 = $i8 + 2;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i9);

     label3:
        r1 = newarray (char)[i2];

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r4, 0, r1, 0, i1);

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i12 = i1 + i0;

        $i11 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i13 = $i11 - i1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r5, i1, r1, $i12, $i13);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        return;
    }

    final void replace0(int, int, java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String r1;
        char[] r2, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.StringIndexOutOfBoundsException $r3;
        java.lang.NullPointerException $r4;
        boolean $z0, $z1;
        java.lang.Object $r6;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        if i0 < 0 goto label8;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 <= $i4 goto label1;

        i1 = r0.<java.lang.AbstractStringBuilder: int count>;

     label1:
        if i1 <= i0 goto label6;

        i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = i1 - i0;

        i3 = $i5 - i2;

        if i3 <= 0 goto label3;

        $z1 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z1 != 0 goto label2;

        $r13 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r12 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i15 = i0 + i2;

        $i14 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i13 = $i14 - i1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r13, i1, $r12, $i15, $i13);

        goto label5;

     label2:
        $r9 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i9 = lengthof $r9;

        r2 = newarray (char)[$i9];

        $r10 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r10, 0, r2, 0, i0);

        $r11 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i12 = i0 + i2;

        $i11 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i10 = $i11 - i1;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r11, i1, r2, $i12, $i10);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r2;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        goto label5;

     label3:
        if i3 >= 0 goto label4;

        $i8 = neg i3;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void move(int,int)>($i8, i1);

        goto label5;

     label4:
        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 == 0 goto label5;

        $r7 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r6 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (char[]) $r6;

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r8;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label5:
        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        virtualinvoke r1.<java.lang.String: void _getChars(int,int,char[],int)>(0, i2, $r5, i0);

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i7 = $i6 - i3;

        r0.<java.lang.AbstractStringBuilder: int count> = $i7;

        return;

     label6:
        if i0 != i1 goto label8;

        if r1 != null goto label7;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("string == null");

        throw $r4;

     label7:
        virtualinvoke r0.<java.lang.AbstractStringBuilder: void insert0(int,java.lang.String)>(i0, r1);

        return;

     label8:
        $r3 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException startEndAndLength(int,int)>(i0, i1);

        throw $r3;
    }

    final void reverse0()
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i3, i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26;
        char c1, c2, c5, c6, $c17, c27, c28;
        boolean z0, z1, z2, z3, $z4, $z5, $z6;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, r21;

        r0 := @this: java.lang.AbstractStringBuilder;

        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i7 >= 2 goto label01;

        return;

     label01:
        $z4 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z4 != 0 goto label17;

        $i13 = r0.<java.lang.AbstractStringBuilder: int count>;

        i0 = $i13 - 1;

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        c1 = $r4[0];

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        c2 = $r5[i0];

        z0 = 1;

        z1 = 1;

        i3 = 0;

        $i14 = r0.<java.lang.AbstractStringBuilder: int count>;

        i4 = $i14 / 2;

     label02:
        if i3 >= i4 goto label12;

        $r7 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i18 = i3 + 1;

        c5 = $r7[$i18];

        $r10 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i19 = i0 - 1;

        c6 = $r10[$i19];

        if z0 == 0 goto label03;

        if c5 < 56320 goto label03;

        if c5 > 57343 goto label03;

        if c1 < 55296 goto label03;

        if c1 > 56319 goto label03;

        $z6 = 1;

        goto label04;

     label03:
        $z6 = 0;

     label04:
        z2 = $z6;

        if z2 == 0 goto label05;

        $i23 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i23 >= 3 goto label05;

        return;

     label05:
        if z1 == 0 goto label06;

        if c6 < 55296 goto label06;

        if c6 > 56319 goto label06;

        if c2 < 56320 goto label06;

        if c2 > 57343 goto label06;

        $z5 = 1;

        goto label07;

     label06:
        $z5 = 0;

     label07:
        z3 = $z5;

        z1 = 1;

        z0 = 1;

        if z2 != z3 goto label09;

        if z2 == 0 goto label08;

        $r17 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r17[i0] = c5;

        $r15 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i20 = i0 - 1;

        $r15[$i20] = c1;

        $r16 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r16[i3] = c6;

        $r19 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i22 = i3 + 1;

        $r19[$i22] = c2;

        $r18 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i21 = i3 + 2;

        c1 = $r18[$i21];

        $r20 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i24 = i0 - 2;

        c2 = $r20[$i24];

        i3 = i3 + 1;

        i0 = i0 + -1;

        goto label11;

     label08:
        $r11 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r11[i0] = c1;

        $r12 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r12[i3] = c2;

        c1 = c5;

        c2 = c6;

        goto label11;

     label09:
        if z2 == 0 goto label10;

        $r13 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r13[i0] = c5;

        $r14 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r14[i3] = c2;

        c2 = c6;

        z0 = 0;

        goto label11;

     label10:
        $r8 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r8[i0] = c1;

        $r9 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r9[i3] = c6;

        c1 = c5;

        z1 = 0;

     label11:
        i3 = i3 + 1;

        i0 = i0 + -1;

        goto label02;

     label12:
        $i16 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i15 = $i16 & 1;

        if $i15 != 1 goto label16;

        if z0 == 0 goto label13;

        if z1 != 0 goto label16;

     label13:
        $r6 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        if z0 == 0 goto label14;

        $c17 = c2;

        goto label15;

     label14:
        $c17 = c1;

     label15:
        $r6[i0] = $c17;

     label16:
        goto label21;

     label17:
        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i8 = lengthof $r1;

        r21 = newarray (char)[$i8];

        i25 = 0;

        i26 = r0.<java.lang.AbstractStringBuilder: int count>;

     label18:
        $i9 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i25 >= $i9 goto label20;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        c27 = $r2[i25];

        $i10 = i25 + 1;

        $i11 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i10 >= $i11 goto label19;

        if c27 < 55296 goto label19;

        if c27 > 56319 goto label19;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i12 = i25 + 1;

        c28 = $r3[$i12];

        if c28 < 56320 goto label19;

        if c28 > 57343 goto label19;

        i26 = i26 + -1;

        r21[i26] = c28;

        i25 = i25 + 1;

     label19:
        i26 = i26 + -1;

        r21[i26] = c27;

        i25 = i25 + 1;

        goto label18;

     label20:
        r0.<java.lang.AbstractStringBuilder: char[] value> = r21;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label21:
        return;
    }

    public void setCharAt(int, char)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i2;
        char c1;
        java.lang.StringIndexOutOfBoundsException $r1;
        boolean $z0;
        char[] $r2, $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        if i0 < 0 goto label1;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 < $i2 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;

     label2:
        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 == 0 goto label3;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (char[]) $r4;

        r0.<java.lang.AbstractStringBuilder: char[] value> = $r5;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label3:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $r2[i0] = c1;

        return;
    }

    public void setLength(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        char[] r1, $r2, $r3, $r4, $r5;
        boolean $z0;
        java.lang.StringIndexOutOfBoundsException $r6;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.lang.String $r9;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r6 = new java.lang.StringIndexOutOfBoundsException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length < 0: ");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label1:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i1 = lengthof $r2;

        if i0 <= $i1 goto label2;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void enlargeBuffer(int)>(i0);

        goto label4;

     label2:
        $z0 = r0.<java.lang.AbstractStringBuilder: boolean shared>;

        if $z0 == 0 goto label3;

        $r4 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i4 = lengthof $r4;

        r1 = newarray (char)[$i4];

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r5, 0, r1, 0, $i5);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

        goto label4;

     label3:
        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i2 >= i0 goto label4;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.util.Arrays: void fill(char[],int,int,char)>($r3, $i3, i0, 0);

     label4:
        r0.<java.lang.AbstractStringBuilder: int count> = i0;

        return;
    }

    public java.lang.String substring(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringIndexOutOfBoundsException $r1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 > $i1 goto label2;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 != $i2 goto label1;

        return "";

     label1:
        $r2 = new java.lang.String;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i4 = $i3 - i0;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, i0, $i4);

        return $r2;

     label2:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;
    }

    public java.lang.String substring(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3;
        java.lang.StringIndexOutOfBoundsException $r1;
        java.lang.String $r2;
        char[] $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i0 > i1 goto label2;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 > $i2 goto label2;

        if i0 != i1 goto label1;

        return "";

     label1:
        $r2 = new java.lang.String;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = i1 - i0;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, i0, $i3);

        return $r2;

     label2:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException startEndAndLength(int,int)>(i0, i1);

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r1, $r3, $r5;
        java.lang.String $r2, $r4;

        r0 := @this: java.lang.AbstractStringBuilder;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i1 != 0 goto label1;

        return "";

     label1:
        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = lengthof $r1;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        i0 = $i3 - $i2;

        if i0 >= 256 goto label2;

        if i0 < 16 goto label3;

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i7 = $i6 >> 1;

        if i0 < $i7 goto label3;

     label2:
        $r2 = new java.lang.String;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i4 = r0.<java.lang.AbstractStringBuilder: int count>;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>($r3, 0, $i4);

        return $r2;

     label3:
        r0.<java.lang.AbstractStringBuilder: boolean shared> = 1;

        $r4 = new java.lang.String;

        $i5 = r0.<java.lang.AbstractStringBuilder: int count>;

        $r5 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        specialinvoke $r4.<java.lang.String: void <init>(int,int,char[])>(0, $i5, $r5);

        return $r4;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);

        return $r1;
    }

    public int indexOf(java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String,int)>(r1, 0);

        return $i0;
    }

    public int indexOf(java.lang.String, int)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        char c2, $c13, $c14, $c15;
        boolean z0;
        char[] $r2, $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 >= 0 goto label01;

        i0 = 0;

     label01:
        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 <= 0 goto label12;

        $i9 = i1 + i0;

        $i8 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i9 <= $i8 goto label02;

        return -1;

     label02:
        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

     label03:
        i3 = i0;

        z0 = 0;

     label04:
        $i10 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i3 >= $i10 goto label06;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $c15 = $r3[i3];

        if $c15 != c2 goto label05;

        z0 = 1;

        goto label06;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        if z0 == 0 goto label07;

        $i11 = i1 + i3;

        $i12 = r0.<java.lang.AbstractStringBuilder: int count>;

        if $i11 <= $i12 goto label08;

     label07:
        return -1;

     label08:
        i4 = i3;

        i5 = 0;

     label09:
        i5 = i5 + 1;

        if i5 >= i1 goto label10;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        i4 = i4 + 1;

        $c13 = $r2[i4];

        $c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if $c13 != $c14 goto label10;

        goto label09;

     label10:
        if i5 != i1 goto label11;

        return i3;

     label11:
        i0 = i3 + 1;

        goto label03;

     label12:
        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 < $i6 goto label13;

        if i0 != 0 goto label14;

     label13:
        $i7 = i0;

        goto label15;

     label14:
        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

     label15:
        return $i7;
    }

    public int lastIndexOf(java.lang.String)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int $i0, $i1;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i1 = virtualinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)>(r1, $i0);

        return $i1;
    }

    public int lastIndexOf(java.lang.String, int)
    {
        java.lang.AbstractStringBuilder r0;
        java.lang.String r1;
        int i0, i1, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i13;
        char c2, $c11, $c12, $c14;
        boolean z0;
        char[] $r2, $r3;

        r0 := @this: java.lang.AbstractStringBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i6 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 > $i6 goto label13;

        if i0 < 0 goto label13;

        if i1 <= 0 goto label10;

        $i9 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i10 = $i9 - i1;

        if i0 <= $i10 goto label01;

        $i13 = r0.<java.lang.AbstractStringBuilder: int count>;

        i0 = $i13 - i1;

     label01:
        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

     label02:
        i3 = i0;

        z0 = 0;

     label03:
        if i3 < 0 goto label05;

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $c14 = $r3[i3];

        if $c14 != c2 goto label04;

        z0 = 1;

        goto label05;

     label04:
        i3 = i3 + -1;

        goto label03;

     label05:
        if z0 != 0 goto label06;

        return -1;

     label06:
        i4 = i3;

        i5 = 0;

     label07:
        i5 = i5 + 1;

        if i5 >= i1 goto label08;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        i4 = i4 + 1;

        $c11 = $r2[i4];

        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        if $c11 != $c12 goto label08;

        goto label07;

     label08:
        if i5 != i1 goto label09;

        return i3;

     label09:
        i0 = i3 - 1;

        goto label02;

     label10:
        $i7 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 >= $i7 goto label11;

        $i8 = i0;

        goto label12;

     label11:
        $i8 = r0.<java.lang.AbstractStringBuilder: int count>;

     label12:
        return $i8;

     label13:
        return -1;
    }

    public void trimToSize()
    {
        java.lang.AbstractStringBuilder r0;
        char[] r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.lang.AbstractStringBuilder;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        r1 = newarray (char)[$i2];

        $r3 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = r0.<java.lang.AbstractStringBuilder: int count>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r3, 0, r1, 0, $i3);

        r0.<java.lang.AbstractStringBuilder: char[] value> = r1;

        r0.<java.lang.AbstractStringBuilder: boolean shared> = 0;

     label1:
        return;
    }

    public int codePointAt(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2, $i3;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;

     label2:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i3 = staticinvoke <java.lang.Character: int codePointAt(char[],int,int)>($r2, i0, $i2);

        return $i3;
    }

    public int codePointBefore(int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, $i1, $i2;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $i1 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i0 <= $i1 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException indexAndLength(int)>(i0);

        throw $r1;

     label2:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = staticinvoke <java.lang.Character: int codePointBefore(char[],int)>($r2, i0);

        return $i2;
    }

    public int codePointCount(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringIndexOutOfBoundsException $r1;
        char[] $r2;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label1;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        if i1 > $i2 goto label1;

        if i0 <= i1 goto label2;

     label1:
        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.StringIndexOutOfBoundsException startEndAndLength(int,int)>(i0, i1);

        throw $r1;

     label2:
        $r2 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i3 = i1 - i0;

        $i4 = staticinvoke <java.lang.Character: int codePointCount(char[],int,int)>($r2, i0, $i3);

        return $i4;
    }

    public int offsetByCodePoints(int, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i1, $i2, $i3;
        char[] $r1;

        r0 := @this: java.lang.AbstractStringBuilder;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<java.lang.AbstractStringBuilder: char[] value>;

        $i2 = r0.<java.lang.AbstractStringBuilder: int count>;

        $i3 = staticinvoke <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)>($r1, 0, $i2, i0, i1);

        return $i3;
    }

    public static void <clinit>()
    {
        <java.lang.AbstractStringBuilder: int INITIAL_CAPACITY> = 16;

        return;
    }
}
