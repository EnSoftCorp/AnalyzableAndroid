public class javax.crypto.ExemptionMechanism extends java.lang.Object
{
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private final java.security.Provider provider;
    private final javax.crypto.ExemptionMechanismSpi spiImpl;
    private final java.lang.String mechanism;
    private boolean isInit;
    private java.security.Key initKey;
    private boolean generated;

    protected void <init>(javax.crypto.ExemptionMechanismSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.ExemptionMechanism r0;
        javax.crypto.ExemptionMechanismSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: javax.crypto.ExemptionMechanismSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.ExemptionMechanism: java.lang.String mechanism> = r3;

        r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl> = r1;

        r0.<javax.crypto.ExemptionMechanism: java.security.Provider provider> = r2;

        r0.<javax.crypto.ExemptionMechanism: boolean isInit> = 0;

        return;
    }

    public final java.lang.String getName()
    {
        javax.crypto.ExemptionMechanism r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.ExemptionMechanism;

        $r1 = r0.<javax.crypto.ExemptionMechanism: java.lang.String mechanism>;

        return $r1;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        org.apache.harmony.security.fortress.Engine $r2;
        javax.crypto.ExemptionMechanism $r3;
        java.lang.Object $r4;
        java.security.Provider $r5;
        javax.crypto.ExemptionMechanismSpi $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label1:
        $r2 = <javax.crypto.ExemptionMechanism: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r3 = new javax.crypto.ExemptionMechanism;

        $r4 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r6 = (javax.crypto.ExemptionMechanismSpi) $r4;

        $r5 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r3.<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>($r6, $r5, r0);

        return $r3;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        javax.crypto.ExemptionMechanism $r3;
        java.lang.NullPointerException $r4;
        java.security.NoSuchProviderException $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r6;

     label1:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label2:
        if r0 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r4;

     label3:
        $r3 = staticinvoke <javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r3;
    }

    public static final javax.crypto.ExemptionMechanism getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.lang.Object r2;
        org.apache.harmony.security.fortress.Engine $r3;
        javax.crypto.ExemptionMechanism $r4;
        javax.crypto.ExemptionMechanismSpi $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r6;

     label2:
        $r3 = <javax.crypto.ExemptionMechanism: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r4 = new javax.crypto.ExemptionMechanism;

        $r5 = (javax.crypto.ExemptionMechanismSpi) r2;

        specialinvoke $r4.<javax.crypto.ExemptionMechanism: void <init>(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)>($r5, r1, r0);

        return $r4;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Provider $r1;

        r0 := @this: javax.crypto.ExemptionMechanism;

        $r1 = r0.<javax.crypto.ExemptionMechanism: java.security.Provider provider>;

        return $r1;
    }

    public final boolean isCryptoAllowed(java.security.Key) throws javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1, $r2, $r3;
        boolean $z0, $z1, $z2;
        byte[] $r4, $r5;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: java.security.Key;

        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean generated>;

        if $z0 == 0 goto label2;

        $r2 = r0.<javax.crypto.ExemptionMechanism: java.security.Key initKey>;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $r3 = r0.<javax.crypto.ExemptionMechanism: java.security.Key initKey>;

        $r4 = interfaceinvoke $r3.<java.security.Key: byte[] getEncoded()>();

        $r5 = interfaceinvoke r1.<java.security.Key: byte[] getEncoded()>();

        $z2 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final int getOutputSize(int) throws java.lang.IllegalStateException
    {
        javax.crypto.ExemptionMechanism r0;
        int i0, $i1;
        boolean $z0;
        javax.crypto.ExemptionMechanismSpi $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: javax.crypto.ExemptionMechanism;

        i0 := @parameter0: int;

        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean isInit>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism is not initialized");

        throw $r2;

     label1:
        $r1 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        $i1 = virtualinvoke $r1.<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)>(i0);

        return $i1;
    }

    public final void init(java.security.Key) throws java.security.InvalidKeyException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        javax.crypto.ExemptionMechanismSpi $r2;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: java.security.Key;

        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 0;

        $r2 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        virtualinvoke $r2.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)>(r1);

        r0.<javax.crypto.ExemptionMechanism: java.security.Key initKey> = r1;

        r0.<javax.crypto.ExemptionMechanism: boolean isInit> = 1;

        return;
    }

    public final void init(java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.AlgorithmParameters;

        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 0;

        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)>(r1, r2);

        r0.<javax.crypto.ExemptionMechanism: java.security.Key initKey> = r1;

        r0.<javax.crypto.ExemptionMechanism: boolean isInit> = 1;

        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        javax.crypto.ExemptionMechanismSpi $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 0;

        $r3 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        virtualinvoke $r3.<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)>(r1, r2);

        r0.<javax.crypto.ExemptionMechanism: java.security.Key initKey> = r1;

        r0.<javax.crypto.ExemptionMechanism: boolean isInit> = 1;

        return;
    }

    public final byte[] genExemptionBlob() throws java.lang.IllegalStateException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        boolean $z0;
        javax.crypto.ExemptionMechanismSpi $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean isInit>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism is not initialized");

        throw $r3;

     label1:
        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 0;

        $r2 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        r1 = virtualinvoke $r2.<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()>();

        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 1;

        return r1;
    }

    public final int genExemptionBlob(byte[]) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        int $i0;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: byte[];

        $i0 = virtualinvoke r0.<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)>(r1, 0);

        return $i0;
    }

    public final int genExemptionBlob(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException, javax.crypto.ExemptionMechanismException
    {
        javax.crypto.ExemptionMechanism r0;
        byte[] r1;
        int i0, i1;
        boolean $z0;
        javax.crypto.ExemptionMechanismSpi $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $z0 = r0.<javax.crypto.ExemptionMechanism: boolean isInit>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExemptionMechanism is not initialized");

        throw $r3;

     label1:
        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 0;

        $r2 = r0.<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanismSpi spiImpl>;

        i1 = virtualinvoke $r2.<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)>(r1, i0);

        r0.<javax.crypto.ExemptionMechanism: boolean generated> = 1;

        return i1;
    }

    protected void finalize()
    {
        javax.crypto.ExemptionMechanism r0;
        java.lang.Throwable r1, $r2;
        java.lang.AssertionError $r3;

        r0 := @this: javax.crypto.ExemptionMechanism;

     label1:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("ExemptionMechanism");

        <javax.crypto.ExemptionMechanism: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }
}
