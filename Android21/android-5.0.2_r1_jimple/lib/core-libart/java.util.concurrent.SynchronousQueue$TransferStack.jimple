final class java.util.concurrent.SynchronousQueue$TransferStack extends java.util.concurrent.SynchronousQueue$Transferer
{
    static final int REQUEST;
    static final int DATA;
    static final int FULFILLING;
    volatile java.util.concurrent.SynchronousQueue$TransferStack$SNode head;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;

    void <init>()
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        specialinvoke r0.<java.util.concurrent.SynchronousQueue$Transferer: void <init>()>();

        return;
    }

    static boolean isFulfilling(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode, java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;

        if r1 != $r3 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferStack: long headOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    static java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode, java.lang.Object, java.util.concurrent.SynchronousQueue$TransferStack$SNode, int)
    {
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r0, r2, $r3;
        java.lang.Object r1;
        int i0;

        r0 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        i0 := @parameter3: int;

        if r0 != null goto label1;

        $r3 = new java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        specialinvoke $r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void <init>(java.lang.Object)>(r1);

        r0 = $r3;

     label1:
        r0.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode> = i0;

        r0.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next> = r2;

        return r0;
    }

    java.lang.Object transfer(java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.lang.Object r1, $r8, $r14;
        boolean z0, $z1, $z3, $z5, $z6, $z9, $z13, $z14;
        long l0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r2, r3, r4, r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, r15, r16, r17, r18;
        byte b1, $b2, $b5, $b6;
        int $i3, $i4;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        r2 = null;

        if r1 != null goto label01;

        $b6 = 0;

        goto label02;

     label01:
        $b6 = 1;

     label02:
        b1 = $b6;

     label03:
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;

        if r3 == null goto label04;

        $i4 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;

        if $i4 != b1 goto label11;

     label04:
        if z0 == 0 goto label06;

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label06;

        if r3 == null goto label05;

        $z3 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();

        if $z3 == 0 goto label05;

        $r11 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r11);

        goto label21;

     label05:
        return null;

     label06:
        $r6 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.lang.Object,java.util.concurrent.SynchronousQueue$TransferStack$SNode,int)>(r2, r1, r3, b1);

        r2 = $r6;

        $z1 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r6);

        if $z1 == 0 goto label21;

        r4 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode awaitFulfill(java.util.concurrent.SynchronousQueue$TransferStack$SNode,boolean,long)>(r2, z0, l0);

        if r4 != r2 goto label07;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: void clean(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2);

        return null;

     label07:
        $r7 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;

        r15 = $r7;

        if $r7 == null goto label08;

        $r9 = r15.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        if $r9 != r2 goto label08;

        $r10 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r15, $r10);

     label08:
        if b1 != 0 goto label09;

        $r8 = r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

        goto label10;

     label09:
        $r8 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

     label10:
        return $r8;

     label11:
        $i3 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;

        $z6 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: boolean isFulfilling(int)>($i3);

        if $z6 != 0 goto label18;

        $z9 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();

        if $z9 == 0 goto label12;

        $r13 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r13);

        goto label21;

     label12:
        $b5 = 2 | b1;

        $r12 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode snode(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.lang.Object,java.util.concurrent.SynchronousQueue$TransferStack$SNode,int)>(r2, r1, r3, $b5);

        r2 = $r12;

        $z13 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r12);

        if $z13 == 0 goto label21;

     label13:
        r16 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        if r16 != null goto label14;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2, null);

        r2 = null;

        goto label21;

     label14:
        r5 = r16.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        $z14 = virtualinvoke r16.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean tryMatch(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2);

        if $z14 == 0 goto label17;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r2, r5);

        if b1 != 0 goto label15;

        $r14 = r16.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

        goto label16;

     label15:
        $r14 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item>;

     label16:
        return $r14;

     label17:
        virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r16, r5);

        goto label13;

     label18:
        r17 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        if r17 != null goto label19;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, null);

        goto label21;

     label19:
        r18 = r17.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        $z5 = virtualinvoke r17.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean tryMatch(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3);

        if $z5 == 0 goto label20;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, r18);

        goto label21;

     label20:
        virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r17, r18);

     label21:
        goto label03;
    }

    java.util.concurrent.SynchronousQueue$TransferStack$SNode awaitFulfill(java.util.concurrent.SynchronousQueue$TransferStack$SNode, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r3;
        boolean z0, $z1, $z2, $z3;
        long l0, l1, $l4, $l8, $l9;
        java.lang.Thread r2, $r4;
        int i2, $i5, $i6;
        byte $b3, $b7;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        if z0 == 0 goto label01;

        $l9 = staticinvoke <java.lang.System: long nanoTime()>();

        $l8 = $l9 + l0;

        goto label02;

     label01:
        $l8 = 0L;

     label02:
        l1 = $l8;

        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r1);

        if $z1 == 0 goto label04;

        if z0 == 0 goto label03;

        $i6 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;

        goto label05;

     label03:
        $i6 = <java.util.concurrent.SynchronousQueue: int maxUntimedSpins>;

        goto label05;

     label04:
        $i6 = 0;

     label05:
        i2 = $i6;

     label06:
        $z2 = virtualinvoke r2.<java.lang.Thread: boolean isInterrupted()>();

        if $z2 == 0 goto label07;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void tryCancel()>();

     label07:
        r3 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode match>;

        if r3 == null goto label08;

        return r3;

     label08:
        if z0 == 0 goto label09;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l1 - $l4;

        $b7 = l0 cmp 0L;

        if $b7 > 0 goto label09;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: void tryCancel()>();

        goto label06;

     label09:
        if i2 <= 0 goto label12;

        $z3 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r1);

        if $z3 == 0 goto label10;

        $i5 = i2 - 1;

        goto label11;

     label10:
        $i5 = 0;

     label11:
        i2 = $i5;

        goto label15;

     label12:
        $r4 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter>;

        if $r4 != null goto label13;

        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter> = r2;

        goto label15;

     label13:
        if z0 != 0 goto label14;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label15;

     label14:
        $b3 = l0 cmp 1000L;

        if $b3 <= 0 goto label15;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

     label15:
        goto label06;
    }

    boolean shouldSpin(java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        r2 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;

        if r2 == r1 goto label1;

        if r2 == null goto label1;

        $i0 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: int mode>;

        $z0 = staticinvoke <java.util.concurrent.SynchronousQueue$TransferStack: boolean isFulfilling(int)>($i0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    void clean(java.util.concurrent.SynchronousQueue$TransferStack$SNode)
    {
        java.util.concurrent.SynchronousQueue$TransferStack r0;
        java.util.concurrent.SynchronousQueue$TransferStack$SNode r1, r2, r3, r4, $r5, $r6, $r7;
        boolean $z0, $z2, $z4;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferStack;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferStack$SNode;

        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Object item> = null;

        r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.lang.Thread waiter> = null;

        r2 = r1.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        if r2 == null goto label1;

        $z4 = virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();

        if $z4 == 0 goto label1;

        r2 = r2.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

     label1:
        $r5 = r0.<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;

        r3 = $r5;

        if $r5 == null goto label2;

        if r3 == r2 goto label2;

        $z2 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();

        if $z2 == 0 goto label2;

        $r7 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferStack: boolean casHead(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r3, $r7);

        goto label1;

     label2:
        if r3 == null goto label5;

        if r3 == r2 goto label5;

        r4 = r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        if r4 == null goto label3;

        $z0 = virtualinvoke r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean isCancelled()>();

        if $z0 == 0 goto label3;

        $r6 = r4.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;

        virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferStack$SNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferStack$SNode,java.util.concurrent.SynchronousQueue$TransferStack$SNode)>(r4, $r6);

        goto label4;

     label3:
        r3 = r4;

     label4:
        goto label2;

     label5:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, r6;
        java.lang.Error $r5;

        <java.util.concurrent.SynchronousQueue$TransferStack: int FULFILLING> = 2;

        <java.util.concurrent.SynchronousQueue$TransferStack: int DATA> = 1;

        <java.util.concurrent.SynchronousQueue$TransferStack: int REQUEST> = 0;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/SynchronousQueue$TransferStack";

        $r2 = <java.util.concurrent.SynchronousQueue$TransferStack: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.SynchronousQueue$TransferStack: long headOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r6);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
