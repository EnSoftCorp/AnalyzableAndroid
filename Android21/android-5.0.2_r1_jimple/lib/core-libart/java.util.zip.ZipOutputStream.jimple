public class java.util.zip.ZipOutputStream extends java.util.zip.DeflaterOutputStream implements java.util.zip.ZipConstants
{
    public static final int DEFLATED;
    public static final int STORED;
    private static final int ZIP_VERSION_2_0;
    private byte[] commentBytes;
    private final java.util.HashSet entries;
    private int defaultCompressionMethod;
    private int compressionLevel;
    private java.io.ByteArrayOutputStream cDir;
    private java.util.zip.ZipEntry currentEntry;
    private final java.util.zip.CRC32 crc;
    private int offset;
    private int curOffset;
    private byte[] nameBytes;
    private byte[] entryCommentBytes;

    public void <init>(java.io.OutputStream)
    {
        java.util.zip.ZipOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater $r2;
        byte[] $r3;
        java.util.HashSet $r4;
        java.io.ByteArrayOutputStream $r5;
        java.util.zip.CRC32 $r6;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new java.util.zip.Deflater;

        specialinvoke $r2.<java.util.zip.Deflater: void <init>(int,boolean)>(-1, 1);

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r1, $r2);

        $r3 = <libcore.util.EmptyArray: byte[] BYTE>;

        r0.<java.util.zip.ZipOutputStream: byte[] commentBytes> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries> = $r4;

        r0.<java.util.zip.ZipOutputStream: int defaultCompressionMethod> = 8;

        r0.<java.util.zip.ZipOutputStream: int compressionLevel> = -1;

        $r5 = new java.io.ByteArrayOutputStream;

        specialinvoke $r5.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir> = $r5;

        $r6 = new java.util.zip.CRC32;

        specialinvoke $r6.<java.util.zip.CRC32: void <init>()>();

        r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc> = $r6;

        r0.<java.util.zip.ZipOutputStream: int offset> = 0;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = 0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        java.io.OutputStream $r1, $r3;
        java.util.zip.Deflater $r2;

        r0 := @this: java.util.zip.ZipOutputStream;

        $r1 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label1;

        virtualinvoke r0.<java.util.zip.ZipOutputStream: void finish()>();

        $r2 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r2.<java.util.zip.Deflater: void end()>();

        $r3 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out> = null;

     label1:
        return;
    }

    public void closeEntry() throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        short s0, $s53, s75;
        java.util.zip.ZipEntry $r1, $r2, $r3, $r4, $r5, $r10, $r12, $r14, $r17, $r25, $r37, $r40, $r49, $r54, $r59, $r63, $r65, $r68;
        int $i1, $i2, $i3, $i4, $i9, $i11, $i13, $i18, $i19, $i24, $i25, $i27, $i28, $i29, $i32, $i34, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i48, $i50, $i51, $i54, $i57, $i60, $i61, $i64, $i72;
        java.io.ByteArrayOutputStream $r6, $r7, $r8, $r9, $r11, $r13, $r15, $r18, $r20, $r21, $r23, $r27, $r29, $r30, $r31, $r32, $r33, $r36, $r38, $r45, $r46, $r50, $r53;
        java.util.zip.CRC32 $r16, $r19, $r22, $r44, $r56, $r62, $r67;
        long $l16, $l17, $l20, $l21, $l22, $l23, $l35, $l46, $l47, $l49, $l55, $l56, $l58, $l63, $l67, $l68, $l69, $l71, $l74;
        byte[] $r24, $r26, $r28, $r34, $r35, $r39, $r41, $r42, $r47, $r48;
        java.util.zip.Deflater $r43, $r51, $r52, $r58, $r61;
        java.io.OutputStream $r55, $r57, $r60, $r66;
        byte $b66, $b70;
        java.util.zip.ZipException $r64, $r69;

        r0 := @this: java.util.zip.ZipOutputStream;

        specialinvoke r0.<java.util.zip.ZipOutputStream: void checkOpen()>();

        $r1 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i1 = virtualinvoke $r2.<java.util.zip.ZipEntry: int getMethod()>();

        if $i1 != 8 goto label02;

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void finish()>();

     label02:
        $r3 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i2 = virtualinvoke $r3.<java.util.zip.ZipEntry: int getMethod()>();

        if $i2 != 0 goto label04;

        $r67 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l74 = virtualinvoke $r67.<java.util.zip.CRC32: long getValue()>();

        $r68 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l67 = $r68.<java.util.zip.ZipEntry: long crc>;

        $b66 = $l74 cmp $l67;

        if $b66 == 0 goto label03;

        $r69 = new java.util.zip.ZipException;

        specialinvoke $r69.<java.util.zip.ZipException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r69;

     label03:
        $r63 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l68 = $r63.<java.util.zip.ZipEntry: long size>;

        $r62 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l69 = $r62.<java.util.zip.CRC32: long tbytes>;

        $b70 = $l68 cmp $l69;

        if $b70 == 0 goto label04;

        $r64 = new java.util.zip.ZipException;

        specialinvoke $r64.<java.util.zip.ZipException: void <init>(java.lang.String)>("Size mismatch");

        throw $r64;

     label04:
        r0.<java.util.zip.ZipOutputStream: int curOffset> = 30;

        $r4 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i3 = virtualinvoke $r4.<java.util.zip.ZipEntry: int getMethod()>();

        if $i3 == 0 goto label05;

        $i61 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $i60 = $i61 + 16;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = $i60;

        $r57 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r57, 134695760L);

        $r55 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r54 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r56 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l58 = virtualinvoke $r56.<java.util.zip.CRC32: long getValue()>();

        $r54.<java.util.zip.ZipEntry: long crc> = $l58;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r55, $l58);

        $r60 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r59 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r61 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        $i64 = virtualinvoke $r61.<java.util.zip.Deflater: int getTotalOut()>();

        $l63 = (long) $i64;

        $r59.<java.util.zip.ZipEntry: long compressedSize> = $l63;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r60, $l63);

        $r66 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r65 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r58 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        $i72 = virtualinvoke $r58.<java.util.zip.Deflater: int getTotalIn()>();

        $l71 = (long) $i72;

        $r65.<java.util.zip.ZipEntry: long size> = $l71;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r66, $l71);

     label05:
        $r5 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i4 = virtualinvoke $r5.<java.util.zip.ZipEntry: int getMethod()>();

        if $i4 != 0 goto label06;

        $s53 = 0;

        goto label07;

     label06:
        $s53 = 8;

     label07:
        s0 = $s53;

        s75 = s0 | 2048;

        $r6 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r6, 33639248L);

        $r7 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r7, 20);

        $r8 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r8, 20);

        $r9 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r9, s75);

        $r11 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r10 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i9 = virtualinvoke $r10.<java.util.zip.ZipEntry: int getMethod()>();

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r11, $i9);

        $r13 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r12 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i11 = $r12.<java.util.zip.ZipEntry: int time>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r13, $i11);

        $r15 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r14 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i13 = $r14.<java.util.zip.ZipEntry: int modDate>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r15, $i13);

        $r18 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r16 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l16 = virtualinvoke $r16.<java.util.zip.CRC32: long getValue()>();

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r18, $l16);

        $r17 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i18 = virtualinvoke $r17.<java.util.zip.ZipEntry: int getMethod()>();

        if $i18 != 8 goto label08;

        $i51 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $l49 = (long) $i51;

        $r50 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r51 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        $i48 = virtualinvoke $r51.<java.util.zip.Deflater: int getTotalOut()>();

        $l46 = (long) $i48;

        $l47 = specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r50, $l46);

        $l56 = $l49 + $l47;

        $i57 = (int) $l56;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = $i57;

        $r53 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r52 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        $i54 = virtualinvoke $r52.<java.util.zip.Deflater: int getTotalIn()>();

        $l55 = (long) $i54;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r53, $l55);

        goto label09;

     label08:
        $i19 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $l22 = (long) $i19;

        $r20 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r19 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l17 = $r19.<java.util.zip.CRC32: long tbytes>;

        $l20 = specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r20, $l17);

        $l21 = $l22 + $l20;

        $i24 = (int) $l21;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = $i24;

        $r21 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r22 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        $l23 = $r22.<java.util.zip.CRC32: long tbytes>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r21, $l23);

     label09:
        $i29 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $r23 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r24 = r0.<java.util.zip.ZipOutputStream: byte[] nameBytes>;

        $i25 = lengthof $r24;

        $i28 = specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r23, $i25);

        $i27 = $i29 + $i28;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = $i27;

        $r25 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r28 = $r25.<java.util.zip.ZipEntry: byte[] extra>;

        if $r28 == null goto label10;

        $i45 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $r45 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r49 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r48 = $r49.<java.util.zip.ZipEntry: byte[] extra>;

        $i43 = lengthof $r48;

        $i44 = specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r45, $i43);

        $i50 = $i45 + $i44;

        r0.<java.util.zip.ZipOutputStream: int curOffset> = $i50;

        goto label11;

     label10:
        $r27 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r27, 0);

     label11:
        $r30 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r26 = r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes>;

        $i32 = lengthof $r26;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r30, $i32);

        $r29 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r29, 0);

        $r32 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r32, 0);

        $r33 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r33, 0L);

        $r31 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $i34 = r0.<java.util.zip.ZipOutputStream: int offset>;

        $l35 = (long) $i34;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r31, $l35);

        $r36 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r35 = r0.<java.util.zip.ZipOutputStream: byte[] nameBytes>;

        virtualinvoke $r36.<java.io.ByteArrayOutputStream: void write(byte[])>($r35);

        r0.<java.util.zip.ZipOutputStream: byte[] nameBytes> = null;

        $r37 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r34 = $r37.<java.util.zip.ZipEntry: byte[] extra>;

        if $r34 == null goto label12;

        $r46 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r40 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r47 = $r40.<java.util.zip.ZipEntry: byte[] extra>;

        virtualinvoke $r46.<java.io.ByteArrayOutputStream: void write(byte[])>($r47);

     label12:
        $i39 = r0.<java.util.zip.ZipOutputStream: int offset>;

        $i38 = r0.<java.util.zip.ZipOutputStream: int curOffset>;

        $i40 = $i39 + $i38;

        r0.<java.util.zip.ZipOutputStream: int offset> = $i40;

        $r42 = r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes>;

        $i42 = lengthof $r42;

        if $i42 <= 0 goto label13;

        $r38 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r39 = r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes>;

        virtualinvoke $r38.<java.io.ByteArrayOutputStream: void write(byte[])>($r39);

        $r41 = <libcore.util.EmptyArray: byte[] BYTE>;

        r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes> = $r41;

     label13:
        r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry> = null;

        $r44 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r44.<java.util.zip.CRC32: void reset()>();

        $r43 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r43.<java.util.zip.Deflater: void reset()>();

        r0.<java.util.zip.ZipOutputStream: boolean done> = 0;

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        int i0, $i4, $i6, $i11, $i13, $i14;
        java.io.OutputStream $r1, $r20;
        java.io.ByteArrayOutputStream $r2, $r5, $r6, $r7, $r8, $r10, $r12, $r13, $r14, $r17, $r19, $r21;
        java.util.HashSet $r3, $r9, $r11;
        boolean $z0;
        java.util.zip.ZipEntry $r4;
        long $l7, $l10;
        byte[] $r15, $r16, $r18;
        java.util.zip.ZipException $r22;
        java.io.IOException $r23;

        r0 := @this: java.util.zip.ZipOutputStream;

        $r1 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        if $r1 != null goto label1;

        $r23 = new java.io.IOException;

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r23;

     label1:
        $r2 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        if $r2 != null goto label2;

        return;

     label2:
        $r3 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $z0 = virtualinvoke $r3.<java.util.HashSet: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r22 = new java.util.zip.ZipException;

        specialinvoke $r22.<java.util.zip.ZipException: void <init>(java.lang.String)>("No entries");

        throw $r22;

     label3:
        $r4 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        if $r4 == null goto label4;

        virtualinvoke r0.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label4:
        $r5 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        i0 = virtualinvoke $r5.<java.io.ByteArrayOutputStream: int size()>();

        $r6 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r6, 101010256L);

        $r7 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r7, 0);

        $r8 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r8, 0);

        $r10 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r9 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $i4 = virtualinvoke $r9.<java.util.HashSet: int size()>();

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r10, $i4);

        $r12 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r11 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $i6 = virtualinvoke $r11.<java.util.HashSet: int size()>();

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r12, $i6);

        $r13 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $l7 = (long) i0;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r13, $l7);

        $r14 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $i11 = r0.<java.util.zip.ZipOutputStream: int offset>;

        $l10 = (long) $i11;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r14, $l10);

        $r17 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r15 = r0.<java.util.zip.ZipOutputStream: byte[] commentBytes>;

        $i13 = lengthof $r15;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r17, $i13);

        $r16 = r0.<java.util.zip.ZipOutputStream: byte[] commentBytes>;

        $i14 = lengthof $r16;

        if $i14 <= 0 goto label5;

        $r19 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r18 = r0.<java.util.zip.ZipOutputStream: byte[] commentBytes>;

        virtualinvoke $r19.<java.io.ByteArrayOutputStream: void write(byte[])>($r18);

     label5:
        $r21 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        $r20 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        virtualinvoke $r21.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>($r20);

        r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir> = null;

        return;
    }

    public void putNextEntry(java.util.zip.ZipEntry) throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        java.util.zip.ZipEntry r1, $r2, $r12, $r20, $r21, $r22, $r32, $r34, $r37, $r40, $r41, $r45, $r47, $r53;
        int i0, $i2, $i3, $i8, $i11, $i18, $i22;
        short s1, $s29, s43;
        java.lang.String $r3, $r7, $r11, $r15, $r50, $r55, $r59;
        java.util.HashSet $r4, $r5, $r14;
        boolean $z0;
        java.nio.charset.Charset $r6, $r54;
        byte[] $r8, $r9, $r10, $r29, $r31, $r33, $r36, $r39, $r43, $r49, $r52;
        java.util.zip.Deflater $r13;
        java.io.OutputStream $r16, $r17, $r18, $r19, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r35, $r38, $r42, $r44, $r46, $r48;
        long $l9, $l20, $l24, $l26, $l28, $l31, $l32, $l33, $l34, $l36, $l38, $l40, $l41;
        byte $b10, $b30, $b35, $b37, $b39, $b42;
        java.util.zip.ZipException $r51, $r58, $r61, $r62, $r63;
        java.lang.StringBuilder $r56, $r57, $r60;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $r2 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        if $r2 == null goto label01;

        virtualinvoke r0.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label01:
        i0 = virtualinvoke r1.<java.util.zip.ZipEntry: int getMethod()>();

        if i0 != -1 goto label02;

        i0 = r0.<java.util.zip.ZipOutputStream: int defaultCompressionMethod>;

     label02:
        if i0 != 0 goto label07;

        $l31 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        $b30 = $l31 cmp -1L;

        if $b30 != 0 goto label03;

        $l41 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        virtualinvoke r1.<java.util.zip.ZipEntry: void setCompressedSize(long)>($l41);

        goto label04;

     label03:
        $l38 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        $b39 = $l38 cmp -1L;

        if $b39 != 0 goto label04;

        $l40 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        virtualinvoke r1.<java.util.zip.ZipEntry: void setSize(long)>($l40);

     label04:
        $l36 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCrc()>();

        $b37 = $l36 cmp -1L;

        if $b37 != 0 goto label05;

        $r62 = new java.util.zip.ZipException;

        specialinvoke $r62.<java.util.zip.ZipException: void <init>(java.lang.String)>("STORED entry missing CRC");

        throw $r62;

     label05:
        $l34 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        $b35 = $l34 cmp -1L;

        if $b35 != 0 goto label06;

        $r61 = new java.util.zip.ZipException;

        specialinvoke $r61.<java.util.zip.ZipException: void <init>(java.lang.String)>("STORED entry missing size");

        throw $r61;

     label06:
        $l33 = r1.<java.util.zip.ZipEntry: long size>;

        $l32 = r1.<java.util.zip.ZipEntry: long compressedSize>;

        $b42 = $l33 cmp $l32;

        if $b42 == 0 goto label07;

        $r63 = new java.util.zip.ZipException;

        specialinvoke $r63.<java.util.zip.ZipException: void <init>(java.lang.String)>("STORED entry size/compressed size mismatch");

        throw $r63;

     label07:
        specialinvoke r0.<java.util.zip.ZipOutputStream: void checkOpen()>();

        $r4 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $r3 = r1.<java.util.zip.ZipEntry: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r3);

        if $z0 == 0 goto label08;

        $r58 = new java.util.zip.ZipException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry already exists: ");

        $r59 = r1.<java.util.zip.ZipEntry: java.lang.String name>;

        $r56 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<java.util.zip.ZipException: void <init>(java.lang.String)>($r55);

        throw $r58;

     label08:
        $r5 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $i2 = virtualinvoke $r5.<java.util.HashSet: int size()>();

        if $i2 != 65535 goto label09;

        $r51 = new java.util.zip.ZipException;

        specialinvoke $r51.<java.util.zip.ZipException: void <init>(java.lang.String)>("Too many entries for the zip file format\'s 16-bit entry count");

        throw $r51;

     label09:
        $r7 = r1.<java.util.zip.ZipEntry: java.lang.String name>;

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6);

        r0.<java.util.zip.ZipOutputStream: byte[] nameBytes> = $r8;

        $r9 = r0.<java.util.zip.ZipOutputStream: byte[] nameBytes>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: void checkSizeIsWithinShort(java.lang.String,byte[])>("Name", $r9);

        $r10 = <libcore.util.EmptyArray: byte[] BYTE>;

        r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes> = $r10;

        $r11 = r1.<java.util.zip.ZipEntry: java.lang.String comment>;

        if $r11 == null goto label10;

        $r50 = r1.<java.util.zip.ZipEntry: java.lang.String comment>;

        $r54 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r49 = virtualinvoke $r50.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r54);

        r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes> = $r49;

        $r52 = r0.<java.util.zip.ZipOutputStream: byte[] entryCommentBytes>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: void checkSizeIsWithinShort(java.lang.String,byte[])>("Comment", $r52);

     label10:
        $r13 = r0.<java.util.zip.ZipOutputStream: java.util.zip.Deflater def>;

        $i3 = r0.<java.util.zip.ZipOutputStream: int compressionLevel>;

        virtualinvoke $r13.<java.util.zip.Deflater: void setLevel(int)>($i3);

        virtualinvoke r1.<java.util.zip.ZipEntry: void setMethod(int)>(i0);

        r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry> = r1;

        $r14 = r0.<java.util.zip.ZipOutputStream: java.util.HashSet entries>;

        $r12 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r15 = $r12.<java.util.zip.ZipEntry: java.lang.String name>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r15);

        if i0 != 0 goto label11;

        $s29 = 0;

        goto label12;

     label11:
        $s29 = 8;

     label12:
        s1 = $s29;

        s43 = s1 | 2048;

        $r16 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r16, 67324752L);

        $r17 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r17, 20);

        $r18 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r18, s43);

        $r19 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r19, i0);

        $r20 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l9 = virtualinvoke $r20.<java.util.zip.ZipEntry: long getTime()>();

        $b10 = $l9 cmp -1L;

        if $b10 != 0 goto label13;

        $r53 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l28 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        virtualinvoke $r53.<java.util.zip.ZipEntry: void setTime(long)>($l28);

     label13:
        $r23 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r21 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i8 = $r21.<java.util.zip.ZipEntry: int time>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r23, $i8);

        $r25 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r22 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i11 = $r22.<java.util.zip.ZipEntry: int modDate>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r25, $i11);

        if i0 != 0 goto label14;

        $r42 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r41 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l20 = $r41.<java.util.zip.ZipEntry: long crc>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r42, $l20);

        $r48 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r47 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l26 = $r47.<java.util.zip.ZipEntry: long size>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r48, $l26);

        $r46 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r45 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $l24 = $r45.<java.util.zip.ZipEntry: long size>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r46, $l24);

        goto label15;

     label14:
        $r24 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r24, 0L);

        $r27 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r27, 0L);

        $r26 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: long writeLong(java.io.OutputStream,long)>($r26, 0L);

     label15:
        $r28 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r29 = r0.<java.util.zip.ZipOutputStream: byte[] nameBytes>;

        $i18 = lengthof $r29;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r28, $i18);

        $r32 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r31 = $r32.<java.util.zip.ZipEntry: byte[] extra>;

        if $r31 == null goto label16;

        $r44 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r37 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r43 = $r37.<java.util.zip.ZipEntry: byte[] extra>;

        $i22 = lengthof $r43;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r44, $i22);

        goto label17;

     label16:
        $r30 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        specialinvoke r0.<java.util.zip.ZipOutputStream: int writeShort(java.io.OutputStream,int)>($r30, 0);

     label17:
        $r35 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r36 = r0.<java.util.zip.ZipOutputStream: byte[] nameBytes>;

        virtualinvoke $r35.<java.io.OutputStream: void write(byte[])>($r36);

        $r34 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r33 = $r34.<java.util.zip.ZipEntry: byte[] extra>;

        if $r33 == null goto label18;

        $r38 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        $r40 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $r39 = $r40.<java.util.zip.ZipEntry: byte[] extra>;

        virtualinvoke $r38.<java.io.OutputStream: void write(byte[])>($r39);

     label18:
        return;
    }

    public void setComment(java.lang.String)
    {
        java.util.zip.ZipOutputStream r0;
        java.lang.String r1;
        byte[] r2, $r4;
        java.nio.charset.Charset $r3;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = <libcore.util.EmptyArray: byte[] BYTE>;

        r0.<java.util.zip.ZipOutputStream: byte[] commentBytes> = $r4;

        return;

     label1:
        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        specialinvoke r0.<java.util.zip.ZipOutputStream: void checkSizeIsWithinShort(java.lang.String,byte[])>("Comment", r2);

        r0.<java.util.zip.ZipOutputStream: byte[] commentBytes> = r2;

        return;
    }

    public void setLevel(int)
    {
        java.util.zip.ZipOutputStream r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.zip.ZipOutputStream;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 <= 9 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad level: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0.<java.util.zip.ZipOutputStream: int compressionLevel> = i0;

        return;
    }

    public void setMethod(int)
    {
        java.util.zip.ZipOutputStream r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.zip.ZipOutputStream;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 8 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad method: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<java.util.zip.ZipOutputStream: int defaultCompressionMethod> = i0;

        return;
    }

    private long writeLong(java.io.OutputStream, long) throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        java.io.OutputStream r1;
        long l0, $l1, $l3, $l6, $l9;
        int $i2, $i4, $i5, $i7, $i8, $i10, $i11;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        l0 := @parameter1: long;

        $l1 = l0 & 255L;

        $i2 = (int) $l1;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i2);

        $l3 = l0 >> 8;

        $i4 = (int) $l3;

        $i5 = $i4 & 255;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i5);

        $l6 = l0 >> 16;

        $i7 = (int) $l6;

        $i8 = $i7 & 255;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i8);

        $l9 = l0 >> 24;

        $i10 = (int) $l9;

        $i11 = $i10 & 255;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i11);

        return l0;
    }

    private int writeShort(java.io.OutputStream, int) throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        java.io.OutputStream r1;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        $i1 = i0 & 255;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i1);

        $i2 = i0 >> 8;

        $i3 = $i2 & 255;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i3);

        return i0;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        byte[] r1;
        int i0, i1, $i2, $i3;
        java.util.zip.ZipEntry $r2, $r3;
        java.util.zip.CRC32 $r4;
        java.io.OutputStream $r5;
        java.util.zip.ZipException $r6;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        if $r2 != null goto label1;

        $r6 = new java.util.zip.ZipException;

        specialinvoke $r6.<java.util.zip.ZipException: void <init>(java.lang.String)>("No active entry");

        throw $r6;

     label1:
        $r3 = r0.<java.util.zip.ZipOutputStream: java.util.zip.ZipEntry currentEntry>;

        $i3 = virtualinvoke $r3.<java.util.zip.ZipEntry: int getMethod()>();

        if $i3 != 0 goto label2;

        $r5 = r0.<java.util.zip.ZipOutputStream: java.io.OutputStream out>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        goto label3;

     label2:
        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>(r1, i0, i1);

     label3:
        $r4 = r0.<java.util.zip.ZipOutputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r4.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i1);

        return;
    }

    private void checkOpen() throws java.io.IOException
    {
        java.util.zip.ZipOutputStream r0;
        java.io.ByteArrayOutputStream $r1;
        java.io.IOException $r2;

        r0 := @this: java.util.zip.ZipOutputStream;

        $r1 = r0.<java.util.zip.ZipOutputStream: java.io.ByteArrayOutputStream cDir>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r2;

     label1:
        return;
    }

    private void checkSizeIsWithinShort(java.lang.String, byte[])
    {
        java.util.zip.ZipOutputStream r0;
        java.lang.String r1, $r9;
        byte[] r2;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: java.util.zip.ZipOutputStream;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $i0 = lengthof r2;

        if $i0 <= 65535 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too long in UTF-8:");

        $i1 = lengthof r2;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.ZipOutputStream: int ZIP_VERSION_2_0> = 20;

        <java.util.zip.ZipOutputStream: int STORED> = 0;

        <java.util.zip.ZipOutputStream: int DEFLATED> = 8;

        return;
    }
}
