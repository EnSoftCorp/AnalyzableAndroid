public final class libcore.reflect.GenericSignatureParser extends java.lang.Object
{
    public libcore.reflect.ListOfTypes exceptionTypes;
    public libcore.reflect.ListOfTypes parameterTypes;
    public java.lang.reflect.TypeVariable[] formalTypeParameters;
    public java.lang.reflect.Type returnType;
    public java.lang.reflect.Type fieldType;
    public libcore.reflect.ListOfTypes interfaceTypes;
    public java.lang.reflect.Type superclassType;
    public java.lang.ClassLoader loader;
    java.lang.reflect.GenericDeclaration genericDecl;
    char symbol;
    java.lang.String identifier;
    private boolean eof;
    char[] buffer;
    int pos;

    public void <init>(java.lang.ClassLoader)
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.ClassLoader r1;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.ClassLoader loader> = r1;

        return;
    }

    void setInput(java.lang.reflect.GenericDeclaration, java.lang.String)
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        char[] $r3;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        if r2 == null goto label1;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.GenericDeclaration genericDecl> = r1;

        $r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r0.<libcore.reflect.GenericSignatureParser: char[] buffer> = $r3;

        r0.<libcore.reflect.GenericSignatureParser: boolean eof> = 0;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        goto label2;

     label1:
        r0.<libcore.reflect.GenericSignatureParser: boolean eof> = 1;

     label2:
        return;
    }

    public void parseForClass(java.lang.reflect.GenericDeclaration, java.lang.String)
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        java.lang.Class r3, $r8;
        java.lang.Class[] r4;
        boolean $z0, $z1;
        java.lang.reflect.TypeVariable[] $r5, $r7;
        libcore.reflect.ListOfTypes $r6, $r9, $r10;
        int $i0;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)>(r1, r2);

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void parseClassSignature()>();

        goto label5;

     label1:
        $z1 = r1 instanceof java.lang.Class;

        if $z1 == 0 goto label4;

        r3 = (java.lang.Class) r1;

        $r7 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r7;

        $r8 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type superclassType> = $r8;

        r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof r4;

        if $i0 != 0 goto label2;

        $r10 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes> = $r10;

        goto label3;

     label2:
        $r9 = new libcore.reflect.ListOfTypes;

        specialinvoke $r9.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r4);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes> = $r9;

     label3:
        goto label5;

     label4:
        $r5 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r5;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type superclassType> = class "java/lang/Object";

        $r6 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes> = $r6;

     label5:
        return;
    }

    public void parseForMethod(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.Class[])
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        java.lang.Class[] r3, r5, r6;
        java.lang.reflect.Method r4;
        boolean $z0;
        java.lang.reflect.TypeVariable[] $r7;
        int $i0, $i1;
        libcore.reflect.ListOfTypes $r8, $r9, $r11, $r12;
        java.lang.Class $r10;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)>(r1, r2);

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void parseMethodTypeSignature(java.lang.Class[])>(r3);

        goto label6;

     label1:
        r4 = (java.lang.reflect.Method) r1;

        $r7 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r7;

        r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r5;

        if $i0 != 0 goto label2;

        $r11 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes> = $r11;

        goto label3;

     label2:
        $r8 = new libcore.reflect.ListOfTypes;

        specialinvoke $r8.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r5);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes> = $r8;

     label3:
        r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $i1 = lengthof r6;

        if $i1 != 0 goto label4;

        $r12 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r12;

        goto label5;

     label4:
        $r9 = new libcore.reflect.ListOfTypes;

        specialinvoke $r9.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r6);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r9;

     label5:
        $r10 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type returnType> = $r10;

     label6:
        return;
    }

    public void parseForConstructor(java.lang.reflect.GenericDeclaration, java.lang.String, java.lang.Class[])
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        java.lang.Class[] r3, r5, r6;
        java.lang.reflect.Constructor r4;
        boolean $z0;
        java.lang.reflect.TypeVariable[] $r7;
        int $i0, $i1;
        libcore.reflect.ListOfTypes $r8, $r9, $r10, $r11;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)>(r1, r2);

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void parseMethodTypeSignature(java.lang.Class[])>(r3);

        goto label5;

     label1:
        r4 = (java.lang.reflect.Constructor) r1;

        $r7 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r7;

        r5 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r5;

        if $i0 != 0 goto label2;

        $r11 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes> = $r11;

        goto label3;

     label2:
        $r8 = new libcore.reflect.ListOfTypes;

        specialinvoke $r8.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r5);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes> = $r8;

     label3:
        r6 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>();

        $i1 = lengthof r6;

        if $i1 != 0 goto label4;

        $r10 = <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY>;

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r10;

        goto label5;

     label4:
        $r9 = new libcore.reflect.ListOfTypes;

        specialinvoke $r9.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r6);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r9;

     label5:
        return;
    }

    public void parseForField(java.lang.reflect.GenericDeclaration, java.lang.String)
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        boolean $z0;
        java.lang.reflect.Type $r3;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void setInput(java.lang.reflect.GenericDeclaration,java.lang.String)>(r1, r2);

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type fieldType> = $r3;

     label1:
        return;
    }

    void parseClassSignature()
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.reflect.Type $r1, $r4;
        libcore.reflect.ListOfTypes $r2, $r3;
        char $c0;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void parseOptFormalTypeParameters()>();

        $r1 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type superclassType> = $r1;

        $r2 = new libcore.reflect.ListOfTypes;

        specialinvoke $r2.<libcore.reflect.ListOfTypes: void <init>(int)>(16);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes> = $r2;

     label1:
        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 <= 0 goto label2;

        $r3 = r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes>;

        $r4 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()>();

        virtualinvoke $r3.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r4);

        goto label1;

     label2:
        return;
    }

    void parseOptFormalTypeParameters()
    {
        libcore.reflect.GenericSignatureParser r0;
        libcore.reflect.ListOfVariables r1, $r2;
        char $c0, $c1, $c2;
        java.lang.reflect.TypeVariable[] $r3;
        libcore.reflect.TypeVariableImpl $r4, $r5;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $r2 = new libcore.reflect.ListOfVariables;

        specialinvoke $r2.<libcore.reflect.ListOfVariables: void <init>()>();

        r1 = $r2;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 != 60 goto label3;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r4 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseFormalTypeParameter()>();

        virtualinvoke r1.<libcore.reflect.ListOfVariables: void add(java.lang.reflect.TypeVariable)>($r4);

     label1:
        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 == 62 goto label2;

        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c2 <= 0 goto label2;

        $r5 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseFormalTypeParameter()>();

        virtualinvoke r1.<libcore.reflect.ListOfVariables: void add(java.lang.reflect.TypeVariable)>($r5);

        goto label1;

     label2:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(62);

     label3:
        $r3 = virtualinvoke r1.<libcore.reflect.ListOfVariables: java.lang.reflect.TypeVariable[] getArray()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters> = $r3;

        return;
    }

    libcore.reflect.TypeVariableImpl parseFormalTypeParameter()
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.String r1, $r3;
        libcore.reflect.ListOfTypes r2, $r4;
        char $c0, $c1, $c2, $c3;
        java.lang.reflect.Type $r5, $r8;
        libcore.reflect.TypeVariableImpl $r6;
        java.lang.reflect.GenericDeclaration $r7;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanIdentifier()>();

        $r3 = r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier>;

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String intern()>();

        $r4 = new libcore.reflect.ListOfTypes;

        specialinvoke $r4.<libcore.reflect.ListOfTypes: void <init>(int)>(8);

        r2 = $r4;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(58);

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 == 76 goto label1;

        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c2 == 91 goto label1;

        $c3 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c3 != 84 goto label2;

     label1:
        $r5 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        virtualinvoke r2.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r5);

     label2:
        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 != 58 goto label3;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r8 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        virtualinvoke r2.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r8);

        goto label2;

     label3:
        $r6 = new libcore.reflect.TypeVariableImpl;

        $r7 = r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.GenericDeclaration genericDecl>;

        specialinvoke $r6.<libcore.reflect.TypeVariableImpl: void <init>(java.lang.reflect.GenericDeclaration,java.lang.String,libcore.reflect.ListOfTypes)>($r7, r1, r2);

        return $r6;
    }

    java.lang.reflect.Type parseFieldTypeSignature()
    {
        libcore.reflect.GenericSignatureParser r0;
        char $c0;
        libcore.reflect.GenericArrayTypeImpl $r1;
        java.lang.reflect.Type $r2, $r4;
        libcore.reflect.TypeVariableImpl $r3;
        java.lang.reflect.GenericSignatureFormatError $r5;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        lookupswitch($c0)
        {
            case 76: goto label1;
            case 84: goto label3;
            case 91: goto label2;
            default: goto label4;
        };

     label1:
        $r4 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()>();

        return $r4;

     label2:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r1 = new libcore.reflect.GenericArrayTypeImpl;

        $r2 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()>();

        specialinvoke $r1.<libcore.reflect.GenericArrayTypeImpl: void <init>(java.lang.reflect.Type)>($r2);

        return $r1;

     label3:
        $r3 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseTypeVariableSignature()>();

        return $r3;

     label4:
        $r5 = new java.lang.reflect.GenericSignatureFormatError;

        specialinvoke $r5.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();

        throw $r5;
    }

    java.lang.reflect.Type parseClassTypeSignature()
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.StringBuilder r1, $r5, $r11, $r17;
        libcore.reflect.ListOfTypes r2, r20;
        libcore.reflect.ParameterizedTypeImpl r3, r4, $r8, $r14;
        char $c0, $c1;
        java.lang.String $r6, $r9, $r13, $r16, $r18;
        java.lang.ClassLoader $r10, $r15;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(76);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r1 = $r5;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanIdentifier()>();

     label1:
        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 != 47 goto label2;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r18 = r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier>;

        $r17 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanIdentifier()>();

        goto label1;

     label2:
        $r6 = r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        r2 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parseOptTypeArguments()>();

        $r8 = new libcore.reflect.ParameterizedTypeImpl;

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = r0.<libcore.reflect.GenericSignatureParser: java.lang.ClassLoader loader>;

        specialinvoke $r8.<libcore.reflect.ParameterizedTypeImpl: void <init>(libcore.reflect.ParameterizedTypeImpl,java.lang.String,libcore.reflect.ListOfTypes,java.lang.ClassLoader)>(null, $r9, r2, $r10);

        r3 = $r8;

        r4 = r3;

     label3:
        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 != 46 goto label4;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanIdentifier()>();

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r13 = r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r20 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parseOptTypeArguments()>();

        $r14 = new libcore.reflect.ParameterizedTypeImpl;

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = r0.<libcore.reflect.GenericSignatureParser: java.lang.ClassLoader loader>;

        specialinvoke $r14.<libcore.reflect.ParameterizedTypeImpl: void <init>(libcore.reflect.ParameterizedTypeImpl,java.lang.String,libcore.reflect.ListOfTypes,java.lang.ClassLoader)>(r3, $r16, r20, $r15);

        r4 = $r14;

        goto label3;

     label4:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(59);

        return r4;
    }

    libcore.reflect.ListOfTypes parseOptTypeArguments()
    {
        libcore.reflect.GenericSignatureParser r0;
        libcore.reflect.ListOfTypes r1, $r2;
        char $c0, $c1, $c2;
        java.lang.reflect.Type $r3, $r4;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $r2 = new libcore.reflect.ListOfTypes;

        specialinvoke $r2.<libcore.reflect.ListOfTypes: void <init>(int)>(8);

        r1 = $r2;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 != 60 goto label3;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r3 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeArgument()>();

        virtualinvoke r1.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r3);

     label1:
        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 == 62 goto label2;

        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c2 <= 0 goto label2;

        $r4 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeArgument()>();

        virtualinvoke r1.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r4);

        goto label1;

     label2:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(62);

     label3:
        return r1;
    }

    java.lang.reflect.Type parseTypeArgument()
    {
        libcore.reflect.GenericSignatureParser r0;
        libcore.reflect.ListOfTypes r1, r2, $r3, $r4;
        char $c0, $c1, $c2;
        java.lang.reflect.Type $r5, $r6, $r8;
        libcore.reflect.WildcardTypeImpl $r7, $r9, $r10;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $r3 = new libcore.reflect.ListOfTypes;

        specialinvoke $r3.<libcore.reflect.ListOfTypes: void <init>(int)>(1);

        r1 = $r3;

        $r4 = new libcore.reflect.ListOfTypes;

        specialinvoke $r4.<libcore.reflect.ListOfTypes: void <init>(int)>(1);

        r2 = $r4;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 != 42 goto label1;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        virtualinvoke r1.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>(class "java/lang/Object");

        $r10 = new libcore.reflect.WildcardTypeImpl;

        specialinvoke $r10.<libcore.reflect.WildcardTypeImpl: void <init>(libcore.reflect.ListOfTypes,libcore.reflect.ListOfTypes)>(r1, r2);

        return $r10;

     label1:
        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 != 43 goto label2;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r8 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        virtualinvoke r1.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r8);

        $r9 = new libcore.reflect.WildcardTypeImpl;

        specialinvoke $r9.<libcore.reflect.WildcardTypeImpl: void <init>(libcore.reflect.ListOfTypes,libcore.reflect.ListOfTypes)>(r1, r2);

        return $r9;

     label2:
        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c2 != 45 goto label3;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r6 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        virtualinvoke r2.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r6);

        virtualinvoke r1.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>(class "java/lang/Object");

        $r7 = new libcore.reflect.WildcardTypeImpl;

        specialinvoke $r7.<libcore.reflect.WildcardTypeImpl: void <init>(libcore.reflect.ListOfTypes,libcore.reflect.ListOfTypes)>(r1, r2);

        return $r7;

     label3:
        $r5 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        return $r5;
    }

    libcore.reflect.TypeVariableImpl parseTypeVariableSignature()
    {
        libcore.reflect.GenericSignatureParser r0;
        libcore.reflect.TypeVariableImpl $r1;
        java.lang.String $r2;
        java.lang.reflect.GenericDeclaration $r3;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(84);

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanIdentifier()>();

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(59);

        $r1 = new libcore.reflect.TypeVariableImpl;

        $r3 = r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.GenericDeclaration genericDecl>;

        $r2 = r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier>;

        specialinvoke $r1.<libcore.reflect.TypeVariableImpl: void <init>(java.lang.reflect.GenericDeclaration,java.lang.String)>($r3, $r2);

        return $r1;
    }

    java.lang.reflect.Type parseTypeSignature()
    {
        libcore.reflect.GenericSignatureParser r0;
        char $c0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.reflect.Type $r9;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        tableswitch($c0)
        {
            case 66: goto label1;
            case 67: goto label2;
            case 68: goto label3;
            case 69: goto label9;
            case 70: goto label4;
            case 71: goto label9;
            case 72: goto label9;
            case 73: goto label5;
            case 74: goto label6;
            case 75: goto label9;
            case 76: goto label9;
            case 77: goto label9;
            case 78: goto label9;
            case 79: goto label9;
            case 80: goto label9;
            case 81: goto label9;
            case 82: goto label9;
            case 83: goto label7;
            case 84: goto label9;
            case 85: goto label9;
            case 86: goto label9;
            case 87: goto label9;
            case 88: goto label9;
            case 89: goto label9;
            case 90: goto label8;
            default: goto label9;
        };

     label1:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        return $r1;

     label2:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        return $r8;

     label3:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r7 = <java.lang.Double: java.lang.Class TYPE>;

        return $r7;

     label4:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        return $r6;

     label5:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        return $r5;

     label6:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        return $r4;

     label7:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        return $r3;

     label8:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        return $r2;

     label9:
        $r9 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseFieldTypeSignature()>();

        return $r9;
    }

    void parseMethodTypeSignature(java.lang.Class[])
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.Class[] r1;
        libcore.reflect.ListOfTypes $r2, $r4, $r5, $r6, $r7, $r9, $r12;
        char $c0, $c1, $c2, $c3, $c4;
        java.lang.reflect.Type $r3, $r8, $r11;
        libcore.reflect.TypeVariableImpl $r10;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        r1 := @parameter0: java.lang.Class[];

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void parseOptFormalTypeParameters()>();

        $r2 = new libcore.reflect.ListOfTypes;

        specialinvoke $r2.<libcore.reflect.ListOfTypes: void <init>(int)>(16);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes> = $r2;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(40);

     label1:
        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 == 41 goto label2;

        $c4 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c4 <= 0 goto label2;

        $r12 = r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes parameterTypes>;

        $r11 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()>();

        virtualinvoke $r12.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r11);

        goto label1;

     label2:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void expect(char)>(41);

        $r3 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseReturnType()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type returnType> = $r3;

        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 != 94 goto label6;

        $r6 = new libcore.reflect.ListOfTypes;

        specialinvoke $r6.<libcore.reflect.ListOfTypes: void <init>(int)>(8);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r6;

     label3:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c2 != 84 goto label4;

        $r9 = r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes>;

        $r10 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.TypeVariableImpl parseTypeVariableSignature()>();

        virtualinvoke $r9.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r10);

        goto label5;

     label4:
        $r7 = r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes>;

        $r8 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseClassTypeSignature()>();

        virtualinvoke $r7.<libcore.reflect.ListOfTypes: void add(java.lang.reflect.Type)>($r8);

     label5:
        $c3 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c3 == 94 goto label3;

        goto label8;

     label6:
        if r1 == null goto label7;

        $r5 = new libcore.reflect.ListOfTypes;

        specialinvoke $r5.<libcore.reflect.ListOfTypes: void <init>(java.lang.reflect.Type[])>(r1);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r5;

        goto label8;

     label7:
        $r4 = new libcore.reflect.ListOfTypes;

        specialinvoke $r4.<libcore.reflect.ListOfTypes: void <init>(int)>(0);

        r0.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes exceptionTypes> = $r4;

     label8:
        return;
    }

    java.lang.reflect.Type parseReturnType()
    {
        libcore.reflect.GenericSignatureParser r0;
        char $c0;
        java.lang.Class $r1;
        java.lang.reflect.Type $r2;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $c0 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c0 == 86 goto label1;

        $r2 = virtualinvoke r0.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type parseTypeSignature()>();

        return $r2;

     label1:
        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        return $r1;
    }

    void scanSymbol()
    {
        libcore.reflect.GenericSignatureParser r0;
        boolean $z0;
        java.lang.reflect.GenericSignatureFormatError $r1;
        char[] $r2, $r3;
        int $i0, $i1, $i2, $i4, $i5;
        char $c3;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label2;

        $i1 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        $r2 = r0.<libcore.reflect.GenericSignatureParser: char[] buffer>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label1;

        $r3 = r0.<libcore.reflect.GenericSignatureParser: char[] buffer>;

        $i2 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        $c3 = $r3[$i2];

        r0.<libcore.reflect.GenericSignatureParser: char symbol> = $c3;

        $i4 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        $i5 = $i4 + 1;

        r0.<libcore.reflect.GenericSignatureParser: int pos> = $i5;

        goto label3;

     label1:
        r0.<libcore.reflect.GenericSignatureParser: char symbol> = 0;

        r0.<libcore.reflect.GenericSignatureParser: boolean eof> = 1;

        goto label3;

     label2:
        $r1 = new java.lang.reflect.GenericSignatureFormatError;

        specialinvoke $r1.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    void expect(char)
    {
        libcore.reflect.GenericSignatureParser r0;
        char c0, $c1;
        java.lang.reflect.GenericSignatureFormatError $r1;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        c0 := @parameter0: char;

        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        if $c1 != c0 goto label1;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        goto label2;

     label1:
        $r1 = new java.lang.reflect.GenericSignatureFormatError;

        specialinvoke $r1.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();

        throw $r1;

     label2:
        return;
    }

    static boolean isStopSymbol(char)
    {
        char c0;

        c0 := @parameter0: char;

        tableswitch(c0)
        {
            case 46: goto label1;
            case 47: goto label1;
            case 48: goto label2;
            case 49: goto label2;
            case 50: goto label2;
            case 51: goto label2;
            case 52: goto label2;
            case 53: goto label2;
            case 54: goto label2;
            case 55: goto label2;
            case 56: goto label2;
            case 57: goto label2;
            case 58: goto label1;
            case 59: goto label1;
            case 60: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    void scanIdentifier()
    {
        libcore.reflect.GenericSignatureParser r0;
        java.lang.StringBuilder r1, $r3;
        char c0, $c1, $c2;
        boolean $z0, $z1, $z2;
        java.lang.reflect.GenericSignatureFormatError $r2, $r4;
        int $i3, $i4, $i5, $i6, $i7;
        char[] $r6, $r9;
        java.lang.String $r7, $r10;

        r0 := @this: libcore.reflect.GenericSignatureParser;

        $z0 = r0.<libcore.reflect.GenericSignatureParser: boolean eof>;

        if $z0 != 0 goto label09;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(32);

        r1 = $r3;

        $c1 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        $z1 = staticinvoke <libcore.reflect.GenericSignatureParser: boolean isStopSymbol(char)>($c1);

        if $z1 != 0 goto label07;

        $c2 = r0.<libcore.reflect.GenericSignatureParser: char symbol>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label01:
        $r6 = r0.<libcore.reflect.GenericSignatureParser: char[] buffer>;

        $i3 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        c0 = $r6[$i3];

        if c0 < 97 goto label02;

        if c0 <= 122 goto label04;

     label02:
        if c0 < 65 goto label03;

        if c0 <= 90 goto label04;

     label03:
        $z2 = staticinvoke <libcore.reflect.GenericSignatureParser: boolean isStopSymbol(char)>(c0);

        if $z2 != 0 goto label05;

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $i5 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        $i4 = $i5 + 1;

        r0.<libcore.reflect.GenericSignatureParser: int pos> = $i4;

        goto label06;

     label05:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier> = $r7;

        virtualinvoke r0.<libcore.reflect.GenericSignatureParser: void scanSymbol()>();

        return;

     label06:
        $i7 = r0.<libcore.reflect.GenericSignatureParser: int pos>;

        $r9 = r0.<libcore.reflect.GenericSignatureParser: char[] buffer>;

        $i6 = lengthof $r9;

        if $i7 != $i6 goto label01;

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<libcore.reflect.GenericSignatureParser: java.lang.String identifier> = $r10;

        r0.<libcore.reflect.GenericSignatureParser: char symbol> = 0;

        r0.<libcore.reflect.GenericSignatureParser: boolean eof> = 1;

        goto label08;

     label07:
        r0.<libcore.reflect.GenericSignatureParser: char symbol> = 0;

        r0.<libcore.reflect.GenericSignatureParser: boolean eof> = 1;

        $r4 = new java.lang.reflect.GenericSignatureFormatError;

        specialinvoke $r4.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();

        throw $r4;

     label08:
        goto label10;

     label09:
        $r2 = new java.lang.reflect.GenericSignatureFormatError;

        specialinvoke $r2.<java.lang.reflect.GenericSignatureFormatError: void <init>()>();

        throw $r2;

     label10:
        return;
    }
}
