final class java.util.concurrent.ConcurrentHashMap$EntryIterator extends java.util.concurrent.ConcurrentHashMap$BaseIterator implements java.util.Iterator
{

    void <init>(java.util.concurrent.ConcurrentHashMap$Node[], int, int, int, java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$EntryIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1;
        int i0, i1, i2;
        java.util.concurrent.ConcurrentHashMap r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntryIterator;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r1, i0, i1, i2, r2);

        return;
    }

    public final java.util.Map$Entry next()
    {
        java.util.concurrent.ConcurrentHashMap$EntryIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node r1, $r4;
        java.lang.Object r2, r3;
        java.util.concurrent.ConcurrentHashMap$MapEntry $r6;
        java.util.concurrent.ConcurrentHashMap $r7;
        java.util.NoSuchElementException $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntryIterator;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.concurrent.ConcurrentHashMap$Node next>;

        r1 = $r4;

        if $r4 != null goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        r2 = r1.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r3 = r1.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        r0.<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.concurrent.ConcurrentHashMap$Node lastReturned> = r1;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        $r6 = new java.util.concurrent.ConcurrentHashMap$MapEntry;

        $r7 = r0.<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.concurrent.ConcurrentHashMap map>;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap$MapEntry: void <init>(java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap)>(r2, r3, $r7);

        return $r6;
    }

    public volatile java.lang.Object next()
    {
        java.util.concurrent.ConcurrentHashMap$EntryIterator r0;
        java.util.Map$Entry $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntryIterator;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$EntryIterator: java.util.Map$Entry next()>();

        return $r1;
    }
}
