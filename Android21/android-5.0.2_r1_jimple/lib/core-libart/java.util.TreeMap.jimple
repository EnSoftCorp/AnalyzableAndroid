public class java.util.TreeMap extends java.util.AbstractMap implements java.util.SortedMap, java.util.NavigableMap, java.lang.Cloneable, java.io.Serializable
{
    private static final java.util.Comparator NATURAL_ORDER;
    java.util.Comparator comparator;
    java.util.TreeMap$Node root;
    int size;
    int modCount;
    private java.util.TreeMap$EntrySet entrySet;
    private java.util.TreeMap$KeySet keySet;
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.TreeMap r0;
        java.util.Comparator $r1;

        r0 := @this: java.util.TreeMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.TreeMap: int size> = 0;

        r0.<java.util.TreeMap: int modCount> = 0;

        $r1 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r1;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.TreeMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.TreeMap: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.TreeMap r0;
        java.util.Comparator r1, $r2;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.TreeMap: int size> = 0;

        r0.<java.util.TreeMap: int modCount> = 0;

        if r1 == null goto label1;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = r1;

        goto label2;

     label1:
        $r2 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r2;

     label2:
        return;
    }

    public void <init>(java.util.SortedMap)
    {
        java.util.TreeMap r0;
        java.util.SortedMap r1;
        java.util.Comparator r2, $r5;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.SortedMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.TreeMap: int size> = 0;

        r0.<java.util.TreeMap: int modCount> = 0;

        r2 = interfaceinvoke r1.<java.util.SortedMap: java.util.Comparator comparator()>();

        if r2 == null goto label1;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = r2;

        goto label2;

     label1:
        $r5 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r5;

     label2:
        $r6 = interfaceinvoke r1.<java.util.SortedMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label3;

     label4:
        return;
    }

    public java.lang.Object clone()
    {
        java.util.TreeMap r0, r1;
        java.lang.Object $r2;
        java.util.TreeMap$Node $r3, $r4, $r5;
        java.lang.CloneNotSupportedException $r6;
        java.lang.AssertionError $r7;

        r0 := @this: java.util.TreeMap;

     label1:
        $r2 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r1 = (java.util.TreeMap) $r2;

        $r3 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r3 == null goto label2;

        $r4 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap$Node: java.util.TreeMap$Node copy(java.util.TreeMap$Node)>(null);

        goto label3;

     label2:
        $r5 = null;

     label3:
        r1.<java.util.TreeMap: java.util.TreeMap$Node root> = $r5;

        r1.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = null;

        r1.<java.util.TreeMap: java.util.TreeMap$KeySet keySet> = null;

     label4:
        return r1;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
    }

    public int size()
    {
        java.util.TreeMap r0;
        int $i0;

        r0 := @this: java.util.TreeMap;

        $i0 = r0.<java.util.TreeMap: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.TreeMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.TreeMap;

        $i0 = r0.<java.util.TreeMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Node r2;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r3 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Node $r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public void clear()
    {
        java.util.TreeMap r0;
        int $i0, $i1;

        r0 := @this: java.util.TreeMap;

        r0.<java.util.TreeMap: java.util.TreeMap$Node root> = null;

        r0.<java.util.TreeMap: int size> = 0;

        $i0 = r0.<java.util.TreeMap: int modCount>;

        $i1 = $i0 + 1;

        r0.<java.util.TreeMap: int modCount> = $i1;

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$Node r2;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node removeInternalByKey(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $r3 = r2.<java.util.TreeMap$Node: java.lang.Object value>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    java.lang.Object putInternal(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2, r4;
        java.util.TreeMap$Node r3;
        java.util.TreeMap$Relation $r5;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r5 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CREATE>;

        r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r5);

        r4 = r3.<java.util.TreeMap$Node: java.lang.Object value>;

        r3.<java.util.TreeMap$Node: java.lang.Object value> = r2;

        return r4;
    }

    java.util.TreeMap$Node find(java.lang.Object, java.util.TreeMap$Relation)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r10, $r20;
        java.util.TreeMap$Relation r2, $r24;
        java.lang.Comparable r3, $r25;
        java.util.TreeMap$Node r4, r5, r6, $r7, $r13, $r15, $r16, $r17, $r18, $r21, $r22, $r27, $r28, r36;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.Comparator $r8, $r9, $r11, $r23, $r26;
        int[] $r12, $r14, $r19;
        java.lang.Class $r29;
        java.lang.StringBuilder $r30, $r33, $r34;
        java.lang.ClassCastException $r31;
        boolean $z0;
        java.lang.String $r32, $r35;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.TreeMap$Relation;

        $r7 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r7 != null goto label03;

        $r23 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        $r26 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        if $r23 != $r26 goto label01;

        $z0 = r1 instanceof java.lang.Comparable;

        if $z0 != 0 goto label01;

        $r31 = new java.lang.ClassCastException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r35 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>();

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not Comparable");

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.ClassCastException: void <init>(java.lang.String)>($r32);

        throw $r31;

     label01:
        $r24 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CREATE>;

        if r2 != $r24 goto label02;

        $r28 = new java.util.TreeMap$Node;

        specialinvoke $r28.<java.util.TreeMap$Node: void <init>(java.util.TreeMap$Node,java.lang.Object)>(null, r1);

        r0.<java.util.TreeMap: java.util.TreeMap$Node root> = $r28;

        r0.<java.util.TreeMap: int size> = 1;

        $i17 = r0.<java.util.TreeMap: int modCount>;

        $i16 = $i17 + 1;

        r0.<java.util.TreeMap: int modCount> = $i16;

        $r27 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        return $r27;

     label02:
        return null;

     label03:
        $r9 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        $r8 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        if $r9 != $r8 goto label04;

        $r25 = (java.lang.Comparable) r1;

        goto label05;

     label04:
        $r25 = null;

     label05:
        r3 = $r25;

        r4 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

     label06:
        if r3 == null goto label07;

        $r20 = r4.<java.util.TreeMap$Node: java.lang.Object key>;

        $i1 = interfaceinvoke r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r20);

        goto label08;

     label07:
        $r11 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        $r10 = r4.<java.util.TreeMap$Node: java.lang.Object key>;

        $i1 = interfaceinvoke $r11.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r1, $r10);

     label08:
        i0 = $i1;

        if i0 != 0 goto label12;

        $r19 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Relation>;

        $i14 = virtualinvoke r2.<java.util.TreeMap$Relation: int ordinal()>();

        $i15 = $r19[$i14];

        tableswitch($i15)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label10;
            default: goto label12;
        };

     label09:
        $r21 = virtualinvoke r4.<java.util.TreeMap$Node: java.util.TreeMap$Node prev()>();

        return $r21;

     label10:
        return r4;

     label11:
        $r22 = virtualinvoke r4.<java.util.TreeMap$Node: java.util.TreeMap$Node next()>();

        return $r22;

     label12:
        if i0 >= 0 goto label13;

        $r18 = r4.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        goto label14;

     label13:
        $r18 = r4.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

     label14:
        r5 = $r18;

        if r5 == null goto label15;

        r4 = r5;

        goto label06;

     label15:
        if i0 >= 0 goto label21;

        $r14 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Relation>;

        $i9 = virtualinvoke r2.<java.util.TreeMap$Relation: int ordinal()>();

        $i8 = $r14[$i9];

        tableswitch($i8)
        {
            case 1: goto label16;
            case 2: goto label16;
            case 3: goto label18;
            case 4: goto label17;
            case 5: goto label17;
            case 6: goto label19;
            default: goto label20;
        };

     label16:
        $r17 = virtualinvoke r4.<java.util.TreeMap$Node: java.util.TreeMap$Node prev()>();

        return $r17;

     label17:
        return r4;

     label18:
        return null;

     label19:
        $r16 = new java.util.TreeMap$Node;

        specialinvoke $r16.<java.util.TreeMap$Node: void <init>(java.util.TreeMap$Node,java.lang.Object)>(r4, r1);

        r6 = $r16;

        r4.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = r6;

        $i11 = r0.<java.util.TreeMap: int size>;

        $i10 = $i11 + 1;

        r0.<java.util.TreeMap: int size> = $i10;

        $i13 = r0.<java.util.TreeMap: int modCount>;

        $i12 = $i13 + 1;

        r0.<java.util.TreeMap: int modCount> = $i12;

        specialinvoke r0.<java.util.TreeMap: void rebalance(java.util.TreeMap$Node,boolean)>(r4, 1);

        return r6;

     label20:
        goto label26;

     label21:
        $r12 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Relation>;

        $i2 = virtualinvoke r2.<java.util.TreeMap$Relation: int ordinal()>();

        $i3 = $r12[$i2];

        tableswitch($i3)
        {
            case 1: goto label22;
            case 2: goto label22;
            case 3: goto label24;
            case 4: goto label23;
            case 5: goto label23;
            case 6: goto label25;
            default: goto label26;
        };

     label22:
        return r4;

     label23:
        $r15 = virtualinvoke r4.<java.util.TreeMap$Node: java.util.TreeMap$Node next()>();

        return $r15;

     label24:
        return null;

     label25:
        $r13 = new java.util.TreeMap$Node;

        specialinvoke $r13.<java.util.TreeMap$Node: void <init>(java.util.TreeMap$Node,java.lang.Object)>(r4, r1);

        r36 = $r13;

        r4.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = r36;

        $i5 = r0.<java.util.TreeMap: int size>;

        $i4 = $i5 + 1;

        r0.<java.util.TreeMap: int size> = $i4;

        $i7 = r0.<java.util.TreeMap: int modCount>;

        $i6 = $i7 + 1;

        r0.<java.util.TreeMap: int modCount> = $i6;

        specialinvoke r0.<java.util.TreeMap: void rebalance(java.util.TreeMap$Node,boolean)>(r4, 1);

        return r36;

     label26:
        goto label06;
    }

    java.util.TreeMap$Node findByObject(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap$Node $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation EQUAL>;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        return $r3;
    }

    java.util.TreeMap$Node findByEntry(java.util.Map$Entry)
    {
        java.util.TreeMap r0;
        java.util.Map$Entry r1;
        java.util.TreeMap$Node r2, $r4;
        boolean z0, $z1, $z2;
        java.lang.Object $r3, $r5, $r6;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.Map$Entry;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>($r3);

        if r2 == null goto label1;

        $r5 = r2.<java.util.TreeMap$Node: java.lang.Object value>;

        $r6 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        z0 = $z2;

        if z0 == 0 goto label3;

        $r4 = r2;

        goto label4;

     label3:
        $r4 = null;

     label4:
        return $r4;
    }

    void removeInternal(java.util.TreeMap$Node)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, r2, r3, r4, r5, $r6, r7, r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r3 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        r4 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

        if r2 == null goto label5;

        if r3 == null goto label5;

        $i7 = r2.<java.util.TreeMap$Node: int height>;

        $i6 = r3.<java.util.TreeMap$Node: int height>;

        if $i7 <= $i6 goto label1;

        $r6 = virtualinvoke r2.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r3.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

     label2:
        r5 = $r6;

        virtualinvoke r0.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r5);

        i0 = 0;

        r7 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        if r7 == null goto label3;

        i0 = r7.<java.util.TreeMap$Node: int height>;

        r5.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = r7;

        r7.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r5;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = null;

     label3:
        i1 = 0;

        r8 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if r8 == null goto label4;

        i1 = r8.<java.util.TreeMap$Node: int height>;

        r5.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = r8;

        r8.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r5;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = null;

     label4:
        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $i9 = $i8 + 1;

        r5.<java.util.TreeMap$Node: int height> = $i9;

        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, r5);

        return;

     label5:
        if r2 == null goto label6;

        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, r2);

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = null;

        goto label8;

     label6:
        if r3 == null goto label7;

        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, r3);

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = null;

        goto label8;

     label7:
        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, null);

     label8:
        specialinvoke r0.<java.util.TreeMap: void rebalance(java.util.TreeMap$Node,boolean)>(r4, 0);

        $i2 = r0.<java.util.TreeMap: int size>;

        $i3 = $i2 - 1;

        r0.<java.util.TreeMap: int size> = $i3;

        $i4 = r0.<java.util.TreeMap: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.TreeMap: int modCount> = $i5;

        return;
    }

    java.util.TreeMap$Node removeInternalByKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Node r2;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>(r1);

        if r2 == null goto label1;

        virtualinvoke r0.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r2);

     label1:
        return r2;
    }

    private void replaceInParent(java.util.TreeMap$Node, java.util.TreeMap$Node)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, r2, r3, $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 := @parameter1: java.util.TreeMap$Node;

        r3 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = null;

        if r2 == null goto label1;

        r2.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r3;

     label1:
        if r3 == null goto label3;

        $r4 = r3.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        if $r4 != r1 goto label2;

        r3.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = r2;

        goto label4;

     label2:
        r3.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = r2;

        goto label4;

     label3:
        r0.<java.util.TreeMap: java.util.TreeMap$Node root> = r2;

     label4:
        return;
    }

    private void rebalance(java.util.TreeMap$Node, boolean)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, r2, r3, r4, r5, r6, r7, r8;
        boolean z0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        z0 := @parameter1: boolean;

        r2 = r1;

     label01:
        if r2 == null goto label26;

        r3 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r4 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if r3 == null goto label02;

        $i14 = r3.<java.util.TreeMap$Node: int height>;

        goto label03;

     label02:
        $i14 = 0;

     label03:
        i0 = $i14;

        if r4 == null goto label04;

        $i12 = r4.<java.util.TreeMap$Node: int height>;

        goto label05;

     label04:
        $i12 = 0;

     label05:
        i1 = $i12;

        i2 = i0 - i1;

        if i2 != -2 goto label14;

        r5 = r4.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r6 = r4.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if r6 == null goto label06;

        $i13 = r6.<java.util.TreeMap$Node: int height>;

        goto label07;

     label06:
        $i13 = 0;

     label07:
        i3 = $i13;

        if r5 == null goto label08;

        $i10 = r5.<java.util.TreeMap$Node: int height>;

        goto label09;

     label08:
        $i10 = 0;

     label09:
        i4 = $i10;

        i5 = i4 - i3;

        if i5 == -1 goto label10;

        if i5 != 0 goto label11;

        if z0 != 0 goto label11;

     label10:
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Node)>(r2);

        goto label12;

     label11:
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Node)>(r4);

        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Node)>(r2);

     label12:
        if z0 == 0 goto label13;

        goto label26;

     label13:
        goto label25;

     label14:
        if i2 != 2 goto label23;

        r7 = r3.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r8 = r3.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if r8 == null goto label15;

        $i11 = r8.<java.util.TreeMap$Node: int height>;

        goto label16;

     label15:
        $i11 = 0;

     label16:
        i15 = $i11;

        if r7 == null goto label17;

        $i8 = r7.<java.util.TreeMap$Node: int height>;

        goto label18;

     label17:
        $i8 = 0;

     label18:
        i16 = $i8;

        i17 = i16 - i15;

        if i17 == 1 goto label19;

        if i17 != 0 goto label20;

        if z0 != 0 goto label20;

     label19:
        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Node)>(r2);

        goto label21;

     label20:
        specialinvoke r0.<java.util.TreeMap: void rotateLeft(java.util.TreeMap$Node)>(r3);

        specialinvoke r0.<java.util.TreeMap: void rotateRight(java.util.TreeMap$Node)>(r2);

     label21:
        if z0 == 0 goto label22;

        goto label26;

     label22:
        goto label25;

     label23:
        if i2 != 0 goto label24;

        $i9 = i0 + 1;

        r2.<java.util.TreeMap$Node: int height> = $i9;

        if z0 == 0 goto label25;

        goto label26;

     label24:
        $i6 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        $i7 = $i6 + 1;

        r2.<java.util.TreeMap$Node: int height> = $i7;

        if z0 != 0 goto label25;

        goto label26;

     label25:
        r2 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

        goto label01;

     label26:
        return;
    }

    private void rotateLeft(java.util.TreeMap$Node)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, r2, r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r3 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        r4 = r3.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r5 = r3.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = r4;

        if r4 == null goto label1;

        r4.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r1;

     label1:
        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, r3);

        r3.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = r1;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r3;

        if r2 == null goto label2;

        $i7 = r2.<java.util.TreeMap$Node: int height>;

        goto label3;

     label2:
        $i7 = 0;

     label3:
        if r4 == null goto label4;

        $i6 = r4.<java.util.TreeMap$Node: int height>;

        goto label5;

     label4:
        $i6 = 0;

     label5:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        $i1 = $i0 + 1;

        r1.<java.util.TreeMap$Node: int height> = $i1;

        $i2 = r1.<java.util.TreeMap$Node: int height>;

        if r5 == null goto label6;

        $i5 = r5.<java.util.TreeMap$Node: int height>;

        goto label7;

     label6:
        $i5 = 0;

     label7:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i5);

        $i4 = $i3 + 1;

        r3.<java.util.TreeMap$Node: int height> = $i4;

        return;
    }

    private void rotateRight(java.util.TreeMap$Node)
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, r2, r3, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r3 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        r4 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        r5 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = r5;

        if r5 == null goto label1;

        r5.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r1;

     label1:
        specialinvoke r0.<java.util.TreeMap: void replaceInParent(java.util.TreeMap$Node,java.util.TreeMap$Node)>(r1, r2);

        r2.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = r1;

        r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r2;

        if r3 == null goto label2;

        $i7 = r3.<java.util.TreeMap$Node: int height>;

        goto label3;

     label2:
        $i7 = 0;

     label3:
        if r5 == null goto label4;

        $i6 = r5.<java.util.TreeMap$Node: int height>;

        goto label5;

     label4:
        $i6 = 0;

     label5:
        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        $i1 = $i0 + 1;

        r1.<java.util.TreeMap$Node: int height> = $i1;

        $i2 = r1.<java.util.TreeMap$Node: int height>;

        if r4 == null goto label6;

        $i5 = r4.<java.util.TreeMap$Node: int height>;

        goto label7;

     label6:
        $i5 = 0;

     label7:
        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i5);

        $i4 = $i3 + 1;

        r2.<java.util.TreeMap$Node: int height> = $i4;

        return;
    }

    private java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)
    {
        java.util.TreeMap r0;
        java.util.Map$Entry r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.util.Map$Entry;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = new java.util.AbstractMap$SimpleImmutableEntry;

        specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.util.Map$Entry)>(r1);

     label2:
        return $r2;
    }

    public java.util.Map$Entry firstEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node $r1, $r2, $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        $r1 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

     label2:
        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    private java.util.Map$Entry internalPollFirstEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, $r2, $r3;

        r0 := @this: java.util.TreeMap;

        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r1 = virtualinvoke $r3.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

        virtualinvoke r0.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r1);

        return r1;
    }

    public java.util.Map$Entry pollFirstEntry()
    {
        java.util.TreeMap r0;
        java.util.Map$Entry $r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.TreeMap;

        $r1 = specialinvoke r0.<java.util.TreeMap: java.util.Map$Entry internalPollFirstEntry()>();

        $r2 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r1);

        return $r2;
    }

    public java.lang.Object firstKey()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node $r1, $r2, $r3;
        java.lang.Object $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: java.util.TreeMap;

        $r1 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r1 != null goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

        $r4 = virtualinvoke $r3.<java.util.TreeMap$Node: java.lang.Object getKey()>();

        return $r4;
    }

    public java.util.Map$Entry lastEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node $r1, $r2, $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        $r1 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

     label2:
        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    private java.util.Map$Entry internalPollLastEntry()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node r1, $r2, $r3;

        r0 := @this: java.util.TreeMap;

        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        r1 = virtualinvoke $r3.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

        virtualinvoke r0.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r1);

        return r1;
    }

    public java.util.Map$Entry pollLastEntry()
    {
        java.util.TreeMap r0;
        java.util.Map$Entry $r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.TreeMap;

        $r1 = specialinvoke r0.<java.util.TreeMap: java.util.Map$Entry internalPollLastEntry()>();

        $r2 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r1);

        return $r2;
    }

    public java.lang.Object lastKey()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$Node $r1, $r2, $r3;
        java.lang.Object $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: java.util.TreeMap;

        $r1 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r1 != null goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

        $r4 = virtualinvoke $r3.<java.util.TreeMap$Node: java.lang.Object getKey()>();

        return $r4;
    }

    public java.util.Map$Entry lowerEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap$Node $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    public java.lang.Object lowerKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r4;
        java.util.TreeMap$Node r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Map$Entry floorEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap$Node $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    public java.lang.Object floorKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r4;
        java.util.TreeMap$Node r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Map$Entry ceilingEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap$Node $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    public java.lang.Object ceilingKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r4;
        java.util.TreeMap$Node r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Map$Entry higherEntry(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$Relation $r2;
        java.util.TreeMap$Node $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        $r3 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r2);

        $r4 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>($r3);

        return $r4;
    }

    public java.lang.Object higherKey(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, $r4;
        java.util.TreeMap$Node r2;
        java.util.TreeMap$Relation $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        r2 = virtualinvoke r0.<java.util.TreeMap: java.util.TreeMap$Node find(java.lang.Object,java.util.TreeMap$Relation)>(r1, $r3);

        if r2 == null goto label1;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap r0;
        java.util.Comparator $r1, $r2, $r3;

        r0 := @this: java.util.TreeMap;

        $r2 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        $r1 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        if $r2 == $r1 goto label1;

        $r3 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$EntrySet r1, $r2;

        r0 := @this: java.util.TreeMap;

        r1 = r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new java.util.TreeMap$EntrySet;

        specialinvoke $r2.<java.util.TreeMap$EntrySet: void <init>(java.util.TreeMap)>(r0);

        r0.<java.util.TreeMap: java.util.TreeMap$EntrySet entrySet> = $r2;

     label2:
        return $r2;
    }

    public java.util.Set keySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$KeySet r1, $r2;

        r0 := @this: java.util.TreeMap;

        r1 = r0.<java.util.TreeMap: java.util.TreeMap$KeySet keySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new java.util.TreeMap$KeySet;

        specialinvoke $r2.<java.util.TreeMap$KeySet: void <init>(java.util.TreeMap)>(r0);

        r0.<java.util.TreeMap: java.util.TreeMap$KeySet keySet> = $r2;

     label2:
        return $r2;
    }

    public java.util.NavigableSet navigableKeySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$KeySet r1, $r2;

        r0 := @this: java.util.TreeMap;

        r1 = r0.<java.util.TreeMap: java.util.TreeMap$KeySet keySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new java.util.TreeMap$KeySet;

        specialinvoke $r2.<java.util.TreeMap$KeySet: void <init>(java.util.TreeMap)>(r0);

        r0.<java.util.TreeMap: java.util.TreeMap$KeySet keySet> = $r2;

     label2:
        return $r2;
    }

    public java.util.NavigableMap subMap(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.TreeMap$Bound r3, r4, $r6, $r7;
        java.util.TreeMap$BoundedMap $r5;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label1;

        $r7 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        goto label2;

     label1:
        $r7 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

     label2:
        r3 = $r7;

        if z1 == 0 goto label3;

        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        goto label4;

     label3:
        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

     label4:
        r4 = $r6;

        $r5 = new java.util.TreeMap$BoundedMap;

        specialinvoke $r5.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, r1, r3, r2, r4);

        return $r5;
    }

    public java.util.SortedMap subMap(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1, r2;
        java.util.TreeMap$BoundedMap $r3;
        java.util.TreeMap$Bound $r4, $r5;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.util.TreeMap$BoundedMap;

        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        specialinvoke $r3.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, r1, $r5, r2, $r4);

        return $r3;
    }

    public java.util.NavigableMap headMap(java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$Bound r2, $r4, $r5;
        java.util.TreeMap$BoundedMap $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        goto label2;

     label1:
        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

     label2:
        r2 = $r5;

        $r3 = new java.util.TreeMap$BoundedMap;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r3.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, null, $r4, r1, r2);

        return $r3;
    }

    public java.util.SortedMap headMap(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.TreeMap$Bound $r3, $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.util.TreeMap$BoundedMap;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        specialinvoke $r2.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, null, $r4, r1, $r3);

        return $r2;
    }

    public java.util.NavigableMap tailMap(java.lang.Object, boolean)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$Bound r2, $r4, $r5;
        java.util.TreeMap$BoundedMap $r3;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        goto label2;

     label1:
        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

     label2:
        r2 = $r5;

        $r3 = new java.util.TreeMap$BoundedMap;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r3.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, r1, r2, null, $r4);

        return $r3;
    }

    public java.util.SortedMap tailMap(java.lang.Object)
    {
        java.util.TreeMap r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.TreeMap$Bound $r3, $r4;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.util.TreeMap$BoundedMap;

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r2.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 1, r1, $r4, null, $r3);

        return $r2;
    }

    public java.util.NavigableMap descendingMap()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$BoundedMap $r1;
        java.util.TreeMap$Bound $r2, $r3;

        r0 := @this: java.util.TreeMap;

        $r1 = new java.util.TreeMap$BoundedMap;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r1.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 0, null, $r3, null, $r2);

        return $r1;
    }

    public java.util.NavigableSet descendingKeySet()
    {
        java.util.TreeMap r0;
        java.util.TreeMap$BoundedMap $r1;
        java.util.TreeMap$Bound $r2, $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap;

        $r1 = new java.util.TreeMap$BoundedMap;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r1.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>(r0, 0, null, $r3, null, $r2);

        $r4 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    static int count(java.util.Iterator)
    {
        java.util.Iterator r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: java.util.Iterator;

        i0 = 0;

     label1:
        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.TreeMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.io.ObjectOutputStream$PutField $r4;
        java.util.Comparator $r5;
        int $i0;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r4 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r5 = virtualinvoke r0.<java.util.TreeMap: java.util.Comparator comparator()>();

        virtualinvoke $r4.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("comparator", $r5);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        $i0 = r0.<java.util.TreeMap: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r6 = virtualinvoke r0.<java.util.TreeMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.TreeMap r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0, i1;
        java.lang.Object $r3, $r6, $r7;
        java.util.Comparator $r4, $r5, $r9;

        r0 := @this: java.util.TreeMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $r3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("comparator", null);

        $r4 = (java.util.Comparator) $r3;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r4;

        $r5 = r0.<java.util.TreeMap: java.util.Comparator comparator>;

        if $r5 != null goto label1;

        $r9 = <java.util.TreeMap: java.util.Comparator NATURAL_ORDER>;

        r0.<java.util.TreeMap: java.util.Comparator comparator> = $r9;

     label1:
        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r7 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<java.util.TreeMap: java.lang.Object putInternal(java.lang.Object,java.lang.Object)>($r6, $r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    static java.util.Map$Entry access$000(java.util.TreeMap)
    {
        java.util.TreeMap r0;
        java.util.Map$Entry $r1;

        r0 := @parameter0: java.util.TreeMap;

        $r1 = specialinvoke r0.<java.util.TreeMap: java.util.Map$Entry internalPollFirstEntry()>();

        return $r1;
    }

    static java.util.Map$Entry access$100(java.util.TreeMap)
    {
        java.util.TreeMap r0;
        java.util.Map$Entry $r1;

        r0 := @parameter0: java.util.TreeMap;

        $r1 = specialinvoke r0.<java.util.TreeMap: java.util.Map$Entry internalPollLastEntry()>();

        return $r1;
    }

    static java.util.AbstractMap$SimpleImmutableEntry access$300(java.util.TreeMap, java.util.Map$Entry)
    {
        java.util.TreeMap r0;
        java.util.Map$Entry r1;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @parameter0: java.util.TreeMap;

        r1 := @parameter1: java.util.Map$Entry;

        $r2 = specialinvoke r0.<java.util.TreeMap: java.util.AbstractMap$SimpleImmutableEntry immutableCopy(java.util.Map$Entry)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.util.TreeMap$1 $r0;

        <java.util.TreeMap: long serialVersionUID> = 919286545866124006L;

        $r0 = new java.util.TreeMap$1;

        specialinvoke $r0.<java.util.TreeMap$1: void <init>()>();

        <java.util.TreeMap: java.util.Comparator NATURAL_ORDER> = $r0;

        return;
    }
}
