class org.json.JSON extends java.lang.Object
{

    void <init>()
    {
        org.json.JSON r0;

        r0 := @this: org.json.JSON;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static double checkDouble(double) throws org.json.JSONException
    {
        double d0;
        boolean $z0, $z1;
        org.json.JSONException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new org.json.JSONException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Forbidden numeric value: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.json.JSONException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        return d0;
    }

    static java.lang.Boolean toBoolean(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r4, $r5, $r6;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Boolean) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        r1 = (java.lang.String) r0;

        $r2 = "true";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label2;

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        return $r5;

     label2:
        $r3 = "false";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z3 == 0 goto label3;

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r4;

     label3:
        return null;
    }

    static java.lang.Double toDouble(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        java.lang.Double $r3, $r5, $r6;
        java.lang.Number $r4;
        double $d0;
        java.lang.NumberFormatException $r7;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Double;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Double) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.Number) r0;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        $r5 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r5;

     label2:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label3:
        $r2 = (java.lang.String) r0;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

     label4:
        return $r3;

     label5:
        $r7 := @caughtexception;

     label6:
        return null;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    static java.lang.Integer toInteger(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        double $d0;
        int $i0, $i1;
        java.lang.Integer $r3, $r5, $r6;
        java.lang.Number $r4;
        java.lang.NumberFormatException $r7;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Integer) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.Number) r0;

        $i1 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r5;

     label2:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label3:
        $r2 = (java.lang.String) r0;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        $i0 = (int) $d0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

     label4:
        return $r3;

     label5:
        $r7 := @caughtexception;

     label6:
        return null;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    static java.lang.Long toLong(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.String $r2;
        double $d0;
        long $l0, $l1;
        java.lang.Long $r3, $r5, $r6;
        java.lang.Number $r4;
        java.lang.NumberFormatException $r7;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Long;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Long) r0;

        return $r6;

     label1:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.Number) r0;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        return $r5;

     label2:
        $z2 = r0 instanceof java.lang.String;

        if $z2 == 0 goto label6;

     label3:
        $r2 = (java.lang.String) r0;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r2);

        $l0 = (long) $d0;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

     label4:
        return $r3;

     label5:
        $r7 := @caughtexception;

     label6:
        return null;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    static java.lang.String toString(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) r0;

        return $r2;

     label1:
        if r0 == null goto label2;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        return $r1;

     label2:
        return null;
    }

    public static org.json.JSONException typeMismatch(java.lang.Object, java.lang.Object, java.lang.String) throws org.json.JSONException
    {
        java.lang.Object r0, r1;
        java.lang.String r2, $r11, $r15, $r20;
        org.json.JSONException $r3, $r17;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r16, $r18, $r19, $r21;
        java.lang.Class $r10;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        $r17 = new org.json.JSONException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null.");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.json.JSONException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label1:
        $r3 = new org.json.JSONException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be converted to ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.json.JSONException: void <init>(java.lang.String)>($r15);

        throw $r3;
    }

    public static org.json.JSONException typeMismatch(java.lang.Object, java.lang.String) throws org.json.JSONException
    {
        java.lang.Object r0;
        java.lang.String r1, $r8, $r12;
        org.json.JSONException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r9, $r10, $r11;
        java.lang.Class $r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r13 = new org.json.JSONException;

        specialinvoke $r13.<org.json.JSONException: void <init>(java.lang.String)>("Value is null.");

        throw $r13;

     label1:
        $r2 = new org.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of type ");

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be converted to ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>($r12);

        throw $r2;
    }
}
