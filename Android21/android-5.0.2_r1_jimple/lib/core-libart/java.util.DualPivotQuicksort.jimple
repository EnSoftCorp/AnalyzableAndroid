final class java.util.DualPivotQuicksort extends java.lang.Object
{
    private static final int INSERTION_SORT_THRESHOLD;
    private static final int COUNTING_SORT_THRESHOLD_FOR_BYTE;
    private static final int COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR;
    private static final int NUM_SHORT_VALUES;
    private static final int NUM_CHAR_VALUES;
    private static final int NUM_BYTE_VALUES;

    private void <init>()
    {
        java.util.DualPivotQuicksort r0;

        r0 := @this: java.util.DualPivotQuicksort;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void sort(int[])
    {
        int[] r0;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(int[], int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void doSort(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = i1 - i0;

        $i6 = $i5 + 1;

        if $i6 >= 32 goto label5;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label4;

        i3 = r0[i2];

        i4 = i2 - 1;

     label2:
        if i4 < i0 goto label3;

        $i8 = r0[i4];

        if i3 >= $i8 goto label3;

        $i10 = i4 + 1;

        $i9 = r0[i4];

        r0[$i10] = $i9;

        i4 = i4 + -1;

        goto label2;

     label3:
        $i7 = i4 + 1;

        r0[$i7] = i3;

        i2 = i2 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(int[],int,int)>(r0, i0, i1);

     label6:
        return;
    }

    private static void dualPivotQuicksort(int[], int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73;
        boolean z0, $z1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i18 = i1 - i0;

        $i21 = $i18 + 1;

        i2 = $i21 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i20 = i0 + i1;

        i5 = $i20 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        i8 = r0[i3];

        i9 = r0[i7];

        i10 = r0[i5];

        i11 = r0[i6];

        i12 = r0[i4];

        if i8 <= i9 goto label01;

        i13 = i8;

        i8 = i9;

        i9 = i13;

     label01:
        if i11 <= i12 goto label02;

        i61 = i11;

        i11 = i12;

        i12 = i61;

     label02:
        if i8 <= i10 goto label03;

        i62 = i8;

        i8 = i10;

        i10 = i62;

     label03:
        if i9 <= i10 goto label04;

        i63 = i9;

        i9 = i10;

        i10 = i63;

     label04:
        if i8 <= i11 goto label05;

        i64 = i8;

        i8 = i11;

        i11 = i64;

     label05:
        if i10 <= i11 goto label06;

        i65 = i10;

        i10 = i11;

        i11 = i65;

     label06:
        if i9 <= i12 goto label07;

        i66 = i9;

        i9 = i12;

        i12 = i66;

     label07:
        if i9 <= i10 goto label08;

        i67 = i9;

        i9 = i10;

        i10 = i67;

     label08:
        if i11 <= i12 goto label09;

        i68 = i11;

        i11 = i12;

        i12 = i68;

     label09:
        r0[i3] = i8;

        r0[i5] = i10;

        r0[i4] = i12;

        i69 = i9;

        $i23 = r0[i0];

        r0[i7] = $i23;

        i14 = i11;

        $i22 = r0[i1];

        r0[i6] = $i22;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if i69 == i14 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i17 = i16;

     label12:
        if i17 > i15 goto label19;

        i19 = r0[i17];

        if i19 >= i69 goto label14;

        if i17 == i16 goto label13;

        $i58 = r0[i16];

        r0[i17] = $i58;

        r0[i16] = i19;

     label13:
        i16 = i16 + 1;

        goto label18;

     label14:
        if i19 <= i14 goto label18;

     label15:
        $i52 = r0[i15];

        if $i52 <= i14 goto label16;

        $i59 = i15;

        i15 = i15 + -1;

        if $i59 != i17 goto label15;

        goto label28;

     label16:
        $i51 = r0[i15];

        if $i51 >= i69 goto label17;

        $i56 = r0[i16];

        r0[i17] = $i56;

        $i55 = i16;

        i16 = i16 + 1;

        $i54 = r0[i15];

        r0[$i55] = $i54;

        $i60 = i15;

        i15 = i15 + -1;

        r0[$i60] = i19;

        goto label18;

     label17:
        $i50 = r0[i15];

        r0[i17] = $i50;

        $i57 = i15;

        i15 = i15 + -1;

        r0[$i57] = i19;

     label18:
        i17 = i17 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i70 = i16;

     label21:
        if i70 > i15 goto label28;

        i71 = r0[i70];

        if i71 != i69 goto label22;

        goto label27;

     label22:
        if i71 >= i69 goto label24;

        if i70 == i16 goto label23;

        $i53 = r0[i16];

        r0[i70] = $i53;

        r0[i16] = i71;

     label23:
        i16 = i16 + 1;

        goto label27;

     label24:
        $i45 = r0[i15];

        if $i45 <= i69 goto label25;

        i15 = i15 + -1;

        goto label24;

     label25:
        $i42 = r0[i15];

        if $i42 >= i69 goto label26;

        $i49 = r0[i16];

        r0[i70] = $i49;

        $i48 = i16;

        i16 = i16 + 1;

        $i47 = r0[i15];

        r0[$i48] = $i47;

        $i46 = i15;

        i15 = i15 + -1;

        r0[$i46] = i71;

        goto label27;

     label26:
        r0[i70] = i69;

        $i43 = i15;

        i15 = i15 + -1;

        r0[$i43] = i71;

     label27:
        i70 = i70 + 1;

        goto label21;

     label28:
        $i25 = i16 - 1;

        $i24 = r0[$i25];

        r0[i0] = $i24;

        $i27 = i16 - 1;

        r0[$i27] = i69;

        $i26 = i15 + 1;

        $i29 = r0[$i26];

        r0[i1] = $i29;

        $i28 = i15 + 1;

        r0[$i28] = i14;

        $i32 = i16 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i0, $i32);

        $i33 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, $i33, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i16 >= i3 goto label40;

        if i15 <= i4 goto label40;

     label30:
        $i30 = r0[i16];

        if $i30 != i69 goto label31;

        i16 = i16 + 1;

        goto label30;

     label31:
        $i31 = r0[i15];

        if $i31 != i14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i72 = i16;

     label33:
        if i72 > i15 goto label40;

        i73 = r0[i72];

        if i73 != i14 goto label38;

     label34:
        $i34 = r0[i15];

        if $i34 != i14 goto label35;

        $i44 = i15;

        i15 = i15 + -1;

        if $i44 != i72 goto label34;

        goto label40;

     label35:
        $i35 = r0[i15];

        if $i35 != i69 goto label36;

        $i38 = r0[i16];

        r0[i72] = $i38;

        $i39 = i16;

        i16 = i16 + 1;

        r0[$i39] = i69;

        goto label37;

     label36:
        $i40 = r0[i15];

        r0[i72] = $i40;

     label37:
        $i41 = i15;

        i15 = i15 + -1;

        r0[$i41] = i14;

        goto label39;

     label38:
        if i73 != i69 goto label39;

        $i36 = r0[i16];

        r0[i72] = $i36;

        $i37 = i16;

        i16 = i16 + 1;

        r0[$i37] = i69;

     label39:
        i72 = i72 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(int[],int,int)>(r0, i16, i15);

        return;
    }

    public static void sort(long[])
    {
        long[] r0;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(long[], int, int)
    {
        long[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void doSort(long[], int, int)
    {
        long[] r0;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i11;
        long l3, $l8, $l10;
        byte $b9;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i5 = i1 - i0;

        $i6 = $i5 + 1;

        if $i6 >= 32 goto label5;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label4;

        l3 = r0[i2];

        i4 = i2 - 1;

     label2:
        if i4 < i0 goto label3;

        $l8 = r0[i4];

        $b9 = l3 cmp $l8;

        if $b9 >= 0 goto label3;

        $i11 = i4 + 1;

        $l10 = r0[i4];

        r0[$i11] = $l10;

        i4 = i4 + -1;

        goto label2;

     label3:
        $i7 = i4 + 1;

        r0[$i7] = l3;

        i2 = i2 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(long[],int,int)>(r0, i0, i1);

     label6:
        return;
    }

    private static void dualPivotQuicksort(long[], int, int)
    {
        long[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i18, $i19, $i20, $i21, $i34, $i35, $i36, $i38, $i39, $i40, $i46, $i54, $i59, $i61, $i63, $i65, $i69, $i78, $i79, $i82, $i84, i94, i96;
        long l8, l9, l10, l11, l12, l13, l14, l17, $l30, $l33, $l37, $l41, $l43, $l45, $l47, $l51, $l53, $l57, $l58, $l60, $l62, $l64, $l67, $l70, $l72, $l75, $l76, $l80, $l81, $l83, l85, l86, l87, l88, l89, l90, l91, l92, l93, l95, l97;
        boolean z0, $z1;
        byte $b22, $b23, $b24, $b25, $b26, $b27, $b28, $b29, $b31, $b32, $b42, $b44, $b48, $b49, $b50, $b52, $b55, $b56, $b66, $b68, $b71, $b73, $b74, $b77;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i19 = i1 - i0;

        $i21 = $i19 + 1;

        i2 = $i21 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i20 = i0 + i1;

        i5 = $i20 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        l8 = r0[i3];

        l9 = r0[i7];

        l10 = r0[i5];

        l11 = r0[i6];

        l12 = r0[i4];

        $b24 = l8 cmp l9;

        if $b24 <= 0 goto label01;

        l13 = l8;

        l8 = l9;

        l9 = l13;

     label01:
        $b25 = l11 cmp l12;

        if $b25 <= 0 goto label02;

        l85 = l11;

        l11 = l12;

        l12 = l85;

     label02:
        $b22 = l8 cmp l10;

        if $b22 <= 0 goto label03;

        l86 = l8;

        l8 = l10;

        l10 = l86;

     label03:
        $b23 = l9 cmp l10;

        if $b23 <= 0 goto label04;

        l87 = l9;

        l9 = l10;

        l10 = l87;

     label04:
        $b28 = l8 cmp l11;

        if $b28 <= 0 goto label05;

        l88 = l8;

        l8 = l11;

        l11 = l88;

     label05:
        $b29 = l10 cmp l11;

        if $b29 <= 0 goto label06;

        l89 = l10;

        l10 = l11;

        l11 = l89;

     label06:
        $b26 = l9 cmp l12;

        if $b26 <= 0 goto label07;

        l90 = l9;

        l9 = l12;

        l12 = l90;

     label07:
        $b27 = l9 cmp l10;

        if $b27 <= 0 goto label08;

        l91 = l9;

        l9 = l10;

        l10 = l91;

     label08:
        $b32 = l11 cmp l12;

        if $b32 <= 0 goto label09;

        l92 = l11;

        l11 = l12;

        l12 = l92;

     label09:
        r0[i3] = l8;

        r0[i5] = l10;

        r0[i4] = l12;

        l93 = l9;

        $l33 = r0[i0];

        r0[i7] = $l33;

        l14 = l11;

        $l30 = r0[i1];

        r0[i6] = $l30;

        i15 = i0 + 1;

        i16 = i1 - 1;

        $b31 = l93 cmp l14;

        if $b31 == 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i18 = i15;

     label12:
        if i18 > i16 goto label19;

        l17 = r0[i18];

        $b74 = l17 cmp l93;

        if $b74 >= 0 goto label14;

        if i18 == i15 goto label13;

        $l80 = r0[i15];

        r0[i18] = $l80;

        r0[i15] = l17;

     label13:
        i15 = i15 + 1;

        goto label18;

     label14:
        $b77 = l17 cmp l14;

        if $b77 <= 0 goto label18;

     label15:
        $l76 = r0[i16];

        $b71 = $l76 cmp l14;

        if $b71 <= 0 goto label16;

        $i78 = i16;

        i16 = i16 + -1;

        if $i78 != i18 goto label15;

        goto label28;

     label16:
        $l70 = r0[i16];

        $b73 = $l70 cmp l93;

        if $b73 >= 0 goto label17;

        $l81 = r0[i15];

        r0[i18] = $l81;

        $i84 = i15;

        i15 = i15 + 1;

        $l83 = r0[i16];

        r0[$i84] = $l83;

        $i79 = i16;

        i16 = i16 + -1;

        r0[$i79] = l17;

        goto label18;

     label17:
        $l72 = r0[i16];

        r0[i18] = $l72;

        $i82 = i16;

        i16 = i16 + -1;

        r0[$i82] = l17;

     label18:
        i18 = i18 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i94 = i15;

     label21:
        if i94 > i16 goto label28;

        l95 = r0[i94];

        $b55 = l95 cmp l93;

        if $b55 != 0 goto label22;

        goto label27;

     label22:
        $b56 = l95 cmp l93;

        if $b56 >= 0 goto label24;

        if i94 == i15 goto label23;

        $l75 = r0[i15];

        r0[i94] = $l75;

        r0[i15] = l95;

     label23:
        i15 = i15 + 1;

        goto label27;

     label24:
        $l57 = r0[i16];

        $b66 = $l57 cmp l93;

        if $b66 <= 0 goto label25;

        i16 = i16 + -1;

        goto label24;

     label25:
        $l67 = r0[i16];

        $b68 = $l67 cmp l93;

        if $b68 >= 0 goto label26;

        $l62 = r0[i15];

        r0[i94] = $l62;

        $i63 = i15;

        i15 = i15 + 1;

        $l64 = r0[i16];

        r0[$i63] = $l64;

        $i65 = i16;

        i16 = i16 + -1;

        r0[$i65] = l95;

        goto label27;

     label26:
        r0[i94] = l93;

        $i69 = i16;

        i16 = i16 + -1;

        r0[$i69] = l95;

     label27:
        i94 = i94 + 1;

        goto label21;

     label28:
        $i36 = i15 - 1;

        $l37 = r0[$i36];

        r0[i0] = $l37;

        $i34 = i15 - 1;

        r0[$i34] = l93;

        $i35 = i16 + 1;

        $l41 = r0[$i35];

        r0[i1] = $l41;

        $i40 = i16 + 1;

        r0[$i40] = l14;

        $i39 = i15 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i0, $i39);

        $i38 = i16 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, $i38, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i15 >= i3 goto label40;

        if i16 <= i4 goto label40;

     label30:
        $l45 = r0[i15];

        $b44 = $l45 cmp l93;

        if $b44 != 0 goto label31;

        i15 = i15 + 1;

        goto label30;

     label31:
        $l43 = r0[i16];

        $b42 = $l43 cmp l14;

        if $b42 != 0 goto label32;

        i16 = i16 + -1;

        goto label31;

     label32:
        i96 = i15;

     label33:
        if i96 > i16 goto label40;

        l97 = r0[i96];

        $b49 = l97 cmp l14;

        if $b49 != 0 goto label38;

     label34:
        $l53 = r0[i16];

        $b52 = $l53 cmp l14;

        if $b52 != 0 goto label35;

        $i54 = i16;

        i16 = i16 + -1;

        if $i54 != i96 goto label34;

        goto label40;

     label35:
        $l51 = r0[i16];

        $b50 = $l51 cmp l93;

        if $b50 != 0 goto label36;

        $l60 = r0[i15];

        r0[i96] = $l60;

        $i61 = i15;

        i15 = i15 + 1;

        r0[$i61] = l93;

        goto label37;

     label36:
        $l58 = r0[i16];

        r0[i96] = $l58;

     label37:
        $i59 = i16;

        i16 = i16 + -1;

        r0[$i59] = l14;

        goto label39;

     label38:
        $b48 = l97 cmp l93;

        if $b48 != 0 goto label39;

        $l47 = r0[i15];

        r0[i96] = $l47;

        $i46 = i15;

        i15 = i15 + 1;

        r0[$i46] = l93;

     label39:
        i96 = i96 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(long[],int,int)>(r0, i15, i16);

        return;
    }

    public static void sort(short[])
    {
        short[] r0;
        int $i0, $i1;

        r0 := @parameter0: short[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(short[], int, int)
    {
        short[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void doSort(short[], int, int)
    {
        short[] r0;
        int i0, i1, i2, i4, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i21, i22, i23, i24;
        short s3, s5, $s14, $s19, $s20;
        int[] r1;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = i1 - i0;

        $i8 = $i7 + 1;

        if $i8 >= 32 goto label05;

        i2 = i0 + 1;

     label01:
        if i2 > i1 goto label04;

        s3 = r0[i2];

        i4 = i2 - 1;

     label02:
        if i4 < i0 goto label03;

        $s20 = r0[i4];

        if s3 >= $s20 goto label03;

        $i21 = i4 + 1;

        $s19 = r0[i4];

        r0[$i21] = $s19;

        i4 = i4 + -1;

        goto label02;

     label03:
        $i17 = i4 + 1;

        r0[$i17] = s3;

        i2 = i2 + 1;

        goto label01;

     label04:
        goto label13;

     label05:
        $i9 = i1 - i0;

        $i10 = $i9 + 1;

        if $i10 <= 32768 goto label12;

        r1 = newarray (int)[65536];

        i22 = i0;

     label06:
        if i22 > i1 goto label07;

        $s14 = r0[i22];

        $i16 = $s14 - -32768;

        $i15 = r1[$i16];

        $i18 = $i15 + 1;

        r1[$i16] = $i18;

        i22 = i22 + 1;

        goto label06;

     label07:
        i23 = 0;

        i24 = i0;

     label08:
        $i11 = lengthof r1;

        if i23 >= $i11 goto label11;

        if i24 > i1 goto label11;

        $i12 = i23 + -32768;

        s5 = (short) $i12;

        i6 = r1[i23];

     label09:
        if i6 <= 0 goto label10;

        $i13 = i24;

        i24 = i24 + 1;

        r0[$i13] = s5;

        i6 = i6 + -1;

        goto label09;

     label10:
        i23 = i23 + 1;

        goto label08;

     label11:
        goto label13;

     label12:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(short[],int,int)>(r0, i0, i1);

     label13:
        return;
    }

    private static void dualPivotQuicksort(short[], int, int)
    {
        short[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, $i18, $i20, $i21, $i25, $i26, $i27, $i28, $i32, $i33, $i37, $i39, $i41, $i43, $i44, $i46, $i48, $i55, $i57, $i59, $i60, i70, i72;
        short s8, s9, s10, s11, s12, s13, s14, s19, $s22, $s23, $s24, $s29, $s30, $s31, $s34, $s35, $s36, $s38, $s40, $s42, $s45, $s47, $s49, $s50, $s51, $s52, $s53, $s54, $s56, $s58, s61, s62, s63, s64, s65, s66, s67, s68, s69, s71, s73;
        boolean z0, $z1;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i18 = i1 - i0;

        $i21 = $i18 + 1;

        i2 = $i21 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i20 = i0 + i1;

        i5 = $i20 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        s8 = r0[i3];

        s9 = r0[i7];

        s10 = r0[i5];

        s11 = r0[i6];

        s12 = r0[i4];

        if s8 <= s9 goto label01;

        s13 = s8;

        s8 = s9;

        s9 = s13;

     label01:
        if s11 <= s12 goto label02;

        s61 = s11;

        s11 = s12;

        s12 = s61;

     label02:
        if s8 <= s10 goto label03;

        s62 = s8;

        s8 = s10;

        s10 = s62;

     label03:
        if s9 <= s10 goto label04;

        s63 = s9;

        s9 = s10;

        s10 = s63;

     label04:
        if s8 <= s11 goto label05;

        s64 = s8;

        s8 = s11;

        s11 = s64;

     label05:
        if s10 <= s11 goto label06;

        s65 = s10;

        s10 = s11;

        s11 = s65;

     label06:
        if s9 <= s12 goto label07;

        s66 = s9;

        s9 = s12;

        s12 = s66;

     label07:
        if s9 <= s10 goto label08;

        s67 = s9;

        s9 = s10;

        s10 = s67;

     label08:
        if s11 <= s12 goto label09;

        s68 = s11;

        s11 = s12;

        s12 = s68;

     label09:
        r0[i3] = s8;

        r0[i5] = s10;

        r0[i4] = s12;

        s69 = s9;

        $s23 = r0[i0];

        r0[i7] = $s23;

        s14 = s11;

        $s22 = r0[i1];

        r0[i6] = $s22;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if s69 == s14 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i17 = i16;

     label12:
        if i17 > i15 goto label19;

        s19 = r0[i17];

        if s19 >= s69 goto label14;

        if i17 == i16 goto label13;

        $s58 = r0[i16];

        r0[i17] = $s58;

        r0[i16] = s19;

     label13:
        i16 = i16 + 1;

        goto label18;

     label14:
        if s19 <= s14 goto label18;

     label15:
        $s52 = r0[i15];

        if $s52 <= s14 goto label16;

        $i59 = i15;

        i15 = i15 + -1;

        if $i59 != i17 goto label15;

        goto label28;

     label16:
        $s51 = r0[i15];

        if $s51 >= s69 goto label17;

        $s56 = r0[i16];

        r0[i17] = $s56;

        $i55 = i16;

        i16 = i16 + 1;

        $s54 = r0[i15];

        r0[$i55] = $s54;

        $i60 = i15;

        i15 = i15 + -1;

        r0[$i60] = s19;

        goto label18;

     label17:
        $s50 = r0[i15];

        r0[i17] = $s50;

        $i57 = i15;

        i15 = i15 + -1;

        r0[$i57] = s19;

     label18:
        i17 = i17 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i70 = i16;

     label21:
        if i70 > i15 goto label28;

        s71 = r0[i70];

        if s71 != s69 goto label22;

        goto label27;

     label22:
        if s71 >= s69 goto label24;

        if i70 == i16 goto label23;

        $s53 = r0[i16];

        r0[i70] = $s53;

        r0[i16] = s71;

     label23:
        i16 = i16 + 1;

        goto label27;

     label24:
        $s45 = r0[i15];

        if $s45 <= s69 goto label25;

        i15 = i15 + -1;

        goto label24;

     label25:
        $s42 = r0[i15];

        if $s42 >= s69 goto label26;

        $s49 = r0[i16];

        r0[i70] = $s49;

        $i48 = i16;

        i16 = i16 + 1;

        $s47 = r0[i15];

        r0[$i48] = $s47;

        $i46 = i15;

        i15 = i15 + -1;

        r0[$i46] = s71;

        goto label27;

     label26:
        r0[i70] = s69;

        $i43 = i15;

        i15 = i15 + -1;

        r0[$i43] = s71;

     label27:
        i70 = i70 + 1;

        goto label21;

     label28:
        $i25 = i16 - 1;

        $s24 = r0[$i25];

        r0[i0] = $s24;

        $i27 = i16 - 1;

        r0[$i27] = s69;

        $i26 = i15 + 1;

        $s29 = r0[$i26];

        r0[i1] = $s29;

        $i28 = i15 + 1;

        r0[$i28] = s14;

        $i32 = i16 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i0, $i32);

        $i33 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, $i33, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i16 >= i3 goto label40;

        if i15 <= i4 goto label40;

     label30:
        $s30 = r0[i16];

        if $s30 != s69 goto label31;

        i16 = i16 + 1;

        goto label30;

     label31:
        $s31 = r0[i15];

        if $s31 != s14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i72 = i16;

     label33:
        if i72 > i15 goto label40;

        s73 = r0[i72];

        if s73 != s14 goto label38;

     label34:
        $s34 = r0[i15];

        if $s34 != s14 goto label35;

        $i44 = i15;

        i15 = i15 + -1;

        if $i44 != i72 goto label34;

        goto label40;

     label35:
        $s35 = r0[i15];

        if $s35 != s69 goto label36;

        $s38 = r0[i16];

        r0[i72] = $s38;

        $i39 = i16;

        i16 = i16 + 1;

        r0[$i39] = s69;

        goto label37;

     label36:
        $s40 = r0[i15];

        r0[i72] = $s40;

     label37:
        $i41 = i15;

        i15 = i15 + -1;

        r0[$i41] = s14;

        goto label39;

     label38:
        if s73 != s69 goto label39;

        $s36 = r0[i16];

        r0[i72] = $s36;

        $i37 = i16;

        i16 = i16 + 1;

        r0[$i37] = s69;

     label39:
        i72 = i72 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(short[],int,int)>(r0, i16, i15);

        return;
    }

    public static void sort(char[])
    {
        char[] r0;
        int $i0, $i1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void doSort(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i19, i20, i21, i22;
        char c3, $c12, $c13, $c17, $c18;
        int[] r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i6 = i1 - i0;

        $i7 = $i6 + 1;

        if $i7 >= 32 goto label05;

        i2 = i0 + 1;

     label01:
        if i2 > i1 goto label04;

        c3 = r0[i2];

        i4 = i2 - 1;

     label02:
        if i4 < i0 goto label03;

        $c18 = r0[i4];

        if c3 >= $c18 goto label03;

        $i19 = i4 + 1;

        $c17 = r0[i4];

        r0[$i19] = $c17;

        i4 = i4 + -1;

        goto label02;

     label03:
        $i15 = i4 + 1;

        r0[$i15] = c3;

        i2 = i2 + 1;

        goto label01;

     label04:
        goto label13;

     label05:
        $i8 = i1 - i0;

        $i9 = $i8 + 1;

        if $i9 <= 32768 goto label12;

        r1 = newarray (int)[65536];

        i20 = i0;

     label06:
        if i20 > i1 goto label07;

        $c13 = r0[i20];

        $i14 = r1[$c13];

        $i16 = $i14 + 1;

        r1[$c13] = $i16;

        i20 = i20 + 1;

        goto label06;

     label07:
        i21 = 0;

        i22 = i0;

     label08:
        $i10 = lengthof r1;

        if i21 >= $i10 goto label11;

        if i22 > i1 goto label11;

        i5 = r1[i21];

     label09:
        if i5 <= 0 goto label10;

        $i11 = i22;

        i22 = i22 + 1;

        $c12 = (char) i21;

        r0[$i11] = $c12;

        i5 = i5 + -1;

        goto label09;

     label10:
        i21 = i21 + 1;

        goto label08;

     label11:
        goto label13;

     label12:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(char[],int,int)>(r0, i0, i1);

     label13:
        return;
    }

    private static void dualPivotQuicksort(char[], int, int)
    {
        char[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, $i18, $i20, $i21, $i25, $i26, $i27, $i28, $i32, $i33, $i37, $i39, $i41, $i43, $i44, $i46, $i48, $i55, $i57, $i59, $i60, i70, i72;
        char c8, c9, c10, c11, c12, c13, c14, c19, $c22, $c23, $c24, $c29, $c30, $c31, $c34, $c35, $c36, $c38, $c40, $c42, $c45, $c47, $c49, $c50, $c51, $c52, $c53, $c54, $c56, $c58, c61, c62, c63, c64, c65, c66, c67, c68, c69, c71, c73;
        boolean z0, $z1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i18 = i1 - i0;

        $i21 = $i18 + 1;

        i2 = $i21 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i20 = i0 + i1;

        i5 = $i20 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        c8 = r0[i3];

        c9 = r0[i7];

        c10 = r0[i5];

        c11 = r0[i6];

        c12 = r0[i4];

        if c8 <= c9 goto label01;

        c13 = c8;

        c8 = c9;

        c9 = c13;

     label01:
        if c11 <= c12 goto label02;

        c61 = c11;

        c11 = c12;

        c12 = c61;

     label02:
        if c8 <= c10 goto label03;

        c62 = c8;

        c8 = c10;

        c10 = c62;

     label03:
        if c9 <= c10 goto label04;

        c63 = c9;

        c9 = c10;

        c10 = c63;

     label04:
        if c8 <= c11 goto label05;

        c64 = c8;

        c8 = c11;

        c11 = c64;

     label05:
        if c10 <= c11 goto label06;

        c65 = c10;

        c10 = c11;

        c11 = c65;

     label06:
        if c9 <= c12 goto label07;

        c66 = c9;

        c9 = c12;

        c12 = c66;

     label07:
        if c9 <= c10 goto label08;

        c67 = c9;

        c9 = c10;

        c10 = c67;

     label08:
        if c11 <= c12 goto label09;

        c68 = c11;

        c11 = c12;

        c12 = c68;

     label09:
        r0[i3] = c8;

        r0[i5] = c10;

        r0[i4] = c12;

        c69 = c9;

        $c23 = r0[i0];

        r0[i7] = $c23;

        c14 = c11;

        $c22 = r0[i1];

        r0[i6] = $c22;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if c69 == c14 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i17 = i16;

     label12:
        if i17 > i15 goto label19;

        c19 = r0[i17];

        if c19 >= c69 goto label14;

        if i17 == i16 goto label13;

        $c58 = r0[i16];

        r0[i17] = $c58;

        r0[i16] = c19;

     label13:
        i16 = i16 + 1;

        goto label18;

     label14:
        if c19 <= c14 goto label18;

     label15:
        $c52 = r0[i15];

        if $c52 <= c14 goto label16;

        $i59 = i15;

        i15 = i15 + -1;

        if $i59 != i17 goto label15;

        goto label28;

     label16:
        $c51 = r0[i15];

        if $c51 >= c69 goto label17;

        $c56 = r0[i16];

        r0[i17] = $c56;

        $i55 = i16;

        i16 = i16 + 1;

        $c54 = r0[i15];

        r0[$i55] = $c54;

        $i60 = i15;

        i15 = i15 + -1;

        r0[$i60] = c19;

        goto label18;

     label17:
        $c50 = r0[i15];

        r0[i17] = $c50;

        $i57 = i15;

        i15 = i15 + -1;

        r0[$i57] = c19;

     label18:
        i17 = i17 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i70 = i16;

     label21:
        if i70 > i15 goto label28;

        c71 = r0[i70];

        if c71 != c69 goto label22;

        goto label27;

     label22:
        if c71 >= c69 goto label24;

        if i70 == i16 goto label23;

        $c53 = r0[i16];

        r0[i70] = $c53;

        r0[i16] = c71;

     label23:
        i16 = i16 + 1;

        goto label27;

     label24:
        $c45 = r0[i15];

        if $c45 <= c69 goto label25;

        i15 = i15 + -1;

        goto label24;

     label25:
        $c42 = r0[i15];

        if $c42 >= c69 goto label26;

        $c49 = r0[i16];

        r0[i70] = $c49;

        $i48 = i16;

        i16 = i16 + 1;

        $c47 = r0[i15];

        r0[$i48] = $c47;

        $i46 = i15;

        i15 = i15 + -1;

        r0[$i46] = c71;

        goto label27;

     label26:
        r0[i70] = c69;

        $i43 = i15;

        i15 = i15 + -1;

        r0[$i43] = c71;

     label27:
        i70 = i70 + 1;

        goto label21;

     label28:
        $i25 = i16 - 1;

        $c24 = r0[$i25];

        r0[i0] = $c24;

        $i27 = i16 - 1;

        r0[$i27] = c69;

        $i26 = i15 + 1;

        $c29 = r0[$i26];

        r0[i1] = $c29;

        $i28 = i15 + 1;

        r0[$i28] = c14;

        $i32 = i16 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i0, $i32);

        $i33 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, $i33, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i16 >= i3 goto label40;

        if i15 <= i4 goto label40;

     label30:
        $c30 = r0[i16];

        if $c30 != c69 goto label31;

        i16 = i16 + 1;

        goto label30;

     label31:
        $c31 = r0[i15];

        if $c31 != c14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i72 = i16;

     label33:
        if i72 > i15 goto label40;

        c73 = r0[i72];

        if c73 != c14 goto label38;

     label34:
        $c34 = r0[i15];

        if $c34 != c14 goto label35;

        $i44 = i15;

        i15 = i15 + -1;

        if $i44 != i72 goto label34;

        goto label40;

     label35:
        $c35 = r0[i15];

        if $c35 != c69 goto label36;

        $c38 = r0[i16];

        r0[i72] = $c38;

        $i39 = i16;

        i16 = i16 + 1;

        r0[$i39] = c69;

        goto label37;

     label36:
        $c40 = r0[i15];

        r0[i72] = $c40;

     label37:
        $i41 = i15;

        i15 = i15 + -1;

        r0[$i41] = c14;

        goto label39;

     label38:
        if c73 != c69 goto label39;

        $c36 = r0[i16];

        r0[i72] = $c36;

        $i37 = i16;

        i16 = i16 + 1;

        r0[$i37] = c69;

     label39:
        i72 = i72 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(char[],int,int)>(r0, i16, i15);

        return;
    }

    public static void sort(byte[])
    {
        byte[] r0;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void doSort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, i4, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16, $i17, $i18, $i21, i22, i23, i24;
        byte b3, b5, $b14, $b19, $b20;
        int[] r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = i1 - i0;

        $i8 = $i7 + 1;

        if $i8 >= 32 goto label05;

        i2 = i0 + 1;

     label01:
        if i2 > i1 goto label04;

        b3 = r0[i2];

        i4 = i2 - 1;

     label02:
        if i4 < i0 goto label03;

        $b20 = r0[i4];

        if b3 >= $b20 goto label03;

        $i21 = i4 + 1;

        $b19 = r0[i4];

        r0[$i21] = $b19;

        i4 = i4 + -1;

        goto label02;

     label03:
        $i17 = i4 + 1;

        r0[$i17] = b3;

        i2 = i2 + 1;

        goto label01;

     label04:
        goto label13;

     label05:
        $i9 = i1 - i0;

        $i10 = $i9 + 1;

        if $i10 <= 128 goto label12;

        r1 = newarray (int)[256];

        i22 = i0;

     label06:
        if i22 > i1 goto label07;

        $b14 = r0[i22];

        $i16 = $b14 - -128;

        $i15 = r1[$i16];

        $i18 = $i15 + 1;

        r1[$i16] = $i18;

        i22 = i22 + 1;

        goto label06;

     label07:
        i23 = 0;

        i24 = i0;

     label08:
        $i11 = lengthof r1;

        if i23 >= $i11 goto label11;

        if i24 > i1 goto label11;

        $i12 = i23 + -128;

        b5 = (byte) $i12;

        i6 = r1[i23];

     label09:
        if i6 <= 0 goto label10;

        $i13 = i24;

        i24 = i24 + 1;

        r0[$i13] = b5;

        i6 = i6 + -1;

        goto label09;

     label10:
        i23 = i23 + 1;

        goto label08;

     label11:
        goto label13;

     label12:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(byte[],int,int)>(r0, i0, i1);

     label13:
        return;
    }

    private static void dualPivotQuicksort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i15, i16, i17, $i18, $i20, $i21, $i25, $i26, $i27, $i28, $i32, $i33, $i37, $i39, $i41, $i43, $i44, $i46, $i48, $i55, $i57, $i59, $i60, i70, i72;
        byte b8, b9, b10, b11, b12, b13, b14, b19, $b22, $b23, $b24, $b29, $b30, $b31, $b34, $b35, $b36, $b38, $b40, $b42, $b45, $b47, $b49, $b50, $b51, $b52, $b53, $b54, $b56, $b58, b61, b62, b63, b64, b65, b66, b67, b68, b69, b71, b73;
        boolean z0, $z1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i18 = i1 - i0;

        $i21 = $i18 + 1;

        i2 = $i21 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i20 = i0 + i1;

        i5 = $i20 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        b8 = r0[i3];

        b9 = r0[i7];

        b10 = r0[i5];

        b11 = r0[i6];

        b12 = r0[i4];

        if b8 <= b9 goto label01;

        b13 = b8;

        b8 = b9;

        b9 = b13;

     label01:
        if b11 <= b12 goto label02;

        b61 = b11;

        b11 = b12;

        b12 = b61;

     label02:
        if b8 <= b10 goto label03;

        b62 = b8;

        b8 = b10;

        b10 = b62;

     label03:
        if b9 <= b10 goto label04;

        b63 = b9;

        b9 = b10;

        b10 = b63;

     label04:
        if b8 <= b11 goto label05;

        b64 = b8;

        b8 = b11;

        b11 = b64;

     label05:
        if b10 <= b11 goto label06;

        b65 = b10;

        b10 = b11;

        b11 = b65;

     label06:
        if b9 <= b12 goto label07;

        b66 = b9;

        b9 = b12;

        b12 = b66;

     label07:
        if b9 <= b10 goto label08;

        b67 = b9;

        b9 = b10;

        b10 = b67;

     label08:
        if b11 <= b12 goto label09;

        b68 = b11;

        b11 = b12;

        b12 = b68;

     label09:
        r0[i3] = b8;

        r0[i5] = b10;

        r0[i4] = b12;

        b69 = b9;

        $b23 = r0[i0];

        r0[i7] = $b23;

        b14 = b11;

        $b22 = r0[i1];

        r0[i6] = $b22;

        i16 = i0 + 1;

        i15 = i1 - 1;

        if b69 == b14 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i17 = i16;

     label12:
        if i17 > i15 goto label19;

        b19 = r0[i17];

        if b19 >= b69 goto label14;

        if i17 == i16 goto label13;

        $b58 = r0[i16];

        r0[i17] = $b58;

        r0[i16] = b19;

     label13:
        i16 = i16 + 1;

        goto label18;

     label14:
        if b19 <= b14 goto label18;

     label15:
        $b52 = r0[i15];

        if $b52 <= b14 goto label16;

        $i59 = i15;

        i15 = i15 + -1;

        if $i59 != i17 goto label15;

        goto label28;

     label16:
        $b51 = r0[i15];

        if $b51 >= b69 goto label17;

        $b56 = r0[i16];

        r0[i17] = $b56;

        $i55 = i16;

        i16 = i16 + 1;

        $b54 = r0[i15];

        r0[$i55] = $b54;

        $i60 = i15;

        i15 = i15 + -1;

        r0[$i60] = b19;

        goto label18;

     label17:
        $b50 = r0[i15];

        r0[i17] = $b50;

        $i57 = i15;

        i15 = i15 + -1;

        r0[$i57] = b19;

     label18:
        i17 = i17 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i70 = i16;

     label21:
        if i70 > i15 goto label28;

        b71 = r0[i70];

        if b71 != b69 goto label22;

        goto label27;

     label22:
        if b71 >= b69 goto label24;

        if i70 == i16 goto label23;

        $b53 = r0[i16];

        r0[i70] = $b53;

        r0[i16] = b71;

     label23:
        i16 = i16 + 1;

        goto label27;

     label24:
        $b45 = r0[i15];

        if $b45 <= b69 goto label25;

        i15 = i15 + -1;

        goto label24;

     label25:
        $b42 = r0[i15];

        if $b42 >= b69 goto label26;

        $b49 = r0[i16];

        r0[i70] = $b49;

        $i48 = i16;

        i16 = i16 + 1;

        $b47 = r0[i15];

        r0[$i48] = $b47;

        $i46 = i15;

        i15 = i15 + -1;

        r0[$i46] = b71;

        goto label27;

     label26:
        r0[i70] = b69;

        $i43 = i15;

        i15 = i15 + -1;

        r0[$i43] = b71;

     label27:
        i70 = i70 + 1;

        goto label21;

     label28:
        $i25 = i16 - 1;

        $b24 = r0[$i25];

        r0[i0] = $b24;

        $i27 = i16 - 1;

        r0[$i27] = b69;

        $i26 = i15 + 1;

        $b29 = r0[$i26];

        r0[i1] = $b29;

        $i28 = i15 + 1;

        r0[$i28] = b14;

        $i32 = i16 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i0, $i32);

        $i33 = i15 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, $i33, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i16 >= i3 goto label40;

        if i15 <= i4 goto label40;

     label30:
        $b30 = r0[i16];

        if $b30 != b69 goto label31;

        i16 = i16 + 1;

        goto label30;

     label31:
        $b31 = r0[i15];

        if $b31 != b14 goto label32;

        i15 = i15 + -1;

        goto label31;

     label32:
        i72 = i16;

     label33:
        if i72 > i15 goto label40;

        b73 = r0[i72];

        if b73 != b14 goto label38;

     label34:
        $b34 = r0[i15];

        if $b34 != b14 goto label35;

        $i44 = i15;

        i15 = i15 + -1;

        if $i44 != i72 goto label34;

        goto label40;

     label35:
        $b35 = r0[i15];

        if $b35 != b69 goto label36;

        $b38 = r0[i16];

        r0[i72] = $b38;

        $i39 = i16;

        i16 = i16 + 1;

        r0[$i39] = b69;

        goto label37;

     label36:
        $b40 = r0[i15];

        r0[i72] = $b40;

     label37:
        $i41 = i15;

        i15 = i15 + -1;

        r0[$i41] = b14;

        goto label39;

     label38:
        if b73 != b69 goto label39;

        $b36 = r0[i16];

        r0[i72] = $b36;

        $i37 = i16;

        i16 = i16 + 1;

        r0[$i37] = b69;

     label39:
        i72 = i72 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(byte[],int,int)>(r0, i16, i15);

        return;
    }

    public static void sort(float[])
    {
        float[] r0;
        int $i0, $i1;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(float[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(float[], int, int)
    {
        float[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(float[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void sortNegZeroAndNaN(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i10, $i11, $i12, i13, i14, i15;
        float f0, $f1, $f2;
        byte $b7, $b8, $b9;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(-0.0F);

        i3 = 0;

        i4 = i1;

        i5 = i0;

     label1:
        if i5 > i4 goto label4;

        f0 = r0[i5];

        $b8 = f0 cmpl 0.0F;

        if $b8 != 0 goto label2;

        $i12 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        if i2 != $i12 goto label2;

        r0[i5] = 0.0F;

        i3 = i3 + 1;

        goto label3;

     label2:
        $b9 = f0 cmpl f0;

        if $b9 == 0 goto label3;

        $i10 = i5;

        i5 = i5 + -1;

        $f2 = r0[i4];

        r0[$i10] = $f2;

        $i11 = i4;

        i4 = i4 + -1;

        r0[$i11] = #NaNF;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i0, i4);

        if i3 != 0 goto label5;

        return;

     label5:
        i13 = staticinvoke <java.util.DualPivotQuicksort: int findAnyZero(float[],int,int)>(r0, i0, i4);

        i14 = i13 - 1;

     label6:
        if i14 < i0 goto label7;

        $f1 = r0[i14];

        $b7 = $f1 cmpl 0.0F;

        if $b7 != 0 goto label7;

        i13 = i14;

        i14 = i14 + -1;

        goto label6;

     label7:
        i15 = i13;

        i6 = i13 + i3;

     label8:
        if i15 >= i6 goto label9;

        r0[i15] = -0.0F;

        i15 = i15 + 1;

        goto label8;

     label9:
        return;
    }

    private static int findAnyZero(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, $i3;
        float f0;
        byte $b4, $b5;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $i3 = i0 + i1;

        i2 = $i3 >>> 1;

        f0 = r0[i2];

        $b4 = f0 cmpg 0.0F;

        if $b4 >= 0 goto label2;

        i0 = i2 + 1;

        goto label4;

     label2:
        $b5 = f0 cmpl 0.0F;

        if $b5 <= 0 goto label3;

        i1 = i2 - 1;

        goto label4;

     label3:
        return i2;

     label4:
        goto label1;
    }

    private static void doSort(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8;
        float f0, $f1, $f2;
        byte $b7;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = i1 - i0;

        $i5 = $i4 + 1;

        if $i5 >= 32 goto label5;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label4;

        f0 = r0[i2];

        i3 = i2 - 1;

     label2:
        if i3 < i0 goto label3;

        $f1 = r0[i3];

        $b7 = f0 cmpg $f1;

        if $b7 >= 0 goto label3;

        $i8 = i3 + 1;

        $f2 = r0[i3];

        r0[$i8] = $f2;

        i3 = i3 + -1;

        goto label2;

     label3:
        $i6 = i3 + 1;

        r0[$i6] = f0;

        i2 = i2 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(float[],int,int)>(r0, i0, i1);

     label6:
        return;
    }

    private static void dualPivotQuicksort(float[], int, int)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i37, $i38, $i41, $i42, $i43, $i46, $i51, $i52, $i53, $i54, i55, i56;
        float f0, f1, f2, f3, f4, f5, f6, f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, f30, f31, f32, f33, f34, f35, f36, f37, f38, f39, f40;
        boolean z0, $z1;
        byte $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b30, $b31, $b33, $b34, $b35, $b36, $b39, $b40, $b44, $b45, $b47, $b48, $b49, $b50;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i11 = i1 - i0;

        $i13 = $i11 + 1;

        i2 = $i13 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i12 = i0 + i1;

        i5 = $i12 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        f0 = r0[i3];

        f1 = r0[i7];

        f2 = r0[i5];

        f3 = r0[i6];

        f4 = r0[i4];

        $b15 = f0 cmpl f1;

        if $b15 <= 0 goto label01;

        f5 = f0;

        f0 = f1;

        f1 = f5;

     label01:
        $b14 = f3 cmpl f4;

        if $b14 <= 0 goto label02;

        f30 = f3;

        f3 = f4;

        f4 = f30;

     label02:
        $b17 = f0 cmpl f2;

        if $b17 <= 0 goto label03;

        f31 = f0;

        f0 = f2;

        f2 = f31;

     label03:
        $b16 = f1 cmpl f2;

        if $b16 <= 0 goto label04;

        f32 = f1;

        f1 = f2;

        f2 = f32;

     label04:
        $b19 = f0 cmpl f3;

        if $b19 <= 0 goto label05;

        f33 = f0;

        f0 = f3;

        f3 = f33;

     label05:
        $b18 = f2 cmpl f3;

        if $b18 <= 0 goto label06;

        f34 = f2;

        f2 = f3;

        f3 = f34;

     label06:
        $b21 = f1 cmpl f4;

        if $b21 <= 0 goto label07;

        f35 = f1;

        f1 = f4;

        f4 = f35;

     label07:
        $b20 = f1 cmpl f2;

        if $b20 <= 0 goto label08;

        f36 = f1;

        f1 = f2;

        f2 = f36;

     label08:
        $b23 = f3 cmpl f4;

        if $b23 <= 0 goto label09;

        f37 = f3;

        f3 = f4;

        f4 = f37;

     label09:
        r0[i3] = f0;

        r0[i5] = f2;

        r0[i4] = f4;

        f38 = f1;

        $f9 = r0[i0];

        r0[i7] = $f9;

        f6 = f3;

        $f8 = r0[i1];

        r0[i6] = $f8;

        i9 = i0 + 1;

        i8 = i1 - 1;

        $b22 = f38 cmpl f6;

        if $b22 == 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i10 = i9;

     label12:
        if i10 > i8 goto label19;

        f7 = r0[i10];

        $b49 = f7 cmpg f38;

        if $b49 >= 0 goto label14;

        if i10 == i9 goto label13;

        $f27 = r0[i9];

        r0[i10] = $f27;

        r0[i9] = f7;

     label13:
        i9 = i9 + 1;

        goto label18;

     label14:
        $b50 = f7 cmpl f6;

        if $b50 <= 0 goto label18;

     label15:
        $f26 = r0[i8];

        $b47 = $f26 cmpl f6;

        if $b47 <= 0 goto label16;

        $i51 = i8;

        i8 = i8 + -1;

        if $i51 != i10 goto label15;

        goto label28;

     label16:
        $f23 = r0[i8];

        $b48 = $f23 cmpg f38;

        if $b48 >= 0 goto label17;

        $f28 = r0[i9];

        r0[i10] = $f28;

        $i54 = i9;

        i9 = i9 + 1;

        $f29 = r0[i8];

        r0[$i54] = $f29;

        $i52 = i8;

        i8 = i8 + -1;

        r0[$i52] = f7;

        goto label18;

     label17:
        $f24 = r0[i8];

        r0[i10] = $f24;

        $i53 = i8;

        i8 = i8 + -1;

        r0[$i53] = f7;

     label18:
        i10 = i10 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i55 = i9;

     label21:
        if i55 > i8 goto label28;

        f39 = r0[i55];

        $b40 = f39 cmpl f38;

        if $b40 != 0 goto label22;

        goto label27;

     label22:
        $b39 = f39 cmpg f38;

        if $b39 >= 0 goto label24;

        if i55 == i9 goto label23;

        $f25 = r0[i9];

        r0[i55] = $f25;

        r0[i9] = f39;

     label23:
        i9 = i9 + 1;

        goto label27;

     label24:
        $f19 = r0[i8];

        $b44 = $f19 cmpl f38;

        if $b44 <= 0 goto label25;

        i8 = i8 + -1;

        goto label24;

     label25:
        $f22 = r0[i8];

        $b45 = $f22 cmpg f38;

        if $b45 >= 0 goto label26;

        $f20 = r0[i9];

        r0[i55] = $f20;

        $i42 = i9;

        i9 = i9 + 1;

        $f21 = r0[i8];

        r0[$i42] = $f21;

        $i43 = i8;

        i8 = i8 + -1;

        r0[$i43] = f39;

        goto label27;

     label26:
        r0[i55] = f38;

        $i46 = i8;

        i8 = i8 + -1;

        r0[$i46] = f39;

     label27:
        i55 = i55 + 1;

        goto label21;

     label28:
        $i26 = i9 - 1;

        $f10 = r0[$i26];

        r0[i0] = $f10;

        $i24 = i9 - 1;

        r0[$i24] = f38;

        $i25 = i8 + 1;

        $f11 = r0[$i25];

        r0[i1] = $f11;

        $i29 = i8 + 1;

        r0[$i29] = f6;

        $i27 = i9 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i0, $i27);

        $i28 = i8 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, $i28, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i9 >= i3 goto label40;

        if i8 <= i4 goto label40;

     label30:
        $f13 = r0[i9];

        $b31 = $f13 cmpl f38;

        if $b31 != 0 goto label31;

        i9 = i9 + 1;

        goto label30;

     label31:
        $f12 = r0[i8];

        $b30 = $f12 cmpl f6;

        if $b30 != 0 goto label32;

        i8 = i8 + -1;

        goto label31;

     label32:
        i56 = i9;

     label33:
        if i56 > i8 goto label40;

        f40 = r0[i56];

        $b34 = f40 cmpl f6;

        if $b34 != 0 goto label38;

     label34:
        $f16 = r0[i8];

        $b36 = $f16 cmpl f6;

        if $b36 != 0 goto label35;

        $i41 = i8;

        i8 = i8 + -1;

        if $i41 != i56 goto label34;

        goto label40;

     label35:
        $f15 = r0[i8];

        $b35 = $f15 cmpl f38;

        if $b35 != 0 goto label36;

        $f17 = r0[i9];

        r0[i56] = $f17;

        $i37 = i9;

        i9 = i9 + 1;

        r0[$i37] = f38;

        goto label37;

     label36:
        $f18 = r0[i8];

        r0[i56] = $f18;

     label37:
        $i38 = i8;

        i8 = i8 + -1;

        r0[$i38] = f6;

        goto label39;

     label38:
        $b33 = f40 cmpl f38;

        if $b33 != 0 goto label39;

        $f14 = r0[i9];

        r0[i56] = $f14;

        $i32 = i9;

        i9 = i9 + 1;

        r0[$i32] = f38;

     label39:
        i56 = i56 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(float[],int,int)>(r0, i9, i8);

        return;
    }

    public static void sort(double[])
    {
        double[] r0;
        int $i0, $i1;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(double[],int,int)>(r0, 0, $i1);

        return;
    }

    public static void sort(double[], int, int)
    {
        double[] r0;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i2, i0, i1);

        $i3 = i1 - 1;

        staticinvoke <java.util.DualPivotQuicksort: void sortNegZeroAndNaN(double[],int,int)>(r0, i0, $i3);

        return;
    }

    private static void sortNegZeroAndNaN(double[], int, int)
    {
        double[] r0;
        int i0, i1, i3, i4, i5, i6, $i10, $i12, i14, i15, i16;
        long l2, $l11;
        double d0, $d1, $d2;
        byte $b7, $b8, $b9, $b13;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(-0.0);

        i3 = 0;

        i4 = i1;

        i5 = i0;

     label1:
        if i5 > i4 goto label4;

        d0 = r0[i5];

        $b8 = d0 cmpl 0.0;

        if $b8 != 0 goto label2;

        $l11 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $b13 = l2 cmp $l11;

        if $b13 != 0 goto label2;

        r0[i5] = 0.0;

        i3 = i3 + 1;

        goto label3;

     label2:
        $b9 = d0 cmpl d0;

        if $b9 == 0 goto label3;

        $i10 = i5;

        i5 = i5 + -1;

        $d2 = r0[i4];

        r0[$i10] = $d2;

        $i12 = i4;

        i4 = i4 + -1;

        r0[$i12] = #NaN;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i0, i4);

        if i3 != 0 goto label5;

        return;

     label5:
        i14 = staticinvoke <java.util.DualPivotQuicksort: int findAnyZero(double[],int,int)>(r0, i0, i4);

        i15 = i14 - 1;

     label6:
        if i15 < i0 goto label7;

        $d1 = r0[i15];

        $b7 = $d1 cmpl 0.0;

        if $b7 != 0 goto label7;

        i14 = i15;

        i15 = i15 + -1;

        goto label6;

     label7:
        i16 = i14;

        i6 = i14 + i3;

     label8:
        if i16 >= i6 goto label9;

        r0[i16] = -0.0;

        i16 = i16 + 1;

        goto label8;

     label9:
        return;
    }

    private static int findAnyZero(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, $i3;
        double d0;
        byte $b4, $b5;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $i3 = i0 + i1;

        i2 = $i3 >>> 1;

        d0 = r0[i2];

        $b4 = d0 cmpg 0.0;

        if $b4 >= 0 goto label2;

        i0 = i2 + 1;

        goto label4;

     label2:
        $b5 = d0 cmpl 0.0;

        if $b5 <= 0 goto label3;

        i1 = i2 - 1;

        goto label4;

     label3:
        return i2;

     label4:
        goto label1;
    }

    private static void doSort(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8;
        double d0, $d1, $d2;
        byte $b7;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i4 = i1 - i0;

        $i5 = $i4 + 1;

        if $i5 >= 32 goto label5;

        i2 = i0 + 1;

     label1:
        if i2 > i1 goto label4;

        d0 = r0[i2];

        i3 = i2 - 1;

     label2:
        if i3 < i0 goto label3;

        $d1 = r0[i3];

        $b7 = d0 cmpg $d1;

        if $b7 >= 0 goto label3;

        $i8 = i3 + 1;

        $d2 = r0[i3];

        r0[$i8] = $d2;

        i3 = i3 + -1;

        goto label2;

     label3:
        $i6 = i3 + 1;

        r0[$i6] = d0;

        i2 = i2 + 1;

        goto label1;

     label4:
        goto label6;

     label5:
        staticinvoke <java.util.DualPivotQuicksort: void dualPivotQuicksort(double[],int,int)>(r0, i0, i1);

     label6:
        return;
    }

    private static void dualPivotQuicksort(double[], int, int)
    {
        double[] r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i24, $i25, $i26, $i27, $i28, $i29, $i32, $i37, $i40, $i41, $i42, $i43, $i46, $i51, $i52, $i53, $i54, i55, i56;
        double d0, d1, d2, d3, d4, d5, d6, d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, $d27, $d28, $d29, d30, d31, d32, d33, d34, d35, d36, d37, d38, d39, d40;
        boolean z0, $z1;
        byte $b14, $b15, $b16, $b17, $b18, $b19, $b20, $b21, $b22, $b23, $b30, $b31, $b33, $b34, $b35, $b36, $b38, $b39, $b44, $b45, $b47, $b48, $b49, $b50;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i11 = i1 - i0;

        $i13 = $i11 + 1;

        i2 = $i13 / 6;

        i3 = i0 + i2;

        i4 = i1 - i2;

        $i12 = i0 + i1;

        i5 = $i12 >>> 1;

        i6 = i5 + i2;

        i7 = i5 - i2;

        d0 = r0[i3];

        d1 = r0[i7];

        d2 = r0[i5];

        d3 = r0[i6];

        d4 = r0[i4];

        $b16 = d0 cmpl d1;

        if $b16 <= 0 goto label01;

        d5 = d0;

        d0 = d1;

        d1 = d5;

     label01:
        $b17 = d3 cmpl d4;

        if $b17 <= 0 goto label02;

        d30 = d3;

        d3 = d4;

        d4 = d30;

     label02:
        $b14 = d0 cmpl d2;

        if $b14 <= 0 goto label03;

        d31 = d0;

        d0 = d2;

        d2 = d31;

     label03:
        $b15 = d1 cmpl d2;

        if $b15 <= 0 goto label04;

        d32 = d1;

        d1 = d2;

        d2 = d32;

     label04:
        $b20 = d0 cmpl d3;

        if $b20 <= 0 goto label05;

        d33 = d0;

        d0 = d3;

        d3 = d33;

     label05:
        $b21 = d2 cmpl d3;

        if $b21 <= 0 goto label06;

        d34 = d2;

        d2 = d3;

        d3 = d34;

     label06:
        $b18 = d1 cmpl d4;

        if $b18 <= 0 goto label07;

        d35 = d1;

        d1 = d4;

        d4 = d35;

     label07:
        $b19 = d1 cmpl d2;

        if $b19 <= 0 goto label08;

        d36 = d1;

        d1 = d2;

        d2 = d36;

     label08:
        $b23 = d3 cmpl d4;

        if $b23 <= 0 goto label09;

        d37 = d3;

        d3 = d4;

        d4 = d37;

     label09:
        r0[i3] = d0;

        r0[i5] = d2;

        r0[i4] = d4;

        d38 = d1;

        $d9 = r0[i0];

        r0[i7] = $d9;

        d6 = d3;

        $d8 = r0[i1];

        r0[i6] = $d8;

        i8 = i0 + 1;

        i9 = i1 - 1;

        $b22 = d38 cmpl d6;

        if $b22 == 0 goto label10;

        $z1 = 1;

        goto label11;

     label10:
        $z1 = 0;

     label11:
        z0 = $z1;

        if z0 == 0 goto label20;

        i10 = i8;

     label12:
        if i10 > i9 goto label19;

        d7 = r0[i10];

        $b49 = d7 cmpg d38;

        if $b49 >= 0 goto label14;

        if i10 == i8 goto label13;

        $d27 = r0[i8];

        r0[i10] = $d27;

        r0[i8] = d7;

     label13:
        i8 = i8 + 1;

        goto label18;

     label14:
        $b50 = d7 cmpl d6;

        if $b50 <= 0 goto label18;

     label15:
        $d26 = r0[i9];

        $b47 = $d26 cmpl d6;

        if $b47 <= 0 goto label16;

        $i51 = i9;

        i9 = i9 + -1;

        if $i51 != i10 goto label15;

        goto label28;

     label16:
        $d23 = r0[i9];

        $b48 = $d23 cmpg d38;

        if $b48 >= 0 goto label17;

        $d28 = r0[i8];

        r0[i10] = $d28;

        $i54 = i8;

        i8 = i8 + 1;

        $d29 = r0[i9];

        r0[$i54] = $d29;

        $i52 = i9;

        i9 = i9 + -1;

        r0[$i52] = d7;

        goto label18;

     label17:
        $d24 = r0[i9];

        r0[i10] = $d24;

        $i53 = i9;

        i9 = i9 + -1;

        r0[$i53] = d7;

     label18:
        i10 = i10 + 1;

        goto label12;

     label19:
        goto label28;

     label20:
        i55 = i8;

     label21:
        if i55 > i9 goto label28;

        d39 = r0[i55];

        $b38 = d39 cmpl d38;

        if $b38 != 0 goto label22;

        goto label27;

     label22:
        $b39 = d39 cmpg d38;

        if $b39 >= 0 goto label24;

        if i55 == i8 goto label23;

        $d25 = r0[i8];

        r0[i55] = $d25;

        r0[i8] = d39;

     label23:
        i8 = i8 + 1;

        goto label27;

     label24:
        $d17 = r0[i9];

        $b44 = $d17 cmpl d38;

        if $b44 <= 0 goto label25;

        i9 = i9 + -1;

        goto label24;

     label25:
        $d22 = r0[i9];

        $b45 = $d22 cmpg d38;

        if $b45 >= 0 goto label26;

        $d20 = r0[i8];

        r0[i55] = $d20;

        $i42 = i8;

        i8 = i8 + 1;

        $d21 = r0[i9];

        r0[$i42] = $d21;

        $i43 = i9;

        i9 = i9 + -1;

        r0[$i43] = d39;

        goto label27;

     label26:
        r0[i55] = d38;

        $i46 = i9;

        i9 = i9 + -1;

        r0[$i46] = d39;

     label27:
        i55 = i55 + 1;

        goto label21;

     label28:
        $i26 = i8 - 1;

        $d10 = r0[$i26];

        r0[i0] = $d10;

        $i24 = i8 - 1;

        r0[$i24] = d38;

        $i25 = i9 + 1;

        $d11 = r0[$i25];

        r0[i1] = $d11;

        $i29 = i9 + 1;

        r0[$i29] = d6;

        $i28 = i8 - 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i0, $i28);

        $i27 = i9 + 2;

        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, $i27, i1);

        if z0 != 0 goto label29;

        return;

     label29:
        if i8 >= i3 goto label40;

        if i9 <= i4 goto label40;

     label30:
        $d13 = r0[i8];

        $b31 = $d13 cmpl d38;

        if $b31 != 0 goto label31;

        i8 = i8 + 1;

        goto label30;

     label31:
        $d12 = r0[i9];

        $b30 = $d12 cmpl d6;

        if $b30 != 0 goto label32;

        i9 = i9 + -1;

        goto label31;

     label32:
        i56 = i8;

     label33:
        if i56 > i9 goto label40;

        d40 = r0[i56];

        $b34 = d40 cmpl d6;

        if $b34 != 0 goto label38;

     label34:
        $d16 = r0[i9];

        $b36 = $d16 cmpl d6;

        if $b36 != 0 goto label35;

        $i37 = i9;

        i9 = i9 + -1;

        if $i37 != i56 goto label34;

        goto label40;

     label35:
        $d15 = r0[i9];

        $b35 = $d15 cmpl d38;

        if $b35 != 0 goto label36;

        $d19 = r0[i8];

        r0[i56] = $d19;

        $i41 = i8;

        i8 = i8 + 1;

        r0[$i41] = d38;

        goto label37;

     label36:
        $d18 = r0[i9];

        r0[i56] = $d18;

     label37:
        $i40 = i9;

        i9 = i9 + -1;

        r0[$i40] = d6;

        goto label39;

     label38:
        $b33 = d40 cmpl d38;

        if $b33 != 0 goto label39;

        $d14 = r0[i8];

        r0[i56] = $d14;

        $i32 = i8;

        i8 = i8 + 1;

        r0[$i32] = d38;

     label39:
        i56 = i56 + 1;

        goto label33;

     label40:
        staticinvoke <java.util.DualPivotQuicksort: void doSort(double[],int,int)>(r0, i8, i9);

        return;
    }

    public static void <clinit>()
    {
        <java.util.DualPivotQuicksort: int NUM_BYTE_VALUES> = 256;

        <java.util.DualPivotQuicksort: int NUM_CHAR_VALUES> = 65536;

        <java.util.DualPivotQuicksort: int NUM_SHORT_VALUES> = 65536;

        <java.util.DualPivotQuicksort: int COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR> = 32768;

        <java.util.DualPivotQuicksort: int COUNTING_SORT_THRESHOLD_FOR_BYTE> = 128;

        <java.util.DualPivotQuicksort: int INSERTION_SORT_THRESHOLD> = 32;

        return;
    }
}
