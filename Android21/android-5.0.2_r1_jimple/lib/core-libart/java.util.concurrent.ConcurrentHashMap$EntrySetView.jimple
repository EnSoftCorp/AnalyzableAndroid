final class java.util.concurrent.ConcurrentHashMap$EntrySetView extends java.util.concurrent.ConcurrentHashMap$CollectionView implements java.util.Set, java.io.Serializable
{
    private static final long serialVersionUID;

    void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.util.concurrent.ConcurrentHashMap r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: void <init>(java.util.concurrent.ConcurrentHashMap)>(r1);

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.lang.Object r1, r2, r3, r4, $r7, $r9, $r10;
        java.util.Map$Entry r5, $r6;
        boolean $z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label2;

        $r6 = (java.util.Map$Entry) r1;

        r5 = $r6;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = $r7;

        if $r7 == null goto label2;

        $r8 = r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        r4 = $r9;

        if $r9 == null goto label2;

        $r10 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = $r10;

        if $r10 == null goto label2;

        if r3 == r4 goto label1;

        $z2 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.lang.Object r1, r2, r3, $r6, $r7;
        java.util.Map$Entry r4, $r5;
        boolean $z0, $z1, $z2;
        java.util.concurrent.ConcurrentHashMap $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        $r5 = (java.util.Map$Entry) r1;

        r4 = $r5;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = $r6;

        if $r6 == null goto label1;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = $r7;

        if $r7 == null goto label1;

        $r8 = r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.concurrent.ConcurrentHashMap map>;

        $z1 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.util.concurrent.ConcurrentHashMap r1;
        java.util.concurrent.ConcurrentHashMap$Node[] r2, $r3;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$EntryIterator $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r2 = $r3;

        if $r3 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r2;

     label2:
        i0 = $i1;

        $r4 = new java.util.concurrent.ConcurrentHashMap$EntryIterator;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap$EntryIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r2, i0, 0, i0, r1);

        return $r4;
    }

    public boolean add(java.util.Map$Entry)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.util.Map$Entry r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.lang.Object $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.util.Map$Entry;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>($r3, $r4, 0);

        if $r5 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r4;

        $z2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>(r3);

        if $z2 == 0 goto label2;

        z0 = 1;

     label2:
        goto label1;

     label3:
        return z0;
    }

    public final int hashCode()
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r5;
        java.util.concurrent.ConcurrentHashMap$Traverser r2, $r6;
        java.util.concurrent.ConcurrentHashMap$Node r3, $r7;
        java.util.concurrent.ConcurrentHashMap $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        i0 = 0;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r5 = $r4.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r5;

        if $r5 == null goto label2;

        $r6 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        $i2 = lengthof r1;

        $i1 = lengthof r1;

        specialinvoke $r6.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r1, $i2, 0, $i1);

        r2 = $r6;

     label1:
        $r7 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r3 = $r7;

        if $r7 == null goto label2;

        $i3 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Node: int hashCode()>();

        i0 = i0 + $i3;

        goto label1;

     label2:
        return i0;
    }

    public final boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.lang.Object r1;
        java.util.Set r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Set;

        if $z0 == 0 goto label2;

        $r3 = (java.util.Set) r1;

        r2 = $r3;

        if $r3 == r0 goto label1;

        $z2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean containsAll(java.util.Collection)>(r2);

        if $z2 == 0 goto label2;

        $z3 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$EntrySetView r0;
        java.lang.Object r1;
        java.util.Map$Entry $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$EntrySetView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Map$Entry) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$EntrySetView: boolean add(java.util.Map$Entry)>($r2);

        return $z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ConcurrentHashMap$EntrySetView: long serialVersionUID> = 2249069246763182397L;

        return;
    }
}
