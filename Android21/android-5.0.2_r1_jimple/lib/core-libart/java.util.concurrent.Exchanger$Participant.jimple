final class java.util.concurrent.Exchanger$Participant extends java.lang.ThreadLocal
{

    void <init>()
    {
        java.util.concurrent.Exchanger$Participant r0;

        r0 := @this: java.util.concurrent.Exchanger$Participant;

        specialinvoke r0.<java.lang.ThreadLocal: void <init>()>();

        return;
    }

    public java.util.concurrent.Exchanger$Node initialValue()
    {
        java.util.concurrent.Exchanger$Participant r0;
        java.util.concurrent.Exchanger$Node $r1;

        r0 := @this: java.util.concurrent.Exchanger$Participant;

        $r1 = new java.util.concurrent.Exchanger$Node;

        specialinvoke $r1.<java.util.concurrent.Exchanger$Node: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object initialValue()
    {
        java.util.concurrent.Exchanger$Participant r0;
        java.util.concurrent.Exchanger$Node $r1;

        r0 := @this: java.util.concurrent.Exchanger$Participant;

        $r1 = virtualinvoke r0.<java.util.concurrent.Exchanger$Participant: java.util.concurrent.Exchanger$Node initialValue()>();

        return $r1;
    }
}
