public abstract class org.apache.harmony.security.asn1.ASN1Choice extends org.apache.harmony.security.asn1.ASN1Type
{
    public final org.apache.harmony.security.asn1.ASN1Type[] type;
    private final int[][] identifiers;

    public void <init>(org.apache.harmony.security.asn1.ASN1Type[])
    {
        org.apache.harmony.security.asn1.ASN1Choice r0, $r18;
        org.apache.harmony.security.asn1.ASN1Type[] r1;
        java.util.TreeMap r2, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.harmony.security.asn1.ASN1Type r3;
        int[][] r4, $r7, $r10, $r14;
        java.math.BigInteger r5, $r15;
        java.util.Set $r8;
        java.lang.Object $r9, $r11, $r16;
        int[] $r12, $r13, $r17, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r19, $r29;
        java.lang.StringBuilder $r20, $r23, $r24, $r26, $r27, $r31;
        java.lang.String $r22, $r28, $r30, $r32;
        java.lang.Class $r25, $r33;
        java.util.Iterator r34;
        java.util.Map$Entry r35;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Type[];

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Type: void <init>(int)>(0);

        $i2 = lengthof r1;

        if $i2 != 0 goto label01;

        $r29 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have at least one alternative: ");

        $r33 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r29;

     label01:
        $r6 = new java.util.TreeMap;

        specialinvoke $r6.<java.util.TreeMap: void <init>()>();

        r2 = $r6;

        i0 = 0;

     label02:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label09;

        r3 = r1[i0];

        $z0 = r3 instanceof org.apache.harmony.security.asn1.ASN1Any;

        if $z0 == 0 goto label03;

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have alternatives with distinct tags: ");

        $r25 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r19;

     label03:
        $z1 = r3 instanceof org.apache.harmony.security.asn1.ASN1Choice;

        if $z1 == 0 goto label06;

        $r18 = (org.apache.harmony.security.asn1.ASN1Choice) r3;

        r4 = $r18.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        i1 = 0;

     label04:
        $r17 = r4[0];

        $i9 = lengthof $r17;

        if i1 >= $i9 goto label05;

        $r21 = r4[0];

        $i11 = $r21[i1];

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i11, i0);

        i1 = i1 + 1;

        goto label04;

     label05:
        goto label08;

     label06:
        $i6 = r3.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $z2 = virtualinvoke r3.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i6);

        if $z2 == 0 goto label07;

        $i10 = r3.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i10, i0);

     label07:
        $i7 = r3.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $z3 = virtualinvoke r3.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i7);

        if $z3 == 0 goto label08;

        $i8 = r3.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>(r2, $i8, i0);

     label08:
        i0 = i0 + 1;

        goto label02;

     label09:
        i12 = virtualinvoke r2.<java.util.TreeMap: int size()>();

        $r7 = newmultiarray (int)[2][i12];

        r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers> = $r7;

        $r8 = virtualinvoke r2.<java.util.TreeMap: java.util.Set entrySet()>();

        r34 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        i13 = 0;

     label10:
        if i13 >= i12 goto label11;

        $r9 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.math.BigInteger) $r11;

        $r10 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r12 = $r10[0];

        $i4 = virtualinvoke r5.<java.math.BigInteger: int intValue()>();

        $r12[i13] = $i4;

        $r14 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r13 = $r14[1];

        $r16 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.math.BigInteger) $r16;

        $i5 = virtualinvoke $r15.<java.math.BigInteger: int intValue()>();

        $r13[i13] = $i5;

        i13 = i13 + 1;

        goto label10;

     label11:
        r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type> = r1;

        return;
    }

    private void addIdentifier(java.util.TreeMap, int, int)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        java.util.TreeMap r1;
        int i0, i1;
        long $l2, $l3;
        java.math.BigInteger $r2, $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        java.lang.Class $r8;
        java.lang.String $r9, $r11;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: java.util.TreeMap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $l2 = (long) i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l3 = (long) i1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l3);

        $r4 = virtualinvoke r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 choice type MUST have alternatives with distinct tags: ");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label1:
        return;
    }

    public final boolean checkTag(int)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        int i0, $i1;
        int[][] $r1;
        int[] $r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r2 = $r1[0];

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, i0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerInputStream r1;
        int i0, $i1, i2;
        int[][] $r2, $r4;
        int[] $r3, $r5;
        org.apache.harmony.security.asn1.ASN1Type[] $r6;
        org.apache.harmony.security.asn1.ASN1Type $r7;
        java.lang.Object $r8, $r9;
        boolean $z0;
        org.apache.harmony.security.asn1.ASN1Exception $r10;
        java.lang.StringBuilder $r11, $r13, $r14;
        java.lang.Class $r12;
        java.lang.String $r15, $r16;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $r2 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r3 = $r2[0];

        $i1 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r3, $i1);

        if i0 >= 0 goto label1;

        $r10 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to decode ASN.1 choice type.  No alternatives were found for ");

        $r12 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r4 = r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r5 = $r4[1];

        i2 = $r5[i0];

        $r6 = r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type>;

        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r8;

        r1.<org.apache.harmony.security.asn1.BerInputStream: int choiceIndex> = i2;

        $z0 = r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r9 = virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        return $r9;
    }

    public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Choice: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>(r1);

        return;
    }

    public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice)>(r0);

        return;
    }

    public abstract int getIndex(java.lang.Object);

    public abstract java.lang.Object getObjectToEncode(java.lang.Object);

    public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void getChoiceLength(org.apache.harmony.security.asn1.ASN1Choice)>(r0);

        return;
    }
}
