public final class java.lang.IntegralToString extends java.lang.Object
{
    private static final java.lang.ThreadLocal BUFFER;
    private static final java.lang.String[] SMALL_NONNEGATIVE_VALUES;
    private static final java.lang.String[] SMALL_NEGATIVE_VALUES;
    private static final char[] TENS;
    private static final char[] ONES;
    private static final char[] MOD_10_TABLE;
    private static final char[] DIGITS;
    private static final char[] UPPER_CASE_DIGITS;

    private void <init>()
    {
        java.lang.IntegralToString r0;

        r0 := @this: java.lang.IntegralToString;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String intToString(int, int)
    {
        int i0, i1, i3, i4, $i5, $i6, $i8;
        boolean z0;
        byte b2, $b9;
        char[] r0, $r1;
        char $c7;
        java.lang.String $r2, $r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 2 goto label1;

        if i1 <= 36 goto label2;

     label1:
        i1 = 10;

     label2:
        if i1 != 10 goto label3;

        $r3 = staticinvoke <java.lang.IntegralToString: java.lang.String intToString(int)>(i0);

        return $r3;

     label3:
        z0 = 0;

        if i0 >= 0 goto label4;

        z0 = 1;

        goto label5;

     label4:
        i0 = neg i0;

     label5:
        if i1 >= 8 goto label6;

        $b9 = 33;

        goto label7;

     label6:
        $b9 = 12;

     label7:
        b2 = $b9;

        r0 = newarray (char)[b2];

        i3 = b2;

     label8:
        i4 = i0 / i1;

        i3 = i3 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i5 = i1 * i4;

        $i6 = $i5 - i0;

        $c7 = $r1[$i6];

        r0[i3] = $c7;

        i0 = i4;

        if i0 != 0 goto label8;

        if z0 == 0 goto label9;

        i3 = i3 + -1;

        r0[i3] = 45;

     label9:
        $r2 = new java.lang.String;

        $i8 = b2 - i3;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i3, $i8, r0);

        return $r2;
    }

    public static java.lang.String intToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String convertInt(java.lang.AbstractStringBuilder,int)>(null, i0);

        return $r0;
    }

    public static void appendInt(java.lang.AbstractStringBuilder, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0;

        r0 := @parameter0: java.lang.AbstractStringBuilder;

        i0 := @parameter1: int;

        staticinvoke <java.lang.IntegralToString: java.lang.String convertInt(java.lang.AbstractStringBuilder,int)>(r0, i0);

        return;
    }

    private static java.lang.String convertInt(java.lang.AbstractStringBuilder, int)
    {
        java.lang.AbstractStringBuilder r0;
        int i0, i2, i3, i4, $i5, $i6, $i7, $i8, $i12, i22, i23, i24;
        boolean z0;
        java.lang.String r1, $r3, $r14, $r22;
        byte b1;
        char[] r2, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r15, $r18, $r19, $r20, $r21, $r23, $r25;
        char $c9, $c14, $c15, $c16, $c17, $c18, $c19, $c20, $c21;
        long $l10, $l11, $l13;
        java.lang.Object $r7;
        java.lang.ThreadLocal $r8;
        java.lang.String[] $r9, $r16, $r17, $r24;

        r0 := @parameter0: java.lang.AbstractStringBuilder;

        i0 := @parameter1: int;

        z0 = 0;

        r1 = null;

        if i0 >= 0 goto label04;

        z0 = 1;

        i0 = neg i0;

        if i0 >= 100 goto label07;

        if i0 >= 0 goto label01;

        r1 = "-2147483648";

        goto label07;

     label01:
        $r17 = <java.lang.IntegralToString: java.lang.String[] SMALL_NEGATIVE_VALUES>;

        r1 = $r17[i0];

        if r1 != null goto label07;

        $r24 = <java.lang.IntegralToString: java.lang.String[] SMALL_NEGATIVE_VALUES>;

        if i0 >= 10 goto label02;

        $r23 = newarray (char)[2];

        $r23[0] = 45;

        $r25 = <java.lang.IntegralToString: char[] ONES>;

        $c21 = $r25[i0];

        $r23[1] = $c21;

        $r22 = staticinvoke <java.lang.IntegralToString: java.lang.String stringOf(char[])>($r23);

        goto label03;

     label02:
        $r20 = newarray (char)[3];

        $r20[0] = 45;

        $r21 = <java.lang.IntegralToString: char[] TENS>;

        $c19 = $r21[i0];

        $r20[1] = $c19;

        $r19 = <java.lang.IntegralToString: char[] ONES>;

        $c20 = $r19[i0];

        $r20[2] = $c20;

        $r22 = staticinvoke <java.lang.IntegralToString: java.lang.String stringOf(char[])>($r20);

     label03:
        r1 = $r22;

        $r24[i0] = $r22;

        goto label07;

     label04:
        if i0 >= 100 goto label07;

        $r9 = <java.lang.IntegralToString: java.lang.String[] SMALL_NONNEGATIVE_VALUES>;

        r1 = $r9[i0];

        if r1 != null goto label07;

        $r16 = <java.lang.IntegralToString: java.lang.String[] SMALL_NONNEGATIVE_VALUES>;

        if i0 >= 10 goto label05;

        $r15 = newarray (char)[1];

        $r18 = <java.lang.IntegralToString: char[] ONES>;

        $c18 = $r18[i0];

        $r15[0] = $c18;

        $r14 = staticinvoke <java.lang.IntegralToString: java.lang.String stringOf(char[])>($r15);

        goto label06;

     label05:
        $r12 = newarray (char)[2];

        $r11 = <java.lang.IntegralToString: char[] TENS>;

        $c16 = $r11[i0];

        $r12[0] = $c16;

        $r13 = <java.lang.IntegralToString: char[] ONES>;

        $c17 = $r13[i0];

        $r12[1] = $c17;

        $r14 = staticinvoke <java.lang.IntegralToString: java.lang.String stringOf(char[])>($r12);

     label06:
        r1 = $r14;

        $r16[i0] = $r14;

     label07:
        if r1 == null goto label09;

        if r0 == null goto label08;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void append0(java.lang.String)>(r1);

        return null;

     label08:
        return r1;

     label09:
        b1 = 11;

        if r0 == null goto label10;

        $r8 = <java.lang.IntegralToString: java.lang.ThreadLocal BUFFER>;

        $r7 = virtualinvoke $r8.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r10 = (char[]) $r7;

        goto label11;

     label10:
        $r10 = newarray (char)[b1];

     label11:
        r2 = $r10;

        i2 = b1;

     label12:
        if i0 < 65536 goto label13;

        $l11 = (long) i0;

        $l10 = 1374389535L * $l11;

        $l13 = $l10 >>> 37;

        i3 = (int) $l13;

        $i12 = 100 * i3;

        i4 = i0 - $i12;

        i22 = i2 + -1;

        $r5 = <java.lang.IntegralToString: char[] ONES>;

        $c14 = $r5[i4];

        r2[i22] = $c14;

        i2 = i22 + -1;

        $r6 = <java.lang.IntegralToString: char[] TENS>;

        $c15 = $r6[i4];

        r2[i2] = $c15;

        i0 = i3;

        goto label12;

     label13:
        if i0 == 0 goto label14;

        $i7 = 52429 * i0;

        i23 = $i7 >>> 19;

        $i8 = 10 * i23;

        i24 = i0 - $i8;

        i2 = i2 + -1;

        $r4 = <java.lang.IntegralToString: char[] DIGITS>;

        $c9 = $r4[i24];

        r2[i2] = $c9;

        i0 = i23;

        goto label13;

     label14:
        if z0 == 0 goto label15;

        i2 = i2 + -1;

        r2[i2] = 45;

     label15:
        if r0 == null goto label16;

        $i6 = b1 - i2;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void append0(char[],int,int)>(r2, i2, $i6);

        return null;

     label16:
        $r3 = new java.lang.String;

        $i5 = b1 - i2;

        specialinvoke $r3.<java.lang.String: void <init>(int,int,char[])>(i2, $i5, r2);

        return $r3;
    }

    public static java.lang.String longToString(long, int)
    {
        long l0, l5, $l6, $l9, $l10, $l11, $l13;
        int i1, i2, i4, $i12, $i17;
        boolean z0;
        byte b3, $b7, $b8, $b15, $b16;
        char[] r0, $r1;
        char $c14;
        java.lang.String $r2, $r3, $r4;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 = (int) l0;

        $l6 = (long) i2;

        $b7 = $l6 cmp l0;

        if $b7 != 0 goto label01;

        $r3 = staticinvoke <java.lang.IntegralToString: java.lang.String intToString(int,int)>(i2, i1);

        return $r3;

     label01:
        if i1 < 2 goto label02;

        if i1 <= 36 goto label03;

     label02:
        i1 = 10;

     label03:
        if i1 != 10 goto label04;

        $r4 = staticinvoke <java.lang.IntegralToString: java.lang.String longToString(long)>(l0);

        return $r4;

     label04:
        z0 = 0;

        $b8 = l0 cmp 0L;

        if $b8 >= 0 goto label05;

        z0 = 1;

        goto label06;

     label05:
        l0 = neg l0;

     label06:
        if i1 >= 8 goto label07;

        $b16 = 65;

        goto label08;

     label07:
        $b16 = 23;

     label08:
        b3 = $b16;

        r0 = newarray (char)[b3];

        i4 = b3;

     label09:
        $l9 = (long) i1;

        l5 = l0 / $l9;

        i4 = i4 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $l10 = (long) i1;

        $l11 = $l10 * l5;

        $l13 = $l11 - l0;

        $i12 = (int) $l13;

        $c14 = $r1[$i12];

        r0[i4] = $c14;

        l0 = l5;

        $b15 = l0 cmp 0L;

        if $b15 != 0 goto label09;

        if z0 == 0 goto label10;

        i4 = i4 + -1;

        r0[i4] = 45;

     label10:
        $r2 = new java.lang.String;

        $i17 = b3 - i4;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i4, $i17, r0);

        return $r2;
    }

    public static java.lang.String longToString(long)
    {
        long l0;
        java.lang.String $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String convertLong(java.lang.AbstractStringBuilder,long)>(null, l0);

        return $r0;
    }

    public static void appendLong(java.lang.AbstractStringBuilder, long)
    {
        java.lang.AbstractStringBuilder r0;
        long l0;

        r0 := @parameter0: java.lang.AbstractStringBuilder;

        l0 := @parameter1: long;

        staticinvoke <java.lang.IntegralToString: java.lang.String convertLong(java.lang.AbstractStringBuilder,long)>(r0, l0);

        return;
    }

    private static java.lang.String convertLong(java.lang.AbstractStringBuilder, long)
    {
        java.lang.AbstractStringBuilder r0;
        long l0, $l8, $l11, $l12, $l14, $l15, $l17, $l19, $l26, $l29, $l30, l36;
        int i1, i2, i3, i4, i5, i7, $i13, $i18, $i20, $i21, $i22, $i23, $i24, $i27, $i28, $i31, $i32, $i33, i37, i38, i39;
        boolean z0, $z1;
        java.lang.String r1, $r5, $r9;
        char[] r2, $r3, $r4, $r7;
        char c6, $c25;
        byte $b9, $b10, $b16, $b34, b35;
        java.lang.Object $r6;
        java.lang.ThreadLocal $r8;

        r0 := @parameter0: java.lang.AbstractStringBuilder;

        l0 := @parameter1: long;

        i1 = (int) l0;

        $l8 = (long) i1;

        $b9 = $l8 cmp l0;

        if $b9 != 0 goto label01;

        $r9 = staticinvoke <java.lang.IntegralToString: java.lang.String convertInt(java.lang.AbstractStringBuilder,int)>(r0, i1);

        return $r9;

     label01:
        $b10 = l0 cmp 0L;

        if $b10 >= 0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        z0 = $z1;

        if z0 == 0 goto label05;

        l0 = neg l0;

        $b34 = l0 cmp 0L;

        if $b34 >= 0 goto label05;

        r1 = "-9223372036854775808";

        if r0 == null goto label04;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void append0(java.lang.String)>(r1);

        return null;

     label04:
        return r1;

     label05:
        b35 = 20;

        if r0 == null goto label06;

        $r8 = <java.lang.IntegralToString: java.lang.ThreadLocal BUFFER>;

        $r6 = virtualinvoke $r8.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r7 = (char[]) $r6;

        goto label07;

     label06:
        $r7 = newarray (char)[b35];

     label07:
        r2 = $r7;

        $l11 = l0 % 1000000000L;

        i2 = (int) $l11;

        i3 = staticinvoke <java.lang.IntegralToString: int intIntoCharArray(char[],int,int)>(r2, b35, i2);

     label08:
        $i13 = b35 - 9;

        if i3 == $i13 goto label09;

        i3 = i3 + -1;

        r2[i3] = 48;

        goto label08;

     label09:
        $l12 = (long) i2;

        $l15 = l0 - $l12;

        $l14 = $l15 >>> 9;

        l36 = $l14 * -8194354213138031507L;

        $l17 = l36 & -4294967296L;

        $b16 = $l17 cmp 0L;

        if $b16 != 0 goto label10;

        $i32 = (int) l36;

        i37 = staticinvoke <java.lang.IntegralToString: int intIntoCharArray(char[],int,int)>(r2, i3, $i32);

        goto label12;

     label10:
        i4 = (int) l36;

        $l19 = l36 >>> 32;

        i5 = (int) $l19;

        $r3 = <java.lang.IntegralToString: char[] MOD_10_TABLE>;

        $i21 = 429496729 * i4;

        $i18 = i4 >>> 1;

        $i23 = $i21 + $i18;

        $i20 = i4 >>> 3;

        $i22 = $i23 + $i20;

        $i24 = $i22 >>> 28;

        c6 = $r3[$i24];

        $i27 = i5 << 2;

        i38 = c6 - $i27;

        if i38 >= 0 goto label11;

        i38 = i38 + 10;

     label11:
        i39 = i3 + -1;

        $r4 = <java.lang.IntegralToString: char[] DIGITS>;

        $c25 = $r4[i38];

        r2[i39] = $c25;

        $l26 = (long) i38;

        $l29 = l36 - $l26;

        $l30 = $l29 >>> 1;

        $i28 = (int) $l30;

        i7 = $i28 * -858993459;

        i37 = staticinvoke <java.lang.IntegralToString: int intIntoCharArray(char[],int,int)>(r2, i39, i7);

     label12:
        if z0 == 0 goto label13;

        i37 = i37 + -1;

        r2[i37] = 45;

     label13:
        if r0 == null goto label14;

        $i31 = b35 - i37;

        virtualinvoke r0.<java.lang.AbstractStringBuilder: void append0(char[],int,int)>(r2, i37, $i31);

        return null;

     label14:
        $r5 = new java.lang.String;

        $i33 = b35 - i37;

        specialinvoke $r5.<java.lang.String: void <init>(int,int,char[])>(i37, $i33, r2);

        return $r5;
    }

    private static int intIntoCharArray(char[], int, int)
    {
        char[] r0, $r1, $r2, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i12, i15, i16, i17;
        char $c7, $c13, $c14;
        long $l9, $l10, $l11;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $i4 = i1 & -65536;

        if $i4 == 0 goto label2;

        $i8 = i1 >>> 2;

        $l9 = (long) $i8;

        $l10 = 1374389535L * $l9;

        $l11 = $l10 >>> 35;

        i2 = (int) $l11;

        $i12 = 100 * i2;

        i3 = i1 - $i12;

        i15 = i0 + -1;

        $r2 = <java.lang.IntegralToString: char[] ONES>;

        $c13 = $r2[i3];

        r0[i15] = $c13;

        i0 = i15 + -1;

        $r3 = <java.lang.IntegralToString: char[] TENS>;

        $c14 = $r3[i3];

        r0[i0] = $c14;

        i1 = i2;

        goto label1;

     label2:
        if i1 == 0 goto label3;

        $i5 = 52429 * i1;

        i16 = $i5 >>> 19;

        $i6 = 10 * i16;

        i17 = i1 - $i6;

        i0 = i0 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $c7 = $r1[i17];

        r0[i0] = $c7;

        i1 = i16;

        goto label2;

     label3:
        return i0;
    }

    public static java.lang.String intToBinaryString(int)
    {
        int i0, i2, $i3, $i5, $i6;
        byte b1;
        char[] r0, $r1;
        char $c4;
        java.lang.String $r2;

        i0 := @parameter0: int;

        b1 = 32;

        r0 = newarray (char)[b1];

        i2 = b1;

     label1:
        i2 = i2 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i3 = i0 & 1;

        $c4 = $r1[$i3];

        r0[i2] = $c4;

        $i5 = i0 >>> 1;

        i0 = $i5;

        if $i5 != 0 goto label1;

        $r2 = new java.lang.String;

        $i6 = b1 - i2;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i2, $i6, r0);

        return $r2;
    }

    public static java.lang.String longToBinaryString(long)
    {
        long l0, $l8, $l11;
        int i1, i3, $i5, $i6, $i10;
        byte b2, $b4, $b9, $b12;
        char[] r0, $r1;
        char $c7;
        java.lang.String $r2, $r3;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label1;

        $l11 = (long) i1;

        $b12 = $l11 cmp l0;

        if $b12 != 0 goto label1;

        $r3 = staticinvoke <java.lang.IntegralToString: java.lang.String intToBinaryString(int)>(i1);

        return $r3;

     label1:
        b2 = 64;

        r0 = newarray (char)[b2];

        i3 = b2;

     label2:
        i3 = i3 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i5 = (int) l0;

        $i6 = $i5 & 1;

        $c7 = $r1[$i6];

        r0[i3] = $c7;

        $l8 = l0 >>> 1;

        l0 = $l8;

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label2;

        $r2 = new java.lang.String;

        $i10 = b2 - i3;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i3, $i10, r0);

        return $r2;
    }

    public static java.lang.StringBuilder appendByteAsHex(java.lang.StringBuilder, byte, boolean)
    {
        java.lang.StringBuilder r0;
        byte b0, $b1, $b2, $b4;
        boolean z0;
        char[] r1, $r4;
        char $c3, $c5;

        r0 := @parameter0: java.lang.StringBuilder;

        b0 := @parameter1: byte;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r4 = <java.lang.IntegralToString: char[] UPPER_CASE_DIGITS>;

        goto label2;

     label1:
        $r4 = <java.lang.IntegralToString: char[] DIGITS>;

     label2:
        r1 = $r4;

        $b1 = b0 >> 4;

        $b2 = $b1 & 15;

        $c3 = r1[$b2];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $b4 = b0 & 15;

        $c5 = r1[$b4];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        return r0;
    }

    public static java.lang.String byteToHexString(byte, boolean)
    {
        byte b0, $b1, $b2, $b4;
        boolean z0;
        char[] r0, r1, $r3;
        char $c3, $c5;
        java.lang.String $r2;

        b0 := @parameter0: byte;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = <java.lang.IntegralToString: char[] UPPER_CASE_DIGITS>;

        goto label2;

     label1:
        $r3 = <java.lang.IntegralToString: char[] DIGITS>;

     label2:
        r0 = $r3;

        r1 = newarray (char)[2];

        $b1 = b0 >> 4;

        $b2 = $b1 & 15;

        $c3 = r0[$b2];

        r1[0] = $c3;

        $b4 = b0 & 15;

        $c5 = r0[$b4];

        r1[1] = $c5;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(0, 2, r1);

        return $r2;
    }

    public static java.lang.String bytesToHexString(byte[], boolean)
    {
        byte[] r0, r3;
        boolean z0;
        char[] r1, r2, $r5;
        int i0, i1, i2, $i4, $i5, i11;
        byte b3, $b6, $b7, $b9;
        java.lang.String $r4;
        char $c8, $c10;

        r0 := @parameter0: byte[];

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r5 = <java.lang.IntegralToString: char[] UPPER_CASE_DIGITS>;

        goto label2;

     label1:
        $r5 = <java.lang.IntegralToString: char[] DIGITS>;

     label2:
        r1 = $r5;

        $i4 = lengthof r0;

        $i5 = $i4 * 2;

        r2 = newarray (char)[$i5];

        i0 = 0;

        r3 = r0;

        i1 = lengthof r3;

        i2 = 0;

     label3:
        if i2 >= i1 goto label4;

        b3 = r3[i2];

        i11 = i0 + 1;

        $b6 = b3 >> 4;

        $b7 = $b6 & 15;

        $c8 = r1[$b7];

        r2[i0] = $c8;

        i0 = i11 + 1;

        $b9 = b3 & 15;

        $c10 = r1[$b9];

        r2[i11] = $c10;

        i2 = i2 + 1;

        goto label3;

     label4:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r2);

        return $r4;
    }

    public static java.lang.String intToHexString(int, boolean, int)
    {
        int i0, i1, i3, $i4, $i6, $i7, $i8;
        boolean z0;
        byte b2;
        char[] r0, r1, $r3;
        char $c5;
        java.lang.String $r2;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 := @parameter2: int;

        b2 = 8;

        r0 = newarray (char)[b2];

        i3 = b2;

        if z0 == 0 goto label1;

        $r3 = <java.lang.IntegralToString: char[] UPPER_CASE_DIGITS>;

        goto label2;

     label1:
        $r3 = <java.lang.IntegralToString: char[] DIGITS>;

     label2:
        r1 = $r3;

     label3:
        i3 = i3 + -1;

        $i4 = i0 & 15;

        $c5 = r1[$i4];

        r0[i3] = $c5;

        $i6 = i0 >>> 4;

        i0 = $i6;

        if $i6 != 0 goto label3;

        $i7 = b2 - i3;

        if $i7 < i1 goto label3;

        $r2 = new java.lang.String;

        $i8 = b2 - i3;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i3, $i8, r0);

        return $r2;
    }

    public static java.lang.String longToHexString(long)
    {
        long l0, $l8, $l11;
        int i1, i3, $i5, $i6, $i10;
        byte b2, $b4, $b9, $b12;
        char[] r0, $r1;
        char $c7;
        java.lang.String $r2, $r3;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label1;

        $l11 = (long) i1;

        $b12 = $l11 cmp l0;

        if $b12 != 0 goto label1;

        $r3 = staticinvoke <java.lang.IntegralToString: java.lang.String intToHexString(int,boolean,int)>(i1, 0, 0);

        return $r3;

     label1:
        b2 = 16;

        r0 = newarray (char)[b2];

        i3 = b2;

     label2:
        i3 = i3 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i5 = (int) l0;

        $i6 = $i5 & 15;

        $c7 = $r1[$i6];

        r0[i3] = $c7;

        $l8 = l0 >>> 4;

        l0 = $l8;

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label2;

        $r2 = new java.lang.String;

        $i10 = b2 - i3;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i3, $i10, r0);

        return $r2;
    }

    public static java.lang.String intToOctalString(int)
    {
        int i0, i2, $i3, $i5, $i6;
        byte b1;
        char[] r0, $r1;
        char $c4;
        java.lang.String $r2;

        i0 := @parameter0: int;

        b1 = 11;

        r0 = newarray (char)[b1];

        i2 = b1;

     label1:
        i2 = i2 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i3 = i0 & 7;

        $c4 = $r1[$i3];

        r0[i2] = $c4;

        $i5 = i0 >>> 3;

        i0 = $i5;

        if $i5 != 0 goto label1;

        $r2 = new java.lang.String;

        $i6 = b1 - i2;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i2, $i6, r0);

        return $r2;
    }

    public static java.lang.String longToOctalString(long)
    {
        long l0, $l8, $l11;
        int i1, i3, $i5, $i6, $i10;
        byte b2, $b4, $b9, $b12;
        char[] r0, $r1;
        char $c7;
        java.lang.String $r2, $r3;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label1;

        $l11 = (long) i1;

        $b12 = $l11 cmp l0;

        if $b12 != 0 goto label1;

        $r3 = staticinvoke <java.lang.IntegralToString: java.lang.String intToOctalString(int)>(i1);

        return $r3;

     label1:
        b2 = 22;

        r0 = newarray (char)[b2];

        i3 = b2;

     label2:
        i3 = i3 + -1;

        $r1 = <java.lang.IntegralToString: char[] DIGITS>;

        $i5 = (int) l0;

        $i6 = $i5 & 7;

        $c7 = $r1[$i6];

        r0[i3] = $c7;

        $l8 = l0 >>> 3;

        l0 = $l8;

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label2;

        $r2 = new java.lang.String;

        $i10 = b2 - i3;

        specialinvoke $r2.<java.lang.String: void <init>(int,int,char[])>(i3, $i10, r0);

        return $r2;
    }

    private static transient java.lang.String stringOf(char[])
    {
        char[] r0;
        java.lang.String $r1;
        int $i0;

        r0 := @parameter0: char[];

        $r1 = new java.lang.String;

        $i0 = lengthof r0;

        specialinvoke $r1.<java.lang.String: void <init>(int,int,char[])>(0, $i0, r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.IntegralToString$1 $r0;
        java.lang.String[] $r1, $r2;
        char[] $r3, $r4, $r5, $r6, $r7;

        $r0 = new java.lang.IntegralToString$1;

        specialinvoke $r0.<java.lang.IntegralToString$1: void <init>()>();

        <java.lang.IntegralToString: java.lang.ThreadLocal BUFFER> = $r0;

        $r1 = newarray (java.lang.String)[100];

        <java.lang.IntegralToString: java.lang.String[] SMALL_NONNEGATIVE_VALUES> = $r1;

        $r2 = newarray (java.lang.String)[100];

        <java.lang.IntegralToString: java.lang.String[] SMALL_NEGATIVE_VALUES> = $r2;

        $r3 = newarray (char)[100];

        $r3[0] = 48;

        $r3[1] = 48;

        $r3[2] = 48;

        $r3[3] = 48;

        $r3[4] = 48;

        $r3[5] = 48;

        $r3[6] = 48;

        $r3[7] = 48;

        $r3[8] = 48;

        $r3[9] = 48;

        $r3[10] = 49;

        $r3[11] = 49;

        $r3[12] = 49;

        $r3[13] = 49;

        $r3[14] = 49;

        $r3[15] = 49;

        $r3[16] = 49;

        $r3[17] = 49;

        $r3[18] = 49;

        $r3[19] = 49;

        $r3[20] = 50;

        $r3[21] = 50;

        $r3[22] = 50;

        $r3[23] = 50;

        $r3[24] = 50;

        $r3[25] = 50;

        $r3[26] = 50;

        $r3[27] = 50;

        $r3[28] = 50;

        $r3[29] = 50;

        $r3[30] = 51;

        $r3[31] = 51;

        $r3[32] = 51;

        $r3[33] = 51;

        $r3[34] = 51;

        $r3[35] = 51;

        $r3[36] = 51;

        $r3[37] = 51;

        $r3[38] = 51;

        $r3[39] = 51;

        $r3[40] = 52;

        $r3[41] = 52;

        $r3[42] = 52;

        $r3[43] = 52;

        $r3[44] = 52;

        $r3[45] = 52;

        $r3[46] = 52;

        $r3[47] = 52;

        $r3[48] = 52;

        $r3[49] = 52;

        $r3[50] = 53;

        $r3[51] = 53;

        $r3[52] = 53;

        $r3[53] = 53;

        $r3[54] = 53;

        $r3[55] = 53;

        $r3[56] = 53;

        $r3[57] = 53;

        $r3[58] = 53;

        $r3[59] = 53;

        $r3[60] = 54;

        $r3[61] = 54;

        $r3[62] = 54;

        $r3[63] = 54;

        $r3[64] = 54;

        $r3[65] = 54;

        $r3[66] = 54;

        $r3[67] = 54;

        $r3[68] = 54;

        $r3[69] = 54;

        $r3[70] = 55;

        $r3[71] = 55;

        $r3[72] = 55;

        $r3[73] = 55;

        $r3[74] = 55;

        $r3[75] = 55;

        $r3[76] = 55;

        $r3[77] = 55;

        $r3[78] = 55;

        $r3[79] = 55;

        $r3[80] = 56;

        $r3[81] = 56;

        $r3[82] = 56;

        $r3[83] = 56;

        $r3[84] = 56;

        $r3[85] = 56;

        $r3[86] = 56;

        $r3[87] = 56;

        $r3[88] = 56;

        $r3[89] = 56;

        $r3[90] = 57;

        $r3[91] = 57;

        $r3[92] = 57;

        $r3[93] = 57;

        $r3[94] = 57;

        $r3[95] = 57;

        $r3[96] = 57;

        $r3[97] = 57;

        $r3[98] = 57;

        $r3[99] = 57;

        <java.lang.IntegralToString: char[] TENS> = $r3;

        $r4 = newarray (char)[100];

        $r4[0] = 48;

        $r4[1] = 49;

        $r4[2] = 50;

        $r4[3] = 51;

        $r4[4] = 52;

        $r4[5] = 53;

        $r4[6] = 54;

        $r4[7] = 55;

        $r4[8] = 56;

        $r4[9] = 57;

        $r4[10] = 48;

        $r4[11] = 49;

        $r4[12] = 50;

        $r4[13] = 51;

        $r4[14] = 52;

        $r4[15] = 53;

        $r4[16] = 54;

        $r4[17] = 55;

        $r4[18] = 56;

        $r4[19] = 57;

        $r4[20] = 48;

        $r4[21] = 49;

        $r4[22] = 50;

        $r4[23] = 51;

        $r4[24] = 52;

        $r4[25] = 53;

        $r4[26] = 54;

        $r4[27] = 55;

        $r4[28] = 56;

        $r4[29] = 57;

        $r4[30] = 48;

        $r4[31] = 49;

        $r4[32] = 50;

        $r4[33] = 51;

        $r4[34] = 52;

        $r4[35] = 53;

        $r4[36] = 54;

        $r4[37] = 55;

        $r4[38] = 56;

        $r4[39] = 57;

        $r4[40] = 48;

        $r4[41] = 49;

        $r4[42] = 50;

        $r4[43] = 51;

        $r4[44] = 52;

        $r4[45] = 53;

        $r4[46] = 54;

        $r4[47] = 55;

        $r4[48] = 56;

        $r4[49] = 57;

        $r4[50] = 48;

        $r4[51] = 49;

        $r4[52] = 50;

        $r4[53] = 51;

        $r4[54] = 52;

        $r4[55] = 53;

        $r4[56] = 54;

        $r4[57] = 55;

        $r4[58] = 56;

        $r4[59] = 57;

        $r4[60] = 48;

        $r4[61] = 49;

        $r4[62] = 50;

        $r4[63] = 51;

        $r4[64] = 52;

        $r4[65] = 53;

        $r4[66] = 54;

        $r4[67] = 55;

        $r4[68] = 56;

        $r4[69] = 57;

        $r4[70] = 48;

        $r4[71] = 49;

        $r4[72] = 50;

        $r4[73] = 51;

        $r4[74] = 52;

        $r4[75] = 53;

        $r4[76] = 54;

        $r4[77] = 55;

        $r4[78] = 56;

        $r4[79] = 57;

        $r4[80] = 48;

        $r4[81] = 49;

        $r4[82] = 50;

        $r4[83] = 51;

        $r4[84] = 52;

        $r4[85] = 53;

        $r4[86] = 54;

        $r4[87] = 55;

        $r4[88] = 56;

        $r4[89] = 57;

        $r4[90] = 48;

        $r4[91] = 49;

        $r4[92] = 50;

        $r4[93] = 51;

        $r4[94] = 52;

        $r4[95] = 53;

        $r4[96] = 54;

        $r4[97] = 55;

        $r4[98] = 56;

        $r4[99] = 57;

        <java.lang.IntegralToString: char[] ONES> = $r4;

        $r5 = newarray (char)[16];

        $r5[0] = 0;

        $r5[1] = 1;

        $r5[2] = 2;

        $r5[3] = 2;

        $r5[4] = 3;

        $r5[5] = 3;

        $r5[6] = 4;

        $r5[7] = 5;

        $r5[8] = 5;

        $r5[9] = 6;

        $r5[10] = 7;

        $r5[11] = 7;

        $r5[12] = 8;

        $r5[13] = 8;

        $r5[14] = 9;

        $r5[15] = 0;

        <java.lang.IntegralToString: char[] MOD_10_TABLE> = $r5;

        $r6 = newarray (char)[36];

        $r6[0] = 48;

        $r6[1] = 49;

        $r6[2] = 50;

        $r6[3] = 51;

        $r6[4] = 52;

        $r6[5] = 53;

        $r6[6] = 54;

        $r6[7] = 55;

        $r6[8] = 56;

        $r6[9] = 57;

        $r6[10] = 97;

        $r6[11] = 98;

        $r6[12] = 99;

        $r6[13] = 100;

        $r6[14] = 101;

        $r6[15] = 102;

        $r6[16] = 103;

        $r6[17] = 104;

        $r6[18] = 105;

        $r6[19] = 106;

        $r6[20] = 107;

        $r6[21] = 108;

        $r6[22] = 109;

        $r6[23] = 110;

        $r6[24] = 111;

        $r6[25] = 112;

        $r6[26] = 113;

        $r6[27] = 114;

        $r6[28] = 115;

        $r6[29] = 116;

        $r6[30] = 117;

        $r6[31] = 118;

        $r6[32] = 119;

        $r6[33] = 120;

        $r6[34] = 121;

        $r6[35] = 122;

        <java.lang.IntegralToString: char[] DIGITS> = $r6;

        $r7 = newarray (char)[36];

        $r7[0] = 48;

        $r7[1] = 49;

        $r7[2] = 50;

        $r7[3] = 51;

        $r7[4] = 52;

        $r7[5] = 53;

        $r7[6] = 54;

        $r7[7] = 55;

        $r7[8] = 56;

        $r7[9] = 57;

        $r7[10] = 65;

        $r7[11] = 66;

        $r7[12] = 67;

        $r7[13] = 68;

        $r7[14] = 69;

        $r7[15] = 70;

        $r7[16] = 71;

        $r7[17] = 72;

        $r7[18] = 73;

        $r7[19] = 74;

        $r7[20] = 75;

        $r7[21] = 76;

        $r7[22] = 77;

        $r7[23] = 78;

        $r7[24] = 79;

        $r7[25] = 80;

        $r7[26] = 81;

        $r7[27] = 82;

        $r7[28] = 83;

        $r7[29] = 84;

        $r7[30] = 85;

        $r7[31] = 86;

        $r7[32] = 87;

        $r7[33] = 88;

        $r7[34] = 89;

        $r7[35] = 90;

        <java.lang.IntegralToString: char[] UPPER_CASE_DIGITS> = $r7;

        return;
    }
}
