abstract class java.util.concurrent.locks.ReentrantReadWriteLock$Sync extends java.util.concurrent.locks.AbstractQueuedSynchronizer
{
    private static final long serialVersionUID;
    static final int SHARED_SHIFT;
    static final int SHARED_UNIT;
    static final int MAX_COUNT;
    static final int EXCLUSIVE_MASK;
    private transient java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds;
    private transient java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter;
    private transient java.lang.Thread firstReader;
    private transient int firstReaderHoldCount;

    static int sharedCount(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 >>> 16;

        return $i1;
    }

    static int exclusiveCount(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 65535;

        return $i1;
    }

    void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        specialinvoke r0.<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>();

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader> = null;

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void <init>()>();

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds> = $r1;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setState(int)>($i0);

        return;
    }

    abstract boolean readerShouldBlock();

    abstract boolean writerShouldBlock();

    protected final boolean tryRelease(int)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int i0, i1, $i2, $i3;
        boolean z0, $z1, $z2;
        java.lang.IllegalMonitorStateException $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        i0 := @parameter0: int;

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isHeldExclusively()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r1.<java.lang.IllegalMonitorStateException: void <init>()>();

        throw $r1;

     label1:
        $i2 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        i1 = $i2 - i0;

        $i3 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i1);

        if $i3 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        if z0 == 0 goto label4;

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setExclusiveOwnerThread(java.lang.Thread)>(null);

     label4:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setState(int)>(i1);

        return z0;
    }

    protected final boolean tryAcquire(int)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Thread r1, $r2;
        boolean $z0, $z1;
        java.lang.Error $r3;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        i2 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i1);

        if i1 == 0 goto label4;

        if i2 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if r1 == $r2 goto label2;

     label1:
        return 0;

     label2:
        $i4 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i0);

        $i5 = i2 + $i4;

        if $i5 <= 65535 goto label3;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r3;

     label3:
        $i6 = i1 + i0;

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setState(int)>($i6);

        return 1;

     label4:
        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean writerShouldBlock()>();

        if $z0 != 0 goto label5;

        $i3 = i1 + i0;

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i1, $i3);

        if $z1 != 0 goto label6;

     label5:
        return 0;

     label6:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setExclusiveOwnerThread(java.lang.Thread)>(r1);

        return 1;
    }

    protected final boolean tryReleaseShared(int)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int i0, i1, $i2, $i3, $i6, $i8, $i9, i10, i11;
        java.lang.Thread r1, $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter r2;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r4, $r6;
        java.lang.Object $r5;
        boolean $z0, $z1;
        java.lang.IllegalMonitorStateException $r7;
        long $l4, $l5;
        byte $b7;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r3 != r1 goto label2;

        $i6 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        if $i6 != 1 goto label1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader> = null;

        goto label6;

     label1:
        $i9 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        $i8 = $i9 - 1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = $i8;

        goto label6;

     label2:
        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

        if r2 == null goto label3;

        $l5 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l4 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b7 = $l5 cmp $l4;

        if $b7 == 0 goto label4;

     label3:
        $r4 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        r2 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r5;

     label4:
        i1 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if i1 > 1 goto label5;

        $r6 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void remove()>();

        if i1 > 0 goto label5;

        $r7 = specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.IllegalMonitorStateException unmatchedUnlockException()>();

        throw $r7;

     label5:
        $i2 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        $i3 = $i2 - 1;

        r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count> = $i3;

     label6:
        i10 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        i11 = i10 - 65536;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i10, i11);

        if $z0 == 0 goto label9;

        if i11 != 0 goto label7;

        $z1 = 1;

        goto label8;

     label7:
        $z1 = 0;

     label8:
        return $z1;

     label9:
        goto label6;
    }

    private java.lang.IllegalMonitorStateException unmatchedUnlockException()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.IllegalMonitorStateException $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $r1 = new java.lang.IllegalMonitorStateException;

        specialinvoke $r1.<java.lang.IllegalMonitorStateException: void <init>(java.lang.String)>("attempt to unlock read lock, not locked by current thread");

        return $r1;
    }

    protected final int tryAcquireShared(int)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i10, $i12, $i13;
        java.lang.Thread r1, $r3, $r8;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter r2, $r5;
        boolean $z0, $z1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r4, $r7;
        java.lang.Object $r6;
        long $l8, $l9;
        byte $b11;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        i0 := @parameter0: int;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i3 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i1);

        if $i3 == 0 goto label1;

        $r8 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if $r8 == r1 goto label1;

        return -1;

     label1:
        i2 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>(i1);

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean readerShouldBlock()>();

        if $z0 != 0 goto label8;

        if i2 >= 65535 goto label8;

        $i5 = i1 + 65536;

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i1, $i5);

        if $z1 == 0 goto label8;

        if i2 != 0 goto label2;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader> = r1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = 1;

        goto label7;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r3 != r1 goto label3;

        $i12 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        $i13 = $i12 + 1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = $i13;

        goto label7;

     label3:
        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

        if r2 == null goto label4;

        $l9 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l8 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b11 = $l9 cmp $l8;

        if $b11 == 0 goto label5;

     label4:
        $r4 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r6 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        $r5 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r6;

        r2 = $r5;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter> = $r5;

        goto label6;

     label5:
        $i10 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if $i10 != 0 goto label6;

        $r7 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void set(java.lang.Object)>(r2);

     label6:
        $i7 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        $i6 = $i7 + 1;

        r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count> = $i6;

     label7:
        return 1;

     label8:
        $i4 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int fullTryAcquireShared(java.lang.Thread)>(r1);

        return $i4;
    }

    final int fullTryAcquireShared(java.lang.Thread)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.Thread r1, $r3, $r8, $r12;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9, $i11, $i12, $i13, $i14;
        boolean $z0, $z1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r4, $r6, $r10, $r11;
        java.lang.Object $r5, $r9;
        long $l7, $l8, $l15, $l16;
        byte $b10, $b17;
        java.lang.Error $r7;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        r1 := @parameter0: java.lang.Thread;

        r2 = null;

     label01:
        i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i0);

        if $i1 == 0 goto label02;

        $r12 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if $r12 == r1 goto label06;

        return -1;

     label02:
        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean readerShouldBlock()>();

        if $z0 == 0 goto label06;

        $r8 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r8 != r1 goto label03;

        goto label06;

     label03:
        if r2 != null goto label05;

        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

        if r2 == null goto label04;

        $l16 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l15 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b17 = $l16 cmp $l15;

        if $b17 == 0 goto label05;

     label04:
        $r10 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r9 = virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        r2 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r9;

        $i14 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if $i14 != 0 goto label05;

        $r11 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void remove()>();

     label05:
        $i13 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if $i13 != 0 goto label06;

        return -1;

     label06:
        $i2 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>(i0);

        if $i2 != 65535 goto label07;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r7;

     label07:
        $i3 = i0 + 65536;

        $z1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i0, $i3);

        if $z1 == 0 goto label15;

        $i4 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>(i0);

        if $i4 != 0 goto label08;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader> = r1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = 1;

        goto label14;

     label08:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r3 != r1 goto label09;

        $i11 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        $i12 = $i11 + 1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = $i12;

        goto label14;

     label09:
        if r2 != null goto label10;

        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

     label10:
        if r2 == null goto label11;

        $l8 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l7 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b10 = $l8 cmp $l7;

        if $b10 == 0 goto label12;

     label11:
        $r4 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        r2 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r5;

        goto label13;

     label12:
        $i9 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if $i9 != 0 goto label13;

        $r6 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void set(java.lang.Object)>(r2);

     label13:
        $i5 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        $i6 = $i5 + 1;

        r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count> = $i6;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter> = r2;

     label14:
        return 1;

     label15:
        goto label01;
    }

    final boolean tryWriteLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.Thread r1, $r2;
        int i0, i1, $i2;
        boolean $z0;
        java.lang.Error $r3;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        if i0 == 0 goto label3;

        i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i0);

        if i1 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if r1 == $r2 goto label2;

     label1:
        return 0;

     label2:
        if i1 != 65535 goto label3;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r3;

     label3:
        $i2 = i0 + 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i0, $i2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setExclusiveOwnerThread(java.lang.Thread)>(r1);

        return 1;
    }

    final boolean tryReadLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.Thread r1, $r3, $r8;
        int i0, i1, $i2, $i3, $i4, $i6, $i9, $i10, $i11;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter r2, $r6;
        boolean $z0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r4, $r7;
        java.lang.Object $r5;
        long $l5, $l8;
        byte $b7;
        java.lang.Error $r9;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

     label01:
        i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i2 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i0);

        if $i2 == 0 goto label02;

        $r8 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        if $r8 == r1 goto label02;

        return 0;

     label02:
        i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>(i0);

        if i1 != 65535 goto label03;

        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.String)>("Maximum lock count exceeded");

        throw $r9;

     label03:
        $i3 = i0 + 65536;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean compareAndSetState(int,int)>(i0, $i3);

        if $z0 == 0 goto label10;

        if i1 != 0 goto label04;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader> = r1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = 1;

        goto label09;

     label04:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r3 != r1 goto label05;

        $i11 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        $i10 = $i11 + 1;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount> = $i10;

        goto label09;

     label05:
        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

        if r2 == null goto label06;

        $l5 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l8 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b7 = $l5 cmp $l8;

        if $b7 == 0 goto label07;

     label06:
        $r4 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        $r6 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r5;

        r2 = $r6;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter> = $r6;

        goto label08;

     label07:
        $i9 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if $i9 != 0 goto label08;

        $r7 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void set(java.lang.Object)>(r2);

     label08:
        $i4 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        $i6 = $i4 + 1;

        r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count> = $i6;

     label09:
        return 1;

     label10:
        goto label01;
    }

    protected final boolean isHeldExclusively()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.Thread $r1, $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $r1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $r1 = new java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        specialinvoke $r1.<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>(r0);

        return $r1;
    }

    final java.lang.Thread getOwner()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int $i0, $i1;
        java.lang.Thread $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>($i0);

        if $i1 != 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getExclusiveOwnerThread()>();

     label2:
        return $r1;
    }

    final int getReadLockCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>($i0);

        return $i1;
    }

    final boolean isWriteLocked()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>($i0);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final int getWriteHoldCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isHeldExclusively()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        $i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>($i0);

        goto label2;

     label1:
        $i1 = 0;

     label2:
        return $i1;
    }

    final int getReadHoldCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.lang.Thread r1, $r3;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter r2, $r6;
        int i0, $i1, $i5, $i6;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r4, $r7;
        java.lang.Object $r5;
        long $l2, $l3;
        byte $b4;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $i1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadLockCount()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread firstReader>;

        if $r3 != r1 goto label2;

        $i6 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int firstReaderHoldCount>;

        return $i6;

     label2:
        r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter cachedHoldCounter>;

        if r2 == null goto label3;

        $l2 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: long tid>;

        $l3 = virtualinvoke r1.<java.lang.Thread: long getId()>();

        $b4 = $l2 cmp $l3;

        if $b4 != 0 goto label3;

        $i5 = r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        return $i5;

     label3:
        $r4 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.lang.Object get()>();

        $r6 = (java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter) $r5;

        i0 = $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: int count>;

        if i0 != 0 goto label4;

        $r7 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void remove()>();

     label4:
        return i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = new java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void <init>()>();

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter readHolds> = $r2;

        virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void setState(int)>(0);

        return;
    }

    final int getCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync r0;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync;

        $i0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getState()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int EXCLUSIVE_MASK> = 65535;

        <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int MAX_COUNT> = 65535;

        <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int SHARED_UNIT> = 65536;

        <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int SHARED_SHIFT> = 16;

        <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: long serialVersionUID> = 6317671515068378041L;

        return;
    }
}
