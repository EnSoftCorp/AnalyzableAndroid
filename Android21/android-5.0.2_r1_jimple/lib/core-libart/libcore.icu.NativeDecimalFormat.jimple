public final class libcore.icu.NativeDecimalFormat extends java.lang.Object implements java.lang.Cloneable
{
    private static final int UNUM_DECIMAL_SEPARATOR_SYMBOL;
    private static final int UNUM_GROUPING_SEPARATOR_SYMBOL;
    private static final int UNUM_PATTERN_SEPARATOR_SYMBOL;
    private static final int UNUM_PERCENT_SYMBOL;
    private static final int UNUM_ZERO_DIGIT_SYMBOL;
    private static final int UNUM_DIGIT_SYMBOL;
    private static final int UNUM_MINUS_SIGN_SYMBOL;
    private static final int UNUM_PLUS_SIGN_SYMBOL;
    private static final int UNUM_CURRENCY_SYMBOL;
    private static final int UNUM_INTL_CURRENCY_SYMBOL;
    private static final int UNUM_MONETARY_SEPARATOR_SYMBOL;
    private static final int UNUM_EXPONENTIAL_SYMBOL;
    private static final int UNUM_PERMILL_SYMBOL;
    private static final int UNUM_PAD_ESCAPE_SYMBOL;
    private static final int UNUM_INFINITY_SYMBOL;
    private static final int UNUM_NAN_SYMBOL;
    private static final int UNUM_SIGNIFICANT_DIGIT_SYMBOL;
    private static final int UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL;
    private static final int UNUM_FORMAT_SYMBOL_COUNT;
    private static final int UNUM_PARSE_INT_ONLY;
    private static final int UNUM_GROUPING_USED;
    private static final int UNUM_DECIMAL_ALWAYS_SHOWN;
    private static final int UNUM_MAX_INTEGER_DIGITS;
    private static final int UNUM_MIN_INTEGER_DIGITS;
    private static final int UNUM_INTEGER_DIGITS;
    private static final int UNUM_MAX_FRACTION_DIGITS;
    private static final int UNUM_MIN_FRACTION_DIGITS;
    private static final int UNUM_FRACTION_DIGITS;
    private static final int UNUM_MULTIPLIER;
    private static final int UNUM_GROUPING_SIZE;
    private static final int UNUM_ROUNDING_MODE;
    private static final int UNUM_ROUNDING_INCREMENT;
    private static final int UNUM_FORMAT_WIDTH;
    private static final int UNUM_PADDING_POSITION;
    private static final int UNUM_SECONDARY_GROUPING_SIZE;
    private static final int UNUM_SIGNIFICANT_DIGITS_USED;
    private static final int UNUM_MIN_SIGNIFICANT_DIGITS;
    private static final int UNUM_MAX_SIGNIFICANT_DIGITS;
    private static final int UNUM_LENIENT_PARSE;
    private static final int UNUM_POSITIVE_PREFIX;
    private static final int UNUM_POSITIVE_SUFFIX;
    private static final int UNUM_NEGATIVE_PREFIX;
    private static final int UNUM_NEGATIVE_SUFFIX;
    private static final int UNUM_PADDING_CHARACTER;
    private static final int UNUM_CURRENCY_CODE;
    private static final int UNUM_DEFAULT_RULESET;
    private static final int UNUM_PUBLIC_RULESETS;
    private static final java.text.Format$Field[] ICU4C_FIELD_IDS;
    private long address;
    private java.lang.String lastPattern;
    private boolean negPrefNull;
    private boolean negSuffNull;
    private boolean posPrefNull;
    private boolean posSuffNull;
    private transient boolean parseBigDecimal;

    private static int translateFieldId(java.text.FieldPosition)
    {
        java.text.FieldPosition r0;
        int i0, i1, $i2;
        java.text.Format$Field r1, $r4;
        java.text.Format$Field[] $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.text.FieldPosition;

        i0 = virtualinvoke r0.<java.text.FieldPosition: int getField()>();

        if i0 < -1 goto label1;

        if i0 <= 1 goto label2;

     label1:
        i0 = -1;

     label2:
        if i0 != -1 goto label5;

        r1 = virtualinvoke r0.<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>();

        if r1 == null goto label5;

        i1 = 0;

     label3:
        $r2 = <libcore.icu.NativeDecimalFormat: java.text.Format$Field[] ICU4C_FIELD_IDS>;

        $i2 = lengthof $r2;

        if i1 >= $i2 goto label5;

        $r3 = <libcore.icu.NativeDecimalFormat: java.text.Format$Field[] ICU4C_FIELD_IDS>;

        $r4 = $r3[i1];

        $z0 = virtualinvoke $r4.<java.text.Format$Field: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        i0 = i1;

        goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return i0;
    }

    public void <init>(java.lang.String, java.text.DecimalFormatSymbols)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r4, $r5, $r6, $r7, $r8, $r9, $r16, $r19;
        java.text.DecimalFormatSymbols r2;
        java.lang.NullPointerException r3, $r10;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        long $l8;
        java.lang.IllegalArgumentException $r11;
        java.lang.RuntimeException $r12, r20;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r18;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.DecimalFormatSymbols;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r4 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>();

        $c0 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $c1 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getDigit()>();

        $r5 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>();

        $c2 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        $r6 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $r7 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>();

        $r8 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getMinusSignString()>();

        $c3 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>();

        $r9 = virtualinvoke r2.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        $c4 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPatternSeparator()>();

        $c5 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPercent()>();

        $c7 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getPerMill()>();

        $c6 = virtualinvoke r2.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        $l8 = staticinvoke <libcore.icu.NativeDecimalFormat: long open(java.lang.String,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,char,java.lang.String,char,char,char,char)>(r1, $r4, $c0, $c1, $r5, $c2, $r6, $r7, $r8, $c3, $r9, $c4, $c5, $c7, $c6);

        r0.<libcore.icu.NativeDecimalFormat: long address> = $l8;

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        r3 = $r10;

        throw r3;

     label4:
        $r12 := @caughtexception;

        r20 = $r12;

        $r11 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syntax error: ");

        $r16 = virtualinvoke r20.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label5:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public void <init>(java.lang.String, libcore.icu.LocaleData)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7, $r8;
        libcore.icu.LocaleData r2;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6;
        long $l7;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: libcore.icu.LocaleData;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r8 = r2.<libcore.icu.LocaleData: java.lang.String currencySymbol>;

        $c6 = r2.<libcore.icu.LocaleData: char decimalSeparator>;

        $r7 = r2.<libcore.icu.LocaleData: java.lang.String exponentSeparator>;

        $c5 = r2.<libcore.icu.LocaleData: char groupingSeparator>;

        $r6 = r2.<libcore.icu.LocaleData: java.lang.String infinity>;

        $r5 = r2.<libcore.icu.LocaleData: java.lang.String internationalCurrencySymbol>;

        $r4 = r2.<libcore.icu.LocaleData: java.lang.String minusSign>;

        $c4 = r2.<libcore.icu.LocaleData: char monetarySeparator>;

        $r3 = r2.<libcore.icu.LocaleData: java.lang.String NaN>;

        $c3 = r2.<libcore.icu.LocaleData: char patternSeparator>;

        $c2 = r2.<libcore.icu.LocaleData: char percent>;

        $c1 = r2.<libcore.icu.LocaleData: char perMill>;

        $c0 = r2.<libcore.icu.LocaleData: char zeroDigit>;

        $l7 = staticinvoke <libcore.icu.NativeDecimalFormat: long open(java.lang.String,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,char,java.lang.String,char,char,char,char)>(r1, $r8, $c6, 35, $r7, $c5, $r6, $r5, $r4, $c4, $r3, $c3, $c2, $c1, $c0);

        r0.<libcore.icu.NativeDecimalFormat: long address> = $l7;

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

        return;
    }

    public synchronized void close()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void close(long)>($l2);

        r0.<libcore.icu.NativeDecimalFormat: long address> = 0L;

     label1:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.Throwable r1, $r2;

        r0 := @this: libcore.icu.NativeDecimalFormat;

     label1:
        virtualinvoke r0.<libcore.icu.NativeDecimalFormat: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object clone()
    {
        libcore.icu.NativeDecimalFormat r0, r1;
        java.lang.Object $r2;
        long $l0, $l1;
        java.lang.String $r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.CloneNotSupportedException $r4, r6;
        java.lang.AssertionError $r5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (libcore.icu.NativeDecimalFormat) $r2;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $l1 = staticinvoke <libcore.icu.NativeDecimalFormat: long cloneImpl(long)>($l0);

        r1.<libcore.icu.NativeDecimalFormat: long address> = $l1;

        $r3 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        r1.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = $r3;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        r1.<libcore.icu.NativeDecimalFormat: boolean negPrefNull> = $z0;

        $z1 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        r1.<libcore.icu.NativeDecimalFormat: boolean negSuffNull> = $z1;

        $z2 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        r1.<libcore.icu.NativeDecimalFormat: boolean posPrefNull> = $z2;

        $z3 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        r1.<libcore.icu.NativeDecimalFormat: boolean posSuffNull> = $z3;

     label2:
        return r1;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r6);

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.icu.NativeDecimalFormat r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        long $l0, $l1;
        byte $b2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof libcore.icu.NativeDecimalFormat;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (libcore.icu.NativeDecimalFormat) r1;

        $l1 = r2.<libcore.icu.NativeDecimalFormat: long address>;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label3;

        return 1;

     label3:
        $r3 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        $r4 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        $z3 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        if $z2 != $z3 goto label4;

        $i3 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        $i4 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        if $i3 != $i4 goto label4;

        $i5 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        $i6 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        if $i5 != $i6 goto label4;

        $r6 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        $r5 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z4 == 0 goto label4;

        $r7 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        $r8 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z5 == 0 goto label4;

        $r10 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        $r9 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z6 == 0 goto label4;

        $r11 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        $r12 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z7 == 0 goto label4;

        $i8 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        $i7 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        if $i8 != $i7 goto label4;

        $i10 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        $i9 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        if $i10 != $i9 goto label4;

        $i13 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        $i14 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        if $i13 != $i14 goto label4;

        $i11 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        $i12 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        if $i11 != $i12 goto label4;

        $z9 = virtualinvoke r2.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        $z10 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        if $z9 != $z10 goto label4;

        $z8 = 1;

        goto label5;

     label4:
        $z8 = 0;

     label5:
        return $z8;
    }

    public java.lang.String toString()
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r37, $r38;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r15, $r20, $r21, $r26, $r36;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[\"");

        $r6 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String toPattern()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",isDecimalSeparatorAlwaysShown=");

        $z0 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isDecimalSeparatorAlwaysShown()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",groupingSize=");

        $i0 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getGroupingSize()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",multiplier=");

        $i1 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMultiplier()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",negativePrefix=");

        $r15 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativePrefix()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",negativeSuffix=");

        $r20 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getNegativeSuffix()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",positivePrefix=");

        $r21 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositivePrefix()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",positiveSuffix=");

        $r26 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: java.lang.String getPositiveSuffix()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",maxIntegerDigits=");

        $i2 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumIntegerDigits()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",maxFractionDigits=");

        $i3 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMaximumFractionDigits()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r33 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",minIntegerDigits=");

        $i4 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumIntegerDigits()>();

        $r31 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",minFractionDigits=");

        $i5 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: int getMinimumFractionDigits()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r34 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",grouping=");

        $z1 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r36 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r36;
    }

    public void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.text.DecimalFormatSymbols r1;
        long $l0;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.text.DecimalFormatSymbols;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r2 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>();

        $c1 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getDecimalSeparator()>();

        $c2 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getDigit()>();

        $r3 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>();

        $c3 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getGroupingSeparator()>();

        $r4 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getInfinity()>();

        $r5 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>();

        $r6 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getMinusSignString()>();

        $c4 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getMonetaryDecimalSeparator()>();

        $r7 = virtualinvoke r1.<java.text.DecimalFormatSymbols: java.lang.String getNaN()>();

        $c5 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPatternSeparator()>();

        $c6 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPercent()>();

        $c7 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getPerMill()>();

        $c8 = virtualinvoke r1.<java.text.DecimalFormatSymbols: char getZeroDigit()>();

        staticinvoke <libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(long,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,char,java.lang.String,char,char,char,char)>($l0, $r2, $c1, $c2, $r3, $c3, $r4, $r5, $r6, $c4, $r7, $c5, $c6, $c7, $c8);

        return;
    }

    public void setDecimalFormatSymbols(libcore.icu.LocaleData)
    {
        libcore.icu.NativeDecimalFormat r0;
        libcore.icu.LocaleData r1;
        char $c0, $c1, $c2, $c3, $c4, $c5, $c6;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7;
        long $l7;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: libcore.icu.LocaleData;

        $l7 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r7 = r1.<libcore.icu.LocaleData: java.lang.String currencySymbol>;

        $c6 = r1.<libcore.icu.LocaleData: char decimalSeparator>;

        $r6 = r1.<libcore.icu.LocaleData: java.lang.String exponentSeparator>;

        $c5 = r1.<libcore.icu.LocaleData: char groupingSeparator>;

        $r5 = r1.<libcore.icu.LocaleData: java.lang.String infinity>;

        $r4 = r1.<libcore.icu.LocaleData: java.lang.String internationalCurrencySymbol>;

        $r3 = r1.<libcore.icu.LocaleData: java.lang.String minusSign>;

        $c4 = r1.<libcore.icu.LocaleData: char monetarySeparator>;

        $r2 = r1.<libcore.icu.LocaleData: java.lang.String NaN>;

        $c3 = r1.<libcore.icu.LocaleData: char patternSeparator>;

        $c2 = r1.<libcore.icu.LocaleData: char percent>;

        $c1 = r1.<libcore.icu.LocaleData: char perMill>;

        $c0 = r1.<libcore.icu.LocaleData: char zeroDigit>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setDecimalFormatSymbols(long,java.lang.String,char,char,java.lang.String,char,java.lang.String,java.lang.String,java.lang.String,char,java.lang.String,char,char,char,char)>($l7, $r7, $c6, 35, $r6, $c5, $r5, $r4, $r3, $c4, $r2, $c3, $c2, $c1, $c0);

        return;
    }

    public char[] formatBigDecimal(java.math.BigDecimal, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.BigDecimal r1;
        java.text.FieldPosition r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3;
        char[] r4;
        long $l0;
        java.lang.String $r5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.BigDecimal;

        r2 := @parameter1: java.text.FieldPosition;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r2);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r5 = virtualinvoke r1.<java.math.BigDecimal: java.lang.String toString()>();

        r4 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, $r5, r3);

        if r3 == null goto label1;

        if r2 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat: void updateFieldPosition(java.text.FieldPosition,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>(r2, r3);

     label1:
        return r4;
    }

    public char[] formatBigInteger(java.math.BigInteger, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.BigInteger r1;
        java.text.FieldPosition r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3;
        char[] r4;
        long $l0;
        java.lang.String $r5;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.BigInteger;

        r2 := @parameter1: java.text.FieldPosition;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r2);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r5 = virtualinvoke r1.<java.math.BigInteger: java.lang.String toString(int)>(10);

        r4 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, $r5, r3);

        if r3 == null goto label1;

        if r2 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat: void updateFieldPosition(java.text.FieldPosition,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>(r2, r3);

     label1:
        return r4;
    }

    public char[] formatLong(long, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        long l0, $l1;
        java.text.FieldPosition r1;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r2;
        char[] r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        l0 := @parameter0: long;

        r1 := @parameter1: java.text.FieldPosition;

        r2 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r1);

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatLong(long,long,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l1, l0, r2);

        if r2 == null goto label1;

        if r1 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat: void updateFieldPosition(java.text.FieldPosition,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>(r1, r2);

     label1:
        return r3;
    }

    public char[] formatDouble(double, java.text.FieldPosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        double d0;
        java.text.FieldPosition r1;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r2;
        char[] r3;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        d0 := @parameter0: double;

        r1 := @parameter1: java.text.FieldPosition;

        r2 = staticinvoke <libcore.icu.NativeDecimalFormat$FieldPositionIterator: libcore.icu.NativeDecimalFormat$FieldPositionIterator forFieldPosition(java.text.FieldPosition)>(r1);

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        r3 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDouble(long,double,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, d0, r2);

        if r2 == null goto label1;

        if r1 == null goto label1;

        staticinvoke <libcore.icu.NativeDecimalFormat: void updateFieldPosition(java.text.FieldPosition,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>(r1, r2);

     label1:
        return r3;
    }

    private static void updateFieldPosition(java.text.FieldPosition, libcore.icu.NativeDecimalFormat$FieldPositionIterator)
    {
        java.text.FieldPosition r0;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r1;
        int i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.text.FieldPosition;

        r1 := @parameter1: libcore.icu.NativeDecimalFormat$FieldPositionIterator;

        i0 = staticinvoke <libcore.icu.NativeDecimalFormat: int translateFieldId(java.text.FieldPosition)>(r0);

        if i0 == -1 goto label2;

     label1:
        $z0 = virtualinvoke r1.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: boolean next()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r1.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int fieldId()>();

        if $i1 != i0 goto label1;

        $i2 = virtualinvoke r1.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int start()>();

        virtualinvoke r0.<java.text.FieldPosition: void setBeginIndex(int)>($i2);

        $i3 = virtualinvoke r1.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int limit()>();

        virtualinvoke r0.<java.text.FieldPosition: void setEndIndex(int)>($i3);

        return;

     label2:
        return;
    }

    public void applyLocalizedPattern(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPattern(long,boolean,java.lang.String)>($l0, 1, r1);

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = null;

        return;
    }

    public void applyPattern(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, $r2, $r3;
        long $l0;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        if $r2 == null goto label1;

        $r3 = r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern>;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPattern(long,boolean,java.lang.String)>($l0, 0, r1);

        r0.<libcore.icu.NativeDecimalFormat: java.lang.String lastPattern> = r1;

        return;
    }

    public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.Object r1;
        java.lang.Number r2;
        libcore.icu.NativeDecimalFormat$FieldPositionIterator r3, $r6;
        java.lang.String r4, $r7, $r8, $r12, $r14, $r21;
        double d0;
        java.text.Format$Field r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        long $l0, $l3, $l4, l5;
        char[] $r9, $r13, $r16;
        java.text.AttributedString $r10, r23;
        java.text.AttributedCharacterIterator $r11;
        int $i1, $i2;
        java.lang.IllegalArgumentException $r15;
        java.lang.Class $r17;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.NullPointerException $r22;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("object == null");

        throw $r22;

     label1:
        $z0 = r1 instanceof java.lang.Number;

        if $z0 != 0 goto label2;

        $r15 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("object not a Number: ");

        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label2:
        r2 = (java.lang.Number) r1;

        $r6 = new libcore.icu.NativeDecimalFormat$FieldPositionIterator;

        specialinvoke $r6.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: void <init>(libcore.icu.NativeDecimalFormat$1)>(null);

        r3 = $r6;

        $z1 = r2 instanceof java.math.BigInteger;

        if $z1 != 0 goto label3;

        $z4 = r2 instanceof java.math.BigDecimal;

        if $z4 == 0 goto label4;

     label3:
        $r7 = new java.lang.String;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r8 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r9 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDigitList(long,java.lang.String,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l0, $r8, r3);

        specialinvoke $r7.<java.lang.String: void <init>(char[])>($r9);

        r4 = $r7;

        goto label7;

     label4:
        $z3 = r2 instanceof java.lang.Double;

        if $z3 != 0 goto label5;

        $z5 = r2 instanceof java.lang.Float;

        if $z5 == 0 goto label6;

     label5:
        d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>();

        $r12 = new java.lang.String;

        $l3 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r13 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatDouble(long,double,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l3, d0, r3);

        specialinvoke $r12.<java.lang.String: void <init>(char[])>($r13);

        r4 = $r12;

        goto label7;

     label6:
        l5 = virtualinvoke r2.<java.lang.Number: long longValue()>();

        $r14 = new java.lang.String;

        $l4 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r16 = staticinvoke <libcore.icu.NativeDecimalFormat: char[] formatLong(long,long,libcore.icu.NativeDecimalFormat$FieldPositionIterator)>($l4, l5, r3);

        specialinvoke $r14.<java.lang.String: void <init>(char[])>($r16);

        r4 = $r14;

     label7:
        $r10 = new java.text.AttributedString;

        specialinvoke $r10.<java.text.AttributedString: void <init>(java.lang.String)>(r4);

        r23 = $r10;

     label8:
        $z2 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: boolean next()>();

        if $z2 == 0 goto label9;

        r5 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: java.text.Format$Field field()>();

        $i2 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int start()>();

        $i1 = virtualinvoke r3.<libcore.icu.NativeDecimalFormat$FieldPositionIterator: int limit()>();

        virtualinvoke r23.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>(r5, r5, $i2, $i1);

        goto label8;

     label9:
        $r11 = virtualinvoke r23.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        return $r11;
    }

    private int makeScalePositive(int, java.lang.StringBuilder)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0, i1, i2;
        java.lang.StringBuilder r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuilder;

        if i0 >= 0 goto label3;

        i2 = neg i0;

        i1 = i2;

     label1:
        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i1 = i1 + -1;

        goto label1;

     label2:
        i0 = 0;

     label3:
        return i0;
    }

    public java.lang.String toLocalizedPattern()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String toPatternImpl(long,boolean)>($l0, 1);

        return $r1;
    }

    public java.lang.String toPattern()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String toPatternImpl(long,boolean)>($l0, 0);

        return $r1;
    }

    public java.lang.Number parse(java.lang.String, java.text.ParsePosition)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        java.text.ParsePosition r2;
        boolean $z0;
        long $l0;
        java.lang.Number $r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.ParsePosition;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal>;

        $r3 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.Number parse(long,java.lang.String,java.text.ParsePosition,boolean)>($l0, r1, r2, $z0);

        return $r3;
    }

    public int getMaximumFractionDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 6);

        return $i1;
    }

    public int getMaximumIntegerDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 3);

        return $i1;
    }

    public int getMinimumFractionDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 7);

        return $i1;
    }

    public int getMinimumIntegerDigits()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 4);

        return $i1;
    }

    public int getGroupingSize()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = virtualinvoke r0.<libcore.icu.NativeDecimalFormat: boolean isGroupingUsed()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 10);

        return $i1;
    }

    public int getMultiplier()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 9);

        return $i1;
    }

    public java.lang.String getNegativePrefix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 2);

        return $r1;
    }

    public java.lang.String getNegativeSuffix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 3);

        return $r1;
    }

    public java.lang.String getPositivePrefix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 0);

        return $r1;
    }

    public java.lang.String getPositiveSuffix()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $r1 = staticinvoke <libcore.icu.NativeDecimalFormat: java.lang.String getTextAttribute(long,int)>($l0, 1);

        return $r1;
    }

    public boolean isDecimalSeparatorAlwaysShown()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 2);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isParseBigDecimal()
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal>;

        return $z0;
    }

    public boolean isParseIntegerOnly()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 0);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isGroupingUsed()
    {
        libcore.icu.NativeDecimalFormat r0;
        long $l0;
        int $i1;
        boolean $z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        $i1 = staticinvoke <libcore.icu.NativeDecimalFormat: int getAttribute(long,int)>($l0, 1);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setDecimalSeparatorAlwaysShown(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0, $b2;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b2 = -1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        b0 = $b2;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 2, b0);

        return;
    }

    public void setCurrency(java.lang.String, java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1, r2;
        long $l0, $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setSymbol(long,int,java.lang.String)>($l0, 8, r1);

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setSymbol(long,int,java.lang.String)>($l1, 9, r2);

        return;
    }

    public void setGroupingSize(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 10, i0);

        return;
    }

    public void setGroupingUsed(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0, $b2;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b2 = -1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        b0 = $b2;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 1, b0);

        return;
    }

    public void setMaximumFractionDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 6, i0);

        return;
    }

    public void setMaximumIntegerDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 3, i0);

        return;
    }

    public void setMinimumFractionDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 7, i0);

        return;
    }

    public void setMinimumIntegerDigits(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 4, i0);

        return;
    }

    public void setMultiplier(int)
    {
        libcore.icu.NativeDecimalFormat r0;
        int i0;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 9, i0);

        return;
    }

    public void setNegativePrefix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull> = $z1;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negPrefNull>;

        if $z0 != 0 goto label3;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 2, r1);

     label3:
        return;
    }

    public void setNegativeSuffix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull> = $z1;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean negSuffNull>;

        if $z0 != 0 goto label3;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 3, r1);

     label3:
        return;
    }

    public void setPositivePrefix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull> = $z1;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posPrefNull>;

        if $z0 != 0 goto label3;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 0, r1);

     label3:
        return;
    }

    public void setPositiveSuffix(java.lang.String)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.lang.String r1;
        boolean $z0, $z1;
        long $l0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull> = $z1;

        $z0 = r0.<libcore.icu.NativeDecimalFormat: boolean posSuffNull>;

        if $z0 != 0 goto label3;

        $l0 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setTextAttribute(long,int,java.lang.String)>($l0, 1, r1);

     label3:
        return;
    }

    public void setParseBigDecimal(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        r0.<libcore.icu.NativeDecimalFormat: boolean parseBigDecimal> = z0;

        return;
    }

    public void setParseIntegerOnly(boolean)
    {
        libcore.icu.NativeDecimalFormat r0;
        boolean z0;
        byte b0, $b2;
        long $l1;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b2 = -1;

        goto label2;

     label1:
        $b2 = 0;

     label2:
        b0 = $b2;

        $l1 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setAttribute(long,int,int)>($l1, 0, b0);

        return;
    }

    private static void applyPattern(long, boolean, java.lang.String)
    {
        long l0;
        boolean z0;
        java.lang.String r0, $r7, $r11;
        java.lang.NullPointerException r1, $r2;
        java.lang.RuntimeException $r3, r12;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        r0 := @parameter2: java.lang.String;

     label1:
        staticinvoke <libcore.icu.NativeDecimalFormat: void applyPatternImpl(long,boolean,java.lang.String)>(l0, z0, r0);

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        throw r1;

     label4:
        $r3 := @caughtexception;

        r12 = $r3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("syntax error: ");

        $r7 = virtualinvoke r12.<java.lang.RuntimeException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label5:
        return;

        catch java.lang.NullPointerException from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label4;
    }

    public void setRoundingMode(java.math.RoundingMode, double)
    {
        libcore.icu.NativeDecimalFormat r0;
        java.math.RoundingMode r1;
        double d0;
        byte b0;
        int[] $r2;
        int $i1, $i2;
        long $l3;
        java.lang.AssertionError $r3;

        r0 := @this: libcore.icu.NativeDecimalFormat;

        r1 := @parameter0: java.math.RoundingMode;

        d0 := @parameter1: double;

        $r2 = <libcore.icu.NativeDecimalFormat$1: int[] $SwitchMap$java$math$RoundingMode>;

        $i1 = virtualinvoke r1.<java.math.RoundingMode: int ordinal()>();

        $i2 = $r2[$i1];

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            default: goto label09;
        };

     label01:
        b0 = 0;

        goto label10;

     label02:
        b0 = 1;

        goto label10;

     label03:
        b0 = 2;

        goto label10;

     label04:
        b0 = 3;

        goto label10;

     label05:
        b0 = 4;

        goto label10;

     label06:
        b0 = 5;

        goto label10;

     label07:
        b0 = 6;

        goto label10;

     label08:
        b0 = 7;

        goto label10;

     label09:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label10:
        $l3 = r0.<libcore.icu.NativeDecimalFormat: long address>;

        staticinvoke <libcore.icu.NativeDecimalFormat: void setRoundingMode(long,int,double)>($l3, b0, d0);

        return;
    }

    private static native void applyPatternImpl(long, boolean, java.lang.String);

    private static native long cloneImpl(long);

    private static native void close(long);

    private static native char[] formatLong(long, long, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native char[] formatDouble(long, double, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native char[] formatDigitList(long, java.lang.String, libcore.icu.NativeDecimalFormat$FieldPositionIterator);

    private static native int getAttribute(long, int);

    private static native java.lang.String getTextAttribute(long, int);

    private static native long open(java.lang.String, java.lang.String, char, char, java.lang.String, char, java.lang.String, java.lang.String, java.lang.String, char, java.lang.String, char, char, char, char);

    private static native java.lang.Number parse(long, java.lang.String, java.text.ParsePosition, boolean);

    private static native void setDecimalFormatSymbols(long, java.lang.String, char, char, java.lang.String, char, java.lang.String, java.lang.String, java.lang.String, char, java.lang.String, char, char, char, char);

    private static native void setSymbol(long, int, java.lang.String);

    private static native void setAttribute(long, int, int);

    private static native void setRoundingMode(long, int, double);

    private static native void setTextAttribute(long, int, java.lang.String);

    private static native java.lang.String toPatternImpl(long, boolean);

    static java.text.Format$Field[] access$100()
    {
        java.text.Format$Field[] $r0;

        $r0 = <libcore.icu.NativeDecimalFormat: java.text.Format$Field[] ICU4C_FIELD_IDS>;

        return $r0;
    }

    static void <clinit>()
    {
        java.text.Format$Field[] $r0;
        java.text.NumberFormat$Field $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        <libcore.icu.NativeDecimalFormat: int UNUM_PUBLIC_RULESETS> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_DEFAULT_RULESET> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_CURRENCY_CODE> = 5;

        <libcore.icu.NativeDecimalFormat: int UNUM_PADDING_CHARACTER> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_NEGATIVE_SUFFIX> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_NEGATIVE_PREFIX> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_POSITIVE_SUFFIX> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_POSITIVE_PREFIX> = 0;

        <libcore.icu.NativeDecimalFormat: int UNUM_LENIENT_PARSE> = 19;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_SIGNIFICANT_DIGITS> = 18;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_SIGNIFICANT_DIGITS> = 17;

        <libcore.icu.NativeDecimalFormat: int UNUM_SIGNIFICANT_DIGITS_USED> = 16;

        <libcore.icu.NativeDecimalFormat: int UNUM_SECONDARY_GROUPING_SIZE> = 15;

        <libcore.icu.NativeDecimalFormat: int UNUM_PADDING_POSITION> = 14;

        <libcore.icu.NativeDecimalFormat: int UNUM_FORMAT_WIDTH> = 13;

        <libcore.icu.NativeDecimalFormat: int UNUM_ROUNDING_INCREMENT> = 12;

        <libcore.icu.NativeDecimalFormat: int UNUM_ROUNDING_MODE> = 11;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_SIZE> = 10;

        <libcore.icu.NativeDecimalFormat: int UNUM_MULTIPLIER> = 9;

        <libcore.icu.NativeDecimalFormat: int UNUM_FRACTION_DIGITS> = 8;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_FRACTION_DIGITS> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_FRACTION_DIGITS> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_INTEGER_DIGITS> = 5;

        <libcore.icu.NativeDecimalFormat: int UNUM_MIN_INTEGER_DIGITS> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_MAX_INTEGER_DIGITS> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_DECIMAL_ALWAYS_SHOWN> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_USED> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_PARSE_INT_ONLY> = 0;

        <libcore.icu.NativeDecimalFormat: int UNUM_FORMAT_SYMBOL_COUNT> = 18;

        <libcore.icu.NativeDecimalFormat: int UNUM_MONETARY_GROUPING_SEPARATOR_SYMBOL> = 17;

        <libcore.icu.NativeDecimalFormat: int UNUM_SIGNIFICANT_DIGIT_SYMBOL> = 16;

        <libcore.icu.NativeDecimalFormat: int UNUM_NAN_SYMBOL> = 15;

        <libcore.icu.NativeDecimalFormat: int UNUM_INFINITY_SYMBOL> = 14;

        <libcore.icu.NativeDecimalFormat: int UNUM_PAD_ESCAPE_SYMBOL> = 13;

        <libcore.icu.NativeDecimalFormat: int UNUM_PERMILL_SYMBOL> = 12;

        <libcore.icu.NativeDecimalFormat: int UNUM_EXPONENTIAL_SYMBOL> = 11;

        <libcore.icu.NativeDecimalFormat: int UNUM_MONETARY_SEPARATOR_SYMBOL> = 10;

        <libcore.icu.NativeDecimalFormat: int UNUM_INTL_CURRENCY_SYMBOL> = 9;

        <libcore.icu.NativeDecimalFormat: int UNUM_CURRENCY_SYMBOL> = 8;

        <libcore.icu.NativeDecimalFormat: int UNUM_PLUS_SIGN_SYMBOL> = 7;

        <libcore.icu.NativeDecimalFormat: int UNUM_MINUS_SIGN_SYMBOL> = 6;

        <libcore.icu.NativeDecimalFormat: int UNUM_DIGIT_SYMBOL> = 5;

        <libcore.icu.NativeDecimalFormat: int UNUM_ZERO_DIGIT_SYMBOL> = 4;

        <libcore.icu.NativeDecimalFormat: int UNUM_PERCENT_SYMBOL> = 3;

        <libcore.icu.NativeDecimalFormat: int UNUM_PATTERN_SEPARATOR_SYMBOL> = 2;

        <libcore.icu.NativeDecimalFormat: int UNUM_GROUPING_SEPARATOR_SYMBOL> = 1;

        <libcore.icu.NativeDecimalFormat: int UNUM_DECIMAL_SEPARATOR_SYMBOL> = 0;

        $r0 = newarray (java.text.Format$Field)[11];

        $r1 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field INTEGER>;

        $r0[0] = $r1;

        $r2 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field FRACTION>;

        $r0[1] = $r2;

        $r3 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field DECIMAL_SEPARATOR>;

        $r0[2] = $r3;

        $r4 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT_SYMBOL>;

        $r0[3] = $r4;

        $r5 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT_SIGN>;

        $r0[4] = $r5;

        $r6 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field EXPONENT>;

        $r0[5] = $r6;

        $r7 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field GROUPING_SEPARATOR>;

        $r0[6] = $r7;

        $r8 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field CURRENCY>;

        $r0[7] = $r8;

        $r9 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field PERCENT>;

        $r0[8] = $r9;

        $r10 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field PERMILLE>;

        $r0[9] = $r10;

        $r11 = <java.text.NumberFormat$Field: java.text.NumberFormat$Field SIGN>;

        $r0[10] = $r11;

        <libcore.icu.NativeDecimalFormat: java.text.Format$Field[] ICU4C_FIELD_IDS> = $r0;

        return;
    }
}
