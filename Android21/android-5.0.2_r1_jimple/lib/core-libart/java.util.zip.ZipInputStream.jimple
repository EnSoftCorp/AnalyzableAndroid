public class java.util.zip.ZipInputStream extends java.util.zip.InflaterInputStream implements java.util.zip.ZipConstants
{
    private static final int ZIPLocalHeaderVersionNeeded;
    private boolean entriesEnd;
    private boolean hasDD;
    private int entryIn;
    private int inRead;
    private int lastRead;
    private java.util.zip.ZipEntry currentEntry;
    private final byte[] hdrBuf;
    private final java.util.zip.CRC32 crc;
    private byte[] stringBytesBuf;
    private char[] stringCharBuf;

    public void <init>(java.io.InputStream)
    {
        java.util.zip.ZipInputStream r0;
        java.io.InputStream r1;
        java.io.PushbackInputStream $r2;
        java.util.zip.Inflater $r3;
        byte[] $r4, $r6;
        java.util.zip.CRC32 $r5;
        char[] $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.zip.ZipInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new java.io.PushbackInputStream;

        specialinvoke $r2.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>(r1, 512);

        $r3 = new java.util.zip.Inflater;

        specialinvoke $r3.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r2, $r3);

        r0.<java.util.zip.ZipInputStream: boolean entriesEnd> = 0;

        r0.<java.util.zip.ZipInputStream: boolean hasDD> = 0;

        r0.<java.util.zip.ZipInputStream: int entryIn> = 0;

        r0.<java.util.zip.ZipInputStream: int lastRead> = 0;

        $r4 = newarray (byte)[26];

        r0.<java.util.zip.ZipInputStream: byte[] hdrBuf> = $r4;

        $r5 = new java.util.zip.CRC32;

        specialinvoke $r5.<java.util.zip.CRC32: void <init>()>();

        r0.<java.util.zip.ZipInputStream: java.util.zip.CRC32 crc> = $r5;

        $r6 = newarray (byte)[256];

        r0.<java.util.zip.ZipInputStream: byte[] stringBytesBuf> = $r6;

        $r7 = newarray (char)[256];

        r0.<java.util.zip.ZipInputStream: char[] stringCharBuf> = $r7;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("stream == null");

        throw $r8;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        boolean $z0;

        r0 := @this: java.util.zip.ZipInputStream;

        $z0 = r0.<java.util.zip.ZipInputStream: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.util.zip.ZipInputStream: void closeEntry()>();

        specialinvoke r0.<java.util.zip.InflaterInputStream: void close()>();

     label1:
        return;
    }

    public void closeEntry() throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        java.lang.Exception r1, r2, r3, $r17, $r18;
        int i0, i1, $i2, $i3, $i5, $i6, i7;
        java.util.zip.ZipEntry $r4, $r5;
        java.util.zip.Inflater $r6, $r15, $r16;
        java.util.zip.CRC32 $r7;
        boolean $z0, $z1;
        java.lang.AssertionError $r8, r19;
        java.lang.RuntimeException $r9;
        java.io.InputStream $r11;
        java.io.IOException $r12;
        java.io.PushbackInputStream $r13;
        byte[] $r14;

        r0 := @this: java.util.zip.ZipInputStream;

        specialinvoke r0.<java.util.zip.ZipInputStream: void checkClosed()>();

        $r4 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        if $r4 != null goto label01;

        return;

     label01:
        r1 = null;

     label02:
        staticinvoke <libcore.io.Streams: void skipAll(java.io.InputStream)>(r0);

     label03:
        goto label05;

     label04:
        $r18 := @caughtexception;

        r2 = $r18;

        r1 = r2;

     label05:
        $r5 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $i2 = $r5.<java.util.zip.ZipEntry: int compressionMethod>;

        if $i2 != 8 goto label06;

        $r15 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        i7 = virtualinvoke $r15.<java.util.zip.Inflater: int getTotalIn()>();

        $r16 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        i0 = virtualinvoke $r16.<java.util.zip.Inflater: int getTotalOut()>();

        goto label07;

     label06:
        i7 = r0.<java.util.zip.ZipInputStream: int inRead>;

        i0 = r0.<java.util.zip.ZipInputStream: int inRead>;

     label07:
        $i3 = r0.<java.util.zip.ZipInputStream: int entryIn>;

        i1 = $i3 - i7;

        if i1 == 0 goto label08;

        $r11 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r13 = (java.io.PushbackInputStream) $r11;

        $r14 = r0.<java.util.zip.ZipInputStream: byte[] buf>;

        $i6 = r0.<java.util.zip.ZipInputStream: int len>;

        $i5 = $i6 - i1;

        virtualinvoke $r13.<java.io.PushbackInputStream: void unread(byte[],int,int)>($r14, $i5, i1);

     label08:
        specialinvoke r0.<java.util.zip.ZipInputStream: void readAndVerifyDataDescriptor(int,int)>(i7, i0);

     label09:
        goto label11;

     label10:
        $r17 := @caughtexception;

        r3 = $r17;

        if r1 != null goto label11;

        r1 = r3;

     label11:
        $r6 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r6.<java.util.zip.Inflater: void reset()>();

        r0.<java.util.zip.ZipInputStream: int len> = 0;

        r0.<java.util.zip.ZipInputStream: int entryIn> = 0;

        r0.<java.util.zip.ZipInputStream: int inRead> = 0;

        r0.<java.util.zip.ZipInputStream: int lastRead> = 0;

        $r7 = r0.<java.util.zip.ZipInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r7.<java.util.zip.CRC32: void reset()>();

        r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry> = null;

        if r1 == null goto label14;

        $z0 = r1 instanceof java.io.IOException;

        if $z0 == 0 goto label12;

        $r12 = (java.io.IOException) r1;

        throw $r12;

     label12:
        $z1 = r1 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label13;

        $r9 = (java.lang.RuntimeException) r1;

        throw $r9;

     label13:
        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        r19 = $r8;

        virtualinvoke r19.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r19;

     label14:
        return;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    private void readAndVerifyDataDescriptor(int, int) throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        int i0, i1, i2, $i13, $i15, $i19;
        boolean $z0;
        java.util.zip.ZipEntry $r1, $r3, $r5, $r12, $r16, $r18;
        java.util.zip.CRC32 $r2;
        long $l3, $l4, $l6, $l7, $l9, $l10, $l12, $l14, $l16, $l17, $l18, $l20;
        byte $b5, $b8, $b11;
        java.util.zip.ZipException $r4, $r6, $r20;
        java.io.InputStream $r7;
        byte[] $r8, $r9, $r13, $r15, $r17;
        java.nio.ByteOrder $r10, $r11, $r14, $r19;
        java.lang.Integer $r21;
        java.lang.Object[] $r22;
        java.lang.String $r23;

        r0 := @this: java.util.zip.ZipInputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<java.util.zip.ZipInputStream: boolean hasDD>;

        if $z0 == 0 goto label2;

        $r7 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r8 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r7, $r8, 0, 16);

        $r9 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r10 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        i2 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r9, 0, $r10);

        if i2 == 134695760 goto label1;

        $r20 = new java.util.zip.ZipException;

        $r22 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r22[0] = $r21;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown format (EXTSIG=%x)", $r22);

        specialinvoke $r20.<java.util.zip.ZipException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label1:
        $r12 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $r13 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r11 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i13 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r13, 4, $r11);

        $l12 = (long) $i13;

        $l14 = $l12 & 4294967295L;

        $r12.<java.util.zip.ZipEntry: long crc> = $l14;

        $r16 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $r15 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r14 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i15 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r15, 8, $r14);

        $l16 = (long) $i15;

        $l17 = $l16 & 4294967295L;

        $r16.<java.util.zip.ZipEntry: long compressedSize> = $l17;

        $r18 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $r17 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r19 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i19 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r17, 12, $r19);

        $l20 = (long) $i19;

        $l18 = $l20 & 4294967295L;

        $r18.<java.util.zip.ZipEntry: long size> = $l18;

     label2:
        $r1 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $l3 = $r1.<java.util.zip.ZipEntry: long crc>;

        $r2 = r0.<java.util.zip.ZipInputStream: java.util.zip.CRC32 crc>;

        $l4 = virtualinvoke $r2.<java.util.zip.CRC32: long getValue()>();

        $b5 = $l3 cmp $l4;

        if $b5 == 0 goto label3;

        $r6 = new java.util.zip.ZipException;

        specialinvoke $r6.<java.util.zip.ZipException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r6;

     label3:
        $r3 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $l7 = $r3.<java.util.zip.ZipEntry: long compressedSize>;

        $l6 = (long) i0;

        $b8 = $l7 cmp $l6;

        if $b8 != 0 goto label4;

        $r5 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $l9 = $r5.<java.util.zip.ZipEntry: long size>;

        $l10 = (long) i1;

        $b11 = $l9 cmp $l10;

        if $b11 == 0 goto label5;

     label4:
        $r4 = new java.util.zip.ZipException;

        specialinvoke $r4.<java.util.zip.ZipException: void <init>(java.lang.String)>("Size mismatch");

        throw $r4;

     label5:
        return;
    }

    public java.util.zip.ZipEntry getNextEntry() throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        int i0, i1, i2, i3, i4, i5, i9, i10, $i15, $i16, $i17, $i20, $i22, $i24;
        long l6, l7, l8, $l11, $l12, $l19, $l21, $l23;
        java.lang.String r1, $r27, $r35;
        boolean $z0, $z1, $z2;
        byte[] r2, $r4, $r5, $r7, $r20, $r22, $r24;
        java.io.InputStream $r3, $r8, $r13;
        java.nio.ByteOrder $r6, $r21, $r23, $r25;
        byte $b13, $b14, $b18;
        java.util.zip.ZipEntry $r9, $r10, $r11, $r12, $r14, $r15, $r17, $r18, $r19;
        java.util.zip.ZipException $r16, $r28, $r30;
        java.lang.StringBuilder $r26, $r29, $r31, $r32, $r33, $r34;

        r0 := @this: java.util.zip.ZipInputStream;

        virtualinvoke r0.<java.util.zip.ZipInputStream: void closeEntry()>();

        $z0 = r0.<java.util.zip.ZipInputStream: boolean entriesEnd>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r3 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r4 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r3, $r4, 0, 4);

        $r5 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r6 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        i0 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r5, 0, $r6);

        $l11 = (long) i0;

        $b13 = $l11 cmp 33639248L;

        if $b13 != 0 goto label02;

        r0.<java.util.zip.ZipInputStream: boolean entriesEnd> = 1;

        return null;

     label02:
        $l12 = (long) i0;

        $b14 = $l12 cmp 67324752L;

        if $b14 == 0 goto label03;

        return null;

     label03:
        $r8 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r7 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r8, $r7, 0, 26);

        $i15 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(0);

        i1 = $i15 & 255;

        if i1 <= 20 goto label04;

        $r28 = new java.util.zip.ZipException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read local header version ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.util.zip.ZipException: void <init>(java.lang.String)>($r35);

        throw $r28;

     label04:
        i2 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(2);

        $i16 = i2 & 1;

        if $i16 == 0 goto label05;

        $r30 = new java.util.zip.ZipException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid General Purpose Bit Flag: ");

        $r26 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.util.zip.ZipException: void <init>(java.lang.String)>($r27);

        throw $r30;

     label05:
        $i17 = i2 & 8;

        if $i17 == 0 goto label06;

        $z2 = 1;

        goto label07;

     label06:
        $z2 = 0;

     label07:
        r0.<java.util.zip.ZipInputStream: boolean hasDD> = $z2;

        i3 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(6);

        i4 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(8);

        i5 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(4);

        l6 = 0L;

        l7 = 0L;

        l8 = -1L;

        $z1 = r0.<java.util.zip.ZipInputStream: boolean hasDD>;

        if $z1 != 0 goto label08;

        $r20 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r21 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i20 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r20, 10, $r21);

        $l19 = (long) $i20;

        l6 = $l19 & 4294967295L;

        $r22 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r23 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i22 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r22, 14, $r23);

        $l21 = (long) $i22;

        l7 = $l21 & 4294967295L;

        $r24 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r25 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i24 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r24, 18, $r25);

        $l23 = (long) $i24;

        l8 = $l23 & 4294967295L;

     label08:
        i9 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(22);

        if i9 != 0 goto label09;

        $r16 = new java.util.zip.ZipException;

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>("Entry is not named");

        throw $r16;

     label09:
        i10 = specialinvoke r0.<java.util.zip.ZipInputStream: int peekShort(int)>(24);

        r1 = specialinvoke r0.<java.util.zip.ZipInputStream: java.lang.String readString(int)>(i9);

        $r11 = virtualinvoke r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry createZipEntry(java.lang.String)>(r1);

        r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry> = $r11;

        $r12 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $r12.<java.util.zip.ZipEntry: int time> = i3;

        $r9 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $r9.<java.util.zip.ZipEntry: int modDate> = i4;

        $r10 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        virtualinvoke $r10.<java.util.zip.ZipEntry: void setMethod(int)>(i5);

        $b18 = l8 cmp -1L;

        if $b18 == 0 goto label10;

        $r19 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        virtualinvoke $r19.<java.util.zip.ZipEntry: void setCrc(long)>(l6);

        $r18 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        virtualinvoke $r18.<java.util.zip.ZipEntry: void setSize(long)>(l8);

        $r17 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        virtualinvoke $r17.<java.util.zip.ZipEntry: void setCompressedSize(long)>(l7);

     label10:
        if i10 <= 0 goto label11;

        r2 = newarray (byte)[i10];

        $r13 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r13, r2, 0, i10);

        $r14 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        virtualinvoke $r14.<java.util.zip.ZipEntry: void setExtra(byte[])>(r2);

     label11:
        $r15 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        return $r15;
    }

    private java.lang.String readString(int) throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        int i0, $i1, $i2;
        byte[] $r1, $r2, $r6, $r9;
        java.io.InputStream $r3;
        char[] $r4, $r5, $r8;
        java.lang.String $r7;

        r0 := @this: java.util.zip.ZipInputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.zip.ZipInputStream: byte[] stringBytesBuf>;

        $i1 = lengthof $r1;

        if i0 <= $i1 goto label1;

        $r9 = newarray (byte)[i0];

        r0.<java.util.zip.ZipInputStream: byte[] stringBytesBuf> = $r9;

     label1:
        $r3 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r2 = r0.<java.util.zip.ZipInputStream: byte[] stringBytesBuf>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r3, $r2, 0, i0);

        $r4 = r0.<java.util.zip.ZipInputStream: char[] stringCharBuf>;

        $i2 = lengthof $r4;

        if i0 <= $i2 goto label2;

        $r8 = newarray (char)[i0];

        r0.<java.util.zip.ZipInputStream: char[] stringCharBuf> = $r8;

     label2:
        $r6 = r0.<java.util.zip.ZipInputStream: byte[] stringBytesBuf>;

        $r5 = r0.<java.util.zip.ZipInputStream: char[] stringCharBuf>;

        $r7 = staticinvoke <java.nio.charset.ModifiedUtf8: java.lang.String decode(byte[],char[],int,int)>($r6, $r5, 0, i0);

        return $r7;
    }

    private int peekShort(int)
    {
        java.util.zip.ZipInputStream r0;
        int i0, $i2;
        java.nio.ByteOrder $r1;
        byte[] $r2;
        short $s1;

        r0 := @this: java.util.zip.ZipInputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.util.zip.ZipInputStream: byte[] hdrBuf>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $s1 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>($r2, i0, $r1);

        $i2 = $s1 & 65535;

        return $i2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        byte[] r1, $r10, $r12;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32;
        java.util.zip.Inflater $r2, $r5, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.util.zip.ZipEntry $r3, $r4, $r9;
        java.util.zip.CRC32 $r8, $r11;
        long $l11;
        java.io.InputStream $r13;
        java.util.zip.ZipException $r14;
        java.util.zip.DataFormatException $r15, r17;
        java.lang.String $r16;

        r0 := @this: java.util.zip.ZipInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.ZipInputStream: void checkClosed()>();

        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        $r2 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        $z0 = virtualinvoke $r2.<java.util.zip.Inflater: boolean finished()>();

        if $z0 != 0 goto label01;

        $r3 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        if $r3 != null goto label02;

     label01:
        return -1;

     label02:
        $r4 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $i5 = $r4.<java.util.zip.ZipEntry: int compressionMethod>;

        if $i5 != 0 goto label09;

        $r9 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $l11 = $r9.<java.util.zip.ZipEntry: long size>;

        i2 = (int) $l11;

        $i10 = r0.<java.util.zip.ZipInputStream: int inRead>;

        if $i10 < i2 goto label03;

        return -1;

     label03:
        $i12 = r0.<java.util.zip.ZipInputStream: int lastRead>;

        $i13 = r0.<java.util.zip.ZipInputStream: int len>;

        if $i12 < $i13 goto label05;

        r0.<java.util.zip.ZipInputStream: int lastRead> = 0;

        $r13 = r0.<java.util.zip.ZipInputStream: java.io.InputStream in>;

        $r12 = r0.<java.util.zip.ZipInputStream: byte[] buf>;

        $i28 = virtualinvoke $r13.<java.io.InputStream: int read(byte[])>($r12);

        r0.<java.util.zip.ZipInputStream: int len> = $i28;

        if $i28 != -1 goto label04;

        r0.<java.util.zip.ZipInputStream: boolean eof> = 1;

        return -1;

     label04:
        $i31 = r0.<java.util.zip.ZipInputStream: int entryIn>;

        $i29 = r0.<java.util.zip.ZipInputStream: int len>;

        $i30 = $i31 + $i29;

        r0.<java.util.zip.ZipInputStream: int entryIn> = $i30;

     label05:
        $i14 = r0.<java.util.zip.ZipInputStream: int len>;

        $i15 = r0.<java.util.zip.ZipInputStream: int lastRead>;

        $i17 = $i14 - $i15;

        if i1 <= $i17 goto label06;

        $i24 = r0.<java.util.zip.ZipInputStream: int len>;

        $i27 = r0.<java.util.zip.ZipInputStream: int lastRead>;

        $i25 = $i24 - $i27;

        goto label07;

     label06:
        $i25 = i1;

     label07:
        i3 = $i25;

        $i16 = r0.<java.util.zip.ZipInputStream: int inRead>;

        $i19 = i2 - $i16;

        if $i19 >= i3 goto label08;

        $i26 = r0.<java.util.zip.ZipInputStream: int inRead>;

        i3 = i2 - $i26;

     label08:
        $r10 = r0.<java.util.zip.ZipInputStream: byte[] buf>;

        $i20 = r0.<java.util.zip.ZipInputStream: int lastRead>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r10, $i20, r1, i0, i3);

        $i18 = r0.<java.util.zip.ZipInputStream: int lastRead>;

        $i22 = $i18 + i3;

        r0.<java.util.zip.ZipInputStream: int lastRead> = $i22;

        $i23 = r0.<java.util.zip.ZipInputStream: int inRead>;

        $i21 = $i23 + i3;

        r0.<java.util.zip.ZipInputStream: int inRead> = $i21;

        $r11 = r0.<java.util.zip.ZipInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r11.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i3);

        return i3;

     label09:
        $r5 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        $z1 = virtualinvoke $r5.<java.util.zip.Inflater: boolean needsInput()>();

        if $z1 == 0 goto label10;

        virtualinvoke r0.<java.util.zip.ZipInputStream: void fill()>();

        $i6 = r0.<java.util.zip.ZipInputStream: int len>;

        if $i6 <= 0 goto label10;

        $i7 = r0.<java.util.zip.ZipInputStream: int entryIn>;

        $i8 = r0.<java.util.zip.ZipInputStream: int len>;

        $i9 = $i7 + $i8;

        r0.<java.util.zip.ZipInputStream: int entryIn> = $i9;

     label10:
        $r6 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        i32 = virtualinvoke $r6.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, i0, i1);

     label11:
        goto label13;

     label12:
        $r15 := @caughtexception;

        r17 = $r15;

        $r14 = new java.util.zip.ZipException;

        $r16 = virtualinvoke r17.<java.util.zip.DataFormatException: java.lang.String getMessage()>();

        specialinvoke $r14.<java.util.zip.ZipException: void <init>(java.lang.String)>($r16);

        throw $r14;

     label13:
        if i32 != 0 goto label14;

        $r7 = r0.<java.util.zip.ZipInputStream: java.util.zip.Inflater inf>;

        $z2 = virtualinvoke $r7.<java.util.zip.Inflater: boolean finished()>();

        if $z2 == 0 goto label14;

        return -1;

     label14:
        $r8 = r0.<java.util.zip.ZipInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r8.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i32);

        return i32;

        catch java.util.zip.DataFormatException from label10 to label11 with label12;
    }

    public int available() throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        java.util.zip.ZipEntry $r1, $r2;
        int $i0;
        long $l1, $l2;
        byte $b3, $b4;

        r0 := @this: java.util.zip.ZipInputStream;

        specialinvoke r0.<java.util.zip.ZipInputStream: void checkClosed()>();

        $r1 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        if $r1 == null goto label1;

        $i0 = r0.<java.util.zip.ZipInputStream: int inRead>;

        $l2 = (long) $i0;

        $r2 = r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry currentEntry>;

        $l1 = $r2.<java.util.zip.ZipEntry: long size>;

        $b3 = $l2 cmp $l1;

        if $b3 >= 0 goto label2;

     label1:
        $b4 = 1;

        goto label3;

     label2:
        $b4 = 0;

     label3:
        return $b4;
    }

    protected java.util.zip.ZipEntry createZipEntry(java.lang.String)
    {
        java.util.zip.ZipInputStream r0;
        java.lang.String r1;
        java.util.zip.ZipEntry $r2;

        r0 := @this: java.util.zip.ZipInputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.util.zip.ZipEntry;

        specialinvoke $r2.<java.util.zip.ZipEntry: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    private void checkClosed() throws java.io.IOException
    {
        java.util.zip.ZipInputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.ZipInputStream;

        $z0 = r0.<java.util.zip.ZipInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.ZipInputStream: int ZIPLocalHeaderVersionNeeded> = 20;

        return;
    }
}
