final class java.nio.IntArrayBuffer extends java.nio.IntBuffer
{
    private final int[] backingArray;
    private final int arrayOffset;
    private final boolean isReadOnly;

    void <init>(int[])
    {
        java.nio.IntArrayBuffer r0;
        int[] r1;
        int $i0;

        r0 := @this: java.nio.IntArrayBuffer;

        r1 := @parameter0: int[];

        $i0 = lengthof r1;

        specialinvoke r0.<java.nio.IntArrayBuffer: void <init>(int,int[],int,boolean)>($i0, r1, 0, 0);

        return;
    }

    private void <init>(int, int[], int, boolean)
    {
        java.nio.IntArrayBuffer r0;
        int i0, i1;
        int[] r1;
        boolean z0;

        r0 := @this: java.nio.IntArrayBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.nio.IntBuffer: void <init>(int,long)>(i0, 0L);

        r0.<java.nio.IntArrayBuffer: int[] backingArray> = r1;

        r0.<java.nio.IntArrayBuffer: int arrayOffset> = i1;

        r0.<java.nio.IntArrayBuffer: boolean isReadOnly> = z0;

        return;
    }

    private static java.nio.IntArrayBuffer copy(java.nio.IntArrayBuffer, int, boolean)
    {
        java.nio.IntArrayBuffer r0, r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        int[] $r3;

        r0 := @parameter0: java.nio.IntArrayBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = new java.nio.IntArrayBuffer;

        $i1 = virtualinvoke r0.<java.nio.IntArrayBuffer: int capacity()>();

        $r3 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i2 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        specialinvoke $r2.<java.nio.IntArrayBuffer: void <init>(int,int[],int,boolean)>($i1, $r3, $i2, z0);

        r1 = $r2;

        $i3 = r0.<java.nio.IntArrayBuffer: int limit>;

        r1.<java.nio.IntArrayBuffer: int limit> = $i3;

        $i4 = virtualinvoke r0.<java.nio.IntArrayBuffer: int position()>();

        r1.<java.nio.IntArrayBuffer: int position> = $i4;

        r1.<java.nio.IntArrayBuffer: int mark> = i0;

        return r1;
    }

    public java.nio.IntBuffer asReadOnlyBuffer()
    {
        java.nio.IntArrayBuffer r0, $r1;
        int $i0;

        r0 := @this: java.nio.IntArrayBuffer;

        $i0 = r0.<java.nio.IntArrayBuffer: int mark>;

        $r1 = staticinvoke <java.nio.IntArrayBuffer: java.nio.IntArrayBuffer copy(java.nio.IntArrayBuffer,int,boolean)>(r0, $i0, 1);

        return $r1;
    }

    public java.nio.IntBuffer compact()
    {
        java.nio.IntArrayBuffer r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1, $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.IntArrayBuffer;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i1 = r0.<java.nio.IntArrayBuffer: int position>;

        $i0 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i2 = $i1 + $i0;

        $r2 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i3 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i4 = virtualinvoke r0.<java.nio.IntArrayBuffer: int remaining()>();

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>($r1, $i2, $r2, $i3, $i4);

        $i6 = r0.<java.nio.IntArrayBuffer: int limit>;

        $i5 = r0.<java.nio.IntArrayBuffer: int position>;

        $i7 = $i6 - $i5;

        r0.<java.nio.IntArrayBuffer: int position> = $i7;

        $i8 = r0.<java.nio.IntArrayBuffer: int capacity>;

        r0.<java.nio.IntArrayBuffer: int limit> = $i8;

        r0.<java.nio.IntArrayBuffer: int mark> = -1;

        return r0;
    }

    public java.nio.IntBuffer duplicate()
    {
        java.nio.IntArrayBuffer r0, $r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.nio.IntArrayBuffer;

        $i0 = r0.<java.nio.IntArrayBuffer: int mark>;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        $r1 = staticinvoke <java.nio.IntArrayBuffer: java.nio.IntArrayBuffer copy(java.nio.IntArrayBuffer,int,boolean)>(r0, $i0, $z0);

        return $r1;
    }

    public java.nio.IntBuffer slice()
    {
        java.nio.IntArrayBuffer r0, $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        int[] $r2;

        r0 := @this: java.nio.IntArrayBuffer;

        $r1 = new java.nio.IntArrayBuffer;

        $i0 = virtualinvoke r0.<java.nio.IntArrayBuffer: int remaining()>();

        $r2 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i2 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i1 = r0.<java.nio.IntArrayBuffer: int position>;

        $i3 = $i2 + $i1;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        specialinvoke $r1.<java.nio.IntArrayBuffer: void <init>(int,int[],int,boolean)>($i0, $r2, $i3, $z0);

        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.IntArrayBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.IntArrayBuffer;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        return $z0;
    }

    int[] protectedArray()
    {
        java.nio.IntArrayBuffer r0;
        boolean $z0;
        int[] $r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.IntArrayBuffer;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        return $r1;
    }

    int protectedArrayOffset()
    {
        java.nio.IntArrayBuffer r0;
        boolean $z0;
        int $i0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.IntArrayBuffer;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        return $i0;
    }

    boolean protectedHasArray()
    {
        java.nio.IntArrayBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.IntArrayBuffer;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public final int get()
    {
        java.nio.IntArrayBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.IntArrayBuffer;

        $i1 = r0.<java.nio.IntArrayBuffer: int position>;

        $i0 = r0.<java.nio.IntArrayBuffer: int limit>;

        if $i1 != $i0 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i4 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i2 = r0.<java.nio.IntArrayBuffer: int position>;

        $i3 = $i2 + 1;

        r0.<java.nio.IntArrayBuffer: int position> = $i3;

        $i5 = $i4 + $i2;

        $i6 = $r1[$i5];

        return $i6;
    }

    public final int get(int)
    {
        java.nio.IntArrayBuffer r0;
        int i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: java.nio.IntArrayBuffer;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.nio.IntArrayBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i1 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i2 = $i1 + i0;

        $i3 = $r1[$i2];

        return $i3;
    }

    public final java.nio.IntBuffer get(int[], int, int)
    {
        java.nio.IntArrayBuffer r0;
        int[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.IntArrayBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<java.nio.IntArrayBuffer: int remaining()>();

        if i1 <= $i2 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i4 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i3 = r0.<java.nio.IntArrayBuffer: int position>;

        $i5 = $i4 + $i3;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>($r2, $i5, r1, i0, i1);

        $i6 = r0.<java.nio.IntArrayBuffer: int position>;

        $i7 = $i6 + i1;

        r0.<java.nio.IntArrayBuffer: int position> = $i7;

        return r0;
    }

    public final boolean isDirect()
    {
        java.nio.IntArrayBuffer r0;

        r0 := @this: java.nio.IntArrayBuffer;

        return 0;
    }

    public final java.nio.ByteOrder order()
    {
        java.nio.IntArrayBuffer r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.IntArrayBuffer;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        return $r1;
    }

    public java.nio.IntBuffer put(int)
    {
        java.nio.IntArrayBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        int[] $r1;
        java.nio.BufferOverflowException $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.IntArrayBuffer;

        i0 := @parameter0: int;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $i2 = r0.<java.nio.IntArrayBuffer: int position>;

        $i1 = r0.<java.nio.IntArrayBuffer: int limit>;

        if $i2 != $i1 goto label2;

        $r2 = new java.nio.BufferOverflowException;

        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();

        throw $r2;

     label2:
        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i5 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i3 = r0.<java.nio.IntArrayBuffer: int position>;

        $i4 = $i3 + 1;

        r0.<java.nio.IntArrayBuffer: int position> = $i4;

        $i6 = $i5 + $i3;

        $r1[$i6] = i0;

        return r0;
    }

    public java.nio.IntBuffer put(int, int)
    {
        java.nio.IntArrayBuffer r0;
        int i0, i1, $i2, $i3;
        boolean $z0;
        int[] $r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.IntArrayBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.nio.IntArrayBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i2 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i3 = $i2 + i0;

        $r1[$i3] = i1;

        return r0;
    }

    public java.nio.IntBuffer put(int[], int, int)
    {
        java.nio.IntArrayBuffer r0;
        int[] r1, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.IntArrayBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<java.nio.IntArrayBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = virtualinvoke r0.<java.nio.IntArrayBuffer: int remaining()>();

        if i1 <= $i2 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.IntArrayBuffer: int[] backingArray>;

        $i4 = r0.<java.nio.IntArrayBuffer: int arrayOffset>;

        $i3 = r0.<java.nio.IntArrayBuffer: int position>;

        $i5 = $i4 + $i3;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, i0, $r2, $i5, i1);

        $i6 = r0.<java.nio.IntArrayBuffer: int position>;

        $i7 = $i6 + i1;

        r0.<java.nio.IntArrayBuffer: int position> = $i7;

        return r0;
    }
}
