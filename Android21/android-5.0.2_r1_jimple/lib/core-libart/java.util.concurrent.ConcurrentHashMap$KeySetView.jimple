public class java.util.concurrent.ConcurrentHashMap$KeySetView extends java.util.concurrent.ConcurrentHashMap$CollectionView implements java.util.Set, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.lang.Object value;

    void <init>(java.util.concurrent.ConcurrentHashMap, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.util.concurrent.ConcurrentHashMap r1;
        java.lang.Object r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: void <init>(java.util.concurrent.ConcurrentHashMap)>(r1);

        r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.lang.Object value> = r2;

        return;
    }

    public java.lang.Object getMappedValue()
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.lang.Object value>;

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r3;
        java.util.concurrent.ConcurrentHashMap r2;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$KeyIterator $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r2 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = r2.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r3;

        if $r3 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        i0 = $i1;

        $r4 = new java.util.concurrent.ConcurrentHashMap$KeyIterator;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r1, i0, 0, i0, r2);

        return $r4;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.lang.Object r1, r2, $r3, $r5;
        java.util.concurrent.ConcurrentHashMap $r4;
        boolean $z0;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.lang.Object value>;

        r2 = $r3;

        if $r3 != null goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r6;

     label1:
        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 1);

        if $r5 != null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.util.Collection r1;
        boolean z0, $z1;
        java.lang.Object r2, r4, $r5, $r7;
        java.util.Iterator r3;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.lang.UnsupportedOperationException $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.lang.Object value>;

        r2 = $r5;

        if $r5 != null goto label1;

        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;

     label1:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.concurrent.ConcurrentHashMap map>;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>(r4, r2, 1);

        if $r7 != null goto label3;

        z0 = 1;

     label3:
        goto label2;

     label4:
        return z0;
    }

    public int hashCode()
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        i0 = 0;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.lang.Object r1;
        java.util.Set r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Set;

        if $z0 == 0 goto label2;

        $r3 = (java.util.Set) r1;

        r2 = $r3;

        if $r3 == r0 goto label1;

        $z2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: boolean containsAll(java.util.Collection)>(r2);

        if $z2 == 0 goto label2;

        $z3 = interfaceinvoke r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r0);

        if $z3 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public volatile java.util.concurrent.ConcurrentHashMap getMap()
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$KeySetView;

        $r1 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap getMap()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ConcurrentHashMap$KeySetView: long serialVersionUID> = 7249069246763182397L;

        return;
    }
}
