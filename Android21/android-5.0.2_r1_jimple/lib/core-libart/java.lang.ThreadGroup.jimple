public class java.lang.ThreadGroup extends java.lang.Object implements java.lang.Thread$UncaughtExceptionHandler
{
    private java.lang.String name;
    private int maxPriority;
    final java.lang.ThreadGroup parent;
    private final java.util.List threadRefs;
    private final java.lang.Iterable threads;
    private final java.util.List groups;
    private boolean isDaemon;
    private boolean isDestroyed;
    static final java.lang.ThreadGroup systemThreadGroup;
    static final java.lang.ThreadGroup mainThreadGroup;

    public void <init>(java.lang.String)
    {
        java.lang.ThreadGroup r0, $r3;
        java.lang.String r1;
        java.lang.Thread $r2;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>();

        specialinvoke r0.<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>($r3, r1);

        return;
    }

    public void <init>(java.lang.ThreadGroup, java.lang.String)
    {
        java.lang.ThreadGroup r0, r1;
        java.lang.String r2;
        java.util.ArrayList $r3, $r6;
        java.util.List $r4;
        java.lang.Iterable $r5;
        int $i0;
        boolean $z0;
        java.lang.NullPointerException $r7;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.ThreadGroup: int maxPriority> = 10;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(5);

        r0.<java.lang.ThreadGroup: java.util.List threadRefs> = $r3;

        $r4 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        $r5 = staticinvoke <libcore.util.CollectionUtils: java.lang.Iterable dereferenceIterable(java.lang.Iterable,boolean)>($r4, 1);

        r0.<java.lang.ThreadGroup: java.lang.Iterable threads> = $r5;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(3);

        r0.<java.lang.ThreadGroup: java.util.List groups> = $r6;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("parent == null");

        throw $r7;

     label1:
        r0.<java.lang.ThreadGroup: java.lang.String name> = r2;

        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent> = r1;

        if r1 == null goto label2;

        specialinvoke r1.<java.lang.ThreadGroup: void add(java.lang.ThreadGroup)>(r0);

        $i0 = virtualinvoke r1.<java.lang.ThreadGroup: int getMaxPriority()>();

        virtualinvoke r0.<java.lang.ThreadGroup: void setMaxPriority(int)>($i0);

        $z0 = virtualinvoke r1.<java.lang.ThreadGroup: boolean isDaemon()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<java.lang.ThreadGroup: void setDaemon(boolean)>(1);

     label2:
        return;
    }

    private void <init>()
    {
        java.lang.ThreadGroup r0;
        java.util.ArrayList $r1, $r4;
        java.util.List $r2;
        java.lang.Iterable $r3;

        r0 := @this: java.lang.ThreadGroup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.ThreadGroup: int maxPriority> = 10;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(5);

        r0.<java.lang.ThreadGroup: java.util.List threadRefs> = $r1;

        $r2 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        $r3 = staticinvoke <libcore.util.CollectionUtils: java.lang.Iterable dereferenceIterable(java.lang.Iterable,boolean)>($r2, 1);

        r0.<java.lang.ThreadGroup: java.lang.Iterable threads> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(3);

        r0.<java.lang.ThreadGroup: java.util.List groups> = $r4;

        r0.<java.lang.ThreadGroup: java.lang.String name> = "system";

        r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent> = null;

        return;
    }

    public int activeCount()
    {
        java.lang.ThreadGroup r0, r16;
        int i0, $i1;
        java.util.List r1, $r6, $r8, $r9, r14;
        java.util.Iterator r2, r15;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, $r12, $r13;
        java.lang.Iterable $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r10, $r11;

        r0 := @this: java.lang.ThreadGroup;

        i0 = 0;

        $r6 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r2 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Thread) $r11;

        $z2 = virtualinvoke r3.<java.lang.Thread: boolean isAlive()>();

        if $z2 == 0 goto label03;

        i0 = i0 + 1;

     label03:
        goto label02;

     label04:
        exitmonitor r1;

     label05:
        goto label08;

     label06:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label07:
        throw r4;

     label08:
        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r14 = $r8;

        entermonitor $r8;

     label09:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r15 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r10 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.ThreadGroup) $r10;

        $i1 = virtualinvoke r16.<java.lang.ThreadGroup: int activeCount()>();

        i0 = i0 + $i1;

        goto label10;

     label11:
        exitmonitor r14;

     label12:
        goto label15;

     label13:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r14;

     label14:
        throw r5;

     label15:
        return i0;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public int activeGroupCount()
    {
        java.lang.ThreadGroup r0, r3;
        int i0, $i1, $i2;
        java.util.List r1, $r5, $r6;
        java.util.Iterator r2;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: java.lang.ThreadGroup;

        i0 = 0;

        $r5 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.ThreadGroup) $r7;

        $i1 = virtualinvoke r3.<java.lang.ThreadGroup: int activeGroupCount()>();

        $i2 = 1 + $i1;

        i0 = i0 + $i2;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        return i0;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void add(java.lang.ThreadGroup) throws java.lang.IllegalThreadStateException
    {
        java.lang.ThreadGroup r0, r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        java.lang.IllegalThreadStateException $r6;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup;

        $r4 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<java.lang.ThreadGroup: boolean isDestroyed>;

        if $z0 == 0 goto label2;

        $r6 = new java.lang.IllegalThreadStateException;

        specialinvoke $r6.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r6;

     label2:
        $r5 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean allowThreadSuspension(boolean)
    {
        java.lang.ThreadGroup r0;
        boolean z0;

        r0 := @this: java.lang.ThreadGroup;

        z0 := @parameter0: boolean;

        return 1;
    }

    public final void checkAccess()
    {
        java.lang.ThreadGroup r0;

        r0 := @this: java.lang.ThreadGroup;

        return;
    }

    public final void destroy()
    {
        java.lang.ThreadGroup r0, $r10, $r12, $r13;
        java.util.List r1, r2, $r5, $r6, $r9, $r11;
        java.lang.Throwable r3, r4, $r27, $r30;
        boolean $z0, $z1, $z2;
        java.lang.Iterable $r7;
        java.util.Iterator $r8;
        java.lang.Object $r14;
        java.lang.StringBuilder $r15, $r18, $r20, $r23, $r24, $r25;
        java.lang.IllegalThreadStateException $r16, $r21;
        java.lang.String $r17, $r19, $r22, $r26, $r28, $r29;

        r0 := @this: java.lang.ThreadGroup;

        $r5 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $r6 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = $r6;

        entermonitor $r6;

     label02:
        $z0 = r0.<java.lang.ThreadGroup: boolean isDestroyed>;

        if $z0 == 0 goto label05;

        $r21 = new java.lang.IllegalThreadStateException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread group was already destroyed: ");

        $r26 = r0.<java.lang.ThreadGroup: java.lang.String name>;

        if $r26 == null goto label03;

        $r29 = r0.<java.lang.ThreadGroup: java.lang.String name>;

        goto label04;

     label03:
        $r29 = "n/a";

     label04:
        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label05:
        $r7 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        $r8 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r16 = new java.lang.IllegalThreadStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread group still contains threads: ");

        $r17 = r0.<java.lang.ThreadGroup: java.lang.String name>;

        if $r17 == null goto label06;

        $r22 = r0.<java.lang.ThreadGroup: java.lang.String name>;

        goto label07;

     label06:
        $r22 = "n/a";

     label07:
        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalThreadStateException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label08:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        $z2 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        $r11 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        $r14 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(0);

        $r13 = (java.lang.ThreadGroup) $r14;

        virtualinvoke $r13.<java.lang.ThreadGroup: void destroy()>();

        goto label08;

     label09:
        $r10 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        if $r10 == null goto label10;

        $r12 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        specialinvoke $r12.<java.lang.ThreadGroup: void remove(java.lang.ThreadGroup)>(r0);

     label10:
        r0.<java.lang.ThreadGroup: boolean isDestroyed> = 1;

        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r30 := @caughtexception;

        r3 = $r30;

        exitmonitor r2;

     label13:
        throw r3;

     label14:
        exitmonitor r1;

     label15:
        goto label18;

     label16:
        $r27 := @caughtexception;

        r4 = $r27;

        exitmonitor r1;

     label17:
        throw r4;

     label18:
        return;

        catch java.lang.Throwable from label02 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label01 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private void destroyIfEmptyDaemon()
    {
        java.lang.ThreadGroup r0;
        java.util.List r1, r2, $r5, $r8, $r9;
        java.lang.Throwable r3, r4, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Iterable $r6;
        java.util.Iterator $r7;

        r0 := @this: java.lang.ThreadGroup;

        $r5 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $z0 = r0.<java.lang.ThreadGroup: boolean isDaemon>;

        if $z0 == 0 goto label07;

        $z1 = r0.<java.lang.ThreadGroup: boolean isDestroyed>;

        if $z1 != 0 goto label07;

        $r6 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        $r7 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z2 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label07;

        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = $r8;

        entermonitor $r8;

     label02:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        $z3 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label03;

        virtualinvoke r0.<java.lang.ThreadGroup: void destroy()>();

     label03:
        exitmonitor r2;

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label06:
        throw r3;

     label07:
        exitmonitor r1;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        r4 = $r11;

        exitmonitor r1;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int enumerate(java.lang.Thread[])
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread[] r1;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Thread[];

        $i0 = virtualinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.Thread[],boolean)>(r1, 1);

        return $i0;
    }

    public int enumerate(java.lang.Thread[], boolean)
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread[] r1;
        boolean z0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Thread[];

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerateGeneric(java.lang.Object[],boolean,int,boolean)>(r1, z0, 0, 1);

        return $i0;
    }

    public int enumerate(java.lang.ThreadGroup[])
    {
        java.lang.ThreadGroup r0;
        java.lang.ThreadGroup[] r1;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup[];

        $i0 = virtualinvoke r0.<java.lang.ThreadGroup: int enumerate(java.lang.ThreadGroup[],boolean)>(r1, 1);

        return $i0;
    }

    public int enumerate(java.lang.ThreadGroup[], boolean)
    {
        java.lang.ThreadGroup r0;
        java.lang.ThreadGroup[] r1;
        boolean z0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup[];

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<java.lang.ThreadGroup: int enumerateGeneric(java.lang.Object[],boolean,int,boolean)>(r1, z0, 0, 0);

        return $i0;
    }

    private int enumerateGeneric(java.lang.Object[], boolean, int, boolean)
    {
        java.lang.ThreadGroup r0, r26;
        java.lang.Object[] r1;
        boolean z0, z1, $z2, $z3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.util.List r2, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r18, r23, r24;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, r6, $r20, $r21, $r22;
        java.lang.Object $r11, $r12, $r16, $r19;
        java.lang.ref.WeakReference $r17;
        java.util.Iterator r25;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Object[];

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        z1 := @parameter3: boolean;

        if z1 == 0 goto label11;

        $r14 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r2 = $r14;

        entermonitor $r14;

     label01:
        $r15 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        $i6 = interfaceinvoke $r15.<java.util.List: int size()>();

        i1 = $i6 - 1;

     label02:
        if i1 < 0 goto label06;

        $r18 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        $r16 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>(i1);

        $r17 = (java.lang.ref.WeakReference) $r16;

        $r19 = virtualinvoke $r17.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r3 = (java.lang.Thread) $r19;

        if r3 == null goto label05;

        $z3 = virtualinvoke r3.<java.lang.Thread: boolean isAlive()>();

        if $z3 == 0 goto label05;

        $i7 = lengthof r1;

        if i0 < $i7 goto label04;

        exitmonitor r2;

     label03:
        return i0;

     label04:
        $i8 = i0;

        i0 = i0 + 1;

        r1[$i8] = r3;

     label05:
        i1 = i1 + -1;

        goto label02;

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r20 := @caughtexception;

        r4 = $r20;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        goto label20;

     label11:
        $r7 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r23 = $r7;

        entermonitor $r7;

     label12:
        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        i9 = $i2 - 1;

     label13:
        if i9 < 0 goto label16;

        $i5 = lengthof r1;

        if i0 < $i5 goto label15;

        exitmonitor r23;

     label14:
        return i0;

     label15:
        $i4 = i0;

        i0 = i0 + 1;

        $r13 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        $r12 = interfaceinvoke $r13.<java.util.List: java.lang.Object get(int)>(i9);

        r1[$i4] = $r12;

        i9 = i9 + -1;

        goto label13;

     label16:
        exitmonitor r23;

     label17:
        goto label20;

     label18:
        $r22 := @caughtexception;

        r5 = $r22;

        exitmonitor r23;

     label19:
        throw r5;

     label20:
        if z0 == 0 goto label29;

        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r24 = $r9;

        entermonitor $r9;

     label21:
        $r10 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r25 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z2 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label25;

        $r11 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (java.lang.ThreadGroup) $r11;

        $i3 = lengthof r1;

        if i0 < $i3 goto label24;

        exitmonitor r24;

     label23:
        return i0;

     label24:
        i0 = specialinvoke r26.<java.lang.ThreadGroup: int enumerateGeneric(java.lang.Object[],boolean,int,boolean)>(r1, z0, i0, z1);

        goto label22;

     label25:
        exitmonitor r24;

     label26:
        goto label29;

     label27:
        $r21 := @caughtexception;

        r6 = $r21;

        exitmonitor r24;

     label28:
        throw r6;

     label29:
        return i0;

        catch java.lang.Throwable from label01 to label03 with label08;
        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label12 to label14 with label18;
        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
        catch java.lang.Throwable from label21 to label23 with label27;
        catch java.lang.Throwable from label24 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
    }

    public final int getMaxPriority()
    {
        java.lang.ThreadGroup r0;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        $i0 = r0.<java.lang.ThreadGroup: int maxPriority>;

        return $i0;
    }

    public final java.lang.String getName()
    {
        java.lang.ThreadGroup r0;
        java.lang.String $r1;

        r0 := @this: java.lang.ThreadGroup;

        $r1 = r0.<java.lang.ThreadGroup: java.lang.String name>;

        return $r1;
    }

    public final java.lang.ThreadGroup getParent()
    {
        java.lang.ThreadGroup r0, $r1;

        r0 := @this: java.lang.ThreadGroup;

        $r1 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        return $r1;
    }

    public final void interrupt()
    {
        java.lang.ThreadGroup r0, r16;
        java.util.List r1, $r6, $r8, $r9, r14;
        java.util.Iterator r2, r15;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, $r12, $r13;
        java.lang.Iterable $r7;
        boolean $z0, $z1;
        java.lang.Object $r10, $r11;

        r0 := @this: java.lang.ThreadGroup;

        $r6 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r2 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Thread) $r10;

        virtualinvoke r3.<java.lang.Thread: void interrupt()>();

        goto label02;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label06:
        throw r4;

     label07:
        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r14 = $r8;

        entermonitor $r8;

     label08:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r15 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r11 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.ThreadGroup) $r11;

        virtualinvoke r16.<java.lang.ThreadGroup: void interrupt()>();

        goto label09;

     label10:
        exitmonitor r14;

     label11:
        goto label14;

     label12:
        $r12 := @caughtexception;

        r5 = $r12;

        exitmonitor r14;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final boolean isDaemon()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;

        r0 := @this: java.lang.ThreadGroup;

        $z0 = r0.<java.lang.ThreadGroup: boolean isDaemon>;

        return $z0;
    }

    public synchronized boolean isDestroyed()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;

        r0 := @this: java.lang.ThreadGroup;

        $z0 = r0.<java.lang.ThreadGroup: boolean isDestroyed>;

        return $z0;
    }

    public void list()
    {
        java.lang.ThreadGroup r0;
        java.io.PrintStream $r1;

        r0 := @this: java.lang.ThreadGroup;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println()>();

        specialinvoke r0.<java.lang.ThreadGroup: void list(int)>(0);

        return;
    }

    private void list(int)
    {
        java.lang.ThreadGroup r0, r19;
        int i0, i1;
        java.util.List r1, $r8, $r10, $r11, r17;
        java.util.Iterator r2, r18;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, $r15, $r16;
        java.io.PrintStream $r6, $r13;
        java.lang.String $r7;
        java.lang.Iterable $r9;
        boolean $z0, $z1;
        java.lang.Object $r12, $r14;

        r0 := @this: java.lang.ThreadGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.ThreadGroup: void indent(int)>(i0);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke r0.<java.lang.ThreadGroup: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        i1 = i0 + 1;

        $r8 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r8;

        entermonitor $r8;

     label01:
        $r9 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r2 = interfaceinvoke $r9.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r14 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Thread) $r14;

        specialinvoke r0.<java.lang.ThreadGroup: void indent(int)>(i1);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.Object)>(r3);

        goto label02;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r1;

     label06:
        throw r4;

     label07:
        $r10 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r17 = $r10;

        entermonitor $r10;

     label08:
        $r11 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r18 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.lang.ThreadGroup) $r12;

        specialinvoke r19.<java.lang.ThreadGroup: void list(int)>(i1);

        goto label09;

     label10:
        exitmonitor r17;

     label11:
        goto label14;

     label12:
        $r15 := @caughtexception;

        r5 = $r15;

        exitmonitor r17;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private void indent(int)
    {
        java.lang.ThreadGroup r0;
        int i0, i1;
        java.io.PrintStream $r1;

        r0 := @this: java.lang.ThreadGroup;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>("    ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public final boolean parentOf(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0, r1;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup;

     label1:
        if r1 == null goto label3;

        if r0 != r1 goto label2;

        return 1;

     label2:
        r1 = r1.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        goto label1;

     label3:
        return 0;
    }

    private void remove(java.lang.ThreadGroup)
    {
        java.lang.ThreadGroup r0, r1, r4;
        java.util.List r2, $r6, $r7;
        java.util.Iterator r3;
        java.lang.Throwable r5, $r9;
        boolean $z0, $z1;
        java.lang.Object $r8;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.ThreadGroup;

        $r6 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.ThreadGroup) $r8;

        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label4;

     label3:
        goto label2;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r2;

     label7:
        throw r5;

     label8:
        specialinvoke r0.<java.lang.ThreadGroup: void destroyIfEmptyDaemon()>();

        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public final void resume()
    {
        java.lang.ThreadGroup r0, r16;
        java.util.List r1, $r6, $r8, $r9, r14;
        java.util.Iterator r2, r15;
        java.lang.Thread r3;
        java.lang.Throwable r4, r5, $r12, $r13;
        java.lang.Iterable $r7;
        boolean $z0, $z1;
        java.lang.Object $r10, $r11;

        r0 := @this: java.lang.ThreadGroup;

        $r6 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r6;

        entermonitor $r6;

     label01:
        $r7 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r2 = interfaceinvoke $r7.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Thread) $r10;

        virtualinvoke r3.<java.lang.Thread: void resume()>();

        goto label02;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r1;

     label06:
        throw r4;

     label07:
        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r14 = $r8;

        entermonitor $r8;

     label08:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r15 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z1 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r11 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.ThreadGroup) $r11;

        virtualinvoke r16.<java.lang.ThreadGroup: void resume()>();

        goto label09;

     label10:
        exitmonitor r14;

     label11:
        goto label14;

     label12:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r14;

     label13:
        throw r5;

     label14:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public final void setDaemon(boolean)
    {
        java.lang.ThreadGroup r0;
        boolean z0;

        r0 := @this: java.lang.ThreadGroup;

        z0 := @parameter0: boolean;

        r0.<java.lang.ThreadGroup: boolean isDaemon> = z0;

        return;
    }

    public final void setMaxPriority(int)
    {
        java.lang.ThreadGroup r0, r3, $r5, $r6;
        int i0, i1, $i2, $i3, $i4;
        java.util.List r1, $r7, $r8;
        java.util.Iterator r2;
        java.lang.Throwable r4, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: java.lang.ThreadGroup;

        i0 := @parameter0: int;

        $i2 = r0.<java.lang.ThreadGroup: int maxPriority>;

        if i0 > $i2 goto label12;

        if i0 >= 1 goto label01;

        i0 = 1;

     label01:
        $r5 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        if $r5 != null goto label02;

        $i3 = i0;

        goto label03;

     label02:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        $i3 = virtualinvoke $r6.<java.lang.ThreadGroup: int getMaxPriority()>();

     label03:
        i1 = $i3;

        if i1 > i0 goto label04;

        $i4 = i1;

        goto label05;

     label04:
        $i4 = i0;

     label05:
        r0.<java.lang.ThreadGroup: int maxPriority> = $i4;

        $r7 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r1 = $r7;

        entermonitor $r7;

     label06:
        $r8 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r2 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.ThreadGroup) $r9;

        virtualinvoke r3.<java.lang.ThreadGroup: void setMaxPriority(int)>(i0);

        goto label07;

     label08:
        exitmonitor r1;

     label09:
        goto label12;

     label10:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r1;

     label11:
        throw r4;

     label12:
        return;

        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public final void stop()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.lang.ThreadGroup;

        $z0 = specialinvoke r0.<java.lang.ThreadGroup: boolean stopHelper()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void stop()>();

     label1:
        return;
    }

    private boolean stopHelper()
    {
        java.lang.ThreadGroup r0, r17;
        boolean z0, $z1, $z2, $z3;
        java.util.List r1, $r7, $r9, $r10, r15;
        java.lang.Thread r2, r4;
        java.util.Iterator r3, r16;
        java.lang.Throwable r5, r6, $r13, $r14;
        java.lang.Iterable $r8;
        java.lang.Object $r11, $r12;

        r0 := @this: java.lang.ThreadGroup;

        z0 = 0;

        $r7 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r7;

        entermonitor $r7;

     label01:
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r12;

        if r4 != r2 goto label03;

        z0 = 1;

        goto label04;

     label03:
        virtualinvoke r4.<java.lang.Thread: void stop()>();

     label04:
        goto label02;

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r14 := @caughtexception;

        r5 = $r14;

        exitmonitor r1;

     label08:
        throw r5;

     label09:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r15 = $r9;

        entermonitor $r9;

     label10:
        $r10 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r16 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.ThreadGroup) $r11;

        $z3 = specialinvoke r17.<java.lang.ThreadGroup: boolean stopHelper()>();

        z0 = z0 | $z3;

        goto label11;

     label12:
        exitmonitor r15;

     label13:
        goto label16;

     label14:
        $r13 := @caughtexception;

        r6 = $r13;

        exitmonitor r15;

     label15:
        throw r6;

     label16:
        return z0;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public final void suspend()
    {
        java.lang.ThreadGroup r0;
        boolean $z0;
        java.lang.Thread $r1;

        r0 := @this: java.lang.ThreadGroup;

        $z0 = specialinvoke r0.<java.lang.ThreadGroup: boolean suspendHelper()>();

        if $z0 == 0 goto label1;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void suspend()>();

     label1:
        return;
    }

    private boolean suspendHelper()
    {
        java.lang.ThreadGroup r0, r17;
        boolean z0, $z1, $z2, $z3;
        java.util.List r1, $r7, $r9, $r10, r15;
        java.lang.Thread r2, r4;
        java.util.Iterator r3, r16;
        java.lang.Throwable r5, r6, $r13, $r14;
        java.lang.Iterable $r8;
        java.lang.Object $r11, $r12;

        r0 := @this: java.lang.ThreadGroup;

        z0 = 0;

        $r7 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r1 = $r7;

        entermonitor $r7;

     label01:
        r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r8 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r3 = interfaceinvoke $r8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label02:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Thread) $r12;

        if r4 != r2 goto label03;

        z0 = 1;

        goto label04;

     label03:
        virtualinvoke r4.<java.lang.Thread: void suspend()>();

     label04:
        goto label02;

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r13 := @caughtexception;

        r5 = $r13;

        exitmonitor r1;

     label08:
        throw r5;

     label09:
        $r9 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r15 = $r9;

        entermonitor $r9;

     label10:
        $r10 = r0.<java.lang.ThreadGroup: java.util.List groups>;

        r16 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label11:
        $z2 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r11 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.ThreadGroup) $r11;

        $z3 = specialinvoke r17.<java.lang.ThreadGroup: boolean suspendHelper()>();

        z0 = z0 | $z3;

        goto label11;

     label12:
        exitmonitor r15;

     label13:
        goto label16;

     label14:
        $r14 := @caughtexception;

        r6 = $r14;

        exitmonitor r15;

     label15:
        throw r6;

     label16:
        return z0;

        catch java.lang.Throwable from label01 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public java.lang.String toString()
    {
        java.lang.ThreadGroup r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r11;
        int $i0;

        r0 := @this: java.lang.ThreadGroup;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[name=");

        $r6 = virtualinvoke r0.<java.lang.ThreadGroup: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",maxPriority=");

        $i0 = virtualinvoke r0.<java.lang.ThreadGroup: int getMaxPriority()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public void uncaughtException(java.lang.Thread, java.lang.Throwable)
    {
        java.lang.ThreadGroup r0, $r3, $r7;
        java.lang.Thread r1;
        java.lang.Throwable r2;
        java.lang.Thread$UncaughtExceptionHandler $r4, $r6;
        boolean $z0;
        java.io.PrintStream $r5;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Thread;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        if $r3 == null goto label1;

        $r7 = r0.<java.lang.ThreadGroup: java.lang.ThreadGroup parent>;

        virtualinvoke $r7.<java.lang.ThreadGroup: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);

        goto label3;

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();

        if $r4 == null goto label2;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();

        interfaceinvoke $r6.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r1, r2);

        goto label3;

     label2:
        $z0 = r2 instanceof java.lang.ThreadDeath;

        if $z0 != 0 goto label3;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r2.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r5);

     label3:
        return;
    }

    final void addThread(java.lang.Thread) throws java.lang.IllegalThreadStateException
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread r1;
        java.util.List r2, $r4, $r6;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        java.lang.ref.WeakReference $r5;
        java.lang.IllegalThreadStateException $r7;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Thread;

        $r4 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = r0.<java.lang.ThreadGroup: boolean isDestroyed>;

        if $z0 == 0 goto label2;

        $r7 = new java.lang.IllegalThreadStateException;

        specialinvoke $r7.<java.lang.IllegalThreadStateException: void <init>()>();

        throw $r7;

     label2:
        $r6 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        $r5 = new java.lang.ref.WeakReference;

        specialinvoke $r5.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r1);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r5);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final void removeThread(java.lang.Thread) throws java.lang.IllegalThreadStateException
    {
        java.lang.ThreadGroup r0;
        java.lang.Thread r1, $r8;
        java.util.List r2, $r5;
        java.util.Iterator r3;
        java.lang.Throwable r4, $r9;
        java.lang.Iterable $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;

        r0 := @this: java.lang.ThreadGroup;

        r1 := @parameter0: java.lang.Thread;

        $r5 = r0.<java.lang.ThreadGroup: java.util.List threadRefs>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<java.lang.ThreadGroup: java.lang.Iterable threads>;

        r3 = interfaceinvoke $r6.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.Thread) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label3;

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label6:
        throw r4;

     label7:
        specialinvoke r0.<java.lang.ThreadGroup: void destroyIfEmptyDaemon()>();

        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        java.lang.ThreadGroup $r0, $r1, $r2;

        $r0 = new java.lang.ThreadGroup;

        specialinvoke $r0.<java.lang.ThreadGroup: void <init>()>();

        <java.lang.ThreadGroup: java.lang.ThreadGroup systemThreadGroup> = $r0;

        $r1 = new java.lang.ThreadGroup;

        $r2 = <java.lang.ThreadGroup: java.lang.ThreadGroup systemThreadGroup>;

        specialinvoke $r1.<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>($r2, "main");

        <java.lang.ThreadGroup: java.lang.ThreadGroup mainThreadGroup> = $r1;

        return;
    }
}
