final class java.util.concurrent.ConcurrentSkipListMap$HeadIndex extends java.util.concurrent.ConcurrentSkipListMap$Index
{
    final int level;

    void <init>(java.util.concurrent.ConcurrentSkipListMap$Node, java.util.concurrent.ConcurrentSkipListMap$Index, java.util.concurrent.ConcurrentSkipListMap$Index, int)
    {
        java.util.concurrent.ConcurrentSkipListMap$HeadIndex r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.util.concurrent.ConcurrentSkipListMap$Index r2, r3;
        int i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$HeadIndex;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Index;

        r3 := @parameter2: java.util.concurrent.ConcurrentSkipListMap$Index;

        i0 := @parameter3: int;

        specialinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Index: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r1, r2, r3);

        r0.<java.util.concurrent.ConcurrentSkipListMap$HeadIndex: int level> = i0;

        return;
    }
}
