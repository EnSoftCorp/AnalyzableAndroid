public abstract class libcore.net.UriCodec extends java.lang.Object
{

    public void <init>()
    {
        libcore.net.UriCodec r0;

        r0 := @this: libcore.net.UriCodec;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract boolean isRetained(char);

    public final java.lang.String validate(java.lang.String, int, int, java.lang.String) throws java.net.URISyntaxException
    {
        libcore.net.UriCodec r0;
        java.lang.String r1, r2, $r3, $r8, $r13, $r18, $r21;
        int i0, i1, i2, i4, i5, $i6, $i8, $i9, $i11;
        char c3, $c7, $c10;
        boolean $z0;
        java.net.URISyntaxException $r4, $r10, $r19;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r11, $r12, $r14, $r15, $r16, $r17, $r20;

        r0 := @this: libcore.net.UriCodec;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i2 = i0;

     label01:
        if i2 >= i1 goto label12;

        c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if c3 < 97 goto label02;

        if c3 <= 122 goto label05;

     label02:
        if c3 < 65 goto label03;

        if c3 <= 90 goto label05;

     label03:
        if c3 < 48 goto label04;

        if c3 <= 57 goto label05;

     label04:
        $z0 = virtualinvoke r0.<libcore.net.UriCodec: boolean isRetained(char)>(c3);

        if $z0 == 0 goto label06;

     label05:
        i2 = i2 + 1;

        goto label11;

     label06:
        if c3 != 37 goto label10;

        $i6 = i2 + 2;

        if $i6 < i1 goto label07;

        $r19 = new java.net.URISyntaxException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incomplete % sequence in ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>(r1, $r21, i2);

        throw $r19;

     label07:
        $i8 = i2 + 1;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i8);

        i4 = staticinvoke <libcore.net.UriCodec: int hexToInt(char)>($c7);

        $i9 = i2 + 2;

        $c10 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i9);

        i5 = staticinvoke <libcore.net.UriCodec: int hexToInt(char)>($c10);

        if i4 == -1 goto label08;

        if i5 != -1 goto label09;

     label08:
        $r10 = new java.net.URISyntaxException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid % sequence: ");

        $i11 = i2 + 3;

        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i11);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>(r1, $r18, i2);

        throw $r10;

     label09:
        i2 = i2 + 3;

        goto label11;

     label10:
        $r4 = new java.net.URISyntaxException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal character in ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>(r1, $r8, i2);

        throw $r4;

     label11:
        goto label01;

     label12:
        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        return $r3;
    }

    public static void validateSimple(java.lang.String, java.lang.String) throws java.net.URISyntaxException
    {
        java.lang.String r0, r1;
        int i0, $i2, $i3;
        char c1;
        java.net.URISyntaxException $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label6;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 < 97 goto label2;

        if c1 <= 122 goto label5;

     label2:
        if c1 < 65 goto label3;

        if c1 <= 90 goto label5;

     label3:
        if c1 < 48 goto label4;

        if c1 <= 57 goto label5;

     label4:
        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c1);

        if $i3 > -1 goto label5;

        $r2 = new java.net.URISyntaxException;

        specialinvoke $r2.<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String,int)>(r0, "Illegal character", i0);

        throw $r2;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return;
    }

    private void appendEncoded(java.lang.StringBuilder, java.lang.String, java.nio.charset.Charset, boolean)
    {
        libcore.net.UriCodec r0;
        java.lang.StringBuilder r1;
        java.lang.String r2, $r4, $r7;
        java.nio.charset.Charset r3;
        boolean z0, $z1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        char c2;
        java.lang.NullPointerException $r9;

        r0 := @this: libcore.net.UriCodec;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.nio.charset.Charset;

        z0 := @parameter3: boolean;

        if r2 != null goto label01;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("s == null");

        throw $r9;

     label01:
        i0 = -1;

        i1 = 0;

     label02:
        $i3 = virtualinvoke r2.<java.lang.String: int length()>();

        if i1 >= $i3 goto label12;

        c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i1);

        if c2 < 97 goto label03;

        if c2 <= 122 goto label06;

     label03:
        if c2 < 65 goto label04;

        if c2 <= 90 goto label06;

     label04:
        if c2 < 48 goto label05;

        if c2 <= 57 goto label06;

     label05:
        $z1 = virtualinvoke r0.<libcore.net.UriCodec: boolean isRetained(char)>(c2);

        if $z1 != 0 goto label06;

        if c2 != 37 goto label10;

        if z0 == 0 goto label10;

     label06:
        if i0 == -1 goto label07;

        $r7 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        staticinvoke <libcore.net.UriCodec: void appendHex(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset)>(r1, $r7, r3);

        i0 = -1;

     label07:
        if c2 != 37 goto label08;

        if z0 == 0 goto label08;

        $i5 = i1 + 3;

        $i7 = virtualinvoke r2.<java.lang.String: int length()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>(r2, i1, $i6);

        i1 = i1 + 2;

        goto label11;

     label08:
        if c2 != 32 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(43);

        goto label11;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label11;

     label10:
        if i0 != -1 goto label11;

        i0 = i1;

     label11:
        i1 = i1 + 1;

        goto label02;

     label12:
        if i0 == -1 goto label13;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i0, $i4);

        staticinvoke <libcore.net.UriCodec: void appendHex(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset)>(r1, $r4, r3);

     label13:
        return;
    }

    public final java.lang.String encode(java.lang.String, java.nio.charset.Charset)
    {
        libcore.net.UriCodec r0;
        java.lang.String r1, $r5;
        java.nio.charset.Charset r2;
        java.lang.StringBuilder r3, $r4;
        int $i0, $i1;

        r0 := @this: libcore.net.UriCodec;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.charset.Charset;

        $r4 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 + 16;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        r3 = $r4;

        specialinvoke r0.<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset,boolean)>(r3, r1, r2, 0);

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public final void appendEncoded(java.lang.StringBuilder, java.lang.String)
    {
        libcore.net.UriCodec r0;
        java.lang.StringBuilder r1;
        java.lang.String r2;
        java.nio.charset.Charset $r3;

        r0 := @this: libcore.net.UriCodec;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke r0.<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset,boolean)>(r1, r2, $r3, 0);

        return;
    }

    public final void appendPartiallyEncoded(java.lang.StringBuilder, java.lang.String)
    {
        libcore.net.UriCodec r0;
        java.lang.StringBuilder r1;
        java.lang.String r2;
        java.nio.charset.Charset $r3;

        r0 := @this: libcore.net.UriCodec;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke r0.<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String,java.nio.charset.Charset,boolean)>(r1, r2, $r3, 1);

        return;
    }

    public static java.lang.String decode(java.lang.String, boolean, java.nio.charset.Charset, boolean)
    {
        java.lang.String r0, $r7, $r9, $r10, $r17;
        boolean z0, z1;
        java.nio.charset.Charset r1;
        java.lang.StringBuilder r2, $r5, $r14, $r15, $r16, $r18, $r19;
        java.io.ByteArrayOutputStream r3, $r6;
        int i0, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i16, $i17, $i19, $i21;
        char c1, $c11, $c15, $c18;
        byte[] r4, $r12;
        java.lang.IllegalArgumentException $r13;
        byte $b20;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.nio.charset.Charset;

        z1 := @parameter3: boolean;

        $i4 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(37);

        if $i4 != -1 goto label02;

        if z0 == 0 goto label01;

        $i21 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(43);

        if $i21 != -1 goto label02;

     label01:
        return r0;

     label02:
        $r5 = new java.lang.StringBuilder;

        $i5 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i5);

        r2 = $r5;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r3 = $r6;

        i0 = 0;

     label03:
        $i6 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i6 goto label12;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 != 37 goto label09;

     label04:
        $i7 = i0 + 2;

        $i8 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i7 >= $i8 goto label05;

        $i14 = i0 + 1;

        $c15 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i14);

        $i12 = staticinvoke <libcore.net.UriCodec: int hexToInt(char)>($c15);

        i2 = $i12;

        if $i12 == -1 goto label05;

        $i13 = i0 + 2;

        $c18 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i13);

        $i19 = staticinvoke <libcore.net.UriCodec: int hexToInt(char)>($c18);

        i3 = $i19;

        if $i19 == -1 goto label05;

        $i16 = i2 << 4;

        $i17 = $i16 + i3;

        $b20 = (byte) $i17;

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(int)>($b20);

        goto label07;

     label05:
        if z1 == 0 goto label06;

        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid % sequence at ");

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r16 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label06:
        $r9 = "\ufffd";

        r4 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r1);

        $i9 = lengthof r4;

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r4, 0, $i9);

     label07:
        i0 = i0 + 3;

        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i10 goto label08;

        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if $c11 == 37 goto label04;

     label08:
        $r10 = new java.lang.String;

        $r12 = virtualinvoke r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r12, r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke r3.<java.io.ByteArrayOutputStream: void reset()>();

        goto label11;

     label09:
        if z0 == 0 goto label10;

        if c1 != 43 goto label10;

        c1 = 32;

     label10:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        i0 = i0 + 1;

     label11:
        goto label03;

     label12:
        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static int hexToInt(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5;

        c0 := @parameter0: char;

        if 48 > c0 goto label1;

        if c0 > 57 goto label1;

        $i5 = c0 - 48;

        return $i5;

     label1:
        if 97 > c0 goto label2;

        if c0 > 102 goto label2;

        $i3 = c0 - 97;

        $i4 = 10 + $i3;

        return $i4;

     label2:
        if 65 > c0 goto label3;

        if c0 > 70 goto label3;

        $i1 = c0 - 65;

        $i2 = 10 + $i1;

        return $i2;

     label3:
        return -1;
    }

    public static java.lang.String decode(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.nio.charset.Charset $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r2 = staticinvoke <libcore.net.UriCodec: java.lang.String decode(java.lang.String,boolean,java.nio.charset.Charset,boolean)>(r0, 0, $r1, 1);

        return $r2;
    }

    private static void appendHex(java.lang.StringBuilder, java.lang.String, java.nio.charset.Charset)
    {
        java.lang.StringBuilder r0;
        java.lang.String r1;
        java.nio.charset.Charset r2;
        byte[] r3;
        int i0, i1;
        byte b2;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.charset.Charset;

        r3 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r2);

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        b2 = r3[i1];

        staticinvoke <libcore.net.UriCodec: void appendHex(java.lang.StringBuilder,byte)>(r0, b2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void appendHex(java.lang.StringBuilder, byte)
    {
        java.lang.StringBuilder r0;
        byte b0;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.StringBuilder;

        b0 := @parameter1: byte;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(37);

        $r2 = staticinvoke <java.lang.Byte: java.lang.String toHexString(byte,boolean)>(b0, 1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;
    }
}
