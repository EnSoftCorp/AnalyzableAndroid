class java.util.concurrent.ConcurrentHashMap$BaseIterator extends java.util.concurrent.ConcurrentHashMap$Traverser
{
    final java.util.concurrent.ConcurrentHashMap map;
    java.util.concurrent.ConcurrentHashMap$Node lastReturned;

    void <init>(java.util.concurrent.ConcurrentHashMap$Node[], int, int, int, java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$BaseIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1;
        int i0, i1, i2;
        java.util.concurrent.ConcurrentHashMap r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$BaseIterator;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r1, i0, i1, i2);

        r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap map> = r2;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        return;
    }

    public final boolean hasNext()
    {
        java.util.concurrent.ConcurrentHashMap$BaseIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$BaseIterator;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap$Node next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean hasMoreElements()
    {
        java.util.concurrent.ConcurrentHashMap$BaseIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$BaseIterator;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap$Node next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void remove()
    {
        java.util.concurrent.ConcurrentHashMap$BaseIterator r0;
        java.util.concurrent.ConcurrentHashMap$Node r1, $r2;
        java.lang.Object $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$BaseIterator;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap$Node lastReturned>;

        r1 = $r2;

        if $r2 != null goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap$Node lastReturned> = null;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$BaseIterator: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = r1.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>($r3, null, null);

        return;
    }
}
