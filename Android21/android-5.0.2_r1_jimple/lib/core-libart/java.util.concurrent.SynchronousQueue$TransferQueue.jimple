final class java.util.concurrent.SynchronousQueue$TransferQueue extends java.util.concurrent.SynchronousQueue$Transferer
{
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode head;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail;
    transient volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;
    private static final long tailOffset;
    private static final long cleanMeOffset;

    void <init>()
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r2;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        specialinvoke r0.<java.util.concurrent.SynchronousQueue$Transferer: void <init>()>();

        $r2 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        specialinvoke $r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(null, 0);

        r1 = $r2;

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head> = r1;

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail> = r1;

        return;
    }

    void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r1 != $r3 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next> = r1;

     label1:
        return;
    }

    void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset>;

        virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

     label1:
        return;
    }

    boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    java.lang.Object transfer(java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.lang.Object r1, r6, $r8, $r12, r15;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r2, r3, r4, r5, $r7, $r9, $r10, $r11, r14;
        byte $b1;
        java.lang.Thread $r13;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        r2 = null;

        if r1 == null goto label01;

        $z6 = 1;

        goto label02;

     label01:
        $z6 = 0;

     label02:
        z1 = $z6;

     label03:
        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        r4 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r3 == null goto label03;

        if r4 != null goto label04;

        goto label03;

     label04:
        if r4 == r3 goto label05;

        $z4 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isData>;

        if $z4 != z1 goto label16;

     label05:
        r5 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r7 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r3 == $r7 goto label06;

        goto label03;

     label06:
        if r5 == null goto label07;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r5);

        goto label03;

     label07:
        if z0 == 0 goto label08;

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label08;

        return null;

     label08:
        if r2 != null goto label09;

        $r9 = new java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        specialinvoke $r9.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void <init>(java.lang.Object,boolean)>(r1, z1);

        r2 = $r9;

     label09:
        $z2 = virtualinvoke r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r2);

        if $z2 != 0 goto label10;

        goto label03;

     label10:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        r6 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.lang.Object,boolean,long)>(r2, r1, z0, l0);

        if r6 != r2 goto label11;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        return null;

     label11:
        $z3 = virtualinvoke r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isOffList()>();

        if $z3 != 0 goto label13;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r2);

        if r6 == null goto label12;

        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item> = r2;

     label12:
        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label13:
        if r6 == null goto label14;

        $r8 = r6;

        goto label15;

     label14:
        $r8 = r1;

     label15:
        return $r8;

     label16:
        r14 = r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r10 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r3 != $r10 goto label03;

        if r14 == null goto label03;

        $r11 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        if r4 == $r11 goto label17;

        goto label03;

     label17:
        r15 = r14.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if r15 == null goto label18;

        $z7 = 1;

        goto label19;

     label18:
        $z7 = 0;

     label19:
        if z1 == $z7 goto label20;

        if r15 == r14 goto label20;

        $z5 = virtualinvoke r14.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casItem(java.lang.Object,java.lang.Object)>(r15, r1);

        if $z5 != 0 goto label21;

     label20:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r14);

        goto label03;

     label21:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r4, r14);

        $r13 = r14.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r13);

        if r15 == null goto label22;

        $r12 = r15;

        goto label23;

     label22:
        $r12 = r1;

     label23:
        return $r12;
    }

    java.lang.Object awaitFulfill(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.lang.Object, boolean, long)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, $r5, $r6;
        java.lang.Object r2, r4;
        boolean z0, $z1;
        long l0, l1, $l3, $l7, $l8;
        java.lang.Thread r3, $r7;
        int i2, $i5;
        byte $b4, $b6;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        l0 := @parameter3: long;

        if z0 == 0 goto label01;

        $l8 = staticinvoke <java.lang.System: long nanoTime()>();

        $l7 = $l8 + l0;

        goto label02;

     label01:
        $l7 = 0L;

     label02:
        l1 = $l7;

        r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        $r6 = $r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r6 != r1 goto label04;

        if z0 == 0 goto label03;

        $i5 = <java.util.concurrent.SynchronousQueue: int maxTimedSpins>;

        goto label05;

     label03:
        $i5 = <java.util.concurrent.SynchronousQueue: int maxUntimedSpins>;

        goto label05;

     label04:
        $i5 = 0;

     label05:
        i2 = $i5;

     label06:
        $z1 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label07;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);

     label07:
        r4 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if r4 == r2 goto label08;

        return r4;

     label08:
        if z0 == 0 goto label09;

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l1 - $l3;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label09;

        virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: void tryCancel(java.lang.Object)>(r2);

        goto label06;

     label09:
        if i2 <= 0 goto label10;

        i2 = i2 + -1;

        goto label13;

     label10:
        $r7 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter>;

        if $r7 != null goto label11;

        r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = r3;

        goto label13;

     label11:
        if z0 != 0 goto label12;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label13;

     label12:
        $b4 = l0 cmp 1000L;

        if $b4 <= 0 goto label13;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, l0);

     label13:
        goto label06;
    }

    void clean(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue r0;
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r1, r2, r3, r4, r5, r6, r7, r8, r9, $r10, $r11, $r12, r13;
        boolean $z0, $z2, $z3, $z4, $z5;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Thread waiter> = null;

     label01:
        $r10 = r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r10 != r2 goto label13;

        r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode head>;

        r4 = r3.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r4 == null goto label02;

        $z5 = virtualinvoke r4.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();

        if $z5 == 0 goto label02;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceHead(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r3, r4);

        goto label01;

     label02:
        r5 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r5 != r3 goto label03;

        return;

     label03:
        r6 = r5.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        $r11 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode tail>;

        if r5 == $r11 goto label04;

        goto label01;

     label04:
        if r6 == null goto label05;

        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: void advanceTail(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r5, r6);

        goto label01;

     label05:
        if r2 == r5 goto label07;

        r7 = r2.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r7 == r2 goto label06;

        $z3 = virtualinvoke r1.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r2, r7);

        if $z3 == 0 goto label07;

     label06:
        return;

     label07:
        r13 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue: java.util.concurrent.SynchronousQueue$TransferQueue$QNode cleanMe>;

        if r13 == null goto label11;

        r8 = r13.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if r8 == null goto label08;

        if r8 == r13 goto label08;

        $z2 = virtualinvoke r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isCancelled()>();

        if $z2 == 0 goto label08;

        if r8 == r5 goto label09;

        $r12 = r8.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        r9 = $r12;

        if $r12 == null goto label09;

        if r9 == r8 goto label09;

        $z4 = virtualinvoke r13.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r8, r9);

        if $z4 == 0 goto label09;

     label08:
        virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(r13, null);

     label09:
        if r13 != r1 goto label10;

        return;

     label10:
        goto label12;

     label11:
        $z0 = virtualinvoke r0.<java.util.concurrent.SynchronousQueue$TransferQueue: boolean casCleanMe(java.util.concurrent.SynchronousQueue$TransferQueue$QNode,java.util.concurrent.SynchronousQueue$TransferQueue$QNode)>(null, r1);

        if $z0 == 0 goto label12;

        return;

     label12:
        goto label01;

     label13:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2, $r4, $r6;
        java.lang.reflect.Field $r3, $r5, $r7;
        long $l0, $l1, $l2;
        java.lang.Exception $r8, r10;
        java.lang.Error $r9;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/SynchronousQueue$TransferQueue";

        $r2 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long headOffset> = $l0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long tailOffset> = $l1;

        $r6 = <java.util.concurrent.SynchronousQueue$TransferQueue: sun.misc.Unsafe UNSAFE>;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("cleanMe");

        $l2 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.SynchronousQueue$TransferQueue: long cleanMeOffset> = $l2;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.Throwable)>(r10);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
