class java.util.TreeMap$KeySet extends java.util.AbstractSet implements java.util.NavigableSet
{
    final java.util.TreeMap this$0;

    void <init>(java.util.TreeMap)
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap r1;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.util.TreeMap;

        r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap $r1;
        int $i0;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $i0 = $r1.<java.util.TreeMap: int size>;

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap$KeySet$1 $r1;
        java.util.TreeMap $r2, $r4;
        java.util.TreeMap$Node $r3, $r5, $r6;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = new java.util.TreeMap$KeySet$1;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = $r2.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r5 = $r4.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

     label2:
        specialinvoke $r1.<java.util.TreeMap$KeySet$1: void <init>(java.util.TreeMap$KeySet,java.util.TreeMap$Node)>(r0, $r6);

        return $r1;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap$KeySet$2 $r1;
        java.util.TreeMap $r2, $r4;
        java.util.TreeMap$Node $r3, $r5, $r6;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = new java.util.TreeMap$KeySet$2;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = $r2.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r5 = $r4.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

     label2:
        specialinvoke $r1.<java.util.TreeMap$KeySet$2: void <init>(java.util.TreeMap$KeySet,java.util.TreeMap$Node)>(r0, $r6);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        java.util.TreeMap $r2;
        boolean $z0;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $z0 = virtualinvoke $r2.<java.util.TreeMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        java.util.TreeMap $r2;
        java.util.TreeMap$Node $r3;
        boolean $z0;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.TreeMap$Node removeInternalByKey(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clear()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap $r1;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        virtualinvoke $r1.<java.util.TreeMap: void clear()>();

        return;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.util.Comparator comparator()>();

        return $r2;
    }

    public java.lang.Object first()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.lang.Object firstKey()>();

        return $r2;
    }

    public java.lang.Object last()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap: java.lang.Object lastKey()>();

        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object floorKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap $r2;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object higherKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object pollFirst()
    {
        java.util.TreeMap$KeySet r0;
        java.util.Map$Entry r1;
        java.util.TreeMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeMap$KeySet;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        r1 = staticinvoke <java.util.TreeMap: java.util.Map$Entry access$000(java.util.TreeMap)>($r2);

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object pollLast()
    {
        java.util.TreeMap$KeySet r0;
        java.util.Map$Entry r1;
        java.util.TreeMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeMap$KeySet;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        r1 = staticinvoke <java.util.TreeMap: java.util.Map$Entry access$100(java.util.TreeMap)>($r2);

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.TreeMap $r3;
        java.util.NavigableMap $r4;
        java.util.NavigableSet $r5;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r5;
    }

    public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1, r2;
        java.util.TreeMap $r3;
        java.util.NavigableMap $r4;
        java.util.NavigableSet $r5;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r5;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        java.util.TreeMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, 0);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.TreeMap$KeySet r0;
        java.lang.Object r1;
        java.util.TreeMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, 1);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.TreeMap$KeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        java.util.TreeMap$Bound $r2, $r3;
        java.util.TreeMap $r4;
        java.util.NavigableSet $r5;

        r0 := @this: java.util.TreeMap$KeySet;

        $r1 = new java.util.TreeMap$BoundedMap;

        $r4 = r0.<java.util.TreeMap$KeySet: java.util.TreeMap this$0>;

        $r3 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r2 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        specialinvoke $r1.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>($r4, 0, null, $r3, null, $r2);

        $r5 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.util.NavigableSet navigableKeySet()>();

        return $r5;
    }
}
