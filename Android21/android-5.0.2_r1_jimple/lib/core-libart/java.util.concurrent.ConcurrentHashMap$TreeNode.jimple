final class java.util.concurrent.ConcurrentHashMap$TreeNode extends java.util.concurrent.ConcurrentHashMap$Node
{
    java.util.concurrent.ConcurrentHashMap$TreeNode parent;
    java.util.concurrent.ConcurrentHashMap$TreeNode left;
    java.util.concurrent.ConcurrentHashMap$TreeNode right;
    java.util.concurrent.ConcurrentHashMap$TreeNode prev;
    boolean red;

    void <init>(int, java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentHashMap$Node, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r4;
        int i0;
        java.lang.Object r1, r2;
        java.util.concurrent.ConcurrentHashMap$Node r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.concurrent.ConcurrentHashMap$Node;

        r4 := @parameter4: java.util.concurrent.ConcurrentHashMap$TreeNode;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(i0, r1, r2, r3);

        r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r4;

        return;
    }

    java.util.concurrent.ConcurrentHashMap$Node find(int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, $r2;
        int i0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(i0, r1, null);

        return $r2;
    }

    final java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int, java.lang.Object, java.lang.Class)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r3, r5, r6, r7, $r9, $r10;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r1, r4, $r8;
        java.lang.Class r2, $r11;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeNode;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Class;

        if r1 == null goto label15;

        r3 = r0;

     label01:
        r6 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r7 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        $i3 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        i1 = $i3;

        if $i3 <= i0 goto label02;

        r3 = r6;

        goto label14;

     label02:
        if i1 >= i0 goto label03;

        r3 = r7;

        goto label14;

     label03:
        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        r4 = $r8;

        if $r8 == r1 goto label04;

        if r4 == null goto label05;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label05;

     label04:
        return r3;

     label05:
        if r6 != null goto label06;

        if r7 != null goto label06;

        goto label15;

     label06:
        if r2 != null goto label07;

        $r11 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.lang.Class comparableClassFor(java.lang.Object)>(r1);

        r2 = $r11;

        if $r11 == null goto label10;

     label07:
        $i4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(r2, r1, r4);

        i2 = $i4;

        if $i4 == 0 goto label10;

        if i2 >= 0 goto label08;

        $r10 = r6;

        goto label09;

     label08:
        $r10 = r7;

     label09:
        r3 = $r10;

        goto label14;

     label10:
        if r6 != null goto label11;

        r3 = r7;

        goto label14;

     label11:
        if r7 == null goto label12;

        $r9 = virtualinvoke r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(i0, r1, r2);

        r5 = $r9;

        if $r9 != null goto label13;

     label12:
        r3 = r6;

        goto label14;

     label13:
        return r5;

     label14:
        if r3 != null goto label01;

     label15:
        return null;
    }
}
