abstract class java.lang.Daemons$Daemon extends java.lang.Object implements java.lang.Runnable
{
    private java.lang.Thread thread;

    private void <init>()
    {
        java.lang.Daemons$Daemon r0;

        r0 := @this: java.lang.Daemons$Daemon;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public synchronized void start()
    {
        java.lang.Daemons$Daemon r0;
        java.lang.Thread $r1, $r2, $r6, $r7;
        java.lang.ThreadGroup $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        java.lang.IllegalStateException $r8;

        r0 := @this: java.lang.Daemons$Daemon;

        $r1 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        if $r1 == null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already running");

        throw $r8;

     label1:
        $r2 = new java.lang.Thread;

        $r3 = <java.lang.ThreadGroup: java.lang.ThreadGroup systemThreadGroup>;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>($r3, r0, $r5);

        r0.<java.lang.Daemons$Daemon: java.lang.Thread thread> = $r2;

        $r6 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        virtualinvoke $r6.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r7 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        virtualinvoke $r7.<java.lang.Thread: void start()>();

        return;
    }

    public abstract void run();

    protected synchronized boolean isRunning()
    {
        java.lang.Daemons$Daemon r0;
        java.lang.Thread $r1;
        boolean $z0;

        r0 := @this: java.lang.Daemons$Daemon;

        $r1 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized void interrupt()
    {
        java.lang.Daemons$Daemon r0;
        java.lang.Thread $r1, $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: java.lang.Daemons$Daemon;

        $r1 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not running");

        throw $r3;

     label1:
        $r2 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

        return;
    }

    public void stop()
    {
        java.lang.Daemons$Daemon r0, r2;
        java.lang.Thread r1;
        java.lang.Throwable r3, $r6;
        java.lang.IllegalStateException $r5;
        java.lang.InterruptedException $r7;

        r0 := @this: java.lang.Daemons$Daemon;

        r2 = r0;

        entermonitor r0;

     label1:
        r1 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        r0.<java.lang.Daemons$Daemon: java.lang.Thread thread> = null;

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        if r1 != null goto label6;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not running");

        throw $r5;

     label6:
        virtualinvoke r1.<java.lang.Thread: void interrupt()>();

     label7:
        virtualinvoke r1.<java.lang.Thread: void join()>();

     label8:
        return;

     label9:
        $r7 := @caughtexception;

        goto label7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
        catch java.lang.InterruptedException from label7 to label8 with label9;
    }

    public synchronized java.lang.StackTraceElement[] getStackTrace()
    {
        java.lang.Daemons$Daemon r0;
        java.lang.Thread $r1, $r3;
        java.lang.StackTraceElement[] $r2;

        r0 := @this: java.lang.Daemons$Daemon;

        $r1 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        if $r1 == null goto label1;

        $r3 = r0.<java.lang.Daemons$Daemon: java.lang.Thread thread>;

        $r2 = virtualinvoke $r3.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        goto label2;

     label1:
        $r2 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

     label2:
        return $r2;
    }

    void <init>(java.lang.Daemons$1)
    {
        java.lang.Daemons$Daemon r0;
        java.lang.Daemons$1 r1;

        r0 := @this: java.lang.Daemons$Daemon;

        r1 := @parameter0: java.lang.Daemons$1;

        specialinvoke r0.<java.lang.Daemons$Daemon: void <init>()>();

        return;
    }
}
