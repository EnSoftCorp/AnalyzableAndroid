public final class libcore.icu.NativeNormalizer extends java.lang.Object
{

    public static boolean isNormalized(java.lang.CharSequence, java.text.Normalizer$Form)
    {
        java.lang.CharSequence r0;
        java.text.Normalizer$Form r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.text.Normalizer$Form;

        $r2 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $i0 = staticinvoke <libcore.icu.NativeNormalizer: int toUNormalizationMode(java.text.Normalizer$Form)>(r1);

        $z0 = staticinvoke <libcore.icu.NativeNormalizer: boolean isNormalizedImpl(java.lang.String,int)>($r2, $i0);

        return $z0;
    }

    public static java.lang.String normalize(java.lang.CharSequence, java.text.Normalizer$Form)
    {
        java.lang.CharSequence r0;
        java.text.Normalizer$Form r1;
        java.lang.String $r2, $r3;
        int $i0;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.text.Normalizer$Form;

        $r2 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.String toString()>();

        $i0 = staticinvoke <libcore.icu.NativeNormalizer: int toUNormalizationMode(java.text.Normalizer$Form)>(r1);

        $r3 = staticinvoke <libcore.icu.NativeNormalizer: java.lang.String normalizeImpl(java.lang.String,int)>($r2, $i0);

        return $r3;
    }

    private static int toUNormalizationMode(java.text.Normalizer$Form)
    {
        java.text.Normalizer$Form r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.AssertionError $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: java.text.Normalizer$Form;

        $r1 = <libcore.icu.NativeNormalizer$1: int[] $SwitchMap$java$text$Normalizer$Form>;

        $i0 = virtualinvoke r0.<java.text.Normalizer$Form: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return 4;

     label2:
        return 2;

     label3:
        return 5;

     label4:
        return 3;

     label5:
        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown Normalizer.Form ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r6);

        throw $r2;
    }

    private static native java.lang.String normalizeImpl(java.lang.String, int);

    private static native boolean isNormalizedImpl(java.lang.String, int);

    private void <init>()
    {
        libcore.icu.NativeNormalizer r0;

        r0 := @this: libcore.icu.NativeNormalizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
