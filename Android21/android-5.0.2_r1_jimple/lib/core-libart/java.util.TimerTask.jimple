public abstract class java.util.TimerTask extends java.lang.Object implements java.lang.Runnable
{
    final java.lang.Object lock;
    boolean cancelled;
    long when;
    long period;
    boolean fixedRate;
    private long scheduledTime;

    long getWhen()
    {
        java.util.TimerTask r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: java.util.TimerTask;

        $r3 = r0.<java.util.TimerTask: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<java.util.TimerTask: long when>;

        exitmonitor r1;

     label2:
        return $l0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setScheduledTime(long)
    {
        java.util.TimerTask r0;
        long l0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.util.TimerTask;

        l0 := @parameter0: long;

        $r3 = r0.<java.util.TimerTask: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<java.util.TimerTask: long scheduledTime> = l0;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    boolean isScheduled()
    {
        java.util.TimerTask r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0, $l2;
        byte $b1, $b3;
        boolean $z0;

        r0 := @this: java.util.TimerTask;

        $r3 = r0.<java.util.TimerTask: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<java.util.TimerTask: long when>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label2;

        $l2 = r0.<java.util.TimerTask: long scheduledTime>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return $z0;

     label6:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void <init>()
    {
        java.util.TimerTask r0;
        java.lang.Object $r1;

        r0 := @this: java.util.TimerTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<java.util.TimerTask: java.lang.Object lock> = $r1;

        return;
    }

    public boolean cancel()
    {
        java.util.TimerTask r0;
        java.lang.Object r1, $r3;
        boolean z0, $z1, $z2;
        java.lang.Throwable r2, $r4;
        long $l0;
        byte $b1;

        r0 := @this: java.util.TimerTask;

        $r3 = r0.<java.util.TimerTask: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z1 = r0.<java.util.TimerTask: boolean cancelled>;

        if $z1 != 0 goto label2;

        $l0 = r0.<java.util.TimerTask: long when>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        z0 = $z2;

        r0.<java.util.TimerTask: boolean cancelled> = 1;

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public long scheduledExecutionTime()
    {
        java.util.TimerTask r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        long $l0;

        r0 := @this: java.util.TimerTask;

        $r3 = r0.<java.util.TimerTask: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $l0 = r0.<java.util.TimerTask: long scheduledTime>;

        exitmonitor r1;

     label2:
        return $l0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public abstract void run();
}
