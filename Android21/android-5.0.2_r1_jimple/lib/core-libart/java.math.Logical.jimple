class java.math.Logical extends java.lang.Object
{

    private void <init>()
    {
        java.math.Logical r0;

        r0 := @this: java.math.Logical;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger not(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r2, $r5, $r8, $r10, $r12;
        int[] r1, $r3, $r4, $r6, $r7, $r9, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label01;

        $r12 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        return $r12;

     label01:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        $r10 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r10;

     label02:
        $i2 = r0.<java.math.BigInteger: int numberLength>;

        $i3 = $i2 + 1;

        r1 = newarray (int)[$i3];

        $i4 = r0.<java.math.BigInteger: int sign>;

        if $i4 <= 0 goto label07;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = r0.<java.math.BigInteger: int numberLength>;

        $i14 = $i12 - 1;

        $i16 = $r7[$i14];

        if $i16 == -1 goto label04;

        i0 = 0;

     label03:
        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r11[i0];

        if $i21 != -1 goto label09;

        i0 = i0 + 1;

        goto label03;

     label04:
        i0 = 0;

     label05:
        $i15 = r0.<java.math.BigInteger: int numberLength>;

        if i0 >= $i15 goto label06;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i22 = $r9[i0];

        if $i22 != -1 goto label06;

        i0 = i0 + 1;

        goto label05;

     label06:
        $i17 = r0.<java.math.BigInteger: int numberLength>;

        if i0 != $i17 goto label09;

        r1[i0] = 1;

        $r8 = new java.math.BigInteger;

        $i19 = r0.<java.math.BigInteger: int sign>;

        $i20 = neg $i19;

        $i18 = i0 + 1;

        specialinvoke $r8.<java.math.BigInteger: void <init>(int,int,int[])>($i20, $i18, r1);

        return $r8;

     label07:
        i0 = 0;

     label08:
        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i5 = $r3[i0];

        if $i5 != 0 goto label09;

        r1[i0] = -1;

        i0 = i0 + 1;

        goto label08;

     label09:
        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i0];

        $i6 = r0.<java.math.BigInteger: int sign>;

        $i8 = $i7 + $i6;

        r1[i0] = $i8;

        i23 = i0 + 1;

     label10:
        $i9 = r0.<java.math.BigInteger: int numberLength>;

        if i23 >= $i9 goto label11;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = $r6[i23];

        r1[i23] = $i13;

        i23 = i23 + 1;

        goto label10;

     label11:
        $r5 = new java.math.BigInteger;

        $i10 = r0.<java.math.BigInteger: int sign>;

        $i11 = neg $i10;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>($i11, i23, r1);

        return $r5;
    }

    static java.math.BigInteger and(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 == 0 goto label1;

        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label2;

     label1:
        $r2 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r2;

     label2:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $r4 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label4;

        return r1;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label6;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label5;

        $r9 = staticinvoke <java.math.Logical: java.math.BigInteger andPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r9;

     label5:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger andDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r8;

     label6:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label7;

        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger andDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r7;

     label7:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        $i4 = r1.<java.math.BigInteger: int numberLength>;

        if $i5 <= $i4 goto label8;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger andNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r6;

     label8:
        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger andNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r5;
    }

    static java.math.BigInteger andPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] r2, $r4, $r5;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i3 = r0.<java.math.BigInteger: int numberLength>;

        $i2 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $i4 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        if i1 < i0 goto label1;

        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r6;

     label1:
        r2 = newarray (int)[i0];

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i1];

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i6 = $r5[i1];

        $i8 = $i7 & $i6;

        r2[i1] = $i8;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }

    static java.math.BigInteger andDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3, $r9;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        int[] r2, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 < $i5 goto label1;

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r9;

     label1:
        i2 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i2];

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        if i3 != i1 goto label2;

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i15 = $r7[i3];

        $i18 = neg $i15;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r8[i3];

        $i17 = $i18 & $i16;

        r2[i3] = $i17;

        i3 = i3 + 1;

     label2:
        $i7 = r1.<java.math.BigInteger: int numberLength>;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

     label3:
        if i3 >= i4 goto label4;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i11 = $r5[i3];

        $i14 = $i11 ^ -1;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = $r6[i3];

        $i13 = $i14 & $i12;

        r2[i3] = $i13;

        i3 = i3 + 1;

        goto label3;

     label4:
        $i8 = r1.<java.math.BigInteger: int numberLength>;

        if i3 < $i8 goto label6;

     label5:
        $i9 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i9 goto label6;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i10 = $r4[i3];

        r2[i3] = $i10;

        i3 = i3 + 1;

        goto label5;

     label6:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r3;
    }

    static java.math.BigInteger andNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r5, $r10;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36;
        int[] r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, r17;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        if i0 < $i5 goto label01;

        return r0;

     label01:
        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i0);

        if i1 <= i0 goto label02;

        $r16 = r1.<java.math.BigInteger: int[] digits>;

        $i30 = $r16[i3];

        $i32 = neg $i30;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i34 = $r15[i3];

        $i33 = $i34 ^ -1;

        i4 = $i32 & $i33;

        goto label04;

     label02:
        if i1 >= i0 goto label03;

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i29 = $r13[i3];

        $i31 = $i29 ^ -1;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i27 = $r14[i3];

        $i28 = neg $i27;

        i4 = $i31 & $i28;

        goto label04;

     label03:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i6 = $r3[i3];

        $i8 = neg $i6;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i3];

        $i9 = neg $i7;

        i4 = $i8 & $i9;

     label04:
        if i4 != 0 goto label09;

        i3 = i3 + 1;

     label05:
        $i16 = r1.<java.math.BigInteger: int numberLength>;

        if i3 >= $i16 goto label06;

        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i25 = $r12[i3];

        $r11 = r1.<java.math.BigInteger: int[] digits>;

        $i22 = $r11[i3];

        $i26 = $i25 | $i22;

        $i24 = $i26 ^ -1;

        i4 = $i24;

        if $i24 != 0 goto label06;

        i3 = i3 + 1;

        goto label05;

     label06:
        if i4 != 0 goto label09;

     label07:
        $i19 = r0.<java.math.BigInteger: int numberLength>;

        if i3 >= $i19 goto label08;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i20 = $r9[i3];

        $i23 = $i20 ^ -1;

        i4 = $i23;

        if $i23 != 0 goto label08;

        i3 = i3 + 1;

        goto label07;

     label08:
        if i4 != 0 goto label09;

        $i18 = r0.<java.math.BigInteger: int numberLength>;

        i2 = $i18 + 1;

        r2 = newarray (int)[i2];

        $i21 = i2 - 1;

        r2[$i21] = 1;

        $r10 = new java.math.BigInteger;

        specialinvoke $r10.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i2, r2);

        return $r10;

     label09:
        i35 = r0.<java.math.BigInteger: int numberLength>;

        r17 = newarray (int)[i35];

        $i11 = neg i4;

        r17[i3] = $i11;

        i36 = i3 + 1;

     label10:
        $i10 = r1.<java.math.BigInteger: int numberLength>;

        if i36 >= $i10 goto label11;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i14 = $r8[i36];

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i15 = $r7[i36];

        $i17 = $i14 | $i15;

        r17[i36] = $i17;

        i36 = i36 + 1;

        goto label10;

     label11:
        $i12 = r0.<java.math.BigInteger: int numberLength>;

        if i36 >= $i12 goto label12;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i13 = $r6[i36];

        r17[i36] = $i13;

        i36 = i36 + 1;

        goto label11;

     label12:
        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i35, r17);

        return $r5;
    }

    static java.math.BigInteger andNot(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label2;

        $r9 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r9;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r10;

     label3:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r8 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r8;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label6;

        $i4 = r1.<java.math.BigInteger: int sign>;

        if $i4 <= 0 goto label5;

        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger andNotPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label5:
        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger andNotPositiveNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r6;

     label6:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label7;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger andNotNegativePositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r5;

     label7:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger andNotNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r4;
    }

    static java.math.BigInteger andNotPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int[] r2, $r4, $r5, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i2 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[$i2];

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        $i3 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

     label1:
        if i1 >= i0 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r6[i1];

        $i10 = $i8 ^ -1;

        $i11 = $i9 & $i10;

        r2[i1] = $i11;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i5 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i1];

        r2[i1] = $i7;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, $i6, r2);

        return $r3;
    }

    static java.math.BigInteger andNotPositiveNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        int[] r2, $r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        if i0 < $i4 goto label1;

        return r0;

     label1:
        $i6 = r0.<java.math.BigInteger: int numberLength>;

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        r2 = newarray (int)[i2];

        i3 = i1;

     label2:
        if i3 >= i0 goto label3;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i14 = $r8[i3];

        r2[i3] = $i14;

        i3 = i3 + 1;

        goto label2;

     label3:
        if i3 != i0 goto label4;

        $r6 = r0.<java.math.BigInteger: int[] digits>;

        $i11 = $r6[i3];

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i10 = $r7[i3];

        $i12 = $i10 - 1;

        $i13 = $i11 & $i12;

        r2[i3] = $i13;

        i3 = i3 + 1;

     label4:
        if i3 >= i2 goto label5;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i3];

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i8 = $r5[i3];

        $i9 = $i7 & $i8;

        r2[i3] = $i9;

        i3 = i3 + 1;

        goto label4;

     label5:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r3;
    }

    static java.math.BigInteger andNotNegativePositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r5, $r10;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, i41, i42, i43;
        int[] r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, r17;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i3 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i4 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i6 = r1.<java.math.BigInteger: int numberLength>;

        if i3 < $i6 goto label01;

        return r0;

     label01:
        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i7);

        i5 = i3;

        if i4 <= i3 goto label05;

        r2 = newarray (int)[i0];

        $i38 = r0.<java.math.BigInteger: int numberLength>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i38, i4);

     label02:
        if i5 >= i1 goto label03;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i39 = $r15[i5];

        r2[i5] = $i39;

        i5 = i5 + 1;

        goto label02;

     label03:
        $i37 = r0.<java.math.BigInteger: int numberLength>;

        if i5 != $i37 goto label12;

        i5 = i4;

     label04:
        $i36 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i36 goto label12;

        $r16 = r1.<java.math.BigInteger: int[] digits>;

        $i40 = $r16[i5];

        r2[i5] = $i40;

        i5 = i5 + 1;

        goto label04;

     label05:
        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r3[i5];

        $i13 = neg $i9;

        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i11 = $r4[i5];

        $i10 = $i11 ^ -1;

        i2 = $i13 & $i10;

        if i2 != 0 goto label11;

        $i22 = r1.<java.math.BigInteger: int numberLength>;

        $i24 = r0.<java.math.BigInteger: int numberLength>;

        i41 = staticinvoke <java.lang.Math: int min(int,int)>($i22, $i24);

        i5 = i5 + 1;

     label06:
        if i5 >= i41 goto label07;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i34 = $r14[i5];

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i35 = $r13[i5];

        $i33 = $i34 | $i35;

        $i32 = $i33 ^ -1;

        i2 = $i32;

        if $i32 != 0 goto label07;

        i5 = i5 + 1;

        goto label06;

     label07:
        if i2 != 0 goto label11;

     label08:
        $i26 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i26 goto label09;

        $r11 = r1.<java.math.BigInteger: int[] digits>;

        $i31 = $r11[i5];

        $i30 = $i31 ^ -1;

        i2 = $i30;

        if $i30 != 0 goto label09;

        i5 = i5 + 1;

        goto label08;

     label09:
        $i27 = r0.<java.math.BigInteger: int numberLength>;

        if i5 >= $i27 goto label10;

        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i29 = $r12[i5];

        $i28 = $i29 ^ -1;

        i2 = $i28;

        if $i28 != 0 goto label10;

        i5 = i5 + 1;

        goto label09;

     label10:
        if i2 != 0 goto label11;

        i42 = i0 + 1;

        r17 = newarray (int)[i42];

        $i25 = i42 - 1;

        r17[$i25] = 1;

        $r10 = new java.math.BigInteger;

        specialinvoke $r10.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i42, r17);

        return $r10;

     label11:
        r2 = newarray (int)[i0];

        $i12 = neg i2;

        r2[i5] = $i12;

        i5 = i5 + 1;

     label12:
        $i14 = r1.<java.math.BigInteger: int numberLength>;

        $i15 = r0.<java.math.BigInteger: int numberLength>;

        i43 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i15);

     label13:
        if i5 >= i43 goto label14;

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r8[i5];

        $r9 = r1.<java.math.BigInteger: int[] digits>;

        $i20 = $r9[i5];

        $i23 = $i21 | $i20;

        r2[i5] = $i23;

        i5 = i5 + 1;

        goto label13;

     label14:
        $i16 = r0.<java.math.BigInteger: int numberLength>;

        if i5 >= $i16 goto label15;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i19 = $r7[i5];

        r2[i5] = $i19;

        i5 = i5 + 1;

        goto label14;

     label15:
        $i17 = r1.<java.math.BigInteger: int numberLength>;

        if i5 >= $i17 goto label16;

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i18 = $r6[i5];

        r2[i5] = $i18;

        i5 = i5 + 1;

        goto label15;

     label16:
        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i0, r2);

        return $r5;
    }

    static java.math.BigInteger andNotNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6, $r16;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, i36, i37;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        if i0 < $i5 goto label01;

        $r16 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r16;

     label01:
        i2 = r1.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i2];

        i4 = i0;

        if i0 >= i1 goto label07;

        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i22 = $r11[i4];

        $i23 = neg $i22;

        r2[i4] = $i23;

        $i26 = r0.<java.math.BigInteger: int numberLength>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i26, i1);

        i4 = i4 + 1;

     label02:
        if i4 >= i3 goto label03;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i34 = $r15[i4];

        $i33 = $i34 ^ -1;

        r2[i4] = $i33;

        i4 = i4 + 1;

        goto label02;

     label03:
        $i25 = r0.<java.math.BigInteger: int numberLength>;

        if i4 != $i25 goto label06;

     label04:
        if i4 >= i1 goto label05;

        r2[i4] = -1;

        i4 = i4 + 1;

        goto label04;

     label05:
        $r14 = r1.<java.math.BigInteger: int[] digits>;

        $i30 = $r14[i4];

        $i35 = $i30 - 1;

        r2[i4] = $i35;

        goto label09;

     label06:
        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i29 = $r12[i4];

        $i32 = $i29 ^ -1;

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i27 = $r13[i4];

        $i28 = $i27 - 1;

        $i31 = $i32 & $i28;

        r2[i4] = $i31;

        goto label09;

     label07:
        if i1 >= i0 goto label08;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r9[i4];

        $i20 = neg $i21;

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i19 = $r10[i4];

        $i24 = $i20 & $i19;

        r2[i4] = $i24;

        goto label09;

     label08:
        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i6 = $r3[i4];

        $i10 = neg $i6;

        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i4];

        $i8 = $i7 - 1;

        $i9 = $i10 & $i8;

        r2[i4] = $i9;

     label09:
        $i11 = r0.<java.math.BigInteger: int numberLength>;

        $i12 = r1.<java.math.BigInteger: int numberLength>;

        i36 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12);

        i37 = i4 + 1;

     label10:
        if i37 >= i36 goto label11;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i15 = $r7[i37];

        $i16 = $i15 ^ -1;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i17 = $r8[i37];

        $i18 = $i16 & $i17;

        r2[i37] = $i18;

        i37 = i37 + 1;

        goto label10;

     label11:
        $i13 = r1.<java.math.BigInteger: int numberLength>;

        if i37 >= $i13 goto label12;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i14 = $r5[i37];

        r2[i37] = $i14;

        i37 = i37 + 1;

        goto label11;

     label12:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(1, i2, r2);

        return $r6;
    }

    static java.math.BigInteger or(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r4 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

     label1:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        return $r3;

     label2:
        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 != 0 goto label3;

        return r0;

     label3:
        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label4;

        return r1;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label7;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label6;

        $i7 = r0.<java.math.BigInteger: int numberLength>;

        $i8 = r1.<java.math.BigInteger: int numberLength>;

        if $i7 <= $i8 goto label5;

        $r9 = staticinvoke <java.math.Logical: java.math.BigInteger orPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r9;

     label5:
        $r10 = staticinvoke <java.math.Logical: java.math.BigInteger orPositive(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r10;

     label6:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger orDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r8;

     label7:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label8;

        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger orDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r7;

     label8:
        $i4 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if $i4 <= $i5 goto label9;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger orNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r6;

     label9:
        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger orNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r5;
    }

    static java.math.BigInteger orPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] r2, $r4, $r5, $r6;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i0];

        i1 = 0;

     label1:
        $i2 = r1.<java.math.BigInteger: int numberLength>;

        if i1 >= $i2 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i5 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i4 = $r6[i1];

        $i6 = $i5 | $i4;

        r2[i1] = $i6;

        i1 = i1 + 1;

        goto label1;

     label2:
        if i1 >= i0 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i3 = $r4[i1];

        r2[i1] = $i3;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }

    static java.math.BigInteger orNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i4 = r1.<java.math.BigInteger: int numberLength>;

        if i1 < $i4 goto label1;

        return r1;

     label1:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i0 < $i5 goto label2;

        return r0;

     label2:
        $i7 = r0.<java.math.BigInteger: int numberLength>;

        $i6 = r1.<java.math.BigInteger: int numberLength>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i6);

        r2 = newarray (int)[i3];

        if i0 != i1 goto label3;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r9[i1];

        $i21 = neg $i16;

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i17 = $r10[i1];

        $i20 = neg $i17;

        $i18 = $i21 | $i20;

        $i19 = neg $i18;

        r2[i1] = $i19;

        i2 = i1;

        goto label6;

     label3:
        i2 = i0;

     label4:
        if i2 >= i1 goto label5;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i15 = $r8[i2];

        r2[i2] = $i15;

        i2 = i2 + 1;

        goto label4;

     label5:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i11 = $r3[i2];

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r4[i2];

        $i8 = $i9 - 1;

        $i10 = $i11 & $i8;

        r2[i2] = $i10;

     label6:
        i22 = i2 + 1;

     label7:
        if i22 >= i3 goto label8;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i14 = $r5[i22];

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i12 = $r7[i22];

        $i13 = $i14 & $i12;

        r2[i22] = $i13;

        i22 = i22 + 1;

        goto label7;

     label8:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i3, r2);

        return $r6;
    }

    static java.math.BigInteger orDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, i35, i36;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        if i1 < $i5 goto label01;

        return r1;

     label01:
        i4 = r1.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i4];

        if i0 >= i1 goto label03;

        i2 = i0;

     label02:
        if i2 >= i1 goto label10;

        $r14 = r1.<java.math.BigInteger: int[] digits>;

        $i30 = $r14[i2];

        r2[i2] = $i30;

        i2 = i2 + 1;

        goto label02;

     label03:
        if i1 >= i0 goto label09;

        i33 = i1;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i20 = $r9[i33];

        $i21 = neg $i20;

        r2[i33] = $i21;

        $i19 = r0.<java.math.BigInteger: int numberLength>;

        i3 = staticinvoke <java.lang.Math: int min(int,int)>($i19, i0);

        i34 = i33 + 1;

     label04:
        if i34 >= i3 goto label05;

        $r13 = r0.<java.math.BigInteger: int[] digits>;

        $i32 = $r13[i34];

        $i31 = $i32 ^ -1;

        r2[i34] = $i31;

        i34 = i34 + 1;

        goto label04;

     label05:
        $i24 = r0.<java.math.BigInteger: int numberLength>;

        if i34 == $i24 goto label06;

        $r12 = r1.<java.math.BigInteger: int[] digits>;

        $i26 = $r12[i34];

        $i28 = neg $i26;

        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i25 = $r11[i34];

        $i29 = $i28 | $i25;

        $i27 = $i29 ^ -1;

        r2[i34] = $i27;

        goto label08;

     label06:
        if i34 >= i0 goto label07;

        r2[i34] = -1;

        i34 = i34 + 1;

        goto label06;

     label07:
        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i22 = $r10[i34];

        $i23 = $i22 - 1;

        r2[i34] = $i23;

     label08:
        i2 = i34 + 1;

        goto label10;

     label09:
        i35 = i1;

        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i6 = $r3[i35];

        $i8 = neg $i6;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i7 = $r4[i35];

        $i10 = $i8 | $i7;

        $i9 = neg $i10;

        r2[i35] = $i9;

        i2 = i35 + 1;

     label10:
        $i11 = r1.<java.math.BigInteger: int numberLength>;

        $i12 = r0.<java.math.BigInteger: int numberLength>;

        i36 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12);

     label11:
        if i2 >= i36 goto label12;

        $r7 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r7[i2];

        $r8 = r0.<java.math.BigInteger: int[] digits>;

        $i15 = $r8[i2];

        $i17 = $i15 ^ -1;

        $i18 = $i16 & $i17;

        r2[i2] = $i18;

        i2 = i2 + 1;

        goto label11;

     label12:
        $i13 = r1.<java.math.BigInteger: int numberLength>;

        if i2 >= $i13 goto label13;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i14 = $r5[i2];

        r2[i2] = $i14;

        i2 = i2 + 1;

        goto label12;

     label13:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i4, r2);

        return $r6;
    }

    static java.math.BigInteger xor(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i0 = r1.<java.math.BigInteger: int sign>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<java.math.BigInteger: int sign>;

        if $i1 != 0 goto label2;

        return r1;

     label2:
        $r2 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z0 = virtualinvoke r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r11 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r11;

     label3:
        $r3 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        $z1 = virtualinvoke r0.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r1.<java.math.BigInteger: java.math.BigInteger not()>();

        return $r9;

     label4:
        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 <= 0 goto label7;

        $i6 = r1.<java.math.BigInteger: int sign>;

        if $i6 <= 0 goto label6;

        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        if $i8 <= $i7 goto label5;

        $r10 = staticinvoke <java.math.Logical: java.math.BigInteger xorPositive(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r10;

     label5:
        $r8 = staticinvoke <java.math.Logical: java.math.BigInteger xorPositive(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r8;

     label6:
        $r7 = staticinvoke <java.math.Logical: java.math.BigInteger xorDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r7;

     label7:
        $i3 = r1.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label8;

        $r6 = staticinvoke <java.math.Logical: java.math.BigInteger xorDiffSigns(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r6;

     label8:
        $i4 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i5 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if $i4 <= $i5 goto label9;

        $r5 = staticinvoke <java.math.Logical: java.math.BigInteger xorNegative(java.math.BigInteger,java.math.BigInteger)>(r1, r0);

        return $r5;

     label9:
        $r4 = staticinvoke <java.math.Logical: java.math.BigInteger xorNegative(java.math.BigInteger,java.math.BigInteger)>(r0, r1);

        return $r4;
    }

    static java.math.BigInteger xorPositive(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r2, $r4, $r5, $r6;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        i0 = r0.<java.math.BigInteger: int numberLength>;

        r2 = newarray (int)[i0];

        $i2 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i3 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

     label1:
        $i4 = r1.<java.math.BigInteger: int numberLength>;

        if i1 >= $i4 goto label2;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i9 = $r5[i1];

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i7 = $r6[i1];

        $i8 = $i9 ^ $i7;

        r2[i1] = $i8;

        i1 = i1 + 1;

        goto label1;

     label2:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i5 goto label3;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i6 = $r4[i1];

        r2[i1] = $i6;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r3;
    }

    static java.math.BigInteger xorNegative(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r6;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35;
        int[] r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        $i5 = r1.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i6, $i5);

        r2 = newarray (int)[i0];

        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i2 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i3 = i2;

        if i1 != i2 goto label01;

        $r12 = r0.<java.math.BigInteger: int[] digits>;

        $i31 = $r12[i3];

        $i33 = neg $i31;

        $r14 = r1.<java.math.BigInteger: int[] digits>;

        $i30 = $r14[i3];

        $i29 = neg $i30;

        $i32 = $i33 ^ $i29;

        r2[i3] = $i32;

        goto label07;

     label01:
        $r3 = r1.<java.math.BigInteger: int[] digits>;

        $i7 = $r3[i3];

        $i8 = neg $i7;

        r2[i3] = $i8;

        $i9 = r1.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i1);

        i3 = i3 + 1;

     label02:
        if i3 >= i4 goto label03;

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i28 = $r13[i3];

        $i27 = $i28 ^ -1;

        r2[i3] = $i27;

        i3 = i3 + 1;

        goto label02;

     label03:
        $i10 = r1.<java.math.BigInteger: int numberLength>;

        if i3 != $i10 goto label06;

     label04:
        if i3 >= i1 goto label05;

        r2[i3] = -1;

        i3 = i3 + 1;

        goto label04;

     label05:
        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i24 = $r11[i3];

        $i25 = $i24 - 1;

        r2[i3] = $i25;

        goto label07;

     label06:
        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i11 = $r4[i3];

        $i15 = neg $i11;

        $r5 = r1.<java.math.BigInteger: int[] digits>;

        $i13 = $r5[i3];

        $i12 = $i13 ^ -1;

        $i14 = $i15 ^ $i12;

        r2[i3] = $i14;

     label07:
        $i16 = r0.<java.math.BigInteger: int numberLength>;

        $i17 = r1.<java.math.BigInteger: int numberLength>;

        i34 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i17);

        i35 = i3 + 1;

     label08:
        if i35 >= i34 goto label09;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i23 = $r9[i35];

        $r10 = r1.<java.math.BigInteger: int[] digits>;

        $i22 = $r10[i35];

        $i26 = $i23 ^ $i22;

        r2[i35] = $i26;

        i35 = i35 + 1;

        goto label08;

     label09:
        $i18 = r0.<java.math.BigInteger: int numberLength>;

        if i35 >= $i18 goto label10;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i20 = $r7[i35];

        r2[i35] = $i20;

        i35 = i35 + 1;

        goto label09;

     label10:
        $i19 = r1.<java.math.BigInteger: int numberLength>;

        if i35 >= $i19 goto label11;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i21 = $r8[i35];

        r2[i35] = $i21;

        i35 = i35 + 1;

        goto label10;

     label11:
        $r6 = new java.math.BigInteger;

        specialinvoke $r6.<java.math.BigInteger: void <init>(int,int,int[])>(1, i0, r2);

        return $r6;
    }

    static java.math.BigInteger xorDiffSigns(java.math.BigInteger, java.math.BigInteger)
    {
        java.math.BigInteger r0, r1, $r5, $r10;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, i54, i55, i56, i57, i58, i59, i60;
        int[] r2, $r3, $r4, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, r23;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: java.math.BigInteger;

        $i7 = r1.<java.math.BigInteger: int numberLength>;

        $i6 = r0.<java.math.BigInteger: int numberLength>;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i7, $i6);

        i1 = virtualinvoke r1.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        i2 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if i1 >= i2 goto label04;

        r2 = newarray (int)[i0];

        i3 = i1;

        $r20 = r1.<java.math.BigInteger: int[] digits>;

        $i51 = $r20[i3];

        r2[i3] = $i51;

        $i46 = r1.<java.math.BigInteger: int numberLength>;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>($i46, i2);

        i54 = i3 + 1;

     label01:
        if i54 >= i4 goto label02;

        $r22 = r1.<java.math.BigInteger: int[] digits>;

        $i53 = $r22[i54];

        r2[i54] = $i53;

        i54 = i54 + 1;

        goto label01;

     label02:
        $i47 = r1.<java.math.BigInteger: int numberLength>;

        if i54 != $i47 goto label16;

     label03:
        $i48 = r0.<java.math.BigInteger: int numberLength>;

        if i54 >= $i48 goto label16;

        $r21 = r0.<java.math.BigInteger: int[] digits>;

        $i52 = $r21[i54];

        r2[i54] = $i52;

        i54 = i54 + 1;

        goto label03;

     label04:
        if i2 >= i1 goto label09;

        r2 = newarray (int)[i0];

        i55 = i2;

        $r15 = r0.<java.math.BigInteger: int[] digits>;

        $i38 = $r15[i55];

        $i37 = neg $i38;

        r2[i55] = $i37;

        $i36 = r0.<java.math.BigInteger: int numberLength>;

        i56 = staticinvoke <java.lang.Math: int min(int,int)>($i36, i1);

        i54 = i55 + 1;

     label05:
        if i54 >= i56 goto label06;

        $r17 = r0.<java.math.BigInteger: int[] digits>;

        $i49 = $r17[i54];

        $i50 = $i49 ^ -1;

        r2[i54] = $i50;

        i54 = i54 + 1;

        goto label05;

     label06:
        if i54 != i1 goto label07;

        $r18 = r0.<java.math.BigInteger: int[] digits>;

        $i41 = $r18[i54];

        $r19 = r1.<java.math.BigInteger: int[] digits>;

        $i44 = $r19[i54];

        $i45 = neg $i44;

        $i42 = $i41 ^ $i45;

        $i43 = $i42 ^ -1;

        r2[i54] = $i43;

        i54 = i54 + 1;

        goto label16;

     label07:
        if i54 >= i1 goto label08;

        r2[i54] = -1;

        i54 = i54 + 1;

        goto label07;

     label08:
        $i40 = r1.<java.math.BigInteger: int numberLength>;

        if i54 >= $i40 goto label16;

        $r16 = r1.<java.math.BigInteger: int[] digits>;

        $i39 = $r16[i54];

        r2[i54] = $i39;

        i54 = i54 + 1;

        goto label08;

     label09:
        i57 = i1;

        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i11 = $r3[i57];

        $r4 = r1.<java.math.BigInteger: int[] digits>;

        $i9 = $r4[i57];

        $i8 = neg $i9;

        i5 = $i11 ^ $i8;

        if i5 != 0 goto label15;

        $i22 = r0.<java.math.BigInteger: int numberLength>;

        $i24 = r1.<java.math.BigInteger: int numberLength>;

        i58 = staticinvoke <java.lang.Math: int min(int,int)>($i22, $i24);

        i57 = i57 + 1;

     label10:
        if i57 >= i58 goto label11;

        $r14 = r0.<java.math.BigInteger: int[] digits>;

        $i33 = $r14[i57];

        $r13 = r1.<java.math.BigInteger: int[] digits>;

        $i35 = $r13[i57];

        $i34 = $i35 ^ -1;

        $i32 = $i33 ^ $i34;

        i5 = $i32;

        if $i32 != 0 goto label11;

        i57 = i57 + 1;

        goto label10;

     label11:
        if i5 != 0 goto label15;

     label12:
        $i26 = r0.<java.math.BigInteger: int numberLength>;

        if i57 >= $i26 goto label13;

        $r11 = r0.<java.math.BigInteger: int[] digits>;

        $i31 = $r11[i57];

        $i30 = $i31 ^ -1;

        i5 = $i30;

        if $i30 != 0 goto label13;

        i57 = i57 + 1;

        goto label12;

     label13:
        $i27 = r1.<java.math.BigInteger: int numberLength>;

        if i57 >= $i27 goto label14;

        $r12 = r1.<java.math.BigInteger: int[] digits>;

        $i29 = $r12[i57];

        $i28 = $i29 ^ -1;

        i5 = $i28;

        if $i28 != 0 goto label14;

        i57 = i57 + 1;

        goto label13;

     label14:
        if i5 != 0 goto label15;

        i59 = i0 + 1;

        r23 = newarray (int)[i59];

        $i25 = i59 - 1;

        r23[$i25] = 1;

        $r10 = new java.math.BigInteger;

        specialinvoke $r10.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i59, r23);

        return $r10;

     label15:
        r2 = newarray (int)[i0];

        $i10 = neg i5;

        r2[i57] = $i10;

        i54 = i57 + 1;

     label16:
        $i12 = r1.<java.math.BigInteger: int numberLength>;

        $i13 = r0.<java.math.BigInteger: int numberLength>;

        i60 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i13);

     label17:
        if i54 >= i60 goto label18;

        $r8 = r1.<java.math.BigInteger: int[] digits>;

        $i18 = $r8[i54];

        $i19 = $i18 ^ -1;

        $r9 = r0.<java.math.BigInteger: int[] digits>;

        $i21 = $r9[i54];

        $i20 = $i19 ^ $i21;

        $i23 = $i20 ^ -1;

        r2[i54] = $i23;

        i54 = i54 + 1;

        goto label17;

     label18:
        $i14 = r0.<java.math.BigInteger: int numberLength>;

        if i54 >= $i14 goto label19;

        $r7 = r0.<java.math.BigInteger: int[] digits>;

        $i17 = $r7[i54];

        r2[i54] = $i17;

        i54 = i54 + 1;

        goto label18;

     label19:
        $i15 = r1.<java.math.BigInteger: int numberLength>;

        if i54 >= $i15 goto label20;

        $r6 = r1.<java.math.BigInteger: int[] digits>;

        $i16 = $r6[i54];

        r2[i54] = $i16;

        i54 = i54 + 1;

        goto label19;

     label20:
        $r5 = new java.math.BigInteger;

        specialinvoke $r5.<java.math.BigInteger: void <init>(int,int,int[])>(-1, i0, r2);

        return $r5;
    }
}
