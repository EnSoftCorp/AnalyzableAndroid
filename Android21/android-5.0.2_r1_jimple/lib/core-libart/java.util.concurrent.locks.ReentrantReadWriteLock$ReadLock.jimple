public class java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock extends java.lang.Object implements java.util.concurrent.locks.Lock, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync;

    protected void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        r1 := @parameter0: java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync> = $r2;

        return;
    }

    public void lock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void acquireShared(int)>(1);

        return;
    }

    public void lockInterruptibly() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void acquireSharedInterruptibly(int)>(1);

        return;
    }

    public boolean tryLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean tryReadLock()>();

        return $z0;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean tryAcquireSharedNanos(int,long)>(1, $l1);

        return $z0;
    }

    public void unlock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean releaseShared(int)>(1);

        return;
    }

    public java.util.concurrent.locks.Condition newCondition()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r0;
        int i0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7;
        java.lang.String $r3, $r8;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadLockCount()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Read locks = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: long serialVersionUID> = -5992448646407690164L;

        return;
    }
}
