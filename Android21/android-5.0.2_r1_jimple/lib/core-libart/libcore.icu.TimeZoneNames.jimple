public final class libcore.icu.TimeZoneNames extends java.lang.Object
{
    private static final java.lang.String[] availableTimeZoneIds;
    public static final int OLSON_NAME;
    public static final int LONG_NAME;
    public static final int SHORT_NAME;
    public static final int LONG_NAME_DST;
    public static final int SHORT_NAME_DST;
    public static final int NAME_COUNT;
    private static final libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings;
    private static final java.util.Comparator ZONE_STRINGS_COMPARATOR;

    private void <init>()
    {
        libcore.icu.TimeZoneNames r0;

        r0 := @this: libcore.icu.TimeZoneNames;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getDisplayName(java.lang.String[][], java.lang.String, boolean, int)
    {
        java.lang.String[][] r0;
        java.lang.String r1, $r6, $r7;
        boolean z0;
        int i0, i1;
        java.lang.String[] r2, r3, $r4;
        java.util.Comparator $r5;

        r0 := @parameter0: java.lang.String[][];

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r1;

        r2 = $r4;

        $r5 = <libcore.icu.TimeZoneNames: java.util.Comparator ZONE_STRINGS_COMPARATOR>;

        i1 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>(r0, r2, $r5);

        if i1 < 0 goto label6;

        r3 = r0[i1];

        if z0 == 0 goto label3;

        if i0 != 1 goto label1;

        $r7 = r3[3];

        goto label2;

     label1:
        $r7 = r3[4];

     label2:
        return $r7;

     label3:
        if i0 != 1 goto label4;

        $r6 = r3[1];

        goto label5;

     label4:
        $r6 = r3[2];

     label5:
        return $r6;

     label6:
        return null;
    }

    public static java.lang.String[][] getZoneStrings(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.TimeZoneNames$ZoneStringsCache $r1;
        java.lang.Object $r2;
        java.lang.String[][] $r3;

        r0 := @parameter0: java.util.Locale;

        if r0 != null goto label1;

        r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        $r1 = <libcore.icu.TimeZoneNames: libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings>;

        $r2 = virtualinvoke $r1.<libcore.icu.TimeZoneNames$ZoneStringsCache: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String[][]) $r2;

        return $r3;
    }

    public static java.lang.String[] forLocale(java.util.Locale)
    {
        java.util.Locale r0;
        java.lang.String r1, r4, $r7, $r11;
        java.util.ArrayList r2, $r5;
        java.lang.String[] r3, $r8, $r9;
        int i0, i1, i2, i3, $i4, $i5;
        libcore.util.ZoneInfoDB$TzData $r6;
        java.lang.Object[] $r10;
        boolean $z0;

        r0 := @parameter0: java.util.Locale;

        r1 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = $r5;

        $r6 = staticinvoke <libcore.util.ZoneInfoDB: libcore.util.ZoneInfoDB$TzData getInstance()>();

        $r7 = virtualinvoke $r6.<libcore.util.ZoneInfoDB$TzData: java.lang.String getZoneTab()>();

        r3 = virtualinvoke $r7.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label3;

        $i5 = virtualinvoke r4.<java.lang.String: int indexOf(int,int)>(9, 4);

        i2 = $i5 + 1;

        i3 = virtualinvoke r4.<java.lang.String: int indexOf(int,int)>(9, i2);

        if i3 != -1 goto label2;

        i3 = virtualinvoke r4.<java.lang.String: int length()>();

     label2:
        $r11 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(i2, i3);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $r8 = newarray (java.lang.String)[$i4];

        $r10 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r9 = (java.lang.String[]) $r10;

        return $r9;
    }

    public static native java.lang.String getExemplarLocation(java.lang.String, java.lang.String);

    private static native void fillZoneStrings(java.lang.String, java.lang.String[][]);

    static java.lang.String[] access$000()
    {
        java.lang.String[] $r0;

        $r0 = <libcore.icu.TimeZoneNames: java.lang.String[] availableTimeZoneIds>;

        return $r0;
    }

    static void access$100(java.lang.String, java.lang.String[][])
    {
        java.lang.String r0;
        java.lang.String[][] r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[][];

        staticinvoke <libcore.icu.TimeZoneNames: void fillZoneStrings(java.lang.String,java.lang.String[][])>(r0, r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        libcore.icu.TimeZoneNames$ZoneStringsCache $r1, $r3, $r6, $r8;
        java.util.Locale $r2, $r5, $r9;
        libcore.icu.TimeZoneNames$1 $r11;

        <libcore.icu.TimeZoneNames: int NAME_COUNT> = 5;

        <libcore.icu.TimeZoneNames: int SHORT_NAME_DST> = 4;

        <libcore.icu.TimeZoneNames: int LONG_NAME_DST> = 3;

        <libcore.icu.TimeZoneNames: int SHORT_NAME> = 2;

        <libcore.icu.TimeZoneNames: int LONG_NAME> = 1;

        <libcore.icu.TimeZoneNames: int OLSON_NAME> = 0;

        $r0 = staticinvoke <java.util.TimeZone: java.lang.String[] getAvailableIDs()>();

        <libcore.icu.TimeZoneNames: java.lang.String[] availableTimeZoneIds> = $r0;

        $r1 = new libcore.icu.TimeZoneNames$ZoneStringsCache;

        specialinvoke $r1.<libcore.icu.TimeZoneNames$ZoneStringsCache: void <init>()>();

        <libcore.icu.TimeZoneNames: libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings> = $r1;

        $r3 = <libcore.icu.TimeZoneNames: libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings>;

        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        virtualinvoke $r3.<libcore.icu.TimeZoneNames$ZoneStringsCache: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = <libcore.icu.TimeZoneNames: libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings>;

        $r5 = <java.util.Locale: java.util.Locale US>;

        virtualinvoke $r6.<libcore.icu.TimeZoneNames$ZoneStringsCache: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = <libcore.icu.TimeZoneNames: libcore.icu.TimeZoneNames$ZoneStringsCache cachedZoneStrings>;

        $r9 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        virtualinvoke $r8.<libcore.icu.TimeZoneNames$ZoneStringsCache: java.lang.Object get(java.lang.Object)>($r9);

        $r11 = new libcore.icu.TimeZoneNames$1;

        specialinvoke $r11.<libcore.icu.TimeZoneNames$1: void <init>()>();

        <libcore.icu.TimeZoneNames: java.util.Comparator ZONE_STRINGS_COMPARATOR> = $r11;

        return;
    }
}
