public final class java.util.jar.StrictJarFile extends java.lang.Object
{
    private final long nativeHandle;
    private final java.io.RandomAccessFile raf;
    private final java.util.jar.Manifest manifest;
    private final java.util.jar.JarVerifier verifier;
    private final boolean isSigned;
    private final dalvik.system.CloseGuard guard;
    private boolean closed;

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.jar.StrictJarFile r0;
        java.lang.String r1;
        java.util.HashMap r2;
        dalvik.system.CloseGuard $r3, $r11;
        long $l0, $l1;
        java.io.RandomAccessFile $r4;
        java.util.jar.Manifest $r5, $r9;
        java.lang.Object $r6;
        byte[] $r7;
        java.util.jar.JarVerifier $r8, $r10, $r12;
        boolean $z0, $z1, $z2;
        java.io.IOException $r13, r14;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.jar.StrictJarFile: dalvik.system.CloseGuard guard> = $r3;

        $l0 = staticinvoke <java.util.jar.StrictJarFile: long nativeOpenJarFile(java.lang.String)>(r1);

        r0.<java.util.jar.StrictJarFile: long nativeHandle> = $l0;

        $r4 = new java.io.RandomAccessFile;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(r1, "r");

        r0.<java.util.jar.StrictJarFile: java.io.RandomAccessFile raf> = $r4;

     label1:
        r2 = specialinvoke r0.<java.util.jar.StrictJarFile: java.util.HashMap getMetaEntries()>();

        $r5 = new java.util.jar.Manifest;

        $r6 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("META-INF/MANIFEST.MF");

        $r7 = (byte[]) $r6;

        specialinvoke $r5.<java.util.jar.Manifest: void <init>(byte[],boolean)>($r7, 1);

        r0.<java.util.jar.StrictJarFile: java.util.jar.Manifest manifest> = $r5;

        $r8 = new java.util.jar.JarVerifier;

        $r9 = r0.<java.util.jar.StrictJarFile: java.util.jar.Manifest manifest>;

        specialinvoke $r8.<java.util.jar.JarVerifier: void <init>(java.lang.String,java.util.jar.Manifest,java.util.HashMap)>(r1, $r9, r2);

        r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier> = $r8;

        $r10 = r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier>;

        $z0 = virtualinvoke $r10.<java.util.jar.JarVerifier: boolean readCertificates()>();

        if $z0 == 0 goto label2;

        $r12 = r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier>;

        $z2 = virtualinvoke $r12.<java.util.jar.JarVerifier: boolean isSignedJar()>();

        if $z2 == 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        r0.<java.util.jar.StrictJarFile: boolean isSigned> = $z1;

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        r14 = $r13;

        $l1 = r0.<java.util.jar.StrictJarFile: long nativeHandle>;

        staticinvoke <java.util.jar.StrictJarFile: void nativeClose(long)>($l1);

        throw r14;

     label6:
        $r11 = r0.<java.util.jar.StrictJarFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r11.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public java.util.jar.Manifest getManifest()
    {
        java.util.jar.StrictJarFile r0;
        java.util.jar.Manifest $r1;

        r0 := @this: java.util.jar.StrictJarFile;

        $r1 = r0.<java.util.jar.StrictJarFile: java.util.jar.Manifest manifest>;

        return $r1;
    }

    public java.util.Iterator iterator() throws java.io.IOException
    {
        java.util.jar.StrictJarFile r0;
        java.util.jar.StrictJarFile$EntryIterator $r1;
        long $l0;

        r0 := @this: java.util.jar.StrictJarFile;

        $r1 = new java.util.jar.StrictJarFile$EntryIterator;

        $l0 = r0.<java.util.jar.StrictJarFile: long nativeHandle>;

        specialinvoke $r1.<java.util.jar.StrictJarFile$EntryIterator: void <init>(long,java.lang.String)>($l0, "");

        return $r1;
    }

    public java.util.zip.ZipEntry findEntry(java.lang.String)
    {
        java.util.jar.StrictJarFile r0;
        java.lang.String r1;
        long $l0;
        java.util.zip.ZipEntry $r2;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<java.util.jar.StrictJarFile: long nativeHandle>;

        $r2 = staticinvoke <java.util.jar.StrictJarFile: java.util.zip.ZipEntry nativeFindEntry(long,java.lang.String)>($l0, r1);

        return $r2;
    }

    public java.security.cert.Certificate[][] getCertificateChains(java.util.zip.ZipEntry)
    {
        java.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        boolean $z0;
        java.security.cert.Certificate[][] $r2, $r5;
        java.util.jar.JarVerifier $r3;
        java.lang.String $r4;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $z0 = r0.<java.util.jar.StrictJarFile: boolean isSigned>;

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier>;

        $r4 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r5 = virtualinvoke $r3.<java.util.jar.JarVerifier: java.security.cert.Certificate[][] getCertificateChains(java.lang.String)>($r4);

        return $r5;

     label1:
        $r2 = (java.security.cert.Certificate[][]) null;

        return $r2;
    }

    public java.security.cert.Certificate[] getCertificates(java.util.zip.ZipEntry)
    {
        java.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        java.security.cert.Certificate[][] r2, r3, r9;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8;
        java.security.cert.Certificate[] r4, r5, r8;
        boolean $z0;
        java.util.jar.JarVerifier $r6;
        java.lang.String $r7;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $z0 = r0.<java.util.jar.StrictJarFile: boolean isSigned>;

        if $z0 == 0 goto label5;

        $r6 = r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier>;

        $r7 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        r2 = virtualinvoke $r6.<java.util.jar.JarVerifier: java.security.cert.Certificate[][] getCertificateChains(java.lang.String)>($r7);

        i0 = 0;

        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r4 = r3[i2];

        $i6 = lengthof r4;

        i0 = i0 + $i6;

        i2 = i2 + 1;

        goto label1;

     label2:
        r8 = newarray (java.security.cert.Certificate)[i0];

        i7 = 0;

        r9 = r2;

        i8 = lengthof r9;

        i3 = 0;

     label3:
        if i3 >= i8 goto label4;

        r5 = r9[i3];

        $i4 = lengthof r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r8, i7, $i4);

        $i5 = lengthof r5;

        i7 = i7 + $i5;

        i3 = i3 + 1;

        goto label3;

     label4:
        return r8;

     label5:
        return null;
    }

    public java.io.InputStream getInputStream(java.util.zip.ZipEntry)
    {
        java.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        java.io.InputStream r2;
        java.util.jar.JarVerifier$VerifierEntry r3;
        boolean $z0;
        java.util.jar.JarVerifier $r4;
        java.lang.String $r5;
        java.util.jar.JarFile$JarFileInputStream $r6;
        long $l0;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        r2 = specialinvoke r0.<java.util.jar.StrictJarFile: java.io.InputStream getZipInputStream(java.util.zip.ZipEntry)>(r1);

        $z0 = r0.<java.util.jar.StrictJarFile: boolean isSigned>;

        if $z0 == 0 goto label2;

        $r4 = r0.<java.util.jar.StrictJarFile: java.util.jar.JarVerifier verifier>;

        $r5 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        r3 = virtualinvoke $r4.<java.util.jar.JarVerifier: java.util.jar.JarVerifier$VerifierEntry initEntry(java.lang.String)>($r5);

        if r3 != null goto label1;

        return r2;

     label1:
        $r6 = new java.util.jar.JarFile$JarFileInputStream;

        $l0 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        specialinvoke $r6.<java.util.jar.JarFile$JarFileInputStream: void <init>(java.io.InputStream,long,java.util.jar.JarVerifier$VerifierEntry)>(r2, $l0, r3);

        return $r6;

     label2:
        return r2;
    }

    public void close() throws java.io.IOException
    {
        java.util.jar.StrictJarFile r0;
        boolean $z0;
        dalvik.system.CloseGuard $r1;
        long $l0;
        java.io.RandomAccessFile $r2;

        r0 := @this: java.util.jar.StrictJarFile;

        $z0 = r0.<java.util.jar.StrictJarFile: boolean closed>;

        if $z0 != 0 goto label1;

        $r1 = r0.<java.util.jar.StrictJarFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $l0 = r0.<java.util.jar.StrictJarFile: long nativeHandle>;

        staticinvoke <java.util.jar.StrictJarFile: void nativeClose(long)>($l0);

        $r2 = r0.<java.util.jar.StrictJarFile: java.io.RandomAccessFile raf>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r2);

        r0.<java.util.jar.StrictJarFile: boolean closed> = 1;

     label1:
        return;
    }

    private java.io.InputStream getZipInputStream(java.util.zip.ZipEntry)
    {
        java.util.jar.StrictJarFile r0;
        java.util.zip.ZipEntry r1;
        java.util.zip.ZipFile$RAFStream r2, $r3, $r8;
        int i0, $i1, $i8;
        java.io.RandomAccessFile $r4, $r7;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12;
        java.util.zip.Inflater $r5;
        java.util.zip.ZipFile$ZipInflaterInputStream $r6;

        r0 := @this: java.util.jar.StrictJarFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $i1 = virtualinvoke r1.<java.util.zip.ZipEntry: int getMethod()>();

        if $i1 != 0 goto label1;

        $r8 = new java.util.zip.ZipFile$RAFStream;

        $r7 = r0.<java.util.jar.StrictJarFile: java.io.RandomAccessFile raf>;

        $l10 = virtualinvoke r1.<java.util.zip.ZipEntry: long getDataOffset()>();

        $l9 = virtualinvoke r1.<java.util.zip.ZipEntry: long getDataOffset()>();

        $l12 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        $l11 = $l9 + $l12;

        specialinvoke $r8.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long,long)>($r7, $l10, $l11);

        return $r8;

     label1:
        $r3 = new java.util.zip.ZipFile$RAFStream;

        $r4 = r0.<java.util.jar.StrictJarFile: java.io.RandomAccessFile raf>;

        $l2 = virtualinvoke r1.<java.util.zip.ZipEntry: long getDataOffset()>();

        $l3 = virtualinvoke r1.<java.util.zip.ZipEntry: long getDataOffset()>();

        $l4 = virtualinvoke r1.<java.util.zip.ZipEntry: long getCompressedSize()>();

        $l5 = $l3 + $l4;

        specialinvoke $r3.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long,long)>($r4, $l2, $l5);

        r2 = $r3;

        $l6 = virtualinvoke r1.<java.util.zip.ZipEntry: long getSize()>();

        $l7 = staticinvoke <java.lang.Math: long min(long,long)>($l6, 65535L);

        $i8 = (int) $l7;

        i0 = staticinvoke <java.lang.Math: int max(int,int)>(1024, $i8);

        $r6 = new java.util.zip.ZipFile$ZipInflaterInputStream;

        $r5 = new java.util.zip.Inflater;

        specialinvoke $r5.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r6.<java.util.zip.ZipFile$ZipInflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int,java.util.zip.ZipEntry)>(r2, $r5, i0, r1);

        return $r6;
    }

    private java.util.HashMap getMetaEntries() throws java.io.IOException
    {
        java.util.jar.StrictJarFile r0;
        java.util.HashMap r1, $r4;
        java.util.jar.StrictJarFile$EntryIterator r2, $r5;
        java.util.zip.ZipEntry r3;
        long $l0;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7;
        java.io.InputStream $r8;
        byte[] $r9;

        r0 := @this: java.util.jar.StrictJarFile;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r1 = $r4;

        $r5 = new java.util.jar.StrictJarFile$EntryIterator;

        $l0 = r0.<java.util.jar.StrictJarFile: long nativeHandle>;

        specialinvoke $r5.<java.util.jar.StrictJarFile$EntryIterator: void <init>(long,java.lang.String)>($l0, "META-INF/");

        r2 = $r5;

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.zip.ZipEntry) $r6;

        $r7 = virtualinvoke r3.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r8 = virtualinvoke r0.<java.util.jar.StrictJarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r3);

        $r9 = staticinvoke <libcore.io.Streams: byte[] readFully(java.io.InputStream)>($r8);

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

        goto label1;

     label2:
        return r1;
    }

    private static native long nativeOpenJarFile(java.lang.String) throws java.io.IOException;

    private static native long nativeStartIteration(long, java.lang.String);

    private static native java.util.zip.ZipEntry nativeNextEntry(long);

    private static native java.util.zip.ZipEntry nativeFindEntry(long, java.lang.String);

    private static native void nativeClose(long);

    static long access$000(long, java.lang.String)
    {
        long l0, $l1;
        java.lang.String r0;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        $l1 = staticinvoke <java.util.jar.StrictJarFile: long nativeStartIteration(long,java.lang.String)>(l0, r0);

        return $l1;
    }

    static java.util.zip.ZipEntry access$100(long)
    {
        long l0;
        java.util.zip.ZipEntry $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.util.jar.StrictJarFile: java.util.zip.ZipEntry nativeNextEntry(long)>(l0);

        return $r0;
    }
}
