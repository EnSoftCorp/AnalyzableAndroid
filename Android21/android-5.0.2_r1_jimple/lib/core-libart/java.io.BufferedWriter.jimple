public class java.io.BufferedWriter extends java.io.Writer
{
    private java.io.Writer out;
    private char[] buf;
    private int pos;

    public void <init>(java.io.Writer)
    {
        java.io.BufferedWriter r0;
        java.io.Writer r1;

        r0 := @this: java.io.BufferedWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r1, 8192);

        return;
    }

    public void <init>(java.io.Writer, int)
    {
        java.io.BufferedWriter r0;
        java.io.Writer r1;
        int i0;
        char[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.BufferedWriter;

        r1 := @parameter0: java.io.Writer;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.Writer: void <init>(java.lang.Object)>(r1);

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r3;

     label1:
        r0.<java.io.BufferedWriter: java.io.Writer out> = r1;

        $r2 = newarray (char)[i0];

        r0.<java.io.BufferedWriter: char[] buf> = $r2;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, r3, r4, $r7, $r8, $r9, r10;
        boolean $z0;
        java.io.Writer $r6;

        r0 := @this: java.io.BufferedWriter;

        $r5 = r0.<java.io.BufferedWriter: java.lang.Object lock>;

        r1 = $r5;

        entermonitor $r5;

     label01:
        $z0 = specialinvoke r0.<java.io.BufferedWriter: boolean isClosed()>();

        if $z0 == 0 goto label03;

        exitmonitor r1;

     label02:
        return;

     label03:
        r2 = null;

     label04:
        specialinvoke r0.<java.io.BufferedWriter: void flushInternal()>();

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

        r3 = $r9;

        r2 = r3;

     label07:
        r0.<java.io.BufferedWriter: char[] buf> = null;

     label08:
        $r6 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r6.<java.io.Writer: void close()>();

     label09:
        goto label11;

     label10:
        $r8 := @caughtexception;

        r10 = $r8;

        if r2 != null goto label11;

        r2 = r10;

     label11:
        r0.<java.io.BufferedWriter: java.io.Writer out> = null;

        if r2 == null goto label12;

        staticinvoke <libcore.util.SneakyThrow: void sneakyThrow(java.lang.Throwable)>(r2);

     label12:
        exitmonitor r1;

     label13:
        goto label16;

     label14:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r1;

     label15:
        throw r4;

     label16:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public void flush() throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.io.Writer $r4;

        r0 := @this: java.io.BufferedWriter;

        $r3 = r0.<java.io.BufferedWriter: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.BufferedWriter: void checkNotClosed()>();

        specialinvoke r0.<java.io.BufferedWriter: void flushInternal()>();

        $r4 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r4.<java.io.Writer: void flush()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.io.BufferedWriter;

        $z0 = specialinvoke r0.<java.io.BufferedWriter: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("BufferedWriter is closed");

        throw $r1;

     label1:
        return;
    }

    private void flushInternal() throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        int $i0, $i1;
        char[] $r1;
        java.io.Writer $r2;

        r0 := @this: java.io.BufferedWriter;

        $i0 = r0.<java.io.BufferedWriter: int pos>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        $r1 = r0.<java.io.BufferedWriter: char[] buf>;

        $i1 = r0.<java.io.BufferedWriter: int pos>;

        virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r1, 0, $i1);

     label1:
        r0.<java.io.BufferedWriter: int pos> = 0;

        return;
    }

    private boolean isClosed()
    {
        java.io.BufferedWriter r0;
        java.io.Writer $r1;
        boolean $z0;

        r0 := @this: java.io.BufferedWriter;

        $r1 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void newLine() throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.String $r1;

        r0 := @this: java.io.BufferedWriter;

        $r1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>($r1);

        return;
    }

    public void write(char[], int, int) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        char[] r1, $r5, $r6, $r7, $r8, $r9, $r11, $r13, $r15;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r16;
        java.io.Writer $r10, $r12, $r14;
        java.lang.NullPointerException $r17;

        r0 := @this: java.io.BufferedWriter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = r0.<java.io.BufferedWriter: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<java.io.BufferedWriter: void checkNotClosed()>();

        if r1 != null goto label02;

        $r17 = new java.lang.NullPointerException;

        specialinvoke $r17.<java.lang.NullPointerException: void <init>(java.lang.String)>("buffer == null");

        throw $r17;

     label02:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = r0.<java.io.BufferedWriter: int pos>;

        if $i4 != 0 goto label04;

        $r15 = r0.<java.io.BufferedWriter: char[] buf>;

        $i16 = lengthof $r15;

        if i1 < $i16 goto label04;

        $r14 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r14.<java.io.Writer: void write(char[],int,int)>(r1, i0, i1);

        exitmonitor r2;

     label03:
        return;

     label04:
        $r5 = r0.<java.io.BufferedWriter: char[] buf>;

        $i6 = lengthof $r5;

        $i5 = r0.<java.io.BufferedWriter: int pos>;

        i2 = $i6 - $i5;

        if i1 >= i2 goto label05;

        i2 = i1;

     label05:
        if i2 <= 0 goto label06;

        $r13 = r0.<java.io.BufferedWriter: char[] buf>;

        $i14 = r0.<java.io.BufferedWriter: int pos>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i0, $r13, $i14, i2);

        $i15 = r0.<java.io.BufferedWriter: int pos>;

        $i17 = $i15 + i2;

        r0.<java.io.BufferedWriter: int pos> = $i17;

     label06:
        $i8 = r0.<java.io.BufferedWriter: int pos>;

        $r6 = r0.<java.io.BufferedWriter: char[] buf>;

        $i7 = lengthof $r6;

        if $i8 != $i7 goto label09;

        $r10 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        $r8 = r0.<java.io.BufferedWriter: char[] buf>;

        $r7 = r0.<java.io.BufferedWriter: char[] buf>;

        $i9 = lengthof $r7;

        virtualinvoke $r10.<java.io.Writer: void write(char[],int,int)>($r8, 0, $i9);

        r0.<java.io.BufferedWriter: int pos> = 0;

        if i1 <= i2 goto label09;

        i18 = i0 + i2;

        i19 = i1 - i2;

        $r9 = r0.<java.io.BufferedWriter: char[] buf>;

        $i11 = lengthof $r9;

        if i19 < $i11 goto label08;

        $r12 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r12.<java.io.Writer: void write(char[],int,int)>(r1, i18, i19);

        exitmonitor r2;

     label07:
        return;

     label08:
        $r11 = r0.<java.io.BufferedWriter: char[] buf>;

        $i10 = r0.<java.io.BufferedWriter: int pos>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i18, $r11, $i10, i19);

        $i12 = r0.<java.io.BufferedWriter: int pos>;

        $i13 = $i12 + i19;

        r0.<java.io.BufferedWriter: int pos> = $i13;

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r16 := @caughtexception;

        r3 = $r16;

        exitmonitor r2;

     label12:
        throw r3;

     label13:
        return;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label07 with label11;
        catch java.lang.Throwable from label08 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        int i0, $i1, $i2, $i3, $i4, $i6;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        char[] $r4, $r5, $r6, $r7;
        char $c5;
        java.io.Writer $r9;

        r0 := @this: java.io.BufferedWriter;

        i0 := @parameter0: int;

        $r3 = r0.<java.io.BufferedWriter: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.BufferedWriter: void checkNotClosed()>();

        $i2 = r0.<java.io.BufferedWriter: int pos>;

        $r4 = r0.<java.io.BufferedWriter: char[] buf>;

        $i1 = lengthof $r4;

        if $i2 < $i1 goto label2;

        $r9 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        $r7 = r0.<java.io.BufferedWriter: char[] buf>;

        $r6 = r0.<java.io.BufferedWriter: char[] buf>;

        $i6 = lengthof $r6;

        virtualinvoke $r9.<java.io.Writer: void write(char[],int,int)>($r7, 0, $i6);

        r0.<java.io.BufferedWriter: int pos> = 0;

     label2:
        $r5 = r0.<java.io.BufferedWriter: char[] buf>;

        $i3 = r0.<java.io.BufferedWriter: int pos>;

        $i4 = $i3 + 1;

        r0.<java.io.BufferedWriter: int pos> = $i4;

        $c5 = (char) i0;

        $r5[$i3] = $c5;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24;
        java.lang.Object r2, $r6;
        char[] r3, r4, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17;
        java.lang.Throwable r5, $r19;
        java.lang.StringIndexOutOfBoundsException $r7;
        java.io.Writer $r11, $r16, $r18;

        r0 := @this: java.io.BufferedWriter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r6 = r0.<java.io.BufferedWriter: java.lang.Object lock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        specialinvoke r0.<java.io.BufferedWriter: void checkNotClosed()>();

        if i1 > 0 goto label03;

        exitmonitor r2;

     label02:
        return;

     label03:
        if i0 < 0 goto label04;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i2 - i1;

        if i0 <= $i3 goto label05;

     label04:
        $r7 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r7.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        throw $r7;

     label05:
        $i4 = r0.<java.io.BufferedWriter: int pos>;

        if $i4 != 0 goto label07;

        $r17 = r0.<java.io.BufferedWriter: char[] buf>;

        $i20 = lengthof $r17;

        if i1 < $i20 goto label07;

        r3 = newarray (char)[i1];

        $i21 = i0 + i1;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i21, r3, 0);

        $r18 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r18.<java.io.Writer: void write(char[],int,int)>(r3, 0, i1);

        exitmonitor r2;

     label06:
        return;

     label07:
        $r8 = r0.<java.io.BufferedWriter: char[] buf>;

        $i6 = lengthof $r8;

        $i5 = r0.<java.io.BufferedWriter: int pos>;

        i22 = $i6 - $i5;

        if i1 >= i22 goto label08;

        i22 = i1;

     label08:
        if i22 <= 0 goto label09;

        $i18 = i0 + i22;

        $r15 = r0.<java.io.BufferedWriter: char[] buf>;

        $i16 = r0.<java.io.BufferedWriter: int pos>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i18, $r15, $i16);

        $i19 = r0.<java.io.BufferedWriter: int pos>;

        $i17 = $i19 + i22;

        r0.<java.io.BufferedWriter: int pos> = $i17;

     label09:
        $i8 = r0.<java.io.BufferedWriter: int pos>;

        $r9 = r0.<java.io.BufferedWriter: char[] buf>;

        $i7 = lengthof $r9;

        if $i8 != $i7 goto label12;

        $r11 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        $r12 = r0.<java.io.BufferedWriter: char[] buf>;

        $r10 = r0.<java.io.BufferedWriter: char[] buf>;

        $i9 = lengthof $r10;

        virtualinvoke $r11.<java.io.Writer: void write(char[],int,int)>($r12, 0, $i9);

        r0.<java.io.BufferedWriter: int pos> = 0;

        if i1 <= i22 goto label12;

        i23 = i0 + i22;

        i24 = i1 - i22;

        $r13 = r0.<java.io.BufferedWriter: char[] buf>;

        $i10 = lengthof $r13;

        if i24 < $i10 goto label11;

        r4 = newarray (char)[i1];

        $i14 = i23 + i24;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i23, $i14, r4, 0);

        $r16 = r0.<java.io.BufferedWriter: java.io.Writer out>;

        virtualinvoke $r16.<java.io.Writer: void write(char[],int,int)>(r4, 0, i24);

        exitmonitor r2;

     label10:
        return;

     label11:
        $i13 = i23 + i24;

        $r14 = r0.<java.io.BufferedWriter: char[] buf>;

        $i11 = r0.<java.io.BufferedWriter: int pos>;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i23, $i13, $r14, $i11);

        $i12 = r0.<java.io.BufferedWriter: int pos>;

        $i15 = $i12 + i24;

        r0.<java.io.BufferedWriter: int pos> = $i15;

     label12:
        exitmonitor r2;

     label13:
        goto label16;

     label14:
        $r19 := @caughtexception;

        r5 = $r19;

        exitmonitor r2;

     label15:
        throw r5;

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label06 with label14;
        catch java.lang.Throwable from label07 to label10 with label14;
        catch java.lang.Throwable from label11 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }
}
