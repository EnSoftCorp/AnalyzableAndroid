public final class dalvik.system.ZygoteHooks extends java.lang.Object
{
    private long token;

    public void <init>()
    {
        dalvik.system.ZygoteHooks r0;

        r0 := @this: dalvik.system.ZygoteHooks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void preFork()
    {
        dalvik.system.ZygoteHooks r0;
        long $l0;

        r0 := @this: dalvik.system.ZygoteHooks;

        staticinvoke <java.lang.Daemons: void stop()>();

        staticinvoke <dalvik.system.ZygoteHooks: void waitUntilAllThreadsStopped()>();

        $l0 = staticinvoke <dalvik.system.ZygoteHooks: long nativePreFork()>();

        r0.<dalvik.system.ZygoteHooks: long token> = $l0;

        return;
    }

    public void postForkChild(int, java.lang.String)
    {
        dalvik.system.ZygoteHooks r0;
        int i0;
        java.lang.String r1;
        long $l1;

        r0 := @this: dalvik.system.ZygoteHooks;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $l1 = r0.<dalvik.system.ZygoteHooks: long token>;

        staticinvoke <dalvik.system.ZygoteHooks: void nativePostForkChild(long,int,java.lang.String)>($l1, i0, r1);

        return;
    }

    public void postForkCommon()
    {
        dalvik.system.ZygoteHooks r0;

        r0 := @this: dalvik.system.ZygoteHooks;

        staticinvoke <java.lang.Daemons: void start()>();

        return;
    }

    private static native long nativePreFork();

    private static native void nativePostForkChild(long, int, java.lang.String);

    private static void waitUntilAllThreadsStopped()
    {
        java.io.File r0, $r2;
        java.lang.String[] $r3;
        int $i0;
        java.lang.InterruptedException $r4;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/proc/self/task");

        r0 = $r2;

     label1:
        $r3 = virtualinvoke r0.<java.io.File: java.lang.String[] list()>();

        $i0 = lengthof $r3;

        if $i0 <= 1 goto label5;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(10L);

     label3:
        goto label1;

     label4:
        $r4 := @caughtexception;

        goto label1;

     label5:
        return;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }
}
