final class java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter extends java.lang.ThreadLocal
{

    void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter r0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter;

        specialinvoke r0.<java.lang.ThreadLocal: void <init>()>();

        return;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter initialValue()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter;

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter: void <init>()>();

        return $r1;
    }

    public volatile java.lang.Object initialValue()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter;

        $r1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter initialValue()>();

        return $r1;
    }
}
