public abstract class java.util.logging.Formatter extends java.lang.Object
{

    protected void <init>()
    {
        java.util.logging.Formatter r0;

        r0 := @this: java.util.logging.Formatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.String format(java.util.logging.LogRecord);

    public java.lang.String formatMessage(java.util.logging.LogRecord)
    {
        java.util.logging.Formatter r0;
        java.util.logging.LogRecord r1;
        java.lang.String r2;
        java.util.ResourceBundle $r3, r6;
        int $i0, $i1;
        java.lang.Exception $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Object[] r7;

        r0 := @this: java.util.logging.Formatter;

        r1 := @parameter0: java.util.logging.LogRecord;

        r2 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();

        $r3 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.ResourceBundle getResourceBundle()>();

        r6 = $r3;

        if $r3 == null goto label4;

     label1:
        r2 = virtualinvoke r6.<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();

     label4:
        if r2 == null goto label8;

        r7 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.Object[] getParameters()>();

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("{0");

        if $i0 < 0 goto label8;

        if r7 == null goto label8;

        $i1 = lengthof r7;

        if $i1 <= 0 goto label8;

     label5:
        r2 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r2, r7);

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

        r2 = virtualinvoke r1.<java.util.logging.LogRecord: java.lang.String getMessage()>();

     label8:
        return r2;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label5 to label6 with label7;
    }

    public java.lang.String getHead(java.util.logging.Handler)
    {
        java.util.logging.Formatter r0;
        java.util.logging.Handler r1;

        r0 := @this: java.util.logging.Formatter;

        r1 := @parameter0: java.util.logging.Handler;

        return "";
    }

    public java.lang.String getTail(java.util.logging.Handler)
    {
        java.util.logging.Formatter r0;
        java.util.logging.Handler r1;

        r0 := @this: java.util.logging.Formatter;

        r1 := @parameter0: java.util.logging.Handler;

        return "";
    }
}
