public abstract class javax.xml.parsers.SAXParser extends java.lang.Object
{
    private static final boolean DEBUG;

    protected void <init>()
    {
        javax.xml.parsers.SAXParser r0;

        r0 := @this: javax.xml.parsers.SAXParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void reset()
    {
        javax.xml.parsers.SAXParser r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r6, $r7, $r8, $r12, $r13, $r14, $r18, $r19;
        java.lang.Class $r4, $r9, $r15;
        java.lang.String $r5, $r11, $r16, $r20;
        java.lang.Package $r10, $r17;

        r0 := @this: javax.xml.parsers.SAXParser;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This SAXParser, \"");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\", does not support the reset functionality.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Specification \"");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Package getPackage()>();

        $r11 = virtualinvoke $r10.<java.lang.Package: java.lang.String getSpecificationTitle()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version \"");

        $r15 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r15.<java.lang.Class: java.lang.Package getPackage()>();

        $r16 = virtualinvoke $r17.<java.lang.Package: java.lang.String getSpecificationVersion()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r20);

        throw $r1;
    }

    public void parse(java.io.InputStream, org.xml.sax.HandlerBase) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.InputStream r1;
        org.xml.sax.HandlerBase r2;
        org.xml.sax.InputSource r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.xml.sax.HandlerBase;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream cannot be null");

        throw $r5;

     label1:
        $r4 = new org.xml.sax.InputSource;

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        r3 = $r4;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>(r3, r2);

        return;
    }

    public void parse(java.io.InputStream, org.xml.sax.HandlerBase, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.InputStream r1;
        org.xml.sax.HandlerBase r2;
        java.lang.String r3;
        org.xml.sax.InputSource r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.xml.sax.HandlerBase;

        r3 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream cannot be null");

        throw $r6;

     label1:
        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        r4 = $r5;

        virtualinvoke r4.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r3);

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>(r4, r2);

        return;
    }

    public void parse(java.io.InputStream, org.xml.sax.helpers.DefaultHandler) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.InputStream r1;
        org.xml.sax.helpers.DefaultHandler r2;
        org.xml.sax.InputSource r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream cannot be null");

        throw $r5;

     label1:
        $r4 = new org.xml.sax.InputSource;

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        r3 = $r4;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>(r3, r2);

        return;
    }

    public void parse(java.io.InputStream, org.xml.sax.helpers.DefaultHandler, java.lang.String) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.InputStream r1;
        org.xml.sax.helpers.DefaultHandler r2;
        java.lang.String r3;
        org.xml.sax.InputSource r4, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        r3 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputStream cannot be null");

        throw $r6;

     label1:
        $r5 = new org.xml.sax.InputSource;

        specialinvoke $r5.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r1);

        r4 = $r5;

        virtualinvoke r4.<org.xml.sax.InputSource: void setSystemId(java.lang.String)>(r3);

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>(r4, r2);

        return;
    }

    public void parse(java.lang.String, org.xml.sax.HandlerBase) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.lang.String r1;
        org.xml.sax.HandlerBase r2;
        org.xml.sax.InputSource r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xml.sax.HandlerBase;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("uri cannot be null");

        throw $r5;

     label1:
        $r4 = new org.xml.sax.InputSource;

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r1);

        r3 = $r4;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>(r3, r2);

        return;
    }

    public void parse(java.lang.String, org.xml.sax.helpers.DefaultHandler) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.lang.String r1;
        org.xml.sax.helpers.DefaultHandler r2;
        org.xml.sax.InputSource r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("uri cannot be null");

        throw $r5;

     label1:
        $r4 = new org.xml.sax.InputSource;

        specialinvoke $r4.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r1);

        r3 = $r4;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>(r3, r2);

        return;
    }

    public void parse(java.io.File, org.xml.sax.HandlerBase) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.File r1;
        org.xml.sax.HandlerBase r2;
        java.lang.String r3, $r5;
        org.xml.sax.InputSource r4, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.xml.sax.HandlerBase;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File cannot be null");

        throw $r7;

     label1:
        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = staticinvoke <javax.xml.parsers.FilePathToURI: java.lang.String filepath2URI(java.lang.String)>($r5);

        $r6 = new org.xml.sax.InputSource;

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r3);

        r4 = $r6;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.HandlerBase)>(r4, r2);

        return;
    }

    public void parse(java.io.File, org.xml.sax.helpers.DefaultHandler) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        java.io.File r1;
        org.xml.sax.helpers.DefaultHandler r2;
        java.lang.String r3, $r5;
        org.xml.sax.InputSource r4, $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("File cannot be null");

        throw $r7;

     label1:
        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        r3 = staticinvoke <javax.xml.parsers.FilePathToURI: java.lang.String filepath2URI(java.lang.String)>($r5);

        $r6 = new org.xml.sax.InputSource;

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.lang.String)>(r3);

        r4 = $r6;

        virtualinvoke r0.<javax.xml.parsers.SAXParser: void parse(org.xml.sax.InputSource,org.xml.sax.helpers.DefaultHandler)>(r4, r2);

        return;
    }

    public void parse(org.xml.sax.InputSource, org.xml.sax.HandlerBase) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        org.xml.sax.InputSource r1;
        org.xml.sax.HandlerBase r2;
        org.xml.sax.Parser r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: org.xml.sax.InputSource;

        r2 := @parameter1: org.xml.sax.HandlerBase;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputSource cannot be null");

        throw $r4;

     label1:
        r3 = virtualinvoke r0.<javax.xml.parsers.SAXParser: org.xml.sax.Parser getParser()>();

        if r2 == null goto label2;

        interfaceinvoke r3.<org.xml.sax.Parser: void setDocumentHandler(org.xml.sax.DocumentHandler)>(r2);

        interfaceinvoke r3.<org.xml.sax.Parser: void setEntityResolver(org.xml.sax.EntityResolver)>(r2);

        interfaceinvoke r3.<org.xml.sax.Parser: void setErrorHandler(org.xml.sax.ErrorHandler)>(r2);

        interfaceinvoke r3.<org.xml.sax.Parser: void setDTDHandler(org.xml.sax.DTDHandler)>(r2);

     label2:
        interfaceinvoke r3.<org.xml.sax.Parser: void parse(org.xml.sax.InputSource)>(r1);

        return;
    }

    public void parse(org.xml.sax.InputSource, org.xml.sax.helpers.DefaultHandler) throws org.xml.sax.SAXException, java.io.IOException
    {
        javax.xml.parsers.SAXParser r0;
        org.xml.sax.InputSource r1;
        org.xml.sax.helpers.DefaultHandler r2;
        org.xml.sax.XMLReader r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.xml.parsers.SAXParser;

        r1 := @parameter0: org.xml.sax.InputSource;

        r2 := @parameter1: org.xml.sax.helpers.DefaultHandler;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputSource cannot be null");

        throw $r4;

     label1:
        r3 = virtualinvoke r0.<javax.xml.parsers.SAXParser: org.xml.sax.XMLReader getXMLReader()>();

        if r2 == null goto label2;

        interfaceinvoke r3.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>(r2);

        interfaceinvoke r3.<org.xml.sax.XMLReader: void setEntityResolver(org.xml.sax.EntityResolver)>(r2);

        interfaceinvoke r3.<org.xml.sax.XMLReader: void setErrorHandler(org.xml.sax.ErrorHandler)>(r2);

        interfaceinvoke r3.<org.xml.sax.XMLReader: void setDTDHandler(org.xml.sax.DTDHandler)>(r2);

     label2:
        interfaceinvoke r3.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>(r1);

        return;
    }

    public abstract org.xml.sax.Parser getParser() throws org.xml.sax.SAXException;

    public abstract org.xml.sax.XMLReader getXMLReader() throws org.xml.sax.SAXException;

    public abstract boolean isNamespaceAware();

    public abstract boolean isValidating();

    public abstract void setProperty(java.lang.String, java.lang.Object) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;

    public abstract java.lang.Object getProperty(java.lang.String) throws org.xml.sax.SAXNotRecognizedException, org.xml.sax.SAXNotSupportedException;

    public javax.xml.validation.Schema getSchema()
    {
        javax.xml.parsers.SAXParser r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r7, $r8, $r12, $r13;
        java.lang.Class $r4, $r9;
        java.lang.Package $r5, $r10;
        java.lang.String $r6, $r11, $r14;

        r0 := @this: javax.xml.parsers.SAXParser;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This parser does not support specification \"");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Package getPackage()>();

        $r6 = virtualinvoke $r5.<java.lang.Package: java.lang.String getSpecificationTitle()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" version \"");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Package getPackage()>();

        $r11 = virtualinvoke $r10.<java.lang.Package: java.lang.String getSpecificationVersion()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r14);

        throw $r1;
    }

    public boolean isXIncludeAware()
    {
        javax.xml.parsers.SAXParser r0;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r7, $r8, $r12, $r13;
        java.lang.Class $r4, $r9;
        java.lang.Package $r5, $r10;
        java.lang.String $r6, $r11, $r14;

        r0 := @this: javax.xml.parsers.SAXParser;

        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This parser does not support specification \"");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Package getPackage()>();

        $r6 = virtualinvoke $r5.<java.lang.Package: java.lang.String getSpecificationTitle()>();

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" version \"");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.Package getPackage()>();

        $r11 = virtualinvoke $r10.<java.lang.Package: java.lang.String getSpecificationVersion()>();

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r14);

        throw $r1;
    }

    public static void <clinit>()
    {
        <javax.xml.parsers.SAXParser: boolean DEBUG> = 0;

        return;
    }
}
