class java.util.IdentityHashMap$IdentityHashMapIterator extends java.lang.Object implements java.util.Iterator
{
    private int position;
    private int lastPosition;
    final java.util.IdentityHashMap associatedMap;
    int expectedModCount;
    final java.util.MapEntry$Type type;
    boolean canRemove;

    void <init>(java.util.MapEntry$Type, java.util.IdentityHashMap)
    {
        java.util.IdentityHashMap$IdentityHashMapIterator r0;
        java.util.MapEntry$Type r1;
        java.util.IdentityHashMap r2;
        int $i0;

        r0 := @this: java.util.IdentityHashMap$IdentityHashMapIterator;

        r1 := @parameter0: java.util.MapEntry$Type;

        r2 := @parameter1: java.util.IdentityHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position> = 0;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int lastPosition> = 0;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: boolean canRemove> = 0;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap> = r2;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.MapEntry$Type type> = r1;

        $i0 = r2.<java.util.IdentityHashMap: int modCount>;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int expectedModCount> = $i0;

        return;
    }

    public boolean hasNext()
    {
        java.util.IdentityHashMap$IdentityHashMapIterator r0;
        java.util.IdentityHashMap $r1, $r3;
        java.lang.Object[] $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r5;

        r0 := @this: java.util.IdentityHashMap$IdentityHashMapIterator;

     label1:
        $i1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        $r1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $r2 = $r1.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label3;

        $r3 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $r4 = $r3.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i2 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        $r5 = $r4[$i2];

        if $r5 != null goto label2;

        $i3 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        $i4 = $i3 + 2;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position> = $i4;

        goto label1;

     label2:
        return 1;

     label3:
        return 0;
    }

    void checkConcurrentMod() throws java.util.ConcurrentModificationException
    {
        java.util.IdentityHashMap$IdentityHashMapIterator r0;
        java.util.IdentityHashMap $r1;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.IdentityHashMap$IdentityHashMapIterator;

        $i1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int expectedModCount>;

        $r1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $i0 = $r1.<java.util.IdentityHashMap: int modCount>;

        if $i1 == $i0 goto label1;

        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public java.lang.Object next()
    {
        java.util.IdentityHashMap$IdentityHashMapIterator r0;
        java.util.IdentityHashMap$IdentityHashMapEntry r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.util.IdentityHashMap $r2;
        java.util.MapEntry$Type $r3;
        java.lang.Object $r4;
        java.util.NoSuchElementException $r5;

        r0 := @this: java.util.IdentityHashMap$IdentityHashMapIterator;

        virtualinvoke r0.<java.util.IdentityHashMap$IdentityHashMapIterator: void checkConcurrentMod()>();

        $z0 = virtualinvoke r0.<java.util.IdentityHashMap$IdentityHashMapIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r5 = new java.util.NoSuchElementException;

        specialinvoke $r5.<java.util.NoSuchElementException: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $i0 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        r1 = staticinvoke <java.util.IdentityHashMap: java.util.IdentityHashMap$IdentityHashMapEntry access$000(java.util.IdentityHashMap,int)>($r2, $i0);

        $i1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int lastPosition> = $i1;

        $i2 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position>;

        $i3 = $i2 + 2;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position> = $i3;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: boolean canRemove> = 1;

        $r3 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.MapEntry$Type type>;

        $r4 = interfaceinvoke $r3.<java.util.MapEntry$Type: java.lang.Object get(java.util.MapEntry)>(r1);

        return $r4;
    }

    public void remove()
    {
        java.util.IdentityHashMap$IdentityHashMapIterator r0;
        boolean $z0;
        java.util.IdentityHashMap $r1, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.util.IdentityHashMap$IdentityHashMapIterator;

        virtualinvoke r0.<java.util.IdentityHashMap$IdentityHashMapIterator: void checkConcurrentMod()>();

        $z0 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: boolean canRemove>;

        if $z0 != 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>()>();

        throw $r6;

     label1:
        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: boolean canRemove> = 0;

        $r4 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $r1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: java.util.IdentityHashMap associatedMap>;

        $r2 = $r1.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int lastPosition>;

        $r3 = $r2[$i0];

        virtualinvoke $r4.<java.util.IdentityHashMap: java.lang.Object remove(java.lang.Object)>($r3);

        $i1 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int lastPosition>;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int position> = $i1;

        $i2 = r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int expectedModCount>;

        $i3 = $i2 + 1;

        r0.<java.util.IdentityHashMap$IdentityHashMapIterator: int expectedModCount> = $i3;

        return;
    }
}
