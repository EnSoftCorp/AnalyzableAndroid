public final class java.lang.Short extends java.lang.Number implements java.lang.Comparable
{
    private static final long serialVersionUID;
    private final short value;
    public static final short MAX_VALUE;
    public static final short MIN_VALUE;
    public static final int SIZE;
    public static final java.lang.Class TYPE;
    private static final java.lang.Short[] SMALL_VALUES;

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Short r0;
        java.lang.String r1;
        short $s0;

        r0 := @this: java.lang.Short;

        r1 := @parameter0: java.lang.String;

        $s0 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Short: void <init>(short)>($s0);

        return;
    }

    public void <init>(short)
    {
        java.lang.Short r0;
        short s0;

        r0 := @this: java.lang.Short;

        s0 := @parameter0: short;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Short: short value> = s0;

        return;
    }

    public byte byteValue()
    {
        java.lang.Short r0;
        short $s0;
        byte $b1;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        $b1 = (byte) $s0;

        return $b1;
    }

    public int compareTo(java.lang.Short)
    {
        java.lang.Short r0, r1;
        short $s0, $s1;
        int $i2;

        r0 := @this: java.lang.Short;

        r1 := @parameter0: java.lang.Short;

        $s1 = r0.<java.lang.Short: short value>;

        $s0 = r1.<java.lang.Short: short value>;

        $i2 = staticinvoke <java.lang.Short: int compare(short,short)>($s1, $s0);

        return $i2;
    }

    public static int compare(short, short)
    {
        short s0, s1;
        byte $b2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        if s0 <= s1 goto label1;

        $b2 = 1;

        goto label3;

     label1:
        if s0 >= s1 goto label2;

        $b2 = -1;

        goto label3;

     label2:
        $b2 = 0;

     label3:
        return $b2;
    }

    public static java.lang.Short decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7;
        int i0;
        short s1;
        java.lang.Integer $r1;
        java.lang.NumberFormatException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Short $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r0);

        i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        s1 = (short) i0;

        if s1 != i0 goto label1;

        $r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);

        return $r8;

     label1:
        $r2 = new java.lang.NumberFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value out of range for short: \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double doubleValue()
    {
        java.lang.Short r0;
        short $s0;
        double $d0;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        $d0 = (double) $s0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Short r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        short $s0, $s1;

        r0 := @this: java.lang.Short;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Short;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Short) r1;

        $s1 = $r2.<java.lang.Short: short value>;

        $s0 = r0.<java.lang.Short: short value>;

        if $s1 != $s0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public float floatValue()
    {
        java.lang.Short r0;
        short $s0;
        float $f0;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        $f0 = (float) $s0;

        return $f0;
    }

    public int hashCode()
    {
        java.lang.Short r0;
        short $s0;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        return $s0;
    }

    public int intValue()
    {
        java.lang.Short r0;
        short $s0;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        return $s0;
    }

    public long longValue()
    {
        java.lang.Short r0;
        short $s0;
        long $l1;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        $l1 = (long) $s0;

        return $l1;
    }

    public static short parseShort(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        short $s0;

        r0 := @parameter0: java.lang.String;

        $s0 = staticinvoke <java.lang.Short: short parseShort(java.lang.String,int)>(r0, 10);

        return $s0;
    }

    public static short parseShort(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r6;
        int i0, i1;
        short s2;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);

        s2 = (short) i1;

        if s2 != i1 goto label1;

        return s2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value out of range for short: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public short shortValue()
    {
        java.lang.Short r0;
        short $s0;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        return $s0;
    }

    public java.lang.String toString()
    {
        java.lang.Short r0;
        short $s0;
        java.lang.String $r1;

        r0 := @this: java.lang.Short;

        $s0 = r0.<java.lang.Short: short value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($s0);

        return $r1;
    }

    public static java.lang.String toString(short)
    {
        short s0;
        java.lang.String $r0;

        s0 := @parameter0: short;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(s0);

        return $r0;
    }

    public static java.lang.Short valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        short $s0;
        java.lang.Short $r1;

        r0 := @parameter0: java.lang.String;

        $s0 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        return $r1;
    }

    public static java.lang.Short valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0;
        short $s1;
        java.lang.Short $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $s1 = staticinvoke <java.lang.Short: short parseShort(java.lang.String,int)>(r0, i0);

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        return $r1;
    }

    public static short reverseBytes(short)
    {
        short s0, $s1, $s2, $s5;
        int $i3, $i4;

        s0 := @parameter0: short;

        $i3 = s0 << 8;

        $s1 = s0 >>> 8;

        $s2 = $s1 & 255;

        $i4 = $i3 | $s2;

        $s5 = (short) $i4;

        return $s5;
    }

    public static java.lang.Short valueOf(short)
    {
        short s0;
        java.lang.Short $r0;
        int $i1;
        java.lang.Short[] $r1;

        s0 := @parameter0: short;

        if s0 < -128 goto label1;

        if s0 < 128 goto label2;

     label1:
        $r0 = new java.lang.Short;

        specialinvoke $r0.<java.lang.Short: void <init>(short)>(s0);

        goto label3;

     label2:
        $r1 = <java.lang.Short: java.lang.Short[] SMALL_VALUES>;

        $i1 = s0 + 128;

        $r0 = $r1[$i1];

     label3:
        return $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Short r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Short;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Short) r1;

        $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        int i0, $i2;
        java.lang.Class $r0, $r1;
        java.lang.Short[] $r2, $r4;
        java.lang.Short $r3;
        short $s1;

        <java.lang.Short: int SIZE> = 16;

        <java.lang.Short: short MIN_VALUE> = -32768;

        <java.lang.Short: short MAX_VALUE> = 32767;

        <java.lang.Short: long serialVersionUID> = 7515723908773894738L;

        $r0 = class "[S";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Short: java.lang.Class TYPE> = $r1;

        $r2 = newarray (java.lang.Short)[256];

        <java.lang.Short: java.lang.Short[] SMALL_VALUES> = $r2;

        i0 = -128;

     label1:
        if i0 >= 128 goto label2;

        $r4 = <java.lang.Short: java.lang.Short[] SMALL_VALUES>;

        $i2 = i0 + 128;

        $r3 = new java.lang.Short;

        $s1 = (short) i0;

        specialinvoke $r3.<java.lang.Short: void <init>(short)>($s1);

        $r4[$i2] = $r3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
}
