public class java.net.MulticastSocket extends java.net.DatagramSocket
{
    private java.net.InetAddress setAddress;

    public void <init>() throws java.io.IOException
    {
        java.net.MulticastSocket r0;

        r0 := @this: java.net.MulticastSocket;

        specialinvoke r0.<java.net.DatagramSocket: void <init>()>();

        virtualinvoke r0.<java.net.MulticastSocket: void setReuseAddress(boolean)>(1);

        return;
    }

    public void <init>(int) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        int i0;

        r0 := @this: java.net.MulticastSocket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.net.DatagramSocket: void <init>(int)>(i0);

        virtualinvoke r0.<java.net.MulticastSocket: void setReuseAddress(boolean)>(1);

        return;
    }

    public void <init>(java.net.SocketAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.SocketAddress)>(r1);

        virtualinvoke r0.<java.net.MulticastSocket: void setReuseAddress(boolean)>(1);

        return;
    }

    public java.net.InetAddress getInterface() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1, r4, $r5, $r9;
        java.net.NetworkInterface r2;
        java.util.Enumeration r3;
        java.net.DatagramSocketImpl $r6;
        java.lang.Object $r7, $r8;
        boolean $z0, $z1, $z2;

        r0 := @this: java.net.MulticastSocket;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r5 = r0.<java.net.MulticastSocket: java.net.InetAddress setAddress>;

        if $r5 == null goto label1;

        $r9 = r0.<java.net.MulticastSocket: java.net.InetAddress setAddress>;

        return $r9;

     label1:
        $r6 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $r7 = virtualinvoke $r6.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(16);

        r1 = (java.net.InetAddress) $r7;

        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z0 == 0 goto label4;

        r2 = virtualinvoke r0.<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()>();

        if r2 == null goto label4;

        r3 = virtualinvoke r2.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

        if r3 == null goto label4;

     label2:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r8 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.net.InetAddress) $r8;

        $z2 = r4 instanceof java.net.Inet6Address;

        if $z2 == 0 goto label3;

        return r4;

     label3:
        goto label2;

     label4:
        return r1;
    }

    public java.net.NetworkInterface getNetworkInterface() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        int i0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        java.net.NetworkInterface $r4, $r5;

        r0 := @this: java.net.MulticastSocket;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(31);

        $r3 = (java.lang.Integer) $r2;

        i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if i0 == 0 goto label1;

        $r5 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)>(i0);

        return $r5;

     label1:
        $r4 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface forUnboundMulticastSocket()>();

        return $r4;
    }

    public int getTimeToLive() throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramSocketImpl $r1;
        int $i0;

        r0 := @this: java.net.MulticastSocket;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $i0 = virtualinvoke $r1.<java.net.DatagramSocketImpl: int getTimeToLive()>();

        return $i0;
    }

    public byte getTTL() throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramSocketImpl $r1;
        byte $b0;

        r0 := @this: java.net.MulticastSocket;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $b0 = virtualinvoke $r1.<java.net.DatagramSocketImpl: byte getTTL()>();

        return $b0;
    }

    public void joinGroup(java.net.InetAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.InetAddress;

        specialinvoke r0.<java.net.MulticastSocket: void checkJoinOrLeave(java.net.InetAddress)>(r1);

        $r2 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void join(java.net.InetAddress)>(r1);

        return;
    }

    public void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.net.DatagramSocketImpl $r3;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.SocketAddress;

        r2 := @parameter1: java.net.NetworkInterface;

        specialinvoke r0.<java.net.MulticastSocket: void checkJoinOrLeave(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);

        $r3 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r3.<java.net.DatagramSocketImpl: void joinGroup(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);

        return;
    }

    public void leaveGroup(java.net.InetAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.InetAddress;

        specialinvoke r0.<java.net.MulticastSocket: void checkJoinOrLeave(java.net.InetAddress)>(r1);

        $r2 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void leave(java.net.InetAddress)>(r1);

        return;
    }

    public void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.net.DatagramSocketImpl $r3;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.SocketAddress;

        r2 := @parameter1: java.net.NetworkInterface;

        specialinvoke r0.<java.net.MulticastSocket: void checkJoinOrLeave(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);

        $r3 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r3.<java.net.DatagramSocketImpl: void leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)>(r1, r2);

        return;
    }

    private void checkJoinOrLeave(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.net.InetAddress r3;
        boolean $z0, $z1, $z2;
        java.net.InetSocketAddress $r4;
        java.io.IOException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r14, $r15, $r18, $r20, $r22, $r24, $r25;
        java.lang.String $r9, $r13, $r19, $r27;
        java.net.SocketException $r10, $r23;
        java.lang.IllegalArgumentException $r16, $r26;
        java.lang.Class $r17;
        java.util.Enumeration $r21;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.SocketAddress;

        r2 := @parameter1: java.net.NetworkInterface;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        if r1 != null goto label1;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("groupAddress == null");

        throw $r26;

     label1:
        if r2 == null goto label2;

        $r21 = virtualinvoke r2.<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>();

        $z2 = interfaceinvoke $r21.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z2 != 0 goto label2;

        $r23 = new java.net.SocketException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No address associated with interface: ");

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.net.SocketException: void <init>(java.lang.String)>($r27);

        throw $r23;

     label2:
        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label3;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group address not an InetSocketAddress: ");

        $r17 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label3:
        $r4 = (java.net.InetSocketAddress) r1;

        r3 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if r3 != null goto label4;

        $r10 = new java.net.SocketException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group address has no address: ");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.net.SocketException: void <init>(java.lang.String)>($r13);

        throw $r10;

     label4:
        $z1 = virtualinvoke r3.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z1 != 0 goto label5;

        $r5 = new java.io.IOException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a multicast group: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label5:
        return;
    }

    private void checkJoinOrLeave(java.net.InetAddress) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.InetAddress;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("groupAddress == null");

        throw $r7;

     label1:
        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z0 != 0 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a multicast group: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        return;
    }

    public void send(java.net.DatagramPacket, byte) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramPacket r1;
        byte b0, $b2;
        java.net.InetAddress r2;
        int i1;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        java.net.DatagramSocketImpl $r4, $r5;
        short $s3;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.DatagramPacket;

        b0 := @parameter1: byte;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        r2 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        i1 = virtualinvoke r0.<java.net.MulticastSocket: int getTimeToLive()>();

        $z0 = virtualinvoke r2.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z0 == 0 goto label6;

        $b2 = (byte) i1;

        if $b2 == b0 goto label6;

     label1:
        $s3 = b0 & 255;

        virtualinvoke r0.<java.net.MulticastSocket: void setTimeToLive(int)>($s3);

        $r5 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r5.<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>(r1);

     label2:
        virtualinvoke r0.<java.net.MulticastSocket: void setTimeToLive(int)>(i1);

        goto label5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        virtualinvoke r0.<java.net.MulticastSocket: void setTimeToLive(int)>(i1);

        throw r3;

     label5:
        goto label7;

     label6:
        $r4 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r4.<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>(r1);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setInterface(java.net.InetAddress) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.InetAddress r1;
        java.net.NetworkInterface r2;
        java.net.DatagramSocketImpl $r3;
        int $i0;
        java.lang.Integer $r4;
        java.net.SocketException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;
        java.lang.NullPointerException $r10;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.InetAddress;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("address == null");

        throw $r10;

     label1:
        r2 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>(r1);

        if r2 != null goto label2;

        $r5 = new java.net.SocketException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Address not associated with an interface: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r3 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $i0 = virtualinvoke r2.<java.net.NetworkInterface: int getIndex()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r3.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(31, $r4);

        r0.<java.net.MulticastSocket: java.net.InetAddress setAddress> = r1;

        return;
    }

    public void setNetworkInterface(java.net.NetworkInterface) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.NetworkInterface r1;
        java.net.DatagramSocketImpl $r2;
        int $i0;
        java.lang.Integer $r3;
        java.net.SocketException $r4;

        r0 := @this: java.net.MulticastSocket;

        r1 := @parameter0: java.net.NetworkInterface;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        if r1 != null goto label1;

        $r4 = new java.net.SocketException;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("networkInterface == null");

        throw $r4;

     label1:
        $r2 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $i0 = virtualinvoke r1.<java.net.NetworkInterface: int getIndex()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(31, $r3);

        r0.<java.net.MulticastSocket: java.net.InetAddress setAddress> = null;

        return;
    }

    public void setTimeToLive(int) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.net.DatagramSocketImpl $r6;

        r0 := @this: java.net.MulticastSocket;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        if i0 < 0 goto label1;

        if i0 <= 255 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TimeToLive out of bounds: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r6.<java.net.DatagramSocketImpl: void setTimeToLive(int)>(i0);

        return;
    }

    public void setTTL(byte) throws java.io.IOException
    {
        java.net.MulticastSocket r0;
        byte b0;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.MulticastSocket;

        b0 := @parameter0: byte;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setTTL(byte)>(b0);

        return;
    }

    synchronized void createSocket(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        int i0;
        java.net.InetAddress r1;
        java.net.SocketException r2, $r10;
        java.net.DatagramSocketImplFactory $r3, $r9;
        java.net.DatagramSocketImpl $r4, $r5, $r7, $r8;
        java.lang.Boolean $r6;
        java.net.PlainDatagramSocketImpl r11;

        r0 := @this: java.net.MulticastSocket;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        $r3 = <java.net.MulticastSocket: java.net.DatagramSocketImplFactory factory>;

        if $r3 == null goto label1;

        $r9 = <java.net.MulticastSocket: java.net.DatagramSocketImplFactory factory>;

        $r4 = interfaceinvoke $r9.<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>();

        goto label2;

     label1:
        r11 = new java.net.PlainDatagramSocketImpl;

        $r4 = r11;

        specialinvoke r11.<java.net.PlainDatagramSocketImpl: void <init>()>();

     label2:
        r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl> = $r4;

        $r5 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r5.<java.net.DatagramSocketImpl: void create()>();

     label3:
        $r7 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $r6 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r7.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4, $r6);

        $r8 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r8.<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>(i0, r1);

        r0.<java.net.MulticastSocket: boolean isBound> = 1;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        r2 = $r10;

        virtualinvoke r0.<java.net.MulticastSocket: void close()>();

        throw r2;

     label6:
        return;

        catch java.net.SocketException from label3 to label4 with label5;
    }

    public boolean getLoopbackMode() throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0, $z1;

        r0 := @this: java.net.MulticastSocket;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(18);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setLoopbackMode(boolean) throws java.net.SocketException
    {
        java.net.MulticastSocket r0;
        boolean z0, $z1;
        java.net.DatagramSocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.MulticastSocket;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<java.net.MulticastSocket: void checkOpen()>();

        $r1 = r0.<java.net.MulticastSocket: java.net.DatagramSocketImpl impl>;

        if z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(18, $r2);

        return;
    }
}
