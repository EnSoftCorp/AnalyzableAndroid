public final class libcore.util.ZoneInfo extends java.util.TimeZone
{
    private static final long MILLISECONDS_PER_DAY;
    private static final long MILLISECONDS_PER_400_YEARS;
    private static final long UNIX_OFFSET;
    private static final int[] NORMAL;
    private static final int[] LEAP;
    private int mRawOffset;
    private final int mEarliestRawOffset;
    private final boolean mUseDst;
    private final int mDstSavings;
    private final int[] mTransitions;
    private final int[] mOffsets;
    private final byte[] mTypes;
    private final byte[] mIsDsts;

    public static libcore.util.ZoneInfo makeTimeZone(java.lang.String, libcore.io.BufferIterator)
    {
        java.lang.String r0;
        libcore.io.BufferIterator r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        int[] r2, r4;
        byte[] r3, r5;
        libcore.util.ZoneInfo $r6;
        byte $b7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: libcore.io.BufferIterator;

        $i3 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        if $i3 == 1415211366 goto label1;

        return null;

     label1:
        virtualinvoke r1.<libcore.io.BufferIterator: void skip(int)>(28);

        i0 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        i1 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        virtualinvoke r1.<libcore.io.BufferIterator: void skip(int)>(4);

        r2 = newarray (int)[i0];

        $i4 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readIntArray(int[],int,int)>(r2, 0, $i4);

        r3 = newarray (byte)[i0];

        $i5 = lengthof r3;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r3, 0, $i5);

        r4 = newarray (int)[i1];

        r5 = newarray (byte)[i1];

        i2 = 0;

     label2:
        if i2 >= i1 goto label3;

        $i6 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        r4[i2] = $i6;

        $b7 = virtualinvoke r1.<libcore.io.BufferIterator: byte readByte()>();

        r5[i2] = $b7;

        virtualinvoke r1.<libcore.io.BufferIterator: void skip(int)>(1);

        i2 = i2 + 1;

        goto label2;

     label3:
        $r6 = new libcore.util.ZoneInfo;

        specialinvoke $r6.<libcore.util.ZoneInfo: void <init>(java.lang.String,int[],byte[],int[],byte[])>(r0, r2, r3, r4, r5);

        return $r6;
    }

    private void <init>(java.lang.String, int[], byte[], int[], byte[])
    {
        libcore.util.ZoneInfo r0;
        java.lang.String r1;
        int[] r2, r4, $r6, $r12, $r13, $r14, $r15, $r18;
        byte[] r3, r5, $r7, $r8, $r9, $r10, $r11, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        int i0, i1, i2, i4, i5, i6, $i7, $i8, $i11, $i12, $i16, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i27, $i28, $i29, $i31, $i32, $i33, $i37, $i40, $i44, i46, i47, i48;
        boolean z0, z1, z2;
        short s3, $s9, $s13, $s17, $s35, $s38;
        byte $b10, $b14, $b15, $b30, $b34, $b36, $b39, $b41, $b42, $b43, $b45;
        long $l25, $l26;

        r0 := @this: libcore.util.ZoneInfo;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: int[];

        r3 := @parameter2: byte[];

        r4 := @parameter3: int[];

        r5 := @parameter4: byte[];

        specialinvoke r0.<java.util.TimeZone: void <init>()>();

        r0.<libcore.util.ZoneInfo: int[] mTransitions> = r2;

        r0.<libcore.util.ZoneInfo: byte[] mTypes> = r3;

        r0.<libcore.util.ZoneInfo: byte[] mIsDsts> = r5;

        virtualinvoke r0.<libcore.util.ZoneInfo: void setID(java.lang.String)>(r1);

        i0 = 0;

        z0 = 0;

        i1 = 0;

        z1 = 0;

        $r6 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i7 = lengthof $r6;

        i2 = $i7 - 1;

     label01:
        if z0 == 0 goto label02;

        if z1 != 0 goto label05;

     label02:
        if i2 < 0 goto label05;

        $r24 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b41 = $r24[i2];

        s3 = $b41 & 255;

        if z0 != 0 goto label03;

        $r22 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $b45 = $r22[s3];

        if $b45 != 0 goto label03;

        z0 = 1;

        i0 = i2;

     label03:
        if z1 != 0 goto label04;

        $r21 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $b42 = $r21[s3];

        if $b42 == 0 goto label04;

        z1 = 1;

        i1 = i2;

     label04:
        i2 = i2 + -1;

        goto label01;

     label05:
        $r7 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $i8 = lengthof $r7;

        if i0 < $i8 goto label06;

        $i44 = r4[0];

        r0.<libcore.util.ZoneInfo: int mRawOffset> = $i44;

        goto label07;

     label06:
        $r8 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b10 = $r8[i0];

        $s9 = $b10 & 255;

        $i11 = r4[$s9];

        r0.<libcore.util.ZoneInfo: int mRawOffset> = $i11;

     label07:
        $r9 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $i12 = lengthof $r9;

        if i1 < $i12 goto label08;

        r0.<libcore.util.ZoneInfo: int mDstSavings> = 0;

        goto label09;

     label08:
        $r10 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b14 = $r10[i0];

        $s13 = $b14 & 255;

        $i20 = r4[$s13];

        $r11 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b15 = $r11[i1];

        $s17 = $b15 & 255;

        $i16 = r4[$s17];

        $i21 = $i20 - $i16;

        $i18 = staticinvoke <java.lang.Math: int abs(int)>($i21);

        $i19 = $i18 * 1000;

        r0.<libcore.util.ZoneInfo: int mDstSavings> = $i19;

     label09:
        i46 = -1;

        i47 = 0;

     label10:
        $r13 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i23 = lengthof $r13;

        if i47 >= $i23 goto label12;

        $r23 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $r20 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b39 = $r20[i47];

        $s38 = $b39 & 255;

        $b43 = $r23[$s38];

        if $b43 != 0 goto label11;

        i46 = i47;

        goto label12;

     label11:
        i47 = i47 + 1;

        goto label10;

     label12:
        if i46 == -1 goto label13;

        $r19 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b36 = $r19[i46];

        $s35 = $b36 & 255;

        $i40 = r4[$s35];

        goto label14;

     label13:
        $i40 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

     label14:
        i48 = $i40;

        r0.<libcore.util.ZoneInfo: int[] mOffsets> = r4;

        i4 = 0;

     label15:
        $r12 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        $i22 = lengthof $r12;

        if i4 >= $i22 goto label16;

        $r18 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        $i32 = $r18[i4];

        $i33 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $i37 = $i32 - $i33;

        $r18[i4] = $i37;

        i4 = i4 + 1;

        goto label15;

     label16:
        z2 = 0;

        $l25 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l26 = $l25 / 1000L;

        i5 = (int) $l26;

        $r14 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i24 = lengthof $r14;

        i6 = $i24 - 1;

     label17:
        if i6 < 0 goto label19;

        $r15 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i31 = $r15[i6];

        if $i31 < i5 goto label19;

        $r16 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $r17 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b30 = $r17[i6];

        $b34 = $r16[$b30];

        if $b34 <= 0 goto label18;

        z2 = 1;

        goto label19;

     label18:
        i6 = i6 + -1;

        goto label17;

     label19:
        r0.<libcore.util.ZoneInfo: boolean mUseDst> = z2;

        $i28 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $i29 = $i28 * 1000;

        r0.<libcore.util.ZoneInfo: int mRawOffset> = $i29;

        $i27 = i48 * 1000;

        r0.<libcore.util.ZoneInfo: int mEarliestRawOffset> = $i27;

        return;
    }

    public int getOffset(int, int, int, int, int, int)
    {
        libcore.util.ZoneInfo r0;
        int i0, i1, i2, i3, i4, i5, $i7, $i11, $i13, $i14, $i19, $i23, $i24, $i25, $i26, $i28, $i29, i31;
        long l6, $l8, $l9, $l10, $l12, $l15, $l16, $l17, $l18, $l20, $l21, $l22, $l27, $l30, l32, l33, l34, l35, l36, l37, l38;
        boolean z0, $z1;
        int[] r1, $r2;

        r0 := @this: libcore.util.ZoneInfo;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $i7 = i1 / 400;

        $l8 = (long) $i7;

        l6 = $l8 * 12622780800000L;

        i31 = i1 % 400;

        $l9 = (long) i31;

        $l10 = $l9 * 31536000000L;

        l32 = l6 + $l10;

        $i11 = i31 + 3;

        $i13 = $i11 / 4;

        $l12 = (long) $i13;

        $l15 = $l12 * 86400000L;

        l33 = l32 + $l15;

        if i31 <= 0 goto label1;

        $i29 = i31 - 1;

        $i26 = $i29 / 100;

        $l27 = (long) $i26;

        $l30 = $l27 * 86400000L;

        l33 = l33 - $l30;

     label1:
        if i31 == 0 goto label2;

        $i25 = i31 % 4;

        if $i25 != 0 goto label3;

        $i28 = i31 % 100;

        if $i28 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        if z0 == 0 goto label5;

        $r2 = <libcore.util.ZoneInfo: int[] LEAP>;

        goto label6;

     label5:
        $r2 = <libcore.util.ZoneInfo: int[] NORMAL>;

     label6:
        r1 = $r2;

        $i14 = r1[i2];

        $l17 = (long) $i14;

        $l16 = $l17 * 86400000L;

        l34 = l33 + $l16;

        $i19 = i3 - 1;

        $l18 = (long) $i19;

        $l21 = $l18 * 86400000L;

        l35 = l34 + $l21;

        $l20 = (long) i5;

        l36 = l35 + $l20;

        $i23 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $l22 = (long) $i23;

        l37 = l36 - $l22;

        l38 = l37 - 62167219200000L;

        $i24 = virtualinvoke r0.<libcore.util.ZoneInfo: int getOffset(long)>(l38);

        return $i24;
    }

    public int getOffset(long)
    {
        libcore.util.ZoneInfo r0;
        long l0, $l3;
        int i1, i2, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r1, $r3;
        byte[] $r2;
        byte $b4;
        short $s5;

        r0 := @this: libcore.util.ZoneInfo;

        l0 := @parameter0: long;

        $l3 = l0 / 1000L;

        i1 = (int) $l3;

        $r1 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        i2 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i1);

        if i2 >= 0 goto label1;

        $i11 = i2 ^ -1;

        i2 = $i11 - 1;

        if i2 >= 0 goto label1;

        $i10 = r0.<libcore.util.ZoneInfo: int mEarliestRawOffset>;

        return $i10;

     label1:
        $i8 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $r3 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        $r2 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b4 = $r2[i2];

        $s5 = $b4 & 255;

        $i6 = $r3[$s5];

        $i7 = $i6 * 1000;

        $i9 = $i8 + $i7;

        return $i9;
    }

    public boolean inDaylightTime(java.util.Date)
    {
        libcore.util.ZoneInfo r0;
        java.util.Date r1;
        long l0, $l3;
        int i1, i2, $i7;
        int[] $r2;
        byte[] $r3, $r4;
        byte $b4, $b6;
        short $s5;
        boolean $z0;

        r0 := @this: libcore.util.ZoneInfo;

        r1 := @parameter0: java.util.Date;

        l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        $l3 = l0 / 1000L;

        i1 = (int) $l3;

        $r2 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        i2 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, i1);

        if i2 >= 0 goto label1;

        $i7 = i2 ^ -1;

        i2 = $i7 - 1;

        if i2 >= 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $r3 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $b4 = $r3[i2];

        $s5 = $b4 & 255;

        $b6 = $r4[$s5];

        if $b6 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public int getRawOffset()
    {
        libcore.util.ZoneInfo r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo;

        $i0 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        return $i0;
    }

    public void setRawOffset(int)
    {
        libcore.util.ZoneInfo r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo: int mRawOffset> = i0;

        return;
    }

    public int getDSTSavings()
    {
        libcore.util.ZoneInfo r0;
        boolean $z0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo;

        $z0 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        if $z0 == 0 goto label1;

        $i0 = r0.<libcore.util.ZoneInfo: int mDstSavings>;

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public boolean useDaylightTime()
    {
        libcore.util.ZoneInfo r0;
        boolean $z0;

        r0 := @this: libcore.util.ZoneInfo;

        $z0 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        return $z0;
    }

    public boolean hasSameRules(java.util.TimeZone)
    {
        libcore.util.ZoneInfo r0, r2;
        java.util.TimeZone r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        int $i0, $i1, $i2, $i3;
        int[] $r3, $r4, $r9, $r10;
        byte[] $r5, $r6, $r7, $r8;

        r0 := @this: libcore.util.ZoneInfo;

        r1 := @parameter0: java.util.TimeZone;

        $z0 = r1 instanceof libcore.util.ZoneInfo;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (libcore.util.ZoneInfo) r1;

        $z2 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        $z1 = r2.<libcore.util.ZoneInfo: boolean mUseDst>;

        if $z2 == $z1 goto label2;

        return 0;

     label2:
        $z3 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        if $z3 != 0 goto label5;

        $i2 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $i3 = r2.<libcore.util.ZoneInfo: int mRawOffset>;

        if $i2 != $i3 goto label3;

        $z9 = 1;

        goto label4;

     label3:
        $z9 = 0;

     label4:
        return $z9;

     label5:
        $i1 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $i0 = r2.<libcore.util.ZoneInfo: int mRawOffset>;

        if $i1 != $i0 goto label6;

        $r4 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        $r3 = r2.<libcore.util.ZoneInfo: int[] mOffsets>;

        $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r3);

        if $z4 == 0 goto label6;

        $r6 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $r5 = r2.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $z5 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r5);

        if $z5 == 0 goto label6;

        $r8 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $r7 = r2.<libcore.util.ZoneInfo: byte[] mTypes>;

        $z6 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r8, $r7);

        if $z6 == 0 goto label6;

        $r9 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $r10 = r2.<libcore.util.ZoneInfo: int[] mTransitions>;

        $z8 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10);

        if $z8 == 0 goto label6;

        $z7 = 1;

        goto label7;

     label6:
        $z7 = 0;

     label7:
        return $z7;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.util.ZoneInfo r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;

        r0 := @this: libcore.util.ZoneInfo;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof libcore.util.ZoneInfo;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (libcore.util.ZoneInfo) r1;

        $r3 = virtualinvoke r0.<libcore.util.ZoneInfo: java.lang.String getID()>();

        $r4 = virtualinvoke r2.<libcore.util.ZoneInfo: java.lang.String getID()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<libcore.util.ZoneInfo: boolean hasSameRules(java.util.TimeZone)>(r2);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        libcore.util.ZoneInfo r0;
        byte b1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, i17, i18, i19, i20, i21, i22;
        java.lang.String $r1;
        int[] $r2, $r4;
        byte[] $r3, $r5;
        boolean $z0;
        short $s15;

        r0 := @this: libcore.util.ZoneInfo;

        b1 = 1;

        $i2 = 31 * b1;

        $r1 = virtualinvoke r0.<libcore.util.ZoneInfo: java.lang.String getID()>();

        $i3 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        i16 = $i2 + $i3;

        $i4 = 31 * i16;

        $r2 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        $i5 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r2);

        i17 = $i4 + $i5;

        $i6 = 31 * i17;

        $r3 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        $i7 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r3);

        i18 = $i6 + $i7;

        $i9 = 31 * i18;

        $i8 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        i19 = $i9 + $i8;

        $i10 = 31 * i19;

        $r4 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i11 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r4);

        i20 = $i10 + $i11;

        $i13 = 31 * i20;

        $r5 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        $i12 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r5);

        i21 = $i13 + $i12;

        $i14 = 31 * i21;

        $z0 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        if $z0 == 0 goto label1;

        $s15 = 1231;

        goto label2;

     label1:
        $s15 = 1237;

     label2:
        i22 = $i14 + $s15;

        return i22;
    }

    public java.lang.String toString()
    {
        libcore.util.ZoneInfo r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r21;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        int[] $r18;

        r0 := @this: libcore.util.ZoneInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[id=\"");

        $r6 = virtualinvoke r0.<libcore.util.ZoneInfo: java.lang.String getID()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mRawOffset=");

        $i0 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mEarliestRawOffset=");

        $i1 = r0.<libcore.util.ZoneInfo: int mEarliestRawOffset>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mUseDst=");

        $z0 = r0.<libcore.util.ZoneInfo: boolean mUseDst>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",mDstSavings=");

        $i2 = r0.<libcore.util.ZoneInfo: int mDstSavings>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",transitions=");

        $r18 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        $i3 = lengthof $r18;

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;
    }

    public java.lang.Object clone()
    {
        libcore.util.ZoneInfo r0;
        java.lang.Object $r1;

        r0 := @this: libcore.util.ZoneInfo;

        $r1 = specialinvoke r0.<java.util.TimeZone: java.lang.Object clone()>();

        return $r1;
    }

    private static int checkedAdd(int, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        libcore.util.ZoneInfo$CheckedArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 + $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = l2 cmp $l6;

        if $b7 == 0 goto label1;

        $r0 = new libcore.util.ZoneInfo$CheckedArithmeticException;

        specialinvoke $r0.<libcore.util.ZoneInfo$CheckedArithmeticException: void <init>(libcore.util.ZoneInfo$1)>(null);

        throw $r0;

     label1:
        $i8 = (int) l2;

        return $i8;
    }

    private static int checkedSubtract(int, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        int i0, i1, $i5, $i8;
        long l2, $l3, $l4, $l6;
        byte $b7;
        libcore.util.ZoneInfo$CheckedArithmeticException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l4 = (long) i0;

        $l3 = (long) i1;

        l2 = $l4 - $l3;

        $i5 = (int) l2;

        $l6 = (long) $i5;

        $b7 = l2 cmp $l6;

        if $b7 == 0 goto label1;

        $r0 = new libcore.util.ZoneInfo$CheckedArithmeticException;

        specialinvoke $r0.<libcore.util.ZoneInfo$CheckedArithmeticException: void <init>(libcore.util.ZoneInfo$1)>(null);

        throw $r0;

     label1:
        $i8 = (int) l2;

        return $i8;
    }

    static int access$000(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo r0;
        int $i0;

        r0 := @parameter0: libcore.util.ZoneInfo;

        $i0 = r0.<libcore.util.ZoneInfo: int mRawOffset>;

        return $i0;
    }

    static int[] access$100(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo r0;
        int[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfo;

        $r1 = r0.<libcore.util.ZoneInfo: int[] mTransitions>;

        return $r1;
    }

    static byte[] access$200(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo r0;
        byte[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfo;

        $r1 = r0.<libcore.util.ZoneInfo: byte[] mTypes>;

        return $r1;
    }

    static int[] access$300(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo r0;
        int[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfo;

        $r1 = r0.<libcore.util.ZoneInfo: int[] mOffsets>;

        return $r1;
    }

    static byte[] access$400(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo r0;
        byte[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfo;

        $r1 = r0.<libcore.util.ZoneInfo: byte[] mIsDsts>;

        return $r1;
    }

    static int access$500(int, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <libcore.util.ZoneInfo: int checkedAdd(int,int)>(i0, i1);

        return $i2;
    }

    static int access$600(int, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <libcore.util.ZoneInfo: int checkedSubtract(int,int)>(i0, i1);

        return $i2;
    }

    static void <clinit>()
    {
        int[] $r0, $r1;

        <libcore.util.ZoneInfo: long UNIX_OFFSET> = 62167219200000L;

        <libcore.util.ZoneInfo: long MILLISECONDS_PER_400_YEARS> = 12622780800000L;

        <libcore.util.ZoneInfo: long MILLISECONDS_PER_DAY> = 86400000L;

        $r0 = newarray (int)[12];

        $r0[0] = 0;

        $r0[1] = 31;

        $r0[2] = 59;

        $r0[3] = 90;

        $r0[4] = 120;

        $r0[5] = 151;

        $r0[6] = 181;

        $r0[7] = 212;

        $r0[8] = 243;

        $r0[9] = 273;

        $r0[10] = 304;

        $r0[11] = 334;

        <libcore.util.ZoneInfo: int[] NORMAL> = $r0;

        $r1 = newarray (int)[12];

        $r1[0] = 0;

        $r1[1] = 31;

        $r1[2] = 60;

        $r1[3] = 91;

        $r1[4] = 121;

        $r1[5] = 152;

        $r1[6] = 182;

        $r1[7] = 213;

        $r1[8] = 244;

        $r1[9] = 274;

        $r1[10] = 305;

        $r1[11] = 335;

        <libcore.util.ZoneInfo: int[] LEAP> = $r1;

        return;
    }
}
