public final class java.lang.Double extends java.lang.Number implements java.lang.Comparable
{
    static final int EXPONENT_BIAS;
    static final int EXPONENT_BITS;
    static final int MANTISSA_BITS;
    static final int NON_MANTISSA_BITS;
    static final long SIGN_MASK;
    static final long EXPONENT_MASK;
    static final long MANTISSA_MASK;
    private static final long serialVersionUID;
    private final double value;
    public static final double MAX_VALUE;
    public static final double MIN_VALUE;
    public static final double NaN;
    public static final double POSITIVE_INFINITY;
    public static final double NEGATIVE_INFINITY;
    public static final double MIN_NORMAL;
    public static final int MAX_EXPONENT;
    public static final int MIN_EXPONENT;
    public static final java.lang.Class TYPE;
    public static final int SIZE;

    public void <init>(double)
    {
        java.lang.Double r0;
        double d0;

        r0 := @this: java.lang.Double;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Double: double value> = d0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Double r0;
        java.lang.String r1;
        double $d0;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.String;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Double: void <init>(double)>($d0);

        return;
    }

    public int compareTo(java.lang.Double)
    {
        java.lang.Double r0, r1;
        double $d0, $d1;
        int $i0;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Double;

        $d1 = r0.<java.lang.Double: double value>;

        $d0 = r1.<java.lang.Double: double value>;

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, $d0);

        return $i0;
    }

    public byte byteValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $i0 = (int) $d0;

        $b1 = (byte) $i0;

        return $b1;
    }

    public static long doubleToLongBits(double)
    {
        double d0;
        byte $b0;
        long $l1;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        return 9221120237041090560L;

     label1:
        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        return $l1;
    }

    public static native long doubleToRawLongBits(double);

    public double doubleValue()
    {
        java.lang.Double r0;
        double $d0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Double r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Double;

        if $z0 == 0 goto label1;

        $d0 = r0.<java.lang.Double: double value>;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $r2 = (java.lang.Double) r1;

        $d1 = $r2.<java.lang.Double: double value>;

        $l1 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public float floatValue()
    {
        java.lang.Double r0;
        double $d0;
        float $f0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $f0 = (float) $d0;

        return $f0;
    }

    public int hashCode()
    {
        java.lang.Double r0;
        long l0, $l1, $l2;
        double $d0;
        int $i3;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public int intValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $i0 = (int) $d0;

        return $i0;
    }

    public boolean isInfinite()
    {
        java.lang.Double r0;
        double $d0;
        boolean $z0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0);

        return $z0;
    }

    public static boolean isInfinite(double)
    {
        double d0;
        byte $b0, $b1;
        boolean $z0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl #Infinity;

        if $b0 == 0 goto label1;

        $b1 = d0 cmpl #-Infinity;

        if $b1 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isNaN()
    {
        java.lang.Double r0;
        double $d0;
        boolean $z0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        return $z0;
    }

    public static boolean isNaN(double)
    {
        double d0;
        byte $b0;
        boolean $z0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl d0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static native double longBitsToDouble(long);

    public long longValue()
    {
        java.lang.Double r0;
        double $d0;
        long $l0;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $l0 = (long) $d0;

        return $l0;
    }

    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <java.lang.StringToReal: double parseDouble(java.lang.String)>(r0);

        return $d0;
    }

    public short shortValue()
    {
        java.lang.Double r0;
        double $d0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $i0 = (int) $d0;

        $s1 = (short) $i0;

        return $s1;
    }

    public java.lang.String toString()
    {
        java.lang.Double r0;
        double $d0;
        java.lang.String $r1;

        r0 := @this: java.lang.Double;

        $d0 = r0.<java.lang.Double: double value>;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        return $r1;
    }

    public static java.lang.String toString(double)
    {
        double d0;
        java.lang.RealToString $r0;
        java.lang.String $r1;

        d0 := @parameter0: double;

        $r0 = staticinvoke <java.lang.RealToString: java.lang.RealToString getInstance()>();

        $r1 = virtualinvoke $r0.<java.lang.RealToString: java.lang.String doubleToString(double)>(d0);

        return $r1;
    }

    public static java.lang.Double valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        double $d0;
        java.lang.Double $r1;

        r0 := @parameter0: java.lang.String;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r1;
    }

    public static int compare(double, double)
    {
        double d0, d1;
        long l0, l1, $l5, $l6, $l7;
        byte $b2, $b3, $b4, $b9;
        boolean $z0, $z1, $z2;
        int $i8;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b2 = d0 cmpl d1;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        $b3 = d1 cmpl d0;

        if $b3 <= 0 goto label2;

        return -1;

     label2:
        $b4 = d0 cmpl d1;

        if $b4 != 0 goto label3;

        $b9 = 0.0 cmpl d0;

        if $b9 == 0 goto label3;

        return 0;

     label3:
        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 == 0 goto label5;

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        return 1;

     label5:
        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1);

        if $z1 == 0 goto label6;

        return -1;

     label6:
        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $l7 = l0 >> 63;

        $l5 = l1 >> 63;

        $l6 = $l7 - $l5;

        $i8 = (int) $l6;

        return $i8;
    }

    public static java.lang.Double valueOf(double)
    {
        double d0;
        java.lang.Double $r0;

        d0 := @parameter0: double;

        $r0 = new java.lang.Double;

        specialinvoke $r0.<java.lang.Double: void <init>(double)>(d0);

        return $r0;
    }

    public static java.lang.String toHexString(double)
    {
        double d0;
        long l0, l1, l2, $l8, $l9, $l15, $l18, $l26;
        boolean z0, $z1;
        java.lang.StringBuilder r0, $r2;
        int i3, i4, $i16, $i17, $i20, $i23, $i24, $i27, i29, i30;
        java.lang.String r1, $r7, $r9, $r15, r17;
        byte $b5, $b6, $b7, $b10, $b11, $b12, $b13, $b14, $b19, $b21, $b22, $b25, $b28;

        d0 := @parameter0: double;

        $b5 = d0 cmpl d0;

        if $b5 == 0 goto label01;

        return "NaN";

     label01:
        $b6 = d0 cmpl #Infinity;

        if $b6 != 0 goto label02;

        return "Infinity";

     label02:
        $b7 = d0 cmpl #-Infinity;

        if $b7 != 0 goto label03;

        return "-Infinity";

     label03:
        l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $l8 = l0 & -9223372036854775808L;

        $b10 = $l8 cmp 0L;

        if $b10 == 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        z0 = $z1;

        $l9 = l0 & 9218868437227405312L;

        l1 = $l9 >>> 52;

        l2 = l0 & 4503599627370495L;

        $b11 = l1 cmp 0L;

        if $b11 != 0 goto label08;

        $b28 = l2 cmp 0L;

        if $b28 != 0 goto label08;

        if z0 == 0 goto label06;

        $r15 = "-0x0.0p0";

        goto label07;

     label06:
        $r15 = "0x0.0p0";

     label07:
        return $r15;

     label08:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(10);

        r0 = $r2;

        if z0 == 0 goto label09;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-0x");

        goto label10;

     label09:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

     label10:
        $b12 = l1 cmp 0L;

        if $b12 != 0 goto label15;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0.");

        i3 = 13;

     label11:
        $b22 = l2 cmp 0L;

        if $b22 == 0 goto label12;

        $l26 = l2 & 15L;

        $b25 = $l26 cmp 0L;

        if $b25 != 0 goto label12;

        l2 = l2 >>> 4;

        i3 = i3 + -1;

        goto label11;

     label12:
        r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l2);

        $b21 = l2 cmp 0L;

        if $b21 == 0 goto label14;

        $i23 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 <= $i23 goto label14;

        $i24 = virtualinvoke r1.<java.lang.String: int length()>();

        i4 = i3 - $i24;

     label13:
        $i27 = i4;

        i4 = i4 + -1;

        if $i27 == 0 goto label14;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        goto label13;

     label14:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p-1022");

        goto label20;

     label15:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.");

        i29 = 13;

     label16:
        $b13 = l2 cmp 0L;

        if $b13 == 0 goto label17;

        $l18 = l2 & 15L;

        $b19 = $l18 cmp 0L;

        if $b19 != 0 goto label17;

        l2 = l2 >>> 4;

        i29 = i29 + -1;

        goto label16;

     label17:
        r17 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l2);

        $b14 = l2 cmp 0L;

        if $b14 == 0 goto label19;

        $i16 = virtualinvoke r17.<java.lang.String: int length()>();

        if i29 <= $i16 goto label19;

        $i17 = virtualinvoke r17.<java.lang.String: int length()>();

        i30 = i29 - $i17;

     label18:
        $i20 = i30;

        i30 = i30 + -1;

        if $i20 == 0 goto label19;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        goto label18;

     label19:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(112);

        $l15 = l1 - 1023L;

        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l15);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label20:
        $r9 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Double r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Double;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Double) r1;

        $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;

        <java.lang.Double: int SIZE> = 64;

        <java.lang.Double: int MIN_EXPONENT> = -1022;

        <java.lang.Double: int MAX_EXPONENT> = 1023;

        <java.lang.Double: double MIN_NORMAL> = 2.2250738585072014E-308;

        <java.lang.Double: double NEGATIVE_INFINITY> = #-Infinity;

        <java.lang.Double: double POSITIVE_INFINITY> = #Infinity;

        <java.lang.Double: double NaN> = #NaN;

        <java.lang.Double: double MIN_VALUE> = 4.9E-324;

        <java.lang.Double: double MAX_VALUE> = 1.7976931348623157E308;

        <java.lang.Double: long serialVersionUID> = -9172774392245257468L;

        <java.lang.Double: long MANTISSA_MASK> = 4503599627370495L;

        <java.lang.Double: long EXPONENT_MASK> = 9218868437227405312L;

        <java.lang.Double: long SIGN_MASK> = -9223372036854775808L;

        <java.lang.Double: int NON_MANTISSA_BITS> = 12;

        <java.lang.Double: int MANTISSA_BITS> = 52;

        <java.lang.Double: int EXPONENT_BITS> = 12;

        <java.lang.Double: int EXPONENT_BIAS> = 1023;

        $r0 = class "[D";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Double: java.lang.Class TYPE> = $r1;

        return;
    }
}
