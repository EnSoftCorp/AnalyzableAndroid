class java.util.WeakHashMap$1 extends java.util.AbstractSet
{
    final java.util.WeakHashMap this$0;

    void <init>(java.util.WeakHashMap)
    {
        java.util.WeakHashMap$1 r0;
        java.util.WeakHashMap r1;

        r0 := @this: java.util.WeakHashMap$1;

        r1 := @parameter0: java.util.WeakHashMap;

        r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        java.util.WeakHashMap$1 r0;
        java.util.WeakHashMap $r1;
        int $i0;

        r0 := @this: java.util.WeakHashMap$1;

        $r1 = r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0>;

        $i0 = virtualinvoke $r1.<java.util.WeakHashMap: int size()>();

        return $i0;
    }

    public void clear()
    {
        java.util.WeakHashMap$1 r0;
        java.util.WeakHashMap $r1;

        r0 := @this: java.util.WeakHashMap$1;

        $r1 = r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0>;

        virtualinvoke $r1.<java.util.WeakHashMap: void clear()>();

        return;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.WeakHashMap$1 r0;
        java.lang.Object r1, $r4;
        boolean $z0;
        java.util.Map$Entry $r2;
        java.util.WeakHashMap $r3;

        r0 := @this: java.util.WeakHashMap$1;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.WeakHashMap$1: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0>;

        $r2 = (java.util.Map$Entry) r1;

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r4);

        return 1;

     label1:
        return 0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.WeakHashMap$1 r0;
        java.lang.Object r1, r3, $r6;
        java.util.WeakHashMap$Entry r2;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry $r4;
        java.util.WeakHashMap $r5;

        r0 := @this: java.util.WeakHashMap$1;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label2;

        $r5 = r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0>;

        $r4 = (java.util.Map$Entry) r1;

        $r6 = interfaceinvoke $r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = virtualinvoke $r5.<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)>($r6);

        if r2 == null goto label2;

        r3 = virtualinvoke r2.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        if r3 != null goto label1;

        $z2 = r2.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z2 == 0 goto label2;

     label1:
        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        return $z1;

     label2:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.WeakHashMap$1 r0;
        java.util.WeakHashMap$HashIterator $r1;
        java.util.WeakHashMap$1$1 $r2;
        java.util.WeakHashMap $r3;

        r0 := @this: java.util.WeakHashMap$1;

        $r1 = new java.util.WeakHashMap$HashIterator;

        $r3 = r0.<java.util.WeakHashMap$1: java.util.WeakHashMap this$0>;

        $r2 = new java.util.WeakHashMap$1$1;

        specialinvoke $r2.<java.util.WeakHashMap$1$1: void <init>(java.util.WeakHashMap$1)>(r0);

        specialinvoke $r1.<java.util.WeakHashMap$HashIterator: void <init>(java.util.WeakHashMap,java.util.WeakHashMap$Entry$Type)>($r3, $r2);

        return $r1;
    }
}
