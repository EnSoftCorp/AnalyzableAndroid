public abstract class java.util.concurrent.atomic.AtomicReferenceFieldUpdater extends java.lang.Object
{

    public static java.util.concurrent.atomic.AtomicReferenceFieldUpdater newUpdater(java.lang.Class, java.lang.Class, java.lang.String)
    {
        java.lang.Class r0, r1;
        java.lang.String r2;
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.String;

        $r3 = new java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater$AtomicReferenceFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.Class,java.lang.String)>(r0, r1, r2);

        return $r3;
    }

    protected void <init>()
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract boolean compareAndSet(java.lang.Object, java.lang.Object, java.lang.Object);

    public abstract boolean weakCompareAndSet(java.lang.Object, java.lang.Object, java.lang.Object);

    public abstract void set(java.lang.Object, java.lang.Object);

    public abstract void lazySet(java.lang.Object, java.lang.Object);

    public abstract java.lang.Object get(java.lang.Object);

    public java.lang.Object getAndSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceFieldUpdater r0;
        java.lang.Object r1, r2, r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

     label1:
        r3 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: java.lang.Object get(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceFieldUpdater: boolean compareAndSet(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r3, r2);

        if $z0 == 0 goto label2;

        return r3;

     label2:
        goto label1;
    }
}
