public abstract class java.nio.charset.CharsetDecoder extends java.lang.Object
{
    private static final java.lang.String RESET;
    private static final java.lang.String ONGOING;
    private static final java.lang.String END_OF_INPUT;
    private static final java.lang.String FLUSHED;
    private final java.nio.charset.Charset charset;
    private final float averageCharsPerByte;
    private final float maxCharsPerByte;
    private java.lang.String replacementChars;
    private java.lang.String state;
    private java.nio.charset.CodingErrorAction malformedInputAction;
    private java.nio.charset.CodingErrorAction unmappableCharacterAction;

    protected void <init>(java.nio.charset.Charset, float, float)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.Charset r1;
        float f0, f1;
        java.nio.charset.CodingErrorAction $r2, $r3;
        byte $b0, $b1, $b2;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.Charset;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.charset.CharsetDecoder: java.lang.String replacementChars> = "\ufffd";

        r0.<java.nio.charset.CharsetDecoder: java.lang.String state> = "RESET";

        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction> = $r2;

        $r3 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction> = $r3;

        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $b1 = f1 cmpg 0.0F;

        if $b1 > 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("averageCharsPerByte and maxCharsPerByte must be positive");

        throw $r4;

     label2:
        $b2 = f0 cmpl f1;

        if $b2 <= 0 goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("averageCharsPerByte is greater than maxCharsPerByte");

        throw $r5;

     label3:
        r0.<java.nio.charset.CharsetDecoder: float averageCharsPerByte> = f0;

        r0.<java.nio.charset.CharsetDecoder: float maxCharsPerByte> = f1;

        r0.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset> = r1;

        return;
    }

    public final float averageCharsPerByte()
    {
        java.nio.charset.CharsetDecoder r0;
        float $f0;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $f0 = r0.<java.nio.charset.CharsetDecoder: float averageCharsPerByte>;

        return $f0;
    }

    public final java.nio.charset.Charset charset()
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.Charset $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset>;

        return $r1;
    }

    public final java.nio.CharBuffer decode(java.nio.ByteBuffer) throws java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.ByteBuffer r1;
        int i0, $i1;
        java.nio.CharBuffer r2;
        java.nio.charset.CoderResult r3, $r7, $r8, r9;
        float $f0, $f1, $f2;
        java.lang.String $r5;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $f1 = (float) $i1;

        $f0 = r0.<java.nio.charset.CharsetDecoder: float averageCharsPerByte>;

        $f2 = $f1 * $f0;

        i0 = (int) $f2;

        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(i0);

        virtualinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

     label1:
        $r5 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r5 == "FLUSHED" goto label5;

        r3 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r1, r2, 1);

        $r7 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r3 != $r7 goto label2;

        r2 = specialinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer allocateMore(java.nio.CharBuffer)>(r2);

        goto label1;

     label2:
        specialinvoke r0.<java.nio.charset.CharsetDecoder: void checkCoderResult(java.nio.charset.CoderResult)>(r3);

        r9 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(r2);

        $r8 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r9 != $r8 goto label3;

        r2 = specialinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer allocateMore(java.nio.CharBuffer)>(r2);

        goto label4;

     label3:
        specialinvoke r0.<java.nio.charset.CharsetDecoder: void checkCoderResult(java.nio.charset.CoderResult)>(r9);

     label4:
        goto label1;

     label5:
        virtualinvoke r2.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        return r2;
    }

    private void checkCoderResult(java.nio.charset.CoderResult) throws java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CoderResult r1;
        boolean $z0, $z1;
        java.nio.charset.CodingErrorAction $r2, $r3, $r5, $r6;
        java.nio.charset.UnmappableCharacterException $r4;
        int $i0, $i1;
        java.nio.charset.MalformedInputException $r7;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.CoderResult;

        $z0 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isMalformed()>();

        if $z0 == 0 goto label1;

        $r6 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if $r6 != $r5 goto label1;

        $r7 = new java.nio.charset.MalformedInputException;

        $i1 = virtualinvoke r1.<java.nio.charset.CoderResult: int length()>();

        specialinvoke $r7.<java.nio.charset.MalformedInputException: void <init>(int)>($i1);

        throw $r7;

     label1:
        $z1 = virtualinvoke r1.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        $r2 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if $r3 != $r2 goto label2;

        $r4 = new java.nio.charset.UnmappableCharacterException;

        $i0 = virtualinvoke r1.<java.nio.charset.CoderResult: int length()>();

        specialinvoke $r4.<java.nio.charset.UnmappableCharacterException: void <init>(int)>($i0);

        throw $r4;

     label2:
        return;
    }

    private java.nio.CharBuffer allocateMore(java.nio.CharBuffer)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.CharBuffer r1, r2, $r5;
        int $i0, $i1, $i2;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.CharBuffer;

        $i0 = virtualinvoke r1.<java.nio.CharBuffer: int capacity()>();

        if $i0 != 0 goto label1;

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>(1);

        return $r5;

     label1:
        $i1 = virtualinvoke r1.<java.nio.CharBuffer: int capacity()>();

        $i2 = $i1 * 2;

        r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i2);

        virtualinvoke r1.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(java.nio.CharBuffer)>(r1);

        return r2;
    }

    public final java.nio.charset.CoderResult decode(java.nio.ByteBuffer, java.nio.CharBuffer, boolean)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.ByteBuffer r1;
        java.nio.CharBuffer r2;
        boolean z0, $z1, $z2;
        java.nio.charset.CoderResult r3, $r6, $r7, $r15;
        java.nio.BufferOverflowException r4, $r23;
        java.lang.String $r5, $r11, $r13, $r16, $r18, $r20;
        java.nio.charset.CodingErrorAction $r8, $r9, $r14, r25;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalStateException $r17;
        java.nio.BufferUnderflowException $r19, r24;
        java.nio.charset.CoderMalfunctionError $r21, $r22;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.CharBuffer;

        z0 := @parameter2: boolean;

        $r5 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r5 == "RESET" goto label02;

        $r18 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r18 == "ONGOING" goto label02;

        if z0 == 0 goto label01;

        $r20 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r20 == "END_OF_INPUT" goto label02;

     label01:
        $r17 = specialinvoke r0.<java.nio.charset.CharsetDecoder: java.lang.IllegalStateException illegalStateException()>();

        throw $r17;

     label02:
        if z0 == 0 goto label03;

        $r16 = "END_OF_INPUT";

        goto label04;

     label03:
        $r16 = "ONGOING";

     label04:
        r0.<java.nio.charset.CharsetDecoder: java.lang.String state> = $r16;

     label05:
        r3 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer,java.nio.CharBuffer)>(r1, r2);

     label06:
        goto label09;

     label07:
        $r23 := @caughtexception;

        r4 = $r23;

        $r21 = new java.nio.charset.CoderMalfunctionError;

        specialinvoke $r21.<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>(r4);

        throw $r21;

     label08:
        $r19 := @caughtexception;

        r24 = $r19;

        $r22 = new java.nio.charset.CoderMalfunctionError;

        specialinvoke $r22.<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>(r24);

        throw $r22;

     label09:
        $r6 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r3 != $r6 goto label11;

        if z0 == 0 goto label10;

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label10;

        $i5 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r3 = staticinvoke <java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>($i5);

        goto label12;

     label10:
        return r3;

     label11:
        $r7 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        if r3 != $r7 goto label12;

        return r3;

     label12:
        $z1 = virtualinvoke r3.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z1 == 0 goto label13;

        $r14 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        goto label14;

     label13:
        $r14 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction>;

     label14:
        r25 = $r14;

        $r8 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        if r25 != $r8 goto label15;

        return r3;

     label15:
        $r9 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        if r25 != $r9 goto label17;

        $i3 = virtualinvoke r2.<java.nio.CharBuffer: int remaining()>();

        $r11 = r0.<java.nio.charset.CharsetDecoder: java.lang.String replacementChars>;

        $i4 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label16;

        $r15 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW>;

        return $r15;

     label16:
        $r13 = r0.<java.nio.charset.CharsetDecoder: java.lang.String replacementChars>;

        virtualinvoke r2.<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>($r13);

     label17:
        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i1 = virtualinvoke r3.<java.nio.charset.CoderResult: int length()>();

        $i2 = $i0 + $i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        goto label05;

        catch java.nio.BufferOverflowException from label05 to label06 with label07;
        catch java.nio.BufferUnderflowException from label05 to label06 with label08;
    }

    protected abstract java.nio.charset.CoderResult decodeLoop(java.nio.ByteBuffer, java.nio.CharBuffer);

    public java.nio.charset.Charset detectedCharset()
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public final java.nio.charset.CoderResult flush(java.nio.CharBuffer)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CoderResult r2, $r4;
        java.lang.String $r3, $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.CharBuffer;

        $r3 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r3 == "FLUSHED" goto label1;

        $r5 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        if $r5 == "END_OF_INPUT" goto label1;

        $r6 = specialinvoke r0.<java.nio.charset.CharsetDecoder: java.lang.IllegalStateException illegalStateException()>();

        throw $r6;

     label1:
        r2 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>(r1);

        $r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r2 != $r4 goto label2;

        r0.<java.nio.charset.CharsetDecoder: java.lang.String state> = "FLUSHED";

     label2:
        return r2;
    }

    protected java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.CharBuffer r1;
        java.nio.charset.CoderResult $r2;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.CharBuffer;

        $r2 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        return $r2;
    }

    protected void implOnMalformedInput(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        return;
    }

    protected void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        return;
    }

    protected void implReplaceWith(java.lang.String)
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.String r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected void implReset()
    {
        java.nio.charset.CharsetDecoder r0;

        r0 := @this: java.nio.charset.CharsetDecoder;

        return;
    }

    public boolean isAutoDetecting()
    {
        java.nio.charset.CharsetDecoder r0;

        r0 := @this: java.nio.charset.CharsetDecoder;

        return 0;
    }

    public boolean isCharsetDetected()
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.nio.charset.CodingErrorAction malformedInputAction()
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction>;

        return $r1;
    }

    public final float maxCharsPerByte()
    {
        java.nio.charset.CharsetDecoder r0;
        float $f0;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $f0 = r0.<java.nio.charset.CharsetDecoder: float maxCharsPerByte>;

        return $f0;
    }

    public final java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newAction == null");

        throw $r2;

     label1:
        r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction malformedInputAction> = r1;

        virtualinvoke r0.<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>(r1);

        return r0;
    }

    public final java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.nio.charset.CodingErrorAction;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newAction == null");

        throw $r2;

     label1:
        r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction> = r1;

        virtualinvoke r0.<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>(r1);

        return r0;
    }

    public final java.lang.String replacement()
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.String $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = r0.<java.nio.charset.CharsetDecoder: java.lang.String replacementChars>;

        return $r1;
    }

    public final java.nio.charset.CharsetDecoder replaceWith(java.lang.String)
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.String r1, $r8;
        boolean $z0;
        int $i0, $i2;
        float $f0, $f1, $f2;
        byte $b1;
        java.lang.IllegalArgumentException $r2, $r9, $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacement == null");

        throw $r9;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("replacement.isEmpty()");

        throw $r10;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("replacement length > maxCharsPerByte: ");

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $f2 = virtualinvoke r0.<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label3:
        r0.<java.nio.charset.CharsetDecoder: java.lang.String replacementChars> = r1;

        virtualinvoke r0.<java.nio.charset.CharsetDecoder: void implReplaceWith(java.lang.String)>(r1);

        return r0;
    }

    public final java.nio.charset.CharsetDecoder reset()
    {
        java.nio.charset.CharsetDecoder r0;

        r0 := @this: java.nio.charset.CharsetDecoder;

        r0.<java.nio.charset.CharsetDecoder: java.lang.String state> = "RESET";

        virtualinvoke r0.<java.nio.charset.CharsetDecoder: void implReset()>();

        return r0;
    }

    public java.nio.charset.CodingErrorAction unmappableCharacterAction()
    {
        java.nio.charset.CharsetDecoder r0;
        java.nio.charset.CodingErrorAction $r1;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = r0.<java.nio.charset.CharsetDecoder: java.nio.charset.CodingErrorAction unmappableCharacterAction>;

        return $r1;
    }

    private java.lang.IllegalStateException illegalStateException()
    {
        java.nio.charset.CharsetDecoder r0;
        java.lang.IllegalStateException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: java.nio.charset.CharsetDecoder;

        $r1 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("State: ");

        $r4 = r0.<java.nio.charset.CharsetDecoder: java.lang.String state>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static void <clinit>()
    {
        <java.nio.charset.CharsetDecoder: java.lang.String FLUSHED> = "FLUSHED";

        <java.nio.charset.CharsetDecoder: java.lang.String END_OF_INPUT> = "END_OF_INPUT";

        <java.nio.charset.CharsetDecoder: java.lang.String ONGOING> = "ONGOING";

        <java.nio.charset.CharsetDecoder: java.lang.String RESET> = "RESET";

        return;
    }
}
