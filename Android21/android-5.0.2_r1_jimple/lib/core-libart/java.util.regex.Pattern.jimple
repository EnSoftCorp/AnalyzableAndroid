public final class java.util.regex.Pattern extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    public static final int UNIX_LINES;
    public static final int CASE_INSENSITIVE;
    public static final int COMMENTS;
    public static final int MULTILINE;
    public static final int LITERAL;
    public static final int DOTALL;
    public static final int UNICODE_CASE;
    public static final int CANON_EQ;
    private final java.lang.String pattern;
    private final int flags;
    transient long address;

    public java.util.regex.Matcher matcher(java.lang.CharSequence)
    {
        java.util.regex.Pattern r0;
        java.lang.CharSequence r1;
        java.util.regex.Matcher $r2;

        r0 := @this: java.util.regex.Pattern;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = new java.util.regex.Matcher;

        specialinvoke $r2.<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>(r0, r1);

        return $r2;
    }

    public java.lang.String[] split(java.lang.CharSequence, int)
    {
        java.util.regex.Pattern r0;
        java.lang.CharSequence r1;
        int i0;
        java.lang.String $r2, $r3;
        java.lang.String[] $r4;

        r0 := @this: java.util.regex.Pattern;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        $r2 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        $r3 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        $r4 = staticinvoke <java.util.regex.Splitter: java.lang.String[] split(java.util.regex.Pattern,java.lang.String,java.lang.String,int)>(r0, $r2, $r3, i0);

        return $r4;
    }

    public java.lang.String[] split(java.lang.CharSequence)
    {
        java.util.regex.Pattern r0;
        java.lang.CharSequence r1;
        java.lang.String[] $r2;

        r0 := @this: java.util.regex.Pattern;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>(r1, 0);

        return $r2;
    }

    public java.lang.String pattern()
    {
        java.util.regex.Pattern r0;
        java.lang.String $r1;

        r0 := @this: java.util.regex.Pattern;

        $r1 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.regex.Pattern r0;
        java.lang.String $r1;

        r0 := @this: java.util.regex.Pattern;

        $r1 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        return $r1;
    }

    public int flags()
    {
        java.util.regex.Pattern r0;
        int $i0;

        r0 := @this: java.util.regex.Pattern;

        $i0 = r0.<java.util.regex.Pattern: int flags>;

        return $i0;
    }

    public static java.util.regex.Pattern compile(java.lang.String, int) throws java.util.regex.PatternSyntaxException
    {
        java.lang.String r0;
        int i0;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new java.util.regex.Pattern;

        specialinvoke $r1.<java.util.regex.Pattern: void <init>(java.lang.String,int)>(r0, i0);

        return $r1;
    }

    public static java.util.regex.Pattern compile(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.util.regex.Pattern;

        specialinvoke $r1.<java.util.regex.Pattern: void <init>(java.lang.String,int)>(r0, 0);

        return $r1;
    }

    private void <init>(java.lang.String, int) throws java.util.regex.PatternSyntaxException
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r6;
        int i0, $i2, $i4, $i6;
        byte b1, $b3, $b5;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.UnsupportedOperationException $r7;

        r0 := @this: java.util.regex.Pattern;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = i0 & 128;

        if $i2 == 0 goto label1;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CANON_EQ flag not supported");

        throw $r7;

     label1:
        b1 = 127;

        $b3 = b1 ^ -1;

        $i4 = i0 & $b3;

        if $i4 == 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported flags: ");

        $b5 = b1 ^ -1;

        $i6 = i0 & $b5;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        r0.<java.util.regex.Pattern: java.lang.String pattern> = r1;

        r0.<java.util.regex.Pattern: int flags> = i0;

        specialinvoke r0.<java.util.regex.Pattern: void compile()>();

        return;
    }

    private void compile() throws java.util.regex.PatternSyntaxException
    {
        java.util.regex.Pattern r0;
        java.lang.String r1, $r2, $r3;
        int i0, $i1, $i2, $i3;
        long $l4;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.regex.Pattern;

        $r2 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        if $r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern == null");

        throw $r4;

     label1:
        r1 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        $i1 = r0.<java.util.regex.Pattern: int flags>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label2;

        $r3 = r0.<java.util.regex.Pattern: java.lang.String pattern>;

        r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r3);

     label2:
        $i3 = r0.<java.util.regex.Pattern: int flags>;

        i0 = $i3 & 47;

        $l4 = staticinvoke <java.util.regex.Pattern: long compileImpl(java.lang.String,int)>(r1, i0);

        r0.<java.util.regex.Pattern: long address> = $l4;

        return;
    }

    public static boolean matches(java.lang.String, java.lang.CharSequence)
    {
        java.lang.String r0;
        java.lang.CharSequence r1;
        java.util.regex.Matcher $r2;
        java.util.regex.Pattern $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.CharSequence;

        $r2 = new java.util.regex.Matcher;

        $r3 = new java.util.regex.Pattern;

        specialinvoke $r3.<java.util.regex.Pattern: void <init>(java.lang.String,int)>(r0, 0);

        specialinvoke $r2.<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>($r3, r1);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    public static java.lang.String quote(java.lang.String)
    {
        java.lang.String r0, $r4, $r7, $r8;
        java.lang.StringBuilder r1, $r2, $r5, $r6, $r9;
        int i0, i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\Q");

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>("\\E", i0);

        i1 = $i2;

        if $i2 < 0 goto label2;

        $i3 = i1 + 2;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i3);

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\\\E\\Q");

        i0 = i1 + 2;

        goto label1;

     label2:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i0);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\E");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.util.regex.Pattern r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: java.util.regex.Pattern;

     label1:
        $l0 = r0.<java.util.regex.Pattern: long address>;

        staticinvoke <java.util.regex.Pattern: void closeImpl(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.regex.Pattern r0;
        java.io.ObjectInputStream r1;

        r0 := @this: java.util.regex.Pattern;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        specialinvoke r0.<java.util.regex.Pattern: void compile()>();

        return;
    }

    private static native void closeImpl(long);

    private static native long compileImpl(java.lang.String, int);

    public static void <clinit>()
    {
        <java.util.regex.Pattern: int CANON_EQ> = 128;

        <java.util.regex.Pattern: int UNICODE_CASE> = 64;

        <java.util.regex.Pattern: int DOTALL> = 32;

        <java.util.regex.Pattern: int LITERAL> = 16;

        <java.util.regex.Pattern: int MULTILINE> = 8;

        <java.util.regex.Pattern: int COMMENTS> = 4;

        <java.util.regex.Pattern: int CASE_INSENSITIVE> = 2;

        <java.util.regex.Pattern: int UNIX_LINES> = 1;

        <java.util.regex.Pattern: long serialVersionUID> = 5073258162644648461L;

        return;
    }
}
