public final class dalvik.system.VMRuntime extends java.lang.Object
{
    private static final dalvik.system.VMRuntime THE_ONE;
    private static final java.util.Map ABI_TO_INSTRUCTION_SET_MAP;
    private int targetSdkVersion;

    private void <init>()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static dalvik.system.VMRuntime getRuntime()
    {
        dalvik.system.VMRuntime $r0;

        $r0 = <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE>;

        return $r0;
    }

    public native java.lang.String[] properties();

    public native java.lang.String bootClassPath();

    public native java.lang.String classPath();

    public native java.lang.String vmVersion();

    public native java.lang.String vmLibrary();

    public native java.lang.String vmInstructionSet();

    public native boolean is64Bit();

    public native boolean isCheckJniEnabled();

    public native float getTargetHeapUtilization();

    public float setTargetHeapUtilization(float)
    {
        dalvik.system.VMRuntime r0, r1;
        float f0, f1;
        java.lang.Throwable r2, $r9;
        byte $b0, $b1;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: dalvik.system.VMRuntime;

        f0 := @parameter0: float;

        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        $b1 = f0 cmpl 1.0F;

        if $b1 < 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range (0,1)");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        r1 = r0;

        entermonitor r0;

     label3:
        f1 = virtualinvoke r0.<dalvik.system.VMRuntime: float getTargetHeapUtilization()>();

        specialinvoke r0.<dalvik.system.VMRuntime: void nativeSetTargetHeapUtilization(float)>(f0);

        exitmonitor r1;

     label4:
        return f1;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public synchronized void setTargetSdkVersion(int)
    {
        dalvik.system.VMRuntime r0;
        int i0, $i1;

        r0 := @this: dalvik.system.VMRuntime;

        i0 := @parameter0: int;

        r0.<dalvik.system.VMRuntime: int targetSdkVersion> = i0;

        $i1 = r0.<dalvik.system.VMRuntime: int targetSdkVersion>;

        specialinvoke r0.<dalvik.system.VMRuntime: void setTargetSdkVersionNative(int)>($i1);

        return;
    }

    public synchronized int getTargetSdkVersion()
    {
        dalvik.system.VMRuntime r0;
        int $i0;

        r0 := @this: dalvik.system.VMRuntime;

        $i0 = r0.<dalvik.system.VMRuntime: int targetSdkVersion>;

        return $i0;
    }

    private native void setTargetSdkVersionNative(int);

    public long getMinimumHeapSize()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return 0L;
    }

    public long setMinimumHeapSize(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return 0L;
    }

    public void gcSoftReferences()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return;
    }

    public void runFinalizationSync()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        staticinvoke <java.lang.System: void runFinalization()>();

        return;
    }

    private native void nativeSetTargetHeapUtilization(float);

    public boolean trackExternalAllocation(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return 1;
    }

    public void trackExternalFree(long)
    {
        dalvik.system.VMRuntime r0;
        long l0;

        r0 := @this: dalvik.system.VMRuntime;

        l0 := @parameter0: long;

        return;
    }

    public long getExternalBytesAllocated()
    {
        dalvik.system.VMRuntime r0;

        r0 := @this: dalvik.system.VMRuntime;

        return 0L;
    }

    public native void startJitCompilation();

    public native void disableJitCompilation();

    public native java.lang.Object newNonMovableArray(java.lang.Class, int);

    public native java.lang.Object newUnpaddedArray(java.lang.Class, int);

    public native long addressOf(java.lang.Object);

    public native void clearGrowthLimit();

    public native boolean isDebuggerActive();

    public native void registerNativeAllocation(int);

    public native void registerNativeFree(int);

    public native void trimHeap();

    public native void concurrentGC();

    public native void updateProcessState(int);

    public native void preloadDexCaches();

    public static native void registerAppInfo(java.lang.String, java.lang.String, java.lang.String);

    public static java.lang.String getInstructionSet(java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        $r2 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.String) $r3;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported ABI: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return r1;
    }

    public static boolean is64BitInstructionSet(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.String;

        $r1 = "arm64";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "x86_64";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label1;

        $r3 = "mips64";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static boolean is64BitAbi(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>(r0);

        $z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>($r1);

        return $z0;
    }

    public static native boolean isBootClassPathOnDisk(java.lang.String);

    public static native java.lang.String getCurrentInstructionSet();

    static void <clinit>()
    {
        dalvik.system.VMRuntime $r0;
        java.util.HashMap $r1;
        java.util.Map $r2, $r4, $r6, $r8, $r10, $r12, $r14;

        $r0 = new dalvik.system.VMRuntime;

        specialinvoke $r0.<dalvik.system.VMRuntime: void <init>()>();

        <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP> = $r1;

        $r2 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("armeabi", "arm");

        $r4 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("armeabi-v7a", "arm");

        $r6 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mips", "mips");

        $r8 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mips64", "mips64");

        $r10 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x86", "x86");

        $r12 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("x86_64", "x86_64");

        $r14 = <dalvik.system.VMRuntime: java.util.Map ABI_TO_INSTRUCTION_SET_MAP>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("arm64-v8a", "arm64");

        return;
    }
}
