public class libcore.util.ZoneInfoDB$TzData extends java.lang.Object
{
    private libcore.io.MemoryMappedFile mappedFile;
    private java.lang.String version;
    private java.lang.String zoneTab;
    private java.lang.String[] ids;
    private int[] byteOffsets;
    private int[] rawUtcOffsetsCache;
    private static final int CACHE_SIZE;
    private final libcore.util.BasicLruCache cache;

    public transient void <init>(java.lang.String[])
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String[] r1, r2, $r5;
        int i0, i1;
        java.lang.String r3;
        libcore.util.ZoneInfoDB$TzData$1 $r4;
        int[] $r6;
        boolean $z0;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new libcore.util.ZoneInfoDB$TzData$1;

        specialinvoke $r4.<libcore.util.ZoneInfoDB$TzData$1: void <init>(libcore.util.ZoneInfoDB$TzData,int)>(r0, 1);

        r0.<libcore.util.ZoneInfoDB$TzData: libcore.util.BasicLruCache cache> = $r4;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: boolean loadData(java.lang.String)>(r3);

        if $z0 == 0 goto label2;

        return;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        staticinvoke <java.lang.System: void logE(java.lang.String)>("Couldn\'t find any tzdata!");

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version> = "missing";

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab> = "# Emergency fallback data.\n";

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "GMT";

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids> = $r5;

        $r6 = newarray (int)[1];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache> = $r6;

        r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets> = $r6;

        return;
    }

    private boolean loadData(java.lang.String)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String r1, $r10;
        libcore.io.MemoryMappedFile $r3;
        android.system.ErrnoException $r4;
        java.lang.Exception $r5, r11;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <libcore.io.MemoryMappedFile: libcore.io.MemoryMappedFile mmapRO(java.lang.String)>(r1);

        r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile> = $r3;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        return 0;

     label4:
        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readHeader()>();

     label5:
        return 1;

     label6:
        $r5 := @caughtexception;

        r11 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("tzdata file \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" was present but invalid!");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void logE(java.lang.String,java.lang.Throwable)>($r10, r11);

        return 0;

        catch android.system.ErrnoException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private void readHeader()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        byte[] r2;
        java.lang.String r3, $r5, $r11, $r12, $r14;
        int i0, i1, i2, $i3, $i5, $i7;
        libcore.io.MemoryMappedFile $r4, $r15;
        java.nio.charset.Charset $r6, $r13;
        boolean $z0;
        java.lang.RuntimeException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        byte $b4;
        long $l6;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r4 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        r1 = virtualinvoke $r4.<libcore.io.MemoryMappedFile: libcore.io.BufferIterator bigEndianIterator()>();

        r2 = newarray (byte)[12];

        $i3 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i3);

        $r5 = new java.lang.String;

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 0, 6, $r6);

        r3 = $r5;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("tzdata");

        if $z0 == 0 goto label1;

        $b4 = r2[11];

        if $b4 == 0 goto label2;

     label1:
        $r7 = new java.lang.RuntimeException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad tzdata magic: ");

        $r11 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label2:
        $r14 = new java.lang.String;

        $r13 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r14.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 6, 5, $r13);

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version> = $r14;

        i0 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        i1 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        i2 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readIndex(libcore.io.BufferIterator,int,int)>(r1, i0, i1);

        $r15 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        $l6 = virtualinvoke $r15.<libcore.io.MemoryMappedFile: long size()>();

        $i5 = (int) $l6;

        $i7 = $i5 - i2;

        specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: void readZoneTab(libcore.io.BufferIterator,int,int)>(r1, i2, $i7);

        return;
    }

    private void readZoneTab(libcore.io.BufferIterator, int, int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        int i0, i1, $i2, $i3;
        byte[] r2;
        java.lang.String $r3;
        java.nio.charset.Charset $r4;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: libcore.io.BufferIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = newarray (byte)[i1];

        virtualinvoke r1.<libcore.io.BufferIterator: void seek(int)>(i0);

        $i2 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i2);

        $r3 = new java.lang.String;

        $i3 = lengthof r2;

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r3.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r2, 0, $i3, $r4);

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab> = $r3;

        return;
    }

    private void readIndex(libcore.io.BufferIterator, int, int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.BufferIterator r1;
        int i0, i1, i4, i5, i6, i7, i8, i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i22, i24;
        byte[] r2;
        char[] r3;
        int[] r4, $r5, $r10, $r11;
        java.lang.String[] $r6, $r8;
        java.lang.String $r7, $r9, r13;
        byte $b19, $b21;
        short $s20;
        char $c23;
        java.lang.AssertionError $r12;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: libcore.io.BufferIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r1.<libcore.io.BufferIterator: void seek(int)>(i0);

        r2 = newarray (byte)[40];

        i4 = i1 - i0;

        i5 = i4 / 52;

        $i11 = i5 * 40;

        r3 = newarray (char)[$i11];

        r4 = newarray (int)[i5];

        i6 = 0;

        $r5 = newarray (int)[i5];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets> = $r5;

        i7 = 0;

     label01:
        if i7 >= i5 goto label06;

        $i15 = lengthof r2;

        virtualinvoke r1.<libcore.io.BufferIterator: void readByteArray(byte[],int,int)>(r2, 0, $i15);

        $r10 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        $i16 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        $r10[i7] = $i16;

        $r11 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        $i17 = $r11[i7];

        $i18 = $i17 + i1;

        $r11[i7] = $i18;

        i8 = virtualinvoke r1.<libcore.io.BufferIterator: int readInt()>();

        if i8 >= 44 goto label02;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>(java.lang.Object)>("length in index file < sizeof(tzhead)");

        throw $r12;

     label02:
        virtualinvoke r1.<libcore.io.BufferIterator: void skip(int)>(4);

        i9 = lengthof r2;

        i10 = 0;

     label03:
        if i10 >= i9 goto label05;

        $b21 = r2[i10];

        if $b21 != 0 goto label04;

        goto label05;

     label04:
        $i22 = i6;

        i6 = i6 + 1;

        $b19 = r2[i10];

        $s20 = $b19 & 255;

        $c23 = (char) $s20;

        r3[$i22] = $c23;

        i10 = i10 + 1;

        goto label03;

     label05:
        r4[i7] = i6;

        i7 = i7 + 1;

        goto label01;

     label06:
        $r7 = new java.lang.String;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>(r3, 0, i6);

        r13 = $r7;

        $r6 = newarray (java.lang.String)[i5];

        r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids> = $r6;

        i24 = 0;

     label07:
        if i24 >= i5 goto label10;

        $r8 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        if i24 != 0 goto label08;

        $i14 = 0;

        goto label09;

     label08:
        $i13 = i24 - 1;

        $i14 = r4[$i13];

     label09:
        $i12 = r4[i24];

        $r9 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>($i14, $i12);

        $r8[i24] = $r9;

        i24 = i24 + 1;

        goto label07;

     label10:
        return;
    }

    public java.lang.String[] getAvailableIDs()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public java.lang.String[] getAvailableIDs(int)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        int i0, i1, $i2, $i3, $i4;
        java.util.ArrayList r1, $r3;
        int[] r2;
        java.lang.String[] $r4, $r6, $r7;
        java.lang.Object[] $r5;
        java.lang.String $r8;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        i0 := @parameter0: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

        r2 = specialinvoke r0.<libcore.util.ZoneInfoDB$TzData: int[] getRawUtcOffsets()>();

        i1 = 0;

     label1:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label3;

        $i4 = r2[i1];

        if $i4 != i0 goto label2;

        $r7 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $r8 = $r7[i1];

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i3];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        return $r6;
    }

    private synchronized int[] getRawUtcOffsets()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        int i0, $i1, $i2, $i3;
        int[] $r1, $r3, $r5, $r9, $r12;
        java.lang.String[] $r2, $r4, $r6;
        java.lang.String $r7;
        libcore.util.BasicLruCache $r8;
        java.lang.Object $r10;
        libcore.util.ZoneInfo $r11;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache>;

        if $r1 == null goto label1;

        $r12 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache>;

        return $r12;

     label1:
        $r2 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $i1 = lengthof $r2;

        $r3 = newarray (int)[$i1];

        r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache> = $r3;

        i0 = 0;

     label2:
        $r4 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $i2 = lengthof $r4;

        if i0 >= $i2 goto label3;

        $r9 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache>;

        $r8 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.util.BasicLruCache cache>;

        $r6 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        $r7 = $r6[i0];

        $r10 = virtualinvoke $r8.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>($r7);

        $r11 = (libcore.util.ZoneInfo) $r10;

        $i3 = virtualinvoke $r11.<libcore.util.ZoneInfo: int getRawOffset()>();

        $r9[i0] = $i3;

        i0 = i0 + 1;

        goto label2;

     label3:
        $r5 = r0.<libcore.util.ZoneInfoDB$TzData: int[] rawUtcOffsetsCache>;

        return $r5;
    }

    public java.lang.String getVersion()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String $r1;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String version>;

        return $r1;
    }

    public java.lang.String getZoneTab()
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String $r1;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String zoneTab>;

        return $r1;
    }

    public libcore.util.ZoneInfo makeTimeZone(java.lang.String) throws java.io.IOException
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String r1;
        libcore.util.ZoneInfo r2, $r6;
        libcore.util.BasicLruCache $r3;
        java.lang.Object $r4, $r5;

        r0 := @this: libcore.util.ZoneInfoDB$TzData;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.util.BasicLruCache cache>;

        $r4 = virtualinvoke $r3.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (libcore.util.ZoneInfo) $r4;

        if r2 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r5 = virtualinvoke r2.<libcore.util.ZoneInfo: java.lang.Object clone()>();

        $r6 = (libcore.util.ZoneInfo) $r5;

     label2:
        return $r6;
    }

    static java.lang.String[] access$000(libcore.util.ZoneInfoDB$TzData)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        java.lang.String[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: java.lang.String[] ids>;

        return $r1;
    }

    static libcore.io.MemoryMappedFile access$100(libcore.util.ZoneInfoDB$TzData)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        libcore.io.MemoryMappedFile $r1;

        r0 := @parameter0: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: libcore.io.MemoryMappedFile mappedFile>;

        return $r1;
    }

    static int[] access$200(libcore.util.ZoneInfoDB$TzData)
    {
        libcore.util.ZoneInfoDB$TzData r0;
        int[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfoDB$TzData;

        $r1 = r0.<libcore.util.ZoneInfoDB$TzData: int[] byteOffsets>;

        return $r1;
    }

    public static void <clinit>()
    {
        <libcore.util.ZoneInfoDB$TzData: int CACHE_SIZE> = 1;

        return;
    }
}
