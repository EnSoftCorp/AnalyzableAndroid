public class java.util.zip.Inflater extends java.lang.Object
{
    private int inLength;
    private int inRead;
    private boolean finished;
    private boolean needsDictionary;
    private long streamHandle;
    private final dalvik.system.CloseGuard guard;

    public void <init>()
    {
        java.util.zip.Inflater r0;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        java.util.zip.Inflater r0;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r2;
        long $l0;

        r0 := @this: java.util.zip.Inflater;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.Inflater: long streamHandle> = -1L;

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard> = $r1;

        $l0 = specialinvoke r0.<java.util.zip.Inflater: long createStream(boolean)>(z0);

        r0.<java.util.zip.Inflater: long streamHandle> = $l0;

        $r2 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void open(java.lang.String)>("end");

        return;
    }

    private native long createStream(boolean);

    public synchronized void end()
    {
        java.util.zip.Inflater r0;
        dalvik.system.CloseGuard $r1;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.util.zip.Inflater;

        $r1 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void endImpl(long)>($l2);

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = 0;

        r0.<java.util.zip.Inflater: long streamHandle> = -1L;

     label1:
        return;
    }

    private native void endImpl(long);

    protected void finalize()
    {
        java.util.zip.Inflater r0;
        java.lang.Throwable r1, r2, r3, $r6, $r7, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r8, $r10;

        r0 := @this: java.util.zip.Inflater;

     label01:
        $r4 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label02;

        $r5 = r0.<java.util.zip.Inflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label02:
        virtualinvoke r0.<java.util.zip.Inflater: void end()>();

     label03:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label04:
        goto label11;

     label05:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r8;

     label06:
        $r6 := @caughtexception;

        r2 = $r6;

     label07:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r10;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public synchronized boolean finished()
    {
        java.util.zip.Inflater r0;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;

        $z0 = r0.<java.util.zip.Inflater: boolean finished>;

        return $z0;
    }

    public synchronized int getAdler()
    {
        java.util.zip.Inflater r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $i1 = specialinvoke r0.<java.util.zip.Inflater: int getAdlerImpl(long)>($l0);

        return $i1;
    }

    private native int getAdlerImpl(long);

    public synchronized long getBytesRead()
    {
        java.util.zip.Inflater r0;
        long $l0, $l1;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Inflater: long getTotalInImpl(long)>($l0);

        return $l1;
    }

    public synchronized long getBytesWritten()
    {
        java.util.zip.Inflater r0;
        long $l0, $l1;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Inflater: long getTotalOutImpl(long)>($l0);

        return $l1;
    }

    public synchronized int getRemaining()
    {
        java.util.zip.Inflater r0;
        int $i0, $i1, $i2;

        r0 := @this: java.util.zip.Inflater;

        $i1 = r0.<java.util.zip.Inflater: int inLength>;

        $i0 = r0.<java.util.zip.Inflater: int inRead>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    synchronized int getCurrentOffset()
    {
        java.util.zip.Inflater r0;
        int $i0;

        r0 := @this: java.util.zip.Inflater;

        $i0 = r0.<java.util.zip.Inflater: int inRead>;

        return $i0;
    }

    public synchronized int getTotalIn()
    {
        java.util.zip.Inflater r0;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Inflater: long getTotalInImpl(long)>($l0);

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 2147483647L);

        $i3 = (int) $l2;

        return $i3;
    }

    private native long getTotalInImpl(long);

    public synchronized int getTotalOut()
    {
        java.util.zip.Inflater r0;
        long $l0, $l1, $l2;
        int $i3;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Inflater: long getTotalOutImpl(long)>($l0);

        $l2 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 2147483647L);

        $i3 = (int) $l2;

        return $i3;
    }

    private native long getTotalOutImpl(long);

    public int inflate(byte[]) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public synchronized int inflate(byte[], int, int) throws java.util.zip.DataFormatException
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        boolean z0, $z1, $z2;
        long $l4;
        java.util.zip.DataFormatException $r2;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $z1 = virtualinvoke r0.<java.util.zip.Inflater: boolean needsInput()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        z0 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

        r0.<java.util.zip.Inflater: boolean needsDictionary> = 0;

        $l4 = r0.<java.util.zip.Inflater: long streamHandle>;

        i2 = specialinvoke r0.<java.util.zip.Inflater: int inflateImpl(byte[],int,int,long)>(r1, i0, i1, $l4);

        $z2 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

        if $z2 == 0 goto label2;

        if z0 == 0 goto label2;

        $r2 = new java.util.zip.DataFormatException;

        specialinvoke $r2.<java.util.zip.DataFormatException: void <init>(java.lang.String)>("Needs dictionary");

        throw $r2;

     label2:
        return i2;
    }

    private native int inflateImpl(byte[], int, int, long);

    public synchronized boolean needsDictionary()
    {
        java.util.zip.Inflater r0;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;

        $z0 = r0.<java.util.zip.Inflater: boolean needsDictionary>;

        return $z0;
    }

    public synchronized boolean needsInput()
    {
        java.util.zip.Inflater r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.zip.Inflater;

        $i1 = r0.<java.util.zip.Inflater: int inRead>;

        $i0 = r0.<java.util.zip.Inflater: int inLength>;

        if $i1 != $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized void reset()
    {
        java.util.zip.Inflater r0;
        long $l1;

        r0 := @this: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        r0.<java.util.zip.Inflater: boolean finished> = 0;

        r0.<java.util.zip.Inflater: boolean needsDictionary> = 0;

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = 0;

        $l1 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void resetImpl(long)>($l1);

        return;
    }

    private native void resetImpl(long);

    public synchronized void setDictionary(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Inflater: void setDictionary(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public synchronized void setDictionary(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l3 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void setDictionaryImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

        return;
    }

    private native void setDictionaryImpl(byte[], int, int, long);

    public synchronized void setInput(byte[])
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public synchronized void setInput(byte[], int, int)
    {
        java.util.zip.Inflater r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        r0.<java.util.zip.Inflater: int inRead> = 0;

        r0.<java.util.zip.Inflater: int inLength> = i1;

        $l3 = r0.<java.util.zip.Inflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Inflater: void setInputImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

        return;
    }

    private native void setInputImpl(byte[], int, int, long);

    synchronized int setFileInput(java.io.FileDescriptor, long, int)
    {
        java.util.zip.Inflater r0;
        java.io.FileDescriptor r1;
        long l0, $l2;
        int i1, $i3, $i4;

        r0 := @this: java.util.zip.Inflater;

        r1 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.Inflater: void checkOpen()>();

        r0.<java.util.zip.Inflater: int inRead> = 0;

        $l2 = r0.<java.util.zip.Inflater: long streamHandle>;

        $i3 = specialinvoke r0.<java.util.zip.Inflater: int setFileInputImpl(java.io.FileDescriptor,long,int,long)>(r1, l0, i1, $l2);

        r0.<java.util.zip.Inflater: int inLength> = $i3;

        $i4 = r0.<java.util.zip.Inflater: int inLength>;

        return $i4;
    }

    private native int setFileInputImpl(java.io.FileDescriptor, long, int, long);

    private void checkOpen()
    {
        java.util.zip.Inflater r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.zip.Inflater;

        $l0 = r0.<java.util.zip.Inflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to use Inflater after calling end");

        throw $r1;

     label1:
        return;
    }
}
