public class java.io.PipedReader extends java.io.Reader
{
    private java.lang.Thread lastReader;
    private java.lang.Thread lastWriter;
    boolean isClosed;
    private char[] buffer;
    private int in;
    private int out;
    private static final int PIPE_SIZE;
    boolean isConnected;

    public void <init>()
    {
        java.io.PipedReader r0;

        r0 := @this: java.io.PipedReader;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        return;
    }

    public void <init>(java.io.PipedWriter) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        virtualinvoke r0.<java.io.PipedReader: void connect(java.io.PipedWriter)>(r1);

        return;
    }

    public void <init>(int)
    {
        java.io.PipedReader r0;
        int i0;
        char[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.PipedReader;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.PipedReader: int in> = -1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pipe size ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = newarray (char)[i0];

        r0.<java.io.PipedReader: char[] buffer> = $r1;

        return;
    }

    public void <init>(java.io.PipedWriter, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;
        int i0;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.PipedReader: void <init>(int)>(i0);

        virtualinvoke r0.<java.io.PipedReader: void connect(java.io.PipedWriter)>(r1);

        return;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.io.PipedReader r0;

        r0 := @this: java.io.PipedReader;

        r0.<java.io.PipedReader: char[] buffer> = null;

        r0.<java.io.PipedReader: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public void connect(java.io.PipedWriter) throws java.io.IOException
    {
        java.io.PipedReader r0;
        java.io.PipedWriter r1;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: java.io.PipedWriter;

        virtualinvoke r1.<java.io.PipedWriter: void connect(java.io.PipedReader)>(r0);

        return;
    }

    synchronized void establishConnection() throws java.io.IOException
    {
        java.io.PipedReader r0;
        boolean $z0, $z1;
        char[] $r1, $r2;
        java.io.IOException $r3, $r4;

        r0 := @this: java.io.PipedReader;

        $z0 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z0 == 0 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pipe already connected");

        throw $r4;

     label1:
        $z1 = r0.<java.io.PipedReader: boolean isClosed>;

        if $z1 == 0 goto label2;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r3;

     label2:
        $r1 = r0.<java.io.PipedReader: char[] buffer>;

        if $r1 != null goto label3;

        $r2 = newarray (char)[1024];

        r0.<java.io.PipedReader: char[] buffer> = $r2;

     label3:
        r0.<java.io.PipedReader: boolean isConnected> = 1;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1;
        int i0, $i1;

        r0 := @this: java.io.PipedReader;

        r1 = newarray (char)[1];

        i0 = virtualinvoke r0.<java.io.PipedReader: int read(char[],int,int)>(r1, 0, 1);

        if i0 == -1 goto label1;

        $i1 = r1[0];

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public synchronized int read(char[], int, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1, $r2, $r4, $r5, $r6, $r7, $r8;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36;
        boolean z0, $z1, $z2, $z3;
        java.lang.Thread $r3, $r9, $r12;
        java.io.IOException $r10, $r11, $r14;
        java.lang.InterruptedException $r13;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z1 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z1 != 0 goto label01;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r14;

     label01:
        $r2 = r0.<java.io.PipedReader: char[] buffer>;

        if $r2 != null goto label02;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r10;

     label02:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        if i1 != 0 goto label03;

        return 0;

     label03:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastReader> = $r3;

     label04:
        z0 = 1;

     label05:
        $i4 = r0.<java.io.PipedReader: int in>;

        if $i4 != -1 goto label09;

        $z2 = r0.<java.io.PipedReader: boolean isClosed>;

        if $z2 == 0 goto label07;

     label06:
        return -1;

     label07:
        if z0 != 0 goto label08;

        $r9 = r0.<java.io.PipedReader: java.lang.Thread lastWriter>;

        if $r9 == null goto label08;

        $r12 = r0.<java.io.PipedReader: java.lang.Thread lastWriter>;

        $z3 = virtualinvoke $r12.<java.lang.Thread: boolean isAlive()>();

        if $z3 != 0 goto label08;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r11;

     label08:
        z0 = 0;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        goto label05;

     label09:
        goto label11;

     label10:
        $r13 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label11:
        i35 = 0;

        $i6 = r0.<java.io.PipedReader: int out>;

        $i5 = r0.<java.io.PipedReader: int in>;

        if $i6 < $i5 goto label15;

        $r5 = r0.<java.io.PipedReader: char[] buffer>;

        $i22 = lengthof $r5;

        $i23 = r0.<java.io.PipedReader: int out>;

        $i25 = $i22 - $i23;

        if i1 <= $i25 goto label12;

        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        $i33 = lengthof $r8;

        $i30 = r0.<java.io.PipedReader: int out>;

        $i34 = $i33 - $i30;

        goto label13;

     label12:
        $i34 = i1;

     label13:
        i35 = $i34;

        $r6 = r0.<java.io.PipedReader: char[] buffer>;

        $i26 = r0.<java.io.PipedReader: int out>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r6, $i26, r1, i0, i35);

        $i24 = r0.<java.io.PipedReader: int out>;

        $i29 = $i24 + i35;

        r0.<java.io.PipedReader: int out> = $i29;

        $i28 = r0.<java.io.PipedReader: int out>;

        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        $i27 = lengthof $r7;

        if $i28 != $i27 goto label14;

        r0.<java.io.PipedReader: int out> = 0;

     label14:
        $i32 = r0.<java.io.PipedReader: int out>;

        $i31 = r0.<java.io.PipedReader: int in>;

        if $i32 != $i31 goto label15;

        r0.<java.io.PipedReader: int in> = -1;

        r0.<java.io.PipedReader: int out> = 0;

     label15:
        if i35 == i1 goto label16;

        $i7 = r0.<java.io.PipedReader: int in>;

        if $i7 != -1 goto label17;

     label16:
        return i35;

     label17:
        i2 = i35;

        $i9 = r0.<java.io.PipedReader: int in>;

        $i8 = r0.<java.io.PipedReader: int out>;

        $i10 = $i9 - $i8;

        $i11 = i1 - i35;

        if $i10 <= $i11 goto label18;

        $i21 = i1 - i35;

        goto label19;

     label18:
        $i12 = r0.<java.io.PipedReader: int in>;

        $i13 = r0.<java.io.PipedReader: int out>;

        $i21 = $i12 - $i13;

     label19:
        i36 = $i21;

        $r4 = r0.<java.io.PipedReader: char[] buffer>;

        $i14 = r0.<java.io.PipedReader: int out>;

        $i15 = i0 + i2;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r4, $i14, r1, $i15, i36);

        $i16 = r0.<java.io.PipedReader: int out>;

        $i18 = $i16 + i36;

        r0.<java.io.PipedReader: int out> = $i18;

        $i20 = r0.<java.io.PipedReader: int out>;

        $i17 = r0.<java.io.PipedReader: int in>;

        if $i20 != $i17 goto label20;

        r0.<java.io.PipedReader: int in> = -1;

        r0.<java.io.PipedReader: int out> = 0;

     label20:
        $i19 = i2 + i36;

        return $i19;

        catch java.lang.InterruptedException from label04 to label06 with label10;
        catch java.lang.InterruptedException from label07 to label09 with label10;
    }

    public synchronized boolean ready() throws java.io.IOException
    {
        java.io.PipedReader r0;
        boolean $z0, $z1;
        char[] $r1;
        int $i0;
        java.io.IOException $r2, $r3;

        r0 := @this: java.io.PipedReader;

        $z0 = r0.<java.io.PipedReader: boolean isConnected>;

        if $z0 != 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe not connected");

        throw $r3;

     label1:
        $r1 = r0.<java.io.PipedReader: char[] buffer>;

        if $r1 != null goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r2;

     label2:
        $i0 = r0.<java.io.PipedReader: int in>;

        if $i0 == -1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    synchronized void receive(char) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char c0;
        char[] $r2, $r5, $r6, $r7, $r8;
        java.lang.Thread $r3, $r4, $r10, $r11, $r13;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.io.IOException $r9, $r12, $r14, $r15;
        boolean $z0, $z1;
        java.lang.InterruptedException $r16;

        r0 := @this: java.io.PipedReader;

        c0 := @parameter0: char;

        $r2 = r0.<java.io.PipedReader: char[] buffer>;

        if $r2 != null goto label1;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r14;

     label1:
        $r3 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r3 == null goto label2;

        $r13 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r13.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label2;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r15;

     label2:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastWriter> = $r4;

     label3:
        $r5 = r0.<java.io.PipedReader: char[] buffer>;

        if $r5 == null goto label4;

        $i6 = r0.<java.io.PipedReader: int out>;

        $i7 = r0.<java.io.PipedReader: int in>;

        if $i6 != $i7 goto label4;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        $r11 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r11 == null goto label3;

        $r10 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z0 = virtualinvoke $r10.<java.lang.Thread: boolean isAlive()>();

        if $z0 != 0 goto label3;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r12;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label6:
        $r6 = r0.<java.io.PipedReader: char[] buffer>;

        if $r6 != null goto label7;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r9;

     label7:
        $i1 = r0.<java.io.PipedReader: int in>;

        if $i1 != -1 goto label8;

        r0.<java.io.PipedReader: int in> = 0;

     label8:
        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        $i2 = r0.<java.io.PipedReader: int in>;

        $i3 = $i2 + 1;

        r0.<java.io.PipedReader: int in> = $i3;

        $r7[$i2] = c0;

        $i5 = r0.<java.io.PipedReader: int in>;

        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        $i4 = lengthof $r8;

        if $i5 != $i4 goto label9;

        r0.<java.io.PipedReader: int in> = 0;

     label9:
        return;

        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    synchronized void receive(char[], int, int) throws java.io.IOException
    {
        java.io.PipedReader r0;
        char[] r1, $r3, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23;
        java.lang.Thread $r4, $r5, $r12, $r15, $r16;
        java.io.IOException $r13, $r14, $r17, $r19;
        boolean $z0, $z1;
        java.lang.InterruptedException $r18;

        r0 := @this: java.io.PipedReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r3 = r0.<java.io.PipedReader: char[] buffer>;

        if $r3 != null goto label01;

        $r17 = new java.io.IOException;

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r17;

     label01:
        $r4 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r4 == null goto label02;

        $r15 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r15.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label02;

        $r19 = new java.io.IOException;

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r19;

     label02:
        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedReader: java.lang.Thread lastWriter> = $r5;

     label03:
        if i1 <= 0 goto label13;

     label04:
        $r6 = r0.<java.io.PipedReader: char[] buffer>;

        if $r6 == null goto label05;

        $i20 = r0.<java.io.PipedReader: int out>;

        $i21 = r0.<java.io.PipedReader: int in>;

        if $i20 != $i21 goto label05;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        $r12 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        if $r12 == null goto label04;

        $r16 = r0.<java.io.PipedReader: java.lang.Thread lastReader>;

        $z0 = virtualinvoke $r16.<java.lang.Thread: boolean isAlive()>();

        if $z0 != 0 goto label04;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r14;

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label07:
        $r7 = r0.<java.io.PipedReader: char[] buffer>;

        if $r7 != null goto label08;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r13;

     label08:
        $i3 = r0.<java.io.PipedReader: int in>;

        if $i3 != -1 goto label09;

        r0.<java.io.PipedReader: int in> = 0;

     label09:
        $i5 = r0.<java.io.PipedReader: int in>;

        $i4 = r0.<java.io.PipedReader: int out>;

        if $i5 < $i4 goto label11;

        $r9 = r0.<java.io.PipedReader: char[] buffer>;

        $i15 = lengthof $r9;

        $i13 = r0.<java.io.PipedReader: int in>;

        i22 = $i15 - $i13;

        if i1 >= i22 goto label10;

        i22 = i1;

     label10:
        $r10 = r0.<java.io.PipedReader: char[] buffer>;

        $i14 = r0.<java.io.PipedReader: int in>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i0, $r10, $i14, i22);

        i0 = i0 + i22;

        i1 = i1 - i22;

        $i16 = r0.<java.io.PipedReader: int in>;

        $i17 = $i16 + i22;

        r0.<java.io.PipedReader: int in> = $i17;

        $i18 = r0.<java.io.PipedReader: int in>;

        $r11 = r0.<java.io.PipedReader: char[] buffer>;

        $i19 = lengthof $r11;

        if $i18 != $i19 goto label11;

        r0.<java.io.PipedReader: int in> = 0;

     label11:
        if i1 <= 0 goto label03;

        $i7 = r0.<java.io.PipedReader: int in>;

        $i6 = r0.<java.io.PipedReader: int out>;

        if $i7 == $i6 goto label03;

        $i8 = r0.<java.io.PipedReader: int out>;

        $i9 = r0.<java.io.PipedReader: int in>;

        i23 = $i8 - $i9;

        if i1 >= i23 goto label12;

        i23 = i1;

     label12:
        $r8 = r0.<java.io.PipedReader: char[] buffer>;

        $i10 = r0.<java.io.PipedReader: int in>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r1, i0, $r8, $i10, i23);

        i0 = i0 + i23;

        i1 = i1 - i23;

        $i12 = r0.<java.io.PipedReader: int in>;

        $i11 = $i12 + i23;

        r0.<java.io.PipedReader: int in> = $i11;

        goto label03;

     label13:
        return;

        catch java.lang.InterruptedException from label04 to label05 with label06;
    }

    synchronized void done()
    {
        java.io.PipedReader r0;

        r0 := @this: java.io.PipedReader;

        r0.<java.io.PipedReader: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public static void <clinit>()
    {
        <java.io.PipedReader: int PIPE_SIZE> = 1024;

        return;
    }
}
