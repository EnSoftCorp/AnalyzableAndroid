public class java.io.PipedInputStream extends java.io.InputStream
{
    private java.lang.Thread lastReader;
    private java.lang.Thread lastWriter;
    private boolean isClosed;
    protected byte[] buffer;
    protected int in;
    protected int out;
    protected static final int PIPE_SIZE;
    boolean isConnected;

    public void <init>()
    {
        java.io.PipedInputStream r0;

        r0 := @this: java.io.PipedInputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        return;
    }

    public void <init>(java.io.PipedOutputStream) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        virtualinvoke r0.<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>(r1);

        return;
    }

    public void <init>(int)
    {
        java.io.PipedInputStream r0;
        int i0;
        byte[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.io.PipedInputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        r0.<java.io.PipedInputStream: int in> = -1;

        if i0 > 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pipe size ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label1:
        $r1 = newarray (byte)[i0];

        r0.<java.io.PipedInputStream: byte[] buffer> = $r1;

        return;
    }

    public void <init>(java.io.PipedOutputStream, int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;
        int i0;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.PipedInputStream: void <init>(int)>(i0);

        virtualinvoke r0.<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)>(r1);

        return;
    }

    public synchronized int available() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: java.io.PipedInputStream;

        $r1 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r1 == null goto label1;

        $i0 = r0.<java.io.PipedInputStream: int in>;

        if $i0 != -1 goto label2;

     label1:
        return 0;

     label2:
        $i2 = r0.<java.io.PipedInputStream: int in>;

        $i1 = r0.<java.io.PipedInputStream: int out>;

        if $i2 > $i1 goto label3;

        $r2 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i7 = lengthof $r2;

        $i6 = r0.<java.io.PipedInputStream: int out>;

        $i9 = $i7 - $i6;

        $i8 = r0.<java.io.PipedInputStream: int in>;

        $i5 = $i9 + $i8;

        goto label4;

     label3:
        $i4 = r0.<java.io.PipedInputStream: int in>;

        $i3 = r0.<java.io.PipedInputStream: int out>;

        $i5 = $i4 - $i3;

     label4:
        return $i5;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.io.PipedInputStream r0;

        r0 := @this: java.io.PipedInputStream;

        r0.<java.io.PipedInputStream: byte[] buffer> = null;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public void connect(java.io.PipedOutputStream) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        java.io.PipedOutputStream r1;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: java.io.PipedOutputStream;

        virtualinvoke r1.<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)>(r0);

        return;
    }

    synchronized void establishConnection() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        boolean $z0;
        byte[] $r1, $r2;
        java.io.IOException $r3;

        r0 := @this: java.io.PipedInputStream;

        $z0 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z0 == 0 goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe already connected");

        throw $r3;

     label1:
        $r1 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r1 != null goto label2;

        $r2 = newarray (byte)[1024];

        r0.<java.io.PipedInputStream: byte[] buffer> = $r2;

     label2:
        r0.<java.io.PipedInputStream: boolean isConnected> = 1;

        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;
        byte[] $r1, $r3, $r4;
        java.lang.Thread $r2, $r5, $r6;
        byte $b4;
        java.io.IOException $r7, $r8, $r10;
        java.lang.InterruptedException $r9;
        short s10;

        r0 := @this: java.io.PipedInputStream;

        $z0 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z0 != 0 goto label01;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Not connected");

        throw $r10;

     label01:
        $r1 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r1 != null goto label02;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("InputStream is closed");

        throw $r7;

     label02:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastReader> = $r2;

     label03:
        i0 = 3;

     label04:
        $i1 = r0.<java.io.PipedInputStream: int in>;

        if $i1 != -1 goto label08;

        $z1 = r0.<java.io.PipedInputStream: boolean isClosed>;

        if $z1 == 0 goto label06;

     label05:
        return -1;

     label06:
        $i9 = i0;

        i0 = i0 + -1;

        if $i9 > 0 goto label07;

        $r5 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        if $r5 == null goto label07;

        $r6 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        $z2 = virtualinvoke $r6.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label07;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r8;

     label07:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        goto label04;

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label10:
        $r3 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i2 = r0.<java.io.PipedInputStream: int out>;

        $i3 = $i2 + 1;

        r0.<java.io.PipedInputStream: int out> = $i3;

        $b4 = $r3[$i2];

        s10 = $b4 & 255;

        $i6 = r0.<java.io.PipedInputStream: int out>;

        $r4 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i5 = lengthof $r4;

        if $i6 != $i5 goto label11;

        r0.<java.io.PipedInputStream: int out> = 0;

     label11:
        $i8 = r0.<java.io.PipedInputStream: int out>;

        $i7 = r0.<java.io.PipedInputStream: int in>;

        if $i8 != $i7 goto label12;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label12:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return s10;

        catch java.lang.InterruptedException from label03 to label05 with label09;
        catch java.lang.InterruptedException from label06 to label08 with label09;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        byte[] r1, $r2, $r4, $r5, $r6, $r7;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r3, $r8, $r9;
        java.io.IOException $r10, $r12, $r13;
        java.lang.InterruptedException $r11;

        r0 := @this: java.io.PipedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i6 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i6, i0, i1);

        if i1 != 0 goto label01;

        return 0;

     label01:
        $z0 = r0.<java.io.PipedInputStream: boolean isConnected>;

        if $z0 != 0 goto label02;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Not connected");

        throw $r10;

     label02:
        $r2 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r2 != null goto label03;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>("InputStream is closed");

        throw $r13;

     label03:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastReader> = $r3;

     label04:
        i2 = 3;

     label05:
        $i7 = r0.<java.io.PipedInputStream: int in>;

        if $i7 != -1 goto label09;

        $z1 = r0.<java.io.PipedInputStream: boolean isClosed>;

        if $z1 == 0 goto label07;

     label06:
        return -1;

     label07:
        $i30 = i2;

        i2 = i2 + -1;

        if $i30 > 0 goto label08;

        $r9 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        if $r9 == null goto label08;

        $r8 = r0.<java.io.PipedInputStream: java.lang.Thread lastWriter>;

        $z2 = virtualinvoke $r8.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label08;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r12;

     label08:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        goto label05;

     label09:
        goto label11;

     label10:
        $r11 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label11:
        i31 = 0;

        $i9 = r0.<java.io.PipedInputStream: int out>;

        $i8 = r0.<java.io.PipedInputStream: int in>;

        if $i9 < $i8 goto label16;

        $r5 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i22 = lengthof $r5;

        $i20 = r0.<java.io.PipedInputStream: int out>;

        i3 = $i22 - $i20;

        if i3 >= i1 goto label12;

        $i27 = i3;

        goto label13;

     label12:
        $i27 = i1;

     label13:
        i4 = $i27;

        $r6 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i21 = r0.<java.io.PipedInputStream: int out>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r6, $i21, r1, i0, i4);

        $i23 = r0.<java.io.PipedInputStream: int out>;

        $i26 = $i23 + i4;

        r0.<java.io.PipedInputStream: int out> = $i26;

        $i25 = r0.<java.io.PipedInputStream: int out>;

        $r7 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i24 = lengthof $r7;

        if $i25 != $i24 goto label14;

        r0.<java.io.PipedInputStream: int out> = 0;

     label14:
        $i29 = r0.<java.io.PipedInputStream: int out>;

        $i28 = r0.<java.io.PipedInputStream: int in>;

        if $i29 != $i28 goto label15;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label15:
        i31 = i31 + i4;

     label16:
        if i31 >= i1 goto label20;

        $i10 = r0.<java.io.PipedInputStream: int in>;

        if $i10 == -1 goto label20;

        $i11 = r0.<java.io.PipedInputStream: int in>;

        $i12 = r0.<java.io.PipedInputStream: int out>;

        i32 = $i11 - $i12;

        i33 = i1 - i31;

        if i33 >= i32 goto label17;

        $i18 = i33;

        goto label18;

     label17:
        $i18 = i32;

     label18:
        i5 = $i18;

        $r4 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i13 = r0.<java.io.PipedInputStream: int out>;

        $i14 = i0 + i31;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r4, $i13, r1, $i14, i5);

        $i15 = r0.<java.io.PipedInputStream: int out>;

        $i17 = $i15 + i5;

        r0.<java.io.PipedInputStream: int out> = $i17;

        $i19 = r0.<java.io.PipedInputStream: int out>;

        $i16 = r0.<java.io.PipedInputStream: int in>;

        if $i19 != $i16 goto label19;

        r0.<java.io.PipedInputStream: int in> = -1;

        r0.<java.io.PipedInputStream: int out> = 0;

     label19:
        i31 = i31 + i5;

     label20:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return i31;

        catch java.lang.InterruptedException from label04 to label06 with label10;
        catch java.lang.InterruptedException from label07 to label09 with label10;
    }

    protected synchronized void receive(int) throws java.io.IOException
    {
        java.io.PipedInputStream r0;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8;
        byte[] $r2, $r5, $r6, $r8, $r9;
        java.io.IOException $r3, $r11, $r12, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Thread $r4, $r7, $r10, $r13, $r14;
        byte $b4;
        java.lang.InterruptedException $r16;

        r0 := @this: java.io.PipedInputStream;

        i0 := @parameter0: int;

        $r2 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r2 == null goto label01;

        $z0 = r0.<java.io.PipedInputStream: boolean isClosed>;

        if $z0 == 0 goto label02;

     label01:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r3;

     label02:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.io.PipedInputStream: java.lang.Thread lastWriter> = $r4;

     label03:
        $r5 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r5 == null goto label05;

        $i7 = r0.<java.io.PipedInputStream: int out>;

        $i8 = r0.<java.io.PipedInputStream: int in>;

        if $i7 != $i8 goto label05;

        $r14 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        if $r14 == null goto label04;

        $r13 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        $z2 = virtualinvoke $r13.<java.lang.Thread: boolean isAlive()>();

        if $z2 != 0 goto label04;

        $r15 = new java.io.IOException;

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r15;

     label04:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        virtualinvoke r0.<java.lang.Object: void wait(long)>(1000L);

        goto label03;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void throwInterruptedIoException()>();

     label07:
        $r6 = r0.<java.io.PipedInputStream: byte[] buffer>;

        if $r6 != null goto label08;

        $r11 = new java.io.IOException;

        specialinvoke $r11.<java.io.IOException: void <init>(java.lang.String)>("Pipe is closed");

        throw $r11;

     label08:
        $i1 = r0.<java.io.PipedInputStream: int in>;

        if $i1 != -1 goto label09;

        r0.<java.io.PipedInputStream: int in> = 0;

     label09:
        $r7 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        if $r7 == null goto label10;

        $r10 = r0.<java.io.PipedInputStream: java.lang.Thread lastReader>;

        $z1 = virtualinvoke $r10.<java.lang.Thread: boolean isAlive()>();

        if $z1 != 0 goto label10;

        $r12 = new java.io.IOException;

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("Pipe broken");

        throw $r12;

     label10:
        $r8 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i2 = r0.<java.io.PipedInputStream: int in>;

        $i3 = $i2 + 1;

        r0.<java.io.PipedInputStream: int in> = $i3;

        $b4 = (byte) i0;

        $r8[$i2] = $b4;

        $i5 = r0.<java.io.PipedInputStream: int in>;

        $r9 = r0.<java.io.PipedInputStream: byte[] buffer>;

        $i6 = lengthof $r9;

        if $i5 != $i6 goto label11;

        r0.<java.io.PipedInputStream: int in> = 0;

     label11:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;

        catch java.lang.InterruptedException from label03 to label05 with label06;
    }

    synchronized void done()
    {
        java.io.PipedInputStream r0;

        r0 := @this: java.io.PipedInputStream;

        r0.<java.io.PipedInputStream: boolean isClosed> = 1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    public static void <clinit>()
    {
        <java.io.PipedInputStream: int PIPE_SIZE> = 1024;

        return;
    }
}
