public class java.util.zip.GZIPInputStream extends java.util.zip.InflaterInputStream
{
    private static final int FCOMMENT;
    private static final int FEXTRA;
    private static final int FHCRC;
    private static final int FNAME;
    private static final int GZIP_TRAILER_SIZE;
    public static final int GZIP_MAGIC;
    protected java.util.zip.CRC32 crc;
    protected boolean eos;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        java.io.InputStream r1;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream,int)>(r1, 512);

        return;
    }

    public void <init>(java.io.InputStream, int) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        java.io.InputStream r1;
        int i0;
        byte[] r2, $r6;
        short s1;
        java.util.zip.Inflater $r3;
        java.util.zip.CRC32 $r4, $r7;
        java.nio.ByteOrder $r5;
        java.io.IOException $r8, $r12, r13;
        java.lang.Object[] $r9;
        java.lang.String $r10;
        java.lang.Short $r11;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        $r3 = new java.util.zip.Inflater;

        specialinvoke $r3.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int)>(r1, $r3, i0);

        $r4 = new java.util.zip.CRC32;

        specialinvoke $r4.<java.util.zip.CRC32: void <init>()>();

        r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc> = $r4;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = 0;

     label1:
        r2 = staticinvoke <java.util.zip.GZIPInputStream: byte[] readHeader(java.io.InputStream)>(r1);

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        s1 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r2, 0, $r5);

        if s1 == -29921 goto label2;

        $r8 = new java.io.IOException;

        $r9 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s1);

        $r9[0] = $r11;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown format (magic number %x)", $r9);

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label2:
        $r7 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $r6 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        staticinvoke <java.util.zip.GZIPInputStream: void parseGzipHeader(java.io.InputStream,byte[],java.util.zip.CRC32,byte[])>(r1, r2, $r7, $r6);

     label3:
        goto label5;

     label4:
        $r12 := @caughtexception;

        r13 = $r12;

        virtualinvoke r0.<java.util.zip.GZIPInputStream: void close()>();

        throw r13;

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;

        r0 := @this: java.util.zip.GZIPInputStream;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = 1;

        specialinvoke r0.<java.util.zip.InflaterInputStream: void close()>();

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.lang.Throwable r2, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.zip.CRC32 $r3, $r6;
        java.util.zip.Inflater $r4;
        java.io.IOException $r5;

        r0 := @this: java.util.zip.GZIPInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<java.util.zip.GZIPInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Stream is closed");

        throw $r5;

     label1:
        $z1 = r0.<java.util.zip.GZIPInputStream: boolean eos>;

        if $z1 == 0 goto label2;

        return -1;

     label2:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

     label3:
        i2 = specialinvoke r0.<java.util.zip.InflaterInputStream: int read(byte[],int,int)>(r1, i0, i1);

     label4:
        $z2 = r0.<java.util.zip.GZIPInputStream: boolean eof>;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = $z2;

        goto label7;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

     label6:
        $z6 = r0.<java.util.zip.GZIPInputStream: boolean eof>;

        r0.<java.util.zip.GZIPInputStream: boolean eos> = $z6;

        throw r2;

     label7:
        if i2 == -1 goto label8;

        $r6 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r6.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, i0, i2);

     label8:
        $z3 = r0.<java.util.zip.GZIPInputStream: boolean eos>;

        if $z3 == 0 goto label9;

        specialinvoke r0.<java.util.zip.GZIPInputStream: void verifyCrc()>();

        $z4 = specialinvoke r0.<java.util.zip.GZIPInputStream: boolean maybeReadNextMember()>();

        r0.<java.util.zip.GZIPInputStream: boolean eos> = $z4;

        $z5 = r0.<java.util.zip.GZIPInputStream: boolean eos>;

        if $z5 != 0 goto label9;

        $r3 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r3.<java.util.zip.CRC32: void reset()>();

        $r4 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r4.<java.util.zip.Inflater: void reset()>();

        r0.<java.util.zip.GZIPInputStream: boolean eof> = 0;

        r0.<java.util.zip.GZIPInputStream: int len> = 0;

     label9:
        return i2;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private boolean maybeReadNextMember() throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        int i0, $i1, $i2, $i3, $i4;
        byte[] r1, $r6, $r13, $r15;
        java.util.zip.Inflater $r3, $r12;
        java.io.InputStream $r4, $r8, $r9, $r10, $r17;
        java.nio.ByteOrder $r5;
        java.util.zip.CRC32 $r7;
        boolean $z0;
        java.io.PushbackInputStream $r11, $r14;
        java.io.EOFException $r16;
        short s5;

        r0 := @this: java.util.zip.GZIPInputStream;

        $r3 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        $i1 = virtualinvoke $r3.<java.util.zip.Inflater: int getRemaining()>();

        i0 = $i1 - 8;

        if i0 <= 0 goto label2;

        $r9 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $z0 = $r9 instanceof java.io.PushbackInputStream;

        if $z0 != 0 goto label1;

        $r14 = new java.io.PushbackInputStream;

        $r17 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $r15 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        $i4 = lengthof $r15;

        specialinvoke $r14.<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)>($r17, $i4);

        r0.<java.util.zip.GZIPInputStream: java.io.InputStream in> = $r14;

     label1:
        $r10 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $r11 = (java.io.PushbackInputStream) $r10;

        $r13 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        $r12 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        $i2 = virtualinvoke $r12.<java.util.zip.Inflater: int getCurrentOffset()>();

        $i3 = $i2 + 8;

        virtualinvoke $r11.<java.io.PushbackInputStream: void unread(byte[],int,int)>($r13, $i3, i0);

     label2:
        $r4 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        r1 = staticinvoke <java.util.zip.GZIPInputStream: byte[] readHeader(java.io.InputStream)>($r4);

     label3:
        goto label5;

     label4:
        $r16 := @caughtexception;

        return 1;

     label5:
        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        s5 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r1, 0, $r5);

        if s5 == -29921 goto label6;

        return 1;

     label6:
        $r8 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $r7 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $r6 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        staticinvoke <java.util.zip.GZIPInputStream: void parseGzipHeader(java.io.InputStream,byte[],java.util.zip.CRC32,byte[])>($r8, r1, $r7, $r6);

        return 0;

        catch java.io.EOFException from label2 to label3 with label4;
    }

    private static byte[] readHeader(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1;
        int $i0;

        r0 := @parameter0: java.io.InputStream;

        r1 = newarray (byte)[10];

        $i0 = lengthof r1;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, $i0);

        return r1;
    }

    private static void parseGzipHeader(java.io.InputStream, byte[], java.util.zip.CRC32, byte[]) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r1, r3;
        java.util.zip.CRC32 r2;
        byte b0, $b4, $b5, $b6, $b7;
        boolean z0, $z1;
        int i1, i2, i3, $i10, $i11, $i13, $i14;
        java.nio.ByteOrder $r4, $r5;
        long $l8;
        short $s9, $s12, s15;
        java.io.IOException $r6;
        java.io.EOFException $r7;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: byte[];

        r2 := @parameter2: java.util.zip.CRC32;

        r3 := @parameter3: byte[];

        b0 = r1[3];

        $b4 = b0 & 2;

        if $b4 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        if z0 == 0 goto label03;

        $i13 = lengthof r1;

        virtualinvoke r2.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, 0, $i13);

     label03:
        $b5 = b0 & 4;

        if $b5 == 0 goto label10;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, 2);

        if z0 == 0 goto label04;

        virtualinvoke r2.<java.util.zip.CRC32: void update(byte[],int,int)>(r1, 0, 2);

     label04:
        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $s12 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r3, 0, $r5);

        i1 = $s12 & 65535;

     label05:
        if i1 <= 0 goto label10;

        $i11 = lengthof r3;

        if i1 <= $i11 goto label06;

        $i14 = lengthof r3;

        goto label07;

     label06:
        $i14 = i1;

     label07:
        i2 = $i14;

        i3 = virtualinvoke r0.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, i2);

        if i3 != -1 goto label08;

        $r7 = new java.io.EOFException;

        specialinvoke $r7.<java.io.EOFException: void <init>()>();

        throw $r7;

     label08:
        if z0 == 0 goto label09;

        virtualinvoke r2.<java.util.zip.CRC32: void update(byte[],int,int)>(r3, 0, i3);

     label09:
        i1 = i1 - i3;

        goto label05;

     label10:
        $b6 = b0 & 8;

        if $b6 == 0 goto label11;

        staticinvoke <java.util.zip.GZIPInputStream: void readZeroTerminated(java.io.InputStream,java.util.zip.CRC32,boolean)>(r0, r2, z0);

     label11:
        $b7 = b0 & 16;

        if $b7 == 0 goto label12;

        staticinvoke <java.util.zip.GZIPInputStream: void readZeroTerminated(java.io.InputStream,java.util.zip.CRC32,boolean)>(r0, r2, z0);

     label12:
        if z0 == 0 goto label14;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r0, r1, 0, 2);

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        s15 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r3, 0, $r4);

        $l8 = virtualinvoke r2.<java.util.zip.CRC32: long getValue()>();

        $i10 = (int) $l8;

        $s9 = (short) $i10;

        if $s9 == s15 goto label13;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r6;

     label13:
        virtualinvoke r2.<java.util.zip.CRC32: void reset()>();

     label14:
        return;
    }

    private void verifyCrc() throws java.io.IOException
    {
        java.util.zip.GZIPInputStream r0;
        int i0, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11;
        byte[] r1, $r3;
        java.util.zip.Inflater $r2, $r8;
        java.io.InputStream $r4;
        java.nio.ByteOrder $r5, $r7;
        java.util.zip.CRC32 $r6;
        long $l7;
        java.io.IOException $r9, $r10;

        r0 := @this: java.util.zip.GZIPInputStream;

        $r2 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        i0 = virtualinvoke $r2.<java.util.zip.Inflater: int getRemaining()>();

        r1 = newarray (byte)[8];

        if i0 <= 8 goto label1;

        $i11 = 8;

        goto label2;

     label1:
        $i11 = i0;

     label2:
        i2 = $i11;

        $r3 = r0.<java.util.zip.GZIPInputStream: byte[] buf>;

        $i3 = r0.<java.util.zip.GZIPInputStream: int len>;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r3, $i4, r1, 0, i2);

        $r4 = r0.<java.util.zip.GZIPInputStream: java.io.InputStream in>;

        $i5 = 8 - i2;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>($r4, r1, i2, $i5);

        $r5 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i6 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>(r1, 0, $r5);

        $r6 = r0.<java.util.zip.GZIPInputStream: java.util.zip.CRC32 crc>;

        $l7 = virtualinvoke $r6.<java.util.zip.CRC32: long getValue()>();

        $i8 = (int) $l7;

        if $i6 == $i8 goto label3;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("CRC mismatch");

        throw $r10;

     label3:
        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $i9 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>(r1, 4, $r7);

        $r8 = r0.<java.util.zip.GZIPInputStream: java.util.zip.Inflater inf>;

        $i10 = virtualinvoke $r8.<java.util.zip.Inflater: int getTotalOut()>();

        if $i9 == $i10 goto label4;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Size mismatch");

        throw $r9;

     label4:
        return;
    }

    private static void readZeroTerminated(java.io.InputStream, java.util.zip.CRC32, boolean) throws java.io.IOException
    {
        java.io.InputStream r0;
        java.util.zip.CRC32 r1;
        boolean z0;
        int i0, $i1;
        java.io.EOFException $r2;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.util.zip.CRC32;

        z0 := @parameter2: boolean;

     label1:
        $i1 = virtualinvoke r0.<java.io.InputStream: int read()>();

        i0 = $i1;

        if $i1 <= 0 goto label2;

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.util.zip.CRC32: void update(int)>(i0);

        goto label1;

     label2:
        if i0 != -1 goto label3;

        $r2 = new java.io.EOFException;

        specialinvoke $r2.<java.io.EOFException: void <init>()>();

        throw $r2;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r1.<java.util.zip.CRC32: void update(int)>(i0);

     label4:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.GZIPInputStream: int GZIP_MAGIC> = 35615;

        <java.util.zip.GZIPInputStream: int GZIP_TRAILER_SIZE> = 8;

        <java.util.zip.GZIPInputStream: int FNAME> = 8;

        <java.util.zip.GZIPInputStream: int FHCRC> = 2;

        <java.util.zip.GZIPInputStream: int FEXTRA> = 4;

        <java.util.zip.GZIPInputStream: int FCOMMENT> = 16;

        return;
    }
}
