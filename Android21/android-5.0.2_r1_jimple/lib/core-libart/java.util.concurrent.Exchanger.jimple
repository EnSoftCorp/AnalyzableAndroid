public class java.util.concurrent.Exchanger extends java.lang.Object
{
    private static final int ASHIFT;
    private static final int MMASK;
    private static final int SEQ;
    private static final int NCPU;
    static final int FULL;
    private static final int SPINS;
    private static final java.lang.Object NULL_ITEM;
    private static final java.lang.Object TIMED_OUT;
    private final java.util.concurrent.Exchanger$Participant participant;
    private volatile java.util.concurrent.Exchanger$Node[] arena;
    private volatile java.util.concurrent.Exchanger$Node slot;
    private volatile int bound;
    private static final sun.misc.Unsafe U;
    private static final long BOUND;
    private static final long SLOT;
    private static final long MATCH;
    private static final long BLOCKER;
    private static final int ABASE;

    private final java.lang.Object arenaExchange(java.lang.Object, boolean, long)
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r5, r8, $r9, $r11, $r17, $r19, $r20, $r24;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z7;
        long l0, l5, $l10, $l21, $l26, $l29, $l30, $l31, $l34, $l35, $l37, $l41, $l42, l43;
        java.util.concurrent.Exchanger$Node[] r2;
        java.util.concurrent.Exchanger$Node r3, r4;
        int i1, i2, i3, i4, i6, i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i25, $i27, $i28, $i33, $i36, $i38, $i39, $i40, i44, i45;
        java.lang.Thread r6, r7;
        java.util.concurrent.Exchanger$Participant $r10;
        sun.misc.Unsafe $r12, $r13, $r14, $r15, $r16, $r18, $r21, $r22, $r23, $r25, $r26, $r27, $r28, $r29;
        byte $b24, $b32;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        r2 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        $r10 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant>;

        $r9 = virtualinvoke $r10.<java.util.concurrent.Exchanger$Participant: java.lang.Object get()>();

        r3 = (java.util.concurrent.Exchanger$Node) $r9;

        i1 = r3.<java.util.concurrent.Exchanger$Node: int index>;

     label01:
        $r12 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $i8 = i1 << 7;

        $i9 = <java.util.concurrent.Exchanger: int ABASE>;

        $i11 = $i8 + $i9;

        $l10 = (long) $i11;

        l5 = $l10;

        $r11 = virtualinvoke $r12.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, $l10);

        r4 = (java.util.concurrent.Exchanger$Node) $r11;

        if r4 == null goto label03;

        $r29 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z7 = virtualinvoke $r29.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l5, r4, null);

        if $z7 == 0 goto label03;

        r5 = r4.<java.util.concurrent.Exchanger$Node: java.lang.Object item>;

        r4.<java.util.concurrent.Exchanger$Node: java.lang.Object match> = r1;

        r6 = r4.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked>;

        if r6 == null goto label02;

        $r28 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r28.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r6);

     label02:
        return r5;

     label03:
        $i13 = r0.<java.util.concurrent.Exchanger: int bound>;

        i2 = $i13;

        $i12 = $i13 & 255;

        i3 = $i12;

        if i1 > $i12 goto label19;

        if r4 != null goto label19;

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = r1;

        $r14 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z2 = virtualinvoke $r14.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l5, null, r3);

        if $z2 == 0 goto label18;

        if z0 == 0 goto label04;

        if i3 != 0 goto label04;

        $l42 = staticinvoke <java.lang.System: long nanoTime()>();

        $l41 = $l42 + l0;

        goto label05;

     label04:
        $l41 = 0L;

     label05:
        l43 = $l41;

        r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        i6 = r3.<java.util.concurrent.Exchanger$Node: int hash>;

        i7 = 1024;

     label06:
        r8 = r3.<java.util.concurrent.Exchanger$Node: java.lang.Object match>;

        if r8 == null goto label07;

        $r27 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l37 = <java.util.concurrent.Exchanger: long MATCH>;

        virtualinvoke $r27.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r3, $l37, null);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r3.<java.util.concurrent.Exchanger$Node: int hash> = i6;

        return r8;

     label07:
        if i7 <= 0 goto label09;

        $i33 = i6 << 1;

        i44 = i6 ^ $i33;

        $i38 = i44 >>> 3;

        i45 = i44 ^ $i38;

        $i39 = i45 << 10;

        i6 = i45 ^ $i39;

        if i6 != 0 goto label08;

        $l35 = virtualinvoke r7.<java.lang.Thread: long getId()>();

        $i36 = (int) $l35;

        i6 = 1024 | $i36;

        goto label16;

     label08:
        if i6 >= 0 goto label16;

        i7 = i7 + -1;

        $i40 = i7 & 511;

        if $i40 != 0 goto label16;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label16;

     label09:
        $r16 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r17 = virtualinvoke $r16.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l5);

        if $r17 == r3 goto label10;

        i7 = 1024;

        goto label16;

     label10:
        $z3 = virtualinvoke r7.<java.lang.Thread: boolean isInterrupted()>();

        if $z3 != 0 goto label13;

        if i3 != 0 goto label13;

        if z0 == 0 goto label11;

        $l30 = staticinvoke <java.lang.System: long nanoTime()>();

        $l31 = l43 - $l30;

        l0 = $l31;

        $b32 = $l31 cmp 0L;

        if $b32 <= 0 goto label13;

     label11:
        $r23 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l29 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r23.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r7, $l29, r0);

        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = r7;

        $r22 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r24 = virtualinvoke $r22.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l5);

        if $r24 != r3 goto label12;

        $r26 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r26.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

     label12:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = null;

        $r25 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l34 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r25.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r7, $l34, null);

        goto label16;

     label13:
        $r15 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r19 = virtualinvoke $r15.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l5);

        if $r19 != r3 goto label16;

        $r18 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $z4 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l5, r3, null);

        if $z4 == 0 goto label16;

        if i3 == 0 goto label14;

        $r21 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l26 = <java.util.concurrent.Exchanger: long BOUND>;

        $i28 = i2 + 256;

        $i27 = $i28 - 1;

        virtualinvoke $r21.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l26, i2, $i27);

     label14:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r3.<java.util.concurrent.Exchanger$Node: int hash> = i6;

        $i23 = r3.<java.util.concurrent.Exchanger$Node: int index>;

        $i25 = $i23 >>> 1;

        r3.<java.util.concurrent.Exchanger$Node: int index> = $i25;

        i1 = $i25;

        $z5 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z5 == 0 goto label15;

        return null;

     label15:
        if z0 == 0 goto label17;

        if i3 != 0 goto label17;

        $b24 = l0 cmp 0L;

        if $b24 > 0 goto label17;

        $r20 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

        return $r20;

     label16:
        goto label06;

     label17:
        goto label29;

     label18:
        r3.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        goto label29;

     label19:
        $i15 = r3.<java.util.concurrent.Exchanger$Node: int bound>;

        if $i15 == i2 goto label23;

        r3.<java.util.concurrent.Exchanger$Node: int bound> = i2;

        r3.<java.util.concurrent.Exchanger$Node: int collides> = 0;

        if i1 != i3 goto label20;

        if i3 != 0 goto label21;

     label20:
        $i22 = i3;

        goto label22;

     label21:
        $i22 = i3 - 1;

     label22:
        i1 = $i22;

        goto label28;

     label23:
        $i14 = r3.<java.util.concurrent.Exchanger$Node: int collides>;

        i4 = $i14;

        if $i14 < i3 goto label24;

        $i16 = <java.util.concurrent.Exchanger: int FULL>;

        if i3 == $i16 goto label24;

        $r13 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l21 = <java.util.concurrent.Exchanger: long BOUND>;

        $i17 = i2 + 256;

        $i20 = $i17 + 1;

        $z1 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l21, i2, $i20);

        if $z1 != 0 goto label27;

     label24:
        $i18 = i4 + 1;

        r3.<java.util.concurrent.Exchanger$Node: int collides> = $i18;

        if i1 != 0 goto label25;

        $i19 = i3;

        goto label26;

     label25:
        $i19 = i1 - 1;

     label26:
        i1 = $i19;

        goto label28;

     label27:
        i1 = i3 + 1;

     label28:
        r3.<java.util.concurrent.Exchanger$Node: int index> = i1;

     label29:
        goto label01;
    }

    private final java.lang.Object slotExchange(java.lang.Object, boolean, long)
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r5, r7, $r9, $r13, $r18;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        long l0, $l2, $l4, $l5, $l7, $l8, $l11, $l12, $l16, $l19, $l20, $l21, $l22, l29;
        java.util.concurrent.Exchanger$Node r2, r4, $r11, $r14, $r22;
        java.lang.Thread r3, r6;
        int i1, $i3, $i10, $i13, $i14, $i15, $i18, $i23, $i24, $i25, $i26, $i27, i28, i30, i31;
        java.util.concurrent.Exchanger$Participant $r8;
        java.util.concurrent.Exchanger$Node[] $r10, $r19, $r25;
        sun.misc.Unsafe $r12, $r15, $r16, $r17, $r20, $r21, $r23, $r24, $r26;
        byte $b6, $b9;
        short $s17;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        $r8 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant>;

        $r9 = virtualinvoke $r8.<java.util.concurrent.Exchanger$Participant: java.lang.Object get()>();

        r2 = (java.util.concurrent.Exchanger$Node) $r9;

        r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z1 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z1 == 0 goto label01;

        return null;

     label01:
        $r11 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        r4 = $r11;

        if $r11 == null goto label04;

        $r23 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.Exchanger: long SLOT>;

        $z6 = virtualinvoke $r23.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l20, r4, null);

        if $z6 == 0 goto label03;

        r5 = r4.<java.util.concurrent.Exchanger$Node: java.lang.Object item>;

        r4.<java.util.concurrent.Exchanger$Node: java.lang.Object match> = r1;

        r6 = r4.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked>;

        if r6 == null goto label02;

        $r26 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r26.<sun.misc.Unsafe: void unpark(java.lang.Object)>(r6);

     label02:
        return r5;

     label03:
        $i24 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i24 <= 1 goto label01;

        $i23 = r0.<java.util.concurrent.Exchanger: int bound>;

        if $i23 != 0 goto label01;

        $r24 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l22 = <java.util.concurrent.Exchanger: long BOUND>;

        $z7 = virtualinvoke $r24.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l22, 0, 256);

        if $z7 == 0 goto label01;

        $i27 = <java.util.concurrent.Exchanger: int FULL>;

        $i26 = $i27 + 2;

        $i25 = $i26 << 7;

        $r25 = newarray (java.util.concurrent.Exchanger$Node)[$i25];

        r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena> = $r25;

        goto label01;

     label04:
        $r10 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r10 == null goto label05;

        return null;

     label05:
        r2.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = r1;

        $r12 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l2 = <java.util.concurrent.Exchanger: long SLOT>;

        $z2 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l2, null, r2);

        if $z2 == 0 goto label06;

        goto label07;

     label06:
        r2.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        goto label01;

     label07:
        i28 = r2.<java.util.concurrent.Exchanger$Node: int hash>;

        if z0 == 0 goto label08;

        $l16 = staticinvoke <java.lang.System: long nanoTime()>();

        $l21 = $l16 + l0;

        goto label09;

     label08:
        $l21 = 0L;

     label09:
        l29 = $l21;

        $i3 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i3 <= 1 goto label10;

        $s17 = 1024;

        goto label11;

     label10:
        $s17 = 1;

     label11:
        i1 = $s17;

     label12:
        $r13 = r2.<java.util.concurrent.Exchanger$Node: java.lang.Object match>;

        r7 = $r13;

        if $r13 != null goto label21;

        if i1 <= 0 goto label14;

        $i10 = i28 << 1;

        i30 = i28 ^ $i10;

        $i14 = i30 >>> 3;

        i31 = i30 ^ $i14;

        $i15 = i31 << 10;

        i28 = i31 ^ $i15;

        if i28 != 0 goto label13;

        $l19 = virtualinvoke r3.<java.lang.Thread: long getId()>();

        $i18 = (int) $l19;

        i28 = 1024 | $i18;

        goto label12;

     label13:
        if i28 >= 0 goto label12;

        i1 = i1 + -1;

        $i13 = i1 & 511;

        if $i13 != 0 goto label12;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label12;

     label14:
        $r14 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        if $r14 == r2 goto label15;

        i1 = 1024;

        goto label12;

     label15:
        $z3 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z3 != 0 goto label18;

        $r19 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r19 != null goto label18;

        if z0 == 0 goto label16;

        $l11 = staticinvoke <java.lang.System: long nanoTime()>();

        $l12 = l29 - $l11;

        l0 = $l12;

        $b9 = $l12 cmp 0L;

        if $b9 <= 0 goto label18;

     label16:
        $r17 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l7 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r17.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r3, $l7, r0);

        r2.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = r3;

        $r22 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node slot>;

        if $r22 != r2 goto label17;

        $r21 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        virtualinvoke $r21.<sun.misc.Unsafe: void park(boolean,long)>(0, l0);

     label17:
        r2.<java.util.concurrent.Exchanger$Node: java.lang.Thread parked> = null;

        $r20 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l8 = <java.util.concurrent.Exchanger: long BLOCKER>;

        virtualinvoke $r20.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r3, $l8, null);

        goto label12;

     label18:
        $r16 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l5 = <java.util.concurrent.Exchanger: long SLOT>;

        $z4 = virtualinvoke $r16.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l5, r2, null);

        if $z4 == 0 goto label12;

        if z0 == 0 goto label19;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label19;

        $z5 = virtualinvoke r3.<java.lang.Thread: boolean isInterrupted()>();

        if $z5 != 0 goto label19;

        $r18 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

        goto label20;

     label19:
        $r18 = null;

     label20:
        r7 = $r18;

        goto label21;

     label21:
        $r15 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $l4 = <java.util.concurrent.Exchanger: long MATCH>;

        virtualinvoke $r15.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r2, $l4, null);

        r2.<java.util.concurrent.Exchanger$Node: java.lang.Object item> = null;

        r2.<java.util.concurrent.Exchanger$Node: int hash> = i28;

        return r7;
    }

    public void <init>()
    {
        java.util.concurrent.Exchanger r0;
        java.util.concurrent.Exchanger$Participant $r1;

        r0 := @this: java.util.concurrent.Exchanger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.Exchanger$Participant;

        specialinvoke $r1.<java.util.concurrent.Exchanger$Participant: void <init>()>();

        r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Participant participant> = $r1;

        return;
    }

    public java.lang.Object exchange(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r2, r3, $r6, $r7, $r8, $r9, $r10;
        java.util.concurrent.Exchanger$Node[] $r4;
        boolean $z0;
        java.lang.InterruptedException $r5;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r10 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        goto label2;

     label1:
        $r10 = r1;

     label2:
        r3 = $r10;

        $r4 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r4 != null goto label3;

        $r9 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object slotExchange(java.lang.Object,boolean,long)>(r3, 0, 0L);

        r2 = $r9;

        if $r9 != null goto label5;

     label3:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label4;

        $r6 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object arenaExchange(java.lang.Object,boolean,long)>(r3, 0, 0L);

        r2 = $r6;

        if $r6 != null goto label5;

     label4:
        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;

     label5:
        $r7 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        if r2 != $r7 goto label6;

        $r8 = null;

        goto label7;

     label6:
        $r8 = r2;

     label7:
        return $r8;
    }

    public java.lang.Object exchange(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.Exchanger r0;
        java.lang.Object r1, r3, r4, $r7, $r8, $r9, $r11, $r12, $r13;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.Exchanger$Node[] $r5;
        boolean $z0;
        java.lang.InterruptedException $r6;
        java.util.concurrent.TimeoutException $r10;

        r0 := @this: java.util.concurrent.Exchanger;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label1;

        $r12 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        goto label2;

     label1:
        $r12 = r1;

     label2:
        r4 = $r12;

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r5 = r0.<java.util.concurrent.Exchanger: java.util.concurrent.Exchanger$Node[] arena>;

        if $r5 != null goto label3;

        $r13 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object slotExchange(java.lang.Object,boolean,long)>(r4, 1, l1);

        r3 = $r13;

        if $r13 != null goto label5;

     label3:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 != 0 goto label4;

        $r7 = specialinvoke r0.<java.util.concurrent.Exchanger: java.lang.Object arenaExchange(java.lang.Object,boolean,long)>(r4, 1, l1);

        r3 = $r7;

        if $r7 != null goto label5;

     label4:
        $r6 = new java.lang.InterruptedException;

        specialinvoke $r6.<java.lang.InterruptedException: void <init>()>();

        throw $r6;

     label5:
        $r8 = <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT>;

        if r3 != $r8 goto label6;

        $r10 = new java.util.concurrent.TimeoutException;

        specialinvoke $r10.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r10;

     label6:
        $r9 = <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM>;

        if r3 != $r9 goto label7;

        $r11 = null;

        goto label8;

     label7:
        $r11 = r3;

     label8:
        return $r11;
    }

    static void <clinit>()
    {
        int i0, $i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12;
        java.lang.Class r0, r1, r2, r3;
        java.lang.Runtime $r4;
        java.lang.Object $r5, $r6;
        sun.misc.Unsafe $r7, $r8, $r11, $r12, $r15, $r16, $r17;
        java.lang.reflect.Field $r9, $r10, $r13, $r14;
        long $l5, $l6, $l7, $l8;
        java.lang.Error $r18, $r19;
        java.lang.Exception $r20, r21;

        <java.util.concurrent.Exchanger: int SPINS> = 1024;

        <java.util.concurrent.Exchanger: int SEQ> = 256;

        <java.util.concurrent.Exchanger: int MMASK> = 255;

        <java.util.concurrent.Exchanger: int ASHIFT> = 7;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r4.<java.lang.Runtime: int availableProcessors()>();

        <java.util.concurrent.Exchanger: int NCPU> = $i1;

        $i2 = <java.util.concurrent.Exchanger: int NCPU>;

        if $i2 < 510 goto label1;

        $i4 = 255;

        goto label2;

     label1:
        $i3 = <java.util.concurrent.Exchanger: int NCPU>;

        $i4 = $i3 >>> 1;

     label2:
        <java.util.concurrent.Exchanger: int FULL> = $i4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        <java.util.concurrent.Exchanger: java.lang.Object NULL_ITEM> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        <java.util.concurrent.Exchanger: java.lang.Object TIMED_OUT> = $r6;

     label3:
        $r7 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.Exchanger: sun.misc.Unsafe U> = $r7;

        r0 = class "java/util/concurrent/Exchanger";

        r1 = class "java/util/concurrent/Exchanger$Node";

        r2 = class "[Ljava/util/concurrent/Exchanger$Node;";

        r3 = class "java/lang/Thread";

        $r8 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("bound");

        $l5 = virtualinvoke $r8.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r9);

        <java.util.concurrent.Exchanger: long BOUND> = $l5;

        $r11 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("slot");

        $l6 = virtualinvoke $r11.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r10);

        <java.util.concurrent.Exchanger: long SLOT> = $l6;

        $r12 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("match");

        $l7 = virtualinvoke $r12.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.Exchanger: long MATCH> = $l7;

        $r15 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $r14 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("parkBlocker");

        $l8 = virtualinvoke $r15.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r14);

        <java.util.concurrent.Exchanger: long BLOCKER> = $l8;

        $r16 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r16.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r2);

        $r17 = <java.util.concurrent.Exchanger: sun.misc.Unsafe U>;

        $i10 = virtualinvoke $r17.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r2);

        $i9 = $i10 + 128;

        <java.util.concurrent.Exchanger: int ABASE> = $i9;

     label4:
        goto label6;

     label5:
        $r20 := @caughtexception;

        r21 = $r20;

        $r18 = new java.lang.Error;

        specialinvoke $r18.<java.lang.Error: void <init>(java.lang.Throwable)>(r21);

        throw $r18;

     label6:
        $i12 = i0 - 1;

        $i11 = i0 & $i12;

        if $i11 != 0 goto label7;

        if i0 <= 128 goto label8;

     label7:
        $r19 = new java.lang.Error;

        specialinvoke $r19.<java.lang.Error: void <init>(java.lang.String)>("Unsupported array scale");

        throw $r19;

     label8:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }
}
