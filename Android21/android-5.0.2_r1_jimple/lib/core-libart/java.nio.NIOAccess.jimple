final class java.nio.NIOAccess extends java.lang.Object
{

    void <init>()
    {
        java.nio.NIOAccess r0;

        r0 := @this: java.nio.NIOAccess;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static long getBasePointer(java.nio.Buffer)
    {
        java.nio.Buffer r0;
        long l0, $l5, $l6;
        byte $b1;
        int $i2, $i3, $i4;

        r0 := @parameter0: java.nio.Buffer;

        l0 = r0.<java.nio.Buffer: long effectiveDirectAddress>;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0L;

     label1:
        $i3 = r0.<java.nio.Buffer: int position>;

        $i2 = r0.<java.nio.Buffer: int _elementSizeShift>;

        $i4 = $i3 << $i2;

        $l5 = (long) $i4;

        $l6 = l0 + $l5;

        return $l6;
    }

    static java.lang.Object getBaseArray(java.nio.Buffer)
    {
        java.nio.Buffer r0;
        boolean $z0;
        java.lang.Object $r1;

        r0 := @parameter0: java.nio.Buffer;

        $z0 = virtualinvoke r0.<java.nio.Buffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.nio.Buffer: java.lang.Object array()>();

        goto label2;

     label1:
        $r1 = null;

     label2:
        return $r1;
    }

    static int getBaseArrayOffset(java.nio.Buffer)
    {
        java.nio.Buffer r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @parameter0: java.nio.Buffer;

        $z0 = virtualinvoke r0.<java.nio.Buffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.nio.Buffer: int arrayOffset()>();

        $i1 = r0.<java.nio.Buffer: int position>;

        $i3 = $i0 + $i1;

        $i2 = r0.<java.nio.Buffer: int _elementSizeShift>;

        $i4 = $i3 << $i2;

        goto label2;

     label1:
        $i4 = 0;

     label2:
        return $i4;
    }
}
