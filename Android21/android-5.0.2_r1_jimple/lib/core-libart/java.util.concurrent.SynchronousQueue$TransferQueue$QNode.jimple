final class java.util.concurrent.SynchronousQueue$TransferQueue$QNode extends java.lang.Object
{
    volatile java.util.concurrent.SynchronousQueue$TransferQueue$QNode next;
    volatile java.lang.Object item;
    volatile java.lang.Thread waiter;
    final boolean isData;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long itemOffset;
    private static final long nextOffset;

    void <init>(java.lang.Object, boolean)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item> = r1;

        r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: boolean isData> = z0;

        return;
    }

    boolean casNext(java.util.concurrent.SynchronousQueue$TransferQueue$QNode, java.util.concurrent.SynchronousQueue$TransferQueue$QNode)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0, r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r1 := @parameter0: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r2 := @parameter1: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: long nextOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    boolean casItem(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0;
        java.lang.Object r1, r2, $r3;
        long $l0;
        sun.misc.Unsafe $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if $r3 != r1 goto label1;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: long itemOffset>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    void tryCancel(java.lang.Object)
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0;
        java.lang.Object r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: long itemOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r0);

        return;
    }

    boolean isCancelled()
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r1 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.lang.Object item>;

        if $r1 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isOffList()
    {
        java.util.concurrent.SynchronousQueue$TransferQueue$QNode r0, $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.SynchronousQueue$TransferQueue$QNode;

        $r1 = r0.<java.util.concurrent.SynchronousQueue$TransferQueue$QNode: java.util.concurrent.SynchronousQueue$TransferQueue$QNode next>;

        if $r1 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2, $r4;
        java.lang.reflect.Field $r3, $r5;
        long $l0, $l1;
        java.lang.Exception $r6, r8;
        java.lang.Error $r7;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/SynchronousQueue$TransferQueue$QNode";

        $r2 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("item");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: long itemOffset> = $l0;

        $r4 = <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: sun.misc.Unsafe UNSAFE>;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.SynchronousQueue$TransferQueue$QNode: long nextOffset> = $l1;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r8);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
