public final class libcore.io.Memory extends java.lang.Object
{

    private void <init>()
    {
        libcore.io.Memory r0;

        r0 := @this: libcore.io.Memory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native void unsafeBulkGet(java.lang.Object, int, int, byte[], int, int, boolean);

    public static native void unsafeBulkPut(byte[], int, int, java.lang.Object, int, int, boolean);

    public static int peekInt(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, $i5, $i6, $i9, $i11, $i12, $i14, $i15, $i20, $i21, $i23, $i26, $i27, $i28, $i30, i31, i32, i33, i34, i35, i36;
        java.nio.ByteOrder r1, $r2;
        byte $b1, $b3, $b7, $b10, $b16, $b19, $b22, $b24;
        short $s2, $s4, $s8, $s13, $s17, $s18, $s25, $s29;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i31 = i0 + 1;

        $b16 = r0[i0];

        $s17 = $b16 & 255;

        $i20 = $s17 << 24;

        i32 = i31 + 1;

        $b19 = r0[i31];

        $s18 = $b19 & 255;

        $i21 = $s18 << 16;

        $i23 = $i20 | $i21;

        i33 = i32 + 1;

        $b22 = r0[i32];

        $s25 = $b22 & 255;

        $i26 = $s25 << 8;

        $i27 = $i23 | $i26;

        $b24 = r0[i33];

        $s29 = $b24 & 255;

        $i30 = $s29 << 0;

        $i28 = $i27 | $i30;

        return $i28;

     label1:
        i34 = i0 + 1;

        $b1 = r0[i0];

        $s2 = $b1 & 255;

        $i6 = $s2 << 0;

        i35 = i34 + 1;

        $b3 = r0[i34];

        $s4 = $b3 & 255;

        $i5 = $s4 << 8;

        $i11 = $i6 | $i5;

        i36 = i35 + 1;

        $b7 = r0[i35];

        $s8 = $b7 & 255;

        $i9 = $s8 << 16;

        $i15 = $i11 | $i9;

        $b10 = r0[i36];

        $s13 = $b10 & 255;

        $i12 = $s13 << 24;

        $i14 = $i15 | $i12;

        return $i14;
    }

    public static long peekLong(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, i2, $i7, $i8, $i10, $i12, $i15, $i16, $i21, $i22, $i24, $i27, $i28, $i32, $i41, $i42, $i43, $i44, $i46, $i47, $i52, $i53, $i56, $i59, $i62, $i66, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84;
        java.nio.ByteOrder r1, $r2;
        byte $b3, $b5, $b9, $b14, $b17, $b20, $b25, $b29, $b34, $b38, $b40, $b49, $b50, $b54, $b57, $b60;
        short $s4, $s6, $s11, $s13, $s18, $s19, $s23, $s26, $s37, $s39, $s45, $s48, $s51, $s55, $s58, $s61;
        long $l30, $l31, $l33, $l35, $l36, $l63, $l64, $l65, $l67, $l68;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i69 = i0 + 1;

        $b34 = r0[i0];

        $s39 = $b34 & 255;

        $i41 = $s39 << 24;

        i70 = i69 + 1;

        $b38 = r0[i69];

        $s37 = $b38 & 255;

        $i42 = $s37 << 16;

        $i43 = $i41 | $i42;

        i71 = i70 + 1;

        $b40 = r0[i70];

        $s45 = $b40 & 255;

        $i44 = $s45 << 8;

        $i46 = $i43 | $i44;

        i72 = i71 + 1;

        $b49 = r0[i71];

        $s48 = $b49 & 255;

        $i47 = $s48 << 0;

        i1 = $i46 | $i47;

        i73 = i72 + 1;

        $b54 = r0[i72];

        $s55 = $b54 & 255;

        $i53 = $s55 << 24;

        i74 = i73 + 1;

        $b50 = r0[i73];

        $s51 = $b50 & 255;

        $i52 = $s51 << 16;

        $i56 = $i53 | $i52;

        i75 = i74 + 1;

        $b60 = r0[i74];

        $s61 = $b60 & 255;

        $i62 = $s61 << 8;

        $i66 = $i56 | $i62;

        $b57 = r0[i75];

        $s58 = $b57 & 255;

        $i59 = $s58 << 0;

        i2 = $i66 | $i59;

        $l65 = (long) i1;

        $l64 = $l65 << 32;

        $l68 = (long) i2;

        $l67 = $l68 & 4294967295L;

        $l63 = $l64 | $l67;

        return $l63;

     label1:
        i76 = i0 + 1;

        $b3 = r0[i0];

        $s4 = $b3 & 255;

        $i8 = $s4 << 0;

        i77 = i76 + 1;

        $b5 = r0[i76];

        $s6 = $b5 & 255;

        $i7 = $s6 << 8;

        $i12 = $i8 | $i7;

        i78 = i77 + 1;

        $b9 = r0[i77];

        $s11 = $b9 & 255;

        $i10 = $s11 << 16;

        $i15 = $i12 | $i10;

        i79 = i78 + 1;

        $b14 = r0[i78];

        $s13 = $b14 & 255;

        $i16 = $s13 << 24;

        i80 = $i15 | $i16;

        i81 = i79 + 1;

        $b17 = r0[i79];

        $s18 = $b17 & 255;

        $i21 = $s18 << 0;

        i82 = i81 + 1;

        $b20 = r0[i81];

        $s19 = $b20 & 255;

        $i22 = $s19 << 8;

        $i28 = $i21 | $i22;

        i83 = i82 + 1;

        $b25 = r0[i82];

        $s23 = $b25 & 255;

        $i24 = $s23 << 16;

        $i32 = $i28 | $i24;

        $b29 = r0[i83];

        $s26 = $b29 & 255;

        $i27 = $s26 << 24;

        i84 = $i32 | $i27;

        $l33 = (long) i84;

        $l35 = $l33 << 32;

        $l30 = (long) i80;

        $l31 = $l30 & 4294967295L;

        $l36 = $l35 | $l31;

        return $l36;
    }

    public static short peekShort(byte[], int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, $i1, $i5, $i6, $i9, $i12, $i14;
        java.nio.ByteOrder r1, $r2;
        byte $b2, $b3, $b8, $b10;
        short $s4, $s7, $s11, $s13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        $b8 = r0[i0];

        $i12 = $b8 << 8;

        $i9 = i0 + 1;

        $b10 = r0[$i9];

        $s11 = $b10 & 255;

        $i14 = $i12 | $s11;

        $s13 = (short) $i14;

        return $s13;

     label1:
        $i1 = i0 + 1;

        $b2 = r0[$i1];

        $i5 = $b2 << 8;

        $b3 = r0[i0];

        $s4 = $b3 & 255;

        $i6 = $i5 | $s4;

        $s7 = (short) $i6;

        return $s7;
    }

    public static void pokeInt(byte[], int, int, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i13, $i14, $i16, $i17, $i19, $i20, $i22, $i24, $i25, i26, i27, i28, i29, i30, i31;
        java.nio.ByteOrder r1, $r2;
        byte $b4, $b7, $b11, $b12, $b15, $b18, $b21, $b23;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i26 = i0 + 1;

        $i14 = i1 >> 24;

        $i16 = $i14 & 255;

        $b15 = (byte) $i16;

        r0[i0] = $b15;

        i27 = i26 + 1;

        $i17 = i1 >> 16;

        $i19 = $i17 & 255;

        $b18 = (byte) $i19;

        r0[i26] = $b18;

        i28 = i27 + 1;

        $i20 = i1 >> 8;

        $i22 = $i20 & 255;

        $b21 = (byte) $i22;

        r0[i27] = $b21;

        $i24 = i1 >> 0;

        $i25 = $i24 & 255;

        $b23 = (byte) $i25;

        r0[i28] = $b23;

        goto label2;

     label1:
        i29 = i0 + 1;

        $i2 = i1 >> 0;

        $i3 = $i2 & 255;

        $b4 = (byte) $i3;

        r0[i0] = $b4;

        i30 = i29 + 1;

        $i5 = i1 >> 8;

        $i6 = $i5 & 255;

        $b7 = (byte) $i6;

        r0[i29] = $b7;

        i31 = i30 + 1;

        $i8 = i1 >> 16;

        $i9 = $i8 & 255;

        $b11 = (byte) $i9;

        r0[i30] = $b11;

        $i10 = i1 >> 24;

        $i13 = $i10 & 255;

        $b12 = (byte) $i13;

        r0[i31] = $b12;

     label2:
        return;
    }

    public static void pokeLong(byte[], int, long, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i12, $i13, $i16, $i18, $i19, $i21, $i22, $i24, $i27, $i28, $i29, $i31, $i32, $i34, $i36, $i37, $i39, $i40, $i42, $i43, $i45, $i46, $i47, $i48, $i50, $i51, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69;
        long l1, $l14, $l26;
        java.nio.ByteOrder r1, $r2;
        byte $b5, $b8, $b11, $b15, $b17, $b20, $b23, $b25, $b30, $b33, $b35, $b38, $b41, $b44, $b49, $b52;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        $l26 = l1 >> 32;

        i2 = (int) $l26;

        i53 = i0 + 1;

        $i31 = i2 >> 24;

        $i29 = $i31 & 255;

        $b30 = (byte) $i29;

        r0[i0] = $b30;

        i54 = i53 + 1;

        $i34 = i2 >> 16;

        $i32 = $i34 & 255;

        $b33 = (byte) $i32;

        r0[i53] = $b33;

        i55 = i54 + 1;

        $i37 = i2 >> 8;

        $i36 = $i37 & 255;

        $b35 = (byte) $i36;

        r0[i54] = $b35;

        i56 = i55 + 1;

        $i40 = i2 >> 0;

        $i39 = $i40 & 255;

        $b38 = (byte) $i39;

        r0[i55] = $b38;

        i57 = (int) l1;

        i58 = i56 + 1;

        $i43 = i57 >> 24;

        $i42 = $i43 & 255;

        $b41 = (byte) $i42;

        r0[i56] = $b41;

        i59 = i58 + 1;

        $i46 = i57 >> 16;

        $i45 = $i46 & 255;

        $b44 = (byte) $i45;

        r0[i58] = $b44;

        i60 = i59 + 1;

        $i50 = i57 >> 8;

        $i51 = $i50 & 255;

        $b52 = (byte) $i51;

        r0[i59] = $b52;

        $i47 = i57 >> 0;

        $i48 = $i47 & 255;

        $b49 = (byte) $i48;

        r0[i60] = $b49;

        goto label2;

     label1:
        i61 = (int) l1;

        i62 = i0 + 1;

        $i3 = i61 >> 0;

        $i4 = $i3 & 255;

        $b5 = (byte) $i4;

        r0[i0] = $b5;

        i63 = i62 + 1;

        $i6 = i61 >> 8;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        r0[i62] = $b8;

        i64 = i63 + 1;

        $i10 = i61 >> 16;

        $i9 = $i10 & 255;

        $b11 = (byte) $i9;

        r0[i63] = $b11;

        i65 = i64 + 1;

        $i13 = i61 >> 24;

        $i12 = $i13 & 255;

        $b15 = (byte) $i12;

        r0[i64] = $b15;

        $l14 = l1 >> 32;

        i66 = (int) $l14;

        i67 = i65 + 1;

        $i16 = i66 >> 0;

        $i18 = $i16 & 255;

        $b17 = (byte) $i18;

        r0[i65] = $b17;

        i68 = i67 + 1;

        $i19 = i66 >> 8;

        $i21 = $i19 & 255;

        $b20 = (byte) $i21;

        r0[i67] = $b20;

        i69 = i68 + 1;

        $i24 = i66 >> 16;

        $i22 = $i24 & 255;

        $b23 = (byte) $i22;

        r0[i68] = $b23;

        $i27 = i66 >> 24;

        $i28 = $i27 & 255;

        $b25 = (byte) $i28;

        r0[i69] = $b25;

     label2:
        return;
    }

    public static void pokeShort(byte[], int, short, java.nio.ByteOrder)
    {
        byte[] r0;
        int i0, i14, i15;
        short s1, $s2, $s3, $s5, $s6, $s8, $s9, $s11, $s12;
        java.nio.ByteOrder r1, $r2;
        byte $b4, $b7, $b10, $b13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        s1 := @parameter2: short;

        r1 := @parameter3: java.nio.ByteOrder;

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if r1 != $r2 goto label1;

        i14 = i0 + 1;

        $s8 = s1 >> 8;

        $s9 = $s8 & 255;

        $b10 = (byte) $s9;

        r0[i0] = $b10;

        $s12 = s1 >> 0;

        $s11 = $s12 & 255;

        $b13 = (byte) $s11;

        r0[i14] = $b13;

        goto label2;

     label1:
        i15 = i0 + 1;

        $s2 = s1 >> 0;

        $s3 = $s2 & 255;

        $b4 = (byte) $s3;

        r0[i0] = $b4;

        $s5 = s1 >> 8;

        $s6 = $s5 & 255;

        $b7 = (byte) $s6;

        r0[i15] = $b7;

     label2:
        return;
    }

    public static native void memmove(java.lang.Object, int, java.lang.Object, int, long);

    public static native byte peekByte(long);

    public static int peekInt(long, boolean)
    {
        long l0;
        boolean z0;
        int i1;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        i1 = staticinvoke <libcore.io.Memory: int peekIntNative(long)>(l0);

        if z0 == 0 goto label1;

        i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i1);

     label1:
        return i1;
    }

    private static native int peekIntNative(long);

    public static long peekLong(long, boolean)
    {
        long l0, l1;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        l1 = staticinvoke <libcore.io.Memory: long peekLongNative(long)>(l0);

        if z0 == 0 goto label1;

        l1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l1);

     label1:
        return l1;
    }

    private static native long peekLongNative(long);

    public static short peekShort(long, boolean)
    {
        long l0;
        boolean z0;
        short s1;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        s1 = staticinvoke <libcore.io.Memory: short peekShortNative(long)>(l0);

        if z0 == 0 goto label1;

        s1 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s1);

     label1:
        return s1;
    }

    private static native short peekShortNative(long);

    public static native void peekByteArray(long, byte[], int, int);

    public static native void peekCharArray(long, char[], int, int, boolean);

    public static native void peekDoubleArray(long, double[], int, int, boolean);

    public static native void peekFloatArray(long, float[], int, int, boolean);

    public static native void peekIntArray(long, int[], int, int, boolean);

    public static native void peekLongArray(long, long[], int, int, boolean);

    public static native void peekShortArray(long, short[], int, int, boolean);

    public static native void pokeByte(long, byte);

    public static void pokeInt(long, int, boolean)
    {
        long l0;
        int i1;
        boolean z0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i1);

     label1:
        staticinvoke <libcore.io.Memory: void pokeIntNative(long,int)>(l0, i1);

        return;
    }

    private static native void pokeIntNative(long, int);

    public static void pokeLong(long, long, boolean)
    {
        long l0, l1;
        boolean z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        l1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l1);

     label1:
        staticinvoke <libcore.io.Memory: void pokeLongNative(long,long)>(l0, l1);

        return;
    }

    private static native void pokeLongNative(long, long);

    public static void pokeShort(long, short, boolean)
    {
        long l0;
        short s1;
        boolean z0;

        l0 := @parameter0: long;

        s1 := @parameter1: short;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        s1 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s1);

     label1:
        staticinvoke <libcore.io.Memory: void pokeShortNative(long,short)>(l0, s1);

        return;
    }

    private static native void pokeShortNative(long, short);

    public static native void pokeByteArray(long, byte[], int, int);

    public static native void pokeCharArray(long, char[], int, int, boolean);

    public static native void pokeDoubleArray(long, double[], int, int, boolean);

    public static native void pokeFloatArray(long, float[], int, int, boolean);

    public static native void pokeIntArray(long, int[], int, int, boolean);

    public static native void pokeLongArray(long, long[], int, int, boolean);

    public static native void pokeShortArray(long, short[], int, int, boolean);
}
