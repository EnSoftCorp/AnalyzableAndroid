public class java.util.concurrent.ConcurrentHashMap extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    private static final long serialVersionUID;
    private static final int MAXIMUM_CAPACITY;
    private static final int DEFAULT_CAPACITY;
    static final int MAX_ARRAY_SIZE;
    private static final int DEFAULT_CONCURRENCY_LEVEL;
    private static final float LOAD_FACTOR;
    static final int TREEIFY_THRESHOLD;
    static final int UNTREEIFY_THRESHOLD;
    static final int MIN_TREEIFY_CAPACITY;
    private static final int MIN_TRANSFER_STRIDE;
    static final int MOVED;
    static final int TREEBIN;
    static final int RESERVED;
    static final int HASH_BITS;
    static final int NCPU;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    transient volatile java.util.concurrent.ConcurrentHashMap$Node[] table;
    private transient volatile java.util.concurrent.ConcurrentHashMap$Node[] nextTable;
    private transient volatile long baseCount;
    private transient volatile int sizeCtl;
    private transient volatile int transferIndex;
    private transient volatile int transferOrigin;
    private transient volatile int cellsBusy;
    private transient volatile java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells;
    private transient java.util.concurrent.ConcurrentHashMap$KeySetView keySet;
    private transient java.util.concurrent.ConcurrentHashMap$ValuesView values;
    private transient java.util.concurrent.ConcurrentHashMap$EntrySetView entrySet;
    static final java.util.concurrent.atomic.AtomicInteger counterHashCodeGenerator;
    static final int SEED_INCREMENT;
    static final java.lang.ThreadLocal threadCounterHashCode;
    private static final sun.misc.Unsafe U;
    private static final long SIZECTL;
    private static final long TRANSFERINDEX;
    private static final long TRANSFERORIGIN;
    private static final long BASECOUNT;
    private static final long CELLSBUSY;
    private static final long CELLVALUE;
    private static final long ABASE;
    private static final int ASHIFT;

    static final int spread(int)
    {
        int i0, $i1, $i2, $i3;

        i0 := @parameter0: int;

        $i1 = i0 >>> 16;

        $i2 = i0 ^ $i1;

        $i3 = $i2 & 2147483647;

        return $i3;
    }

    private static final int tableSizeFor(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;

        i0 := @parameter0: int;

        i1 = i0 - 1;

        $i2 = i1 >>> 1;

        i8 = i1 | $i2;

        $i3 = i8 >>> 2;

        i9 = i8 | $i3;

        $i4 = i9 >>> 4;

        i10 = i9 | $i4;

        $i5 = i10 >>> 8;

        i11 = i10 | $i5;

        $i6 = i11 >>> 16;

        i12 = i11 | $i6;

        if i12 >= 0 goto label1;

        $i7 = 1;

        goto label3;

     label1:
        if i12 < 1073741824 goto label2;

        $i7 = 1073741824;

        goto label3;

     label2:
        $i7 = i12 + 1;

     label3:
        return $i7;
    }

    static java.lang.Class comparableClassFor(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r6;
        java.lang.reflect.Type[] r2, r3, $r7, $r11;
        java.lang.reflect.Type r4, $r8, $r10, $r12;
        java.lang.reflect.ParameterizedType r5, $r9;
        int i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Comparable;

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = $r6;

        if $r6 != class "java/lang/String" goto label1;

        return r1;

     label1:
        $r7 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()>();

        r2 = $r7;

        if $r7 == null goto label4;

        i0 = 0;

     label2:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label4;

        $r8 = r2[i0];

        r4 = $r8;

        $z1 = $r8 instanceof java.lang.reflect.ParameterizedType;

        if $z1 == 0 goto label3;

        $r9 = (java.lang.reflect.ParameterizedType) r4;

        r5 = $r9;

        $r10 = interfaceinvoke $r9.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        if $r10 != class "java/lang/Comparable" goto label3;

        $r11 = interfaceinvoke r5.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        r3 = $r11;

        if $r11 == null goto label3;

        $i2 = lengthof r3;

        if $i2 != 1 goto label3;

        $r12 = r3[0];

        if $r12 != r1 goto label3;

        return r1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return null;
    }

    static int compareComparables(java.lang.Class, java.lang.Object, java.lang.Object)
    {
        java.lang.Class r0, $r3;
        java.lang.Object r1, r2;
        java.lang.Comparable $r4;
        int $i0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == r0 goto label2;

     label1:
        $i0 = 0;

        goto label3;

     label2:
        $r4 = (java.lang.Comparable) r1;

        $i0 = interfaceinvoke $r4.<java.lang.Comparable: int compareTo(java.lang.Object)>(r2);

     label3:
        return $i0;
    }

    static final java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[], int)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] r0;
        int i0, $i1;
        long $l2, $l3, $l4, $l5;
        sun.misc.Unsafe $r1;
        java.lang.Object $r2;
        java.util.concurrent.ConcurrentHashMap$Node $r3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        $r1 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l4 = $l2 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l5 = $l4 + $l3;

        $r2 = virtualinvoke $r1.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r0, $l5);

        $r3 = (java.util.concurrent.ConcurrentHashMap$Node) $r2;

        return $r3;
    }

    static final boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[], int, java.util.concurrent.ConcurrentHashMap$Node, java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] r0;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Node r1, r2;
        long $l2, $l3, $l4, $l5;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$Node;

        r2 := @parameter3: java.util.concurrent.ConcurrentHashMap$Node;

        $r3 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l4 = $l2 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l5 = $l4 + $l3;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l5, r1, r2);

        return $z0;
    }

    static final void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[], int, java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node[] r0;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Node r1;
        long $l2, $l3, $l4, $l5;
        sun.misc.Unsafe $r2;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.util.concurrent.ConcurrentHashMap$Node;

        $r2 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.ConcurrentHashMap: int ASHIFT>;

        $l4 = $l2 << $i1;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long ABASE>;

        $l5 = $l4 + $l3;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l5, r1);

        return;
    }

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap r0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        if i0 < 536870912 goto label2;

        $i5 = 1073741824;

        goto label3;

     label2:
        $i2 = i0 >>> 1;

        $i3 = i0 + $i2;

        $i4 = $i3 + 1;

        $i5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int tableSizeFor(int)>($i4);

     label3:
        i1 = $i5;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i1;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = 16;

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>(r1);

        return;
    }

    public void <init>(int, float)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0;
        float f0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(i0, f0, 1);

        return;
    }

    public void <init>(int, float, int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i1, i3, $i7, $i8;
        float f0, $f1, $f2;
        long l2, $l5;
        byte $b4, $b6;
        java.lang.IllegalArgumentException $r1;
        double $d0, $d1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $b4 = f0 cmpl 0.0F;

        if $b4 <= 0 goto label1;

        if i0 < 0 goto label1;

        if i1 > 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label2:
        if i0 >= i1 goto label3;

        i0 = i1;

     label3:
        $l5 = (long) i0;

        $f1 = (float) $l5;

        $f2 = $f1 / f0;

        $d0 = (double) $f2;

        $d1 = 1.0 + $d0;

        l2 = (long) $d1;

        $b6 = l2 cmp 1073741824L;

        if $b6 < 0 goto label4;

        $i8 = 1073741824;

        goto label5;

     label4:
        $i7 = (int) l2;

        $i8 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int tableSizeFor(int)>($i7);

     label5:
        i3 = $i8;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i3;

        return;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0;
        byte $b1, $b2;
        int $i3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $i3 = 0;

        goto label3;

     label1:
        $b2 = l0 cmp 2147483647L;

        if $b2 <= 0 goto label2;

        $i3 = 2147483647;

        goto label3;

     label2:
        $i3 = (int) l0;

     label3:
        return $i3;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $l0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r9, $r10, $r11, $r13, $r14, r15;
        java.util.concurrent.ConcurrentHashMap$Node[] r2, $r6;
        java.util.concurrent.ConcurrentHashMap$Node r3, r4, $r7, $r8, $r12;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i3);

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r2 = $r6;

        if $r6 == null goto label7;

        $i4 = lengthof r2;

        i0 = $i4;

        if $i4 <= 0 goto label7;

        $i5 = i0 - 1;

        $i6 = $i5 & i2;

        $r7 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r2, $i6);

        r3 = $r7;

        if $r7 == null goto label7;

        $i7 = r3.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i1 = $i7;

        if $i7 != i2 goto label2;

        $r14 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r5 = $r14;

        if $r14 == r1 goto label1;

        if r5 == null goto label5;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label5;

     label1:
        $r13 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        return $r13;

     label2:
        if i1 >= 0 goto label5;

        $r12 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node find(int,java.lang.Object)>(i2, r1);

        r4 = $r12;

        if $r12 == null goto label3;

        $r11 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        goto label4;

     label3:
        $r11 = null;

     label4:
        return $r11;

     label5:
        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        r3 = $r8;

        if $r8 == null goto label7;

        $i8 = r3.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i8 != i2 goto label5;

        $r9 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r15 = $r9;

        if $r9 == r1 goto label6;

        if r15 == null goto label5;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r15);

        if $z0 == 0 goto label5;

     label6:
        $r10 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        return $r10;

     label7:
        return null;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r5, $r9;
        java.util.concurrent.ConcurrentHashMap$Node[] r2, $r6;
        java.util.concurrent.ConcurrentHashMap$Traverser r3, $r7;
        java.util.concurrent.ConcurrentHashMap$Node r4, $r8;
        int $i0, $i1;
        boolean $z0;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label1:
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r2 = $r6;

        if $r6 == null goto label5;

        $r7 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        $i1 = lengthof r2;

        $i0 = lengthof r2;

        specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r2, $i1, 0, $i0);

        r3 = $r7;

     label2:
        $r8 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r4 = $r8;

        if $r8 == null goto label5;

        $r9 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        r5 = $r9;

        if $r9 == r1 goto label3;

        if r5 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        goto label2;

     label5:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 0);

        return $r3;
    }

    final java.lang.Object putVal(java.lang.Object, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, r5, r8, $r18;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.util.concurrent.ConcurrentHashMap$Node[] r3;
        java.util.concurrent.ConcurrentHashMap$Node r4, r6, r7, r9, $r12, $r13, $r17, $r19, $r20;
        java.lang.NullPointerException $r10;
        java.lang.Throwable r11, $r21;
        java.util.concurrent.ConcurrentHashMap$TreeNode $r15, r22;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r16;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        z0 := @parameter2: boolean;

        if r1 == null goto label01;

        if r2 != null goto label02;

     label01:
        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label02:
        $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i5);

        i1 = 0;

        r3 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

     label03:
        if r3 == null goto label04;

        $i6 = lengthof r3;

        i2 = $i6;

        if $i6 != 0 goto label05;

     label04:
        r3 = specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] initTable()>();

        goto label21;

     label05:
        $i8 = i2 - 1;

        $i7 = $i8 & i0;

        i3 = $i7;

        $r12 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r3, $i7);

        r4 = $r12;

        if $r12 != null goto label06;

        $r20 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke $r20.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(i0, r1, r2, null);

        $z3 = staticinvoke <java.util.concurrent.ConcurrentHashMap: boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$Node)>(r3, i3, null, $r20);

        if $z3 == 0 goto label21;

        goto label22;

     label06:
        $i9 = r4.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i4 = $i9;

        if $i9 != -1879048193 goto label07;

        r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>(r3, r4);

        goto label21;

     label07:
        r5 = null;

        r6 = r4;

        entermonitor r4;

     label08:
        $r13 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r3, i3);

        if $r13 != r4 goto label15;

        if i4 < 0 goto label14;

        i1 = 1;

        r7 = r4;

     label09:
        $i10 = r7.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i10 != i0 goto label11;

        $r18 = r7.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r8 = $r18;

        if $r18 == r1 goto label10;

        if r8 == null goto label11;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label11;

     label10:
        r5 = r7.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        if z0 != 0 goto label13;

        r7.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = r2;

        goto label13;

     label11:
        r9 = r7;

        $r19 = r7.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        r7 = $r19;

        if $r19 != null goto label12;

        $r17 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke $r17.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(i0, r1, r2, null);

        r9.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = $r17;

        goto label13;

     label12:
        i1 = i1 + 1;

        goto label09;

     label13:
        goto label15;

     label14:
        $z1 = r4 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        if $z1 == 0 goto label15;

        i1 = 2;

        $r16 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r4;

        $r15 = virtualinvoke $r16.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>(i0, r1, r2);

        r22 = $r15;

        if $r15 == null goto label15;

        r5 = r22.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        if z0 != 0 goto label15;

        r22.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = r2;

     label15:
        exitmonitor r6;

     label16:
        goto label19;

     label17:
        $r21 := @caughtexception;

        r11 = $r21;

        exitmonitor r6;

     label18:
        throw r11;

     label19:
        if i1 == 0 goto label21;

        if i1 < 8 goto label20;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void treeifyBin(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r3, i3);

     label20:
        if r5 == null goto label22;

        return r5;

     label21:
        goto label03;

     label22:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>(1L, i1);

        return null;

        catch java.lang.Throwable from label08 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void putAll(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void tryPresize(int)>($i0);

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>($r6, $r7, 0);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, null, null);

        return $r2;
    }

    final java.lang.Object replaceNode(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, r3, r6, r10, r12, $r23, r28;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.concurrent.ConcurrentHashMap$Node[] r4;
        java.util.concurrent.ConcurrentHashMap$Node r5, r7, r8, r9, $r13, $r15, $r19, $r20, $r21, $r22;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r11, $r24;
        java.util.concurrent.ConcurrentHashMap$TreeNode $r16, $r17, $r18, r26, r27;
        java.util.concurrent.ConcurrentHashMap$TreeBin r25;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $i4 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i0 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i4);

        r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

     label01:
        if r4 == null goto label22;

        $i6 = lengthof r4;

        i1 = $i6;

        if $i6 == 0 goto label22;

        $i5 = i1 - 1;

        $i7 = $i5 & i0;

        i2 = $i7;

        $r13 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r4, $i7);

        r5 = $r13;

        if $r13 != null goto label02;

        goto label22;

     label02:
        $i8 = r5.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i3 = $i8;

        if $i8 != -1879048193 goto label03;

        r4 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>(r4, r5);

        goto label21;

     label03:
        r6 = null;

        z0 = 0;

        r7 = r5;

        entermonitor r5;

     label04:
        $r15 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r4, i2);

        if $r15 != r5 goto label15;

        if i3 < 0 goto label12;

        z0 = 1;

        r8 = r5;

        r9 = null;

     label05:
        $i9 = r8.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i9 != i0 goto label10;

        $r23 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r10 = $r23;

        if $r23 == r1 goto label06;

        if r10 == null goto label10;

        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r10);

        if $z5 == 0 goto label10;

     label06:
        r12 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        if r3 == null goto label07;

        if r3 == r12 goto label07;

        if r12 == null goto label11;

        $z4 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r12);

        if $z4 == 0 goto label11;

     label07:
        r6 = r12;

        if r2 == null goto label08;

        r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = r2;

        goto label11;

     label08:
        if r9 == null goto label09;

        $r21 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        r9.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = $r21;

        goto label11;

     label09:
        $r20 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r4, i2, $r20);

        goto label11;

     label10:
        r9 = r8;

        $r22 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        r8 = $r22;

        if $r22 != null goto label05;

        goto label11;

     label11:
        goto label15;

     label12:
        $z1 = r5 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        if $z1 == 0 goto label15;

        z0 = 1;

        r25 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r5;

        $r16 = r25.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        r26 = $r16;

        if $r16 == null goto label15;

        $r17 = virtualinvoke r26.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(i0, r1, null);

        r27 = $r17;

        if $r17 == null goto label15;

        r28 = r27.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object val>;

        if r3 == null goto label13;

        if r3 == r28 goto label13;

        if r28 == null goto label15;

        $z3 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r28);

        if $z3 == 0 goto label15;

     label13:
        r6 = r28;

        if r2 == null goto label14;

        r27.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object val> = r2;

        goto label15;

     label14:
        $z2 = virtualinvoke r25.<java.util.concurrent.ConcurrentHashMap$TreeBin: boolean removeTreeNode(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r27);

        if $z2 == 0 goto label15;

        $r18 = r25.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        $r19 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>($r18);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r4, i2, $r19);

     label15:
        exitmonitor r7;

     label16:
        goto label19;

     label17:
        $r24 := @caughtexception;

        r11 = $r24;

        exitmonitor r7;

     label18:
        throw r11;

     label19:
        if z0 == 0 goto label21;

        if r6 == null goto label22;

        if r2 != null goto label20;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>(-1L, -1);

     label20:
        return r6;

     label21:
        goto label01;

     label22:
        return null;

        catch java.lang.Throwable from label04 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0;
        int i1, i2, $i4, $i5, $i6;
        java.util.concurrent.ConcurrentHashMap$Node[] r1;
        java.util.concurrent.ConcurrentHashMap$Node r2, r3, r4, $r7, $r9;
        java.lang.Throwable r5, $r10;
        byte $b3;
        boolean $z0;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 = 0L;

        i1 = 0;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

     label01:
        if r1 == null goto label15;

        $i4 = lengthof r1;

        if i1 >= $i4 goto label15;

        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i1);

        if r2 != null goto label02;

        i1 = i1 + 1;

        goto label14;

     label02:
        $i5 = r2.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i2 = $i5;

        if $i5 != -1879048193 goto label03;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node)>(r1, r2);

        i1 = 0;

        goto label14;

     label03:
        r3 = r2;

        entermonitor r2;

     label04:
        $r7 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i1);

        if $r7 != r2 goto label10;

        if i2 < 0 goto label05;

        $r9 = r2;

        goto label07;

     label05:
        $z0 = r2 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        if $z0 == 0 goto label06;

        $r8 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r2;

        $r9 = $r8.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        goto label07;

     label06:
        $r9 = null;

     label07:
        r4 = $r9;

     label08:
        if r4 == null goto label09;

        l0 = l0 - 1L;

        r4 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label08;

     label09:
        $i6 = i1;

        i1 = i1 + 1;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r1, $i6, null);

     label10:
        exitmonitor r3;

     label11:
        goto label14;

     label12:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r3;

     label13:
        throw r5;

     label14:
        goto label01;

     label15:
        $b3 = l0 cmp 0L;

        if $b3 == 0 goto label16;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void addCount(long,int)>(l0, -1);

     label16:
        return;

        catch java.lang.Throwable from label04 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public java.util.Set keySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$KeySetView r1, $r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet>;

        r1 = $r2;

        if $r2 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$KeySetView;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$KeySetView: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object)>(r0, null);

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet> = $r3;

     label2:
        return $r3;
    }

    public java.util.Collection values()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$ValuesView r1, $r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$ValuesView values>;

        r1 = $r2;

        if $r2 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$ValuesView;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$ValuesView: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$ValuesView values> = $r3;

     label2:
        return $r3;
    }

    public java.util.Set entrySet()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$EntrySetView r1, $r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$EntrySetView entrySet>;

        r1 = $r2;

        if $r2 == null goto label1;

        $r3 = r1;

        goto label2;

     label1:
        $r3 = new java.util.concurrent.ConcurrentHashMap$EntrySetView;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$EntrySetView: void <init>(java.util.concurrent.ConcurrentHashMap)>(r0);

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$EntrySetView entrySet> = $r3;

     label2:
        return $r3;
    }

    public int hashCode()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r4;
        java.util.concurrent.ConcurrentHashMap$Traverser r2, $r5;
        java.util.concurrent.ConcurrentHashMap$Node r3, $r6;
        java.lang.Object $r7, $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 = 0;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r4;

        if $r4 == null goto label2;

        $r5 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        $i2 = lengthof r1;

        $i1 = lengthof r1;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r1, $i2, 0, $i1);

        r2 = $r5;

     label1:
        $r6 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r3 = $r6;

        if $r6 == null goto label2;

        $r7 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $i3 = virtualinvoke $r7.<java.lang.Object: int hashCode()>();

        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $i4 = virtualinvoke $r8.<java.lang.Object: int hashCode()>();

        $i5 = $i3 ^ $i4;

        i0 = i0 + $i5;

        goto label1;

     label2:
        return i0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r7;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Traverser r2, $r8;
        java.lang.StringBuilder r3, $r9, $r12, $r17;
        java.util.concurrent.ConcurrentHashMap$Node r4, $r11, $r18;
        java.lang.Object r5, r6, $r19, $r21;
        java.lang.String $r13;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r7;

        if $r7 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        i0 = $i1;

        $r8 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        specialinvoke $r8.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r1, i0, 0, i0);

        r2 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r3 = $r9;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r11 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r4 = $r11;

        if $r11 == null goto label9;

     label3:
        r5 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r6 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        if r5 != r0 goto label4;

        $r21 = "(this Map)";

        goto label5;

     label4:
        $r21 = r5;

     label5:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        if r6 != r0 goto label6;

        $r19 = "(this Map)";

        goto label7;

     label6:
        $r19 = r6;

     label7:
        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r18 = virtualinvoke r2.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r4 = $r18;

        if $r18 != null goto label8;

        goto label9;

     label8:
        $r17 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label3;

     label9:
        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r6, r7, r8, r9, $r14, $r15, $r16, $r17, $r18, r21;
        java.util.Map r2;
        java.util.concurrent.ConcurrentHashMap$Node[] r3, $r10;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$Traverser r4, $r11;
        java.util.concurrent.ConcurrentHashMap$Node r5, $r12;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r13;
        java.util.Iterator r19;
        java.util.Map$Entry r20;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label11;

        $z0 = r1 instanceof java.util.Map;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r2 = (java.util.Map) r1;

        $r10 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r3 = $r10;

        if $r10 != null goto label02;

        $i1 = 0;

        goto label03;

     label02:
        $i1 = lengthof r3;

     label03:
        i0 = $i1;

        $r11 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        specialinvoke $r11.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r3, i0, 0, i0);

        r4 = $r11;

     label04:
        $r12 = virtualinvoke r4.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r5 = $r12;

        if $r12 == null goto label07;

        r6 = r5.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $r18 = r5.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        if r7 == null goto label05;

        if r7 == r6 goto label06;

        $z3 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z3 != 0 goto label06;

     label05:
        return 0;

     label06:
        goto label04;

     label07:
        $r13 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        r19 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z1 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label11;

        $r15 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r15;

        $r14 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        r21 = $r14;

        if $r14 == null goto label09;

        $r17 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r8 = $r17;

        if $r17 == null goto label09;

        $r16 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r21);

        r9 = $r16;

        if $r16 == null goto label09;

        if r8 == r9 goto label10;

        $z2 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r9);

        if $z2 != 0 goto label10;

     label09:
        return 0;

     label10:
        goto label08;

     label11:
        return 1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectOutputStream r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        java.util.concurrent.ConcurrentHashMap$Segment[] r2, $r5;
        java.util.concurrent.ConcurrentHashMap$Traverser r3, $r10;
        java.util.concurrent.ConcurrentHashMap$Node r4, $r11;
        java.io.ObjectOutputStream$PutField $r6, $r7, $r8;
        java.util.concurrent.ConcurrentHashMap$Node[] $r9, r15;
        java.lang.Object $r12, $r13;
        java.util.concurrent.ConcurrentHashMap$Segment $r14;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        i0 = 0;

        i1 = 1;

     label1:
        if i1 >= 16 goto label2;

        i0 = i0 + 1;

        i1 = i1 << 1;

        goto label1;

     label2:
        i2 = 32 - i0;

        i3 = i1 - 1;

        $r5 = newarray (java.util.concurrent.ConcurrentHashMap$Segment)[16];

        r2 = (java.util.concurrent.ConcurrentHashMap$Segment[]) $r5;

        i4 = 0;

     label3:
        $i5 = lengthof r2;

        if i4 >= $i5 goto label4;

        $r14 = new java.util.concurrent.ConcurrentHashMap$Segment;

        specialinvoke $r14.<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float)>(0.75F);

        r2[i4] = $r14;

        i4 = i4 + 1;

        goto label3;

     label4:
        $r6 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        virtualinvoke $r6.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("segments", r2);

        $r7 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        virtualinvoke $r7.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("segmentShift", i2);

        $r8 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        virtualinvoke $r8.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("segmentMask", i3);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        $r9 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r15 = $r9;

        if $r9 == null goto label6;

        $r10 = new java.util.concurrent.ConcurrentHashMap$Traverser;

        $i7 = lengthof r15;

        $i6 = lengthof r15;

        specialinvoke $r10.<java.util.concurrent.ConcurrentHashMap$Traverser: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int)>(r15, $i7, 0, $i6);

        r3 = $r10;

     label5:
        $r11 = virtualinvoke r3.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node advance()>();

        r4 = $r11;

        if $r11 == null goto label6;

        $r13 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r13);

        $r12 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r12);

        goto label5;

     label6:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.io.ObjectInputStream r1;
        long l0, l2;
        java.util.concurrent.ConcurrentHashMap$Node r2, r5, r6, r8, $r16, $r23, r25;
        java.lang.Object r3, r4, r7, r11, $r17, $r19, $r20, $r21;
        int i1, i3, i4, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19;
        boolean z0, $z1;
        java.util.concurrent.ConcurrentHashMap$TreeBin r9, $r15;
        java.util.concurrent.ConcurrentHashMap$TreeNode r10, r12, r13, $r18, $r22;
        byte $b5, $b6;
        java.util.concurrent.ConcurrentHashMap$Node[] $r14, r24;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = -1;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        l0 = 0L;

        r2 = null;

     label01:
        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r3 == null goto label02;

        if r4 == null goto label02;

        $r23 = new java.util.concurrent.ConcurrentHashMap$Node;

        $i15 = virtualinvoke r3.<java.lang.Object: int hashCode()>();

        $i16 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int spread(int)>($i15);

        specialinvoke $r23.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>($i16, r3, r4, r2);

        r2 = $r23;

        l0 = l0 + 1L;

        goto label01;

     label02:
        $b6 = l0 cmp 0L;

        if $b6 != 0 goto label03;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = 0;

        goto label21;

     label03:
        $b5 = l0 cmp 536870912L;

        if $b5 < 0 goto label04;

        i17 = 1073741824;

        goto label05;

     label04:
        i18 = (int) l0;

        $i8 = i18 >>> 1;

        $i7 = i18 + $i8;

        $i9 = $i7 + 1;

        i17 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int tableSizeFor(int)>($i9);

     label05:
        $r14 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[i17];

        r24 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r14;

        i1 = i17 - 1;

        l2 = 0L;

     label06:
        if r2 == null goto label20;

        r5 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        i3 = r2.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i4 = i3 & i1;

        $r16 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r24, i4);

        r6 = $r16;

        if $r16 != null goto label07;

        z0 = 1;

        goto label18;

     label07:
        r7 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $i11 = r6.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i11 >= 0 goto label09;

        r9 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r6;

        $r20 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $r22 = virtualinvoke r9.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int,java.lang.Object,java.lang.Object)>(i3, r7, $r20);

        if $r22 != null goto label08;

        l2 = l2 + 1L;

     label08:
        z0 = 0;

        goto label18;

     label09:
        i19 = 0;

        z0 = 1;

        r8 = r6;

     label10:
        if r8 == null goto label13;

        $i14 = r8.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i14 != i3 goto label12;

        $r21 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r11 = $r21;

        if $r21 == r7 goto label11;

        if r11 == null goto label12;

        $z1 = virtualinvoke r7.<java.lang.Object: boolean equals(java.lang.Object)>(r11);

        if $z1 == 0 goto label12;

     label11:
        z0 = 0;

        goto label13;

     label12:
        i19 = i19 + 1;

        r8 = r8.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label10;

     label13:
        if z0 == 0 goto label18;

        if i19 < 8 goto label18;

        z0 = 0;

        l2 = l2 + 1L;

        r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = r6;

        r10 = null;

        r13 = null;

        r25 = r2;

     label14:
        if r25 == null goto label17;

        $r18 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        $i13 = r25.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        $r17 = r25.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r19 = r25.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke $r18.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>($i13, $r17, $r19, null, null);

        r12 = $r18;

        r12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r13;

        if r13 != null goto label15;

        r10 = r12;

        goto label16;

     label15:
        r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = r12;

     label16:
        r13 = r12;

        r25 = r25.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label14;

     label17:
        $r15 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        specialinvoke $r15.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r10);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r24, i4, $r15);

     label18:
        if z0 == 0 goto label19;

        l2 = l2 + 1L;

        r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = r6;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r24, i4, r2);

     label19:
        r2 = r5;

        goto label06;

     label20:
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = r24;

        $i10 = i17 >>> 2;

        $i12 = i17 - $i10;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = $i12;

        r0.<java.util.concurrent.ConcurrentHashMap: long baseCount> = l2;

     label21:
        return;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putVal(java.lang.Object,java.lang.Object,boolean)>(r1, r2, 1);

        return $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r3;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        if r2 == null goto label2;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, null, r2);

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, r3, $r5;
        java.lang.NullPointerException $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label2:
        $r5 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r3, r2);

        if $r5 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1, r2, $r4;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label2:
        $r4 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object replaceNode(java.lang.Object,java.lang.Object,java.lang.Object)>(r1, r2, null);

        return $r4;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Enumeration keys()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r2;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$KeyIterator $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r2;

        if $r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        i0 = $i1;

        $r3 = new java.util.concurrent.ConcurrentHashMap$KeyIterator;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$KeyIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r1, i0, 0, i0, r0);

        return $r3;
    }

    public java.util.Enumeration elements()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r2;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$ValueIterator $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r2;

        if $r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r1;

     label2:
        i0 = $i1;

        $r3 = new java.util.concurrent.ConcurrentHashMap$ValueIterator;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r1, i0, 0, i0, r0);

        return $r3;
    }

    public long mappingCount()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0, $l2;
        byte $b1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = l0;

     label2:
        return $l2;
    }

    public static java.util.concurrent.ConcurrentHashMap$KeySetView newKeySet()
    {
        java.util.concurrent.ConcurrentHashMap$KeySetView $r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Boolean $r2;

        $r0 = new java.util.concurrent.ConcurrentHashMap$KeySetView;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object)>($r1, $r2);

        return $r0;
    }

    public static java.util.concurrent.ConcurrentHashMap$KeySetView newKeySet(int)
    {
        int i0;
        java.util.concurrent.ConcurrentHashMap$KeySetView $r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        java.lang.Boolean $r2;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.ConcurrentHashMap$KeySetView;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(i0);

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r0.<java.util.concurrent.ConcurrentHashMap$KeySetView: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object)>($r1, $r2);

        return $r0;
    }

    public java.util.Set keySet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentHashMap$KeySetView $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new java.util.concurrent.ConcurrentHashMap$KeySetView;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap$KeySetView: void <init>(java.util.concurrent.ConcurrentHashMap,java.lang.Object)>(r0, r1);

        return $r2;
    }

    private final java.util.concurrent.ConcurrentHashMap$Node[] initTable()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, r2, $r4, $r6, $r7;
        int i0, i1, $i2, $i4, $i5, $i6, $i7;
        java.lang.Throwable r3, $r8;
        long $l3;
        sun.misc.Unsafe $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

     label01:
        $r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r4;

        if $r4 == null goto label02;

        $i7 = lengthof r1;

        if $i7 != 0 goto label12;

     label02:
        $i2 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i0 = $i2;

        if $i2 >= 0 goto label03;

        staticinvoke <java.lang.Thread: void yield()>();

        goto label01;

     label03:
        $r5 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l3 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z0 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l3, i0, -1);

        if $z0 == 0 goto label01;

     label04:
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r1 = $r6;

        if $r6 == null goto label05;

        $i6 = lengthof r1;

        if $i6 != 0 goto label08;

     label05:
        if i0 <= 0 goto label06;

        $i5 = i0;

        goto label07;

     label06:
        $i5 = 16;

     label07:
        i1 = $i5;

        $r7 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[i1];

        r2 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r7;

        r1 = r2;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = r2;

        $i4 = i1 >>> 2;

        i0 = i1 - $i4;

     label08:
        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i0;

        goto label11;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

     label10:
        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i0;

        throw r3;

     label11:
        goto label12;

     label12:
        return r1;

        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final void addCount(long, int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0, l2, l3, l4, $l10, $l11, $l12, $l13, $l16, $l20, $l22, $l23, $l24;
        int i1, i5, $i6, $i7, $i8, $i9, $i14, $i15, $i18, $i19, $i21, i25;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] r1, $r4;
        java.util.concurrent.ConcurrentHashMap$CounterHashCode r2, $r7;
        java.util.concurrent.ConcurrentHashMap$CounterCell r3, $r8;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r5;
        java.lang.ThreadLocal $r6;
        sun.misc.Unsafe $r9, $r11, $r13, $r14;
        byte $b17;
        java.util.concurrent.ConcurrentHashMap$Node[] $r10, $r12, r15, r16;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        r1 = $r4;

        if $r4 != null goto label01;

        $r14 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l24 = <java.util.concurrent.ConcurrentHashMap: long BASECOUNT>;

        $l22 = r0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        l2 = $l22;

        $l23 = l2 + l0;

        l3 = $l23;

        $z4 = virtualinvoke $r14.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l24, $l22, $l23);

        if $z4 != 0 goto label05;

     label01:
        z0 = 1;

        $r6 = <java.util.concurrent.ConcurrentHashMap: java.lang.ThreadLocal threadCounterHashCode>;

        $r5 = virtualinvoke $r6.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r7 = (java.util.concurrent.ConcurrentHashMap$CounterHashCode) $r5;

        r2 = $r7;

        if $r7 == null goto label02;

        if r1 == null goto label02;

        $i6 = lengthof r1;

        $i8 = $i6 - 1;

        i5 = $i8;

        if $i8 < 0 goto label02;

        $i7 = r2.<java.util.concurrent.ConcurrentHashMap$CounterHashCode: int code>;

        $i9 = i5 & $i7;

        $r8 = r1[$i9];

        r3 = $r8;

        if $r8 == null goto label02;

        $r9 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l12 = <java.util.concurrent.ConcurrentHashMap: long CELLVALUE>;

        $l11 = r3.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l4 = $l11;

        $l10 = l4 + l0;

        $z1 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r3, $l12, $l11, $l10);

        z0 = $z1;

        if $z1 != 0 goto label03;

     label02:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void fullAddCount(long,java.util.concurrent.ConcurrentHashMap$CounterHashCode,boolean)>(l0, r2, z0);

        return;

     label03:
        if i1 > 1 goto label04;

        return;

     label04:
        l3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

     label05:
        if i1 < 0 goto label10;

     label06:
        $i14 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i25 = $i14;

        $l13 = (long) $i14;

        $b17 = l3 cmp $l13;

        if $b17 < 0 goto label10;

        $r10 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r15 = $r10;

        if $r10 == null goto label10;

        $i15 = lengthof r15;

        if $i15 >= 1073741824 goto label10;

        if i25 >= 0 goto label08;

        if i25 == -1 goto label10;

        $i21 = r0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        $i18 = r0.<java.util.concurrent.ConcurrentHashMap: int transferOrigin>;

        if $i21 <= $i18 goto label10;

        $r12 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        r16 = $r12;

        if $r12 != null goto label07;

        goto label10;

     label07:
        $r13 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l20 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i19 = i25 - 1;

        $z3 = virtualinvoke $r13.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l20, i25, $i19);

        if $z3 == 0 goto label09;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(r15, r16);

        goto label09;

     label08:
        $r11 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l16 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z2 = virtualinvoke $r11.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l16, i25, -2);

        if $z2 == 0 goto label09;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(r15, null);

     label09:
        l3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap: long sumCount()>();

        goto label06;

     label10:
        return;
    }

    final java.util.concurrent.ConcurrentHashMap$Node[] helpTransfer(java.util.concurrent.ConcurrentHashMap$Node[], java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, r3, $r4, $r6, $r7, $r8;
        java.util.concurrent.ConcurrentHashMap$Node r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap$ForwardingNode $r5;
        long $l5;
        sun.misc.Unsafe $r9;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        r2 := @parameter1: java.util.concurrent.ConcurrentHashMap$Node;

        $z0 = r2 instanceof java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        if $z0 == 0 goto label2;

        $r5 = (java.util.concurrent.ConcurrentHashMap$ForwardingNode) r2;

        $r6 = $r5.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        r3 = $r6;

        if $r6 == null goto label2;

        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        if r3 != $r7 goto label1;

        $r8 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        if r1 != $r8 goto label1;

        $i2 = r0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        $i1 = r0.<java.util.concurrent.ConcurrentHashMap: int transferOrigin>;

        if $i2 <= $i1 goto label1;

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i0 = $i3;

        if $i3 >= -1 goto label1;

        $r9 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l5 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i4 = i0 - 1;

        $z1 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l5, i0, $i4);

        if $z1 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(r1, r3);

     label1:
        return r3;

     label2:
        $r4 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        return $r4;
    }

    private final void tryPresize(int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, i14;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, r2, $r5, $r6, $r7;
        java.lang.Throwable r3, $r9;
        long $l9, $l13;
        sun.misc.Unsafe $r4, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        i0 := @parameter0: int;

        if i0 < 536870912 goto label01;

        $i7 = 1073741824;

        goto label02;

     label01:
        $i4 = i0 >>> 1;

        $i5 = i0 + $i4;

        $i6 = $i5 + 1;

        $i7 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int tableSizeFor(int)>($i6);

     label02:
        i1 = $i7;

     label03:
        $i8 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i2 = $i8;

        if $i8 < 0 goto label15;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        if r1 == null goto label04;

        $i12 = lengthof r1;

        i3 = $i12;

        if $i12 != 0 goto label12;

     label04:
        if i2 <= i1 goto label05;

        $i10 = i2;

        goto label06;

     label05:
        $i10 = i1;

     label06:
        i14 = $i10;

        $r4 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l9 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l9, i2, -1);

        if $z0 == 0 goto label14;

     label07:
        $r6 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        if $r6 != r1 goto label08;

        $r5 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[i14];

        r2 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r5;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = r2;

        $i11 = i14 >>> 2;

        i2 = i14 - $i11;

     label08:
        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i2;

        goto label11;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

     label10:
        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = i2;

        throw r3;

     label11:
        goto label14;

     label12:
        if i1 <= i2 goto label15;

        if i3 < 1073741824 goto label13;

        goto label15;

     label13:
        $r7 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        if r1 != $r7 goto label14;

        $r8 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l13 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z1 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l13, i2, -2);

        if $z1 == 0 goto label14;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(r1, null);

     label14:
        goto label03;

     label15:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private final void transfer(java.util.concurrent.ConcurrentHashMap$Node[], java.util.concurrent.ConcurrentHashMap$Node[])
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, r2, r3, $r28;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i32, $i33, $i34, $i35, $i36, $i37, i38, i39, i40, i41, i42, i43;
        java.util.concurrent.ConcurrentHashMap$Node r4, r5, r6, r7, r8, r11, $r16, $r18, $r19, $r20, r35, r36, r44, r45;
        java.lang.Object r9, r10, $r21, $r22;
        java.lang.Throwable r12, $r30, $r31;
        java.util.concurrent.ConcurrentHashMap$TreeNode r13, r38, r39, r40, r41, r46;
        long $l15, $l28, $l31;
        sun.misc.Unsafe $r15, $r26, $r27;
        boolean $z0, $z1, $z2, $z3, z4;
        java.util.concurrent.ConcurrentHashMap$ForwardingNode r33, r34, r42, r43;
        java.util.concurrent.ConcurrentHashMap$TreeBin r37, r47, r48;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        r2 := @parameter1: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 = lengthof r1;

        $i14 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        if $i14 <= 1 goto label01;

        $i36 = i0 >>> 3;

        $i35 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        $i37 = $i36 / $i35;

        goto label02;

     label01:
        $i37 = i0;

     label02:
        i1 = $i37;

        if $i37 >= 16 goto label03;

        i1 = 16;

     label03:
        if r2 != null goto label15;

     label04:
        $i34 = i0 << 1;

        $r28 = newarray (java.util.concurrent.ConcurrentHashMap$Node)[$i34];

        r3 = (java.util.concurrent.ConcurrentHashMap$Node[]) $r28;

        r2 = r3;

     label05:
        goto label07;

     label06:
        $r31 := @caughtexception;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = 2147483647;

        return;

     label07:
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable> = r2;

        r0.<java.util.concurrent.ConcurrentHashMap: int transferOrigin> = i0;

        r0.<java.util.concurrent.ConcurrentHashMap: int transferIndex> = i0;

        r42 = new java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        specialinvoke r42.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: void <init>(java.util.concurrent.ConcurrentHashMap$Node[])>(r1);

        r33 = r42;

        i2 = i0;

     label08:
        if i2 <= 0 goto label15;

        if i2 <= i1 goto label09;

        $i32 = i2 - i1;

        goto label10;

     label09:
        $i32 = 0;

     label10:
        i3 = $i32;

        i4 = i3;

     label11:
        if i4 >= i2 goto label12;

        r2[i4] = r33;

        i4 = i4 + 1;

        goto label11;

     label12:
        i38 = i0 + i3;

     label13:
        $i30 = i0 + i2;

        if i38 >= $i30 goto label14;

        r2[i38] = r33;

        i38 = i38 + 1;

        goto label13;

     label14:
        $r27 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l31 = <java.util.concurrent.ConcurrentHashMap: long TRANSFERORIGIN>;

        i2 = i3;

        virtualinvoke $r27.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l31, i3);

        goto label08;

     label15:
        i39 = lengthof r2;

        r43 = new java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        specialinvoke r43.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: void <init>(java.util.concurrent.ConcurrentHashMap$Node[])>(r2);

        r34 = r43;

        z4 = 1;

        i40 = 0;

        i5 = 0;

     label16:
        if z4 == 0 goto label21;

        i40 = i40 + -1;

        if i40 < i5 goto label17;

        z4 = 0;

        goto label16;

     label17:
        $i25 = r0.<java.util.concurrent.ConcurrentHashMap: int transferIndex>;

        i6 = $i25;

        $i29 = r0.<java.util.concurrent.ConcurrentHashMap: int transferOrigin>;

        if $i25 > $i29 goto label18;

        i40 = -1;

        z4 = 0;

        goto label16;

     label18:
        $r26 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l28 = <java.util.concurrent.ConcurrentHashMap: long TRANSFERINDEX>;

        if i6 <= i1 goto label19;

        $i33 = i6 - i1;

        goto label20;

     label19:
        $i33 = 0;

     label20:
        i7 = $i33;

        $z3 = virtualinvoke $r26.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l28, i6, $i33);

        if $z3 == 0 goto label16;

        i5 = i7;

        i40 = i6 - 1;

        z4 = 0;

        goto label16;

     label21:
        if i40 < 0 goto label22;

        if i40 >= i0 goto label22;

        $i21 = i40 + i0;

        if $i21 < i39 goto label24;

     label22:
        $r15 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l15 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $i16 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i9 = $i16;

        i41 = i9 + 1;

        $z0 = virtualinvoke $r15.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l15, $i16, i41);

        if $z0 == 0 goto label22;

        if i41 != -1 goto label23;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] nextTable> = null;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table> = r2;

        $i18 = i0 << 1;

        $i17 = i0 >>> 1;

        $i20 = $i18 - $i17;

        r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl> = $i20;

     label23:
        return;

     label24:
        $r16 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i40);

        r4 = $r16;

        if $r16 != null goto label25;

        $z2 = staticinvoke <java.util.concurrent.ConcurrentHashMap: boolean casTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$Node)>(r1, i40, null, r34);

        if $z2 == 0 goto label58;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r2, i40, null);

        $i26 = i40 + i0;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r2, $i26, null);

        z4 = 1;

        goto label58;

     label25:
        $i19 = r4.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i8 = $i19;

        if $i19 != -1879048193 goto label26;

        z4 = 1;

        goto label58;

     label26:
        r35 = r4;

        entermonitor r4;

     label27:
        $r18 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i40);

        if $r18 != r4 goto label54;

        if i8 < 0 goto label37;

        i10 = i8 & i0;

        r8 = r4;

        r7 = r4.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

     label28:
        if r7 == null goto label30;

        $i27 = r7.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        i11 = $i27 & i0;

        if i11 == i10 goto label29;

        i10 = i11;

        r8 = r7;

     label29:
        r7 = r7.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label28;

     label30:
        if i10 != 0 goto label31;

        r5 = r8;

        r6 = null;

        goto label32;

     label31:
        r6 = r8;

        r5 = null;

     label32:
        r36 = r4;

     label33:
        if r36 == r8 goto label36;

        i42 = r36.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        r9 = r36.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r10 = r36.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $i23 = i42 & i0;

        if $i23 != 0 goto label34;

        r44 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke r44.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(i42, r9, r10, r5);

        r5 = r44;

        goto label35;

     label34:
        r45 = new java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke r45.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(i42, r9, r10, r6);

        r6 = r45;

     label35:
        r36 = r36.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label33;

     label36:
        goto label53;

     label37:
        $z1 = r4 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        if $z1 == 0 goto label52;

        r37 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r4;

        r38 = null;

        r39 = null;

        r40 = null;

        r41 = null;

        i43 = 0;

        i12 = 0;

        r11 = r37.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

     label38:
        if r11 == null goto label45;

        i13 = r11.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        r46 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        $r21 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r22 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke r46.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>(i13, $r21, $r22, null, null);

        r13 = r46;

        $i24 = i13 & i0;

        if $i24 != 0 goto label41;

        r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r39;

        if r39 != null goto label39;

        r38 = r13;

        goto label40;

     label39:
        r39.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = r13;

     label40:
        r39 = r13;

        i43 = i43 + 1;

        goto label44;

     label41:
        r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r41;

        if r41 != null goto label42;

        r40 = r13;

        goto label43;

     label42:
        r41.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = r13;

     label43:
        r41 = r13;

        i12 = i12 + 1;

     label44:
        r11 = r11.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label38;

     label45:
        if i43 > 6 goto label46;

        $r19 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>(r38);

        goto label48;

     label46:
        if i12 == 0 goto label47;

        r47 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        $r19 = r47;

        specialinvoke r47.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r38);

        goto label48;

     label47:
        $r19 = r37;

     label48:
        r5 = $r19;

        if i12 > 6 goto label49;

        $r20 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)>(r40);

        goto label51;

     label49:
        if i43 == 0 goto label50;

        r48 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        $r20 = r48;

        specialinvoke r48.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r40);

        goto label51;

     label50:
        $r20 = r37;

     label51:
        r6 = $r20;

        goto label53;

     label52:
        r6 = null;

        r5 = null;

     label53:
        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r2, i40, r5);

        $i22 = i40 + i0;

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r2, $i22, r6);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r1, i40, r34);

        z4 = 1;

     label54:
        exitmonitor r35;

     label55:
        goto label58;

     label56:
        $r30 := @caughtexception;

        r12 = $r30;

        exitmonitor r35;

     label57:
        throw r12;

     label58:
        goto label16;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label27 to label55 with label56;
        catch java.lang.Throwable from label56 to label57 with label56;
    }

    private final void treeifyBin(java.util.concurrent.ConcurrentHashMap$Node[], int)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1, $r16;
        int i0, i2, $i3, $i4, $i5;
        java.util.concurrent.ConcurrentHashMap$Node r2, r3, r6, $r9, $r11;
        java.util.concurrent.ConcurrentHashMap$TreeNode r4, r5, r7, $r14;
        java.lang.Throwable r8, $r18;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r12;
        java.lang.Object $r13, $r15;
        sun.misc.Unsafe $r17;
        long $l6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        if r1 == null goto label11;

        $i3 = lengthof r1;

        if $i3 >= 64 goto label01;

        $r16 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        if r1 != $r16 goto label11;

        $i5 = r0.<java.util.concurrent.ConcurrentHashMap: int sizeCtl>;

        i2 = $i5;

        if $i5 < 0 goto label11;

        $r17 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ConcurrentHashMap: long SIZECTL>;

        $z0 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l6, i2, -2);

        if $z0 == 0 goto label11;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap: void transfer(java.util.concurrent.ConcurrentHashMap$Node[],java.util.concurrent.ConcurrentHashMap$Node[])>(r1, null);

        goto label11;

     label01:
        $r9 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i0);

        r2 = $r9;

        if $r9 == null goto label11;

        r3 = r2;

        entermonitor r2;

     label02:
        $r11 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r1, i0);

        if $r11 != r2 goto label07;

        r4 = null;

        r5 = null;

        r6 = r2;

     label03:
        if r6 == null goto label06;

        $r14 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        $i4 = r6.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        $r15 = r6.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r13 = r6.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke $r14.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>($i4, $r15, $r13, null, null);

        r7 = $r14;

        r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r5;

        if r5 != null goto label04;

        r4 = r7;

        goto label05;

     label04:
        r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = r7;

     label05:
        r5 = r7;

        r6 = r6.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label03;

     label06:
        $r12 = new java.util.concurrent.ConcurrentHashMap$TreeBin;

        specialinvoke $r12.<java.util.concurrent.ConcurrentHashMap$TreeBin: void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r4);

        staticinvoke <java.util.concurrent.ConcurrentHashMap: void setTabAt(java.util.concurrent.ConcurrentHashMap$Node[],int,java.util.concurrent.ConcurrentHashMap$Node)>(r1, i0, $r12);

     label07:
        exitmonitor r3;

     label08:
        goto label11;

     label09:
        $r18 := @caughtexception;

        r8 = $r18;

        exitmonitor r3;

     label10:
        throw r8;

     label11:
        return;

        catch java.lang.Throwable from label02 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    static java.util.concurrent.ConcurrentHashMap$Node untreeify(java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node r0, r1, r2, r3, r4, $r5;
        java.lang.Object $r6, $r7;
        int $i0;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node;

        r1 = null;

        r2 = null;

        r3 = r0;

     label1:
        if r3 == null goto label4;

        $r5 = new java.util.concurrent.ConcurrentHashMap$Node;

        $i0 = r3.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        $r7 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r6 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        specialinvoke $r5.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>($i0, $r7, $r6, null);

        r4 = $r5;

        if r2 != null goto label2;

        r1 = r4;

        goto label3;

     label2:
        r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = r4;

     label3:
        r2 = r4;

        r3 = r3.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label1;

     label4:
        return r1;
    }

    final long sumCount()
    {
        java.util.concurrent.ConcurrentHashMap r0;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] r1;
        java.util.concurrent.ConcurrentHashMap$CounterCell r2, $r3;
        long l0, $l3;
        int i1, $i2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        l0 = r0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        if r1 == null goto label3;

        i1 = 0;

     label1:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $r3 = r1[i1];

        r2 = $r3;

        if $r3 == null goto label2;

        $l3 = r2.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l0 = l0 + $l3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return l0;
    }

    private final void fullAddCount(long, java.util.concurrent.ConcurrentHashMap$CounterHashCode, boolean)
    {
        java.util.concurrent.ConcurrentHashMap r0;
        long l0, l4, $l8, $l9, $l10, $l11, $l15, $l16, $l18, $l23, $l27, l36;
        java.util.concurrent.ConcurrentHashMap$CounterHashCode r1, $r27;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        int i1, i2, i3, i5, i6, $i7, $i12, $i13, $i14, $i17, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i28, $i29, $i30, $i31, $i32, i33, i34, i35;
        java.util.concurrent.ConcurrentHashMap$CounterCell[] r2, r5, $r9, $r11, $r13, $r16, $r20, $r23, r31, r32;
        java.util.concurrent.ConcurrentHashMap$CounterCell r3, r4, $r14, $r15, $r19, $r22, $r26;
        java.lang.Throwable r6, r7, r8, $r25, $r29, $r30;
        sun.misc.Unsafe $r10, $r12, $r17, $r18, $r21;
        java.lang.ThreadLocal $r24;
        java.util.concurrent.atomic.AtomicInteger $r28;

        r0 := @this: java.util.concurrent.ConcurrentHashMap;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.ConcurrentHashMap$CounterHashCode;

        z0 := @parameter2: boolean;

        if r1 != null goto label03;

        $r27 = new java.util.concurrent.ConcurrentHashMap$CounterHashCode;

        specialinvoke $r27.<java.util.concurrent.ConcurrentHashMap$CounterHashCode: void <init>()>();

        r1 = $r27;

        $r28 = <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.atomic.AtomicInteger counterHashCodeGenerator>;

        i2 = virtualinvoke $r28.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(1640531527);

        if i2 != 0 goto label01;

        $i31 = 1;

        goto label02;

     label01:
        $i31 = i2;

     label02:
        r1.<java.util.concurrent.ConcurrentHashMap$CounterHashCode: int code> = $i31;

        i1 = $i31;

        $r24 = <java.util.concurrent.ConcurrentHashMap: java.lang.ThreadLocal threadCounterHashCode>;

        virtualinvoke $r24.<java.lang.ThreadLocal: void set(java.lang.Object)>(r1);

        goto label04;

     label03:
        i1 = r1.<java.util.concurrent.ConcurrentHashMap$CounterHashCode: int code>;

     label04:
        z7 = 0;

     label05:
        $r9 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        r2 = $r9;

        if $r9 == null goto label26;

        $i12 = lengthof r2;

        i3 = $i12;

        if $i12 <= 0 goto label26;

        $i13 = i3 - 1;

        $i17 = $i13 & i1;

        $r15 = r2[$i17];

        r3 = $r15;

        if $r15 != null goto label12;

        $i25 = r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        if $i25 != 0 goto label11;

        $r22 = new java.util.concurrent.ConcurrentHashMap$CounterCell;

        specialinvoke $r22.<java.util.concurrent.ConcurrentHashMap$CounterCell: void <init>(long)>(l0);

        r4 = $r22;

        $i28 = r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        if $i28 != 0 goto label11;

        $r21 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l27 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z6 = virtualinvoke $r21.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l27, 0, 1);

        if $z6 == 0 goto label11;

        z1 = 0;

     label06:
        $r23 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        r5 = $r23;

        if $r23 == null goto label07;

        $i30 = lengthof r5;

        i5 = $i30;

        if $i30 <= 0 goto label07;

        $i29 = i5 - 1;

        $i32 = $i29 & i1;

        i6 = $i32;

        $r26 = r5[$i32];

        if $r26 != null goto label07;

        r5[i6] = r4;

        z1 = 1;

     label07:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label10;

     label08:
        $r30 := @caughtexception;

        r6 = $r30;

     label09:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw r6;

     label10:
        if z1 == 0 goto label05;

        goto label35;

     label11:
        z7 = 0;

        goto label25;

     label12:
        if z0 != 0 goto label13;

        z0 = 1;

        goto label25;

     label13:
        $r17 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l18 = <java.util.concurrent.ConcurrentHashMap: long CELLVALUE>;

        $l15 = r3.<java.util.concurrent.ConcurrentHashMap$CounterCell: long value>;

        l4 = $l15;

        $l16 = l4 + l0;

        $z4 = virtualinvoke $r17.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r3, $l18, $l15, $l16);

        if $z4 == 0 goto label14;

        goto label35;

     label14:
        $r16 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        if $r16 != r2 goto label15;

        $i20 = <java.util.concurrent.ConcurrentHashMap: int NCPU>;

        if i3 < $i20 goto label16;

     label15:
        z7 = 0;

        goto label25;

     label16:
        if z7 != 0 goto label17;

        z7 = 1;

        goto label25;

     label17:
        $i24 = r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        if $i24 != 0 goto label25;

        $r18 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l23 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z5 = virtualinvoke $r18.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l23, 0, 1);

        if $z5 == 0 goto label25;

     label18:
        $r20 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        if $r20 != r2 goto label21;

        $i26 = i3 << 1;

        r31 = newarray (java.util.concurrent.ConcurrentHashMap$CounterCell)[$i26];

        i33 = 0;

     label19:
        if i33 >= i3 goto label20;

        $r19 = r2[i33];

        r31[i33] = $r19;

        i33 = i33 + 1;

        goto label19;

     label20:
        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells> = r31;

     label21:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label24;

     label22:
        $r25 := @caughtexception;

        r8 = $r25;

     label23:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw r8;

     label24:
        z7 = 0;

        goto label05;

     label25:
        $i21 = i1 << 13;

        i34 = i1 ^ $i21;

        $i22 = i34 >>> 17;

        i35 = i34 ^ $i22;

        $i19 = i35 << 5;

        i1 = i35 ^ $i19;

        goto label34;

     label26:
        $i7 = r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy>;

        if $i7 != 0 goto label33;

        $r11 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        if $r11 != r2 goto label33;

        $r12 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l11 = <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY>;

        $z3 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l11, 0, 1);

        if $z3 == 0 goto label33;

        z8 = 0;

     label27:
        $r13 = r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells>;

        if $r13 != r2 goto label28;

        r32 = newarray (java.util.concurrent.ConcurrentHashMap$CounterCell)[2];

        $i14 = i1 & 1;

        $r14 = new java.util.concurrent.ConcurrentHashMap$CounterCell;

        specialinvoke $r14.<java.util.concurrent.ConcurrentHashMap$CounterCell: void <init>(long)>(l0);

        r32[$i14] = $r14;

        r0.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$CounterCell[] counterCells> = r32;

        z8 = 1;

     label28:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        goto label31;

     label29:
        $r29 := @caughtexception;

        r7 = $r29;

     label30:
        r0.<java.util.concurrent.ConcurrentHashMap: int cellsBusy> = 0;

        throw r7;

     label31:
        if z8 == 0 goto label32;

        goto label35;

     label32:
        goto label34;

     label33:
        $r10 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $l10 = <java.util.concurrent.ConcurrentHashMap: long BASECOUNT>;

        $l9 = r0.<java.util.concurrent.ConcurrentHashMap: long baseCount>;

        l36 = $l9;

        $l8 = l36 + l0;

        $z2 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l10, $l9, $l8);

        if $z2 == 0 goto label34;

        goto label35;

     label34:
        goto label05;

     label35:
        r1.<java.util.concurrent.ConcurrentHashMap$CounterHashCode: int code> = i1;

        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label18 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    static void <clinit>()
    {
        java.lang.Class r0, r1, r2, $r7, $r9;
        int i0, $i1, $i9, $i10, $i11, $i12, $i13;
        java.lang.Runtime $r3;
        java.io.ObjectStreamField[] $r4;
        java.io.ObjectStreamField $r5, $r6, $r8;
        java.util.concurrent.atomic.AtomicInteger $r10;
        sun.misc.Unsafe $r11, $r14, $r15, $r18, $r19, $r22, $r24, $r25, $r26;
        java.lang.ThreadLocal $r12;
        java.lang.reflect.Field $r13, $r16, $r17, $r20, $r21, $r23;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l8;
        java.lang.Error $r27, $r29;
        java.lang.Exception $r28, r30;

        <java.util.concurrent.ConcurrentHashMap: int SEED_INCREMENT> = 1640531527;

        <java.util.concurrent.ConcurrentHashMap: int HASH_BITS> = 2147483647;

        <java.util.concurrent.ConcurrentHashMap: int RESERVED> = -2147483647;

        <java.util.concurrent.ConcurrentHashMap: int TREEBIN> = -2147483648;

        <java.util.concurrent.ConcurrentHashMap: int MOVED> = -1879048193;

        <java.util.concurrent.ConcurrentHashMap: int MIN_TRANSFER_STRIDE> = 16;

        <java.util.concurrent.ConcurrentHashMap: int MIN_TREEIFY_CAPACITY> = 64;

        <java.util.concurrent.ConcurrentHashMap: int UNTREEIFY_THRESHOLD> = 6;

        <java.util.concurrent.ConcurrentHashMap: int TREEIFY_THRESHOLD> = 8;

        <java.util.concurrent.ConcurrentHashMap: float LOAD_FACTOR> = 0.75F;

        <java.util.concurrent.ConcurrentHashMap: int DEFAULT_CONCURRENCY_LEVEL> = 16;

        <java.util.concurrent.ConcurrentHashMap: int MAX_ARRAY_SIZE> = 2147483639;

        <java.util.concurrent.ConcurrentHashMap: int DEFAULT_CAPACITY> = 16;

        <java.util.concurrent.ConcurrentHashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <java.util.concurrent.ConcurrentHashMap: long serialVersionUID> = 7249069246763182397L;

        $r3 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i1 = virtualinvoke $r3.<java.lang.Runtime: int availableProcessors()>();

        <java.util.concurrent.ConcurrentHashMap: int NCPU> = $i1;

        $r4 = newarray (java.io.ObjectStreamField)[3];

        $r5 = new java.io.ObjectStreamField;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segments", class "[Ljava/util/concurrent/ConcurrentHashMap$Segment;");

        $r4[0] = $r5;

        $r6 = new java.io.ObjectStreamField;

        $r7 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r6.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentMask", $r7);

        $r4[1] = $r6;

        $r8 = new java.io.ObjectStreamField;

        $r9 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r8.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("segmentShift", $r9);

        $r4[2] = $r8;

        <java.util.concurrent.ConcurrentHashMap: java.io.ObjectStreamField[] serialPersistentFields> = $r4;

        $r10 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r10.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.atomic.AtomicInteger counterHashCodeGenerator> = $r10;

        $r12 = new java.lang.ThreadLocal;

        specialinvoke $r12.<java.lang.ThreadLocal: void <init>()>();

        <java.util.concurrent.ConcurrentHashMap: java.lang.ThreadLocal threadCounterHashCode> = $r12;

     label1:
        $r11 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U> = $r11;

        r0 = class "java/util/concurrent/ConcurrentHashMap";

        $r14 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("sizeCtl");

        $l2 = virtualinvoke $r14.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r13);

        <java.util.concurrent.ConcurrentHashMap: long SIZECTL> = $l2;

        $r15 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r16 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("transferIndex");

        $l3 = virtualinvoke $r15.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r16);

        <java.util.concurrent.ConcurrentHashMap: long TRANSFERINDEX> = $l3;

        $r18 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r17 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("transferOrigin");

        $l4 = virtualinvoke $r18.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r17);

        <java.util.concurrent.ConcurrentHashMap: long TRANSFERORIGIN> = $l4;

        $r19 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r20 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("baseCount");

        $l5 = virtualinvoke $r19.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r20);

        <java.util.concurrent.ConcurrentHashMap: long BASECOUNT> = $l5;

        $r22 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("cellsBusy");

        $l7 = virtualinvoke $r22.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r21);

        <java.util.concurrent.ConcurrentHashMap: long CELLSBUSY> = $l7;

        r1 = class "java/util/concurrent/ConcurrentHashMap$CounterCell";

        $r24 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $r23 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l6 = virtualinvoke $r24.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r23);

        <java.util.concurrent.ConcurrentHashMap: long CELLVALUE> = $l6;

        r2 = class "[Ljava/util/concurrent/ConcurrentHashMap$Node;";

        $r26 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        $i9 = virtualinvoke $r26.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r2);

        $l8 = (long) $i9;

        <java.util.concurrent.ConcurrentHashMap: long ABASE> = $l8;

        $r25 = <java.util.concurrent.ConcurrentHashMap: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r25.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r2);

        $i11 = i0 - 1;

        $i10 = i0 & $i11;

        if $i10 == 0 goto label2;

        $r27 = new java.lang.Error;

        specialinvoke $r27.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r27;

     label2:
        $i12 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i13 = 31 - $i12;

        <java.util.concurrent.ConcurrentHashMap: int ASHIFT> = $i13;

     label3:
        goto label5;

     label4:
        $r28 := @caughtexception;

        r30 = $r28;

        $r29 = new java.lang.Error;

        specialinvoke $r29.<java.lang.Error: void <init>(java.lang.Throwable)>(r30);

        throw $r29;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
