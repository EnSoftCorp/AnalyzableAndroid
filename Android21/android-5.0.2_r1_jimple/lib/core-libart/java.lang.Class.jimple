public final class java.lang.Class extends java.lang.Object implements java.io.Serializable, java.lang.reflect.AnnotatedElement, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type
{
    private static final long serialVersionUID;
    private transient java.lang.ClassLoader classLoader;
    private transient java.lang.Class componentType;
    private transient java.lang.DexCache dexCache;
    private transient java.lang.reflect.ArtMethod[] directMethods;
    private transient java.lang.reflect.ArtField[] iFields;
    private transient java.lang.Object[] ifTable;
    private transient java.lang.reflect.ArtMethod[] imTable;
    private transient java.lang.String name;
    private transient java.lang.reflect.ArtField[] sFields;
    private transient java.lang.Class superClass;
    private transient java.lang.Class verifyErrorClass;
    private transient java.lang.reflect.ArtMethod[] virtualMethods;
    private transient java.lang.reflect.ArtMethod[] vtable;
    private transient int accessFlags;
    private transient int classSize;
    private transient int clinitThreadId;
    private transient int dexClassDefIndex;
    private transient volatile int dexTypeIndex;
    private transient int numReferenceInstanceFields;
    private transient int numReferenceStaticFields;
    private transient int objectSize;
    private transient int primitiveType;
    private transient int referenceInstanceOffsets;
    private transient int referenceStaticOffsets;
    private transient int status;

    private void <init>()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r1);

        return $r2;
    }

    public static java.lang.Class forName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean z0, $z1;
        java.lang.ClassLoader r1;
        java.lang.Class r2;
        java.lang.ClassNotFoundException r3, $r5;
        java.lang.Throwable r4;
        java.lang.LinkageError $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.ClassLoader;

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class classForName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, z0, r1);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        r4 = virtualinvoke r3.<java.lang.ClassNotFoundException: java.lang.Throwable getCause()>();

        $z1 = r4 instanceof java.lang.LinkageError;

        if $z1 == 0 goto label4;

        $r6 = (java.lang.LinkageError) r4;

        throw $r6;

     label4:
        throw r3;

     label5:
        return r2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static native java.lang.Class classForName(java.lang.String, boolean, java.lang.ClassLoader) throws java.lang.ClassNotFoundException;

    public java.lang.Class[] getClasses()
    {
        java.lang.Class r0, r2, r4;
        java.util.ArrayList r1, $r5;
        java.lang.Class[] r3, $r6, $r8;
        int i0, i1, $i2, $i3;
        java.lang.Object[] $r7;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        r2 = r0;

     label1:
        if r2 == null goto label5;

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>();

        i0 = lengthof r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $i3 = virtualinvoke r4.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z0 == 0 goto label3;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r2 = r2.<java.lang.Class: java.lang.Class superClass>;

        goto label1;

     label5:
        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (java.lang.Class)[$i2];

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (java.lang.Class[]) $r7;

        return $r8;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.annotation.Annotation $r2;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.annotation.Annotation getAnnotation(java.lang.Class,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public java.lang.annotation.Annotation[] getAnnotations()
    {
        java.lang.Class r0;
        java.lang.annotation.Annotation[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.annotation.Annotation[] getAnnotations(java.lang.Class)>(r0);

        return $r1;
    }

    public java.lang.String getCanonicalName()
    {
        java.lang.Class r0, $r3, $r10;
        java.lang.String r1, $r2, $r7, $r9, $r14, r15;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r11, $r12, $r13;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isLocalClass()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 == 0 goto label2;

     label1:
        return null;

     label2:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label4;

        $r10 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        r1 = virtualinvoke $r10.<java.lang.Class: java.lang.String getCanonicalName()>();

        if r1 == null goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label3:
        goto label7;

     label4:
        $z3 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z3 == 0 goto label6;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        r15 = virtualinvoke $r3.<java.lang.Class: java.lang.String getCanonicalName()>();

        if r15 == null goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label5:
        goto label7;

     label6:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r2;

     label7:
        return null;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoaderImpl()>();

        if r1 != null goto label2;

        r1 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

     label2:
        return r1;
    }

    java.lang.ClassLoader getClassLoaderImpl()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1, $r2;

        r0 := @this: java.lang.Class;

        r1 = r0.<java.lang.Class: java.lang.ClassLoader classLoader>;

        if r1 != null goto label1;

        $r2 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public java.lang.Class getComponentType()
    {
        java.lang.Class r0, $r1;

        r0 := @this: java.lang.Class;

        $r1 = r0.<java.lang.Class: java.lang.Class componentType>;

        return $r1;
    }

    public com.android.dex.Dex getDex()
    {
        java.lang.Class r0;
        java.lang.DexCache $r1, $r2;
        com.android.dex.Dex $r3;

        r0 := @this: java.lang.Class;

        $r1 = r0.<java.lang.Class: java.lang.DexCache dexCache>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<java.lang.Class: java.lang.DexCache dexCache>;

        $r3 = virtualinvoke $r2.<java.lang.DexCache: com.android.dex.Dex getDex()>();

        return $r3;
    }

    public java.lang.String getDexCacheString(com.android.dex.Dex, int)
    {
        java.lang.Class r0;
        com.android.dex.Dex r1;
        int i0;
        java.lang.String[] r2;
        java.lang.String r3, $r7;
        java.lang.DexCache $r4;
        java.util.List $r5;
        java.lang.Object $r6;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r4 = r0.<java.lang.Class: java.lang.DexCache dexCache>;

        r2 = $r4.<java.lang.DexCache: java.lang.String[] strings>;

        r3 = r2[i0];

        if r3 != null goto label1;

        $r5 = virtualinvoke r1.<com.android.dex.Dex: java.util.List strings()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0);

        $r7 = (java.lang.String) $r6;

        r3 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>();

        r2[i0] = r3;

     label1:
        return r3;
    }

    public java.lang.Class getDexCacheType(com.android.dex.Dex, int)
    {
        java.lang.Class r0, r3;
        com.android.dex.Dex r1;
        int i0, i1;
        java.lang.Class[] r2;
        java.lang.String r4;
        java.lang.DexCache $r5;
        java.util.List $r6;
        java.lang.Object $r7;
        java.lang.Integer $r8;
        java.lang.ClassLoader $r9;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r5 = r0.<java.lang.Class: java.lang.DexCache dexCache>;

        r2 = $r5.<java.lang.DexCache: java.lang.Class[] resolvedTypes>;

        r3 = r2[i0];

        if r3 != null goto label1;

        $r6 = virtualinvoke r1.<com.android.dex.Dex: java.util.List typeIds()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i0);

        $r8 = (java.lang.Integer) $r7;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getDexCacheString(com.android.dex.Dex,int)>(r1, i1);

        $r9 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r3 = staticinvoke <libcore.reflect.InternalNames: java.lang.Class getClass(java.lang.ClassLoader,java.lang.String)>($r9, r4);

        r2[i0] = r3;

     label1:
        return r3;
    }

    public transient java.lang.reflect.Constructor getConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r2;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[],boolean)>(r1, 1);

        return $r2;
    }

    public transient java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.Constructor $r2;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[],boolean)>(r1, 0);

        return $r2;
    }

    private java.lang.reflect.Constructor getConstructor(java.lang.Class[], boolean) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0, r3;
        java.lang.Class[] r1, r2;
        boolean z0, $z1;
        int i0, i1, $i2;
        java.lang.NoSuchMethodException $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;
        java.lang.reflect.Constructor r11;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        z0 := @parameter1: boolean;

        if r1 != null goto label1;

        r1 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

     label1:
        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        if r3 != null goto label3;

        $r10 = new java.lang.NoSuchMethodException;

        specialinvoke $r10.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("parameter type is null");

        throw $r10;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r11 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructorInternal(java.lang.Class[])>(r1);

        if r11 == null goto label5;

        if z0 == 0 goto label6;

        $i2 = virtualinvoke r11.<java.lang.reflect.Constructor: int getAccessFlags()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 != 0 goto label6;

     label5:
        $r4 = new java.lang.NoSuchMethodException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<init> ");

        $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label6:
        return r11;
    }

    private java.lang.reflect.Constructor getDeclaredConstructorInternal(java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.Class[] r1;
        java.lang.reflect.ArtMethod[] r2, $r4;
        int i0, i1, i2;
        java.lang.reflect.ArtMethod r3;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Constructor $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class[];

        $r4 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        if $r4 == null goto label6;

        r2 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r2[i1];

        i2 = virtualinvoke r3.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i2);

        if $z0 == 0 goto label2;

        goto label5;

     label2:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isConstructor(int)>(i2);

        if $z1 != 0 goto label3;

        goto label5;

     label3:
        $z2 = staticinvoke <java.lang.reflect.ArtMethod: boolean equalConstructorParameters(java.lang.reflect.ArtMethod,java.lang.Class[])>(r3, r1);

        if $z2 != 0 goto label4;

        goto label5;

     label4:
        $r5 = new java.lang.reflect.Constructor;

        specialinvoke $r5.<java.lang.reflect.Constructor: void <init>(java.lang.reflect.ArtMethod)>(r3);

        return $r5;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return null;
    }

    public java.lang.reflect.Constructor[] getConstructors()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r2;
        int $i0;
        java.lang.reflect.Constructor[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.lang.Class: void getDeclaredConstructors(boolean,java.util.List)>(1, r1);

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.reflect.Constructor)[$i0];

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.reflect.Constructor[]) $r4;

        return $r5;
    }

    public java.lang.reflect.Constructor[] getDeclaredConstructors()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r2;
        int $i0;
        java.lang.reflect.Constructor[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.lang.Class: void getDeclaredConstructors(boolean,java.util.List)>(0, r1);

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (java.lang.reflect.Constructor)[$i0];

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.reflect.Constructor[]) $r4;

        return $r5;
    }

    private void getDeclaredConstructors(boolean, java.util.List)
    {
        java.lang.Class r0;
        boolean z0, $z1, $z2, $z4;
        java.util.List r1;
        java.lang.reflect.ArtMethod[] r2, $r4;
        int i0, i1, i2;
        java.lang.reflect.ArtMethod r3;
        java.lang.reflect.Constructor $r5;

        r0 := @this: java.lang.Class;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        $r4 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        if $r4 == null goto label5;

        r2 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        i2 = virtualinvoke r3.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        if z0 == 0 goto label2;

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i2);

        if $z4 == 0 goto label4;

     label2:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i2);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isConstructor(int)>(i2);

        if $z2 == 0 goto label4;

        $r5 = new java.lang.reflect.Constructor;

        specialinvoke $r5.<java.lang.reflect.Constructor: void <init>(java.lang.reflect.ArtMethod)>(r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public transient java.lang.reflect.Method getDeclaredMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method $r3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[],boolean)>(r1, r2, 0);

        return $r3;
    }

    public transient java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[]) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method $r3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        $r3 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[],boolean)>(r1, r2, 1);

        return $r3;
    }

    private java.lang.reflect.Method getMethod(java.lang.String, java.lang.Class[], boolean) throws java.lang.NoSuchMethodException
    {
        java.lang.Class r0, r4;
        java.lang.String r1, $r10, $r12;
        java.lang.Class[] r2, r3;
        boolean z0, $z1;
        int i0, i1, $i2;
        java.lang.reflect.Method $r5, r15;
        java.lang.NoSuchMethodException $r6, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.NullPointerException $r14;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        z0 := @parameter2: boolean;

        if r1 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r14;

     label1:
        if r2 != null goto label2;

        r2 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

     label2:
        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        if r4 != null goto label4;

        $r13 = new java.lang.NoSuchMethodException;

        specialinvoke $r13.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>("parameter type is null");

        throw $r13;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        if z0 == 0 goto label6;

        $r5 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method getPublicMethodRecursive(java.lang.String,java.lang.Class[])>(r1, r2);

        goto label7;

     label6:
        $r5 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Method getDeclaredMethodInternal(java.lang.String,java.lang.Class[])>(r1, r2);

     label7:
        r15 = $r5;

        if r15 == null goto label8;

        if z0 == 0 goto label9;

        $i2 = virtualinvoke r15.<java.lang.reflect.Method: int getAccessFlags()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 != 0 goto label9;

     label8:
        $r6 = new java.lang.NoSuchMethodException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.NoSuchMethodException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label9:
        return r15;
    }

    private java.lang.reflect.Method getPublicMethodRecursive(java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0, r3, r5;
        java.lang.String r1;
        java.lang.Class[] r2;
        java.lang.reflect.Method r4, r6;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r7;
        boolean $z0, $z1;
        java.lang.Object[] r8;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        r3 = r0;

     label1:
        if r3 == null goto label3;

        r4 = specialinvoke r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethodInternal(java.lang.String,java.lang.Class[])>(r1, r2);

        if r4 == null goto label2;

        $i2 = virtualinvoke r4.<java.lang.reflect.Method: int getAccessFlags()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z1 == 0 goto label2;

        return r4;

     label2:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        r8 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        if r8 == null goto label6;

        i3 = 0;

     label4:
        $i0 = lengthof r8;

        if i3 >= $i0 goto label6;

        $r7 = r8[i3];

        r5 = (java.lang.Class) $r7;

        r6 = specialinvoke r5.<java.lang.Class: java.lang.reflect.Method getPublicMethodRecursive(java.lang.String,java.lang.Class[])>(r1, r2);

        if r6 == null goto label5;

        $i1 = virtualinvoke r6.<java.lang.reflect.Method: int getAccessFlags()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 == 0 goto label5;

        return r6;

     label5:
        i3 = i3 + 2;

        goto label4;

     label6:
        return null;
    }

    private java.lang.reflect.Method getDeclaredMethodInternal(java.lang.String, java.lang.Class[])
    {
        java.lang.Class r0;
        java.lang.String r1, r6, r14;
        java.lang.Class[] r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.reflect.ArtMethod r3, r5, r13;
        java.lang.reflect.ArtMethod[] r4, $r7, $r9, r12;
        java.lang.reflect.Method $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class[];

        i0 = 2101248;

        r3 = null;

        $r7 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        if $r7 == null goto label06;

        r4 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        i1 = lengthof r4;

        i2 = 0;

     label01:
        if i2 >= i1 goto label06;

        r5 = r4[i2];

        r6 = staticinvoke <java.lang.reflect.ArtMethod: java.lang.String getMethodName(java.lang.reflect.ArtMethod)>(r5);

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z4 != 0 goto label02;

        goto label05;

     label02:
        $z3 = staticinvoke <java.lang.reflect.ArtMethod: boolean equalMethodParameters(java.lang.reflect.ArtMethod,java.lang.Class[])>(r5, r2);

        if $z3 != 0 goto label03;

        goto label05;

     label03:
        i3 = virtualinvoke r5.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $i5 = i3 & i0;

        if $i5 != 0 goto label04;

        $r11 = new java.lang.reflect.Method;

        specialinvoke $r11.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r5);

        return $r11;

     label04:
        $i6 = i3 & 2097152;

        if $i6 != 0 goto label05;

        r3 = r5;

     label05:
        i2 = i2 + 1;

        goto label01;

     label06:
        if r3 != null goto label13;

        $r9 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        if $r9 == null goto label13;

        r12 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        i7 = lengthof r12;

        i8 = 0;

     label07:
        if i8 >= i7 goto label13;

        r13 = r12[i8];

        i9 = virtualinvoke r13.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isConstructor(int)>(i9);

        if $z0 == 0 goto label08;

        goto label12;

     label08:
        r14 = staticinvoke <java.lang.reflect.ArtMethod: java.lang.String getMethodName(java.lang.reflect.ArtMethod)>(r13);

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z1 != 0 goto label09;

        goto label12;

     label09:
        $z2 = staticinvoke <java.lang.reflect.ArtMethod: boolean equalMethodParameters(java.lang.reflect.ArtMethod,java.lang.Class[])>(r13, r2);

        if $z2 != 0 goto label10;

        goto label12;

     label10:
        $i4 = i9 & i0;

        if $i4 != 0 goto label11;

        $r10 = new java.lang.reflect.Method;

        specialinvoke $r10.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r13);

        return $r10;

     label11:
        r3 = r13;

     label12:
        i8 = i8 + 1;

        goto label07;

     label13:
        if r3 != null goto label14;

        return null;

     label14:
        $r8 = new java.lang.reflect.Method;

        specialinvoke $r8.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r3);

        return $r8;
    }

    public java.lang.reflect.Method[] getDeclaredMethods()
    {
        java.lang.Class r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.util.ArrayList r1, $r9;
        java.lang.reflect.Method[] r2, r3, $r10;
        java.lang.reflect.Method r4;
        java.lang.reflect.ArtMethod[] $r5, $r6, $r7, $r8;
        java.lang.Object[] $r12;

        r0 := @this: java.lang.Class;

        $r5 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        if $r5 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r6 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        $i5 = lengthof $r6;

     label2:
        i0 = $i5;

        $r7 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        if $r7 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $r8 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        $i3 = lengthof $r8;

     label4:
        i6 = i0 + $i3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i6);

        r1 = $r9;

        specialinvoke r0.<java.lang.Class: void getDeclaredMethods(boolean,java.util.List)>(0, r1);

        $i4 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r10 = newarray (java.lang.reflect.Method)[$i4];

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        r2 = (java.lang.reflect.Method[]) $r12;

        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        r4 = r3[i2];

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        return r2;
    }

    private void getDeclaredMethods(boolean, java.util.List)
    {
        java.lang.Class r0;
        boolean z0, $z1, $z3, $z4;
        java.util.List r1;
        java.lang.reflect.ArtMethod[] r2, $r4, $r5, r8;
        int i0, i1, i2, $i3, i4, i5, i6;
        java.lang.reflect.ArtMethod r3, r9;
        java.lang.reflect.Method $r6, $r7;

        r0 := @this: java.lang.Class;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        $r4 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        if $r4 == null goto label4;

        r2 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] virtualMethods>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        i2 = virtualinvoke r3.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        if z0 == 0 goto label2;

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i2);

        if $z4 == 0 goto label3;

     label2:
        $i3 = i2 & 2097152;

        if $i3 != 0 goto label3;

        $r7 = new java.lang.reflect.Method;

        specialinvoke $r7.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        if $r5 == null goto label8;

        r8 = r0.<java.lang.Class: java.lang.reflect.ArtMethod[] directMethods>;

        i4 = lengthof r8;

        i5 = 0;

     label5:
        if i5 >= i4 goto label8;

        r9 = r8[i5];

        i6 = virtualinvoke r9.<java.lang.reflect.ArtMethod: int getAccessFlags()>();

        if z0 == 0 goto label6;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i6);

        if $z3 == 0 goto label7;

     label6:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isConstructor(int)>(i6);

        if $z1 != 0 goto label7;

        $r6 = new java.lang.reflect.Method;

        specialinvoke $r6.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r9);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label7:
        i5 = i5 + 1;

        goto label5;

     label8:
        return;
    }

    public java.lang.reflect.Method[] getMethods()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r2;
        java.util.Comparator $r3;
        int $i0;
        java.lang.reflect.Method[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        specialinvoke r0.<java.lang.Class: void getPublicMethodsInternal(java.util.List)>(r1);

        $r3 = <java.lang.reflect.Method: java.util.Comparator ORDER_BY_SIGNATURE>;

        staticinvoke <libcore.util.CollectionUtils: void removeDuplicates(java.util.List,java.util.Comparator)>(r1, $r3);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r4 = newarray (java.lang.reflect.Method)[$i0];

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.reflect.Method[]) $r5;

        return $r6;
    }

    private void getPublicMethodsInternal(java.util.List)
    {
        java.lang.Class r0, r2, r3;
        java.util.List r1;
        int i0, $i1;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Class: void getDeclaredMethods(boolean,java.util.List)>(1, r1);

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label2;

        r2 = r0.<java.lang.Class: java.lang.Class superClass>;

     label1:
        if r2 == null goto label2;

        specialinvoke r2.<java.lang.Class: void getDeclaredMethods(boolean,java.util.List)>(1, r1);

        r2 = r2.<java.lang.Class: java.lang.Class superClass>;

        goto label1;

     label2:
        r5 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        if r5 == null goto label4;

        i0 = 0;

     label3:
        $i1 = lengthof r5;

        if i0 >= $i1 goto label4;

        $r4 = r5[i0];

        r3 = (java.lang.Class) $r4;

        specialinvoke r3.<java.lang.Class: void getDeclaredMethods(boolean,java.util.List)>(1, r1);

        i0 = i0 + 2;

        goto label3;

     label4:
        return;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.Class r0;
        java.util.List r1;
        int $i0;
        java.lang.annotation.Annotation[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.lang.Class;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.util.List getDeclaredAnnotations(java.lang.reflect.AnnotatedElement)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.annotation.Annotation)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.annotation.Annotation[]) $r3;

        return $r4;
    }

    public java.lang.Class[] getDeclaredClasses()
    {
        java.lang.Class r0;
        java.lang.Class[] $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.Class[] getMemberClasses(java.lang.Class)>(r0);

        return $r1;
    }

    public java.lang.reflect.Field getDeclaredField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.NoSuchFieldException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r5;

     label1:
        r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredFieldInternal(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r4 = new java.lang.NoSuchFieldException;

        specialinvoke $r4.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label2:
        virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        return r2;
    }

    public java.lang.reflect.Field[] getDeclaredFields()
    {
        java.lang.Class r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.util.ArrayList r1, $r9;
        java.lang.reflect.Field[] r2, r3, $r10;
        java.lang.reflect.Field r4;
        java.lang.reflect.ArtField[] $r5, $r6, $r7, $r8;
        java.lang.Object[] $r12;

        r0 := @this: java.lang.Class;

        $r5 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        if $r5 != null goto label1;

        $i5 = 0;

        goto label2;

     label1:
        $r6 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        $i5 = lengthof $r6;

     label2:
        i0 = $i5;

        $r7 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        if $r7 != null goto label3;

        $i3 = 0;

        goto label4;

     label3:
        $r8 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        $i3 = lengthof $r8;

     label4:
        i6 = i0 + $i3;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i6);

        r1 = $r9;

        specialinvoke r0.<java.lang.Class: void getDeclaredFields(boolean,java.util.List)>(0, r1);

        $i4 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r10 = newarray (java.lang.reflect.Field)[$i4];

        $r12 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        r2 = (java.lang.reflect.Field[]) $r12;

        r3 = r2;

        i1 = lengthof r3;

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        r4 = r3[i2];

        virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        return r2;
    }

    private void getDeclaredFields(boolean, java.util.List)
    {
        java.lang.Class r0;
        boolean z0, $z2, $z4;
        java.util.List r1;
        java.lang.reflect.ArtField[] r2, $r4, $r5, r8;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.reflect.ArtField r3, r9;
        java.lang.reflect.Field $r6, $r7;

        r0 := @this: java.lang.Class;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.List;

        $r4 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        if $r4 == null goto label4;

        r2 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        if z0 == 0 goto label2;

        $i3 = virtualinvoke r3.<java.lang.reflect.ArtField: int getAccessFlags()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z4 == 0 goto label3;

     label2:
        $r7 = new java.lang.reflect.Field;

        specialinvoke $r7.<java.lang.reflect.Field: void <init>(java.lang.reflect.ArtField)>(r3);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        if $r5 == null goto label8;

        r8 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        i4 = lengthof r8;

        i5 = 0;

     label5:
        if i5 >= i4 goto label8;

        r9 = r8[i5];

        if z0 == 0 goto label6;

        $i2 = virtualinvoke r9.<java.lang.reflect.ArtField: int getAccessFlags()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z2 == 0 goto label7;

     label6:
        $r6 = new java.lang.reflect.Field;

        specialinvoke $r6.<java.lang.reflect.Field: void <init>(java.lang.reflect.ArtField)>(r9);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

     label7:
        i5 = i5 + 1;

        goto label5;

     label8:
        return;
    }

    private java.lang.reflect.Field getDeclaredFieldInternal(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, $r6, $r8;
        java.lang.reflect.ArtField[] r2, $r4, $r5, r10;
        int i0, i1, i2, i3;
        java.lang.reflect.ArtField r3, r11;
        boolean $z0, $z1;
        java.lang.reflect.Field $r7, $r9;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        if $r4 == null goto label3;

        r2 = r0.<java.lang.Class: java.lang.reflect.ArtField[] iFields>;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $r8 = virtualinvoke r3.<java.lang.reflect.ArtField: java.lang.String getName()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r9 = new java.lang.reflect.Field;

        specialinvoke $r9.<java.lang.reflect.Field: void <init>(java.lang.reflect.ArtField)>(r3);

        return $r9;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        if $r5 == null goto label6;

        r10 = r0.<java.lang.Class: java.lang.reflect.ArtField[] sFields>;

        i2 = lengthof r10;

        i3 = 0;

     label4:
        if i3 >= i2 goto label6;

        r11 = r10[i3];

        $r6 = virtualinvoke r11.<java.lang.reflect.ArtField: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label5;

        $r7 = new java.lang.reflect.Field;

        specialinvoke $r7.<java.lang.reflect.Field: void <init>(java.lang.reflect.ArtField)>(r11);

        return $r7;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return null;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isAnonymousClass(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.Class getEnclosingClass(java.lang.Class)>(r0);

        return $r1;
    }

    public java.lang.Class getEnclosingClass()
    {
        java.lang.Class r0, r1, $r3, $r5;
        java.lang.reflect.AccessibleObject r2;
        java.lang.reflect.Member $r4;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if r1 == null goto label1;

        return r1;

     label1:
        r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class)>(r0);

        if r2 == null goto label2;

        $r4 = (java.lang.reflect.Member) r2;

        $r5 = interfaceinvoke $r4.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        return $r5;

     label2:
        $r3 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.Class getEnclosingClass(java.lang.Class)>(r0);

        return $r3;
    }

    public java.lang.reflect.Constructor getEnclosingConstructor()
    {
        java.lang.Class r0;
        java.lang.reflect.AccessibleObject r1;
        boolean $z0, $z1;
        java.lang.reflect.Constructor $r2;

        r0 := @this: java.lang.Class;

        $z0 = specialinvoke r0.<java.lang.Class: boolean classNameImpliesTopLevel()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class)>(r0);

        $z1 = r1 instanceof java.lang.reflect.Constructor;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.Constructor) r1;

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    public java.lang.reflect.Method getEnclosingMethod()
    {
        java.lang.Class r0;
        java.lang.reflect.AccessibleObject r1;
        boolean $z0, $z1;
        java.lang.reflect.Method $r2;

        r0 := @this: java.lang.Class;

        $z0 = specialinvoke r0.<java.lang.Class: boolean classNameImpliesTopLevel()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class)>(r0);

        $z1 = r1 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.reflect.Method) r1;

        goto label3;

     label2:
        $r2 = null;

     label3:
        return $r2;
    }

    private boolean classNameImpliesTopLevel()
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$");

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object[] getEnumConstants()
    {
        java.lang.Class r0;
        boolean $z0;
        java.lang.Enum[] $r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Object[]) $r2;

        $r4 = (java.lang.Object[]) $r3;

        return $r4;
    }

    public java.lang.reflect.Field getField(java.lang.String) throws java.lang.NoSuchFieldException
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Field r2;
        java.lang.NoSuchFieldException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r5;

     label1:
        r2 = specialinvoke r0.<java.lang.Class: java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r4 = new java.lang.NoSuchFieldException;

        specialinvoke $r4.<java.lang.NoSuchFieldException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label2:
        virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        return r2;
    }

    private java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)
    {
        java.lang.Class r0, r2, r9;
        java.lang.String r1;
        java.lang.reflect.Field r3, r4;
        java.lang.Object[] $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r8;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        r2 = r0;

     label1:
        if r2 == null goto label3;

        r3 = specialinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredFieldInternal(java.lang.String)>(r1);

        if r3 == null goto label2;

        $i3 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

        $i4 = $i3 & 1;

        if $i4 == 0 goto label2;

        return r3;

     label2:
        r2 = r2.<java.lang.Class: java.lang.Class superClass>;

        goto label1;

     label3:
        $r5 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        if $r5 == null goto label6;

        i5 = 0;

     label4:
        $r6 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        $i0 = lengthof $r6;

        if i5 >= $i0 goto label6;

        $r7 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        $r8 = $r7[i5];

        r9 = (java.lang.Class) $r8;

        r4 = specialinvoke r9.<java.lang.Class: java.lang.reflect.Field getPublicFieldRecursive(java.lang.String)>(r1);

        if r4 == null goto label5;

        $i1 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = $i1 & 1;

        if $i2 == 0 goto label5;

        return r4;

     label5:
        i5 = i5 + 2;

        goto label4;

     label6:
        return null;
    }

    public java.lang.reflect.Field[] getFields()
    {
        java.lang.Class r0;
        java.util.ArrayList r1, $r5;
        java.lang.reflect.Field[] r2, r3, $r6;
        int i0, i1, $i2;
        java.lang.reflect.Field r4;
        java.lang.Object[] $r7;

        r0 := @this: java.lang.Class;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r1 = $r5;

        specialinvoke r0.<java.lang.Class: void getPublicFieldsRecursive(java.util.List)>(r1);

        $i2 = interfaceinvoke r1.<java.util.List: int size()>();

        $r6 = newarray (java.lang.reflect.Field)[$i2];

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        r2 = (java.lang.reflect.Field[]) $r7;

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    private void getPublicFieldsRecursive(java.util.List)
    {
        java.lang.Class r0, r2, r3;
        java.util.List r1;
        int i0, $i1;
        java.lang.Object $r4;
        java.lang.Object[] r5;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.util.List;

        r2 = r0;

     label1:
        if r2 == null goto label2;

        specialinvoke r2.<java.lang.Class: void getDeclaredFields(boolean,java.util.List)>(1, r1);

        r2 = r2.<java.lang.Class: java.lang.Class superClass>;

        goto label1;

     label2:
        r5 = r0.<java.lang.Class: java.lang.Object[] ifTable>;

        if r5 == null goto label4;

        i0 = 0;

     label3:
        $i1 = lengthof r5;

        if i0 >= $i1 goto label4;

        $r4 = r5[i0];

        r3 = (java.lang.Class) $r4;

        specialinvoke r3.<java.lang.Class: void getDeclaredFields(boolean,java.util.List)>(1, r1);

        i0 = i0 + 2;

        goto label3;

     label4:
        return;
    }

    public java.lang.reflect.Type[] getGenericInterfaces()
    {
        java.lang.Class r0;
        java.lang.reflect.Type[] r1, $r10;
        libcore.util.BasicLruCache r2, $r6, $r7, $r15;
        java.lang.String r3;
        libcore.reflect.GenericSignatureParser r4, $r11;
        java.lang.Throwable r5, $r16;
        java.lang.Object $r8, $r9;
        int $i0;
        java.lang.ClassLoader $r12;
        libcore.reflect.ListOfTypes $r13;

        r0 := @this: java.lang.Class;

        $r6 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        r2 = $r6;

        entermonitor $r6;

     label01:
        $r7 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        $r8 = virtualinvoke $r7.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.reflect.Type[]) $r8;

        if r1 != null goto label04;

        r3 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        if r3 != null goto label02;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        goto label03;

     label02:
        $r11 = new libcore.reflect.GenericSignatureParser;

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r11.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r12);

        r4 = $r11;

        virtualinvoke r4.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r3);

        $r13 = r4.<libcore.reflect.GenericSignatureParser: libcore.reflect.ListOfTypes interfaceTypes>;

        r1 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type[] getTypeArray(libcore.reflect.ListOfTypes,boolean)>($r13, 0);

     label03:
        $r15 = staticinvoke <java.lang.Class$Caches: libcore.util.BasicLruCache access$000()>();

        virtualinvoke $r15.<libcore.util.BasicLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1);

     label04:
        exitmonitor r2;

     label05:
        goto label08;

     label06:
        $r16 := @caughtexception;

        r5 = $r16;

        exitmonitor r2;

     label07:
        throw r5;

     label08:
        $i0 = lengthof r1;

        if $i0 != 0 goto label09;

        $r10 = r1;

        goto label10;

     label09:
        $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (java.lang.reflect.Type[]) $r9;

     label10:
        return $r10;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public java.lang.reflect.Type getGenericSuperclass()
    {
        java.lang.Class r0;
        java.lang.reflect.Type r1, $r4;
        java.lang.String r2;
        libcore.reflect.GenericSignatureParser r3, $r5;
        java.lang.ClassLoader $r6;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r1 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        if r2 == null goto label2;

        $r5 = new libcore.reflect.GenericSignatureParser;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r5.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r6);

        r3 = $r5;

        virtualinvoke r3.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r2);

        r1 = r3.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type superclassType>;

     label2:
        $r4 = staticinvoke <libcore.reflect.Types: java.lang.reflect.Type getType(java.lang.reflect.Type)>(r1);

        return $r4;
    }

    public java.lang.Class[] getInterfaces()
    {
        java.lang.Class r0, $r4;
        com.android.dex.Dex r1;
        short[] r2;
        java.lang.Class[] r3, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        short $s4;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r7 = newarray (java.lang.Class)[2];

        $r7[0] = class "java/lang/Cloneable";

        $r7[1] = class "java/io/Serializable";

        return $r7;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isProxy()>();

        if $z1 == 0 goto label2;

        $r6 = specialinvoke r0.<java.lang.Class: java.lang.Class[] getProxyInterfaces()>();

        return $r6;

     label2:
        r1 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        if r1 != null goto label3;

        $r5 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        return $r5;

     label3:
        $i1 = r0.<java.lang.Class: int dexClassDefIndex>;

        r2 = virtualinvoke r1.<com.android.dex.Dex: short[] interfaceTypeIndicesFromClassDefIndex(int)>($i1);

        $i2 = lengthof r2;

        r3 = newarray (java.lang.Class)[$i2];

        i0 = 0;

     label4:
        $i3 = lengthof r2;

        if i0 >= $i3 goto label5;

        $s4 = r2[i0];

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r1, $s4);

        r3[i0] = $r4;

        i0 = i0 + 1;

        goto label4;

     label5:
        return r3;
    }

    private native java.lang.Class[] getProxyInterfaces();

    public int getModifiers()
    {
        java.lang.Class r0, $r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        char c7;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $i5 = i0 & 512;

        if $i5 == 0 goto label1;

        i0 = i0 & -521;

     label1:
        $i6 = 1040 | i0;

        return $i6;

     label2:
        c7 = 65535;

        $i2 = r0.<java.lang.Class: int accessFlags>;

        $i3 = $i2 & c7;

        i1 = staticinvoke <libcore.reflect.AnnotationAccess: int getInnerClassFlags(java.lang.Class,int)>(r0, $i3);

        $i4 = i1 & c7;

        return $i4;
    }

    public java.lang.String getName()
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;

        r0 := @this: java.lang.Class;

        r1 = r0.<java.lang.Class: java.lang.String name>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<java.lang.Class: java.lang.String getNameNative()>();

        r0.<java.lang.Class: java.lang.String name> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    private native java.lang.String getNameNative();

    public java.lang.String getSimpleName()
    {
        java.lang.Class r0, $r5;
        java.lang.String r1, $r2, $r3, $r6, $r8;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r7, $r9;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 == 0 goto label2;

        return "";

     label2:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isMemberClass()>();

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isLocalClass()>();

        if $z3 == 0 goto label4;

     label3:
        $r2 = specialinvoke r0.<java.lang.Class: java.lang.String getInnerClassName()>();

        return $r2;

     label4:
        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label5;

        $i1 = i0 + 1;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r3;

     label5:
        return r1;
    }

    private java.lang.String getInnerClassName()
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Class;

        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getInnerClassName(java.lang.Class)>(r0);

        return $r1;
    }

    public java.security.ProtectionDomain getProtectionDomain()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        return null;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, $r9, r10, r11;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.net.URL $r7, $r8;
        java.lang.ClassLoader r12;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        goto label4;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label2;

        $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r11 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        goto label3;

     label2:
        r11 = "";

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        r12 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r12 == null goto label5;

        $r8 = virtualinvoke r12.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r10);

        return $r8;

     label5:
        $r7 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>(r10);

        return $r7;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1, r2, $r9, r10, r11;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.io.InputStream $r7, $r8;
        java.lang.ClassLoader r12;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        goto label4;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 == -1 goto label2;

        $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r11 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        goto label3;

     label2:
        r11 = "";

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        r12 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r12 == null goto label5;

        $r8 = virtualinvoke r12.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r10);

        return $r8;

     label5:
        $r7 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r10);

        return $r7;
    }

    public java.lang.Object[] getSigners()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        return null;
    }

    public java.lang.Class getSuperclass()
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = r0.<java.lang.Class: java.lang.Class superClass>;

        return $r1;
    }

    public synchronized java.lang.reflect.TypeVariable[] getTypeParameters()
    {
        java.lang.Class r0;
        java.lang.String r1;
        libcore.reflect.GenericSignatureParser r2, $r3;
        java.lang.ClassLoader $r4;
        java.lang.reflect.TypeVariable[] $r5, $r6;

        r0 := @this: java.lang.Class;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        if r1 != null goto label1;

        $r6 = <libcore.util.EmptyArray: java.lang.reflect.TypeVariable[] TYPE_VARIABLE>;

        return $r6;

     label1:
        $r3 = new libcore.reflect.GenericSignatureParser;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r3.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>($r4);

        r2 = $r3;

        virtualinvoke r2.<libcore.reflect.GenericSignatureParser: void parseForClass(java.lang.reflect.GenericDeclaration,java.lang.String)>(r0, r1);

        $r5 = r2.<libcore.reflect.GenericSignatureParser: java.lang.reflect.TypeVariable[] formalTypeParameters>;

        return $r5;
    }

    public boolean isAnnotation()
    {
        java.lang.Class r0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i1 = r0.<java.lang.Class: int accessFlags>;

        $i2 = $i1 & 8192;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isAnnotationPresent(java.lang.Class,java.lang.Class)>(r0, r1);

        return $z0;
    }

    public boolean isAnonymousClass()
    {
        java.lang.Class r0;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isAnonymousClass(java.lang.Class)>(r0);

        return $z0;
    }

    public boolean isArray()
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isProxy()
    {
        java.lang.Class r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i0 = r0.<java.lang.Class: int accessFlags>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isAssignableFrom(java.lang.Class)
    {
        java.lang.Class r0, r1, r3, $r5, $r6, r7;
        java.lang.Object[] r2;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Object $r4;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        if r0 != r1 goto label01;

        return 1;

     label01:
        if r0 != class "java/lang/Object" goto label04;

        $z6 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z6 != 0 goto label02;

        $z7 = 1;

        goto label03;

     label02:
        $z7 = 0;

     label03:
        return $z7;

     label04:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label07;

        $z3 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z3 == 0 goto label05;

        $r6 = r0.<java.lang.Class: java.lang.Class componentType>;

        $r5 = r1.<java.lang.Class: java.lang.Class componentType>;

        $z4 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z4 == 0 goto label05;

        $z5 = 1;

        goto label06;

     label05:
        $z5 = 0;

     label06:
        return $z5;

     label07:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label11;

        r2 = r1.<java.lang.Class: java.lang.Object[] ifTable>;

        if r2 == null goto label10;

        i0 = 0;

     label08:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label10;

        $r4 = r2[i0];

        r3 = (java.lang.Class) $r4;

        if r3 != r0 goto label09;

        return 1;

     label09:
        i0 = i0 + 2;

        goto label08;

     label10:
        return 0;

     label11:
        $z2 = virtualinvoke r1.<java.lang.Class: boolean isInterface()>();

        if $z2 != 0 goto label14;

        r7 = r1.<java.lang.Class: java.lang.Class superClass>;

     label12:
        if r7 == null goto label14;

        if r7 != r0 goto label13;

        return 1;

     label13:
        r7 = r7.<java.lang.Class: java.lang.Class superClass>;

        goto label12;

     label14:
        return 0;
    }

    public boolean isEnum()
    {
        java.lang.Class r0, $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r1 != class "java/lang/Enum" goto label1;

        $i0 = r0.<java.lang.Class: int accessFlags>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInstance(java.lang.Object)
    {
        java.lang.Class r0, $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        return $z0;
    }

    public boolean isInterface()
    {
        java.lang.Class r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i0 = r0.<java.lang.Class: int accessFlags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isLocalClass()
    {
        java.lang.Class r0;
        boolean $z0, $z1, $z2;
        java.lang.reflect.AccessibleObject $r1;

        r0 := @this: java.lang.Class;

        $z0 = specialinvoke r0.<java.lang.Class: boolean classNameImpliesTopLevel()>();

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class)>(r0);

        if $r1 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAnonymousClass()>();

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isMemberClass()
    {
        java.lang.Class r0, $r1;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isPrimitive()
    {
        java.lang.Class r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i0 = r0.<java.lang.Class: int primitiveType>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.Class r0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i1 = r0.<java.lang.Class: int accessFlags>;

        $i2 = $i1 & 4096;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isFinalizable()
    {
        java.lang.Class r0;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: java.lang.Class;

        $i1 = r0.<java.lang.Class: int accessFlags>;

        $i2 = $i1 & -2147483648;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object newInstance() throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.lang.Class r0, r1;
        java.lang.reflect.Constructor r2;
        java.lang.NoSuchMethodException r3, $r26;
        java.lang.InstantiationException r4, $r5, $r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r24, $r25, $r30;
        java.lang.String $r9, $r16, $r21, $r31;
        int $i0, $i1;
        java.lang.Class[] $r10;
        java.lang.Object $r11;
        java.lang.IllegalAccessException $r13, $r19;
        java.lang.reflect.InvocationTargetException $r29, r33;
        java.lang.Throwable $r32;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z2 != 0 goto label1;

        $i0 = r0.<java.lang.Class: int accessFlags>;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

        if $z3 == 0 goto label2;

     label1:
        $r5 = new java.lang.InstantiationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be instantiated");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.InstantiationException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        r1 = staticinvoke <dalvik.system.VMStack: java.lang.Class getStackClass1()>();

        $z4 = specialinvoke r1.<java.lang.Class: boolean canAccess(java.lang.Class)>(r0);

        if $z4 != 0 goto label3;

        $r19 = new java.lang.IllegalAccessException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible from ");

        $r20 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r21);

        throw $r19;

     label3:
        $r10 = newarray (java.lang.Class)[0];

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r10);

     label4:
        goto label6;

     label5:
        $r26 := @caughtexception;

        r3 = $r26;

        $r27 = new java.lang.InstantiationException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r30 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no zero argument constructor");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.InstantiationException: void <init>(java.lang.String)>($r31);

        r4 = $r27;

        virtualinvoke r4.<java.lang.InstantiationException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        throw r4;

     label6:
        $i1 = virtualinvoke r2.<java.lang.reflect.Constructor: int getAccessFlags()>();

        $z5 = specialinvoke r1.<java.lang.Class: boolean canAccessMember(java.lang.Class,int)>(r0, $i1);

        if $z5 != 0 goto label7;

        $r13 = new java.lang.IllegalAccessException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible from ");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r16);

        throw $r13;

     label7:
        $z6 = virtualinvoke r2.<java.lang.reflect.Constructor: boolean isAccessible()>();

        $r11 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[],boolean)>(null, $z6);

     label8:
        return $r11;

     label9:
        $r29 := @caughtexception;

        r33 = $r29;

        $r32 = virtualinvoke r33.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        staticinvoke <libcore.util.SneakyThrow: void sneakyThrow(java.lang.Throwable)>($r32);

        return null;

        catch java.lang.NoSuchMethodException from label3 to label4 with label5;
        catch java.lang.reflect.InvocationTargetException from label7 to label8 with label9;
    }

    private boolean canAccess(java.lang.Class)
    {
        java.lang.Class r0, r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $i0 = r1.<java.lang.Class: int accessFlags>;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<java.lang.Class: boolean inSamePackage(java.lang.Class)>(r1);

        return $z1;
    }

    private boolean canAccessMember(java.lang.Class, int)
    {
        java.lang.Class r0, r1, r2;
        int i0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        if r1 == r0 goto label1;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i0);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);

        if $z2 == 0 goto label6;

        r2 = r0.<java.lang.Class: java.lang.Class superClass>;

     label4:
        if r2 == null goto label6;

        if r2 != r1 goto label5;

        return 1;

     label5:
        r2 = r2.<java.lang.Class: java.lang.Class superClass>;

        goto label4;

     label6:
        $z3 = specialinvoke r0.<java.lang.Class: boolean inSamePackage(java.lang.Class)>(r1);

        return $z3;
    }

    private boolean inSamePackage(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.String r2, r3;
        java.lang.ClassLoader $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $r5 = r0.<java.lang.Class: java.lang.ClassLoader classLoader>;

        $r4 = r1.<java.lang.Class: java.lang.ClassLoader classLoader>;

        if $r5 == $r4 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName$()>();

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getPackageName$()>();

        if r2 != null goto label4;

        if r3 != null goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        if r3 != null goto label5;

        return 0;

     label5:
        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.Class r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5, $r6, $r7;

        r0 := @this: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>();

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label2;

        $r6 = "interface ";

        goto label3;

     label2:
        $r6 = "class ";

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.Package getPackage()
    {
        java.lang.Class r0;
        java.lang.ClassLoader r1;
        java.lang.String r2;
        java.lang.Package $r3;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r1 == null goto label3;

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName$()>();

        if r2 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.ClassLoader: java.lang.Package getPackage(java.lang.String)>(r2);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;

     label3:
        return null;
    }

    public java.lang.String getPackageName$()
    {
        java.lang.Class r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 != -1 goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

     label2:
        return $r2;
    }

    public boolean desiredAssertionStatus()
    {
        java.lang.Class r0;

        r0 := @this: java.lang.Class;

        return 0;
    }

    public java.lang.Class asSubclass(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.lang.String r2, r3, $r9;
        boolean $z0;
        java.lang.ClassCastException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = new java.lang.ClassCastException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be cast to ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r9);

        throw $r4;
    }

    public java.lang.Object cast(java.lang.Object)
    {
        java.lang.Class r0, $r4;
        java.lang.Object r1;
        java.lang.String r2, r3, $r10;
        boolean $z0;
        java.lang.ClassCastException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;

        r0 := @this: java.lang.Class;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r5 = new java.lang.ClassCastException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be cast to ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.ClassCastException: void <init>(java.lang.String)>($r10);

        throw $r5;
    }

    public int getDexClassDefIndex()
    {
        java.lang.Class r0;
        int $i0, $i1;

        r0 := @this: java.lang.Class;

        $i0 = r0.<java.lang.Class: int dexClassDefIndex>;

        if $i0 != 65535 goto label1;

        $i1 = -1;

        goto label2;

     label1:
        $i1 = r0.<java.lang.Class: int dexClassDefIndex>;

     label2:
        return $i1;
    }

    public int getDexTypeIndex()
    {
        java.lang.Class r0, r1;
        int i0, $i1, $i2, i3;
        java.lang.Throwable r2, $r7;
        com.android.dex.Dex $r4, $r6;
        java.lang.String $r5;

        r0 := @this: java.lang.Class;

        i0 = r0.<java.lang.Class: int dexTypeIndex>;

        if i0 == 65535 goto label1;

        return i0;

     label1:
        r1 = r0;

        entermonitor r0;

     label2:
        i3 = r0.<java.lang.Class: int dexTypeIndex>;

        if i3 != 65535 goto label5;

        $i1 = r0.<java.lang.Class: int dexClassDefIndex>;

        if $i1 < 0 goto label3;

        $r6 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i2 = r0.<java.lang.Class: int dexClassDefIndex>;

        i3 = virtualinvoke $r6.<com.android.dex.Dex: int typeIndexFromClassDefIndex(int)>($i2);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        $r5 = staticinvoke <libcore.reflect.InternalNames: java.lang.String getInternalName(java.lang.Class)>(r0);

        i3 = virtualinvoke $r4.<com.android.dex.Dex: int findTypeIndex(java.lang.String)>($r5);

        if i3 >= 0 goto label4;

        i3 = -1;

     label4:
        r0.<java.lang.Class: int dexTypeIndex> = i3;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return i3;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int getDexAnnotationDirectoryOffset()
    {
        java.lang.Class r0;
        com.android.dex.Dex r1;
        int i0, $i1;

        r0 := @this: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: com.android.dex.Dex getDex()>();

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r0.<java.lang.Class: int getDexClassDefIndex()>();

        if i0 >= 0 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r1.<com.android.dex.Dex: int annotationDirectoryOffsetFromClassDefIndex(int)>(i0);

        return $i1;
    }

    public static void <clinit>()
    {
        <java.lang.Class: long serialVersionUID> = 3206093459760846163L;

        return;
    }
}
