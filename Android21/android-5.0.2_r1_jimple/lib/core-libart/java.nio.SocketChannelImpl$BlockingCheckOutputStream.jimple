class java.nio.SocketChannelImpl$BlockingCheckOutputStream extends java.io.FilterOutputStream
{
    private final java.nio.channels.SocketChannel channel;

    public void <init>(java.io.OutputStream, java.nio.channels.SocketChannel)
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        java.io.OutputStream r1;
        java.nio.channels.SocketChannel r2;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.nio.channels.SocketChannel;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.nio.channels.SocketChannel channel> = r2;

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.OutputStream $r2;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: void checkBlocking()>();

        $r2 = r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: void checkBlocking()>();

        $r1 = r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        byte[] r1;
        java.io.OutputStream $r2;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: void checkBlocking()>();

        $r2 = r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>(r1);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        java.nio.channels.SocketChannel $r1;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        $r1 = r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.nio.channels.SocketChannel channel>;

        virtualinvoke $r1.<java.nio.channels.SocketChannel: void close()>();

        return;
    }

    private void checkBlocking()
    {
        java.nio.SocketChannelImpl$BlockingCheckOutputStream r0;
        java.nio.channels.SocketChannel $r1;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r2;

        r0 := @this: java.nio.SocketChannelImpl$BlockingCheckOutputStream;

        $r1 = r0.<java.nio.SocketChannelImpl$BlockingCheckOutputStream: java.nio.channels.SocketChannel channel>;

        $z0 = virtualinvoke $r1.<java.nio.channels.SocketChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r2 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r2.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r2;

     label1:
        return;
    }
}
