public final class org.apache.harmony.security.asn1.ASN1Implicit extends org.apache.harmony.security.asn1.ASN1Type
{
    private static final int TAGGING_PRIMITIVE;
    private static final int TAGGING_CONSTRUCTED;
    private static final int TAGGING_STRING;
    private final org.apache.harmony.security.asn1.ASN1Type type;
    private final int taggingType;

    public void <init>(int, org.apache.harmony.security.asn1.ASN1Type)
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        int i0, $i1, $i2;
        org.apache.harmony.security.asn1.ASN1Type r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.harmony.security.asn1.ASN1Type;

        specialinvoke r0.<org.apache.harmony.security.asn1.ASN1Type: void <init>(int,int)>(128, i0);

        $z0 = r1 instanceof org.apache.harmony.security.asn1.ASN1Choice;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof org.apache.harmony.security.asn1.ASN1Any;

        if $z1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Implicit tagging can not be used for ASN.1 ANY or CHOICE type");

        throw $r2;

     label2:
        r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type> = r1;

        $i1 = r1.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $z2 = virtualinvoke r1.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i1);

        if $z2 == 0 goto label4;

        $i2 = r1.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $z3 = virtualinvoke r1.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i2);

        if $z3 == 0 goto label3;

        r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 2;

        goto label5;

     label3:
        r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 0;

        goto label5;

     label4:
        r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 1;

     label5:
        return;
    }

    public final boolean checkTag(int)
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType>;

        lookupswitch($i1)
        {
            case 0: goto label01;
            case 1: goto label04;
            default: goto label07;
        };

     label01:
        $i3 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int id>;

        if $i3 != i0 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        return $z1;

     label04:
        $i2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int constrId>;

        if $i2 != i0 goto label05;

        $z0 = 1;

        goto label06;

     label05:
        $z0 = 0;

     label06:
        return $z0;

     label07:
        $i4 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int id>;

        if $i4 == i0 goto label08;

        $i5 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int constrId>;

        if $i5 != i0 goto label09;

     label08:
        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        return $z2;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        org.apache.harmony.security.asn1.BerInputStream r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        org.apache.harmony.security.asn1.ASN1Type $r2, $r3, $r6;
        java.lang.Object $r4, $r5;
        org.apache.harmony.security.asn1.ASN1Exception $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13, $r14, $r15, $r16;
        java.lang.String $r12, $r17, $r18;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $z0 = virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Implicit: boolean checkTag(int)>($i0);

        if $z0 != 0 goto label1;

        $r7 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 implicitly tagged type expected at [");

        $i5 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Expected tag: ");

        $i6 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int id>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("but got ");

        $i7 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $r17 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r18);

        throw $r7;

     label1:
        $i2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int id>;

        $i1 = r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i2 != $i1 goto label2;

        $r6 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $i4 = $r6.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        r1.<org.apache.harmony.security.asn1.BerInputStream: int tag> = $i4;

        goto label3;

     label2:
        $r2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $i3 = $r2.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        r1.<org.apache.harmony.security.asn1.BerInputStream: int tag> = $i3;

     label3:
        $r3 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r4;

        $z1 = r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z1 == 0 goto label4;

        return null;

     label4:
        $r5 = virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Implicit: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>(r1);

        return $r5;
    }

    public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType>;

        if $i0 != 1 goto label1;

        $i2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int constrId>;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeTag(int)>($i2);

        goto label2;

     label1:
        $i1 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: int id>;

        virtualinvoke r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeTag(int)>($i1);

     label2:
        virtualinvoke r0.<org.apache.harmony.security.asn1.ASN1Implicit: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>(r1);

        return;
    }

    public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;
        org.apache.harmony.security.asn1.ASN1Type $r2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $r2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>(r1);

        return;
    }

    public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit r0;
        org.apache.harmony.security.asn1.BerOutputStream r1;
        org.apache.harmony.security.asn1.ASN1Type $r2;

        r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $r2 = r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_STRING> = 2;

        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_CONSTRUCTED> = 1;

        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_PRIMITIVE> = 0;

        return;
    }
}
