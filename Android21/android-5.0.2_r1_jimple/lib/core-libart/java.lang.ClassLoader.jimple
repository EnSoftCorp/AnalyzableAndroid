public abstract class java.lang.ClassLoader extends java.lang.Object
{
    private java.lang.ClassLoader parent;
    private java.util.Map packages;
    public final java.util.Map proxyCache;

    private static java.lang.ClassLoader createSystemClassLoader()
    {
        java.lang.String r0;
        dalvik.system.PathClassLoader $r1;
        java.lang.BootClassLoader $r2;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.class.path", ".");

        $r1 = new dalvik.system.PathClassLoader;

        $r2 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

        specialinvoke $r1.<dalvik.system.PathClassLoader: void <init>(java.lang.String,java.lang.ClassLoader)>(r0, $r2);

        return $r1;
    }

    public static java.lang.ClassLoader getSystemClassLoader()
    {
        java.lang.ClassLoader $r0;

        $r0 = <java.lang.ClassLoader$SystemClassLoader: java.lang.ClassLoader loader>;

        return $r0;
    }

    public static java.net.URL getSystemResource(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.net.URL $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.ClassLoader$SystemClassLoader: java.lang.ClassLoader loader>;

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r0);

        return $r2;
    }

    public static java.util.Enumeration getSystemResources(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.util.Enumeration $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.ClassLoader$SystemClassLoader: java.lang.ClassLoader loader>;

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r0);

        return $r2;
    }

    public static java.io.InputStream getSystemResourceAsStream(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        java.io.InputStream $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.ClassLoader$SystemClassLoader: java.lang.ClassLoader loader>;

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r0);

        return $r2;
    }

    protected void <init>()
    {
        java.lang.ClassLoader r0, $r1;

        r0 := @this: java.lang.ClassLoader;

        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader,boolean)>($r1, 0);

        return;
    }

    protected void <init>(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0, r1;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader,boolean)>(r1, 0);

        return;
    }

    void <init>(java.lang.ClassLoader, boolean)
    {
        java.lang.ClassLoader r0, r1;
        boolean z0;
        java.util.HashMap $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<java.lang.ClassLoader: java.util.Map packages> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<java.lang.ClassLoader: java.util.Map proxyCache> = $r3;

        if r1 != null goto label1;

        if z0 != 0 goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("parentLoader == null && !nullAllowed");

        throw $r4;

     label1:
        r0.<java.lang.ClassLoader: java.lang.ClassLoader parent> = r1;

        return;
    }

    protected final java.lang.Class defineClass(byte[], int, int) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        byte[] r1;
        int i0, i1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t load this type of class file");

        throw $r2;
    }

    protected final java.lang.Class defineClass(java.lang.String, byte[], int, int) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t load this type of class file");

        throw $r3;
    }

    protected final java.lang.Class defineClass(java.lang.String, byte[], int, int, java.security.ProtectionDomain) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        byte[] r2;
        int i0, i1;
        java.security.ProtectionDomain r3;
        java.lang.UnsupportedOperationException $r4;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: java.security.ProtectionDomain;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t load this type of class file");

        throw $r4;
    }

    protected final java.lang.Class defineClass(java.lang.String, java.nio.ByteBuffer, java.security.ProtectionDomain) throws java.lang.ClassFormatError
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.nio.ByteBuffer r2;
        java.security.ProtectionDomain r3;
        byte[] r4;
        int $i0, $i1;
        java.lang.Class $r6;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.ByteBuffer;

        r3 := @parameter2: java.security.ProtectionDomain;

        $i0 = virtualinvoke r2.<java.nio.ByteBuffer: int remaining()>();

        r4 = newarray (byte)[$i0];

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r4);

        $i1 = lengthof r4;

        $r6 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)>(r1, r4, 0, $i1, r3);

        return $r6;
    }

    protected java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.ClassNotFoundException $r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.ClassNotFoundException;

        specialinvoke $r2.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    protected final java.lang.Class findLoadedClass(java.lang.String)
    {
        java.lang.ClassLoader r0, r2;
        java.lang.String r1;
        java.lang.BootClassLoader $r3;
        java.lang.Class $r4;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>();

        if r0 != $r3 goto label1;

        r2 = null;

        goto label2;

     label1:
        r2 = r0;

     label2:
        $r4 = staticinvoke <java.lang.VMClassLoader: java.lang.Class findLoadedClass(java.lang.ClassLoader,java.lang.String)>(r2, r1);

        return $r4;
    }

    protected final java.lang.Class findSystemClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0, $r2;
        java.lang.String r1;
        java.lang.Class $r3;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r2);

        return $r3;
    }

    public final java.lang.ClassLoader getParent()
    {
        java.lang.ClassLoader r0, $r1;

        r0 := @this: java.lang.ClassLoader;

        $r1 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;

        return $r1;
    }

    public java.net.URL getResource(java.lang.String)
    {
        java.lang.ClassLoader r0, $r3;
        java.lang.String r1;
        java.net.URL r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;

        r2 = virtualinvoke $r3.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        if r2 != null goto label1;

        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>(r1);

     label1:
        return r2;
    }

    public java.util.Enumeration getResources(java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0, $r4;
        java.lang.String r1;
        java.util.Enumeration r2, r3;
        java.lang.TwoEnumerationsInOne $r5;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;

        r2 = virtualinvoke $r4.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>(r1);

        r3 = virtualinvoke r0.<java.lang.ClassLoader: java.util.Enumeration findResources(java.lang.String)>(r1);

        $r5 = new java.lang.TwoEnumerationsInOne;

        specialinvoke $r5.<java.lang.TwoEnumerationsInOne: void <init>(java.util.Enumeration,java.util.Enumeration)>(r2, r3);

        return $r5;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.net.URL r2;
        java.io.InputStream $r3;
        java.io.IOException $r4;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r1);

        if r2 == null goto label3;

        $r3 = virtualinvoke r2.<java.net.URL: java.io.InputStream openStream()>();

     label2:
        return $r3;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return null;

        catch java.io.IOException from label1 to label2 with label4;
    }

    public java.lang.Class loadClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    protected java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0, $r5;
        java.lang.String r1;
        boolean z0;
        java.lang.Class r2;
        java.lang.ClassNotFoundException r3, r4, $r6, $r7, r8;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>(r1);

        if r2 != null goto label8;

        r3 = null;

     label1:
        $r5 = r0.<java.lang.ClassLoader: java.lang.ClassLoader parent>;

        r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>(r1, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

        r3 = r4;

     label4:
        if r2 != null goto label8;

     label5:
        r2 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>(r1);

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        r8 = $r7;

        virtualinvoke r8.<java.lang.ClassNotFoundException: void addSuppressed(java.lang.Throwable)>(r3);

        throw r8;

     label8:
        return r2;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
    }

    protected final void resolveClass(java.lang.Class)
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.Class;

        return;
    }

    protected java.net.URL findResource(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected java.util.Enumeration findResources(java.lang.String) throws java.io.IOException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration emptyEnumeration()>();

        return $r2;
    }

    protected java.lang.String findLibrary(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    protected java.lang.Package getPackage(java.lang.String)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        java.util.Map r2, $r4, $r5;
        java.lang.Throwable r3, $r8;
        java.lang.Object $r6;
        java.lang.Package $r7;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (java.lang.Package) $r6;

        exitmonitor r2;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.Package[] getPackages()
    {
        java.lang.ClassLoader r0;
        java.util.Map r1, $r5, $r6;
        java.util.Collection r2;
        java.lang.Package[] r3;
        java.lang.Throwable r4, $r8;
        int $i0;

        r0 := @this: java.lang.ClassLoader;

        $r5 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        r2 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke r2.<java.util.Collection: int size()>();

        r3 = newarray (java.lang.Package)[$i0];

        interfaceinvoke r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r1;

     label4:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.Package definePackage(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.net.URL) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, $r23;
        java.net.URL r8;
        java.util.Map r9, $r12, $r13, $r16;
        java.lang.Package r10, $r14;
        java.lang.Throwable r11, $r22;
        boolean $z0;
        java.lang.IllegalArgumentException $r17;
        java.lang.StringBuilder $r18, $r19, $r20, $r21;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.net.URL;

        $r12 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        r9 = $r12;

        entermonitor $r12;

     label1:
        $r13 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        $z0 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already defined");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label2:
        $r14 = new java.lang.Package;

        specialinvoke $r14.<java.lang.Package: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>(r1, r2, r3, r4, r5, r6, r7, r8);

        r10 = $r14;

        $r16 = r0.<java.lang.ClassLoader: java.util.Map packages>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r10);

        exitmonitor r9;

     label3:
        return r10;

     label4:
        $r22 := @caughtexception;

        r11 = $r22;

        exitmonitor r9;

     label5:
        throw r11;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected final void setSigners(java.lang.Class, java.lang.Object[])
    {
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        java.lang.Object[] r2;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Object[];

        return;
    }

    public void setClassAssertionStatus(java.lang.String, boolean)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setPackageAssertionStatus(java.lang.String, boolean)
    {
        java.lang.ClassLoader r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: java.lang.ClassLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setDefaultAssertionStatus(boolean)
    {
        java.lang.ClassLoader r0;
        boolean z0;

        r0 := @this: java.lang.ClassLoader;

        z0 := @parameter0: boolean;

        return;
    }

    public void clearAssertionStatus()
    {
        java.lang.ClassLoader r0;

        r0 := @this: java.lang.ClassLoader;

        return;
    }

    static java.lang.ClassLoader access$000()
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader createSystemClassLoader()>();

        return $r0;
    }
}
