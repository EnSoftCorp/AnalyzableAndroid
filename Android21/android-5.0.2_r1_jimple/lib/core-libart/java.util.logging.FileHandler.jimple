public class java.util.logging.FileHandler extends java.util.logging.StreamHandler
{
    private static final java.lang.String LCK_EXT;
    private static final int DEFAULT_COUNT;
    private static final int DEFAULT_LIMIT;
    private static final boolean DEFAULT_APPEND;
    private static final java.lang.String DEFAULT_PATTERN;
    private static final java.util.Hashtable allLocks;
    private int count;
    private int limit;
    private boolean append;
    private java.lang.String pattern;
    private java.util.logging.LogManager manager;
    private java.util.logging.FileHandler$MeasureOutputStream output;
    private java.io.File[] files;
    java.nio.channels.FileLock lock;
    java.lang.String fileName;
    int uniqueID;

    public void <init>() throws java.io.IOException
    {
        java.util.logging.FileHandler r0;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(null, null, null, null);

        return;
    }

    private void init(java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        java.lang.Boolean r2;
        java.lang.Integer r3, r4;
        java.util.logging.LogManager $r5, $r6;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        $r5 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager> = $r5;

        $r6 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r6.<java.util.logging.LogManager: void checkAccess()>();

        specialinvoke r0.<java.util.logging.FileHandler: void initProperties(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, r2, r3, r4);

        specialinvoke r0.<java.util.logging.FileHandler: void initOutputFiles()>();

        return;
    }

    private void initOutputFiles() throws java.io.FileNotFoundException, java.io.IOException
    {
        java.util.logging.FileHandler r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8;
        java.nio.channels.FileChannel r1;
        java.lang.Throwable r2, $r44;
        java.io.File[] $r3, $r10, $r29, $r31, $r35, $r36, $r38, $r40, $r42;
        java.io.File $r4, $r11, $r27, $r32, $r33, $r34, $r37, $r39, $r41;
        java.lang.String $r5, $r7, $r15, $r16, $r22, $r28, $r43;
        java.util.Hashtable $r6, $r8, $r21, r45;
        java.lang.Object $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r12, $r14, $r17;
        java.io.FileOutputStream $r13, $r24, r46;
        java.nio.channels.FileLock $r18, $r19, $r20;
        java.util.logging.FileHandler$MeasureOutputStream $r25, $r30;
        java.io.BufferedOutputStream $r26;
        long $l5, $l9, $l11;
        byte $b10;

        r0 := @this: java.util.logging.FileHandler;

     label01:
        $i2 = r0.<java.util.logging.FileHandler: int uniqueID>;

        $i3 = $i2 + 1;

        r0.<java.util.logging.FileHandler: int uniqueID> = $i3;

        i0 = 0;

     label02:
        $i4 = r0.<java.util.logging.FileHandler: int count>;

        if i0 >= $i4 goto label03;

        $r42 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r41 = new java.io.File;

        $r43 = specialinvoke r0.<java.util.logging.FileHandler: java.lang.String parseFileName(int)>(i0);

        specialinvoke $r41.<java.io.File: void <init>(java.lang.String)>($r43);

        $r42[i0] = $r41;

        i0 = i0 + 1;

        goto label02;

     label03:
        $r3 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = $r5;

        $r6 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        r45 = $r6;

        entermonitor $r6;

     label04:
        $r8 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r7 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r9 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r7);

        if $r9 == null goto label06;

        exitmonitor r45;

     label05:
        goto label01;

     label06:
        $r10 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r11 = $r10[0];

        $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label10;

        $z2 = r0.<java.util.logging.FileHandler: boolean append>;

        if $z2 == 0 goto label07;

        $r40 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r39 = $r40[0];

        $l9 = virtualinvoke $r39.<java.io.File: long length()>();

        $i8 = r0.<java.util.logging.FileHandler: int limit>;

        $l11 = (long) $i8;

        $b10 = $l9 cmp $l11;

        if $b10 < 0 goto label10;

     label07:
        $i6 = r0.<java.util.logging.FileHandler: int count>;

        i1 = $i6 - 1;

     label08:
        if i1 <= 0 goto label10;

        $r31 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r32 = $r31[i1];

        $z3 = virtualinvoke $r32.<java.io.File: boolean exists()>();

        if $z3 == 0 goto label09;

        $r38 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r37 = $r38[i1];

        virtualinvoke $r37.<java.io.File: boolean delete()>();

     label09:
        $r36 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $i7 = i1 - 1;

        $r33 = $r36[$i7];

        $r35 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r34 = $r35[i1];

        virtualinvoke $r33.<java.io.File: boolean renameTo(java.io.File)>($r34);

        i1 = i1 + -1;

        goto label08;

     label10:
        $r13 = new java.io.FileOutputStream;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.FileOutputStream: void <init>(java.lang.String)>($r16);

        r46 = $r13;

        r1 = virtualinvoke r46.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        $r18 = virtualinvoke r1.<java.nio.channels.FileChannel: java.nio.channels.FileLock tryLock()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = $r18;

        $r20 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        if $r20 != null goto label12;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r46);

        exitmonitor r45;

     label11:
        goto label01;

     label12:
        $r21 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r22 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r19 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r19);

        exitmonitor r45;

     label13:
        goto label16;

     label14:
        $r44 := @caughtexception;

        r2 = $r44;

        exitmonitor r45;

     label15:
        throw r2;

     label16:
        $r25 = new java.util.logging.FileHandler$MeasureOutputStream;

        $r26 = new java.io.BufferedOutputStream;

        $r24 = new java.io.FileOutputStream;

        $r28 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $z1 = r0.<java.util.logging.FileHandler: boolean append>;

        specialinvoke $r24.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r28, $z1);

        specialinvoke $r26.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r24);

        $r29 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r27 = $r29[0];

        $l5 = virtualinvoke $r27.<java.io.File: long length()>();

        specialinvoke $r25.<java.util.logging.FileHandler$MeasureOutputStream: void <init>(java.io.OutputStream,long)>($r26, $l5);

        r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output> = $r25;

        $r30 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        virtualinvoke r0.<java.util.logging.FileHandler: void setOutputStream(java.io.OutputStream)>($r30);

        return;

        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    private void initProperties(java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r5, $r7, $r8, $r12, $r17, $r22, $r27, $r28;
        java.lang.Boolean r2;
        java.lang.Integer r3, r4;
        java.lang.Class $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.io.File[] $r9;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r15, $r16, $r18, $r19, $r21, $r23, $r24, $r26;
        java.lang.NullPointerException $r20, $r25;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.lang.Integer;

        r4 := @parameter3: java.lang.Integer;

        specialinvoke r0.<java.util.logging.StreamHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.XMLFormatter", null);

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r5 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        if r1 != null goto label01;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".pattern");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = specialinvoke r0.<java.util.logging.FileHandler: java.lang.String getStringProperty(java.lang.String,java.lang.String)>($r27, "%h/java%u.log");

        goto label02;

     label01:
        $r28 = r1;

     label02:
        r0.<java.util.logging.FileHandler: java.lang.String pattern> = $r28;

        $r7 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        if $r7 != null goto label03;

        $r25 = new java.lang.NullPointerException;

        specialinvoke $r25.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern == null");

        throw $r25;

     label03:
        $r8 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label04;

        $r20 = new java.lang.NullPointerException;

        specialinvoke $r20.<java.lang.NullPointerException: void <init>(java.lang.String)>("pattern.isEmpty()");

        throw $r20;

     label04:
        if r2 != null goto label05;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".append");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = specialinvoke r0.<java.util.logging.FileHandler: boolean getBooleanProperty(java.lang.String,boolean)>($r22, 0);

        goto label06;

     label05:
        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

     label06:
        r0.<java.util.logging.FileHandler: boolean append> = $z1;

        if r4 != null goto label07;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".count");

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = specialinvoke r0.<java.util.logging.FileHandler: int getIntProperty(java.lang.String,int)>($r17, 1);

        goto label08;

     label07:
        $i0 = virtualinvoke r4.<java.lang.Integer: int intValue()>();

     label08:
        r0.<java.util.logging.FileHandler: int count> = $i0;

        if r3 != null goto label09;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".limit");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = specialinvoke r0.<java.util.logging.FileHandler: int getIntProperty(java.lang.String,int)>($r12, 0);

        goto label10;

     label09:
        $i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

     label10:
        r0.<java.util.logging.FileHandler: int limit> = $i1;

        $i2 = r0.<java.util.logging.FileHandler: int count>;

        if $i2 >= 1 goto label11;

        $i3 = 1;

        goto label12;

     label11:
        $i3 = r0.<java.util.logging.FileHandler: int count>;

     label12:
        r0.<java.util.logging.FileHandler: int count> = $i3;

        $i5 = r0.<java.util.logging.FileHandler: int limit>;

        if $i5 >= 0 goto label13;

        $i4 = 0;

        goto label14;

     label13:
        $i4 = r0.<java.util.logging.FileHandler: int limit>;

     label14:
        r0.<java.util.logging.FileHandler: int limit> = $i4;

        $i6 = r0.<java.util.logging.FileHandler: int count>;

        $r9 = newarray (java.io.File)[$i6];

        r0.<java.util.logging.FileHandler: java.io.File[] files> = $r9;

        return;
    }

    void findNextGeneration()
    {
        java.util.logging.FileHandler r0;
        int i0, $i1, $i2;
        java.util.logging.FileHandler$MeasureOutputStream $r1, $r6;
        java.io.BufferedOutputStream $r2;
        java.io.FileOutputStream $r3;
        java.io.File[] $r4, $r7, $r9, $r10, $r14;
        java.io.File $r5, $r8, $r11, $r12, $r13;
        boolean $z0;
        java.io.FileNotFoundException $r15, r17;
        java.util.logging.ErrorManager $r16;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();

        $i1 = r0.<java.util.logging.FileHandler: int count>;

        i0 = $i1 - 1;

     label1:
        if i0 <= 0 goto label3;

        $r7 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r8 = $r7[i0];

        $z0 = virtualinvoke $r8.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label2;

        $r14 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r13 = $r14[i0];

        virtualinvoke $r13.<java.io.File: boolean delete()>();

     label2:
        $r9 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $i2 = i0 - 1;

        $r12 = $r9[$i2];

        $r10 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r11 = $r10[i0];

        virtualinvoke $r12.<java.io.File: boolean renameTo(java.io.File)>($r11);

        i0 = i0 + -1;

        goto label1;

     label3:
        $r1 = new java.util.logging.FileHandler$MeasureOutputStream;

        $r2 = new java.io.BufferedOutputStream;

        $r3 = new java.io.FileOutputStream;

        $r4 = r0.<java.util.logging.FileHandler: java.io.File[] files>;

        $r5 = $r4[0];

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r5);

        specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r3);

        specialinvoke $r1.<java.util.logging.FileHandler$MeasureOutputStream: void <init>(java.io.OutputStream)>($r2);

        r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output> = $r1;

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        r17 = $r15;

        $r16 = virtualinvoke r0.<java.util.logging.FileHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r16.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Error opening log file", r17, 4);

     label6:
        $r6 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        virtualinvoke r0.<java.util.logging.FileHandler: void setOutputStream(java.io.OutputStream)>($r6);

        return;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
    }

    private java.lang.String parseFileName(int)
    {
        java.util.logging.FileHandler r0;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25;
        boolean z1, z2, z3, z4, $z5, $z6;
        java.lang.String r1, r2, $r5, $r6, $r8, $r9, $r10, $r11, $r12, $r18, $r23, $r25;
        java.lang.StringBuilder r3, $r7, $r14, $r15, $r19, $r20, $r27, $r28, $r30;
        char[] r4;
        char $c2, $c10;

        r0 := @this: java.util.logging.FileHandler;

        i0 := @parameter0: int;

        i1 = 0;

        z1 = 0;

        z2 = 0;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        if r1 != null goto label01;

        $z5 = 0;

        goto label02;

     label01:
        $r5 = <java.io.File: java.lang.String separator>;

        $z5 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>($r5);

     label02:
        z3 = $z5;

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        if r2 != null goto label03;

        $z6 = 0;

        goto label04;

     label03:
        $r6 = <java.io.File: java.lang.String separator>;

        $z6 = virtualinvoke r2.<java.lang.String: boolean endsWith(java.lang.String)>($r6);

     label04:
        z4 = $z6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r3 = $r7;

        $r9 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $c2 = <java.io.File: char separatorChar>;

        $r8 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(47, $c2);

        r0.<java.util.logging.FileHandler: java.lang.String pattern> = $r8;

        $r10 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        r4 = virtualinvoke $r10.<java.lang.String: char[] toCharArray()>();

     label05:
        $r11 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $i3 = virtualinvoke $r11.<java.lang.String: int indexOf(int,int)>(37, i1);

        i23 = $i3;

        if $i3 < 0 goto label13;

        i24 = i23 + 1;

        $r18 = r0.<java.util.logging.FileHandler: java.lang.String pattern>;

        $i9 = virtualinvoke $r18.<java.lang.String: int length()>();

        if i24 >= $i9 goto label05;

        $c10 = r4[i24];

        lookupswitch($c10)
        {
            case 37: goto label10;
            case 103: goto label06;
            case 104: goto label09;
            case 116: goto label08;
            case 117: goto label07;
            default: goto label11;
        };

     label06:
        $i19 = i24 - i1;

        $i18 = $i19 - 1;

        $r28 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i18);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        z2 = 1;

        goto label12;

     label07:
        $i12 = i24 - i1;

        $i13 = $i12 - 1;

        $r19 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i13);

        $i11 = r0.<java.util.logging.FileHandler: int uniqueID>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        z1 = 1;

        goto label12;

     label08:
        $i15 = i24 - i1;

        $i14 = $i15 - 1;

        $r20 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i14);

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        if z3 != 0 goto label12;

        $r23 = <java.io.File: java.lang.String separator>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label12;

     label09:
        $i16 = i24 - i1;

        $i17 = $i16 - 1;

        $r27 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i17);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if z4 != 0 goto label12;

        $r25 = <java.io.File: java.lang.String separator>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        goto label12;

     label10:
        $i21 = i24 - i1;

        $i20 = $i21 - 1;

        $r30 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i20);

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(37);

        goto label12;

     label11:
        $i22 = i24 - i1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i22);

     label12:
        i25 = i24 + 1;

        i1 = i25;

        goto label05;

     label13:
        $i5 = lengthof r4;

        $i4 = $i5 - i1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r4, i1, $i4);

        if z2 != 0 goto label14;

        $i7 = r0.<java.util.logging.FileHandler: int count>;

        if $i7 <= 1 goto label14;

        $r15 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label14:
        if z1 != 0 goto label15;

        $i6 = r0.<java.util.logging.FileHandler: int uniqueID>;

        if $i6 <= 0 goto label15;

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $i8 = r0.<java.util.logging.FileHandler: int uniqueID>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

     label15:
        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private boolean getBooleanProperty(java.lang.String, boolean)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2, $r4, $r5;
        boolean z0, z1, $z2, $z3;
        java.util.logging.LogManager $r3;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r3 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r2 = virtualinvoke $r3.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        if r2 != null goto label1;

        return z0;

     label1:
        z1 = z0;

        $r4 = "true";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label2;

        z1 = 1;

        goto label3;

     label2:
        $r5 = "false";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z3 == 0 goto label3;

        z1 = 0;

     label3:
        return z1;
    }

    private java.lang.String getStringProperty(java.lang.String, java.lang.String)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2, r3, $r5;
        java.util.logging.LogManager $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r4 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r3 = virtualinvoke $r4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r5 = r2;

        goto label2;

     label1:
        $r5 = r3;

     label2:
        return $r5;
    }

    private int getIntProperty(java.lang.String, int)
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1, r2;
        int i0, i1;
        java.util.logging.LogManager $r4;
        java.lang.Exception $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r4 = r0.<java.util.logging.FileHandler: java.util.logging.LogManager manager>;

        r2 = virtualinvoke $r4.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>(r1);

        i1 = i0;

        if r2 == null goto label4;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return i1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        boolean $z0;
        java.lang.Integer $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r4;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, null, $r2, $r3);

        return;
    }

    public void <init>(java.lang.String, boolean) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        boolean z0, $z1;
        java.lang.Boolean $r2;
        java.lang.Integer $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r5;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, $r2, $r3, $r4);

        return;
    }

    public void <init>(java.lang.String, int, int) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2, $r5;
        java.lang.Integer $r3, $r4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r5;

     label1:
        if i0 < 0 goto label2;

        if i1 >= 1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("limit < 0 || count < 1");

        throw $r2;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, null, $r3, $r4);

        return;
    }

    public void <init>(java.lang.String, int, int, boolean) throws java.io.IOException
    {
        java.util.logging.FileHandler r0;
        java.lang.String r1;
        int i0, i1;
        boolean z0, $z1;
        java.lang.IllegalArgumentException $r2, $r6;
        java.lang.Boolean $r3;
        java.lang.Integer $r4, $r5;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock> = null;

        r0.<java.util.logging.FileHandler: java.lang.String fileName> = null;

        r0.<java.util.logging.FileHandler: int uniqueID> = -1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Pattern cannot be empty");

        throw $r6;

     label1:
        if i0 < 0 goto label2;

        if i1 >= 1 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("limit < 0 || count < 1");

        throw $r2;

     label3:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        specialinvoke r0.<java.util.logging.FileHandler: void init(java.lang.String,java.lang.Boolean,java.lang.Integer,java.lang.Integer)>(r1, $r3, $r4, $r5);

        return;
    }

    public void close()
    {
        java.util.logging.FileHandler r0;
        java.nio.channels.FileChannel r1;
        java.io.File r2, $r8;
        java.lang.String $r3, $r10, $r13;
        java.util.Hashtable $r4;
        java.nio.channels.FileLock $r6, $r7;
        java.lang.StringBuilder $r9, $r11, $r12;
        java.io.IOException $r14;

        r0 := @this: java.util.logging.FileHandler;

        specialinvoke r0.<java.util.logging.StreamHandler: void close()>();

        $r4 = <java.util.logging.FileHandler: java.util.Hashtable allLocks>;

        $r3 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r3);

     label1:
        $r6 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        r1 = virtualinvoke $r6.<java.nio.channels.FileLock: java.nio.channels.FileChannel channel()>();

        $r7 = r0.<java.util.logging.FileHandler: java.nio.channels.FileLock lock>;

        virtualinvoke $r7.<java.nio.channels.FileLock: void release()>();

        virtualinvoke r1.<java.nio.channels.FileChannel: void close()>();

        $r8 = new java.io.File;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r0.<java.util.logging.FileHandler: java.lang.String fileName>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".lck");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>($r13);

        r2 = $r8;

        virtualinvoke r2.<java.io.File: boolean delete()>();

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public synchronized void publish(java.util.logging.LogRecord)
    {
        java.util.logging.FileHandler r0;
        java.util.logging.LogRecord r1;
        int $i0, $i2;
        java.util.logging.FileHandler$MeasureOutputStream $r2;
        long $l1, $l3;
        byte $b4;

        r0 := @this: java.util.logging.FileHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        specialinvoke r0.<java.util.logging.StreamHandler: void publish(java.util.logging.LogRecord)>(r1);

        virtualinvoke r0.<java.util.logging.FileHandler: void flush()>();

        $i0 = r0.<java.util.logging.FileHandler: int limit>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<java.util.logging.FileHandler: java.util.logging.FileHandler$MeasureOutputStream output>;

        $l1 = virtualinvoke $r2.<java.util.logging.FileHandler$MeasureOutputStream: long getLength()>();

        $i2 = r0.<java.util.logging.FileHandler: int limit>;

        $l3 = (long) $i2;

        $b4 = $l1 cmp $l3;

        if $b4 < 0 goto label1;

        virtualinvoke r0.<java.util.logging.FileHandler: void findNextGeneration()>();

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0;

        <java.util.logging.FileHandler: java.lang.String DEFAULT_PATTERN> = "%h/java%u.log";

        <java.util.logging.FileHandler: boolean DEFAULT_APPEND> = 0;

        <java.util.logging.FileHandler: int DEFAULT_LIMIT> = 0;

        <java.util.logging.FileHandler: int DEFAULT_COUNT> = 1;

        <java.util.logging.FileHandler: java.lang.String LCK_EXT> = ".lck";

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <java.util.logging.FileHandler: java.util.Hashtable allLocks> = $r0;

        return;
    }
}
