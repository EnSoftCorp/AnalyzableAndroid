final class java.util.concurrent.LinkedTransferQueue$Node extends java.lang.Object
{
    final boolean isData;
    volatile java.lang.Object item;
    volatile java.util.concurrent.LinkedTransferQueue$Node next;
    volatile java.lang.Thread waiter;
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long itemOffset;
    private static final long nextOffset;
    private static final long waiterOffset;

    final boolean casNext(java.util.concurrent.LinkedTransferQueue$Node, java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue$Node r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        r2 := @parameter1: java.util.concurrent.LinkedTransferQueue$Node;

        $r3 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue$Node: long nextOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    final boolean casItem(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        java.lang.Object r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue$Node: long itemOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    void <init>(java.lang.Object, boolean)
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        java.lang.Object r1;
        boolean z0;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue$Node: long itemOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData> = z0;

        return;
    }

    final void forgetNext()
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        long $l0;
        sun.misc.Unsafe $r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        $r1 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue$Node: long nextOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r0);

        return;
    }

    final void forgetContents()
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        long $l0, $l1;
        sun.misc.Unsafe $r1, $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        $r1 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.LinkedTransferQueue$Node: long itemOffset>;

        virtualinvoke $r1.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r0);

        $r2 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $l1 = <java.util.concurrent.LinkedTransferQueue$Node: long waiterOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r0, $l1, null);

        return;
    }

    final boolean isMatched()
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        if r1 == r0 goto label3;

        if r1 != null goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $z0 = r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z2 != $z0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        return $z1;
    }

    final boolean isUnmatchedRequest()
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        boolean $z0, $z1;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        $z0 = r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z0 != 0 goto label1;

        $r1 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        if $r1 != null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    final boolean cannotPrecede(boolean)
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        boolean z0, z1, $z2, $z3;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        z0 := @parameter0: boolean;

        z1 = r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if z1 == z0 goto label3;

        $r2 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        r1 = $r2;

        if $r2 == r0 goto label3;

        if r1 == null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 != z1 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    final boolean tryMatchData()
    {
        java.util.concurrent.LinkedTransferQueue$Node r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Node;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        if r1 == null goto label1;

        if r1 == r0 goto label1;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedTransferQueue$Node: boolean casItem(java.lang.Object,java.lang.Object)>(r1, null);

        if $z0 == 0 goto label1;

        $r2 = r0.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Thread waiter>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>($r2);

        return 1;

     label1:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2, $r4, $r6;
        java.lang.reflect.Field $r3, $r5, $r7;
        long $l0, $l1, $l2;
        java.lang.Exception $r8, r10;
        java.lang.Error $r9;

        <java.util.concurrent.LinkedTransferQueue$Node: long serialVersionUID> = -3375979862319811754L;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/LinkedTransferQueue$Node";

        $r2 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("item");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.LinkedTransferQueue$Node: long itemOffset> = $l0;

        $r4 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.LinkedTransferQueue$Node: long nextOffset> = $l1;

        $r6 = <java.util.concurrent.LinkedTransferQueue$Node: sun.misc.Unsafe UNSAFE>;

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("waiter");

        $l2 = virtualinvoke $r6.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r7);

        <java.util.concurrent.LinkedTransferQueue$Node: long waiterOffset> = $l2;

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.Throwable)>(r10);

        throw $r9;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
