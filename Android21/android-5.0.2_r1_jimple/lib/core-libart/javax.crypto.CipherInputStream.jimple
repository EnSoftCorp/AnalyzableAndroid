public class javax.crypto.CipherInputStream extends java.io.FilterInputStream
{
    private final javax.crypto.Cipher cipher;
    private final byte[] inputBuffer;
    private byte[] outputBuffer;
    private int outputIndex;
    private int outputLength;
    private boolean finished;

    public void <init>(java.io.InputStream, javax.crypto.Cipher)
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream r1;
        javax.crypto.Cipher r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r3, $r4;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: javax.crypto.Cipher;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher> = r2;

        $i2 = virtualinvoke r2.<javax.crypto.Cipher: int getBlockSize()>();

        i0 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 1);

        $i3 = 8192 / i0;

        $i4 = $i3 * i0;

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, $i4);

        $r3 = newarray (byte)[i1];

        r0.<javax.crypto.CipherInputStream: byte[] inputBuffer> = $r3;

        if i0 <= 1 goto label1;

        $i6 = 2 * i0;

        goto label2;

     label1:
        $i6 = 0;

     label2:
        $i5 = i1 + $i6;

        $r4 = newarray (byte)[$i5];

        r0.<javax.crypto.CipherInputStream: byte[] outputBuffer> = $r4;

        return;
    }

    protected void <init>(java.io.InputStream)
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream r1;
        javax.crypto.NullCipher $r2;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: java.io.InputStream;

        $r2 = new javax.crypto.NullCipher;

        specialinvoke $r2.<javax.crypto.NullCipher: void <init>()>();

        specialinvoke r0.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>(r1, $r2);

        return;
    }

    private boolean fillBuffer() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Exception r1, $r17;
        boolean $z0, $z1;
        byte[] $r2, $r4, $r5, $r6, $r8, $r10, $r11, $r13;
        javax.crypto.Cipher $r3, $r9, $r12;
        java.io.InputStream $r7;
        java.lang.AssertionError $r14;
        javax.crypto.ShortBufferException $r15, r18;
        java.io.IOException $r16;

        r0 := @this: javax.crypto.CipherInputStream;

        $z0 = r0.<javax.crypto.CipherInputStream: boolean finished>;

        if $z0 == 0 goto label01;

        return 0;

     label01:
        r0.<javax.crypto.CipherInputStream: int outputIndex> = 0;

        r0.<javax.crypto.CipherInputStream: int outputLength> = 0;

     label02:
        $i2 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i2 != 0 goto label15;

        $r3 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r2 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        $i3 = lengthof $r2;

        i0 = virtualinvoke $r3.<javax.crypto.Cipher: int getOutputSize(int)>($i3);

        $r4 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        if $r4 == null goto label03;

        $r13 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i7 = lengthof $r13;

        if $i7 >= i0 goto label04;

     label03:
        $r5 = newarray (byte)[i0];

        r0.<javax.crypto.CipherInputStream: byte[] outputBuffer> = $r5;

     label04:
        $r7 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        $r6 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        i1 = virtualinvoke $r7.<java.io.InputStream: int read(byte[])>($r6);

        if i1 != -1 goto label11;

     label05:
        $r12 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r11 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i5 = virtualinvoke $r12.<javax.crypto.Cipher: int doFinal(byte[],int)>($r11, 0);

        r0.<javax.crypto.CipherInputStream: int outputLength> = $i5;

     label06:
        goto label08;

     label07:
        $r17 := @caughtexception;

        r1 = $r17;

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Error while finalizing cipher", r1);

        throw $r16;

     label08:
        r0.<javax.crypto.CipherInputStream: boolean finished> = 1;

        $i6 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i6 == 0 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        return $z1;

     label11:
        $r9 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        $r10 = r0.<javax.crypto.CipherInputStream: byte[] inputBuffer>;

        $r8 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i4 = virtualinvoke $r9.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>($r10, 0, i1, $r8, 0);

        r0.<javax.crypto.CipherInputStream: int outputLength> = $i4;

     label12:
        goto label14;

     label13:
        $r15 := @caughtexception;

        r18 = $r15;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>(r18);

        throw $r14;

     label14:
        goto label02;

     label15:
        return 1;

        catch java.lang.Exception from label05 to label06 with label07;
        catch javax.crypto.ShortBufferException from label11 to label12 with label13;
    }

    public int read() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream $r1;
        int $i0, $i1, $i2, $i3;
        byte[] $r2;
        byte $b4;
        short $s5;
        boolean $z0;
        java.lang.NullPointerException $r3;

        r0 := @this: javax.crypto.CipherInputStream;

        $r1 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r3;

     label1:
        $i1 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i0 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i1 != $i0 goto label2;

        $z0 = specialinvoke r0.<javax.crypto.CipherInputStream: boolean fillBuffer()>();

        if $z0 != 0 goto label2;

        return -1;

     label2:
        $r2 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i2 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i3 = $i2 + 1;

        r0.<javax.crypto.CipherInputStream: int outputIndex> = $i3;

        $b4 = $r2[$i2];

        $s5 = $b4 & 255;

        return $s5;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        byte[] r1, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.io.InputStream $r2;
        boolean $z0;
        java.lang.NullPointerException $r4;

        r0 := @this: javax.crypto.CipherInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        if $r2 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r4;

     label1:
        $i4 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i3 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        if $i4 != $i3 goto label2;

        $z0 = specialinvoke r0.<javax.crypto.CipherInputStream: boolean fillBuffer()>();

        if $z0 != 0 goto label2;

        return -1;

     label2:
        $i6 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        $i5 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        i2 = $i6 - $i5;

        if i2 >= i1 goto label3;

        i1 = i2;

     label3:
        if r1 == null goto label4;

        $r3 = r0.<javax.crypto.CipherInputStream: byte[] outputBuffer>;

        $i9 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r3, $i9, r1, i0, i1);

     label4:
        $i7 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i8 = $i7 + i1;

        r0.<javax.crypto.CipherInputStream: int outputIndex> = $i8;

        return i1;
    }

    public long skip(long) throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        long l0, $l1;

        r0 := @this: javax.crypto.CipherInputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l1;
    }

    public int available() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        int $i0, $i1, $i2;

        r0 := @this: javax.crypto.CipherInputStream;

        $i1 = r0.<javax.crypto.CipherInputStream: int outputLength>;

        $i0 = r0.<javax.crypto.CipherInputStream: int outputIndex>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void close() throws java.io.IOException
    {
        javax.crypto.CipherInputStream r0;
        java.io.InputStream $r2;
        javax.crypto.Cipher $r3;
        java.security.GeneralSecurityException $r5;

        r0 := @this: javax.crypto.CipherInputStream;

        $r2 = r0.<javax.crypto.CipherInputStream: java.io.InputStream in>;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label1:
        $r3 = r0.<javax.crypto.CipherInputStream: javax.crypto.Cipher cipher>;

        virtualinvoke $r3.<javax.crypto.Cipher: byte[] doFinal()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        javax.crypto.CipherInputStream r0;

        r0 := @this: javax.crypto.CipherInputStream;

        return 0;
    }
}
