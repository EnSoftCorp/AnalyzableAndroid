final class java.util.concurrent.ConcurrentHashMap$MapEntry extends java.lang.Object implements java.util.Map$Entry
{
    final java.lang.Object key;
    java.lang.Object val;
    final java.util.concurrent.ConcurrentHashMap map;

    void <init>(java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object r1, r2;
        java.util.concurrent.ConcurrentHashMap r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key> = r1;

        r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val> = r2;

        r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.util.concurrent.ConcurrentHashMap map> = r3;

        return;
    }

    public java.lang.Object getKey()
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        return $r1;
    }

    public java.lang.Object getValue()
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        return $r1;
    }

    public int hashCode()
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.Object $r2, $r5;
        java.lang.String $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object r1, r2, r3, $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.Map$Entry r4, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        $r5 = (java.util.Map$Entry) r1;

        r4 = $r5;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = $r6;

        if $r6 == null goto label3;

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = $r7;

        if $r7 == null goto label3;

        $r8 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        if r2 == $r8 goto label1;

        $r11 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label3;

     label1:
        $r9 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        if r3 == $r9 goto label2;

        $r10 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        $z2 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$MapEntry r0;
        java.lang.Object r1, r2, $r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$MapEntry;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        r2 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val>;

        r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object val> = r1;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = r0.<java.util.concurrent.ConcurrentHashMap$MapEntry: java.lang.Object key>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return r2;
    }
}
