public class java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock extends java.lang.Object implements java.util.concurrent.locks.Lock, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync;

    protected void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        r1 := @parameter0: java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r1.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync> = $r2;

        return;
    }

    public void lock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void acquire(int)>(1);

        return;
    }

    public void lockInterruptibly() throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void acquireInterruptibly(int)>(1);

        return;
    }

    public boolean tryLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean tryWriteLock()>();

        return $z0;
    }

    public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean tryAcquireNanos(int,long)>(1, $l1);

        return $z0;
    }

    public void unlock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean release(int)>(1);

        return;
    }

    public java.util.concurrent.locks.Condition newCondition()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.lang.Thread r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r9, $r10, $r12;
        java.lang.String $r4, $r8, $r11, $r13;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        r1 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getOwner()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        if r1 != null goto label1;

        $r11 = "[Unlocked]";

        goto label2;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Locked by thread ");

        $r8 = virtualinvoke r1.<java.lang.Thread: java.lang.String getName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public boolean isHeldByCurrentThread()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isHeldExclusively()>();

        return $z0;
    }

    public int getHoldCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getWriteHoldCount()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: long serialVersionUID> = -4992448646407690164L;

        return;
    }
}
