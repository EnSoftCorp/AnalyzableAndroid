class java.util.TreeMap$EntrySet extends java.util.AbstractSet
{
    final java.util.TreeMap this$0;

    void <init>(java.util.TreeMap)
    {
        java.util.TreeMap$EntrySet r0;
        java.util.TreeMap r1;

        r0 := @this: java.util.TreeMap$EntrySet;

        r1 := @parameter0: java.util.TreeMap;

        r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        java.util.TreeMap$EntrySet r0;
        java.util.TreeMap $r1;
        int $i0;

        r0 := @this: java.util.TreeMap$EntrySet;

        $r1 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        $i0 = $r1.<java.util.TreeMap: int size>;

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap$EntrySet r0;
        java.util.TreeMap$EntrySet$1 $r1;
        java.util.TreeMap $r2, $r4;
        java.util.TreeMap$Node $r3, $r5, $r6;

        r0 := @this: java.util.TreeMap$EntrySet;

        $r1 = new java.util.TreeMap$EntrySet$1;

        $r2 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        $r3 = $r2.<java.util.TreeMap: java.util.TreeMap$Node root>;

        if $r3 != null goto label1;

        $r6 = null;

        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        $r5 = $r4.<java.util.TreeMap: java.util.TreeMap$Node root>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

     label2:
        specialinvoke $r1.<java.util.TreeMap$EntrySet$1: void <init>(java.util.TreeMap$EntrySet,java.util.TreeMap$Node)>(r0, $r6);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$EntrySet r0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.util.Map$Entry $r2;
        java.util.TreeMap $r3;
        java.util.TreeMap$Node $r4;

        r0 := @this: java.util.TreeMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        $r2 = (java.util.Map$Entry) r1;

        $r4 = virtualinvoke $r3.<java.util.TreeMap: java.util.TreeMap$Node findByEntry(java.util.Map$Entry)>($r2);

        if $r4 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$EntrySet r0;
        java.lang.Object r1;
        java.util.TreeMap$Node r2;
        boolean $z0;
        java.util.Map$Entry $r3;
        java.util.TreeMap $r4, $r5;

        r0 := @this: java.util.TreeMap$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        $r3 = (java.util.Map$Entry) r1;

        r2 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Node findByEntry(java.util.Map$Entry)>($r3);

        if r2 != null goto label2;

        return 0;

     label2:
        $r5 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        virtualinvoke $r5.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>(r2);

        return 1;
    }

    public void clear()
    {
        java.util.TreeMap$EntrySet r0;
        java.util.TreeMap $r1;

        r0 := @this: java.util.TreeMap$EntrySet;

        $r1 = r0.<java.util.TreeMap$EntrySet: java.util.TreeMap this$0>;

        virtualinvoke $r1.<java.util.TreeMap: void clear()>();

        return;
    }
}
