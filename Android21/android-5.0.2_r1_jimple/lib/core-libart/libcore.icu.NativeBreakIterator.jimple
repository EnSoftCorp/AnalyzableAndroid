public final class libcore.icu.NativeBreakIterator extends java.lang.Object implements java.lang.Cloneable
{
    private static final int BI_CHAR_INSTANCE;
    private static final int BI_WORD_INSTANCE;
    private static final int BI_LINE_INSTANCE;
    private static final int BI_SENT_INSTANCE;
    private final long address;
    private final int type;
    private java.lang.String string;
    private java.text.CharacterIterator charIterator;

    private void <init>(long, int)
    {
        libcore.icu.NativeBreakIterator r0;
        long l0;
        int i1;
        java.text.StringCharacterIterator $r1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.icu.NativeBreakIterator: long address> = l0;

        r0.<libcore.icu.NativeBreakIterator: int type> = i1;

        $r1 = new java.text.StringCharacterIterator;

        specialinvoke $r1.<java.text.StringCharacterIterator: void <init>(java.lang.String)>("");

        r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator> = $r1;

        return;
    }

    public java.lang.Object clone()
    {
        libcore.icu.NativeBreakIterator r0, r1, $r2;
        long l0, $l1;
        int $i2;
        java.lang.String $r3;
        java.text.CharacterIterator $r4;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        l0 = staticinvoke <libcore.icu.NativeBreakIterator: long cloneImpl(long)>($l1);

        $r2 = new libcore.icu.NativeBreakIterator;

        $i2 = r0.<libcore.icu.NativeBreakIterator: int type>;

        specialinvoke $r2.<libcore.icu.NativeBreakIterator: void <init>(long,int)>(l0, $i2);

        r1 = $r2;

        $r3 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        r1.<libcore.icu.NativeBreakIterator: java.lang.String string> = $r3;

        $r4 = r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator>;

        r1.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator> = $r4;

        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.icu.NativeBreakIterator r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.text.CharacterIterator $r3, $r4;

        r0 := @this: libcore.icu.NativeBreakIterator;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof libcore.icu.NativeBreakIterator;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (libcore.icu.NativeBreakIterator) r1;

        $i1 = r0.<libcore.icu.NativeBreakIterator: int type>;

        $i0 = r2.<libcore.icu.NativeBreakIterator: int type>;

        if $i1 != $i0 goto label3;

        $r4 = r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator>;

        $r3 = r2.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator>;

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }

    public int hashCode()
    {
        libcore.icu.NativeBreakIterator r0;

        r0 := @this: libcore.icu.NativeBreakIterator;

        return 42;
    }

    protected void finalize() throws java.lang.Throwable
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.Throwable r1, $r2;
        long $l0;

        r0 := @this: libcore.icu.NativeBreakIterator;

     label1:
        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        staticinvoke <libcore.icu.NativeBreakIterator: void closeImpl(long)>($l0);

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int current()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i1 = staticinvoke <libcore.icu.NativeBreakIterator: int currentImpl(long,java.lang.String)>($l0, $r1);

        return $i1;
    }

    public int first()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i1 = staticinvoke <libcore.icu.NativeBreakIterator: int firstImpl(long,java.lang.String)>($l0, $r1);

        return $i1;
    }

    public int following(int)
    {
        libcore.icu.NativeBreakIterator r0;
        int i0, $i2;
        java.lang.String $r1;
        long $l1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i2 = staticinvoke <libcore.icu.NativeBreakIterator: int followingImpl(long,java.lang.String,int)>($l1, $r1, i0);

        return $i2;
    }

    public java.text.CharacterIterator getText()
    {
        libcore.icu.NativeBreakIterator r0;
        int i0;
        java.lang.String $r1;
        long $l1;
        java.text.CharacterIterator $r2, $r3;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        i0 = staticinvoke <libcore.icu.NativeBreakIterator: int currentImpl(long,java.lang.String)>($l1, $r1);

        $r2 = r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator>;

        interfaceinvoke $r2.<java.text.CharacterIterator: char setIndex(int)>(i0);

        $r3 = r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator>;

        return $r3;
    }

    public int last()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i1 = staticinvoke <libcore.icu.NativeBreakIterator: int lastImpl(long,java.lang.String)>($l0, $r1);

        return $i1;
    }

    public int next(int)
    {
        libcore.icu.NativeBreakIterator r0;
        int i0, $i2;
        java.lang.String $r1;
        long $l1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i2 = staticinvoke <libcore.icu.NativeBreakIterator: int nextImpl(long,java.lang.String,int)>($l1, $r1, i0);

        return $i2;
    }

    public int next()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i1 = staticinvoke <libcore.icu.NativeBreakIterator: int nextImpl(long,java.lang.String,int)>($l0, $r1, 1);

        return $i1;
    }

    public int previous()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        long $l0;
        int $i1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i1 = staticinvoke <libcore.icu.NativeBreakIterator: int previousImpl(long,java.lang.String)>($l0, $r1);

        return $i1;
    }

    public void setText(java.text.CharacterIterator)
    {
        libcore.icu.NativeBreakIterator r0;
        java.text.CharacterIterator r1;
        java.lang.StringBuilder r2, $r3;
        char c0;
        java.lang.String $r4;

        r0 := @this: libcore.icu.NativeBreakIterator;

        r1 := @parameter0: java.text.CharacterIterator;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r2 = $r3;

        c0 = interfaceinvoke r1.<java.text.CharacterIterator: char first()>();

     label1:
        if c0 == 65535 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        c0 = interfaceinvoke r1.<java.text.CharacterIterator: char next()>();

        goto label1;

     label2:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<libcore.icu.NativeBreakIterator: void setText(java.lang.String,java.text.CharacterIterator)>($r4, r1);

        return;
    }

    public void setText(java.lang.String)
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String r1;
        java.text.StringCharacterIterator $r2;

        r0 := @this: libcore.icu.NativeBreakIterator;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.text.StringCharacterIterator;

        specialinvoke $r2.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<libcore.icu.NativeBreakIterator: void setText(java.lang.String,java.text.CharacterIterator)>(r1, $r2);

        return;
    }

    private void setText(java.lang.String, java.text.CharacterIterator)
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String r1, $r3;
        java.text.CharacterIterator r2;
        long $l0;

        r0 := @this: libcore.icu.NativeBreakIterator;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.CharacterIterator;

        r0.<libcore.icu.NativeBreakIterator: java.lang.String string> = r1;

        r0.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator charIterator> = r2;

        $l0 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r3 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        staticinvoke <libcore.icu.NativeBreakIterator: void setTextImpl(long,java.lang.String)>($l0, $r3);

        return;
    }

    public boolean hasText()
    {
        libcore.icu.NativeBreakIterator r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: libcore.icu.NativeBreakIterator;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isBoundary(int)
    {
        libcore.icu.NativeBreakIterator r0;
        int i0;
        java.lang.String $r1;
        long $l1;
        boolean $z0;

        r0 := @this: libcore.icu.NativeBreakIterator;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $z0 = staticinvoke <libcore.icu.NativeBreakIterator: boolean isBoundaryImpl(long,java.lang.String,int)>($l1, $r1, i0);

        return $z0;
    }

    public int preceding(int)
    {
        libcore.icu.NativeBreakIterator r0;
        int i0, $i2;
        java.lang.String $r1;
        long $l1;

        r0 := @this: libcore.icu.NativeBreakIterator;

        i0 := @parameter0: int;

        $l1 = r0.<libcore.icu.NativeBreakIterator: long address>;

        $r1 = r0.<libcore.icu.NativeBreakIterator: java.lang.String string>;

        $i2 = staticinvoke <libcore.icu.NativeBreakIterator: int precedingImpl(long,java.lang.String,int)>($l1, $r1, i0);

        return $i2;
    }

    public static libcore.icu.NativeBreakIterator getCharacterInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.NativeBreakIterator $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @parameter0: java.util.Locale;

        $r1 = new libcore.icu.NativeBreakIterator;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $l0 = staticinvoke <libcore.icu.NativeBreakIterator: long getCharacterInstanceImpl(java.lang.String)>($r2);

        specialinvoke $r1.<libcore.icu.NativeBreakIterator: void <init>(long,int)>($l0, 1);

        return $r1;
    }

    public static libcore.icu.NativeBreakIterator getLineInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.NativeBreakIterator $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @parameter0: java.util.Locale;

        $r1 = new libcore.icu.NativeBreakIterator;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $l0 = staticinvoke <libcore.icu.NativeBreakIterator: long getLineInstanceImpl(java.lang.String)>($r2);

        specialinvoke $r1.<libcore.icu.NativeBreakIterator: void <init>(long,int)>($l0, 3);

        return $r1;
    }

    public static libcore.icu.NativeBreakIterator getSentenceInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.NativeBreakIterator $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @parameter0: java.util.Locale;

        $r1 = new libcore.icu.NativeBreakIterator;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $l0 = staticinvoke <libcore.icu.NativeBreakIterator: long getSentenceInstanceImpl(java.lang.String)>($r2);

        specialinvoke $r1.<libcore.icu.NativeBreakIterator: void <init>(long,int)>($l0, 4);

        return $r1;
    }

    public static libcore.icu.NativeBreakIterator getWordInstance(java.util.Locale)
    {
        java.util.Locale r0;
        libcore.icu.NativeBreakIterator $r1;
        java.lang.String $r2;
        long $l0;

        r0 := @parameter0: java.util.Locale;

        $r1 = new libcore.icu.NativeBreakIterator;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $l0 = staticinvoke <libcore.icu.NativeBreakIterator: long getWordInstanceImpl(java.lang.String)>($r2);

        specialinvoke $r1.<libcore.icu.NativeBreakIterator: void <init>(long,int)>($l0, 2);

        return $r1;
    }

    private static native long getCharacterInstanceImpl(java.lang.String);

    private static native long getWordInstanceImpl(java.lang.String);

    private static native long getLineInstanceImpl(java.lang.String);

    private static native long getSentenceInstanceImpl(java.lang.String);

    private static synchronized native long cloneImpl(long);

    private static synchronized native void closeImpl(long);

    private static synchronized native void setTextImpl(long, java.lang.String);

    private static synchronized native int precedingImpl(long, java.lang.String, int);

    private static synchronized native boolean isBoundaryImpl(long, java.lang.String, int);

    private static synchronized native int nextImpl(long, java.lang.String, int);

    private static synchronized native int previousImpl(long, java.lang.String);

    private static synchronized native int currentImpl(long, java.lang.String);

    private static synchronized native int firstImpl(long, java.lang.String);

    private static synchronized native int followingImpl(long, java.lang.String, int);

    private static synchronized native int lastImpl(long, java.lang.String);

    public static void <clinit>()
    {
        <libcore.icu.NativeBreakIterator: int BI_SENT_INSTANCE> = 4;

        <libcore.icu.NativeBreakIterator: int BI_LINE_INSTANCE> = 3;

        <libcore.icu.NativeBreakIterator: int BI_WORD_INSTANCE> = 2;

        <libcore.icu.NativeBreakIterator: int BI_CHAR_INSTANCE> = 1;

        return;
    }
}
