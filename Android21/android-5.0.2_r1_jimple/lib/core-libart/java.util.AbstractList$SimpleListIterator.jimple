class java.util.AbstractList$SimpleListIterator extends java.lang.Object implements java.util.Iterator
{
    int pos;
    int expectedModCount;
    int lastPosition;
    final java.util.AbstractList this$0;

    void <init>(java.util.AbstractList)
    {
        java.util.AbstractList$SimpleListIterator r0;
        java.util.AbstractList r1;
        int $i0;

        r0 := @this: java.util.AbstractList$SimpleListIterator;

        r1 := @parameter0: java.util.AbstractList;

        r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.AbstractList$SimpleListIterator: int pos> = -1;

        r0.<java.util.AbstractList$SimpleListIterator: int lastPosition> = -1;

        $i0 = r1.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SimpleListIterator: int expectedModCount> = $i0;

        return;
    }

    public boolean hasNext()
    {
        java.util.AbstractList$SimpleListIterator r0;
        int $i0, $i1, $i2;
        java.util.AbstractList $r1;
        boolean $z0;

        r0 := @this: java.util.AbstractList$SimpleListIterator;

        $i0 = r0.<java.util.AbstractList$SimpleListIterator: int pos>;

        $i1 = $i0 + 1;

        $r1 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i2 = virtualinvoke $r1.<java.util.AbstractList: int size()>();

        if $i1 >= $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object next()
    {
        java.util.AbstractList$SimpleListIterator r0;
        java.lang.Object r1;
        java.util.AbstractList $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.ConcurrentModificationException $r3;
        java.lang.IndexOutOfBoundsException $r5;
        java.util.NoSuchElementException $r6;

        r0 := @this: java.util.AbstractList$SimpleListIterator;

        $i1 = r0.<java.util.AbstractList$SimpleListIterator: int expectedModCount>;

        $r2 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i0 = $r2.<java.util.AbstractList: int modCount>;

        if $i1 != $i0 goto label4;

     label1:
        $r4 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i2 = r0.<java.util.AbstractList$SimpleListIterator: int pos>;

        $i3 = $i2 + 1;

        r1 = virtualinvoke $r4.<java.util.AbstractList: java.lang.Object get(int)>($i3);

        $i4 = r0.<java.util.AbstractList$SimpleListIterator: int pos>;

        $i5 = $i4 + 1;

        r0.<java.util.AbstractList$SimpleListIterator: int pos> = $i5;

        r0.<java.util.AbstractList$SimpleListIterator: int lastPosition> = $i5;

     label2:
        return r1;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.util.NoSuchElementException;

        specialinvoke $r6.<java.util.NoSuchElementException: void <init>()>();

        throw $r6;

     label4:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void remove()
    {
        java.util.AbstractList$SimpleListIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.AbstractList $r2, $r3, $r5;
        java.util.ConcurrentModificationException $r6, $r9;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: java.util.AbstractList$SimpleListIterator;

        $i0 = r0.<java.util.AbstractList$SimpleListIterator: int lastPosition>;

        if $i0 != -1 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        $i2 = r0.<java.util.AbstractList$SimpleListIterator: int expectedModCount>;

        $r2 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i1 = $r2.<java.util.AbstractList: int modCount>;

        if $i2 == $i1 goto label2;

        $r6 = new java.util.ConcurrentModificationException;

        specialinvoke $r6.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r6;

     label2:
        $r3 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i3 = r0.<java.util.AbstractList$SimpleListIterator: int lastPosition>;

        virtualinvoke $r3.<java.util.AbstractList: java.lang.Object remove(int)>($i3);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r9 = new java.util.ConcurrentModificationException;

        specialinvoke $r9.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r9;

     label5:
        $r5 = r0.<java.util.AbstractList$SimpleListIterator: java.util.AbstractList this$0>;

        $i4 = $r5.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SimpleListIterator: int expectedModCount> = $i4;

        $i6 = r0.<java.util.AbstractList$SimpleListIterator: int pos>;

        $i5 = r0.<java.util.AbstractList$SimpleListIterator: int lastPosition>;

        if $i6 != $i5 goto label6;

        $i7 = r0.<java.util.AbstractList$SimpleListIterator: int pos>;

        $i8 = $i7 - 1;

        r0.<java.util.AbstractList$SimpleListIterator: int pos> = $i8;

     label6:
        r0.<java.util.AbstractList$SimpleListIterator: int lastPosition> = -1;

        return;

        catch java.lang.IndexOutOfBoundsException from label2 to label3 with label4;
    }
}
