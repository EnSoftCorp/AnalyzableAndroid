public class org.kxml2.io.KXmlParser extends java.lang.Object implements org.xmlpull.v1.XmlPullParser, java.io.Closeable
{
    private static final java.lang.String PROPERTY_XMLDECL_VERSION;
    private static final java.lang.String PROPERTY_XMLDECL_STANDALONE;
    private static final java.lang.String PROPERTY_LOCATION;
    private static final java.lang.String FEATURE_RELAXED;
    private static final java.util.Map DEFAULT_ENTITIES;
    private static final int ELEMENTDECL;
    private static final int ENTITYDECL;
    private static final int ATTLISTDECL;
    private static final int NOTATIONDECL;
    private static final int PARAMETER_ENTITY_REF;
    private static final char[] START_COMMENT;
    private static final char[] END_COMMENT;
    private static final char[] COMMENT_DOUBLE_DASH;
    private static final char[] START_CDATA;
    private static final char[] END_CDATA;
    private static final char[] START_PROCESSING_INSTRUCTION;
    private static final char[] END_PROCESSING_INSTRUCTION;
    private static final char[] START_DOCTYPE;
    private static final char[] SYSTEM;
    private static final char[] PUBLIC;
    private static final char[] START_ELEMENT;
    private static final char[] START_ATTLIST;
    private static final char[] START_ENTITY;
    private static final char[] START_NOTATION;
    private static final char[] EMPTY;
    private static final char[] ANY;
    private static final char[] NDATA;
    private static final char[] NOTATION;
    private static final char[] REQUIRED;
    private static final char[] IMPLIED;
    private static final char[] FIXED;
    private static final java.lang.String UNEXPECTED_EOF;
    private static final java.lang.String ILLEGAL_TYPE;
    private static final int XML_DECLARATION;
    private java.lang.String location;
    private java.lang.String version;
    private java.lang.Boolean standalone;
    private java.lang.String rootElementName;
    private java.lang.String systemId;
    private java.lang.String publicId;
    private boolean processDocDecl;
    private boolean processNsp;
    private boolean relaxed;
    private boolean keepNamespaceAttributes;
    private java.lang.StringBuilder bufferCapture;
    private java.util.Map documentEntities;
    private java.util.Map defaultAttributes;
    private int depth;
    private java.lang.String[] elementStack;
    private java.lang.String[] nspStack;
    private int[] nspCounts;
    private java.io.Reader reader;
    private java.lang.String encoding;
    private org.kxml2.io.KXmlParser$ContentSource nextContentSource;
    private char[] buffer;
    private int position;
    private int limit;
    private int bufferStartLine;
    private int bufferStartColumn;
    private int type;
    private boolean isWhitespace;
    private java.lang.String namespace;
    private java.lang.String prefix;
    private java.lang.String name;
    private java.lang.String text;
    private boolean degenerated;
    private int attributeCount;
    private boolean parsedTopLevelStartTag;
    private java.lang.String[] attributes;
    private java.lang.String error;
    private boolean unresolved;
    public final libcore.internal.StringPool stringPool;
    private static final char[] SINGLE_QUOTE;
    private static final char[] DOUBLE_QUOTE;

    public void <init>()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String[] $r1, $r2, $r5;
        int[] $r3;
        char[] $r4;
        libcore.internal.StringPool $r6;

        r0 := @this: org.kxml2.io.KXmlParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.String)[16];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack> = $r1;

        $r2 = newarray (java.lang.String)[8];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack> = $r2;

        $r3 = newarray (int)[4];

        r0.<org.kxml2.io.KXmlParser: int[] nspCounts> = $r3;

        $r4 = newarray (char)[8192];

        r0.<org.kxml2.io.KXmlParser: char[] buffer> = $r4;

        r0.<org.kxml2.io.KXmlParser: int position> = 0;

        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

        $r5 = newarray (java.lang.String)[16];

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes> = $r5;

        $r6 = new libcore.internal.StringPool;

        specialinvoke $r6.<libcore.internal.StringPool: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: libcore.internal.StringPool stringPool> = $r6;

        return;
    }

    public void keepNamespaceAttributes()
    {
        org.kxml2.io.KXmlParser r0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r0.<org.kxml2.io.KXmlParser: boolean keepNamespaceAttributes> = 1;

        return;
    }

    private boolean adjustNsp() throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28;
        java.lang.String r1, r2, $r3, $r4, $r5, $r6, $r7, $r9, $r11, $r13, $r14, $r15, $r17, $r18, $r20, $r29, $r36, $r47, $r51, r53, r54, r55, r56, r57;
        java.lang.StringBuilder $r8, $r10, $r12, $r16, $r19, $r21, $r26, $r27, $r30, $r31, $r32, $r33, $r34, $r37, $r38, $r39;
        java.lang.String[] $r22, $r23, $r24, $r25, $r40, $r41, $r42, $r44, $r45, $r46, $r48, $r49, $r50, $r52;
        java.lang.RuntimeException $r28, $r35;
        int[] $r43;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 = 0;

        i0 = 0;

     label01:
        $i3 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i4 = $i3 << 2;

        if i0 >= $i4 goto label08;

        $r40 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i12 = i0 + 2;

        r1 = $r40[$i12];

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(58);

        if i1 == -1 goto label02;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        $i25 = i1 + 1;

        r53 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i25);

        goto label03;

     label02:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z3 == 0 goto label07;

        r2 = r1;

        r53 = null;

     label03:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z4 != 0 goto label04;

        z0 = 1;

        goto label07;

     label04:
        $r43 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i15 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i16 = $r43[$i15];

        $i13 = $i16 + 1;

        $r43[$i15] = $i13;

        i2 = $i16 << 1;

        $r41 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i14 = i2 + 2;

        $r42 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r41, $i14);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack> = $r42;

        $r45 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r45[i2] = r53;

        $r44 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i17 = i2 + 1;

        $r46 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i19 = i0 + 3;

        $r47 = $r46[$i19];

        $r44[$i17] = $r47;

        if r53 == null goto label05;

        $r52 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i22 = i0 + 3;

        $r51 = $r52[$i22];

        $z6 = virtualinvoke $r51.<java.lang.String: boolean isEmpty()>();

        if $z6 == 0 goto label05;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("illegal empty namespace");

     label05:
        $z5 = r0.<org.kxml2.io.KXmlParser: boolean keepNamespaceAttributes>;

        if $z5 == 0 goto label06;

        $r48 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r48[i0] = "http://www.w3.org/2000/xmlns/";

        z0 = 1;

        goto label07;

     label06:
        $r49 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i24 = i0 + 4;

        $r50 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i18 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i23 = $i18 - 1;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = $i23;

        $i21 = $i23 << 2;

        $i20 = $i21 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r49, $i24, $r50, i0, $i20);

        i0 = i0 + -4;

     label07:
        i0 = i0 + 4;

        goto label01;

     label08:
        if z0 == 0 goto label13;

        $i7 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i6 = $i7 << 2;

        i26 = $i6 - 4;

     label09:
        if i26 < 0 goto label13;

        $r22 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i8 = i26 + 2;

        r54 = $r22[$i8];

        i27 = virtualinvoke r54.<java.lang.String: int indexOf(int)>(58);

        if i27 != 0 goto label10;

        $z2 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z2 != 0 goto label10;

        $r35 = new java.lang.RuntimeException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal attribute name: ");

        $r39 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.String)>($r36);

        throw $r35;

     label10:
        if i27 == -1 goto label12;

        r55 = virtualinvoke r54.<java.lang.String: java.lang.String substring(int,int)>(0, i27);

        $i9 = i27 + 1;

        r56 = virtualinvoke r54.<java.lang.String: java.lang.String substring(int)>($i9);

        r57 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)>(r55);

        if r57 != null goto label11;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label11;

        $r28 = new java.lang.RuntimeException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Undefined Prefix: ");

        $r32 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r55);

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r30 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.String)>($r29);

        throw $r28;

     label11:
        $r23 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r23[i26] = r57;

        $r25 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i11 = i26 + 1;

        $r25[$i11] = r55;

        $r24 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i10 = i26 + 2;

        $r24[$i10] = r56;

     label12:
        i26 = i26 + -4;

        goto label09;

     label13:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        i28 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(58);

        if i28 != 0 goto label14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal tag name: ");

        $r18 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r20);

     label14:
        if i28 == -1 goto label15;

        $r14 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r13 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, i28);

        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = $r13;

        $r15 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $i5 = i28 + 1;

        $r17 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>($i5);

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r17;

     label15:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r5 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace(java.lang.String)>($r4);

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = $r5;

        $r6 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        if $r6 != null goto label17;

        $r7 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        if $r7 == null goto label16;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("undefined prefix: ");

        $r9 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r11);

     label16:
        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = "";

     label17:
        return z0;
    }

    private java.lang.String[] ensureCapacity(java.lang.String[], int)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String[] r1, r2;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        $i1 = lengthof r1;

        if $i1 < i0 goto label1;

        return r1;

     label1:
        $i2 = i0 + 16;

        r2 = newarray (java.lang.String)[$i2];

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i3);

        return r2;
    }

    private void checkRelaxed(java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r2, $r6;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5;
        org.xmlpull.v1.XmlPullParserException $r7;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z0 != 0 goto label1;

        $r7 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>(r1, r0, null);

        throw $r7;

     label1:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        if $r2 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String error> = $r6;

     label2:
        return;
    }

    public int next() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int next(boolean)>(0);

        return $i0;
    }

    public int nextToken() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int next(boolean)>(1);

        return $i0;
    }

    private int next(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder r1, $r15;
        java.lang.String r2, $r4, $r5, $r6, $r12, $r13, $r18, $r19, r22;
        java.io.Reader $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        org.xmlpull.v1.XmlPullParserException $r7, $r8, $r20, $r21;
        char[] $r9, $r10, $r14, $r17;
        org.kxml2.io.KXmlParser$ValueContext $r11, $r16;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r3 != null goto label01;

        $r21 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r21.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("setInput() must be called first.", r0, null);

        throw $r21;

     label01:
        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 != 3 goto label02;

        $i17 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i16 = $i17 - 1;

        r0.<org.kxml2.io.KXmlParser: int depth> = $i16;

     label02:
        $z2 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        if $z2 == 0 goto label03;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 0;

        r0.<org.kxml2.io.KXmlParser: int type> = 3;

        $i18 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i18;

     label03:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        if $r4 == null goto label05;

        if z0 == 0 goto label04;

        $r19 = r0.<org.kxml2.io.KXmlParser: java.lang.String error>;

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r19;

        r0.<org.kxml2.io.KXmlParser: int type> = 9;

        r0.<org.kxml2.io.KXmlParser: java.lang.String error> = null;

        $i19 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i19;

     label04:
        r0.<org.kxml2.io.KXmlParser: java.lang.String error> = null;

     label05:
        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType(boolean)>(0);

        r0.<org.kxml2.io.KXmlParser: int type> = $i1;

        $i2 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i2 != 998 goto label06;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void readXmlDeclaration()>();

        $i15 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType(boolean)>(0);

        r0.<org.kxml2.io.KXmlParser: int type> = $i15;

     label06:
        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = null;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 1;

        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = null;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = -1;

        if z0 != 0 goto label07;

        $z7 = 1;

        goto label08;

     label07:
        $z7 = 0;

     label08:
        z1 = $z7;

     label09:
        $i3 = r0.<org.kxml2.io.KXmlParser: int type>;

        tableswitch($i3)
        {
            case 1: goto label12;
            case 2: goto label10;
            case 3: goto label11;
            case 4: goto label14;
            case 5: goto label17;
            case 6: goto label13;
            case 7: goto label21;
            case 8: goto label19;
            case 9: goto label18;
            case 10: goto label20;
            default: goto label21;
        };

     label10:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseStartTag(boolean,boolean)>(0, z1);

        $i4 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i4;

     label11:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readEndTag()>();

        $i13 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i13;

     label12:
        $i14 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i14;

     label13:
        if z0 == 0 goto label14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        r1 = $r15;

        $r16 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext TEXT>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void readEntity(java.lang.StringBuilder,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>(r1, 1, z1, $r16);

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r13;

        goto label22;

     label14:
        if z0 != 0 goto label15;

        $z6 = 1;

        goto label16;

     label15:
        $z6 = 0;

     label16:
        $r11 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext TEXT>;

        $r12 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readValue(char,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>(60, $z6, z1, $r11);

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r12;

        $i12 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i12 != 0 goto label22;

        $z5 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z5 == 0 goto label22;

        r0.<org.kxml2.io.KXmlParser: int type> = 7;

        goto label22;

     label17:
        $r14 = <org.kxml2.io.KXmlParser: char[] START_CDATA>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r14);

        $r17 = <org.kxml2.io.KXmlParser: char[] END_CDATA>;

        $r18 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>($r17, 1);

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r18;

        goto label22;

     label18:
        r22 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readComment(boolean)>(z0);

        if z0 == 0 goto label22;

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = r22;

        goto label22;

     label19:
        $r10 = <org.kxml2.io.KXmlParser: char[] START_PROCESSING_INSTRUCTION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r10);

        $r9 = <org.kxml2.io.KXmlParser: char[] END_PROCESSING_INSTRUCTION>;

        r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>($r9, z0);

        if z0 == 0 goto label22;

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = r2;

        goto label22;

     label20:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readDoctype(boolean)>(z0);

        $z3 = r0.<org.kxml2.io.KXmlParser: boolean parsedTopLevelStartTag>;

        if $z3 == 0 goto label22;

        $r8 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r8.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unexpected token", r0, null);

        throw $r8;

     label21:
        $r20 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r20.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unexpected token", r0, null);

        throw $r20;

     label22:
        $i5 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i5 != 0 goto label24;

        $i9 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i9 == 6 goto label23;

        $i11 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i11 == 4 goto label23;

        $i10 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i10 != 5 goto label24;

     label23:
        $r7 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unexpected token", r0, null);

        throw $r7;

     label24:
        if z0 == 0 goto label25;

        $i7 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i7;

     label25:
        $i6 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i6 != 7 goto label26;

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = null;

     label26:
        i20 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType(boolean)>(0);

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        if $r5 == null goto label27;

        $r6 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        $z4 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label27;

        if i20 >= 4 goto label27;

        r0.<org.kxml2.io.KXmlParser: int type> = 4;

        $i8 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i8;

     label27:
        r0.<org.kxml2.io.KXmlParser: int type> = i20;

        goto label09;
    }

    private java.lang.String readUntil(char[], boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char[] r1, $r3, $r6, $r9, $r10;
        boolean z0, $z1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i17, $i18, $i19, $i20, $i21, i22;
        java.lang.StringBuilder r2, $r12, $r14;
        java.lang.String $r4, $r7, $r13, $r15;
        libcore.internal.StringPool $r8;
        char $c14, $c16;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: char[];

        z0 := @parameter1: boolean;

        i0 = r0.<org.kxml2.io.KXmlParser: int position>;

        r2 = null;

        if z0 == 0 goto label01;

        $r15 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        if $r15 == null goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r2 = $r12;

        $r13 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

     label01:
        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i2 = lengthof r1;

        $i5 = $i3 + $i2;

        $i4 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i5 <= $i4 goto label05;

        $i17 = r0.<org.kxml2.io.KXmlParser: int position>;

        if i0 >= $i17 goto label03;

        if z0 == 0 goto label03;

        if r2 != null goto label02;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        r2 = $r14;

     label02:
        $r10 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i20 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i21 = $i20 - i0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r10, i0, $i21);

     label03:
        $i19 = lengthof r1;

        $z1 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>($i19);

        if $z1 != 0 goto label04;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Unexpected EOF");

        r0.<org.kxml2.io.KXmlParser: int type> = 9;

        return null;

     label04:
        i0 = r0.<org.kxml2.io.KXmlParser: int position>;

     label05:
        i1 = 0;

     label06:
        $i6 = lengthof r1;

        if i1 >= $i6 goto label08;

        $r9 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i13 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i12 = $i13 + i1;

        $c16 = $r9[$i12];

        $c14 = r1[i1];

        if $c16 == $c14 goto label07;

        $i15 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i18 = $i15 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i18;

        goto label01;

     label07:
        i1 = i1 + 1;

        goto label06;

     label08:
        goto label09;

     label09:
        i22 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i8 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = lengthof r1;

        $i9 = $i8 + $i7;

        r0.<org.kxml2.io.KXmlParser: int position> = $i9;

        if z0 != 0 goto label10;

        return null;

     label10:
        if r2 != null goto label11;

        $r8 = r0.<org.kxml2.io.KXmlParser: libcore.internal.StringPool stringPool>;

        $r6 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i11 = i22 - i0;

        $r7 = virtualinvoke $r8.<libcore.internal.StringPool: java.lang.String get(char[],int,int)>($r6, i0, $i11);

        return $r7;

     label11:
        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i10 = i22 - i0;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r3, i0, $i10);

        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private void readXmlDeclaration() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String r1, $r4, $r6, $r7, $r9, $r10, $r13, $r17, $r20, $r21, $r22, $r24;
        char[] $r2;
        java.lang.String[] $r3, $r5, $r8, $r18, $r19, $r23;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r11, $r12, $r14;
        java.lang.Boolean $r15, $r16;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i1 = r0.<org.kxml2.io.KXmlParser: int bufferStartLine>;

        if $i1 != 0 goto label01;

        $i10 = r0.<org.kxml2.io.KXmlParser: int bufferStartColumn>;

        if $i10 != 0 goto label01;

        $i11 = r0.<org.kxml2.io.KXmlParser: int position>;

        if $i11 == 0 goto label02;

     label01:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("processing instructions must not start with xml");

     label02:
        $r2 = <org.kxml2.io.KXmlParser: char[] START_PROCESSING_INSTRUCTION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r2);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void parseStartTag(boolean,boolean)>(1, 1);

        $i2 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if $i2 < 1 goto label03;

        $r22 = "version";

        $r23 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r24 = $r23[2];

        $z4 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z4 != 0 goto label04;

     label03:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("version expected");

     label04:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r4 = $r3[3];

        r0.<org.kxml2.io.KXmlParser: java.lang.String version> = $r4;

        i0 = 1;

        $i3 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 >= $i3 goto label05;

        $r21 = "encoding";

        $r18 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r17 = $r18[6];

        $z3 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z3 == 0 goto label05;

        $r19 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r20 = $r19[7];

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = $r20;

        i0 = i0 + 1;

     label05:
        $i4 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 >= $i4 goto label09;

        $r7 = "standalone";

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i6 = 4 * i0;

        $i7 = $i6 + 2;

        $r6 = $r5[$i7];

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label09;

        $r8 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i8 = 4 * i0;

        $i9 = 3 + $i8;

        r1 = $r8[$i9];

        $r9 = "yes";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label06;

        $r15 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = $r15;

        goto label08;

     label06:
        $r10 = "no";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label07;

        $r16 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = $r16;

        goto label08;

     label07:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal standalone value: ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r13);

     label08:
        i0 = i0 + 1;

     label09:
        $i5 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 == $i5 goto label10;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("unexpected attributes in XML declaration");

     label10:
        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 1;

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = null;

        return;
    }

    private java.lang.String readComment(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, $z1;
        java.lang.String r1, $r6;
        char[] $r2, $r3, $r5;
        int $i0, $i1, $i2;
        org.xmlpull.v1.XmlPullParserException $r4;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        $r2 = <org.kxml2.io.KXmlParser: char[] START_COMMENT>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r2);

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 == 0 goto label1;

        $r5 = <org.kxml2.io.KXmlParser: char[] END_COMMENT>;

        $r6 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>($r5, z0);

        return $r6;

     label1:
        $r3 = <org.kxml2.io.KXmlParser: char[] COMMENT_DOUBLE_DASH>;

        r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>($r3, z0);

        $i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i0 == 62 goto label2;

        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Comments may not contain --", r0, null);

        throw $r4;

     label2:
        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i2;

        return r1;
    }

    private void readDoctype(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0;
        int i0, $i1, $i2, $i3;
        java.lang.Throwable r1, $r11;
        char[] $r2, $r4, $r13;
        java.lang.String $r3, $r10, $r18;
        java.lang.StringBuilder $r5, $r7, $r9, $r12, $r15, $r17, $r19;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        $r2 = <org.kxml2.io.KXmlParser: char[] START_DOCTYPE>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r2);

        i0 = -1;

        if z0 == 0 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture> = $r12;

        i0 = r0.<org.kxml2.io.KXmlParser: int position>;

     label1:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $r3 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String rootElementName> = $r3;

        specialinvoke r0.<org.kxml2.io.KXmlParser: boolean readExternalId(boolean,boolean)>(1, 1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i1 != 91 goto label2;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void readInternalSubset()>();

     label2:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

     label3:
        if z0 == 0 goto label7;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        $r4 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r4, 0, $i2);

        $r7 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, i0);

        $r9 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r10;

        r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture> = null;

        goto label7;

     label4:
        $r11 := @caughtexception;

        r1 = $r11;

     label5:
        if z0 == 0 goto label6;

        $r15 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        $r13 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r13, 0, $i3);

        $r17 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, i0);

        $r19 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String text> = $r18;

        r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture> = null;

     label6:
        throw r1;

     label7:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean readExternalId(boolean, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, z1;
        int i0, i1;
        char[] $r1, $r6;
        java.lang.String $r4, $r5;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i0 != 83 goto label1;

        $r6 = <org.kxml2.io.KXmlParser: char[] SYSTEM>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r6);

        goto label4;

     label1:
        if i0 != 80 goto label3;

        $r1 = <org.kxml2.io.KXmlParser: char[] PUBLIC>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        if z1 == 0 goto label2;

        $r5 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readQuotedId(boolean)>(1);

        r0.<org.kxml2.io.KXmlParser: java.lang.String publicId> = $r5;

        goto label4;

     label2:
        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readQuotedId(boolean)>(0);

        goto label4;

     label3:
        return 0;

     label4:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        if z0 != 0 goto label5;

        i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i1 == 34 goto label5;

        if i1 == 39 goto label5;

        return 1;

     label5:
        if z1 == 0 goto label6;

        $r4 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readQuotedId(boolean)>(1);

        r0.<org.kxml2.io.KXmlParser: java.lang.String systemId> = $r4;

        goto label7;

     label6:
        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readQuotedId(boolean)>(0);

     label7:
        return 1;
    }

    private java.lang.String readQuotedId(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0;
        int i0, $i1, $i2;
        char[] r1;
        org.xmlpull.v1.XmlPullParserException $r2;
        java.lang.String $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i0 != 34 goto label1;

        r1 = <org.kxml2.io.KXmlParser: char[] DOUBLE_QUOTE>;

        goto label3;

     label1:
        if i0 != 39 goto label2;

        r1 = <org.kxml2.io.KXmlParser: char[] SINGLE_QUOTE>;

        goto label3;

     label2:
        $r2 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r2.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Expected a quoted string", r0, null);

        throw $r2;

     label3:
        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i2 = $i1 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i2;

        $r3 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>(r1, z0);

        return $r3;
    }

    private void readInternalSubset() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3;
        org.xmlpull.v1.XmlPullParserException $r1, $r6;
        char[] $r3, $r4;

        r0 := @this: org.kxml2.io.KXmlParser;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(91);

     label01:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i1 != 93 goto label02;

        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i3 = $i2 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i3;

        return;

     label02:
        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekType(boolean)>(1);

        tableswitch(i0)
        {
            case 8: goto label07;
            case 9: goto label08;
            case 10: goto label10;
            case 11: goto label03;
            case 12: goto label05;
            case 13: goto label04;
            case 14: goto label06;
            case 15: goto label09;
            default: goto label10;
        };

     label03:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readElementDeclaration()>();

        goto label11;

     label04:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readAttributeListDeclaration()>();

        goto label11;

     label05:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readEntityDeclaration()>();

        goto label11;

     label06:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void readNotationDeclaration()>();

        goto label11;

     label07:
        $r3 = <org.kxml2.io.KXmlParser: char[] START_PROCESSING_INSTRUCTION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r3);

        $r4 = <org.kxml2.io.KXmlParser: char[] END_PROCESSING_INSTRUCTION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readUntil(char[],boolean)>($r4, 0);

        goto label11;

     label08:
        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readComment(boolean)>(0);

        goto label11;

     label09:
        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Parameter entity references are not supported", r0, null);

        throw $r1;

     label10:
        $r6 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unexpected token", r0, null);

        throw $r6;

     label11:
        goto label01;
    }

    private void readElementDeclaration() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char[] $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = <org.kxml2.io.KXmlParser: char[] START_ELEMENT>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void readContentSpec()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;
    }

    private void readContentSpec() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, i1, $i4, $i5, $i6, $i7;
        char[] $r1, $r2, $r4, $r5;
        char $c2, $c3;
        org.xmlpull.v1.XmlPullParserException $r3, $r6;

        r0 := @this: org.kxml2.io.KXmlParser;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i0 != 40 goto label07;

        i1 = 0;

     label01:
        if i0 != 40 goto label02;

        i1 = i1 + 1;

        goto label04;

     label02:
        if i0 != 41 goto label03;

        i1 = i1 + -1;

        goto label04;

     label03:
        if i0 != -1 goto label04;

        $r6 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r6.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unterminated element content spec", r0, null);

        throw $r6;

     label04:
        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i5 = $i4 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i5;

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i1 > 0 goto label01;

        if i0 == 42 goto label05;

        if i0 == 63 goto label05;

        if i0 != 43 goto label06;

     label05:
        $i6 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = $i6 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i7;

     label06:
        goto label10;

     label07:
        $r1 = <org.kxml2.io.KXmlParser: char[] EMPTY>;

        $c2 = $r1[0];

        if i0 != $c2 goto label08;

        $r5 = <org.kxml2.io.KXmlParser: char[] EMPTY>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r5);

        goto label10;

     label08:
        $r2 = <org.kxml2.io.KXmlParser: char[] ANY>;

        $c3 = $r2[0];

        if i0 != $c3 goto label09;

        $r4 = <org.kxml2.io.KXmlParser: char[] ANY>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r4);

        goto label10;

     label09:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Expected element content spec", r0, null);

        throw $r3;

     label10:
        return;
    }

    private void readAttributeListDeclaration() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i25, $i26, i27, i28, i29, i30;
        char[] $r4, $r5, $r6, $r10, $r11, $r12, $r15, $r16, $r17;
        char $c5, $c6, $c9, $c23, $c24;
        org.kxml2.io.KXmlParser$ValueContext $r8;
        org.xmlpull.v1.XmlPullParserException $r9, $r14, $r18;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r4 = <org.kxml2.io.KXmlParser: char[] START_ATTLIST>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r4);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

     label01:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i0 != 62 goto label02;

        $i26 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i25 = $i26 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i25;

        return;

     label02:
        r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i3 = $i1 + 1;

        $i2 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i3 < $i2 goto label03;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(2);

        if $z0 != 0 goto label03;

        $r18 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r18.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Malformed attribute list", r0, null);

        throw $r18;

     label03:
        $r5 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        $c6 = $r5[$i4];

        $r6 = <org.kxml2.io.KXmlParser: char[] NOTATION>;

        $c5 = $r6[0];

        if $c6 != $c5 goto label04;

        $r15 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i22 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i20 = $i22 + 1;

        $c23 = $r15[$i20];

        $r17 = <org.kxml2.io.KXmlParser: char[] NOTATION>;

        $c24 = $r17[1];

        if $c23 != $c24 goto label04;

        $r16 = <org.kxml2.io.KXmlParser: char[] NOTATION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r16);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

     label04:
        i27 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i27 != 40 goto label08;

        $i15 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i16 = $i15 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i16;

     label05:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i28 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i28 != 41 goto label06;

        $i18 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i21 = $i18 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i21;

        goto label09;

     label06:
        if i28 != 124 goto label07;

        $i19 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i17 = $i19 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i17;

        goto label05;

     label07:
        $r14 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r14.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Malformed attribute type", r0, null);

        throw $r14;

     label08:
        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

     label09:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i29 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i29 != 35 goto label14;

        $i14 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i13 = $i14 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i13;

        i30 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i30 != 82 goto label10;

        $r11 = <org.kxml2.io.KXmlParser: char[] REQUIRED>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r11);

        goto label13;

     label10:
        if i30 != 73 goto label11;

        $r10 = <org.kxml2.io.KXmlParser: char[] IMPLIED>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r10);

        goto label13;

     label11:
        if i30 != 70 goto label12;

        $r12 = <org.kxml2.io.KXmlParser: char[] FIXED>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r12);

        goto label13;

     label12:
        $r9 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r9.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Malformed attribute type", r0, null);

        throw $r9;

     label13:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i29 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

     label14:
        if i29 == 34 goto label15;

        if i29 != 39 goto label17;

     label15:
        $i8 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = $i8 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i7;

        $c9 = (char) i29;

        $r8 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ATTRIBUTE>;

        r3 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readValue(char,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>($c9, 1, 1, $r8);

        $i10 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i10 != i29 goto label16;

        $i12 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i11 = $i12 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i11;

     label16:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void defineAttributeDefault(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

     label17:
        goto label01;
    }

    private void defineAttributeDefault(java.lang.String, java.lang.String, java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, r2, r3;
        java.util.Map r4, $r5, $r6, $r10;
        java.lang.Object $r7;
        java.util.HashMap $r9, $r12;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes>;

        if $r5 != null goto label1;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes> = $r12;

     label1:
        $r6 = r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Map) $r7;

        if r4 != null goto label2;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r4 = $r9;

        $r10 = r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4);

     label2:
        interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    private void readEntityDeclaration() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, $z1, $z2;
        java.lang.String r1, r2;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i10, $i11;
        char[] $r3, $r8, $r11, $r13;
        org.kxml2.io.KXmlParser$ValueContext $r4;
        char $c4, $c9;
        java.util.Map $r5, $r6;
        java.util.HashMap $r9;
        org.xmlpull.v1.XmlPullParserException $r10;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r3 = <org.kxml2.io.KXmlParser: char[] START_ENTITY>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r3);

        z0 = 1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i1 != 37 goto label1;

        z0 = 0;

        $i11 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i10 = $i11 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i10;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

     label1:
        r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        i0 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i0 == 34 goto label2;

        if i0 != 39 goto label3;

     label2:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i3 = $i2 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i3;

        $c4 = (char) i0;

        $r4 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ENTITY_DECLARATION>;

        r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readValue(char,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>($c4, 1, 0, $r4);

        $i5 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i5 != i0 goto label5;

        $i6 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = $i6 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i7;

        goto label5;

     label3:
        $z2 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean readExternalId(boolean,boolean)>(1, 0);

        if $z2 == 0 goto label4;

        r2 = "";

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i8 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        $r11 = <org.kxml2.io.KXmlParser: char[] NDATA>;

        $c9 = $r11[0];

        if $i8 != $c9 goto label5;

        $r13 = <org.kxml2.io.KXmlParser: char[] NDATA>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r13);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        goto label5;

     label4:
        $r10 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r10.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Expected entity value or external ID", r0, null);

        throw $r10;

     label5:
        if z0 == 0 goto label7;

        $z1 = r0.<org.kxml2.io.KXmlParser: boolean processDocDecl>;

        if $z1 == 0 goto label7;

        $r6 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        if $r6 != null goto label6;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities> = $r9;

     label6:
        $r5 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        $r8 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

     label7:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;
    }

    private void readNotationDeclaration() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char[] $r1;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = <org.kxml2.io.KXmlParser: char[] START_NOTATION>;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char[])>($r1);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean readExternalId(boolean,boolean)>(0, 0);

        if $z0 != 0 goto label1;

        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Expected external ID or public ID for notation", r0, null);

        throw $r3;

     label1:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;
    }

    private void readEndTag() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1, $r3, $r4, $r8, $r13, $r15, $r16, $r17, $r21, $r25, $r26;
        java.lang.String[] $r2, $r9, $r14, $r18, $r19;
        boolean $z0, $z1;
        org.xmlpull.v1.XmlPullParserException $r5;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12, $r20, $r22, $r23, $r24;

        r0 := @this: org.kxml2.io.KXmlParser;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(60);

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(47);

        $r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        $i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i2 = $i1 - 1;

        i0 = $i2 * 4;

        $i3 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i3 != 0 goto label1;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("read end tag ");

        $r25 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with no tags open");

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r26);

        r0.<org.kxml2.io.KXmlParser: int type> = 9;

        return;

     label1:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i4 = i0 + 3;

        $r3 = $r2[$i4];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r14 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $r16 = $r14[i0];

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = $r16;

        $r18 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i6 = i0 + 1;

        $r17 = $r18[$i6];

        r0.<org.kxml2.io.KXmlParser: java.lang.String prefix> = $r17;

        $r19 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i7 = i0 + 2;

        $r21 = $r19[$i7];

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r21;

        goto label3;

     label2:
        $z1 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z1 != 0 goto label3;

        $r5 = new org.xmlpull.v1.XmlPullParserException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: /");

        $r9 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i5 = i0 + 3;

        $r8 = $r9[$i5];

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" read: ");

        $r13 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r15, r0, null);

        throw $r5;

     label3:
        return;
    }

    private int peekType(boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i26, $i27, $i29, $i30, $i32, $i33, $i34, $i36, $i37;
        char[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12;
        char $c3, $c9, $c16, $c19, $c22, $c25, $c28, $c31, $c35, $c38, $c39;
        org.xmlpull.v1.XmlPullParserException $r11, $r13;
        byte $b40;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i0 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i1 < $i0 goto label01;

        $z3 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z3 != 0 goto label01;

        return 1;

     label01:
        $r1 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $c3 = $r1[$i2];

        lookupswitch($c3)
        {
            case 37: goto label24;
            case 38: goto label02;
            case 60: goto label03;
            default: goto label27;
        };

     label02:
        return 6;

     label03:
        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i6 = $i4 + 3;

        $i5 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i6 < $i5 goto label04;

        $z2 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(4);

        if $z2 != 0 goto label04;

        $r13 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r13.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Dangling <", r0, null);

        throw $r13;

     label04:
        $r2 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i7 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i8 = $i7 + 1;

        $c9 = $r2[$i8];

        lookupswitch($c9)
        {
            case 33: goto label12;
            case 47: goto label05;
            case 63: goto label06;
            default: goto label23;
        };

     label05:
        return 3;

     label06:
        $i10 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i13 = $i10 + 5;

        $i11 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i13 < $i11 goto label07;

        $z1 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(6);

        if $z1 == 0 goto label11;

     label07:
        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i12 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i14 = $i12 + 2;

        $c16 = $r3[$i14];

        if $c16 == 120 goto label08;

        $r9 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i32 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i30 = $i32 + 2;

        $c35 = $r9[$i30];

        if $c35 != 88 goto label11;

     label08:
        $r4 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i15 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i17 = $i15 + 3;

        $c19 = $r4[$i17];

        if $c19 == 109 goto label09;

        $r8 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i29 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i27 = $i29 + 3;

        $c31 = $r8[$i27];

        if $c31 != 77 goto label11;

     label09:
        $r5 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i18 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i20 = $i18 + 4;

        $c22 = $r5[$i20];

        if $c22 == 108 goto label10;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i26 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i24 = $i26 + 4;

        $c28 = $r7[$i24];

        if $c28 != 76 goto label11;

     label10:
        $r6 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i21 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i23 = $i21 + 5;

        $c25 = $r6[$i23];

        if $c25 != 32 goto label11;

        return 998;

     label11:
        return 8;

     label12:
        $r10 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i33 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i34 = $i33 + 2;

        $c38 = $r10[$i34];

        lookupswitch($c38)
        {
            case 45: goto label15;
            case 65: goto label20;
            case 68: goto label13;
            case 69: goto label16;
            case 78: goto label21;
            case 91: goto label14;
            default: goto label22;
        };

     label13:
        return 10;

     label14:
        return 5;

     label15:
        return 9;

     label16:
        $r12 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i37 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i36 = $i37 + 3;

        $c39 = $r12[$i36];

        lookupswitch($c39)
        {
            case 76: goto label17;
            case 78: goto label18;
            default: goto label19;
        };

     label17:
        return 11;

     label18:
        return 12;

     label19:
        goto label22;

     label20:
        return 13;

     label21:
        return 14;

     label22:
        $r11 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r11.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unexpected <!", r0, null);

        throw $r11;

     label23:
        return 2;

     label24:
        if z0 == 0 goto label25;

        $b40 = 15;

        goto label26;

     label25:
        $b40 = 4;

     label26:
        return $b40;

     label27:
        return 4;
    }

    private void parseStartTag(boolean, boolean) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9;
        char c0, c2, $c15;
        java.lang.String r1, $r2, $r14, $r19, $r24, $r28, $r30, $r31, $r33, $r44, $r45, $r48, $r53;
        int i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, i57;
        char[] $r3, $r9, $r16;
        java.lang.String[] $r4, $r5, $r6, $r7, $r8, $r12, $r15, $r18, $r21, $r23, $r25, $r32, $r34, $r35, $r41, $r42, $r43, $r46, $r49, $r50;
        java.lang.StringBuilder $r10, $r11, $r13;
        org.kxml2.io.KXmlParser$ValueContext $r17;
        org.xmlpull.v1.XmlPullParserException $r20;
        int[] $r22, $r26, $r29, $r51, $r52, r55;
        java.util.Map $r27, $r39, r56;
        java.lang.Object $r36, $r37, $r38, $r47, $r54;
        java.util.Set $r40;
        java.util.Iterator r57;
        java.util.Map$Entry r58;

        r0 := @this: org.kxml2.io.KXmlParser;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 != 0 goto label01;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(60);

     label01:
        $r2 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = $r2;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = 0;

     label02:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i5 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i4 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i5 < $i4 goto label03;

        $z9 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z9 != 0 goto label03;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Unexpected EOF");

        return;

     label03:
        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i6 = r0.<org.kxml2.io.KXmlParser: int position>;

        c0 = $r3[$i6];

        if z0 == 0 goto label04;

        if c0 != 63 goto label06;

        $i54 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i53 = $i54 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i53;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        return;

     label04:
        if c0 != 47 goto label05;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 1;

        $i56 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i55 = $i56 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i55;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void read(char)>(62);

        goto label17;

     label05:
        if c0 != 62 goto label06;

        $i31 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i30 = $i31 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i30;

        goto label17;

     label06:
        r1 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readName()>();

        $i7 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i8 = $i7 + 1;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = $i8;

        i1 = $i7 * 4;

        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i9 = i1 + 4;

        $r6 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r4, $i9);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes> = $r6;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r5[i1] = "";

        $r7 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i10 = i1 + 1;

        $r7[$i10] = null;

        $r8 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i11 = i1 + 2;

        $r8[$i11] = r1;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i12 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i13 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i12 < $i13 goto label07;

        $z5 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z5 != 0 goto label07;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Unexpected EOF");

        return;

     label07:
        $r9 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i14 = r0.<org.kxml2.io.KXmlParser: int position>;

        $c15 = $r9[$i14];

        if $c15 != 61 goto label14;

        $i17 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i18 = $i17 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i18;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void skip()>();

        $i22 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i21 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i22 < $i21 goto label08;

        $z3 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z3 != 0 goto label08;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Unexpected EOF");

        return;

     label08:
        $r16 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i20 = r0.<org.kxml2.io.KXmlParser: int position>;

        c2 = $r16[$i20];

        if c2 == 39 goto label09;

        if c2 != 34 goto label10;

     label09:
        $i23 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i24 = $i23 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i24;

        goto label12;

     label10:
        $z4 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z4 == 0 goto label11;

        c2 = 32;

        goto label12;

     label11:
        $r20 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r20.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("attr value delimiter missing!", r0, null);

        throw $r20;

     label12:
        $r18 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i27 = i1 + 3;

        $r17 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ATTRIBUTE>;

        $r19 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String readValue(char,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>(c2, 1, z1, $r17);

        $r18[$i27] = $r19;

        if c2 == 32 goto label13;

        $i26 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i26 != c2 goto label13;

        $i25 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i28 = $i25 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i28;

     label13:
        goto label16;

     label14:
        $z2 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z2 == 0 goto label15;

        $r15 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i19 = i1 + 3;

        $r15[$i19] = r1;

        goto label16;

     label15:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attr.value missing f. ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r14);

        $r12 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i16 = i1 + 3;

        $r12[$i16] = r1;

     label16:
        goto label02;

     label17:
        $i29 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i34 = $i29 + 1;

        r0.<org.kxml2.io.KXmlParser: int depth> = $i34;

        i57 = $i29 * 4;

        $i33 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if $i33 != 1 goto label18;

        r0.<org.kxml2.io.KXmlParser: boolean parsedTopLevelStartTag> = 1;

     label18:
        $r21 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i32 = i57 + 4;

        $r23 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r21, $i32);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack> = $r23;

        $r25 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i38 = i57 + 3;

        $r24 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r25[$i38] = $r24;

        $i36 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $r22 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i35 = lengthof $r22;

        if $i36 < $i35 goto label19;

        $i52 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i51 = $i52 + 4;

        r55 = newarray (int)[$i51];

        $r51 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $r52 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i50 = lengthof $r52;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>($r51, 0, r55, 0, $i50);

        r0.<org.kxml2.io.KXmlParser: int[] nspCounts> = r55;

     label19:
        $r26 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i41 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $r29 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i37 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i39 = $i37 - 1;

        $i40 = $r29[$i39];

        $r26[$i41] = $i40;

        $z6 = r0.<org.kxml2.io.KXmlParser: boolean processNsp>;

        if $z6 == 0 goto label20;

        specialinvoke r0.<org.kxml2.io.KXmlParser: boolean adjustNsp()>();

        goto label21;

     label20:
        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = "";

     label21:
        $r27 = r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes>;

        if $r27 == null goto label24;

        $r39 = r0.<org.kxml2.io.KXmlParser: java.util.Map defaultAttributes>;

        $r31 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r38 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>($r31);

        r56 = (java.util.Map) $r38;

        if r56 == null goto label24;

        $r40 = interfaceinvoke r56.<java.util.Map: java.util.Set entrySet()>();

        r57 = interfaceinvoke $r40.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z7 = interfaceinvoke r57.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label24;

        $r36 = interfaceinvoke r57.<java.util.Iterator: java.lang.Object next()>();

        r58 = (java.util.Map$Entry) $r36;

        $r37 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r44 = (java.lang.String) $r37;

        $r45 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, $r44);

        if $r45 == null goto label23;

        goto label22;

     label23:
        $i45 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i46 = $i45 + 1;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = $i46;

        i3 = $i45 * 4;

        $r43 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i44 = i3 + 4;

        $r41 = specialinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String[] ensureCapacity(java.lang.String[],int)>($r43, $i44);

        r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes> = $r41;

        $r42 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r42[i3] = "";

        $r50 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i49 = i3 + 1;

        $r50[$i49] = null;

        $r49 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i48 = i3 + 2;

        $r47 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r48 = (java.lang.String) $r47;

        $r49[$i48] = $r48;

        $r46 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i47 = i3 + 3;

        $r54 = interfaceinvoke r58.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r53 = (java.lang.String) $r54;

        $r46[$i47] = $r53;

        goto label22;

     label24:
        $r34 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $r28 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        $r34[i57] = $r28;

        $r35 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i43 = i57 + 1;

        $r33 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r35[$i43] = $r33;

        $r32 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] elementStack>;

        $i42 = i57 + 2;

        $r30 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        $r32[$i42] = $r30;

        return;
    }

    private void readEntity(java.lang.StringBuilder, boolean, boolean, org.kxml2.io.KXmlParser$ValueContext) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.StringBuilder r1, $r12, $r15, $r17, $r18, $r31, $r36, $r37, $r38, $r39, $r40;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        org.kxml2.io.KXmlParser$ValueContext r2, $r10;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        char[] r3, $r4, $r23;
        char $c5, $c8;
        org.xmlpull.v1.XmlPullParserException $r7, $r32, $r35;
        java.util.Map $r9, $r14, $r19;
        java.lang.String $r11, $r16, $r27, $r28, $r41, $r43, r44, r47;
        java.lang.Object $r13, $r20;
        java.lang.NumberFormatException $r33;
        java.lang.AssertionError $r34;
        java.lang.IllegalArgumentException $r42;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.StringBuilder;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 := @parameter3: org.kxml2.io.KXmlParser$ValueContext;

        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r4 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i4 = $i3 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i4;

        $c5 = $r4[$i3];

        if $c5 == 38 goto label01;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label01:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

     label02:
        i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i1 != 59 goto label03;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $i9 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i11 = $i9 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i11;

        goto label11;

     label03:
        if i1 >= 128 goto label07;

        if i1 < 48 goto label04;

        if i1 <= 57 goto label07;

     label04:
        if i1 < 97 goto label05;

        if i1 <= 122 goto label07;

     label05:
        if i1 < 65 goto label06;

        if i1 <= 90 goto label07;

     label06:
        if i1 == 95 goto label07;

        if i1 == 45 goto label07;

        if i1 != 35 goto label08;

     label07:
        $i7 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i6 = $i7 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i6;

        $c8 = (char) i1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

        goto label10;

     label08:
        $z2 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z2 == 0 goto label09;

        return;

     label09:
        $r7 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r7.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("unterminated entity ref", r0, null);

        throw $r7;

     label10:
        goto label02;

     label11:
        $i10 = i0 + 1;

        $i13 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i12 = $i13 - 1;

        r44 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i10, $i12);

        if z0 == 0 goto label12;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = r44;

     label12:
        $z3 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z3 == 0 goto label19;

     label13:
        $z5 = virtualinvoke r44.<java.lang.String: boolean startsWith(java.lang.String)>("#x");

        if $z5 == 0 goto label14;

        $r28 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int)>(2);

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r28, 16);

        goto label15;

     label14:
        $r27 = virtualinvoke r44.<java.lang.String: java.lang.String substring(int)>(1);

        $i18 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r27);

     label15:
        i2 = $i18;

        $i17 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, $i17);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>(i2);

        r0.<org.kxml2.io.KXmlParser: boolean unresolved> = 0;

     label16:
        return;

     label17:
        $r33 := @caughtexception;

        $r32 = new org.xmlpull.v1.XmlPullParserException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character reference: &");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r41);

        throw $r32;

     label18:
        $r42 := @caughtexception;

        $r35 = new org.xmlpull.v1.XmlPullParserException;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character reference: &");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r43 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r43);

        throw $r35;

     label19:
        $r10 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ENTITY_DECLARATION>;

        if r2 != $r10 goto label20;

        return;

     label20:
        $r9 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        $r13 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        r47 = (java.lang.String) $r13;

        if r47 == null goto label21;

        $i16 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, $i16);

        r0.<org.kxml2.io.KXmlParser: boolean unresolved> = 0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        return;

     label21:
        $r14 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        if $r14 == null goto label24;

        $r19 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r44);

        $r23 = (char[]) $r20;

        r3 = $r23;

        if $r23 == null goto label24;

        $i15 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, $i15);

        r0.<org.kxml2.io.KXmlParser: boolean unresolved> = 0;

        $z4 = r0.<org.kxml2.io.KXmlParser: boolean processDocDecl>;

        if $z4 == 0 goto label22;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void pushContentSource(char[])>(r3);

        goto label23;

     label22:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>(r3);

     label23:
        return;

     label24:
        $r11 = r0.<org.kxml2.io.KXmlParser: java.lang.String systemId>;

        if $r11 == null goto label25;

        $i14 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i0, $i14);

        return;

     label25:
        r0.<org.kxml2.io.KXmlParser: boolean unresolved> = 1;

        if z1 == 0 goto label26;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unresolved: &");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r16);

     label26:
        return;

        catch java.lang.NumberFormatException from label13 to label16 with label17;
        catch java.lang.IllegalArgumentException from label13 to label16 with label18;
    }

    private java.lang.String readValue(char, boolean, boolean, org.kxml2.io.KXmlParser$ValueContext) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char c0, c2, $c15, $c21, $c26, $c31;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.kxml2.io.KXmlParser$ValueContext r1, $r3, $r18, $r20, $r22, $r25, $r26;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i27, $i28, $i29, $i30, $i32, $i33, $i34, $i35, $i36;
        java.lang.StringBuilder r2, $r21, $r30, $r32;
        char[] $r4, $r5, $r9, $r11, $r15, $r17, $r19, $r24;
        java.lang.String $r6, $r10, $r23, $r27, $r31;
        libcore.internal.StringPool $r8;
        java.lang.AssertionError $r12;
        org.xmlpull.v1.XmlPullParserException $r14;

        r0 := @this: org.kxml2.io.KXmlParser;

        c0 := @parameter0: char;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 := @parameter3: org.kxml2.io.KXmlParser$ValueContext;

        i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        r2 = null;

        $r3 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext TEXT>;

        if r1 != $r3 goto label01;

        $r31 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        if $r31 == null goto label01;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        r2 = $r32;

        $r27 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label01:
        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i4 < $i3 goto label07;

        $i36 = r0.<org.kxml2.io.KXmlParser: int position>;

        if i1 >= $i36 goto label03;

        if r2 != null goto label02;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        r2 = $r30;

     label02:
        $r24 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i34 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i35 = $i34 - i1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r24, i1, $i35);

     label03:
        $z7 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z7 != 0 goto label06;

        if r2 == null goto label04;

        $r23 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;

     label04:
        $r23 = "";

     label05:
        return $r23;

     label06:
        i1 = r0.<org.kxml2.io.KXmlParser: int position>;

     label07:
        $r4 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i5 = r0.<org.kxml2.io.KXmlParser: int position>;

        c2 = $r4[$i5];

        if c2 == c0 goto label31;

        if c0 != 32 goto label08;

        if c2 <= 32 goto label31;

        if c2 == 62 goto label31;

     label08:
        if c2 != 38 goto label09;

        if z0 != 0 goto label09;

        goto label31;

     label09:
        if c2 == 13 goto label15;

        if c2 != 10 goto label10;

        $r26 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ATTRIBUTE>;

        if r1 == $r26 goto label15;

     label10:
        if c2 == 38 goto label15;

        if c2 == 60 goto label15;

        if c2 != 93 goto label11;

        $r25 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext TEXT>;

        if r1 == $r25 goto label15;

     label11:
        if c2 != 37 goto label12;

        $r22 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ENTITY_DECLARATION>;

        if r1 == $r22 goto label15;

     label12:
        $z4 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if c2 > 32 goto label13;

        $z6 = 1;

        goto label14;

     label13:
        $z6 = 0;

     label14:
        $z3 = $z4 & $z6;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = $z3;

        $i33 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i32 = $i33 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i32;

        goto label01;

     label15:
        if r2 != null goto label16;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        r2 = $r21;

     label16:
        $r11 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i10 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i11 = $i10 - i1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r11, i1, $i11);

        if c2 != 13 goto label21;

        $i25 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i24 = $i25 + 1;

        $i23 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i24 < $i23 goto label17;

        $z5 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(2);

        if $z5 == 0 goto label18;

     label17:
        $r19 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i28 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i27 = $i28 + 1;

        $c26 = $r19[$i27];

        if $c26 != 10 goto label18;

        $i30 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i29 = $i30 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i29;

     label18:
        $r20 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ATTRIBUTE>;

        if r1 != $r20 goto label19;

        $c31 = 32;

        goto label20;

     label19:
        $c31 = 10;

     label20:
        c2 = $c31;

        goto label30;

     label21:
        if c2 != 10 goto label22;

        c2 = 32;

        goto label30;

     label22:
        if c2 != 38 goto label23;

        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 0;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void readEntity(java.lang.StringBuilder,boolean,boolean,org.kxml2.io.KXmlParser$ValueContext)>(r2, 0, z1, r1);

        i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        goto label01;

     label23:
        if c2 != 60 goto label25;

        $r18 = <org.kxml2.io.KXmlParser$ValueContext: org.kxml2.io.KXmlParser$ValueContext ATTRIBUTE>;

        if r1 != $r18 goto label24;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Illegal: \"<\" inside attribute value");

     label24:
        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 0;

        goto label30;

     label25:
        if c2 != 93 goto label28;

        $i12 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i13 = $i12 + 2;

        $i14 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i13 < $i14 goto label26;

        $z2 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(3);

        if $z2 == 0 goto label27;

     label26:
        $r15 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i16 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i17 = $i16 + 1;

        $c15 = $r15[$i17];

        if $c15 != 93 goto label27;

        $r17 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i18 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i22 = $i18 + 2;

        $c21 = $r17[$i22];

        if $c21 != 62 goto label27;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("Illegal: \"]]>\" outside CDATA section");

     label27:
        r0.<org.kxml2.io.KXmlParser: boolean isWhitespace> = 0;

        goto label30;

     label28:
        if c2 != 37 goto label29;

        $r14 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r14.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("This parser doesn\'t support parameter entities", r0, null);

        throw $r14;

     label29:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label30:
        $i19 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i20 = $i19 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i20;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        goto label01;

     label31:
        if r2 != null goto label32;

        $r8 = r0.<org.kxml2.io.KXmlParser: libcore.internal.StringPool stringPool>;

        $r9 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i9 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i8 = $i9 - i1;

        $r10 = virtualinvoke $r8.<libcore.internal.StringPool: java.lang.String get(char[],int,int)>($r9, i1, $i8);

        return $r10;

     label32:
        $r5 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i6 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = $i6 - i1;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r5, i1, $i7);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void read(char) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char c0, $c4;
        int i1, $i2, $i3;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: org.kxml2.io.KXmlParser;

        c0 := @parameter0: char;

        i1 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if i1 == c0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: \'");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' actual: \'");

        $c4 = (char) i1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r7);

        if i1 != -1 goto label1;

        return;

     label1:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i3 = $i2 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i3;

        return;
    }

    private void read(char[]) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char[] r1, $r2, $r10;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i13, $i14, $i15;
        char $c11, $c12;
        java.lang.StringBuilder $r3, $r4, $r5, $r8, $r9, $r12, $r13, $r14, $r15, $r18;
        java.lang.String $r6, $r7, $r11, $r16, $r17;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: char[];

        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i1 = lengthof r1;

        $i4 = $i2 + $i1;

        $i3 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i4 <= $i3 goto label1;

        $i15 = lengthof r1;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>($i15);

        if $z0 != 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: \'");

        $r17 = new java.lang.String;

        specialinvoke $r17.<java.lang.String: void <init>(char[])>(r1);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r15 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but was EOF");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r16);

        return;

     label1:
        i0 = 0;

     label2:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label4;

        $r2 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i9 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i10 = $i9 + i0;

        $c12 = $r2[$i10];

        $c11 = r1[i0];

        if $c12 == $c11 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: \"");

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" but was \"");

        $r7 = new java.lang.String;

        $r10 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i13 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i14 = lengthof r1;

        specialinvoke $r7.<java.lang.String: void <init>(char[],int,int)>($r10, $i13, $i14);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...\"");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>($r11);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $i7 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i6 = lengthof r1;

        $i8 = $i7 + $i6;

        r0.<org.kxml2.io.KXmlParser: int position> = $i8;

        return;
    }

    private int peekCharacter() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1, $i2;
        char[] $r1;
        char $c3;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i0 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i1 < $i0 goto label1;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z0 == 0 goto label2;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $c3 = $r1[$i2];

        return $c3;

     label2:
        return -1;
    }

    private boolean fillBuffer(int) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29;
        org.kxml2.io.KXmlParser$ContentSource $r1;
        java.lang.StringBuilder $r2, $r10;
        char[] $r3, $r4, $r6, $r7, $r8, $r11;
        java.io.Reader $r5;
        char $c19;
        org.xmlpull.v1.XmlPullParserException $r12;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

     label01:
        $r1 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        if $r1 == null goto label03;

        $i27 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i26 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i27 >= $i26 goto label02;

        $r12 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r12.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Unbalanced entity!", r0, null);

        throw $r12;

     label02:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void popContentSource()>();

        $i25 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i24 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i28 = $i25 - $i24;

        if $i28 < i0 goto label01;

        return 1;

     label03:
        i1 = 0;

     label04:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        if i1 >= $i2 goto label07;

        $r11 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c19 = $r11[i1];

        if $c19 != 10 goto label05;

        $i20 = r0.<org.kxml2.io.KXmlParser: int bufferStartLine>;

        $i21 = $i20 + 1;

        r0.<org.kxml2.io.KXmlParser: int bufferStartLine> = $i21;

        r0.<org.kxml2.io.KXmlParser: int bufferStartColumn> = 0;

        goto label06;

     label05:
        $i22 = r0.<org.kxml2.io.KXmlParser: int bufferStartColumn>;

        $i23 = $i22 + 1;

        r0.<org.kxml2.io.KXmlParser: int bufferStartColumn> = $i23;

     label06:
        i1 = i1 + 1;

        goto label04;

     label07:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        if $r2 == null goto label08;

        $r10 = r0.<org.kxml2.io.KXmlParser: java.lang.StringBuilder bufferCapture>;

        $r8 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i18 = r0.<org.kxml2.io.KXmlParser: int position>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r8, 0, $i18);

     label08:
        $i4 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        if $i4 == $i3 goto label09;

        $i15 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i12 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i14 = $i15 - $i12;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i14;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i17 = r0.<org.kxml2.io.KXmlParser: int position>;

        $r6 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i16 = r0.<org.kxml2.io.KXmlParser: int limit>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r7, $i17, $r6, 0, $i16);

        goto label10;

     label09:
        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

     label10:
        r0.<org.kxml2.io.KXmlParser: int position> = 0;

     label11:
        $r5 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r4 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i8 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i6 = lengthof $r3;

        $i5 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i7 = $i6 - $i5;

        $i9 = virtualinvoke $r5.<java.io.Reader: int read(char[],int,int)>($r4, $i8, $i7);

        i29 = $i9;

        if $i9 == -1 goto label12;

        $i11 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i10 = $i11 + i29;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i10;

        $i13 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i13 < i0 goto label11;

        return 1;

     label12:
        return 0;
    }

    private java.lang.String readName() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.StringBuilder r1, $r13;
        char c1, c18;
        char[] $r2, $r3, $r5, $r7, $r11;
        java.lang.String $r6, $r8, $r12;
        libcore.internal.StringPool $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i2 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i3 < $i2 goto label01;

        $z1 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z1 != 0 goto label01;

        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("name expected");

        return "";

     label01:
        i0 = r0.<org.kxml2.io.KXmlParser: int position>;

        r1 = null;

        $r2 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        c1 = $r2[$i4];

        if c1 < 97 goto label02;

        if c1 <= 122 goto label04;

     label02:
        if c1 < 65 goto label03;

        if c1 <= 90 goto label04;

     label03:
        if c1 == 95 goto label04;

        if c1 == 58 goto label04;

        if c1 >= 192 goto label04;

        $z2 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        if $z2 == 0 goto label05;

     label04:
        $i5 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i6 = $i5 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i6;

        goto label06;

     label05:
        specialinvoke r0.<org.kxml2.io.KXmlParser: void checkRelaxed(java.lang.String)>("name expected");

        return "";

     label06:
        $i8 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i7 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i8 < $i7 goto label09;

        if r1 != null goto label07;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        r1 = $r13;

     label07:
        $r11 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i17 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i16 = $i17 - i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r11, i0, $i16);

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z0 != 0 goto label08;

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label08:
        i0 = r0.<org.kxml2.io.KXmlParser: int position>;

     label09:
        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i9 = r0.<org.kxml2.io.KXmlParser: int position>;

        c18 = $r3[$i9];

        if c18 < 97 goto label10;

        if c18 <= 122 goto label13;

     label10:
        if c18 < 65 goto label11;

        if c18 <= 90 goto label13;

     label11:
        if c18 < 48 goto label12;

        if c18 <= 57 goto label13;

     label12:
        if c18 == 95 goto label13;

        if c18 == 45 goto label13;

        if c18 == 58 goto label13;

        if c18 == 46 goto label13;

        if c18 < 183 goto label14;

     label13:
        $i10 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i11 = $i10 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i11;

        goto label06;

     label14:
        if r1 != null goto label15;

        $r9 = r0.<org.kxml2.io.KXmlParser: libcore.internal.StringPool stringPool>;

        $r7 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i14 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i15 = $i14 - i0;

        $r8 = virtualinvoke $r9.<libcore.internal.StringPool: java.lang.String get(char[],int,int)>($r7, i0, $i15);

        return $r8;

     label15:
        $r5 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i13 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i12 = $i13 - i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>($r5, i0, $i12);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void skip() throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        char c0;
        int $i1, $i2, $i3, $i4, $i5;
        char[] $r1;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

     label1:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i2 < $i1 goto label2;

        $z0 = specialinvoke r0.<org.kxml2.io.KXmlParser: boolean fillBuffer(int)>(1);

        if $z0 == 0 goto label4;

     label2:
        $r1 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i3 = r0.<org.kxml2.io.KXmlParser: int position>;

        c0 = $r1[$i3];

        if c0 <= 32 goto label3;

        goto label4;

     label3:
        $i4 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i5 = $i4 + 1;

        r0.<org.kxml2.io.KXmlParser: int position> = $i5;

        goto label1;

     label4:
        return;
    }

    public void setInput(java.io.Reader) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.io.Reader r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.io.Reader;

        r0.<org.kxml2.io.KXmlParser: java.io.Reader reader> = r1;

        r0.<org.kxml2.io.KXmlParser: int type> = 0;

        r0.<org.kxml2.io.KXmlParser: java.lang.String name> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String namespace> = null;

        r0.<org.kxml2.io.KXmlParser: boolean degenerated> = 0;

        r0.<org.kxml2.io.KXmlParser: int attributeCount> = -1;

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.String version> = null;

        r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone> = null;

        if r1 != null goto label1;

        return;

     label1:
        r0.<org.kxml2.io.KXmlParser: int position> = 0;

        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

        r0.<org.kxml2.io.KXmlParser: int bufferStartLine> = 0;

        r0.<org.kxml2.io.KXmlParser: int bufferStartColumn> = 0;

        r0.<org.kxml2.io.KXmlParser: int depth> = 0;

        r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities> = null;

        return;
    }

    public void setInput(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.io.InputStream r1;
        java.lang.String r2, r3, $r8, $r31;
        boolean z0, $z1;
        int i0, i1, i2, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i17, $i18, $i19, $i22, $i23, $i27, $i28, $i30, $i32, $i33, i35, i36, i37;
        char c3, $c13, $c15, $c16, $c20, $c21, $c24, $c25, $c26, $c29, $c31, $c34;
        java.io.InputStreamReader $r4;
        char[] $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r27;
        java.lang.IllegalArgumentException $r24;
        java.lang.Exception $r25, r32;
        org.xmlpull.v1.XmlPullParserException $r26;
        java.lang.StringBuilder $r28, $r29, $r30;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r0.<org.kxml2.io.KXmlParser: int position> = 0;

        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

        if r2 != null goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        if r1 != null goto label03;

        $r24 = new java.lang.IllegalArgumentException;

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("is == null");

        throw $r24;

     label03:
        if z0 == 0 goto label21;

        i0 = 0;

     label04:
        $i9 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i9 >= 4 goto label06;

        i1 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i1 != -1 goto label05;

        goto label06;

     label05:
        $i30 = i0 << 8;

        i0 = $i30 | i1;

        $r27 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i32 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i33 = $i32 + 1;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i33;

        $c34 = (char) i1;

        $r27[$i32] = $c34;

        goto label04;

     label06:
        $i10 = r0.<org.kxml2.io.KXmlParser: int limit>;

        if $i10 != 4 goto label21;

        lookupswitch(i0)
        {
            case -131072: goto label08;
            case 60: goto label09;
            case 65279: goto label07;
            case 3932223: goto label11;
            case 1006632960: goto label10;
            case 1006649088: goto label12;
            case 1010792557: goto label13;
            default: goto label18;
        };

     label07:
        r2 = "UTF-32BE";

        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

        goto label21;

     label08:
        r2 = "UTF-32LE";

        r0.<org.kxml2.io.KXmlParser: int limit> = 0;

        goto label21;

     label09:
        r2 = "UTF-32BE";

        $r13 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r13[0] = 60;

        r0.<org.kxml2.io.KXmlParser: int limit> = 1;

        goto label21;

     label10:
        r2 = "UTF-32LE";

        $r14 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r14[0] = 60;

        r0.<org.kxml2.io.KXmlParser: int limit> = 1;

        goto label21;

     label11:
        r2 = "UTF-16BE";

        $r15 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r15[0] = 60;

        $r12 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r12[1] = 63;

        r0.<org.kxml2.io.KXmlParser: int limit> = 2;

        goto label21;

     label12:
        r2 = "UTF-16LE";

        $r10 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r10[0] = 60;

        $r11 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r11[1] = 63;

        r0.<org.kxml2.io.KXmlParser: int limit> = 2;

        goto label21;

     label13:
        i35 = virtualinvoke r1.<java.io.InputStream: int read()>();

        if i35 != -1 goto label14;

        goto label21;

     label14:
        $r7 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i12 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i11 = $i12 + 1;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i11;

        $c13 = (char) i35;

        $r7[$i12] = $c13;

        if i35 != 62 goto label17;

        $r8 = new java.lang.String;

        $r9 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i14 = r0.<org.kxml2.io.KXmlParser: int limit>;

        specialinvoke $r8.<java.lang.String: void <init>(char[],int,int)>($r9, 0, $i14);

        r3 = $r8;

        i2 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>("encoding");

        if i2 == -1 goto label21;

     label15:
        $c15 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        if $c15 == 34 goto label16;

        $c16 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        if $c16 == 39 goto label16;

        i2 = i2 + 1;

        goto label15;

     label16:
        i36 = i2 + 1;

        c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i2);

        i4 = virtualinvoke r3.<java.lang.String: int indexOf(int,int)>(c3, i36);

        r2 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(i36, i4);

        goto label21;

     label17:
        goto label13;

     label18:
        $i18 = i0 & -65536;

        if $i18 != -16842752 goto label19;

        r2 = "UTF-16BE";

        $r23 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r20 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c25 = $r20[2];

        $i28 = $c25 << 8;

        $r22 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c29 = $r22[3];

        $i27 = $i28 | $c29;

        $c31 = (char) $i27;

        $r23[0] = $c31;

        r0.<org.kxml2.io.KXmlParser: int limit> = 1;

        goto label21;

     label19:
        $i19 = i0 & -65536;

        if $i19 != -131072 goto label20;

        r2 = "UTF-16LE";

        $r21 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r17 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c20 = $r17[3];

        $i23 = $c20 << 8;

        $r19 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c24 = $r19[2];

        $i22 = $i23 | $c24;

        $c26 = (char) $i22;

        $r21[0] = $c26;

        r0.<org.kxml2.io.KXmlParser: int limit> = 1;

        goto label21;

     label20:
        $i17 = i0 & -256;

        if $i17 != -272908544 goto label21;

        r2 = "UTF-8";

        $r18 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r16 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c21 = $r16[3];

        $r18[0] = $c21;

        r0.<org.kxml2.io.KXmlParser: int limit> = 1;

     label21:
        if r2 != null goto label22;

        r2 = "UTF-8";

     label22:
        i37 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $r4 = new java.io.InputStreamReader;

        specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, r2);

        virtualinvoke r0.<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)>($r4);

        r0.<org.kxml2.io.KXmlParser: java.lang.String encoding> = r2;

        r0.<org.kxml2.io.KXmlParser: int limit> = i37;

        if z0 != 0 goto label23;

        $i5 = specialinvoke r0.<org.kxml2.io.KXmlParser: int peekCharacter()>();

        if $i5 != 65279 goto label23;

        $i6 = r0.<org.kxml2.io.KXmlParser: int limit>;

        $i7 = $i6 - 1;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i7;

        $r6 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $r5 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i8 = r0.<org.kxml2.io.KXmlParser: int limit>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r6, 1, $r5, 0, $i8);

     label23:
        goto label25;

     label24:
        $r25 := @caughtexception;

        r32 = $r25;

        $r26 = new org.xmlpull.v1.XmlPullParserException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stream or encoding: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r32);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r31, r0, r32);

        throw $r26;

     label25:
        return;

        catch java.lang.Exception from label03 to label23 with label24;
    }

    public void close() throws java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        java.io.Reader $r1, $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r1 == null goto label1;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        virtualinvoke $r2.<java.io.Reader: void close()>();

     label1:
        return;
    }

    public boolean getFeature(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        $r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $z5 = r0.<org.kxml2.io.KXmlParser: boolean processNsp>;

        return $z5;

     label1:
        $r3 = "http://xmlpull.org/v1/doc/features.html#relaxed";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $z4 = r0.<org.kxml2.io.KXmlParser: boolean relaxed>;

        return $z4;

     label2:
        $r4 = "http://xmlpull.org/v1/doc/features.html#process-docdecl";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $z3 = r0.<org.kxml2.io.KXmlParser: boolean processDocDecl>;

        return $z3;

     label3:
        return 0;
    }

    public java.lang.String getInputEncoding()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String encoding>;

        return $r1;
    }

    public void defineEntityReplacementText(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, r2;
        boolean $z0;
        java.io.Reader $r3;
        java.util.Map $r4, $r5;
        char[] $r6;
        java.util.HashMap $r8;
        java.lang.IllegalStateException $r9, $r10;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean processDocDecl>;

        if $z0 == 0 goto label1;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Entity replacement text may not be defined with DOCTYPE processing enabled.");

        throw $r10;

     label1:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r3 != null goto label2;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Entity replacement text must be defined after setInput()");

        throw $r9;

     label2:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        if $r4 != null goto label3;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities> = $r8;

     label3:
        $r5 = r0.<org.kxml2.io.KXmlParser: java.util.Map documentEntities>;

        $r6 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        return;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r2, $r4, $r6;
        boolean $z0, $z1, $z2;
        java.io.Reader $r3;
        java.lang.Boolean $r5;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/properties.html#xmldecl-version");

        if $z0 == 0 goto label1;

        $r6 = r0.<org.kxml2.io.KXmlParser: java.lang.String version>;

        return $r6;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone");

        if $z1 == 0 goto label2;

        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.Boolean standalone>;

        return $r5;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/properties.html#location");

        if $z2 == 0 goto label5;

        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String location>;

        if $r2 == null goto label3;

        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String location>;

        goto label4;

     label3:
        $r3 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

     label4:
        return $r4;

     label5:
        return null;
    }

    public java.lang.String getRootElementName()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String rootElementName>;

        return $r1;
    }

    public java.lang.String getSystemId()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String systemId>;

        return $r1;
    }

    public java.lang.String getPublicId()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String publicId>;

        return $r1;
    }

    public int getNamespaceCount(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2;
        int[] $r1;
        java.lang.IndexOutOfBoundsException $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        if i0 <= $i1 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: int[] nspCounts>;

        $i2 = $r1[i0];

        return $i2;
    }

    public java.lang.String getNamespacePrefix(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i1 = i0 * 2;

        $r2 = $r1[$i1];

        return $r2;
    }

    public java.lang.String getNamespaceUri(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i1 = i0 * 2;

        $i2 = $i1 + 1;

        $r2 = $r1[$i2];

        return $r2;
    }

    public java.lang.String getNamespace(java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r2, $r3, $r5, $r7, $r8, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r4, $r6, $r9, $r10;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        $r2 = "xml";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return "http://www.w3.org/XML/1998/namespace";

     label1:
        $r3 = "xmlns";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return "http://www.w3.org/2000/xmlns/";

     label2:
        $i1 = r0.<org.kxml2.io.KXmlParser: int depth>;

        $i2 = virtualinvoke r0.<org.kxml2.io.KXmlParser: int getNamespaceCount(int)>($i1);

        $i3 = $i2 << 1;

        i0 = $i3 - 2;

     label3:
        if i0 < 0 goto label6;

        if r1 != null goto label4;

        $r9 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r8 = $r9[i0];

        if $r8 != null goto label5;

        $r10 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i5 = i0 + 1;

        $r11 = $r10[$i5];

        return $r11;

     label4:
        $r4 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $r5 = $r4[i0];

        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label5;

        $r6 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] nspStack>;

        $i4 = i0 + 1;

        $r7 = $r6[$i4];

        return $r7;

     label5:
        i0 = i0 + -2;

        goto label3;

     label6:
        return null;
    }

    public int getDepth()
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int depth>;

        return $i0;
    }

    public java.lang.String getPositionDescription()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.StringBuilder r1, $r2, $r10, $r11, $r12, $r13, $r15, $r31, $r32, $r34, $r35, $r36, $r39, $r40, $r43, $r44, $r47, $r50, $r52, $r53, $r54, $r57, $r62, $r63, $r67, $r71, $r72;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.String[] $r3, $r26, $r29, $r38, $r46, $r49, $r70;
        boolean $z0, $z1;
        java.lang.String $r6, $r7, $r14, $r16, $r18, $r23, $r24, $r30, $r33, $r37, $r42, $r45, $r48, $r51, $r55, $r61, $r64, $r66, $r69, $r74, r75;
        java.io.Reader $r19, $r20;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r2 = new java.lang.StringBuilder;

        $i3 = r0.<org.kxml2.io.KXmlParser: int type>;

        $r3 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        $i2 = lengthof $r3;

        if $i3 >= $i2 goto label01;

        $r70 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        $i17 = r0.<org.kxml2.io.KXmlParser: int type>;

        $r74 = $r70[$i17];

        goto label02;

     label01:
        $r74 = "unknown";

     label02:
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r74);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i4 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i4 == 2 goto label03;

        $i13 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i13 != 3 goto label10;

     label03:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        if $z0 == 0 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(empty) ");

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $i5 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i5 != 3 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label05:
        $r6 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        if $r6 == null goto label06;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r51 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r61 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        $r62 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64);

     label06:
        $r7 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $i6 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        i0 = $i6 * 4;

        i1 = 0;

     label07:
        if i1 >= i0 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r26 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i9 = i1 + 1;

        $r30 = $r26[$i9];

        if $r30 == null goto label08;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r46 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r45 = $r46[i1];

        $r44 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r49 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i12 = i1 + 1;

        $r48 = $r49[$i12];

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r54 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r55);

     label08:
        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r29 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i10 = i1 + 2;

        $r33 = $r29[$i10];

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r32 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\'");

        $r38 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i11 = i1 + 3;

        $r37 = $r38[$i11];

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r42 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        i1 = i1 + 4;

        goto label07;

     label09:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        goto label15;

     label10:
        $i16 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i16 != 7 goto label11;

        goto label15;

     label11:
        $i15 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i15 == 4 goto label12;

        $r69 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        goto label15;

     label12:
        $z1 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z1 == 0 goto label13;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(whitespace)");

        goto label15;

     label13:
        r75 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        $i14 = virtualinvoke r75.<java.lang.String: int length()>();

        if $i14 <= 16 goto label14;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r66 = virtualinvoke r75.<java.lang.String: java.lang.String substring(int,int)>(0, 16);

        $r72 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        r75 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

     label15:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i7 = virtualinvoke r0.<org.kxml2.io.KXmlParser: int getLineNumber()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i8 = virtualinvoke r0.<org.kxml2.io.KXmlParser: int getColumnNumber()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = r0.<org.kxml2.io.KXmlParser: java.lang.String location>;

        if $r16 == null goto label16;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r23 = r0.<org.kxml2.io.KXmlParser: java.lang.String location>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label17;

     label16:
        $r19 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        if $r19 == null goto label17;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r20 = r0.<org.kxml2.io.KXmlParser: java.io.Reader reader>;

        $r24 = virtualinvoke $r20.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

     label17:
        $r18 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;
    }

    public int getLineNumber()
    {
        org.kxml2.io.KXmlParser r0;
        int i0, i1, $i2, $i3;
        char[] $r1;
        char $c4;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int bufferStartLine>;

        i1 = 0;

     label1:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        if i1 >= $i2 goto label3;

        $r1 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c4 = $r1[i1];

        if $c4 != 10 goto label2;

        i0 = i0 + 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = i0 + 1;

        return $i3;
    }

    public int getColumnNumber()
    {
        org.kxml2.io.KXmlParser r0;
        int i0, i1, $i2, $i3;
        char[] $r1;
        char $c4;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 = r0.<org.kxml2.io.KXmlParser: int bufferStartColumn>;

        i1 = 0;

     label1:
        $i2 = r0.<org.kxml2.io.KXmlParser: int position>;

        if i1 >= $i2 goto label4;

        $r1 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $c4 = $r1[i1];

        if $c4 != 10 goto label2;

        i0 = 0;

        goto label3;

     label2:
        i0 = i0 + 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $i3 = i0 + 1;

        return $i3;
    }

    public boolean isWhitespace() throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1, $i2;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 4 goto label1;

        $i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i1 == 7 goto label1;

        $i2 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i2 == 5 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Wrong event type", r0, null);

        throw $r1;

     label1:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        return $z0;
    }

    public java.lang.String getText()
    {
        org.kxml2.io.KXmlParser r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 < 4 goto label1;

        $i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i1 != 6 goto label2;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean unresolved>;

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        if $r1 != null goto label3;

        return "";

     label3:
        $r2 = r0.<org.kxml2.io.KXmlParser: java.lang.String text>;

        return $r2;
    }

    public char[] getTextCharacters(int[])
    {
        org.kxml2.io.KXmlParser r0;
        int[] r1;
        java.lang.String r2;
        char[] r3;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: int[];

        r2 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        if r2 != null goto label1;

        r1[0] = -1;

        r1[1] = -1;

        return null;

     label1:
        r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        r1[0] = 0;

        $i0 = lengthof r3;

        r1[1] = $i0;

        return r3;
    }

    public java.lang.String getNamespace()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String namespace>;

        return $r1;
    }

    public java.lang.String getName()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String name>;

        return $r1;
    }

    public java.lang.String getPrefix()
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String prefix>;

        return $r1;
    }

    public boolean isEmptyElementTag() throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 2 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Wrong event type", r0, null);

        throw $r1;

     label1:
        $z0 = r0.<org.kxml2.io.KXmlParser: boolean degenerated>;

        return $z0;
    }

    public int getAttributeCount()
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        return $i0;
    }

    public java.lang.String getAttributeType(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        return "CDATA";
    }

    public boolean isAttributeDefault(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        return 0;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i0 * 4;

        $r2 = $r1[$i2];

        return $r2;
    }

    public java.lang.String getAttributeName(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3;
        java.lang.String[] $r1;
        java.lang.String $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i0 * 4;

        $i3 = $i2 + 2;

        $r2 = $r1[$i3];

        return $r2;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3;
        java.lang.String[] $r1;
        java.lang.String $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i0 * 4;

        $i3 = $i2 + 1;

        $r2 = $r1[$i3];

        return $r2;
    }

    public java.lang.String getAttributeValue(int)
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1, $i2, $i3;
        java.lang.String[] $r1;
        java.lang.String $r2;
        java.lang.IndexOutOfBoundsException $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i2 = i0 * 4;

        $i3 = $i2 + 3;

        $r2 = $r1[$i3];

        return $r2;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, r2, $r4, $r6, $r8;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r3, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i1 = r0.<org.kxml2.io.KXmlParser: int attributeCount>;

        $i2 = $i1 * 4;

        i0 = $i2 - 4;

     label1:
        if i0 < 0 goto label4;

        $r3 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i3 = i0 + 2;

        $r4 = $r3[$i3];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label3;

        if r1 == null goto label2;

        $r7 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $r8 = $r7[i0];

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

     label2:
        $r5 = r0.<org.kxml2.io.KXmlParser: java.lang.String[] attributes>;

        $i4 = i0 + 3;

        $r6 = $r5[$i4];

        return $r6;

     label3:
        i0 = i0 + -4;

        goto label1;

     label4:
        return null;
    }

    public int getEventType() throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        int $i0;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i0;
    }

    public int nextTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        int $i1, $i2, $i3, $i4;
        org.xmlpull.v1.XmlPullParserException $r1;
        boolean $z0;

        r0 := @this: org.kxml2.io.KXmlParser;

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        $i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i1 != 4 goto label1;

        $z0 = r0.<org.kxml2.io.KXmlParser: boolean isWhitespace>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

     label1:
        $i2 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i2 == 3 goto label2;

        $i4 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i4 == 2 goto label2;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("unexpected type", r0, null);

        throw $r1;

     label2:
        $i3 = r0.<org.kxml2.io.KXmlParser: int type>;

        return $i3;
    }

    public void require(int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        int i0, $i1;
        java.lang.String r1, r2, $r7, $r13, $r14, $r15;
        org.xmlpull.v1.XmlPullParserException $r3;
        java.lang.StringBuilder $r4, $r5, $r8, $r9, $r10, $r11, $r12;
        java.lang.String[] $r6;
        boolean $z0, $z1;

        r0 := @this: org.kxml2.io.KXmlParser;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $i1 = r0.<org.kxml2.io.KXmlParser: int type>;

        if i0 != $i1 goto label2;

        if r1 == null goto label1;

        $r15 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getNamespace()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label2;

     label1:
        if r2 == null goto label3;

        $r14 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected: ");

        $r6 = <org.kxml2.io.KXmlParser: java.lang.String[] TYPES>;

        $r7 = $r6[i0];

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r13, r0, null);

        throw $r3;

     label3:
        return;
    }

    public java.lang.String nextText() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1;
        int $i0, $i2, $i3;
        org.xmlpull.v1.XmlPullParserException $r2, $r3;

        r0 := @this: org.kxml2.io.KXmlParser;

        $i0 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i0 == 2 goto label1;

        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("precondition: START_TAG", r0, null);

        throw $r3;

     label1:
        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        $i2 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i2 != 4 goto label2;

        r1 = virtualinvoke r0.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        virtualinvoke r0.<org.kxml2.io.KXmlParser: int next()>();

        goto label3;

     label2:
        r1 = "";

     label3:
        $i3 = r0.<org.kxml2.io.KXmlParser: int type>;

        if $i3 == 3 goto label4;

        $r2 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r2.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("END_TAG expected", r0, null);

        throw $r2;

     label4:
        return r1;
    }

    public void setFeature(java.lang.String, boolean) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r2, $r3, $r4, $r9;
        boolean z0, $z1, $z2, $z3;
        org.xmlpull.v1.XmlPullParserException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        r0.<org.kxml2.io.KXmlParser: boolean processNsp> = z0;

        goto label4;

     label1:
        $r3 = "http://xmlpull.org/v1/doc/features.html#process-docdecl";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        r0.<org.kxml2.io.KXmlParser: boolean processDocDecl> = z0;

        goto label4;

     label2:
        $r4 = "http://xmlpull.org/v1/doc/features.html#relaxed";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label3;

        r0.<org.kxml2.io.KXmlParser: boolean relaxed> = z0;

        goto label4;

     label3:
        $r5 = new org.xmlpull.v1.XmlPullParserException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported feature: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>($r9, r0, null);

        throw $r5;

     label4:
        return;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws org.xmlpull.v1.XmlPullParserException
    {
        org.kxml2.io.KXmlParser r0;
        java.lang.String r1, $r7, $r8;
        java.lang.Object r2;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/properties.html#location");

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        r0.<org.kxml2.io.KXmlParser: java.lang.String location> = $r8;

        goto label2;

     label1:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unsupported property: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        return;
    }

    private void pushContentSource(char[])
    {
        org.kxml2.io.KXmlParser r0;
        char[] r1, $r3;
        org.kxml2.io.KXmlParser$ContentSource $r2, $r4;
        int $i0, $i1, $i2;

        r0 := @this: org.kxml2.io.KXmlParser;

        r1 := @parameter0: char[];

        $r2 = new org.kxml2.io.KXmlParser$ContentSource;

        $r4 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        $r3 = r0.<org.kxml2.io.KXmlParser: char[] buffer>;

        $i1 = r0.<org.kxml2.io.KXmlParser: int position>;

        $i0 = r0.<org.kxml2.io.KXmlParser: int limit>;

        specialinvoke $r2.<org.kxml2.io.KXmlParser$ContentSource: void <init>(org.kxml2.io.KXmlParser$ContentSource,char[],int,int)>($r4, $r3, $i1, $i0);

        r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource> = $r2;

        r0.<org.kxml2.io.KXmlParser: char[] buffer> = r1;

        r0.<org.kxml2.io.KXmlParser: int position> = 0;

        $i2 = lengthof r1;

        r0.<org.kxml2.io.KXmlParser: int limit> = $i2;

        return;
    }

    private void popContentSource()
    {
        org.kxml2.io.KXmlParser r0;
        org.kxml2.io.KXmlParser$ContentSource $r1, $r3, $r4, $r5, $r6;
        char[] $r2;
        int $i0, $i1;

        r0 := @this: org.kxml2.io.KXmlParser;

        $r1 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        $r2 = staticinvoke <org.kxml2.io.KXmlParser$ContentSource: char[] access$000(org.kxml2.io.KXmlParser$ContentSource)>($r1);

        r0.<org.kxml2.io.KXmlParser: char[] buffer> = $r2;

        $r3 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        $i0 = staticinvoke <org.kxml2.io.KXmlParser$ContentSource: int access$100(org.kxml2.io.KXmlParser$ContentSource)>($r3);

        r0.<org.kxml2.io.KXmlParser: int position> = $i0;

        $r4 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        $i1 = staticinvoke <org.kxml2.io.KXmlParser$ContentSource: int access$200(org.kxml2.io.KXmlParser$ContentSource)>($r4);

        r0.<org.kxml2.io.KXmlParser: int limit> = $i1;

        $r5 = r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource>;

        $r6 = staticinvoke <org.kxml2.io.KXmlParser$ContentSource: org.kxml2.io.KXmlParser$ContentSource access$300(org.kxml2.io.KXmlParser$ContentSource)>($r5);

        r0.<org.kxml2.io.KXmlParser: org.kxml2.io.KXmlParser$ContentSource nextContentSource> = $r6;

        return;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.util.Map $r1, $r3, $r5, $r7, $r9;
        char[] $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;

        <org.kxml2.io.KXmlParser: int XML_DECLARATION> = 998;

        <org.kxml2.io.KXmlParser: java.lang.String ILLEGAL_TYPE> = "Wrong event type";

        <org.kxml2.io.KXmlParser: java.lang.String UNEXPECTED_EOF> = "Unexpected EOF";

        <org.kxml2.io.KXmlParser: int PARAMETER_ENTITY_REF> = 15;

        <org.kxml2.io.KXmlParser: int NOTATIONDECL> = 14;

        <org.kxml2.io.KXmlParser: int ATTLISTDECL> = 13;

        <org.kxml2.io.KXmlParser: int ENTITYDECL> = 12;

        <org.kxml2.io.KXmlParser: int ELEMENTDECL> = 11;

        <org.kxml2.io.KXmlParser: java.lang.String FEATURE_RELAXED> = "http://xmlpull.org/v1/doc/features.html#relaxed";

        <org.kxml2.io.KXmlParser: java.lang.String PROPERTY_LOCATION> = "http://xmlpull.org/v1/doc/properties.html#location";

        <org.kxml2.io.KXmlParser: java.lang.String PROPERTY_XMLDECL_STANDALONE> = "http://xmlpull.org/v1/doc/properties.html#xmldecl-standalone";

        <org.kxml2.io.KXmlParser: java.lang.String PROPERTY_XMLDECL_VERSION> = "http://xmlpull.org/v1/doc/properties.html#xmldecl-version";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES> = $r0;

        $r1 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lt", "<");

        $r3 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gt", ">");

        $r5 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("amp", "&");

        $r7 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("apos", "\'");

        $r9 = <org.kxml2.io.KXmlParser: java.util.Map DEFAULT_ENTITIES>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("quot", "\"");

        $r11 = newarray (char)[4];

        $r11[0] = 60;

        $r11[1] = 33;

        $r11[2] = 45;

        $r11[3] = 45;

        <org.kxml2.io.KXmlParser: char[] START_COMMENT> = $r11;

        $r12 = newarray (char)[3];

        $r12[0] = 45;

        $r12[1] = 45;

        $r12[2] = 62;

        <org.kxml2.io.KXmlParser: char[] END_COMMENT> = $r12;

        $r13 = newarray (char)[2];

        $r13[0] = 45;

        $r13[1] = 45;

        <org.kxml2.io.KXmlParser: char[] COMMENT_DOUBLE_DASH> = $r13;

        $r14 = newarray (char)[9];

        $r14[0] = 60;

        $r14[1] = 33;

        $r14[2] = 91;

        $r14[3] = 67;

        $r14[4] = 68;

        $r14[5] = 65;

        $r14[6] = 84;

        $r14[7] = 65;

        $r14[8] = 91;

        <org.kxml2.io.KXmlParser: char[] START_CDATA> = $r14;

        $r15 = newarray (char)[3];

        $r15[0] = 93;

        $r15[1] = 93;

        $r15[2] = 62;

        <org.kxml2.io.KXmlParser: char[] END_CDATA> = $r15;

        $r17 = newarray (char)[2];

        $r17[0] = 60;

        $r17[1] = 63;

        <org.kxml2.io.KXmlParser: char[] START_PROCESSING_INSTRUCTION> = $r17;

        $r16 = newarray (char)[2];

        $r16[0] = 63;

        $r16[1] = 62;

        <org.kxml2.io.KXmlParser: char[] END_PROCESSING_INSTRUCTION> = $r16;

        $r19 = newarray (char)[9];

        $r19[0] = 60;

        $r19[1] = 33;

        $r19[2] = 68;

        $r19[3] = 79;

        $r19[4] = 67;

        $r19[5] = 84;

        $r19[6] = 89;

        $r19[7] = 80;

        $r19[8] = 69;

        <org.kxml2.io.KXmlParser: char[] START_DOCTYPE> = $r19;

        $r18 = newarray (char)[6];

        $r18[0] = 83;

        $r18[1] = 89;

        $r18[2] = 83;

        $r18[3] = 84;

        $r18[4] = 69;

        $r18[5] = 77;

        <org.kxml2.io.KXmlParser: char[] SYSTEM> = $r18;

        $r21 = newarray (char)[6];

        $r21[0] = 80;

        $r21[1] = 85;

        $r21[2] = 66;

        $r21[3] = 76;

        $r21[4] = 73;

        $r21[5] = 67;

        <org.kxml2.io.KXmlParser: char[] PUBLIC> = $r21;

        $r20 = newarray (char)[9];

        $r20[0] = 60;

        $r20[1] = 33;

        $r20[2] = 69;

        $r20[3] = 76;

        $r20[4] = 69;

        $r20[5] = 77;

        $r20[6] = 69;

        $r20[7] = 78;

        $r20[8] = 84;

        <org.kxml2.io.KXmlParser: char[] START_ELEMENT> = $r20;

        $r23 = newarray (char)[9];

        $r23[0] = 60;

        $r23[1] = 33;

        $r23[2] = 65;

        $r23[3] = 84;

        $r23[4] = 84;

        $r23[5] = 76;

        $r23[6] = 73;

        $r23[7] = 83;

        $r23[8] = 84;

        <org.kxml2.io.KXmlParser: char[] START_ATTLIST> = $r23;

        $r22 = newarray (char)[8];

        $r22[0] = 60;

        $r22[1] = 33;

        $r22[2] = 69;

        $r22[3] = 78;

        $r22[4] = 84;

        $r22[5] = 73;

        $r22[6] = 84;

        $r22[7] = 89;

        <org.kxml2.io.KXmlParser: char[] START_ENTITY> = $r22;

        $r25 = newarray (char)[10];

        $r25[0] = 60;

        $r25[1] = 33;

        $r25[2] = 78;

        $r25[3] = 79;

        $r25[4] = 84;

        $r25[5] = 65;

        $r25[6] = 84;

        $r25[7] = 73;

        $r25[8] = 79;

        $r25[9] = 78;

        <org.kxml2.io.KXmlParser: char[] START_NOTATION> = $r25;

        $r24 = newarray (char)[5];

        $r24[0] = 69;

        $r24[1] = 77;

        $r24[2] = 80;

        $r24[3] = 84;

        $r24[4] = 89;

        <org.kxml2.io.KXmlParser: char[] EMPTY> = $r24;

        $r27 = newarray (char)[3];

        $r27[0] = 65;

        $r27[1] = 78;

        $r27[2] = 89;

        <org.kxml2.io.KXmlParser: char[] ANY> = $r27;

        $r26 = newarray (char)[5];

        $r26[0] = 78;

        $r26[1] = 68;

        $r26[2] = 65;

        $r26[3] = 84;

        $r26[4] = 65;

        <org.kxml2.io.KXmlParser: char[] NDATA> = $r26;

        $r29 = newarray (char)[8];

        $r29[0] = 78;

        $r29[1] = 79;

        $r29[2] = 84;

        $r29[3] = 65;

        $r29[4] = 84;

        $r29[5] = 73;

        $r29[6] = 79;

        $r29[7] = 78;

        <org.kxml2.io.KXmlParser: char[] NOTATION> = $r29;

        $r28 = newarray (char)[8];

        $r28[0] = 82;

        $r28[1] = 69;

        $r28[2] = 81;

        $r28[3] = 85;

        $r28[4] = 73;

        $r28[5] = 82;

        $r28[6] = 69;

        $r28[7] = 68;

        <org.kxml2.io.KXmlParser: char[] REQUIRED> = $r28;

        $r31 = newarray (char)[7];

        $r31[0] = 73;

        $r31[1] = 77;

        $r31[2] = 80;

        $r31[3] = 76;

        $r31[4] = 73;

        $r31[5] = 69;

        $r31[6] = 68;

        <org.kxml2.io.KXmlParser: char[] IMPLIED> = $r31;

        $r30 = newarray (char)[5];

        $r30[0] = 70;

        $r30[1] = 73;

        $r30[2] = 88;

        $r30[3] = 69;

        $r30[4] = 68;

        <org.kxml2.io.KXmlParser: char[] FIXED> = $r30;

        $r32 = newarray (char)[1];

        $r32[0] = 39;

        <org.kxml2.io.KXmlParser: char[] SINGLE_QUOTE> = $r32;

        $r33 = newarray (char)[1];

        $r33[0] = 34;

        <org.kxml2.io.KXmlParser: char[] DOUBLE_QUOTE> = $r33;

        return;
    }
}
