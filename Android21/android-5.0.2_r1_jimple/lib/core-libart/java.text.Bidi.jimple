public final class java.text.Bidi extends java.lang.Object
{
    public static final int DIRECTION_DEFAULT_LEFT_TO_RIGHT;
    public static final int DIRECTION_DEFAULT_RIGHT_TO_LEFT;
    public static final int DIRECTION_LEFT_TO_RIGHT;
    public static final int DIRECTION_RIGHT_TO_LEFT;
    private int baseLevel;
    private int length;
    private byte[] offsetLevel;
    private java.text.Bidi$Run[] runs;
    private int direction;
    private boolean unidirectional;
    private static final int UBIDI_LEVEL_OVERRIDE;
    private static final int UBiDiDirection_UBIDI_LTR;
    private static final int UBiDiDirection_UBIDI_RTL;
    private static final int UBiDiDirection_UBIDI_MIXED;

    public void <init>(java.text.AttributedCharacterIterator)
    {
        java.text.Bidi r0;
        java.text.AttributedCharacterIterator r1;
        int i0, i1, i2, i4, i5, i6, $i8, $i9, $i10, $i14;
        char[] r2;
        byte b3, $b13;
        java.lang.Object r3, r5, r16;
        byte[] r4;
        java.lang.Throwable r6, $r15;
        java.awt.font.TextAttribute $r7, $r8, $r9, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.awt.font.NumericShaper $r10;
        char $c11, $c12, $c15;
        java.lang.Integer $r12;
        java.lang.Boolean $r13;
        java.lang.IllegalArgumentException $r14;
        long l16;

        r0 := @this: java.text.Bidi;

        r1 := @parameter0: java.text.AttributedCharacterIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("paragraph is null");

        throw $r14;

     label01:
        i0 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getBeginIndex()>();

        i1 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getEndIndex()>();

        i2 = i1 - i0;

        $i8 = i2 + 1;

        r2 = newarray (char)[$i8];

        if i2 == 0 goto label02;

        $c15 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: char first()>();

        r2[0] = $c15;

        goto label03;

     label02:
        interfaceinvoke r1.<java.text.AttributedCharacterIterator: char first()>();

     label03:
        b3 = -2;

        $r7 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;

        r3 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r7);

        if r3 == null goto label05;

        $z3 = r3 instanceof java.lang.Boolean;

        if $z3 == 0 goto label05;

        $r13 = <java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;

        $z2 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label04;

        b3 = 0;

        goto label05;

     label04:
        b3 = 1;

     label05:
        r4 = null;

        i4 = 1;

        i5 = 1;

     label06:
        if i5 >= i2 goto label11;

        $r9 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        r5 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r9);

        if r5 == null goto label09;

        $z1 = r5 instanceof java.lang.Integer;

        if $z1 == 0 goto label09;

        $r12 = (java.lang.Integer) r5;

        i6 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if r4 != null goto label07;

        r4 = newarray (byte)[i2];

     label07:
        if i5 >= i4 goto label08;

        $c12 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: char next()>();

        r2[i5] = $c12;

        $i14 = i5 - 1;

        $b13 = (byte) i6;

        r4[$i14] = $b13;

        i5 = i5 + 1;

        goto label07;

     label08:
        goto label10;

     label09:
        if i5 >= i4 goto label10;

        $c11 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: char next()>();

        r2[i5] = $c11;

        i5 = i5 + 1;

        goto label09;

     label10:
        $r11 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        $i10 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: int getRunLimit(java.text.AttributedCharacterIterator$Attribute)>($r11);

        $i9 = $i10 - i0;

        i4 = $i9 + 1;

        goto label06;

     label11:
        $r8 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;

        r16 = interfaceinvoke r1.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r8);

        if r16 == null goto label12;

        $z0 = r16 instanceof java.awt.font.NumericShaper;

        if $z0 == 0 goto label12;

        $r10 = (java.awt.font.NumericShaper) r16;

        virtualinvoke $r10.<java.awt.font.NumericShaper: void shape(char[],int,int)>(r2, 0, i2);

     label12:
        l16 = 0L;

     label13:
        l16 = staticinvoke <java.text.Bidi: long createUBiDi(char[],int,byte[],int,int,int)>(r2, 0, r4, 0, i2, b3);

        specialinvoke r0.<java.text.Bidi: void readBidiInfo(long)>(l16);

     label14:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l16);

        goto label17;

     label15:
        $r15 := @caughtexception;

        r6 = $r15;

     label16:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l16);

        throw r6;

     label17:
        return;

        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public void <init>(char[], int, byte[], int, int, int)
    {
        java.text.Bidi r0;
        char[] r1;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8;
        byte[] r2;
        long l4;
        java.lang.Throwable r3, $r21;
        java.lang.IllegalArgumentException $r4, $r5, $r9, $r16, $r20;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r14, $r15, $r17, $r18;
        java.lang.String $r10, $r13, $r19;

        r0 := @this: java.text.Bidi;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r2 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label01;

        $i5 = lengthof r1;

        $i6 = $i5 - i0;

        if $i6 >= i2 goto label02;

     label01:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label02:
        if r2 == null goto label03;

        $i7 = lengthof r2;

        $i8 = $i7 - i1;

        if $i8 >= i2 goto label03;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r20;

     label03:
        if i0 >= 0 goto label04;

        $r16 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative textStart value ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label04:
        if i1 >= 0 goto label05;

        $r9 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative embStart value ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label05:
        if i2 >= 0 goto label06;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative paragraph length ");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label06:
        l4 = 0L;

     label07:
        l4 = staticinvoke <java.text.Bidi: long createUBiDi(char[],int,byte[],int,int,int)>(r1, i0, r2, i1, i2, i3);

        specialinvoke r0.<java.text.Bidi: void readBidiInfo(long)>(l4);

     label08:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l4);

        goto label11;

     label09:
        $r21 := @caughtexception;

        r3 = $r21;

     label10:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l4);

        throw r3;

     label11:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public void <init>(java.lang.String, int)
    {
        java.text.Bidi r0;
        java.lang.String r1;
        int i0, $i1;
        char[] $r2;

        r0 := @this: java.text.Bidi;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r2 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

     label2:
        if r1 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label4:
        specialinvoke r0.<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>($r2, 0, null, 0, $i1, i0);

        return;
    }

    private static long createUBiDi(char[], int, byte[], int, int, int)
    {
        char[] r0, r10;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i12;
        byte[] r1, r2, $r6;
        java.text.Bidi r3, $r7;
        byte b5, $b10, $b11, $b13, $b14;
        java.lang.Throwable r4, $r9;
        java.lang.IllegalArgumentException $r5, $r8;
        long l15;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r2 = null;

        if r0 == null goto label01;

        $i6 = lengthof r0;

        $i7 = $i6 - i0;

        if $i7 >= i2 goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label02:
        r10 = newarray (char)[i2];

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>(r0, i0, r10, 0, i2);

        if r1 == null goto label08;

        $i9 = lengthof r1;

        $i8 = $i9 - i1;

        if $i8 >= i2 goto label03;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label03:
        if i2 <= 0 goto label08;

        $r7 = new java.text.Bidi;

        specialinvoke $r7.<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>(r0, i0, null, 0, i2, i3);

        r3 = $r7;

        r2 = newarray (byte)[i2];

        $r6 = r3.<java.text.Bidi: byte[] offsetLevel>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r6, 0, r2, 0, i2);

        i4 = 0;

     label04:
        if i4 >= i2 goto label08;

        b5 = r1[i4];

        if b5 >= 0 goto label05;

        $i12 = 128 - b5;

        $b14 = (byte) $i12;

        r2[i4] = $b14;

        goto label07;

     label05:
        if b5 <= 0 goto label06;

        r2[i4] = b5;

        goto label07;

     label06:
        $b11 = r2[i4];

        $b10 = $b11 | -128;

        $b13 = (byte) $b10;

        r2[i4] = $b13;

     label07:
        i4 = i4 + 1;

        goto label04;

     label08:
        if i3 > 1 goto label09;

        if i3 >= -2 goto label10;

     label09:
        i3 = 0;

     label10:
        l15 = 0L;

     label11:
        l15 = staticinvoke <java.text.Bidi: long ubidi_open()>();

        staticinvoke <java.text.Bidi: void ubidi_setPara(long,char[],int,int,byte[])>(l15, r10, i2, i3, r2);

     label12:
        goto label15;

     label13:
        $r9 := @caughtexception;

        r4 = $r9;

     label14:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l15);

        throw r4;

     label15:
        return l15;

        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private void <init>(long)
    {
        java.text.Bidi r0;
        long l0;

        r0 := @this: java.text.Bidi;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.text.Bidi: void readBidiInfo(long)>(l0);

        return;
    }

    private void readBidiInfo(long)
    {
        java.text.Bidi r0;
        long l0;
        int i1, $i2, $i3, $i5, $i6, $i7;
        byte[] $r1;
        byte $b4;
        java.text.Bidi$Run[] $r2, $r3;
        java.text.Bidi$Run $r4;

        r0 := @this: java.text.Bidi;

        l0 := @parameter0: long;

        $i2 = staticinvoke <java.text.Bidi: int ubidi_getLength(long)>(l0);

        r0.<java.text.Bidi: int length> = $i2;

        $i3 = r0.<java.text.Bidi: int length>;

        if $i3 != 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = staticinvoke <java.text.Bidi: byte[] ubidi_getLevels(long)>(l0);

     label2:
        r0.<java.text.Bidi: byte[] offsetLevel> = $r1;

        $b4 = staticinvoke <java.text.Bidi: byte ubidi_getParaLevel(long)>(l0);

        r0.<java.text.Bidi: int baseLevel> = $b4;

        i1 = staticinvoke <java.text.Bidi: int ubidi_countRuns(long)>(l0);

        if i1 != 0 goto label3;

        r0.<java.text.Bidi: boolean unidirectional> = 1;

        r0.<java.text.Bidi: java.text.Bidi$Run[] runs> = null;

        goto label5;

     label3:
        if i1 >= 0 goto label4;

        r0.<java.text.Bidi: java.text.Bidi$Run[] runs> = null;

        goto label5;

     label4:
        $r2 = staticinvoke <java.text.Bidi: java.text.Bidi$Run[] ubidi_getRuns(long)>(l0);

        r0.<java.text.Bidi: java.text.Bidi$Run[] runs> = $r2;

        if i1 != 1 goto label5;

        $r3 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $r4 = $r3[0];

        $i6 = virtualinvoke $r4.<java.text.Bidi$Run: int getLevel()>();

        $i7 = r0.<java.text.Bidi: int baseLevel>;

        if $i6 != $i7 goto label5;

        r0.<java.text.Bidi: boolean unidirectional> = 1;

        r0.<java.text.Bidi: java.text.Bidi$Run[] runs> = null;

     label5:
        $i5 = staticinvoke <java.text.Bidi: int ubidi_getDirection(long)>(l0);

        r0.<java.text.Bidi: int direction> = $i5;

        return;
    }

    public boolean baseIsLeftToRight()
    {
        java.text.Bidi r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int baseLevel>;

        $i1 = $i0 % 2;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.text.Bidi createLineBidi(int, int)
    {
        java.text.Bidi r0, r3, $r16, r19;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9;
        char[] r1;
        byte[] r2, $r17;
        long l3, $l10;
        java.lang.Throwable r4, $r18;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15;
        java.lang.String $r14;
        boolean $z0;
        byte $b11, $b12, $b13, $b14, b15;

        r0 := @this: java.text.Bidi;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label01;

        if i1 < 0 goto label01;

        $i6 = r0.<java.text.Bidi: int length>;

        if i1 > $i6 goto label01;

        if i0 <= i1 goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ranges (start=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("limit=");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $i4 = r0.<java.text.Bidi: int length>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r5;

     label02:
        $i5 = r0.<java.text.Bidi: int length>;

        r1 = newarray (char)[$i5];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 97);

        $i8 = r0.<java.text.Bidi: int length>;

        r2 = newarray (byte)[$i8];

        i2 = 0;

     label03:
        $i7 = lengthof r2;

        if i2 >= $i7 goto label04;

        $r17 = r0.<java.text.Bidi: byte[] offsetLevel>;

        $b11 = $r17[i2];

        $b12 = neg $b11;

        $b14 = (byte) $b12;

        r2[i2] = $b14;

        i2 = i2 + 1;

        goto label03;

     label04:
        $z0 = virtualinvoke r0.<java.text.Bidi: boolean baseIsLeftToRight()>();

        if $z0 == 0 goto label05;

        $b13 = 0;

        goto label06;

     label05:
        $b13 = 1;

     label06:
        b15 = $b13;

        l3 = 0L;

     label07:
        $i9 = r0.<java.text.Bidi: int length>;

        l3 = staticinvoke <java.text.Bidi: long createUBiDi(char[],int,byte[],int,int,int)>(r1, 0, r2, 0, $i9, b15);

        if i0 != i1 goto label09;

        r3 = specialinvoke r0.<java.text.Bidi: java.text.Bidi createEmptyLineBidi(long)>(l3);

     label08:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l3);

        return r3;

     label09:
        $r16 = new java.text.Bidi;

        $l10 = staticinvoke <java.text.Bidi: long ubidi_setLine(long,int,int)>(l3, i0, i1);

        specialinvoke $r16.<java.text.Bidi: void <init>(long)>($l10);

        r19 = $r16;

     label10:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l3);

        return r19;

     label11:
        $r18 := @caughtexception;

        r4 = $r18;

     label12:
        staticinvoke <java.text.Bidi: void ubidi_close(long)>(l3);

        throw r4;

        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private java.text.Bidi createEmptyLineBidi(long)
    {
        java.text.Bidi r0, r1, $r2;
        long l0;

        r0 := @this: java.text.Bidi;

        l0 := @parameter0: long;

        $r2 = new java.text.Bidi;

        specialinvoke $r2.<java.text.Bidi: void <init>(long)>(l0);

        r1 = $r2;

        r1.<java.text.Bidi: int length> = 0;

        r1.<java.text.Bidi: byte[] offsetLevel> = null;

        r1.<java.text.Bidi: java.text.Bidi$Run[] runs> = null;

        r1.<java.text.Bidi: boolean unidirectional> = 1;

        return r1;
    }

    public int getBaseLevel()
    {
        java.text.Bidi r0;
        int $i0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int baseLevel>;

        return $i0;
    }

    public int getLength()
    {
        java.text.Bidi r0;
        int $i0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int length>;

        return $i0;
    }

    public int getLevelAt(int)
    {
        java.text.Bidi r0;
        int i0, $i3;
        byte[] $r2;
        byte $b1;
        short $s2;
        java.lang.RuntimeException $r3;

        r0 := @this: java.text.Bidi;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<java.text.Bidi: byte[] offsetLevel>;

        $b1 = $r2[i0];

        $s2 = $b1 & -129;

     label2:
        return $s2;

     label3:
        $r3 := @caughtexception;

        $i3 = r0.<java.text.Bidi: int baseLevel>;

        return $i3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public int getRunCount()
    {
        java.text.Bidi r0;
        boolean $z0;
        java.text.Bidi$Run[] $r1;
        int $i0;

        r0 := @this: java.text.Bidi;

        $z0 = r0.<java.text.Bidi: boolean unidirectional>;

        if $z0 == 0 goto label1;

        $i0 = 1;

        goto label2;

     label1:
        $r1 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $i0 = lengthof $r1;

     label2:
        return $i0;
    }

    public int getRunLevel(int)
    {
        java.text.Bidi r0;
        int i0, $i1;
        boolean $z0;
        java.text.Bidi$Run[] $r1;
        java.text.Bidi$Run $r2;

        r0 := @this: java.text.Bidi;

        i0 := @parameter0: int;

        $z0 = r0.<java.text.Bidi: boolean unidirectional>;

        if $z0 == 0 goto label1;

        $i1 = r0.<java.text.Bidi: int baseLevel>;

        goto label2;

     label1:
        $r1 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<java.text.Bidi$Run: int getLevel()>();

     label2:
        return $i1;
    }

    public int getRunLimit(int)
    {
        java.text.Bidi r0;
        int i0, $i1;
        boolean $z0;
        java.text.Bidi$Run[] $r1;
        java.text.Bidi$Run $r2;

        r0 := @this: java.text.Bidi;

        i0 := @parameter0: int;

        $z0 = r0.<java.text.Bidi: boolean unidirectional>;

        if $z0 == 0 goto label1;

        $i1 = r0.<java.text.Bidi: int length>;

        goto label2;

     label1:
        $r1 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<java.text.Bidi$Run: int getLimit()>();

     label2:
        return $i1;
    }

    public int getRunStart(int)
    {
        java.text.Bidi r0;
        int i0, $i1;
        boolean $z0;
        java.text.Bidi$Run[] $r1;
        java.text.Bidi$Run $r2;

        r0 := @this: java.text.Bidi;

        i0 := @parameter0: int;

        $z0 = r0.<java.text.Bidi: boolean unidirectional>;

        if $z0 == 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $r1 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<java.text.Bidi$Run: int getStart()>();

     label2:
        return $i1;
    }

    public boolean isLeftToRight()
    {
        java.text.Bidi r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int direction>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isMixed()
    {
        java.text.Bidi r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int direction>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isRightToLeft()
    {
        java.text.Bidi r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.text.Bidi;

        $i0 = r0.<java.text.Bidi: int direction>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void reorderVisually(byte[], int, java.lang.Object[], int, int)
    {
        byte[] r0, r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.Object[] r1, $r19;
        int[] r3;
        java.util.ArrayList r4, $r20;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        java.lang.String $r18;
        java.lang.Object $r21;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        if i2 < 0 goto label1;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i6 = lengthof r0;

        $i8 = $i6 - i0;

        if i2 > $i8 goto label1;

        $i7 = lengthof r1;

        $i9 = $i7 - i1;

        if i2 <= $i9 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid ranges (levels=");

        $i4 = lengthof r0;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", levelStart=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", objects=");

        $i5 = lengthof r1;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", objectStart=");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", count=");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r5;

     label2:
        r2 = newarray (byte)[i2];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r0, i0, r2, 0, i2);

        r3 = staticinvoke <java.text.Bidi: int[] ubidi_reorderVisual(byte[],int)>(r2, i2);

        $r20 = new java.util.ArrayList;

        specialinvoke $r20.<java.util.ArrayList: void <init>(int)>(i2);

        r4 = $r20;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        $i10 = r3[i3];

        $i11 = i1 + $i10;

        $r21 = r1[$i11];

        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r19 = virtualinvoke r4.<java.util.ArrayList: java.lang.Object[] toArray()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r19, 0, r1, i1, i2);

        return;
    }

    public static boolean requiresBidi(char[], int, int)
    {
        char[] r0;
        int i0, i1, $i2, $i3;
        java.text.Bidi r1, $r3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 < 0 goto label1;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        $i2 = lengthof r0;

        if i1 <= $i2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        $r3 = new java.text.Bidi;

        $i3 = i1 - i0;

        specialinvoke $r3.<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>(r0, i0, null, 0, $i3, 0);

        r1 = $r3;

        $z0 = virtualinvoke r1.<java.text.Bidi: boolean isLeftToRight()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public java.lang.String toString()
    {
        java.text.Bidi r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r13, $r16;
        java.lang.Class $r2;
        java.lang.String $r3, $r14, $r15;
        int $i0, $i1, $i2;
        java.text.Bidi$Run[] $r12;

        r0 := @this: java.text.Bidi;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[direction: ");

        $i0 = r0.<java.text.Bidi: int direction>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" baseLevel: ");

        $i1 = r0.<java.text.Bidi: int baseLevel>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length: ");

        $i2 = r0.<java.text.Bidi: int length>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" runs: ");

        $r12 = r0.<java.text.Bidi: java.text.Bidi$Run[] runs>;

        $r14 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r12);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    private static native long ubidi_open();

    private static native void ubidi_close(long);

    private static native void ubidi_setPara(long, char[], int, int, byte[]);

    private static native long ubidi_setLine(long, int, int);

    private static native int ubidi_getDirection(long);

    private static native int ubidi_getLength(long);

    private static native byte ubidi_getParaLevel(long);

    private static native byte[] ubidi_getLevels(long);

    private static native int ubidi_countRuns(long);

    private static native java.text.Bidi$Run[] ubidi_getRuns(long);

    private static native int[] ubidi_reorderVisual(byte[], int);

    public static void <clinit>()
    {
        <java.text.Bidi: int UBiDiDirection_UBIDI_MIXED> = 2;

        <java.text.Bidi: int UBiDiDirection_UBIDI_RTL> = 1;

        <java.text.Bidi: int UBiDiDirection_UBIDI_LTR> = 0;

        <java.text.Bidi: int UBIDI_LEVEL_OVERRIDE> = 128;

        <java.text.Bidi: int DIRECTION_RIGHT_TO_LEFT> = 1;

        <java.text.Bidi: int DIRECTION_LEFT_TO_RIGHT> = 0;

        <java.text.Bidi: int DIRECTION_DEFAULT_RIGHT_TO_LEFT> = -1;

        <java.text.Bidi: int DIRECTION_DEFAULT_LEFT_TO_RIGHT> = -2;

        return;
    }
}
