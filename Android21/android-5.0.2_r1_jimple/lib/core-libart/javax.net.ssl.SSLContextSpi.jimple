public abstract class javax.net.ssl.SSLContextSpi extends java.lang.Object
{

    public void <init>()
    {
        javax.net.ssl.SSLContextSpi r0;

        r0 := @this: javax.net.ssl.SSLContextSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void engineInit(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom) throws java.security.KeyManagementException;

    protected abstract javax.net.ssl.SSLSocketFactory engineGetSocketFactory();

    protected abstract javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory();

    protected abstract javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String, int);

    protected abstract javax.net.ssl.SSLEngine engineCreateSSLEngine();

    protected abstract javax.net.ssl.SSLSessionContext engineGetServerSessionContext();

    protected abstract javax.net.ssl.SSLSessionContext engineGetClientSessionContext();

    protected javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()
    {
        javax.net.ssl.SSLContextSpi r0;
        javax.net.ssl.SSLParameters $r1;

        r0 := @this: javax.net.ssl.SSLContextSpi;

        $r1 = specialinvoke r0.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters createSSLParameters(boolean)>(0);

        return $r1;
    }

    protected javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()
    {
        javax.net.ssl.SSLContextSpi r0;
        javax.net.ssl.SSLParameters $r1;

        r0 := @this: javax.net.ssl.SSLContextSpi;

        $r1 = specialinvoke r0.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters createSSLParameters(boolean)>(1);

        return $r1;
    }

    private javax.net.ssl.SSLParameters createSSLParameters(boolean)
    {
        javax.net.ssl.SSLContextSpi r0;
        boolean z0, $z1, $z2;
        javax.net.ssl.SSLSocket r1;
        javax.net.ssl.SSLParameters r2, $r7;
        java.lang.String[] r3, r4;
        javax.net.ssl.SSLSocketFactory $r5;
        java.net.Socket $r6;
        java.io.IOException $r8;
        java.lang.UnsupportedOperationException $r9;

        r0 := @this: javax.net.ssl.SSLContextSpi;

        z0 := @parameter0: boolean;

     label1:
        $r5 = virtualinvoke r0.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>();

        $r6 = virtualinvoke $r5.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r1 = (javax.net.ssl.SSLSocket) $r6;

        $r7 = new javax.net.ssl.SSLParameters;

        specialinvoke $r7.<javax.net.ssl.SSLParameters: void <init>()>();

        r2 = $r7;

        if z0 == 0 goto label2;

        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedCipherSuites()>();

        r4 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getSupportedProtocols()>();

        goto label3;

     label2:
        r3 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        r4 = virtualinvoke r1.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

     label3:
        virtualinvoke r2.<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>(r3);

        virtualinvoke r2.<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>(r4);

        $z1 = virtualinvoke r1.<javax.net.ssl.SSLSocket: boolean getNeedClientAuth()>();

        virtualinvoke r2.<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)>($z1);

        $z2 = virtualinvoke r1.<javax.net.ssl.SSLSocket: boolean getWantClientAuth()>();

        virtualinvoke r2.<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)>($z2);

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.UnsupportedOperationException;

        specialinvoke $r9.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Could not access supported SSL parameters");

        throw $r9;

        catch java.io.IOException from label1 to label4 with label5;
    }
}
