class dalvik.system.profiler.PortableThreadSampler extends java.lang.Object implements dalvik.system.profiler.ThreadSampler
{
    private int depth;

    void <init>()
    {
        dalvik.system.profiler.PortableThreadSampler r0;

        r0 := @this: dalvik.system.profiler.PortableThreadSampler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setDepth(int)
    {
        dalvik.system.profiler.PortableThreadSampler r0;
        int i0;

        r0 := @this: dalvik.system.profiler.PortableThreadSampler;

        i0 := @parameter0: int;

        r0.<dalvik.system.profiler.PortableThreadSampler: int depth> = i0;

        return;
    }

    public java.lang.StackTraceElement[] getStackTrace(java.lang.Thread)
    {
        dalvik.system.profiler.PortableThreadSampler r0;
        java.lang.Thread r1;
        java.lang.StackTraceElement[] r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r3;

        r0 := @this: dalvik.system.profiler.PortableThreadSampler;

        r1 := @parameter0: java.lang.Thread;

        r2 = virtualinvoke r1.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof r2;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i2 = lengthof r2;

        $i1 = r0.<dalvik.system.profiler.PortableThreadSampler: int depth>;

        if $i2 <= $i1 goto label2;

        $i3 = r0.<dalvik.system.profiler.PortableThreadSampler: int depth>;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r2, 0, $i3);

        r2 = (java.lang.StackTraceElement[]) $r3;

     label2:
        return r2;
    }
}
