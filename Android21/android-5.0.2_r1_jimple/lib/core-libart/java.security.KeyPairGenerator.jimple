public abstract class java.security.KeyPairGenerator extends java.security.KeyPairGeneratorSpi
{
    private static final java.lang.String SERVICE;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.security.SecureRandom RANDOM;
    private java.security.Provider provider;
    private java.lang.String algorithm;

    protected void <init>(java.lang.String)
    {
        java.security.KeyPairGenerator r0;
        java.lang.String r1;

        r0 := @this: java.security.KeyPairGenerator;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.security.KeyPairGeneratorSpi: void <init>()>();

        r0.<java.security.KeyPairGenerator: java.lang.String algorithm> = r1;

        return;
    }

    public java.lang.String getAlgorithm()
    {
        java.security.KeyPairGenerator r0;
        java.lang.String $r1;

        r0 := @this: java.security.KeyPairGenerator;

        $r1 = r0.<java.security.KeyPairGenerator: java.lang.String algorithm>;

        return $r1;
    }

    public static java.security.KeyPairGenerator getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        java.lang.Object r2;
        java.security.Provider r3;
        java.security.KeyPairGenerator r4;
        org.apache.harmony.security.fortress.Engine $r5;
        boolean $z0;
        java.security.KeyPairGenerator$KeyPairGeneratorImpl $r6;
        java.security.KeyPairGeneratorSpi $r7;
        java.lang.NullPointerException $r8;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r8;

     label1:
        $r5 = <java.security.KeyPairGenerator: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r5.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        r2 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        r3 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        $z0 = r2 instanceof java.security.KeyPairGenerator;

        if $z0 == 0 goto label2;

        r4 = (java.security.KeyPairGenerator) r2;

        r4.<java.security.KeyPairGenerator: java.lang.String algorithm> = r0;

        r4.<java.security.KeyPairGenerator: java.security.Provider provider> = r3;

        return r4;

     label2:
        $r6 = new java.security.KeyPairGenerator$KeyPairGeneratorImpl;

        $r7 = (java.security.KeyPairGeneratorSpi) r2;

        specialinvoke $r6.<java.security.KeyPairGenerator$KeyPairGeneratorImpl: void <init>(java.security.KeyPairGeneratorSpi,java.security.Provider,java.lang.String,java.security.KeyPairGenerator$1)>($r7, r3, r0, null);

        return $r6;
    }

    public static java.security.KeyPairGenerator getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.security.KeyPairGenerator $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static java.security.KeyPairGenerator getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.lang.Object r2;
        java.security.KeyPairGenerator r3;
        org.apache.harmony.security.fortress.Engine $r4;
        boolean $z0;
        java.security.KeyPairGenerator$KeyPairGeneratorImpl $r5;
        java.security.KeyPairGeneratorSpi $r6;
        java.lang.NullPointerException $r7;
        java.lang.IllegalArgumentException $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r8;

     label1:
        if r0 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r7;

     label2:
        $r4 = <java.security.KeyPairGenerator: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $z0 = r2 instanceof java.security.KeyPairGenerator;

        if $z0 == 0 goto label3;

        r3 = (java.security.KeyPairGenerator) r2;

        r3.<java.security.KeyPairGenerator: java.lang.String algorithm> = r0;

        r3.<java.security.KeyPairGenerator: java.security.Provider provider> = r1;

        return r3;

     label3:
        $r5 = new java.security.KeyPairGenerator$KeyPairGeneratorImpl;

        $r6 = (java.security.KeyPairGeneratorSpi) r2;

        specialinvoke $r5.<java.security.KeyPairGenerator$KeyPairGeneratorImpl: void <init>(java.security.KeyPairGeneratorSpi,java.security.Provider,java.lang.String,java.security.KeyPairGenerator$1)>($r6, r1, r0, null);

        return $r5;
    }

    public final java.security.Provider getProvider()
    {
        java.security.KeyPairGenerator r0;
        java.security.Provider $r1;

        r0 := @this: java.security.KeyPairGenerator;

        $r1 = r0.<java.security.KeyPairGenerator: java.security.Provider provider>;

        return $r1;
    }

    public void initialize(int)
    {
        java.security.KeyPairGenerator r0;
        int i0;
        java.security.SecureRandom $r1;

        r0 := @this: java.security.KeyPairGenerator;

        i0 := @parameter0: int;

        $r1 = <java.security.KeyPairGenerator: java.security.SecureRandom RANDOM>;

        virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)>(i0, $r1);

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.KeyPairGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom $r2;

        r0 := @this: java.security.KeyPairGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = <java.security.KeyPairGenerator: java.security.SecureRandom RANDOM>;

        virtualinvoke r0.<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r1, $r2);

        return;
    }

    public final java.security.KeyPair genKeyPair()
    {
        java.security.KeyPairGenerator r0;
        java.security.KeyPair $r1;

        r0 := @this: java.security.KeyPairGenerator;

        $r1 = virtualinvoke r0.<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()>();

        return $r1;
    }

    public java.security.KeyPair generateKeyPair()
    {
        java.security.KeyPairGenerator r0;

        r0 := @this: java.security.KeyPairGenerator;

        return null;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        java.security.KeyPairGenerator r0;
        int i0;
        java.security.SecureRandom r1;

        r0 := @this: java.security.KeyPairGenerator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.SecureRandom;

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.KeyPairGenerator r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SecureRandom r2;

        r0 := @this: java.security.KeyPairGenerator;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r2 := @parameter1: java.security.SecureRandom;

        return;
    }

    static java.security.Provider access$102(java.security.KeyPairGenerator, java.security.Provider)
    {
        java.security.KeyPairGenerator r0;
        java.security.Provider r1;

        r0 := @parameter0: java.security.KeyPairGenerator;

        r1 := @parameter1: java.security.Provider;

        r0.<java.security.KeyPairGenerator: java.security.Provider provider> = r1;

        return r1;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;
        java.security.SecureRandom $r1;

        <java.security.KeyPairGenerator: java.lang.String SERVICE> = "KeyPairGenerator";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("KeyPairGenerator");

        <java.security.KeyPairGenerator: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <java.security.KeyPairGenerator: java.security.SecureRandom RANDOM> = $r1;

        return;
    }
}
