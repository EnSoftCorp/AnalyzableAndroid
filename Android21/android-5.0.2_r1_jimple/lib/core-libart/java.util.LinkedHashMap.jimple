public class java.util.LinkedHashMap extends java.util.HashMap
{
    transient java.util.LinkedHashMap$LinkedEntry header;
    private final boolean accessOrder;
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.LinkedHashMap r0;

        r0 := @this: java.util.LinkedHashMap;

        specialinvoke r0.<java.util.HashMap: void <init>()>();

        virtualinvoke r0.<java.util.LinkedHashMap: void init()>();

        r0.<java.util.LinkedHashMap: boolean accessOrder> = 0;

        return;
    }

    public void <init>(int)
    {
        java.util.LinkedHashMap r0;
        int i0;

        r0 := @this: java.util.LinkedHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.LinkedHashMap: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        java.util.LinkedHashMap r0;
        int i0;
        float f0;

        r0 := @this: java.util.LinkedHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(i0, f0, 0);

        return;
    }

    public void <init>(int, float, boolean)
    {
        java.util.LinkedHashMap r0;
        int i0;
        float f0;
        boolean z0;

        r0 := @this: java.util.LinkedHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.HashMap: void <init>(int,float)>(i0, f0);

        virtualinvoke r0.<java.util.LinkedHashMap: void init()>();

        r0.<java.util.LinkedHashMap: boolean accessOrder> = z0;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.LinkedHashMap r0;
        java.util.Map r1;
        int $i0, $i1;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = staticinvoke <java.util.LinkedHashMap: int capacityForInitSize(int)>($i0);

        specialinvoke r0.<java.util.LinkedHashMap: void <init>(int)>($i1);

        virtualinvoke r0.<java.util.LinkedHashMap: void constructorPutAll(java.util.Map)>(r1);

        return;
    }

    void init()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$LinkedEntry $r1;

        r0 := @this: java.util.LinkedHashMap;

        $r1 = new java.util.LinkedHashMap$LinkedEntry;

        specialinvoke $r1.<java.util.LinkedHashMap$LinkedEntry: void <init>()>();

        r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header> = $r1;

        return;
    }

    public java.util.Map$Entry eldest()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$LinkedEntry r1, $r2, $r3, $r4;

        r0 := @this: java.util.LinkedHashMap;

        $r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r1 = $r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        $r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        if r1 == $r3 goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    void addNewEntry(java.lang.Object, java.lang.Object, int, int)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, r2, $r11;
        int i0, i1;
        java.util.LinkedHashMap$LinkedEntry r3, r4, r5, r6, $r7;
        java.util.HashMap$HashMapEntry[] $r8, $r10;
        java.util.HashMap$HashMapEntry $r9;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r4 = r3.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        if r4 == r3 goto label1;

        $z0 = virtualinvoke r0.<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>(r4);

        if $z0 == 0 goto label1;

        $r11 = r4.<java.util.LinkedHashMap$LinkedEntry: java.lang.Object key>;

        virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r11);

     label1:
        r5 = r3.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r7 = new java.util.LinkedHashMap$LinkedEntry;

        $r8 = r0.<java.util.LinkedHashMap: java.util.HashMap$HashMapEntry[] table>;

        $r9 = $r8[i1];

        specialinvoke $r7.<java.util.LinkedHashMap$LinkedEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry,java.util.LinkedHashMap$LinkedEntry,java.util.LinkedHashMap$LinkedEntry)>(r1, r2, i0, $r9, r3, r5);

        r6 = $r7;

        $r10 = r0.<java.util.LinkedHashMap: java.util.HashMap$HashMapEntry[] table>;

        r3.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r6;

        r5.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r6;

        $r10[i1] = r6;

        return;
    }

    void addNewEntryForNullKey(java.lang.Object)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r7;
        java.util.LinkedHashMap$LinkedEntry r2, r3, r4, r5, $r6;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r3 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        if r3 == r2 goto label1;

        $z0 = virtualinvoke r0.<java.util.LinkedHashMap: boolean removeEldestEntry(java.util.Map$Entry)>(r3);

        if $z0 == 0 goto label1;

        $r7 = r3.<java.util.LinkedHashMap$LinkedEntry: java.lang.Object key>;

        virtualinvoke r0.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r7);

     label1:
        r4 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r6 = new java.util.LinkedHashMap$LinkedEntry;

        specialinvoke $r6.<java.util.LinkedHashMap$LinkedEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry,java.util.LinkedHashMap$LinkedEntry,java.util.LinkedHashMap$LinkedEntry)>(null, r1, 0, null, r2, r4);

        r5 = $r6;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r5;

        r4.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r5;

        r0.<java.util.LinkedHashMap: java.util.HashMap$HashMapEntry entryForNullKey> = r5;

        return;
    }

    java.util.HashMap$HashMapEntry constructorNewEntry(java.lang.Object, java.lang.Object, int, java.util.HashMap$HashMapEntry)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, r2;
        int i0;
        java.util.HashMap$HashMapEntry r3;
        java.util.LinkedHashMap$LinkedEntry r4, r5, r6, $r7;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.HashMap$HashMapEntry;

        r4 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r5 = r4.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r7 = new java.util.LinkedHashMap$LinkedEntry;

        specialinvoke $r7.<java.util.LinkedHashMap$LinkedEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry,java.util.LinkedHashMap$LinkedEntry,java.util.LinkedHashMap$LinkedEntry)>(r1, r2, i0, r3, r4, r5);

        r6 = $r7;

        r4.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r6;

        r5.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r6;

        return r6;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, r5, $r6, $r9;
        java.util.HashMap$HashMapEntry r2, r4;
        java.util.HashMap$HashMapEntry[] r3;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2;
        java.util.LinkedHashMap$LinkedEntry $r7, $r8;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label3;

        r2 = r0.<java.util.LinkedHashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r2 != null goto label1;

        return null;

     label1:
        $z2 = r0.<java.util.LinkedHashMap: boolean accessOrder>;

        if $z2 == 0 goto label2;

        $r8 = (java.util.LinkedHashMap$LinkedEntry) r2;

        specialinvoke r0.<java.util.LinkedHashMap: void makeTail(java.util.LinkedHashMap$LinkedEntry)>($r8);

     label2:
        $r9 = r2.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        return $r9;

     label3:
        i4 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.LinkedHashMap: java.util.HashMap$HashMapEntry[] table>;

        $i0 = lengthof r3;

        $i1 = $i0 - 1;

        $i2 = i4 & $i1;

        r4 = r3[$i2];

     label4:
        if r4 == null goto label8;

        r5 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        if r5 == r1 goto label5;

        $i3 = r4.<java.util.HashMap$HashMapEntry: int hash>;

        if $i3 != i4 goto label7;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label7;

     label5:
        $z0 = r0.<java.util.LinkedHashMap: boolean accessOrder>;

        if $z0 == 0 goto label6;

        $r7 = (java.util.LinkedHashMap$LinkedEntry) r4;

        specialinvoke r0.<java.util.LinkedHashMap: void makeTail(java.util.LinkedHashMap$LinkedEntry)>($r7);

     label6:
        $r6 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        return $r6;

     label7:
        r4 = r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label8:
        return null;
    }

    private void makeTail(java.util.LinkedHashMap$LinkedEntry)
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$LinkedEntry r1, r2, r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.util.LinkedHashMap$LinkedEntry;

        $r5 = r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r4 = r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        $r5.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = $r4;

        $r7 = r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        $r6 = r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r7.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = $r6;

        r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r3 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r2;

        r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r3;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r1;

        r3.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r1;

        $i0 = r0.<java.util.LinkedHashMap: int modCount>;

        $i1 = $i0 + 1;

        r0.<java.util.LinkedHashMap: int modCount> = $i1;

        return;
    }

    void preModify(java.util.HashMap$HashMapEntry)
    {
        java.util.LinkedHashMap r0;
        java.util.HashMap$HashMapEntry r1;
        boolean $z0;
        java.util.LinkedHashMap$LinkedEntry $r2;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.util.HashMap$HashMapEntry;

        $z0 = r0.<java.util.LinkedHashMap: boolean accessOrder>;

        if $z0 == 0 goto label1;

        $r2 = (java.util.LinkedHashMap$LinkedEntry) r1;

        specialinvoke r0.<java.util.LinkedHashMap: void makeTail(java.util.LinkedHashMap$LinkedEntry)>($r2);

     label1:
        return;
    }

    void postRemove(java.util.HashMap$HashMapEntry)
    {
        java.util.LinkedHashMap r0;
        java.util.HashMap$HashMapEntry r1;
        java.util.LinkedHashMap$LinkedEntry r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.util.HashMap$HashMapEntry;

        r2 = (java.util.LinkedHashMap$LinkedEntry) r1;

        $r4 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r3 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        $r4.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = $r3;

        $r6 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        $r5 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv>;

        $r6.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = $r5;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = null;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = null;

        return;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.LinkedHashMap r0;
        java.lang.Object r1, $r4, $r5;
        java.util.LinkedHashMap$LinkedEntry r2, r3, r6, r7;
        boolean $z0;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label4;

        r2 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r3 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

     label1:
        if r3 == r2 goto label3;

        $r5 = r3.<java.util.LinkedHashMap$LinkedEntry: java.lang.Object value>;

        if $r5 != null goto label2;

        return 1;

     label2:
        r3 = r3.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        goto label1;

     label3:
        return 0;

     label4:
        r6 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r7 = r6.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

     label5:
        if r7 == r6 goto label7;

        $r4 = r7.<java.util.LinkedHashMap$LinkedEntry: java.lang.Object value>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        return 1;

     label6:
        r7 = r7.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        goto label5;

     label7:
        return 0;
    }

    public void clear()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$LinkedEntry r1, r2, r3;

        r0 := @this: java.util.LinkedHashMap;

        specialinvoke r0.<java.util.HashMap: void clear()>();

        r1 = r0.<java.util.LinkedHashMap: java.util.LinkedHashMap$LinkedEntry header>;

        r2 = r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

     label1:
        if r2 == r1 goto label2;

        r3 = r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt>;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = null;

        r2.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = null;

        r2 = r3;

        goto label1;

     label2:
        r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry prv> = r1;

        r1.<java.util.LinkedHashMap$LinkedEntry: java.util.LinkedHashMap$LinkedEntry nxt> = r1;

        return;
    }

    java.util.Iterator newKeyIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$KeyIterator $r1;

        r0 := @this: java.util.LinkedHashMap;

        $r1 = new java.util.LinkedHashMap$KeyIterator;

        specialinvoke $r1.<java.util.LinkedHashMap$KeyIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);

        return $r1;
    }

    java.util.Iterator newValueIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$ValueIterator $r1;

        r0 := @this: java.util.LinkedHashMap;

        $r1 = new java.util.LinkedHashMap$ValueIterator;

        specialinvoke $r1.<java.util.LinkedHashMap$ValueIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);

        return $r1;
    }

    java.util.Iterator newEntryIterator()
    {
        java.util.LinkedHashMap r0;
        java.util.LinkedHashMap$EntryIterator $r1;

        r0 := @this: java.util.LinkedHashMap;

        $r1 = new java.util.LinkedHashMap$EntryIterator;

        specialinvoke $r1.<java.util.LinkedHashMap$EntryIterator: void <init>(java.util.LinkedHashMap,java.util.LinkedHashMap$1)>(r0, null);

        return $r1;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        java.util.LinkedHashMap r0;
        java.util.Map$Entry r1;

        r0 := @this: java.util.LinkedHashMap;

        r1 := @parameter0: java.util.Map$Entry;

        return 0;
    }

    public static void <clinit>()
    {
        <java.util.LinkedHashMap: long serialVersionUID> = 3801124242820219131L;

        return;
    }
}
