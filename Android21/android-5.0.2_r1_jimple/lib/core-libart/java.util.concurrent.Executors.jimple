public class java.util.concurrent.Executors extends java.lang.Object
{

    public static java.util.concurrent.ExecutorService newFixedThreadPool(int)
    {
        int i0;
        java.util.concurrent.ThreadPoolExecutor $r0;
        java.util.concurrent.LinkedBlockingQueue $r1;
        java.util.concurrent.TimeUnit $r2;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(i0, i0, 0L, $r2, $r1);

        return $r0;
    }

    public static java.util.concurrent.ExecutorService newWorkStealingPool(int)
    {
        int i0;
        java.util.concurrent.ForkJoinPool $r0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r1;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.ForkJoinPool;

        $r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke $r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>(i0, $r1, null, 1);

        return $r0;
    }

    public static java.util.concurrent.ExecutorService newWorkStealingPool()
    {
        java.util.concurrent.ForkJoinPool $r0;
        java.lang.Runtime $r1;
        int $i0;
        java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory $r2;

        $r0 = new java.util.concurrent.ForkJoinPool;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        $r2 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory>;

        specialinvoke $r0.<java.util.concurrent.ForkJoinPool: void <init>(int,java.util.concurrent.ForkJoinPool$ForkJoinWorkerThreadFactory,java.lang.Thread$UncaughtExceptionHandler,boolean)>($i0, $r2, null, 1);

        return $r0;
    }

    public static java.util.concurrent.ExecutorService newFixedThreadPool(int, java.util.concurrent.ThreadFactory)
    {
        int i0;
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.concurrent.ThreadFactory;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(i0, i0, 0L, $r3, $r2, r0);

        return $r1;
    }

    public static java.util.concurrent.ExecutorService newSingleThreadExecutor()
    {
        java.util.concurrent.Executors$FinalizableDelegatedExecutorService $r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.util.concurrent.TimeUnit $r3;

        $r0 = new java.util.concurrent.Executors$FinalizableDelegatedExecutorService;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(1, 1, 0L, $r3, $r2);

        specialinvoke $r0.<java.util.concurrent.Executors$FinalizableDelegatedExecutorService: void <init>(java.util.concurrent.ExecutorService)>($r1);

        return $r0;
    }

    public static java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.Executors$FinalizableDelegatedExecutorService $r1;
        java.util.concurrent.ThreadPoolExecutor $r2;
        java.util.concurrent.LinkedBlockingQueue $r3;
        java.util.concurrent.TimeUnit $r4;

        r0 := @parameter0: java.util.concurrent.ThreadFactory;

        $r1 = new java.util.concurrent.Executors$FinalizableDelegatedExecutorService;

        $r2 = new java.util.concurrent.ThreadPoolExecutor;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r3 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(1, 1, 0L, $r4, $r3, r0);

        specialinvoke $r1.<java.util.concurrent.Executors$FinalizableDelegatedExecutorService: void <init>(java.util.concurrent.ExecutorService)>($r2);

        return $r1;
    }

    public static java.util.concurrent.ExecutorService newCachedThreadPool()
    {
        java.util.concurrent.ThreadPoolExecutor $r0;
        java.util.concurrent.SynchronousQueue $r1;
        java.util.concurrent.TimeUnit $r2;

        $r0 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r1.<java.util.concurrent.SynchronousQueue: void <init>()>();

        specialinvoke $r0.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(0, 2147483647, 60L, $r2, $r1);

        return $r0;
    }

    public static java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.ThreadPoolExecutor $r1;
        java.util.concurrent.SynchronousQueue $r2;
        java.util.concurrent.TimeUnit $r3;

        r0 := @parameter0: java.util.concurrent.ThreadFactory;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>();

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(0, 2147483647, 60L, $r3, $r2, r0);

        return $r1;
    }

    public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
    {
        java.util.concurrent.Executors$DelegatedScheduledExecutorService $r0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1;

        $r0 = new java.util.concurrent.Executors$DelegatedScheduledExecutorService;

        $r1 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(1);

        specialinvoke $r0.<java.util.concurrent.Executors$DelegatedScheduledExecutorService: void <init>(java.util.concurrent.ScheduledExecutorService)>($r1);

        return $r0;
    }

    public static java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)
    {
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.Executors$DelegatedScheduledExecutorService $r1;
        java.util.concurrent.ScheduledThreadPoolExecutor $r2;

        r0 := @parameter0: java.util.concurrent.ThreadFactory;

        $r1 = new java.util.concurrent.Executors$DelegatedScheduledExecutorService;

        $r2 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r2.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(1, r0);

        specialinvoke $r1.<java.util.concurrent.Executors$DelegatedScheduledExecutorService: void <init>(java.util.concurrent.ScheduledExecutorService)>($r2);

        return $r1;
    }

    public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)
    {
        int i0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r0;

        i0 := @parameter0: int;

        $r0 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r0.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int)>(i0);

        return $r0;
    }

    public static java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int, java.util.concurrent.ThreadFactory)
    {
        int i0;
        java.util.concurrent.ThreadFactory r0;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.concurrent.ThreadFactory;

        $r1 = new java.util.concurrent.ScheduledThreadPoolExecutor;

        specialinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor: void <init>(int,java.util.concurrent.ThreadFactory)>(i0, r0);

        return $r1;
    }

    public static java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService)
    {
        java.util.concurrent.ExecutorService r0;
        java.util.concurrent.Executors$DelegatedExecutorService $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.concurrent.ExecutorService;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$DelegatedExecutorService;

        specialinvoke $r1.<java.util.concurrent.Executors$DelegatedExecutorService: void <init>(java.util.concurrent.ExecutorService)>(r0);

        return $r1;
    }

    public static java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)
    {
        java.util.concurrent.ScheduledExecutorService r0;
        java.util.concurrent.Executors$DelegatedScheduledExecutorService $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.concurrent.ScheduledExecutorService;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$DelegatedScheduledExecutorService;

        specialinvoke $r1.<java.util.concurrent.Executors$DelegatedScheduledExecutorService: void <init>(java.util.concurrent.ScheduledExecutorService)>(r0);

        return $r1;
    }

    public static java.util.concurrent.ThreadFactory defaultThreadFactory()
    {
        java.util.concurrent.Executors$DefaultThreadFactory $r0;

        $r0 = new java.util.concurrent.Executors$DefaultThreadFactory;

        specialinvoke $r0.<java.util.concurrent.Executors$DefaultThreadFactory: void <init>()>();

        return $r0;
    }

    public static java.util.concurrent.ThreadFactory privilegedThreadFactory()
    {
        java.util.concurrent.Executors$PrivilegedThreadFactory $r0;

        $r0 = new java.util.concurrent.Executors$PrivilegedThreadFactory;

        specialinvoke $r0.<java.util.concurrent.Executors$PrivilegedThreadFactory: void <init>()>();

        return $r0;
    }

    public static java.util.concurrent.Callable callable(java.lang.Runnable, java.lang.Object)
    {
        java.lang.Runnable r0;
        java.lang.Object r1;
        java.util.concurrent.Executors$RunnableAdapter $r2;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = new java.util.concurrent.Executors$RunnableAdapter;

        specialinvoke $r2.<java.util.concurrent.Executors$RunnableAdapter: void <init>(java.lang.Runnable,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.util.concurrent.Callable callable(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.Executors$RunnableAdapter $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.Runnable;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$RunnableAdapter;

        specialinvoke $r1.<java.util.concurrent.Executors$RunnableAdapter: void <init>(java.lang.Runnable,java.lang.Object)>(r0, null);

        return $r1;
    }

    public static java.util.concurrent.Callable callable(java.security.PrivilegedAction)
    {
        java.security.PrivilegedAction r0;
        java.util.concurrent.Executors$1 $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.security.PrivilegedAction;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$1;

        specialinvoke $r1.<java.util.concurrent.Executors$1: void <init>(java.security.PrivilegedAction)>(r0);

        return $r1;
    }

    public static java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction)
    {
        java.security.PrivilegedExceptionAction r0;
        java.util.concurrent.Executors$2 $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.security.PrivilegedExceptionAction;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$2;

        specialinvoke $r1.<java.util.concurrent.Executors$2: void <init>(java.security.PrivilegedExceptionAction)>(r0);

        return $r1;
    }

    public static java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.Executors$PrivilegedCallable $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$PrivilegedCallable;

        specialinvoke $r1.<java.util.concurrent.Executors$PrivilegedCallable: void <init>(java.util.concurrent.Callable)>(r0);

        return $r1;
    }

    public static java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.concurrent.Callable;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader;

        specialinvoke $r1.<java.util.concurrent.Executors$PrivilegedCallableUsingCurrentClassLoader: void <init>(java.util.concurrent.Callable)>(r0);

        return $r1;
    }

    private void <init>()
    {
        java.util.concurrent.Executors r0;

        r0 := @this: java.util.concurrent.Executors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
