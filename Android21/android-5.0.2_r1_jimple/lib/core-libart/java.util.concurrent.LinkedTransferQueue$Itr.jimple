final class java.util.concurrent.LinkedTransferQueue$Itr extends java.lang.Object implements java.util.Iterator
{
    private java.util.concurrent.LinkedTransferQueue$Node nextNode;
    private java.lang.Object nextItem;
    private java.util.concurrent.LinkedTransferQueue$Node lastRet;
    private java.util.concurrent.LinkedTransferQueue$Node lastPred;
    final java.util.concurrent.LinkedTransferQueue this$0;

    private void advance(java.util.concurrent.LinkedTransferQueue$Node)
    {
        java.util.concurrent.LinkedTransferQueue$Itr r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, r2, r3, r4, r5, r6, $r8, $r9, $r10, $r13, $r14, $r15, r16, r17;
        java.lang.Object r7, $r11;
        boolean $z0, $z2, $z3, $z4;
        java.util.concurrent.LinkedTransferQueue $r12;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Itr;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue$Node;

        $r8 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastRet>;

        r2 = $r8;

        if $r8 == null goto label01;

        $z4 = virtualinvoke r2.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z4 != 0 goto label01;

        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastPred> = r2;

        goto label04;

     label01:
        $r9 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastPred>;

        r3 = $r9;

        if $r9 == null goto label02;

        $z2 = virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z2 == 0 goto label03;

     label02:
        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastPred> = null;

        goto label04;

     label03:
        $r14 = r3.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        r4 = $r14;

        if $r14 == null goto label04;

        if r4 == r3 goto label04;

        $z3 = virtualinvoke r4.<java.util.concurrent.LinkedTransferQueue$Node: boolean isMatched()>();

        if $z3 == 0 goto label04;

        $r15 = r4.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        r5 = $r15;

        if $r15 == null goto label04;

        if r5 == r4 goto label04;

        virtualinvoke r3.<java.util.concurrent.LinkedTransferQueue$Node: boolean casNext(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r4, r5);

        goto label03;

     label04:
        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastRet> = r1;

        r16 = r1;

     label05:
        if r16 != null goto label06;

        $r12 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue this$0>;

        $r13 = $r12.<java.util.concurrent.LinkedTransferQueue: java.util.concurrent.LinkedTransferQueue$Node head>;

        goto label07;

     label06:
        $r13 = r16.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

     label07:
        r17 = $r13;

        if r17 != null goto label08;

        goto label16;

     label08:
        if r17 != r16 goto label09;

        r16 = null;

        goto label05;

     label09:
        r7 = r17.<java.util.concurrent.LinkedTransferQueue$Node: java.lang.Object item>;

        $z0 = r17.<java.util.concurrent.LinkedTransferQueue$Node: boolean isData>;

        if $z0 == 0 goto label10;

        if r7 == null goto label11;

        if r7 == r17 goto label11;

        $r11 = staticinvoke <java.util.concurrent.LinkedTransferQueue: java.lang.Object cast(java.lang.Object)>(r7);

        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.lang.Object nextItem> = $r11;

        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node nextNode> = r17;

        return;

     label10:
        if r7 != null goto label11;

        goto label16;

     label11:
        if r16 != null goto label12;

        r16 = r17;

        goto label15;

     label12:
        $r10 = r17.<java.util.concurrent.LinkedTransferQueue$Node: java.util.concurrent.LinkedTransferQueue$Node next>;

        r6 = $r10;

        if $r10 != null goto label13;

        goto label16;

     label13:
        if r17 != r6 goto label14;

        r16 = null;

        goto label15;

     label14:
        virtualinvoke r16.<java.util.concurrent.LinkedTransferQueue$Node: boolean casNext(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>(r17, r6);

     label15:
        goto label05;

     label16:
        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node nextNode> = null;

        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.lang.Object nextItem> = null;

        return;
    }

    void <init>(java.util.concurrent.LinkedTransferQueue)
    {
        java.util.concurrent.LinkedTransferQueue$Itr r0;
        java.util.concurrent.LinkedTransferQueue r1;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Itr;

        r1 := @parameter0: java.util.concurrent.LinkedTransferQueue;

        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue$Itr: void advance(java.util.concurrent.LinkedTransferQueue$Node)>(null);

        return;
    }

    public final boolean hasNext()
    {
        java.util.concurrent.LinkedTransferQueue$Itr r0;
        java.util.concurrent.LinkedTransferQueue$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Itr;

        $r1 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node nextNode>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.Object next()
    {
        java.util.concurrent.LinkedTransferQueue$Itr r0;
        java.util.concurrent.LinkedTransferQueue$Node r1;
        java.lang.Object r2;
        java.util.NoSuchElementException $r3;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Itr;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node nextNode>;

        if r1 != null goto label1;

        $r3 = new java.util.NoSuchElementException;

        specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>();

        throw $r3;

     label1:
        r2 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.lang.Object nextItem>;

        specialinvoke r0.<java.util.concurrent.LinkedTransferQueue$Itr: void advance(java.util.concurrent.LinkedTransferQueue$Node)>(r1);

        return r2;
    }

    public final void remove()
    {
        java.util.concurrent.LinkedTransferQueue$Itr r0;
        java.util.concurrent.LinkedTransferQueue$Node r1, $r2;
        boolean $z0;
        java.util.concurrent.LinkedTransferQueue $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: java.util.concurrent.LinkedTransferQueue$Itr;

        r1 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastRet>;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastRet> = null;

        $z0 = virtualinvoke r1.<java.util.concurrent.LinkedTransferQueue$Node: boolean tryMatchData()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue this$0>;

        $r2 = r0.<java.util.concurrent.LinkedTransferQueue$Itr: java.util.concurrent.LinkedTransferQueue$Node lastPred>;

        virtualinvoke $r3.<java.util.concurrent.LinkedTransferQueue: void unsplice(java.util.concurrent.LinkedTransferQueue$Node,java.util.concurrent.LinkedTransferQueue$Node)>($r2, r1);

     label2:
        return;
    }
}
