public final class java.lang.Byte extends java.lang.Number implements java.lang.Comparable
{
    private static final long serialVersionUID;
    private final byte value;
    public static final byte MAX_VALUE;
    public static final byte MIN_VALUE;
    public static final int SIZE;
    public static final java.lang.Class TYPE;
    private static final java.lang.Byte[] VALUES;

    public void <init>(byte)
    {
        java.lang.Byte r0;
        byte b0;

        r0 := @this: java.lang.Byte;

        b0 := @parameter0: byte;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Byte: byte value> = b0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Byte r0;
        java.lang.String r1;
        byte $b0;

        r0 := @this: java.lang.Byte;

        r1 := @parameter0: java.lang.String;

        $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Byte: void <init>(byte)>($b0);

        return;
    }

    public byte byteValue()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        return $b0;
    }

    public int compareTo(java.lang.Byte)
    {
        java.lang.Byte r0, r1;
        byte $b0, $b1;
        int $i2;

        r0 := @this: java.lang.Byte;

        r1 := @parameter0: java.lang.Byte;

        $b1 = r0.<java.lang.Byte: byte value>;

        $b0 = r1.<java.lang.Byte: byte value>;

        $i2 = staticinvoke <java.lang.Byte: int compare(byte,byte)>($b1, $b0);

        return $i2;
    }

    public static int compare(byte, byte)
    {
        byte b0, b1, $b2;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        if b0 <= b1 goto label1;

        $b2 = 1;

        goto label3;

     label1:
        if b0 >= b1 goto label2;

        $b2 = -1;

        goto label3;

     label2:
        $b2 = 0;

     label3:
        return $b2;
    }

    public static java.lang.Byte decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r7;
        int i0;
        byte b1;
        java.lang.Integer $r1;
        java.lang.NumberFormatException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Byte $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r0);

        i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        b1 = (byte) i0;

        if b1 != i0 goto label1;

        $r8 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b1);

        return $r8;

     label1:
        $r2 = new java.lang.NumberFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value out of range for byte: \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    public double doubleValue()
    {
        java.lang.Byte r0;
        byte $b0;
        double $d0;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        $d0 = (double) $b0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Byte r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte $b0, $b1;

        r0 := @this: java.lang.Byte;

        r1 := @parameter0: java.lang.Object;

        if r1 == r0 goto label1;

        $z0 = r1 instanceof java.lang.Byte;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.Byte) r1;

        $b1 = $r2.<java.lang.Byte: byte value>;

        $b0 = r0.<java.lang.Byte: byte value>;

        if $b1 != $b0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public float floatValue()
    {
        java.lang.Byte r0;
        byte $b0;
        float $f0;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        $f0 = (float) $b0;

        return $f0;
    }

    public int hashCode()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        return $b0;
    }

    public int intValue()
    {
        java.lang.Byte r0;
        byte $b0;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        return $b0;
    }

    public long longValue()
    {
        java.lang.Byte r0;
        byte $b0;
        long $l1;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        $l1 = (long) $b0;

        return $l1;
    }

    public static byte parseByte(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        byte $b0;

        r0 := @parameter0: java.lang.String;

        $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r0, 10);

        return $b0;
    }

    public static byte parseByte(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r6;
        int i0, i1;
        byte b2;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);

        b2 = (byte) i1;

        if b2 != i1 goto label1;

        return b2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value out of range for byte: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public short shortValue()
    {
        java.lang.Byte r0;
        byte $b0;
        short $s1;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        $s1 = (short) $b0;

        return $s1;
    }

    public java.lang.String toString()
    {
        java.lang.Byte r0;
        byte $b0;
        java.lang.String $r1;

        r0 := @this: java.lang.Byte;

        $b0 = r0.<java.lang.Byte: byte value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($b0);

        return $r1;
    }

    public static java.lang.String toHexString(byte, boolean)
    {
        byte b0;
        boolean z0;
        java.lang.String $r0;

        b0 := @parameter0: byte;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String byteToHexString(byte,boolean)>(b0, z0);

        return $r0;
    }

    public static java.lang.String toString(byte)
    {
        byte b0;
        java.lang.String $r0;

        b0 := @parameter0: byte;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(b0);

        return $r0;
    }

    public static java.lang.Byte valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        byte $b0;
        java.lang.Byte $r1;

        r0 := @parameter0: java.lang.String;

        $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0);

        return $r1;
    }

    public static java.lang.Byte valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0;
        byte $b1;
        java.lang.Byte $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $b1 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String,int)>(r0, i0);

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        return $r1;
    }

    public static java.lang.Byte valueOf(byte)
    {
        byte b0;
        int $i1;
        java.lang.Byte[] $r0;
        java.lang.Byte $r1;

        b0 := @parameter0: byte;

        $r0 = <java.lang.Byte: java.lang.Byte[] VALUES>;

        $i1 = b0 + 128;

        $r1 = $r0[$i1];

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Byte r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Byte;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Byte) r1;

        $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        int i0, $i2;
        java.lang.Class $r0, $r1;
        java.lang.Byte[] $r2, $r4;
        java.lang.Byte $r3;
        byte $b1;

        <java.lang.Byte: int SIZE> = 8;

        <java.lang.Byte: byte MIN_VALUE> = -128;

        <java.lang.Byte: byte MAX_VALUE> = 127;

        <java.lang.Byte: long serialVersionUID> = -7183698231559129828L;

        $r0 = class "[B";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Byte: java.lang.Class TYPE> = $r1;

        $r2 = newarray (java.lang.Byte)[256];

        <java.lang.Byte: java.lang.Byte[] VALUES> = $r2;

        i0 = -128;

     label1:
        if i0 >= 128 goto label2;

        $r4 = <java.lang.Byte: java.lang.Byte[] VALUES>;

        $i2 = i0 + 128;

        $r3 = new java.lang.Byte;

        $b1 = (byte) i0;

        specialinvoke $r3.<java.lang.Byte: void <init>(byte)>($b1);

        $r4[$i2] = $r3;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
}
