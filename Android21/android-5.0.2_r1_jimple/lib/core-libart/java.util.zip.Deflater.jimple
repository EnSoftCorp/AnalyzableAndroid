public class java.util.zip.Deflater extends java.lang.Object
{
    public static final int BEST_COMPRESSION;
    public static final int BEST_SPEED;
    public static final int NO_COMPRESSION;
    public static final int DEFAULT_COMPRESSION;
    public static final int DEFAULT_STRATEGY;
    public static final int DEFLATED;
    public static final int FILTERED;
    public static final int HUFFMAN_ONLY;
    public static final int NO_FLUSH;
    public static final int SYNC_FLUSH;
    public static final int FULL_FLUSH;
    private static final int FINISH;
    private int flushParm;
    private boolean finished;
    private int compressLevel;
    private int strategy;
    private long streamHandle;
    private byte[] inputBuffer;
    private int inRead;
    private int inLength;
    private final dalvik.system.CloseGuard guard;

    public void <init>()
    {
        java.util.zip.Deflater r0;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void <init>(int,boolean)>(-1, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.zip.Deflater r0;
        int i0;

        r0 := @this: java.util.zip.Deflater;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.zip.Deflater: void <init>(int,boolean)>(i0, 0);

        return;
    }

    public void <init>(int, boolean)
    {
        java.util.zip.Deflater r0;
        int i0, $i1, $i2;
        boolean z0;
        dalvik.system.CloseGuard $r1, $r7;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        long $l3;

        r0 := @this: java.util.zip.Deflater;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.Deflater: int flushParm> = 0;

        r0.<java.util.zip.Deflater: int compressLevel> = -1;

        r0.<java.util.zip.Deflater: int strategy> = 0;

        r0.<java.util.zip.Deflater: long streamHandle> = -1L;

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.zip.Deflater: dalvik.system.CloseGuard guard> = $r1;

        if i0 < -1 goto label1;

        if i0 <= 9 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad level: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label2:
        r0.<java.util.zip.Deflater: int compressLevel> = i0;

        $i2 = r0.<java.util.zip.Deflater: int compressLevel>;

        $i1 = r0.<java.util.zip.Deflater: int strategy>;

        $l3 = specialinvoke r0.<java.util.zip.Deflater: long createStream(int,int,boolean)>($i2, $i1, z0);

        r0.<java.util.zip.Deflater: long streamHandle> = $l3;

        $r7 = r0.<java.util.zip.Deflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void open(java.lang.String)>("end");

        return;
    }

    public int deflate(byte[])
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $i1 = virtualinvoke r0.<java.util.zip.Deflater: int deflate(byte[],int,int)>(r1, 0, $i0);

        return $i1;
    }

    public synchronized int deflate(byte[], int, int)
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int i0, i1, $i2, $i3;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<java.util.zip.Deflater: int flushParm>;

        $i3 = specialinvoke r0.<java.util.zip.Deflater: int deflateImpl(byte[],int,int,int)>(r1, i0, i1, $i2);

        return $i3;
    }

    public synchronized int deflate(byte[], int, int, int)
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i2 == 0 goto label1;

        if i2 == 2 goto label1;

        if i2 == 3 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad flush value: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $i3 = specialinvoke r0.<java.util.zip.Deflater: int deflateImpl(byte[],int,int,int)>(r1, i0, i1, i2);

        return $i3;
    }

    private synchronized int deflateImpl(byte[], int, int, int)
    {
        java.util.zip.Deflater r0;
        byte[] r1, $r2, $r3;
        int i0, i1, i2, $i3, $i5;
        long $l4;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $r2 = r0.<java.util.zip.Deflater: byte[] inputBuffer>;

        if $r2 != null goto label1;

        $r3 = <libcore.util.EmptyArray: byte[] BYTE>;

        virtualinvoke r0.<java.util.zip.Deflater: void setInput(byte[])>($r3);

     label1:
        $l4 = r0.<java.util.zip.Deflater: long streamHandle>;

        $i5 = specialinvoke r0.<java.util.zip.Deflater: int deflateImpl(byte[],int,int,long,int)>(r1, i0, i1, $l4, i2);

        return $i5;
    }

    private native int deflateImpl(byte[], int, int, long, int);

    public synchronized void end()
    {
        java.util.zip.Deflater r0;
        dalvik.system.CloseGuard $r1;

        r0 := @this: java.util.zip.Deflater;

        $r1 = r0.<java.util.zip.Deflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        specialinvoke r0.<java.util.zip.Deflater: void endImpl()>();

        return;
    }

    private void endImpl()
    {
        java.util.zip.Deflater r0;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.util.zip.Deflater;

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $l2 = r0.<java.util.zip.Deflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Deflater: void endImpl(long)>($l2);

        r0.<java.util.zip.Deflater: byte[] inputBuffer> = null;

        r0.<java.util.zip.Deflater: long streamHandle> = -1L;

     label1:
        return;
    }

    private native void endImpl(long);

    protected void finalize()
    {
        java.util.zip.Deflater r0, r1;
        java.lang.Throwable r2, r3, r4, $r8, $r9, $r11, $r12, r14;
        dalvik.system.CloseGuard $r5, $r7;
        java.lang.AssertionError $r10, $r13;

        r0 := @this: java.util.zip.Deflater;

     label01:
        $r5 = r0.<java.util.zip.Deflater: dalvik.system.CloseGuard guard>;

        if $r5 == null goto label02;

        $r7 = r0.<java.util.zip.Deflater: dalvik.system.CloseGuard guard>;

        virtualinvoke $r7.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label02:
        r1 = r0;

        entermonitor r0;

     label03:
        virtualinvoke r0.<java.util.zip.Deflater: void end()>();

        specialinvoke r0.<java.util.zip.Deflater: void endImpl()>();

        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r11 := @caughtexception;

        r2 = $r11;

        exitmonitor r1;

     label06:
        throw r2;

     label07:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label08:
        goto label15;

     label09:
        $r12 := @caughtexception;

        r14 = $r12;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(r14);

        throw $r13;

     label10:
        $r8 := @caughtexception;

        r3 = $r8;

     label11:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

        r4 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r4);

        throw $r10;

     label14:
        throw r3;

     label15:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label01 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public synchronized void finish()
    {
        java.util.zip.Deflater r0;

        r0 := @this: java.util.zip.Deflater;

        r0.<java.util.zip.Deflater: int flushParm> = 4;

        return;
    }

    public synchronized boolean finished()
    {
        java.util.zip.Deflater r0;
        boolean $z0;

        r0 := @this: java.util.zip.Deflater;

        $z0 = r0.<java.util.zip.Deflater: boolean finished>;

        return $z0;
    }

    public synchronized int getAdler()
    {
        java.util.zip.Deflater r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $i1 = specialinvoke r0.<java.util.zip.Deflater: int getAdlerImpl(long)>($l0);

        return $i1;
    }

    private native int getAdlerImpl(long);

    public synchronized int getTotalIn()
    {
        java.util.zip.Deflater r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Deflater: long getTotalInImpl(long)>($l0);

        $i2 = (int) $l1;

        return $i2;
    }

    private native long getTotalInImpl(long);

    public synchronized int getTotalOut()
    {
        java.util.zip.Deflater r0;
        long $l0, $l1;
        int $i2;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Deflater: long getTotalOutImpl(long)>($l0);

        $i2 = (int) $l1;

        return $i2;
    }

    private native long getTotalOutImpl(long);

    public synchronized boolean needsInput()
    {
        java.util.zip.Deflater r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.zip.Deflater;

        $r1 = r0.<java.util.zip.Deflater: byte[] inputBuffer>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $i1 = r0.<java.util.zip.Deflater: int inRead>;

        $i0 = r0.<java.util.zip.Deflater: int inLength>;

        if $i1 != $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public synchronized void reset()
    {
        java.util.zip.Deflater r0;
        long $l0;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        r0.<java.util.zip.Deflater: int flushParm> = 0;

        r0.<java.util.zip.Deflater: boolean finished> = 0;

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Deflater: void resetImpl(long)>($l0);

        r0.<java.util.zip.Deflater: byte[] inputBuffer> = null;

        return;
    }

    private native void resetImpl(long);

    public void setDictionary(byte[])
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Deflater: void setDictionary(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public synchronized void setDictionary(byte[], int, int)
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int i0, i1, $i2;
        long $l3;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $l3 = r0.<java.util.zip.Deflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Deflater: void setDictionaryImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

        return;
    }

    private native void setDictionaryImpl(byte[], int, int, long);

    public void setInput(byte[])
    {
        java.util.zip.Deflater r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public synchronized void setInput(byte[], int, int)
    {
        java.util.zip.Deflater r0;
        byte[] r1, $r2;
        int i0, i1, $i2, $i5, $i6;
        long $l3, $l4;

        r0 := @this: java.util.zip.Deflater;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        r0.<java.util.zip.Deflater: int inLength> = i1;

        r0.<java.util.zip.Deflater: int inRead> = 0;

        $r2 = r0.<java.util.zip.Deflater: byte[] inputBuffer>;

        if $r2 != null goto label1;

        $i6 = r0.<java.util.zip.Deflater: int compressLevel>;

        $i5 = r0.<java.util.zip.Deflater: int strategy>;

        $l4 = r0.<java.util.zip.Deflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Deflater: void setLevelsImpl(int,int,long)>($i6, $i5, $l4);

     label1:
        r0.<java.util.zip.Deflater: byte[] inputBuffer> = r1;

        $l3 = r0.<java.util.zip.Deflater: long streamHandle>;

        specialinvoke r0.<java.util.zip.Deflater: void setInputImpl(byte[],int,int,long)>(r1, i0, i1, $l3);

        return;
    }

    private native void setLevelsImpl(int, int, long);

    private native void setInputImpl(byte[], int, int, long);

    public synchronized void setLevel(int)
    {
        java.util.zip.Deflater r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        byte[] $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: java.util.zip.Deflater;

        i0 := @parameter0: int;

        if i0 < -1 goto label1;

        if i0 <= 9 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad level: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<java.util.zip.Deflater: byte[] inputBuffer>;

        if $r6 == null goto label3;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setLevel cannot be called after setInput");

        throw $r7;

     label3:
        r0.<java.util.zip.Deflater: int compressLevel> = i0;

        return;
    }

    public synchronized void setStrategy(int)
    {
        java.util.zip.Deflater r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        byte[] $r6;
        java.lang.IllegalStateException $r7;

        r0 := @this: java.util.zip.Deflater;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 2 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad strategy: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<java.util.zip.Deflater: byte[] inputBuffer>;

        if $r6 == null goto label3;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setStrategy cannot be called after setInput");

        throw $r7;

     label3:
        r0.<java.util.zip.Deflater: int strategy> = i0;

        return;
    }

    public synchronized long getBytesRead()
    {
        java.util.zip.Deflater r0;
        long $l0, $l1;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Deflater: long getTotalInImpl(long)>($l0);

        return $l1;
    }

    public synchronized long getBytesWritten()
    {
        java.util.zip.Deflater r0;
        long $l0, $l1;

        r0 := @this: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.Deflater: void checkOpen()>();

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $l1 = specialinvoke r0.<java.util.zip.Deflater: long getTotalOutImpl(long)>($l0);

        return $l1;
    }

    private native long createStream(int, int, boolean);

    private void checkOpen()
    {
        java.util.zip.Deflater r0;
        long $l0;
        byte $b1;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.zip.Deflater;

        $l0 = r0.<java.util.zip.Deflater: long streamHandle>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to use Deflater after calling end");

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.Deflater: int FINISH> = 4;

        <java.util.zip.Deflater: int FULL_FLUSH> = 3;

        <java.util.zip.Deflater: int SYNC_FLUSH> = 2;

        <java.util.zip.Deflater: int NO_FLUSH> = 0;

        <java.util.zip.Deflater: int HUFFMAN_ONLY> = 2;

        <java.util.zip.Deflater: int FILTERED> = 1;

        <java.util.zip.Deflater: int DEFLATED> = 8;

        <java.util.zip.Deflater: int DEFAULT_STRATEGY> = 0;

        <java.util.zip.Deflater: int DEFAULT_COMPRESSION> = -1;

        <java.util.zip.Deflater: int NO_COMPRESSION> = 0;

        <java.util.zip.Deflater: int BEST_SPEED> = 1;

        <java.util.zip.Deflater: int BEST_COMPRESSION> = 9;

        return;
    }
}
