class java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask extends java.util.concurrent.FutureTask implements java.util.concurrent.RunnableScheduledFuture
{
    private final long sequenceNumber;
    private long time;
    private final long period;
    java.util.concurrent.RunnableScheduledFuture outerTask;
    int heapIndex;
    final java.util.concurrent.ScheduledThreadPoolExecutor this$0;

    void <init>(java.util.concurrent.ScheduledThreadPoolExecutor, java.lang.Runnable, java.lang.Object, long)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        java.util.concurrent.ScheduledThreadPoolExecutor r1;
        java.lang.Runnable r2;
        java.lang.Object r3;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: java.lang.Object;

        l0 := @parameter3: long;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0> = r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r2, r3);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask> = r0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time> = l0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long period> = 0L;

        $r4 = staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.atomic.AtomicLong access$000()>();

        $l1 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long sequenceNumber> = $l1;

        return;
    }

    void <init>(java.util.concurrent.ScheduledThreadPoolExecutor, java.lang.Runnable, java.lang.Object, long, long)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        java.util.concurrent.ScheduledThreadPoolExecutor r1;
        java.lang.Runnable r2;
        java.lang.Object r3;
        long l0, l1, $l2;
        java.util.concurrent.atomic.AtomicLong $r4;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        r2 := @parameter1: java.lang.Runnable;

        r3 := @parameter2: java.lang.Object;

        l0 := @parameter3: long;

        l1 := @parameter4: long;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0> = r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r2, r3);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask> = r0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time> = l0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long period> = l1;

        $r4 = staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.atomic.AtomicLong access$000()>();

        $l2 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long sequenceNumber> = $l2;

        return;
    }

    void <init>(java.util.concurrent.ScheduledThreadPoolExecutor, java.util.concurrent.Callable, long)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        java.util.concurrent.ScheduledThreadPoolExecutor r1;
        java.util.concurrent.Callable r2;
        long l0, $l1;
        java.util.concurrent.atomic.AtomicLong $r3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor;

        r2 := @parameter1: java.util.concurrent.Callable;

        l0 := @parameter2: long;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0> = r1;

        specialinvoke r0.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r2);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask> = r0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time> = l0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long period> = 0L;

        $r3 = staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor: java.util.concurrent.atomic.AtomicLong access$000()>();

        $l1 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicLong: long getAndIncrement()>();

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long sequenceNumber> = $l1;

        return;
    }

    public long getDelay(java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        java.util.concurrent.TimeUnit r1, $r3;
        java.util.concurrent.ScheduledThreadPoolExecutor $r2;
        long $l0, $l1, $l2, $l3;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.util.concurrent.TimeUnit;

        $l0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time>;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        $l1 = virtualinvoke $r2.<java.util.concurrent.ScheduledThreadPoolExecutor: long now()>();

        $l2 = $l0 - $l1;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l3 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>($l2, $r3);

        return $l3;
    }

    public int compareTo(java.util.concurrent.Delayed)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0, r2;
        java.util.concurrent.Delayed r1;
        long l0, $l1, $l2, $l6, $l7, $l9, $l12, l13;
        boolean $z0;
        java.util.concurrent.TimeUnit $r3, $r4;
        byte $b3, $b4, $b5, $b8, $b10, $b11;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.util.concurrent.Delayed;

        if r1 != r0 goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        if $z0 == 0 goto label5;

        r2 = (java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask) r1;

        $l7 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time>;

        $l6 = r2.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time>;

        l0 = $l7 - $l6;

        $b8 = l0 cmp 0L;

        if $b8 >= 0 goto label2;

        return -1;

     label2:
        $b10 = l0 cmp 0L;

        if $b10 <= 0 goto label3;

        return 1;

     label3:
        $l12 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long sequenceNumber>;

        $l9 = r2.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long sequenceNumber>;

        $b11 = $l12 cmp $l9;

        if $b11 >= 0 goto label4;

        return -1;

     label4:
        return 1;

     label5:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l1 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long getDelay(java.util.concurrent.TimeUnit)>($r3);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l2 = interfaceinvoke r1.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r4);

        l13 = $l1 - $l2;

        $b3 = l13 cmp 0L;

        if $b3 >= 0 goto label6;

        $b5 = -1;

        goto label8;

     label6:
        $b4 = l13 cmp 0L;

        if $b4 <= 0 goto label7;

        $b5 = 1;

        goto label8;

     label7:
        $b5 = 0;

     label8:
        return $b5;
    }

    public boolean isPeriodic()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $l0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long period>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void setNextRunTime()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        long l0, $l2, $l3, $l4, $l5;
        byte $b1;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        l0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long period>;

        $b1 = l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $l4 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time>;

        $l5 = $l4 + l0;

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time> = $l5;

        goto label2;

     label1:
        $r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        $l2 = neg l0;

        $l3 = virtualinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor: long triggerTime(long)>($l2);

        r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: long time> = $l3;

     label2:
        return;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        boolean z0, z1, $z2;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1, $r2;
        int $i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        z0 := @parameter0: boolean;

        z1 = specialinvoke r0.<java.util.concurrent.FutureTask: boolean cancel(boolean)>(z0);

        if z1 == 0 goto label1;

        $r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        $z2 = staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor: boolean access$100(java.util.concurrent.ScheduledThreadPoolExecutor)>($r1);

        if $z2 == 0 goto label1;

        $i0 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int heapIndex>;

        if $i0 < 0 goto label1;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        virtualinvoke $r2.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean remove(java.lang.Runnable)>(r0);

     label1:
        return z1;
    }

    public void run()
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        boolean z0, $z1, $z2;
        java.util.concurrent.ScheduledThreadPoolExecutor $r1, $r3;
        java.util.concurrent.RunnableScheduledFuture $r2;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        z0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean isPeriodic()>();

        $r1 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        $z1 = virtualinvoke $r1.<java.util.concurrent.ScheduledThreadPoolExecutor: boolean canRunInCurrentRunState(boolean)>(z0);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean cancel(boolean)>(0);

        goto label3;

     label1:
        if z0 != 0 goto label2;

        staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void access$201(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask)>(r0);

        goto label3;

     label2:
        $z2 = staticinvoke <java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: boolean access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask)>(r0);

        if $z2 == 0 goto label3;

        specialinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: void setNextRunTime()>();

        $r3 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.ScheduledThreadPoolExecutor this$0>;

        $r2 = r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: java.util.concurrent.RunnableScheduledFuture outerTask>;

        virtualinvoke $r3.<java.util.concurrent.ScheduledThreadPoolExecutor: void reExecutePeriodic(java.util.concurrent.RunnableScheduledFuture)>($r2);

     label3:
        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;
        int $i0;

        r0 := @this: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        $i0 = virtualinvoke r0.<java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask: int compareTo(java.util.concurrent.Delayed)>($r2);

        return $i0;
    }

    static void access$201(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;

        r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        specialinvoke r0.<java.util.concurrent.FutureTask: void run()>();

        return;
    }

    static boolean access$301(java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask)
    {
        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask r0;
        boolean $z0;

        r0 := @parameter0: java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask;

        $z0 = specialinvoke r0.<java.util.concurrent.FutureTask: boolean runAndReset()>();

        return $z0;
    }
}
