public class javax.net.ssl.SSLContext extends java.lang.Object
{
    private static final java.lang.String SERVICE;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static javax.net.ssl.SSLContext DEFAULT;
    private final java.security.Provider provider;
    private final javax.net.ssl.SSLContextSpi spiImpl;
    private final java.lang.String protocol;

    public static javax.net.ssl.SSLContext getDefault() throws java.security.NoSuchAlgorithmException
    {
        org.apache.harmony.security.fortress.Engine r0, $r2;
        java.lang.Throwable r1, $r6;
        javax.net.ssl.SSLContext $r3, $r4, $r5;

        $r2 = <javax.net.ssl.SSLContext: org.apache.harmony.security.fortress.Engine ENGINE>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        $r3 = <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext DEFAULT>;

        if $r3 != null goto label2;

        $r5 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("Default");

        <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext DEFAULT> = $r5;

     label2:
        $r4 = <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext DEFAULT>;

        exitmonitor r0;

     label3:
        return $r4;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

     label5:
        throw r1;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void setDefault(javax.net.ssl.SSLContext)
    {
        javax.net.ssl.SSLContext r0;
        org.apache.harmony.security.fortress.Engine r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: javax.net.ssl.SSLContext;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("sslContext == null");

        throw $r4;

     label1:
        $r3 = <javax.net.ssl.SSLContext: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext DEFAULT> = r0;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static javax.net.ssl.SSLContext getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r1;
        org.apache.harmony.security.fortress.Engine $r2;
        javax.net.ssl.SSLContext $r3;
        java.lang.Object $r4;
        java.security.Provider $r5;
        javax.net.ssl.SSLContextSpi $r6;
        java.lang.NullPointerException $r7;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("protocol == null");

        throw $r7;

     label1:
        $r2 = <javax.net.ssl.SSLContext: org.apache.harmony.security.fortress.Engine ENGINE>;

        r1 = virtualinvoke $r2.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r3 = new javax.net.ssl.SSLContext;

        $r4 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r6 = (javax.net.ssl.SSLContextSpi) $r4;

        $r5 = r1.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r3.<javax.net.ssl.SSLContext: void <init>(javax.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)>($r6, $r5, r0);

        return $r3;
    }

    public static javax.net.ssl.SSLContext getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        int $i0;
        javax.net.ssl.SSLContext $r3;
        java.security.NoSuchProviderException $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provider is null");

        throw $r6;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provider is empty");

        throw $r5;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r4 = new java.security.NoSuchProviderException;

        specialinvoke $r4.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r4;

     label3:
        $r3 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r3;
    }

    public static javax.net.ssl.SSLContext getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.lang.Object r2;
        org.apache.harmony.security.fortress.Engine $r3;
        javax.net.ssl.SSLContext $r4;
        javax.net.ssl.SSLContextSpi $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider is null");

        throw $r7;

     label1:
        if r0 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("protocol == null");

        throw $r6;

     label2:
        $r3 = <javax.net.ssl.SSLContext: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r4 = new javax.net.ssl.SSLContext;

        $r5 = (javax.net.ssl.SSLContextSpi) r2;

        specialinvoke $r4.<javax.net.ssl.SSLContext: void <init>(javax.net.ssl.SSLContextSpi,java.security.Provider,java.lang.String)>($r5, r1, r0);

        return $r4;
    }

    protected void <init>(javax.net.ssl.SSLContextSpi, java.security.Provider, java.lang.String)
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: javax.net.ssl.SSLContext;

        r1 := @parameter0: javax.net.ssl.SSLContextSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.net.ssl.SSLContext: java.security.Provider provider> = r2;

        r0.<javax.net.ssl.SSLContext: java.lang.String protocol> = r3;

        r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl> = r1;

        return;
    }

    public final java.lang.String getProtocol()
    {
        javax.net.ssl.SSLContext r0;
        java.lang.String $r1;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: java.lang.String protocol>;

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        javax.net.ssl.SSLContext r0;
        java.security.Provider $r1;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: java.security.Provider provider>;

        return $r1;
    }

    public final void init(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom) throws java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.KeyManager[] r1;
        javax.net.ssl.TrustManager[] r2;
        java.security.SecureRandom r3;
        javax.net.ssl.SSLContextSpi $r4;

        r0 := @this: javax.net.ssl.SSLContext;

        r1 := @parameter0: javax.net.ssl.KeyManager[];

        r2 := @parameter1: javax.net.ssl.TrustManager[];

        r3 := @parameter2: java.security.SecureRandom;

        $r4 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        virtualinvoke $r4.<javax.net.ssl.SSLContextSpi: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(r1, r2, r3);

        return;
    }

    public final javax.net.ssl.SSLSocketFactory getSocketFactory()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>();

        return $r2;
    }

    public final javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLServerSocketFactory $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory()>();

        return $r2;
    }

    public final javax.net.ssl.SSLEngine createSSLEngine()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLEngine $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine()>();

        return $r2;
    }

    public final javax.net.ssl.SSLEngine createSSLEngine(java.lang.String, int)
    {
        javax.net.ssl.SSLContext r0;
        java.lang.String r1;
        int i0;
        javax.net.ssl.SSLContextSpi $r2;
        javax.net.ssl.SSLEngine $r3;

        r0 := @this: javax.net.ssl.SSLContext;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r3 = virtualinvoke $r2.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String,int)>(r1, i0);

        return $r3;
    }

    public final javax.net.ssl.SSLSessionContext getServerSessionContext()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLSessionContext $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetServerSessionContext()>();

        return $r2;
    }

    public final javax.net.ssl.SSLSessionContext getClientSessionContext()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLSessionContext $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLSessionContext engineGetClientSessionContext()>();

        return $r2;
    }

    public final javax.net.ssl.SSLParameters getDefaultSSLParameters()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLParameters $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetDefaultSSLParameters()>();

        return $r2;
    }

    public final javax.net.ssl.SSLParameters getSupportedSSLParameters()
    {
        javax.net.ssl.SSLContext r0;
        javax.net.ssl.SSLContextSpi $r1;
        javax.net.ssl.SSLParameters $r2;

        r0 := @this: javax.net.ssl.SSLContext;

        $r1 = r0.<javax.net.ssl.SSLContext: javax.net.ssl.SSLContextSpi spiImpl>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLContextSpi: javax.net.ssl.SSLParameters engineGetSupportedSSLParameters()>();

        return $r2;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <javax.net.ssl.SSLContext: java.lang.String SERVICE> = "SSLContext";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("SSLContext");

        <javax.net.ssl.SSLContext: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }
}
