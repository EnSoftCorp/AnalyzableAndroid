public abstract class java.util.ResourceBundle extends java.lang.Object
{
    private static final java.lang.String UNDER_SCORE;
    private static final java.lang.String EMPTY_STRING;
    protected java.util.ResourceBundle parent;
    private java.util.Locale locale;
    private long lastLoadTime;
    private static final java.util.ResourceBundle MISSING;
    private static final java.util.ResourceBundle MISSINGBASE;
    private static final java.util.WeakHashMap cache;
    private static java.util.Locale cacheLocale;

    public void <init>()
    {
        java.util.ResourceBundle r0;

        r0 := @this: java.util.ResourceBundle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.ResourceBundle: long lastLoadTime> = 0L;

        return;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String) throws java.util.MissingResourceException
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        java.util.Locale $r2;
        java.util.ResourceBundle $r3;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        if r1 != null goto label1;

        r1 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader()>();

     label1:
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, $r2, r1);

        return $r3;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        if r2 != null goto label1;

        r2 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader()>();

     label1:
        $r3 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>(r0, r1, r2);

        return $r3;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader) throws java.util.MissingResourceException
    {
        java.lang.String r0, $r10;
        java.util.Locale r1, r3, $r5;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle r4;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.util.MissingResourceException $r11;
        java.util.WeakHashMap $r12;
        java.lang.NullPointerException $r13, $r14;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 := @parameter2: java.lang.ClassLoader;

        if r2 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("loader == null");

        throw $r13;

     label1:
        if r0 != null goto label2;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("bundleName == null");

        throw $r14;

     label2:
        r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = <java.util.ResourceBundle: java.util.Locale cacheLocale>;

        $z0 = virtualinvoke $r5.<java.util.Locale: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label3;

        $r12 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        virtualinvoke $r12.<java.util.WeakHashMap: void clear()>();

        <java.util.ResourceBundle: java.util.Locale cacheLocale> = r3;

     label3:
        r4 = null;

        $z1 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label4;

        r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle handleGetBundle(boolean,java.lang.String,java.util.Locale,java.lang.ClassLoader)>(0, r0, r1, r2);

     label4:
        if r4 != null goto label5;

        r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle handleGetBundle(boolean,java.lang.String,java.util.Locale,java.lang.ClassLoader)>(1, r0, r3, r2);

        if r4 != null goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <java.util.ResourceBundle: java.util.MissingResourceException missingResourceException(java.lang.String,java.lang.String)>($r10, "");

        throw $r11;

     label5:
        return r4;
    }

    private static java.util.MissingResourceException missingResourceException(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.MissingResourceException $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find resource for bundle \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', key \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.util.MissingResourceException;

        specialinvoke $r9.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r2, r0, r1);

        throw $r9;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.ResourceBundle$Control r1;
        java.util.Locale $r2;
        java.lang.ClassLoader $r3;
        java.util.ResourceBundle $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.ResourceBundle$Control;

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader()>();

        $r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, $r2, $r3, r1);

        return $r4;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.util.ResourceBundle$Control)
    {
        java.lang.String r0;
        java.util.Locale r1;
        java.util.ResourceBundle$Control r2;
        java.lang.ClassLoader $r3;
        java.util.ResourceBundle $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 := @parameter2: java.util.ResourceBundle$Control;

        $r3 = staticinvoke <java.util.ResourceBundle: java.lang.ClassLoader getLoader()>();

        $r4 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>(r0, r1, $r3, r2);

        return $r4;
    }

    private static java.lang.ClassLoader getLoader()
    {
        java.lang.ClassLoader r0;
        java.lang.Class $r1;

        $r1 = class "java/util/ResourceBundle";

        r0 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r0 != null goto label1;

        r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        return r0;
    }

    public static java.util.ResourceBundle getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control)
    {
        java.lang.String r0, r4, $r15, $r22;
        java.util.Locale r1;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle$Control r3;
        boolean z0;
        java.lang.Object r5, $r8, $r25;
        java.util.Hashtable r6;
        java.util.ResourceBundle r7, $r9, $r19, r26;
        long l0, $l1, $l3, $l4, $l6;
        java.util.MissingResourceException $r10, $r18;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r20, $r21, $r23, $r24;
        byte $b2, $b5, $b7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 := @parameter2: java.lang.ClassLoader;

        r3 := @parameter3: java.util.ResourceBundle$Control;

        z0 = 0;

        r4 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>(r0, r1);

        if r2 == null goto label1;

        $r25 = r2;

        goto label2;

     label1:
        $r25 = "null";

     label2:
        r5 = $r25;

        r6 = staticinvoke <java.util.ResourceBundle: java.util.Hashtable getLoaderCache(java.lang.Object)>(r5);

        $r8 = virtualinvoke r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r7 = (java.util.ResourceBundle) $r8;

        if r7 == null goto label6;

        l0 = virtualinvoke r3.<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)>(r0, r1);

        $b2 = l0 cmp 0L;

        if $b2 == 0 goto label3;

        $b5 = l0 cmp -2L;

        if $b5 == 0 goto label3;

        $l6 = r7.<java.util.ResourceBundle: long lastLoadTime>;

        $l3 = l0 + $l6;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b7 = $l3 cmp $l4;

        if $b7 >= 0 goto label5;

     label3:
        $r19 = <java.util.ResourceBundle: java.util.ResourceBundle MISSING>;

        if $r19 != r7 goto label4;

        $r18 = new java.util.MissingResourceException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r21 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(null, $r22, "");

        throw $r18;

     label4:
        return r7;

     label5:
        z0 = 1;

     label6:
        r26 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle processGetBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control,boolean,java.util.ResourceBundle)>(r0, r1, r2, r3, z0, r7);

        if r26 == null goto label7;

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r26);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r26.<java.util.ResourceBundle: long lastLoadTime> = $l1;

        return r26;

     label7:
        $r9 = <java.util.ResourceBundle: java.util.ResourceBundle MISSING>;

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r9);

        $r10 = new java.util.MissingResourceException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>(null, $r15, "");

        throw $r10;
    }

    private static java.util.ResourceBundle processGetBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle$Control, boolean, java.util.ResourceBundle)
    {
        java.lang.String r0, r13;
        java.util.Locale r1, r11, $r19, $r20, $r21, r32;
        java.lang.ClassLoader r2;
        java.util.ResourceBundle$Control r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.ResourceBundle r4, r7, r8, r9;
        java.util.List r5, r6, $r16, $r17, $r18;
        java.util.Iterator r10, r12;
        java.lang.IllegalArgumentException $r15, $r26, $r27;
        int $i0;
        java.lang.Object $r22, $r23;
        long $l1;
        java.lang.InstantiationException $r24;
        java.io.IOException $r25;
        java.lang.IllegalAccessException $r28;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 := @parameter2: java.lang.ClassLoader;

        r3 := @parameter3: java.util.ResourceBundle$Control;

        z0 := @parameter4: boolean;

        r4 := @parameter5: java.util.ResourceBundle;

        r5 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>(r0, r1);

        if r5 != null goto label01;

        $r26 = new java.lang.IllegalArgumentException;

        specialinvoke $r26.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r26;

     label01:
        r6 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)>(r0);

        $r16 = <java.util.ResourceBundle$Control: java.util.List FORMAT_CLASS>;

        if $r16 == r6 goto label02;

        $r18 = <java.util.ResourceBundle$Control: java.util.List FORMAT_PROPERTIES>;

        if $r18 == r6 goto label02;

        $r17 = <java.util.ResourceBundle$Control: java.util.List FORMAT_DEFAULT>;

        if $r17 != r6 goto label03;

     label02:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r15;

     label03:
        r7 = null;

        r8 = null;

        r9 = null;

        r10 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label19;

        $r23 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Locale) $r23;

        r12 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label18;

        $r22 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r22;

     label06:
        if z0 == 0 goto label07;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z5 = virtualinvoke r3.<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>(r0, r11, r13, r2, r4, $l1);

        r9 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>(r0, r11, r13, r2, $z5);

        goto label10;

     label07:
        r9 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>(r0, r11, r13, r2, 0);

     label08:
        goto label10;

     label09:
        $r27 := @caughtexception;

     label10:
        goto label14;

     label11:
        $r28 := @caughtexception;

        goto label14;

     label12:
        $r24 := @caughtexception;

        goto label14;

     label13:
        $r25 := @caughtexception;

     label14:
        if r9 == null goto label16;

        if r8 == null goto label15;

        virtualinvoke r8.<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>(r9);

        r8 = r9;

        goto label16;

     label15:
        if r7 != null goto label16;

        r7 = r9;

        r8 = r7;

     label16:
        if r9 == null goto label17;

        goto label18;

     label17:
        goto label05;

     label18:
        goto label04;

     label19:
        if r7 == null goto label20;

        $r20 = <java.util.Locale: java.util.Locale ROOT>;

        $r19 = virtualinvoke r7.<java.util.ResourceBundle: java.util.Locale getLocale()>();

        $z2 = virtualinvoke $r20.<java.util.Locale: boolean equals(java.lang.Object)>($r19);

        if $z2 == 0 goto label21;

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i0 != 1 goto label20;

        $r21 = <java.util.Locale: java.util.Locale ROOT>;

        $z3 = interfaceinvoke r5.<java.util.List: boolean contains(java.lang.Object)>($r21);

        if $z3 != 0 goto label21;

     label20:
        r32 = virtualinvoke r3.<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>(r0, r1);

        if r32 == null goto label21;

        r7 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle processGetBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control,boolean,java.util.ResourceBundle)>(r0, r32, r2, r3, z0, r4);

     label21:
        return r7;

        catch java.lang.IllegalArgumentException from label07 to label08 with label09;
        catch java.lang.IllegalAccessException from label06 to label10 with label11;
        catch java.lang.InstantiationException from label06 to label10 with label12;
        catch java.io.IOException from label06 to label10 with label13;
    }

    public abstract java.util.Enumeration getKeys();

    public java.util.Locale getLocale()
    {
        java.util.ResourceBundle r0;
        java.util.Locale $r1;

        r0 := @this: java.util.ResourceBundle;

        $r1 = r0.<java.util.ResourceBundle: java.util.Locale locale>;

        return $r1;
    }

    public final java.lang.Object getObject(java.lang.String)
    {
        java.util.ResourceBundle r0, r2, r3;
        java.lang.String r1, $r6;
        java.lang.Object r4;
        java.lang.Class $r5;
        java.util.MissingResourceException $r7;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.lang.String;

        r3 = r0;

     label1:
        r4 = virtualinvoke r3.<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>(r1);

        if r4 == null goto label2;

        return r4;

     label2:
        r2 = r3;

        r3 = r3.<java.util.ResourceBundle: java.util.ResourceBundle parent>;

        if r3 != null goto label1;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = staticinvoke <java.util.ResourceBundle: java.util.MissingResourceException missingResourceException(java.lang.String,java.lang.String)>($r6, r1);

        throw $r7;
    }

    public final java.lang.String getString(java.lang.String)
    {
        java.util.ResourceBundle r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public final java.lang.String[] getStringArray(java.lang.String)
    {
        java.util.ResourceBundle r0;
        java.lang.String r1;
        java.lang.Object $r2;
        java.lang.String[] $r3, $r4;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>(r1);

        $r3 = (java.lang.String[]) $r2;

        $r4 = (java.lang.String[]) $r3;

        return $r4;
    }

    private static java.util.ResourceBundle handleGetBundle(boolean, java.lang.String, java.util.Locale, java.lang.ClassLoader)
    {
        boolean z0, $z1, $z2, $z3;
        java.lang.String r0, r3, r4, $r17, $r20, $r29, r45;
        java.util.Locale r1, r8, r46;
        java.lang.ClassLoader r2;
        java.lang.Object r5, $r18, $r35, $r37;
        java.util.Hashtable r6;
        java.util.ResourceBundle r7, $r26, $r33, $r34, $r38, r42, r47, r48;
        java.lang.Class r9, $r19;
        java.io.InputStream r10, $r24;
        java.lang.Throwable r12, $r40;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r21, $r22, $r23;
        java.io.InputStreamReader $r30;
        java.nio.charset.Charset $r31;
        java.util.PropertyResourceBundle $r32;
        java.lang.LinkageError $r36;
        java.lang.Exception $r39;
        java.io.IOException $r41;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.util.Locale;

        r2 := @parameter3: java.lang.ClassLoader;

        r3 = virtualinvoke r1.<java.util.Locale: java.lang.String toString()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label01;

        $r17 = r0;

        goto label02;

     label01:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        r4 = $r17;

        if r2 == null goto label03;

        $r37 = r2;

        goto label04;

     label03:
        $r37 = "null";

     label04:
        r5 = $r37;

        r6 = staticinvoke <java.util.ResourceBundle: java.util.Hashtable getLoaderCache(java.lang.Object)>(r5);

        $r18 = virtualinvoke r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r7 = (java.util.ResourceBundle) $r18;

        if r7 == null goto label09;

        $r33 = <java.util.ResourceBundle: java.util.ResourceBundle MISSINGBASE>;

        if r7 != $r33 goto label05;

        return null;

     label05:
        $r34 = <java.util.ResourceBundle: java.util.ResourceBundle MISSING>;

        if r7 != $r34 goto label08;

        if z0 != 0 goto label06;

        return null;

     label06:
        r8 = staticinvoke <java.util.ResourceBundle: java.util.Locale strip(java.util.Locale)>(r1);

        if r8 != null goto label07;

        return null;

     label07:
        $r38 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle handleGetBundle(boolean,java.lang.String,java.util.Locale,java.lang.ClassLoader)>(z0, r0, r8, r2);

        return $r38;

     label08:
        return r7;

     label09:
        r42 = null;

     label10:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r4, 1, r2);

        $r19 = class "java/util/ResourceBundle";

        $z2 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r9);

        if $z2 == 0 goto label11;

        $r35 = virtualinvoke r9.<java.lang.Class: java.lang.Object newInstance()>();

        r42 = (java.util.ResourceBundle) $r35;

     label11:
        goto label14;

     label12:
        $r36 := @caughtexception;

        goto label14;

     label13:
        $r39 := @caughtexception;

     label14:
        if r42 == null goto label15;

        specialinvoke r42.<java.util.ResourceBundle: void setLocale(java.util.Locale)>(r1);

        goto label24;

     label15:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke r4.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".properties");

        r45 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        if r2 == null goto label16;

        $r24 = virtualinvoke r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r45);

        goto label17;

     label16:
        $r24 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>(r45);

     label17:
        r10 = $r24;

        if r10 == null goto label24;

     label18:
        $r32 = new java.util.PropertyResourceBundle;

        $r30 = new java.io.InputStreamReader;

        $r31 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r30.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r10, $r31);

        specialinvoke $r32.<java.util.PropertyResourceBundle: void <init>(java.io.Reader)>($r30);

        r42 = $r32;

        specialinvoke r42.<java.util.ResourceBundle: void setLocale(java.util.Locale)>(r1);

     label19:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r10);

        goto label24;

     label20:
        $r41 := @caughtexception;

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r10);

        goto label24;

     label22:
        $r40 := @caughtexception;

        r12 = $r40;

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r10);

        throw r12;

     label24:
        r46 = staticinvoke <java.util.ResourceBundle: java.util.Locale strip(java.util.Locale)>(r1);

        if r42 == null goto label26;

        if r46 == null goto label25;

        r47 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle handleGetBundle(boolean,java.lang.String,java.util.Locale,java.lang.ClassLoader)>(z0, r0, r46, r2);

        if r47 == null goto label25;

        virtualinvoke r42.<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>(r47);

     label25:
        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r42);

        return r42;

     label26:
        if r46 == null goto label28;

        if z0 != 0 goto label27;

        $r29 = virtualinvoke r46.<java.util.Locale: java.lang.String toString()>();

        $z3 = virtualinvoke $r29.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label28;

     label27:
        r48 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle handleGetBundle(boolean,java.lang.String,java.util.Locale,java.lang.ClassLoader)>(z0, r0, r46, r2);

        if r48 == null goto label28;

        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r48);

        return r48;

     label28:
        if z0 == 0 goto label29;

        $r26 = <java.util.ResourceBundle: java.util.ResourceBundle MISSINGBASE>;

        goto label30;

     label29:
        $r26 = <java.util.ResourceBundle: java.util.ResourceBundle MISSING>;

     label30:
        virtualinvoke r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r26);

        return null;

        catch java.lang.LinkageError from label10 to label11 with label12;
        catch java.lang.Exception from label10 to label11 with label13;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    private static java.util.Hashtable getLoaderCache(java.lang.Object)
    {
        java.lang.Object r0, $r6;
        java.util.WeakHashMap r1, $r4, $r5, $r8;
        java.util.Hashtable r2, $r7;
        java.lang.Throwable r3, $r10;

        r0 := @parameter0: java.lang.Object;

        $r4 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        $r6 = virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.util.Hashtable) $r6;

        if r2 != null goto label2;

        $r7 = new java.util.Hashtable;

        specialinvoke $r7.<java.util.Hashtable: void <init>()>();

        r2 = $r7;

        $r8 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected abstract java.lang.Object handleGetObject(java.lang.String);

    protected void setParent(java.util.ResourceBundle)
    {
        java.util.ResourceBundle r0, r1;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.util.ResourceBundle;

        r0.<java.util.ResourceBundle: java.util.ResourceBundle parent> = r1;

        return;
    }

    private static java.util.Locale strip(java.util.Locale)
    {
        java.util.Locale r0, $r4;
        java.lang.String r1, r2, r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Locale;

        r1 = virtualinvoke r0.<java.util.Locale: java.lang.String getLanguage()>();

        r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getCountry()>();

        r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getVariant()>();

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        r3 = "";

        goto label4;

     label1:
        $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        r2 = "";

        goto label4;

     label2:
        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        r1 = "";

        goto label4;

     label3:
        return null;

     label4:
        $r4 = new java.util.Locale;

        specialinvoke $r4.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $r4;
    }

    private void setLocale(java.util.Locale)
    {
        java.util.ResourceBundle r0;
        java.util.Locale r1;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.util.Locale;

        r0.<java.util.ResourceBundle: java.util.Locale locale> = r1;

        return;
    }

    public static void clearCache()
    {
        java.util.WeakHashMap $r0;
        java.lang.ClassLoader $r1;

        $r0 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        virtualinvoke $r0.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    public static void clearCache(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.WeakHashMap $r1;
        java.lang.NullPointerException $r3;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("loader == null");

        throw $r3;

     label1:
        $r1 = <java.util.ResourceBundle: java.util.WeakHashMap cache>;

        virtualinvoke $r1.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r0);

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.ResourceBundle r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.ResourceBundle;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r3;

     label1:
        $r2 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.ResourceBundle r0;
        java.util.HashSet r1, $r3;
        java.util.Enumeration r2;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: java.util.ResourceBundle;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r1 = $r3;

        r2 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Enumeration getKeys()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return r1;
    }

    protected java.util.Set handleKeySet()
    {
        java.util.ResourceBundle r0;
        java.util.Set r1;
        java.util.HashSet r2, $r5;
        java.util.Iterator r3;
        java.lang.String r4;
        boolean $z0;
        java.lang.Object $r6, $r7;

        r0 := @this: java.util.ResourceBundle;

        r1 = virtualinvoke r0.<java.util.ResourceBundle: java.util.Set keySet()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r2 = $r5;

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r6;

        $r7 = virtualinvoke r0.<java.util.ResourceBundle: java.lang.Object handleGetObject(java.lang.String)>(r4);

        if $r7 == null goto label2;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label2:
        goto label1;

     label3:
        return r2;
    }

    static void access$000(java.util.ResourceBundle, java.util.Locale)
    {
        java.util.ResourceBundle r0;
        java.util.Locale r1;

        r0 := @parameter0: java.util.ResourceBundle;

        r1 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.util.ResourceBundle: void setLocale(java.util.Locale)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle$MissingBundle $r0, $r1;
        java.util.WeakHashMap $r2;
        java.util.Locale $r3;

        <java.util.ResourceBundle: java.lang.String EMPTY_STRING> = "";

        <java.util.ResourceBundle: java.lang.String UNDER_SCORE> = "_";

        $r0 = new java.util.ResourceBundle$MissingBundle;

        specialinvoke $r0.<java.util.ResourceBundle$MissingBundle: void <init>()>();

        <java.util.ResourceBundle: java.util.ResourceBundle MISSING> = $r0;

        $r1 = new java.util.ResourceBundle$MissingBundle;

        specialinvoke $r1.<java.util.ResourceBundle$MissingBundle: void <init>()>();

        <java.util.ResourceBundle: java.util.ResourceBundle MISSINGBASE> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        <java.util.ResourceBundle: java.util.WeakHashMap cache> = $r2;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <java.util.ResourceBundle: java.util.Locale cacheLocale> = $r3;

        return;
    }
}
