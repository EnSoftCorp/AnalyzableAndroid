public final class libcore.reflect.ParameterizedTypeImpl extends java.lang.Object implements java.lang.reflect.ParameterizedType
{
    private final libcore.reflect.ListOfTypes args;
    private final libcore.reflect.ParameterizedTypeImpl ownerType0;
    private java.lang.reflect.Type ownerTypeRes;
    private java.lang.Class rawType;
    private final java.lang.String rawTypeName;
    private final java.lang.ClassLoader loader;

    public void <init>(libcore.reflect.ParameterizedTypeImpl, java.lang.String, libcore.reflect.ListOfTypes, java.lang.ClassLoader)
    {
        libcore.reflect.ParameterizedTypeImpl r0, r1;
        java.lang.String r2;
        libcore.reflect.ListOfTypes r3;
        java.lang.ClassLoader r4;
        java.lang.NullPointerException $r5;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        r1 := @parameter0: libcore.reflect.ParameterizedTypeImpl;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: libcore.reflect.ListOfTypes;

        r4 := @parameter3: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r3 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0> = r1;

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName> = r2;

        r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args> = r3;

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.ClassLoader loader> = r4;

        return;
    }

    public java.lang.reflect.Type[] getActualTypeArguments()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.reflect.Type[]) $r3;

        return $r4;
    }

    public java.lang.reflect.Type getOwnerType()
    {
        libcore.reflect.ParameterizedTypeImpl r0, $r3, $r6;
        java.lang.reflect.Type $r1, $r2, $r7;
        java.lang.Class $r4, $r5;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes>;

        if $r1 != null goto label2;

        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0>;

        if $r3 == null goto label1;

        $r6 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ParameterizedTypeImpl ownerType0>;

        $r7 = virtualinvoke $r6.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getResolvedType()>();

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes> = $r7;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes> = $r5;

     label2:
        $r2 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type ownerTypeRes>;

        return $r2;
    }

    public java.lang.Class getRawType()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.ClassNotFoundException r1, $r7;
        java.lang.Class $r2, $r3, $r6;
        java.lang.ClassLoader $r4;
        java.lang.String $r5, $r9;
        java.lang.TypeNotPresentException $r8;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r2 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        if $r2 != null goto label4;

     label1:
        $r5 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        $r4 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.ClassLoader loader>;

        $r6 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r5, 0, $r4);

        r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType> = $r6;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.TypeNotPresentException;

        $r9 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        specialinvoke $r8.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, r1);

        throw $r8;

     label4:
        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class rawType>;

        return $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    java.lang.reflect.Type getResolvedType()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;
        int $i0;
        java.lang.Class $r3;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        return $r3;

     label1:
        return r0;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.Object r1;
        java.lang.reflect.ParameterizedType r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class $r3;
        java.lang.reflect.Type $r4, $r5, $r6;
        libcore.reflect.ListOfTypes $r7;
        java.lang.reflect.Type[] $r8, $r9;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.lang.reflect.ParameterizedType) r1;

        $r3 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        $r4 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getRawType()>();

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()>();

        $r6 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type getOwnerType()>();

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 == 0 goto label2;

        $r7 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r8 = virtualinvoke $r7.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $r9 = interfaceinvoke r2.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r9);

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public int hashCode()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.Class $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.reflect.Type $r2;
        libcore.reflect.ListOfTypes $r3;
        java.lang.reflect.Type[] $r4;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        $i0 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r1);

        $i1 = 31 * $i0;

        $r2 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()>();

        $i2 = staticinvoke <java.util.Objects: int hashCode(java.lang.Object)>($r2);

        $i3 = $i1 + $i2;

        $i4 = 31 * $i3;

        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r4 = virtualinvoke $r3.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $i5 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r4);

        $i6 = $i4 + $i5;

        return $i6;
    }

    public java.lang.String toString()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.StringBuilder r1, $r2, $r7, $r9;
        java.lang.String $r3, $r6;
        libcore.reflect.ListOfTypes $r5, $r8;
        int $i0;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        $r3 = r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.String rawTypeName>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $i0 = virtualinvoke $r5.<libcore.reflect.ListOfTypes: int length()>();

        if $i0 <= 0 goto label1;

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r8 = r0.<libcore.reflect.ParameterizedTypeImpl: libcore.reflect.ListOfTypes args>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label1:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public volatile java.lang.reflect.Type getRawType()
    {
        libcore.reflect.ParameterizedTypeImpl r0;
        java.lang.Class $r1;

        r0 := @this: libcore.reflect.ParameterizedTypeImpl;

        $r1 = virtualinvoke r0.<libcore.reflect.ParameterizedTypeImpl: java.lang.Class getRawType()>();

        return $r1;
    }
}
