final class java.util.concurrent.ConcurrentSkipListMap$Values extends java.util.AbstractCollection
{
    private final java.util.concurrent.ConcurrentNavigableMap m;

    void <init>(java.util.concurrent.ConcurrentNavigableMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.concurrent.ConcurrentNavigableMap r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        r1 := @parameter0: java.util.concurrent.ConcurrentNavigableMap;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m> = r1;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.concurrent.ConcurrentNavigableMap $r1, $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r3;
        java.util.Iterator $r4, $r7;
        java.util.concurrent.ConcurrentSkipListMap $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = $r1 instanceof java.util.concurrent.ConcurrentSkipListMap;

        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $r6 = (java.util.concurrent.ConcurrentSkipListMap) $r5;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentSkipListMap: java.util.Iterator valueIterator()>();

        return $r7;

     label1:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = (java.util.concurrent.ConcurrentSkipListMap$SubMap) $r2;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator valueIterator()>();

        return $r4;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: boolean isEmpty()>();

        return $z0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: int size()>();

        return $i0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Values: java.util.concurrent.ConcurrentNavigableMap m>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: void clear()>();

        return;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ConcurrentSkipListMap$Values r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Values;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }
}
