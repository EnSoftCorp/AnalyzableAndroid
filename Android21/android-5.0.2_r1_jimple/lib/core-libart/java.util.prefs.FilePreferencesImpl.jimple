public class java.util.prefs.FilePreferencesImpl extends java.util.prefs.AbstractPreferences
{
    private static final java.lang.String PREFS_FILE_NAME;
    private final java.lang.String path;
    private java.util.Properties prefs;
    private java.io.File prefsFile;
    private java.io.File dir;
    private java.util.Set removed;
    private java.util.Set updated;

    public void <init>(java.lang.String, boolean)
    {
        java.util.HashSet $r0, $r3;
        java.util.prefs.FilePreferencesImpl r1;
        java.lang.String r2;
        boolean z0;

        r1 := @this: java.util.prefs.FilePreferencesImpl;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r1.<java.util.prefs.AbstractPreferences: void <init>(java.util.prefs.AbstractPreferences,java.lang.String)>(null, "");

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r1.<java.util.prefs.FilePreferencesImpl: java.util.Set removed> = $r3;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        r1.<java.util.prefs.FilePreferencesImpl: java.util.Set updated> = $r0;

        r1.<java.util.prefs.FilePreferencesImpl: java.lang.String path> = r2;

        r1.<java.util.prefs.FilePreferencesImpl: boolean userNode> = z0;

        specialinvoke r1.<java.util.prefs.FilePreferencesImpl: void initPrefs()>();

        return;
    }

    private void <init>(java.util.prefs.AbstractPreferences, java.lang.String)
    {
        java.util.prefs.FilePreferencesImpl r0, $r6;
        java.util.prefs.AbstractPreferences r1;
        java.lang.String r2, $r7, $r9, $r12;
        java.util.HashSet $r3, $r4;
        java.lang.StringBuilder $r5, $r8, $r10, $r11;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        r1 := @parameter0: java.util.prefs.AbstractPreferences;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.util.prefs.AbstractPreferences: void <init>(java.util.prefs.AbstractPreferences,java.lang.String)>(r1, r2);

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<java.util.prefs.FilePreferencesImpl: java.util.Set removed> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<java.util.prefs.FilePreferencesImpl: java.util.Set updated> = $r4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = (java.util.prefs.FilePreferencesImpl) r1;

        $r7 = $r6.<java.util.prefs.FilePreferencesImpl: java.lang.String path>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = <java.io.File: java.lang.String separator>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.util.prefs.FilePreferencesImpl: java.lang.String path> = $r12;

        specialinvoke r0.<java.util.prefs.FilePreferencesImpl: void initPrefs()>();

        return;
    }

    private void initPrefs()
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.io.File $r1, $r3, $r4, $r12;
        java.lang.String $r2, $r6, $r8, $r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r7, $r9, $r10;
        java.util.Properties $r13;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        $r1 = new java.io.File;

        $r2 = r0.<java.util.prefs.FilePreferencesImpl: java.lang.String path>;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        r0.<java.util.prefs.FilePreferencesImpl: java.io.File dir> = $r1;

        $r3 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File dir>;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        r0.<java.util.prefs.FilePreferencesImpl: boolean newNode> = $z1;

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<java.util.prefs.FilePreferencesImpl: java.lang.String path>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = <java.io.File: java.lang.String separator>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefs.xml");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r11);

        r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile> = $r4;

        $r12 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile>;

        $r13 = staticinvoke <java.util.prefs.XMLParser: java.util.Properties readXmlPreferences(java.io.File)>($r12);

        r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs> = $r13;

        return;
    }

    protected java.lang.String[] childrenNamesSpi() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.lang.String[] r1;
        java.util.prefs.FilePreferencesImpl$1 $r2;
        java.io.File $r3;
        java.util.prefs.BackingStoreException $r4;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.String $r7, $r10, $r13;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        $r3 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File dir>;

        $r2 = new java.util.prefs.FilePreferencesImpl$1;

        specialinvoke $r2.<java.util.prefs.FilePreferencesImpl$1: void <init>(java.util.prefs.FilePreferencesImpl)>(r0);

        r1 = virtualinvoke $r3.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>($r2);

        if r1 != null goto label1;

        $r4 = new java.util.prefs.BackingStoreException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get child names for ");

        $r7 = virtualinvoke r0.<java.util.prefs.FilePreferencesImpl: java.lang.String toString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (path is ");

        $r10 = r0.<java.util.prefs.FilePreferencesImpl: java.lang.String path>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.util.prefs.BackingStoreException: void <init>(java.lang.String)>($r13);

        throw $r4;

     label1:
        return r1;
    }

    protected java.util.prefs.AbstractPreferences childSpi(java.lang.String)
    {
        java.util.prefs.FilePreferencesImpl r0, r2, $r3;
        java.lang.String r1;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.util.prefs.FilePreferencesImpl;

        specialinvoke $r3.<java.util.prefs.FilePreferencesImpl: void <init>(java.util.prefs.AbstractPreferences,java.lang.String)>(r0, r1);

        r2 = $r3;

        return r2;
    }

    protected void flushSpi() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.util.Properties r1, $r9, $r12;
        java.util.Iterator r2, r18;
        java.lang.Object r3, $r11, $r13;
        boolean $z0, $z1, $z2;
        java.io.File $r4, $r10;
        java.util.Set $r5, $r6, $r7, $r8;
        java.lang.Exception $r15, r19;
        java.util.prefs.BackingStoreException $r17;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

     label01:
        $z0 = virtualinvoke r0.<java.util.prefs.FilePreferencesImpl: boolean isRemoved()>();

        if $z0 == 0 goto label03;

     label02:
        return;

     label03:
        $r4 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile>;

        r1 = staticinvoke <java.util.prefs.XMLParser: java.util.Properties readXmlPreferences(java.io.File)>($r4);

        $r5 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set removed>;

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.util.Properties: java.lang.Object remove(java.lang.Object)>($r13);

        goto label04;

     label05:
        $r6 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set removed>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        $r7 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set updated>;

        r18 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        r3 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        $r12 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        $r11 = virtualinvoke $r12.<java.util.Properties: java.lang.Object get(java.lang.Object)>(r3);

        virtualinvoke r1.<java.util.Properties: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

        goto label06;

     label07:
        $r8 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set updated>;

        interfaceinvoke $r8.<java.util.Set: void clear()>();

        r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs> = r1;

        $r10 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile>;

        $r9 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        staticinvoke <java.util.prefs.XMLParser: void writeXmlPreferences(java.io.File,java.util.Properties)>($r10, $r9);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        r19 = $r15;

        $r17 = new java.util.prefs.BackingStoreException;

        specialinvoke $r17.<java.util.prefs.BackingStoreException: void <init>(java.lang.Throwable)>(r19);

        throw $r17;

     label10:
        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label08 with label09;
    }

    protected java.lang.String getSpi(java.lang.String)
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.lang.String r1, $r5;
        java.util.Properties $r3, $r4, $r7;
        java.io.File $r6;
        java.lang.Exception $r8;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        if $r3 != null goto label2;

        $r6 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile>;

        $r7 = staticinvoke <java.util.prefs.XMLParser: java.util.Properties readXmlPreferences(java.io.File)>($r6);

        r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs> = $r7;

     label2:
        $r4 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        $r5 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

     label3:
        return $r5;

     label4:
        $r8 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    protected java.lang.String[] keysSpi() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.util.Set r1;
        java.util.Properties $r2;
        int $i0;
        java.lang.String[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        $r2 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        r1 = virtualinvoke $r2.<java.util.Properties: java.util.Set keySet()>();

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.String)[$i0];

        $r4 = interfaceinvoke r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    protected void putSpi(java.lang.String, java.lang.String)
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.lang.String r1, r2;
        java.util.Properties $r3;
        java.util.Set $r5;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        virtualinvoke $r3.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r1, r2);

        $r5 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set updated>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void removeNodeSpi() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.FilePreferencesImpl r0;
        boolean z0;
        java.io.File $r1, $r2;
        java.util.prefs.BackingStoreException $r3;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        $r1 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File prefsFile>;

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        $r2 = r0.<java.util.prefs.FilePreferencesImpl: java.io.File dir>;

        z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        if z0 != 0 goto label1;

        $r3 = new java.util.prefs.BackingStoreException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove ");

        $r6 = virtualinvoke r0.<java.util.prefs.FilePreferencesImpl: java.lang.String toString()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.util.prefs.BackingStoreException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        return;
    }

    protected void removeSpi(java.lang.String)
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.lang.String r1;
        java.util.Properties $r2;
        java.util.Set $r4, $r5;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Properties prefs>;

        virtualinvoke $r2.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r1);

        $r4 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set updated>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $r5 = r0.<java.util.prefs.FilePreferencesImpl: java.util.Set removed>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    protected void syncSpi() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.FilePreferencesImpl r0;

        r0 := @this: java.util.prefs.FilePreferencesImpl;

        virtualinvoke r0.<java.util.prefs.FilePreferencesImpl: void flushSpi()>();

        return;
    }

    static java.lang.String access$000(java.util.prefs.FilePreferencesImpl)
    {
        java.util.prefs.FilePreferencesImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: java.util.prefs.FilePreferencesImpl;

        $r1 = r0.<java.util.prefs.FilePreferencesImpl: java.lang.String path>;

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.prefs.FilePreferencesImpl: java.lang.String PREFS_FILE_NAME> = "prefs.xml";

        return;
    }
}
