public class java.nio.charset.CoderResult extends java.lang.Object
{
    private static final int TYPE_UNDERFLOW;
    private static final int TYPE_OVERFLOW;
    private static final int TYPE_MALFORMED_INPUT;
    private static final int TYPE_UNMAPPABLE_CHAR;
    public static final java.nio.charset.CoderResult UNDERFLOW;
    public static final java.nio.charset.CoderResult OVERFLOW;
    private static java.util.WeakHashMap _malformedErrors;
    private static java.util.WeakHashMap _unmappableErrors;
    private final int type;
    private final int length;

    private void <init>(int, int)
    {
        java.nio.charset.CoderResult r0;
        int i0, i1;

        r0 := @this: java.nio.charset.CoderResult;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.charset.CoderResult: int type> = i0;

        r0.<java.nio.charset.CoderResult: int length> = i1;

        return;
    }

    public static synchronized java.nio.charset.CoderResult malformedForLength(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.Integer r0;
        java.util.WeakHashMap r1, $r9, $r10, $r14;
        java.nio.charset.CoderResult r2, $r12;
        java.lang.Throwable r3, $r15;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.Object $r11;

        i0 := @parameter0: int;

        if i0 <= 0 goto label6;

        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = <java.nio.charset.CoderResult: java.util.WeakHashMap _malformedErrors>;

        r1 = $r9;

        entermonitor $r9;

     label1:
        $r10 = <java.nio.charset.CoderResult: java.util.WeakHashMap _malformedErrors>;

        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.nio.charset.CoderResult) $r11;

        if r2 != null goto label2;

        $r12 = new java.nio.charset.CoderResult;

        specialinvoke $r12.<java.nio.charset.CoderResult: void <init>(int,int)>(3, i0);

        r2 = $r12;

        $r14 = <java.nio.charset.CoderResult: java.util.WeakHashMap _malformedErrors>;

        virtualinvoke $r14.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static synchronized java.nio.charset.CoderResult unmappableForLength(int) throws java.lang.IllegalArgumentException
    {
        int i0;
        java.lang.Integer r0;
        java.util.WeakHashMap r1, $r9, $r10, $r14;
        java.nio.charset.CoderResult r2, $r12;
        java.lang.Throwable r3, $r15;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.Object $r11;

        i0 := @parameter0: int;

        if i0 <= 0 goto label6;

        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = <java.nio.charset.CoderResult: java.util.WeakHashMap _unmappableErrors>;

        r1 = $r9;

        entermonitor $r9;

     label1:
        $r10 = <java.nio.charset.CoderResult: java.util.WeakHashMap _unmappableErrors>;

        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.nio.charset.CoderResult) $r11;

        if r2 != null goto label2;

        $r12 = new java.nio.charset.CoderResult;

        specialinvoke $r12.<java.nio.charset.CoderResult: void <init>(int,int)>(4, i0);

        r2 = $r12;

        $r14 = <java.nio.charset.CoderResult: java.util.WeakHashMap _unmappableErrors>;

        virtualinvoke $r14.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r15 := @caughtexception;

        r3 = $r15;

        exitmonitor r1;

     label5:
        throw r3;

     label6:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean isUnderflow()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isError()
    {
        java.nio.charset.CoderResult r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 == 3 goto label1;

        $i1 = r0.<java.nio.charset.CoderResult: int type>;

        if $i1 != 4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isMalformed()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 != 3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isOverflow()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isUnmappable()
    {
        java.nio.charset.CoderResult r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 != 4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int length() throws java.lang.UnsupportedOperationException
    {
        java.nio.charset.CoderResult r0;
        int $i0, $i1, $i2;
        java.lang.UnsupportedOperationException $r1;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String $r4, $r6;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        if $i0 == 3 goto label1;

        $i2 = r0.<java.nio.charset.CoderResult: int type>;

        if $i2 != 4 goto label2;

     label1:
        $i1 = r0.<java.nio.charset.CoderResult: int length>;

        return $i1;

     label2:
        $r1 = new java.lang.UnsupportedOperationException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length meaningless for ");

        $r4 = virtualinvoke r0.<java.nio.charset.CoderResult: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public void throwException() throws java.nio.BufferUnderflowException, java.nio.BufferOverflowException, java.nio.charset.UnmappableCharacterException, java.nio.charset.MalformedInputException, java.nio.charset.CharacterCodingException
    {
        java.nio.charset.CoderResult r0;
        int $i0, $i1, $i2;
        java.nio.BufferUnderflowException $r1;
        java.nio.charset.UnmappableCharacterException $r2;
        java.nio.charset.MalformedInputException $r3;
        java.nio.BufferOverflowException $r4;
        java.nio.charset.CharacterCodingException $r5;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label5;
        };

     label1:
        $r1 = new java.nio.BufferUnderflowException;

        specialinvoke $r1.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r1;

     label2:
        $r4 = new java.nio.BufferOverflowException;

        specialinvoke $r4.<java.nio.BufferOverflowException: void <init>()>();

        throw $r4;

     label3:
        $r2 = new java.nio.charset.UnmappableCharacterException;

        $i1 = r0.<java.nio.charset.CoderResult: int length>;

        specialinvoke $r2.<java.nio.charset.UnmappableCharacterException: void <init>(int)>($i1);

        throw $r2;

     label4:
        $r3 = new java.nio.charset.MalformedInputException;

        $i2 = r0.<java.nio.charset.CoderResult: int length>;

        specialinvoke $r3.<java.nio.charset.MalformedInputException: void <init>(int)>($i2);

        throw $r3;

     label5:
        $r5 = new java.nio.charset.CharacterCodingException;

        specialinvoke $r5.<java.nio.charset.CharacterCodingException: void <init>()>();

        throw $r5;
    }

    public java.lang.String toString()
    {
        java.nio.charset.CoderResult r0;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14;
        java.lang.Class $r2;
        java.lang.String $r3, $r8, r15;

        r0 := @this: java.nio.charset.CoderResult;

        $i0 = r0.<java.nio.charset.CoderResult: int type>;

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            default: goto label5;
        };

     label1:
        r15 = "UNDERFLOW error";

        goto label6;

     label2:
        r15 = "OVERFLOW error";

        goto label6;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unmappable-character error with erroneous input length ");

        $i1 = r0.<java.nio.charset.CoderResult: int length>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label4:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed-input error with erroneous input length ");

        $i2 = r0.<java.nio.charset.CoderResult: int length>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        r15 = "";

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    static void <clinit>()
    {
        java.nio.charset.CoderResult $r0, $r1;
        java.util.WeakHashMap $r2, $r3;

        <java.nio.charset.CoderResult: int TYPE_UNMAPPABLE_CHAR> = 4;

        <java.nio.charset.CoderResult: int TYPE_MALFORMED_INPUT> = 3;

        <java.nio.charset.CoderResult: int TYPE_OVERFLOW> = 2;

        <java.nio.charset.CoderResult: int TYPE_UNDERFLOW> = 1;

        $r0 = new java.nio.charset.CoderResult;

        specialinvoke $r0.<java.nio.charset.CoderResult: void <init>(int,int)>(1, 0);

        <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW> = $r0;

        $r1 = new java.nio.charset.CoderResult;

        specialinvoke $r1.<java.nio.charset.CoderResult: void <init>(int,int)>(2, 0);

        <java.nio.charset.CoderResult: java.nio.charset.CoderResult OVERFLOW> = $r1;

        $r2 = new java.util.WeakHashMap;

        specialinvoke $r2.<java.util.WeakHashMap: void <init>()>();

        <java.nio.charset.CoderResult: java.util.WeakHashMap _malformedErrors> = $r2;

        $r3 = new java.util.WeakHashMap;

        specialinvoke $r3.<java.util.WeakHashMap: void <init>()>();

        <java.nio.charset.CoderResult: java.util.WeakHashMap _unmappableErrors> = $r3;

        return;
    }
}
