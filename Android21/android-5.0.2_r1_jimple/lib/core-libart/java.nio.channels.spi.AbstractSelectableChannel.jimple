public abstract class java.nio.channels.spi.AbstractSelectableChannel extends java.nio.channels.SelectableChannel
{
    private final java.nio.channels.spi.SelectorProvider provider;
    private java.util.List keyList;
    private final java.lang.Object blockingLock;
    boolean isBlocking;

    protected void <init>(java.nio.channels.spi.SelectorProvider)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.SelectableChannel: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock> = $r3;

        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking> = 1;

        r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider> = r1;

        return;
    }

    public final java.nio.channels.spi.SelectorProvider provider()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.spi.SelectorProvider $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.spi.SelectorProvider provider>;

        return $r1;
    }

    public final synchronized boolean isRegistered()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.util.List $r1;
        boolean $z0, $z1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final synchronized java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1, $r6;
        java.util.Iterator r2;
        java.nio.channels.SelectionKey r3;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.Selector;

        $r4 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.channels.SelectionKey) $r5;

        if r3 == null goto label2;

        $r6 = virtualinvoke r3.<java.nio.channels.SelectionKey: java.nio.channels.Selector selector()>();

        if $r6 != r1 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    public final java.nio.channels.SelectionKey register(java.nio.channels.Selector, int, java.lang.Object) throws java.nio.channels.ClosedChannelException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.Selector r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2, r3, $r6;
        java.nio.channels.SelectionKey r4;
        java.lang.Throwable r5, $r21;
        boolean $z0, $z1, $z2, $z3;
        java.nio.channels.CancelledKeyException $r9;
        java.nio.channels.spi.AbstractSelector $r10;
        java.util.List $r11;
        java.nio.channels.IllegalSelectorException $r12;
        java.lang.NullPointerException $r13;
        java.lang.IllegalArgumentException $r14;
        java.nio.channels.IllegalBlockingModeException $r15;
        java.lang.StringBuilder $r16, $r17, $r19;
        java.lang.String $r18;
        java.nio.channels.ClosedChannelException $r20;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.Selector;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r20 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r20.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r20;

     label01:
        $i1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: int validOps()>();

        $i2 = $i1 ^ -1;

        $i3 = i0 & $i2;

        if $i3 == 0 goto label02;

        $r14 = new java.lang.IllegalArgumentException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no valid ops in interest set: ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label02:
        $r6 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        r3 = $r6;

        entermonitor $r6;

     label03:
        $z1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        if $z1 == 0 goto label04;

        $r15 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r15.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r15;

     label04:
        $z2 = virtualinvoke r1.<java.nio.channels.Selector: boolean isOpen()>();

        if $z2 != 0 goto label06;

        if i0 != 0 goto label05;

        $r12 = new java.nio.channels.IllegalSelectorException;

        specialinvoke $r12.<java.nio.channels.IllegalSelectorException: void <init>()>();

        throw $r12;

     label05:
        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("selector not open");

        throw $r13;

     label06:
        r4 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectionKey keyFor(java.nio.channels.Selector)>(r1);

        if r4 != null goto label07;

        $r10 = (java.nio.channels.spi.AbstractSelector) r1;

        r4 = virtualinvoke $r10.<java.nio.channels.spi.AbstractSelector: java.nio.channels.SelectionKey register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)>(r0, i0, r2);

        $r11 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r4);

        goto label09;

     label07:
        $z3 = virtualinvoke r4.<java.nio.channels.SelectionKey: boolean isValid()>();

        if $z3 != 0 goto label08;

        $r9 = new java.nio.channels.CancelledKeyException;

        specialinvoke $r9.<java.nio.channels.CancelledKeyException: void <init>()>();

        throw $r9;

     label08:
        virtualinvoke r4.<java.nio.channels.SelectionKey: java.nio.channels.SelectionKey interestOps(int)>(i0);

        virtualinvoke r4.<java.nio.channels.SelectionKey: java.lang.Object attach(java.lang.Object)>(r2);

     label09:
        exitmonitor r3;

     label10:
        return r4;

     label11:
        $r21 := @caughtexception;

        r5 = $r21;

        exitmonitor r3;

     label12:
        throw r5;

        catch java.lang.Throwable from label03 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    protected final synchronized void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.util.Iterator r1;
        java.nio.channels.SelectionKey r2;
        java.util.List $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implCloseSelectableChannel()>();

        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.nio.channels.SelectionKey) $r4;

        if r2 == null goto label2;

        virtualinvoke r2.<java.nio.channels.SelectionKey: void cancel()>();

     label2:
        goto label1;

     label3:
        return;
    }

    protected abstract void implCloseSelectableChannel() throws java.io.IOException;

    public final boolean isBlocking()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public final java.lang.Object blockingLock()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.lang.Object $r1;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r1 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        return $r1;
    }

    public final java.nio.channels.SelectableChannel configureBlocking(boolean) throws java.io.IOException
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        java.nio.channels.IllegalBlockingModeException $r4;
        java.nio.channels.ClosedChannelException $r5;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isOpen()>();

        if $z1 != 0 goto label1;

        $r5 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r5.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $z2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking>;

        if $z2 != z0 goto label4;

        exitmonitor r1;

     label3:
        return r0;

     label4:
        if z0 == 0 goto label5;

        $z3 = specialinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean containsValidKeys()>();

        if $z3 == 0 goto label5;

        $r4 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r4.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r4;

     label5:
        virtualinvoke r0.<java.nio.channels.spi.AbstractSelectableChannel: void implConfigureBlocking(boolean)>(z0);

        r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking> = z0;

        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label8:
        throw r2;

     label9:
        return r0;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected abstract void implConfigureBlocking(boolean) throws java.io.IOException;

    synchronized void deregister(java.nio.channels.SelectionKey)
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.nio.channels.SelectionKey r1;
        java.util.List $r2, $r3;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        r1 := @parameter0: java.nio.channels.SelectionKey;

        $r2 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        if $r2 == null goto label1;

        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    private synchronized boolean containsValidKeys()
    {
        java.nio.channels.spi.AbstractSelectableChannel r0;
        java.util.Iterator r1;
        java.nio.channels.SelectionKey r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: java.nio.channels.spi.AbstractSelectableChannel;

        $r3 = r0.<java.nio.channels.spi.AbstractSelectableChannel: java.util.List keyList>;

        r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.nio.channels.SelectionKey) $r4;

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<java.nio.channels.SelectionKey: boolean isValid()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }
}
