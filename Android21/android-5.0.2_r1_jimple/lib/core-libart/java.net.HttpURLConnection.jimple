public abstract class java.net.HttpURLConnection extends java.net.URLConnection
{
    private static final int DEFAULT_CHUNK_LENGTH;
    private static final java.lang.String[] PERMITTED_USER_METHODS;
    protected java.lang.String method;
    protected int responseCode;
    protected java.lang.String responseMessage;
    protected boolean instanceFollowRedirects;
    private static boolean followRedirects;
    protected int chunkLength;
    protected int fixedContentLength;
    protected long fixedContentLengthLong;
    public static final int HTTP_ACCEPTED;
    public static final int HTTP_BAD_GATEWAY;
    public static final int HTTP_BAD_METHOD;
    public static final int HTTP_BAD_REQUEST;
    public static final int HTTP_CLIENT_TIMEOUT;
    public static final int HTTP_CONFLICT;
    public static final int HTTP_CREATED;
    public static final int HTTP_ENTITY_TOO_LARGE;
    public static final int HTTP_FORBIDDEN;
    public static final int HTTP_GATEWAY_TIMEOUT;
    public static final int HTTP_GONE;
    public static final int HTTP_INTERNAL_ERROR;
    public static final int HTTP_LENGTH_REQUIRED;
    public static final int HTTP_MOVED_PERM;
    public static final int HTTP_MOVED_TEMP;
    public static final int HTTP_MULT_CHOICE;
    public static final int HTTP_NO_CONTENT;
    public static final int HTTP_NOT_ACCEPTABLE;
    public static final int HTTP_NOT_AUTHORITATIVE;
    public static final int HTTP_NOT_FOUND;
    public static final int HTTP_NOT_IMPLEMENTED;
    public static final int HTTP_NOT_MODIFIED;
    public static final int HTTP_OK;
    public static final int HTTP_PARTIAL;
    public static final int HTTP_PAYMENT_REQUIRED;
    public static final int HTTP_PRECON_FAILED;
    public static final int HTTP_PROXY_AUTH;
    public static final int HTTP_REQ_TOO_LONG;
    public static final int HTTP_RESET;
    public static final int HTTP_SEE_OTHER;
    public static final int HTTP_SERVER_ERROR;
    public static final int HTTP_USE_PROXY;
    public static final int HTTP_UNAUTHORIZED;
    public static final int HTTP_UNSUPPORTED_TYPE;
    public static final int HTTP_UNAVAILABLE;
    public static final int HTTP_VERSION;

    protected void <init>(java.net.URL)
    {
        java.net.HttpURLConnection r0;
        java.net.URL r1;
        boolean $z0;

        r0 := @this: java.net.HttpURLConnection;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.net.URLConnection: void <init>(java.net.URL)>(r1);

        r0.<java.net.HttpURLConnection: java.lang.String method> = "GET";

        r0.<java.net.HttpURLConnection: int responseCode> = -1;

        $z0 = <java.net.HttpURLConnection: boolean followRedirects>;

        r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects> = $z0;

        r0.<java.net.HttpURLConnection: int chunkLength> = -1;

        r0.<java.net.HttpURLConnection: int fixedContentLength> = -1;

        r0.<java.net.HttpURLConnection: long fixedContentLengthLong> = -1L;

        return;
    }

    public abstract void disconnect();

    public java.io.InputStream getErrorStream()
    {
        java.net.HttpURLConnection r0;

        r0 := @this: java.net.HttpURLConnection;

        return null;
    }

    public static boolean getFollowRedirects()
    {
        boolean $z0;

        $z0 = <java.net.HttpURLConnection: boolean followRedirects>;

        return $z0;
    }

    public java.security.Permission getPermission() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        int i0;
        java.net.URL $r1, $r4;
        java.net.SocketPermission $r2;
        java.lang.StringBuilder $r3, $r6, $r7, $r8;
        java.lang.String $r5, $r9;

        r0 := @this: java.net.HttpURLConnection;

        $r1 = r0.<java.net.HttpURLConnection: java.net.URL url>;

        i0 = virtualinvoke $r1.<java.net.URL: int getPort()>();

        if i0 >= 0 goto label1;

        i0 = 80;

     label1:
        $r2 = new java.net.SocketPermission;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<java.net.HttpURLConnection: java.net.URL url>;

        $r5 = virtualinvoke $r4.<java.net.URL: java.lang.String getHost()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>($r9, "connect, resolve");

        return $r2;
    }

    public java.lang.String getRequestMethod()
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.HttpURLConnection;

        $r1 = r0.<java.net.HttpURLConnection: java.lang.String method>;

        return $r1;
    }

    public int getResponseCode() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        java.lang.String r1, $r3, $r4, r5;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: java.net.HttpURLConnection;

        virtualinvoke r0.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>();

        r1 = virtualinvoke r0.<java.net.HttpURLConnection: java.lang.String getHeaderField(int)>(0);

        if r1 != null goto label1;

        return -1;

     label1:
        r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>(" ");

        i0 = $i2 + 1;

        if i0 != 0 goto label2;

        return -1;

     label2:
        i1 = i0 + 3;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        if i1 <= $i3 goto label3;

        i1 = virtualinvoke r5.<java.lang.String: int length()>();

     label3:
        $r3 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

        $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        r0.<java.net.HttpURLConnection: int responseCode> = $i4;

        $i5 = i1 + 1;

        $i6 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i5 > $i6 goto label4;

        $i8 = i1 + 1;

        $r4 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i8);

        r0.<java.net.HttpURLConnection: java.lang.String responseMessage> = $r4;

     label4:
        $i7 = r0.<java.net.HttpURLConnection: int responseCode>;

        return $i7;
    }

    public java.lang.String getResponseMessage() throws java.io.IOException
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: java.net.HttpURLConnection;

        $r1 = r0.<java.net.HttpURLConnection: java.lang.String responseMessage>;

        if $r1 == null goto label1;

        $r3 = r0.<java.net.HttpURLConnection: java.lang.String responseMessage>;

        return $r3;

     label1:
        virtualinvoke r0.<java.net.HttpURLConnection: int getResponseCode()>();

        $r2 = r0.<java.net.HttpURLConnection: java.lang.String responseMessage>;

        return $r2;
    }

    public static void setFollowRedirects(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <java.net.HttpURLConnection: boolean followRedirects> = z0;

        return;
    }

    public void setRequestMethod(java.lang.String) throws java.net.ProtocolException
    {
        java.net.HttpURLConnection r0;
        java.lang.String r1, r3, $r10, $r12;
        java.lang.String[] r2, $r9;
        int i0, i1;
        boolean $z0, $z1;
        java.net.ProtocolException $r4, $r13;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r11;

        r0 := @this: java.net.HttpURLConnection;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<java.net.HttpURLConnection: boolean connected>;

        if $z0 == 0 goto label1;

        $r13 = new java.net.ProtocolException;

        specialinvoke $r13.<java.net.ProtocolException: void <init>(java.lang.String)>("Connection already established");

        throw $r13;

     label1:
        r2 = <java.net.HttpURLConnection: java.lang.String[] PERMITTED_USER_METHODS>;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        r0.<java.net.HttpURLConnection: java.lang.String method> = r3;

        return;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        $r4 = new java.net.ProtocolException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown method \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; must be one of ");

        $r9 = <java.net.HttpURLConnection: java.lang.String[] PERMITTED_USER_METHODS>;

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.net.ProtocolException: void <init>(java.lang.String)>($r12);

        throw $r4;
    }

    public abstract boolean usingProxy();

    public java.lang.String getContentEncoding()
    {
        java.net.HttpURLConnection r0;
        java.lang.String $r1;

        r0 := @this: java.net.HttpURLConnection;

        $r1 = specialinvoke r0.<java.net.URLConnection: java.lang.String getContentEncoding()>();

        return $r1;
    }

    public boolean getInstanceFollowRedirects()
    {
        java.net.HttpURLConnection r0;
        boolean $z0;

        r0 := @this: java.net.HttpURLConnection;

        $z0 = r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects>;

        return $z0;
    }

    public void setInstanceFollowRedirects(boolean)
    {
        java.net.HttpURLConnection r0;
        boolean z0;

        r0 := @this: java.net.HttpURLConnection;

        z0 := @parameter0: boolean;

        r0.<java.net.HttpURLConnection: boolean instanceFollowRedirects> = z0;

        return;
    }

    public long getHeaderFieldDate(java.lang.String, long)
    {
        java.net.HttpURLConnection r0;
        java.lang.String r1;
        long l0, $l1;

        r0 := @this: java.net.HttpURLConnection;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $l1 = specialinvoke r0.<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)>(r1, l0);

        return $l1;
    }

    public void setFixedLengthStreamingMode(long)
    {
        java.net.HttpURLConnection r0;
        long l0, $l3;
        boolean $z0;
        int $i1, $i4;
        byte $b2;
        java.lang.IllegalArgumentException $r1;
        java.lang.IllegalStateException $r2, $r3;

        r0 := @this: java.net.HttpURLConnection;

        l0 := @parameter0: long;

        $z0 = r0.<java.net.URLConnection: boolean connected>;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected");

        throw $r3;

     label1:
        $i1 = r0.<java.net.HttpURLConnection: int chunkLength>;

        if $i1 <= 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already in chunked mode");

        throw $r2;

     label2:
        $b2 = l0 cmp 0L;

        if $b2 >= 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("contentLength < 0");

        throw $r1;

     label3:
        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(l0, 2147483647L);

        $i4 = (int) $l3;

        r0.<java.net.HttpURLConnection: int fixedContentLength> = $i4;

        r0.<java.net.HttpURLConnection: long fixedContentLengthLong> = l0;

        return;
    }

    public void setFixedLengthStreamingMode(int)
    {
        java.net.HttpURLConnection r0;
        int i0;
        long $l1;

        r0 := @this: java.net.HttpURLConnection;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        virtualinvoke r0.<java.net.HttpURLConnection: void setFixedLengthStreamingMode(long)>($l1);

        return;
    }

    public void setChunkedStreamingMode(int)
    {
        java.net.HttpURLConnection r0;
        int i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r1, $r2;

        r0 := @this: java.net.HttpURLConnection;

        i0 := @parameter0: int;

        $z0 = r0.<java.net.URLConnection: boolean connected>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already connected");

        throw $r2;

     label1:
        $i1 = r0.<java.net.HttpURLConnection: int fixedContentLength>;

        if $i1 < 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Already in fixed-length mode");

        throw $r1;

     label2:
        if i0 > 0 goto label3;

        r0.<java.net.HttpURLConnection: int chunkLength> = 1024;

        goto label4;

     label3:
        r0.<java.net.HttpURLConnection: int chunkLength> = i0;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <java.net.HttpURLConnection: int HTTP_VERSION> = 505;

        <java.net.HttpURLConnection: int HTTP_UNAVAILABLE> = 503;

        <java.net.HttpURLConnection: int HTTP_UNSUPPORTED_TYPE> = 415;

        <java.net.HttpURLConnection: int HTTP_UNAUTHORIZED> = 401;

        <java.net.HttpURLConnection: int HTTP_USE_PROXY> = 305;

        <java.net.HttpURLConnection: int HTTP_SERVER_ERROR> = 500;

        <java.net.HttpURLConnection: int HTTP_SEE_OTHER> = 303;

        <java.net.HttpURLConnection: int HTTP_RESET> = 205;

        <java.net.HttpURLConnection: int HTTP_REQ_TOO_LONG> = 414;

        <java.net.HttpURLConnection: int HTTP_PROXY_AUTH> = 407;

        <java.net.HttpURLConnection: int HTTP_PRECON_FAILED> = 412;

        <java.net.HttpURLConnection: int HTTP_PAYMENT_REQUIRED> = 402;

        <java.net.HttpURLConnection: int HTTP_PARTIAL> = 206;

        <java.net.HttpURLConnection: int HTTP_OK> = 200;

        <java.net.HttpURLConnection: int HTTP_NOT_MODIFIED> = 304;

        <java.net.HttpURLConnection: int HTTP_NOT_IMPLEMENTED> = 501;

        <java.net.HttpURLConnection: int HTTP_NOT_FOUND> = 404;

        <java.net.HttpURLConnection: int HTTP_NOT_AUTHORITATIVE> = 203;

        <java.net.HttpURLConnection: int HTTP_NOT_ACCEPTABLE> = 406;

        <java.net.HttpURLConnection: int HTTP_NO_CONTENT> = 204;

        <java.net.HttpURLConnection: int HTTP_MULT_CHOICE> = 300;

        <java.net.HttpURLConnection: int HTTP_MOVED_TEMP> = 302;

        <java.net.HttpURLConnection: int HTTP_MOVED_PERM> = 301;

        <java.net.HttpURLConnection: int HTTP_LENGTH_REQUIRED> = 411;

        <java.net.HttpURLConnection: int HTTP_INTERNAL_ERROR> = 500;

        <java.net.HttpURLConnection: int HTTP_GONE> = 410;

        <java.net.HttpURLConnection: int HTTP_GATEWAY_TIMEOUT> = 504;

        <java.net.HttpURLConnection: int HTTP_FORBIDDEN> = 403;

        <java.net.HttpURLConnection: int HTTP_ENTITY_TOO_LARGE> = 413;

        <java.net.HttpURLConnection: int HTTP_CREATED> = 201;

        <java.net.HttpURLConnection: int HTTP_CONFLICT> = 409;

        <java.net.HttpURLConnection: int HTTP_CLIENT_TIMEOUT> = 408;

        <java.net.HttpURLConnection: int HTTP_BAD_REQUEST> = 400;

        <java.net.HttpURLConnection: int HTTP_BAD_METHOD> = 405;

        <java.net.HttpURLConnection: int HTTP_BAD_GATEWAY> = 502;

        <java.net.HttpURLConnection: int HTTP_ACCEPTED> = 202;

        <java.net.HttpURLConnection: int DEFAULT_CHUNK_LENGTH> = 1024;

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "OPTIONS";

        $r0[1] = "GET";

        $r0[2] = "HEAD";

        $r0[3] = "POST";

        $r0[4] = "PUT";

        $r0[5] = "DELETE";

        $r0[6] = "TRACE";

        <java.net.HttpURLConnection: java.lang.String[] PERMITTED_USER_METHODS> = $r0;

        <java.net.HttpURLConnection: boolean followRedirects> = 1;

        return;
    }
}
