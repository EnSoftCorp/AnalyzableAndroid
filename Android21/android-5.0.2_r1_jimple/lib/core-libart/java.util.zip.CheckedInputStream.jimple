public class java.util.zip.CheckedInputStream extends java.io.FilterInputStream
{
    private final java.util.zip.Checksum check;

    public void <init>(java.io.InputStream, java.util.zip.Checksum)
    {
        java.util.zip.CheckedInputStream r0;
        java.io.InputStream r1;
        java.util.zip.Checksum r2;

        r0 := @this: java.util.zip.CheckedInputStream;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.util.zip.Checksum;

        specialinvoke r0.<java.io.FilterInputStream: void <init>(java.io.InputStream)>(r1);

        r0.<java.util.zip.CheckedInputStream: java.util.zip.Checksum check> = r2;

        return;
    }

    public int read() throws java.io.IOException
    {
        java.util.zip.CheckedInputStream r0;
        int i0;
        java.io.InputStream $r1;
        java.util.zip.Checksum $r2;

        r0 := @this: java.util.zip.CheckedInputStream;

        $r1 = r0.<java.util.zip.CheckedInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        if i0 == -1 goto label1;

        $r2 = r0.<java.util.zip.CheckedInputStream: java.util.zip.Checksum check>;

        interfaceinvoke $r2.<java.util.zip.Checksum: void update(int)>(i0);

     label1:
        return i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.CheckedInputStream r0;
        byte[] r1;
        int i0, i1, i2;
        java.io.InputStream $r2;
        java.util.zip.Checksum $r3;

        r0 := @this: java.util.zip.CheckedInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.util.zip.CheckedInputStream: java.io.InputStream in>;

        i2 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>(r1, i0, i1);

        if i2 == -1 goto label1;

        $r3 = r0.<java.util.zip.CheckedInputStream: java.util.zip.Checksum check>;

        interfaceinvoke $r3.<java.util.zip.Checksum: void update(byte[],int,int)>(r1, i0, i2);

     label1:
        return i2;
    }

    public java.util.zip.Checksum getChecksum()
    {
        java.util.zip.CheckedInputStream r0;
        java.util.zip.Checksum $r1;

        r0 := @this: java.util.zip.CheckedInputStream;

        $r1 = r0.<java.util.zip.CheckedInputStream: java.util.zip.Checksum check>;

        return $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.util.zip.CheckedInputStream r0;
        long l0, $l1;

        r0 := @this: java.util.zip.CheckedInputStream;

        l0 := @parameter0: long;

        $l1 = staticinvoke <libcore.io.Streams: long skipByReading(java.io.InputStream,long)>(r0, l0);

        return $l1;
    }
}
