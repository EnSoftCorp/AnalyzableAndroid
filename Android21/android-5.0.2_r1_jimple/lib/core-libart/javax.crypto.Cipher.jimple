public class javax.crypto.Cipher extends java.lang.Object
{
    public static final int DECRYPT_MODE;
    public static final int ENCRYPT_MODE;
    public static final int PRIVATE_KEY;
    public static final int PUBLIC_KEY;
    public static final int SECRET_KEY;
    public static final int UNWRAP_MODE;
    public static final int WRAP_MODE;
    private int mode;
    private static final java.lang.String SERVICE;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String ATTRIBUTE_PADDINGS;
    private static final java.lang.String ATTRIBUTE_MODES;
    private java.security.Provider provider;
    private final java.security.Provider specifiedProvider;
    private javax.crypto.CipherSpi spiImpl;
    private final javax.crypto.CipherSpi specifiedSpi;
    private final java.lang.String transformation;
    private final java.lang.String[] transformParts;
    private final java.lang.Object initLock;
    private static java.security.SecureRandom secureRandom;

    protected void <init>(javax.crypto.CipherSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        java.lang.Object $r4;
        boolean $z0;
        java.lang.NullPointerException $r5, $r6;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: javax.crypto.CipherSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.Cipher: java.lang.Object initLock> = $r4;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("cipherSpi == null");

        throw $r6;

     label1:
        $z0 = r1 instanceof org.apache.harmony.crypto.internal.NullCipherSpi;

        if $z0 != 0 goto label2;

        if r2 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("provider == null");

        throw $r5;

     label2:
        r0.<javax.crypto.Cipher: java.security.Provider specifiedProvider> = r2;

        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi specifiedSpi> = r1;

        r0.<javax.crypto.Cipher: java.lang.String transformation> = r3;

        r0.<javax.crypto.Cipher: java.lang.String[] transformParts> = null;

        return;
    }

    private void <init>(java.lang.String, java.lang.String[], java.security.Provider)
    {
        javax.crypto.Cipher r0;
        java.lang.String r1;
        java.lang.String[] r2;
        java.security.Provider r3;
        java.lang.Object $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.security.Provider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.Cipher: java.lang.Object initLock> = $r4;

        r0.<javax.crypto.Cipher: java.lang.String transformation> = r1;

        r0.<javax.crypto.Cipher: java.lang.String[] transformParts> = r2;

        r0.<javax.crypto.Cipher: java.security.Provider specifiedProvider> = r3;

        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi specifiedSpi> = null;

        return;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0;
        javax.crypto.Cipher $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getCipher(java.lang.String,java.security.Provider)>(r0, null);

        return $r1;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0, r1, $r8;
        java.security.Provider r2;
        javax.crypto.Cipher $r3;
        java.security.NoSuchProviderException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r9;

     label1:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label2;

        $r4 = new java.security.NoSuchProviderException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider not available: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.NoSuchProviderException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label2:
        $r3 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r3;
    }

    public static final javax.crypto.Cipher getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0;
        java.security.Provider r1;
        javax.crypto.Cipher $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getCipher(java.lang.String,java.security.Provider)>(r0, r1);

        return $r2;
    }

    private static java.security.NoSuchAlgorithmException invalidTransformation(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r5;
        java.security.NoSuchAlgorithmException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.security.NoSuchAlgorithmException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid transformation: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    private static javax.crypto.Cipher getCipher(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException
    {
        java.lang.String r0, $r9, $r13, $r18;
        java.security.Provider r1;
        java.lang.String[] r2;
        java.security.NoSuchAlgorithmException $r3, $r6, $r15;
        boolean $z0;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider $r4;
        javax.crypto.Cipher $r5;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r12, $r14, $r16, $r17;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = staticinvoke <javax.crypto.Cipher: java.security.NoSuchAlgorithmException invalidTransformation(java.lang.String)>(r0);

        throw $r3;

     label2:
        r2 = staticinvoke <javax.crypto.Cipher: java.lang.String[] checkTransformation(java.lang.String)>(r0);

        $r4 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryCombinations(java.security.Key,java.security.Provider,java.lang.String[])>(null, r1, r2);

        if $r4 != null goto label4;

        if r1 != null goto label3;

        $r15 = new java.security.NoSuchAlgorithmException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider found for ");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label3:
        $r6 = new java.security.NoSuchAlgorithmException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider ");

        $r9 = virtualinvoke r1.<java.security.Provider: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not provide ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r13);

        throw $r6;

     label4:
        $r5 = new javax.crypto.Cipher;

        specialinvoke $r5.<javax.crypto.Cipher: void <init>(java.lang.String,java.lang.String[],java.security.Provider)>(r0, r2, r1);

        return $r5;
    }

    private static java.lang.String[] checkTransformation(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, r3, $r4, $r5, $r6, $r8, $r9, $r11;
        java.lang.String[] r1, r2;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.security.NoSuchAlgorithmException $r7, $r10, $r12;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        r0 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i1 = lengthof r1;

        if $i1 <= 3 goto label2;

        $r12 = staticinvoke <javax.crypto.Cipher: java.security.NoSuchAlgorithmException invalidTransformation(java.lang.String)>(r0);

        throw $r12;

     label2:
        r2 = newarray (java.lang.String)[3];

        i0 = 0;

     label3:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label5;

        $r11 = r1[i0];

        r3 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label4;

        r2[i0] = r3;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        $r4 = r2[0];

        if $r4 != null goto label6;

        $r10 = staticinvoke <javax.crypto.Cipher: java.security.NoSuchAlgorithmException invalidTransformation(java.lang.String)>(r0);

        throw $r10;

     label6:
        $r5 = r2[1];

        if $r5 != null goto label7;

        $r9 = r2[2];

        if $r9 == null goto label9;

     label7:
        $r6 = r2[1];

        if $r6 == null goto label8;

        $r8 = r2[2];

        if $r8 != null goto label9;

     label8:
        $r7 = staticinvoke <javax.crypto.Cipher: java.security.NoSuchAlgorithmException invalidTransformation(java.lang.String)>(r0);

        throw $r7;

     label9:
        return r2;
    }

    private javax.crypto.CipherSpi getSpi(java.security.Key)
    {
        javax.crypto.Cipher r0;
        java.security.Key r1;
        java.lang.Object r2, $r6, $r10;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r3;
        java.lang.Throwable r4, $r21;
        javax.crypto.CipherSpi $r5, $r7, $r11, $r13, $r20, $r22;
        java.lang.String[] $r8;
        java.security.Provider $r9, $r12;
        java.lang.StringBuilder $r14, $r17, $r19;
        java.security.ProviderException $r15;
        java.lang.String $r16, $r18;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.security.Key;

        $r5 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi specifiedSpi>;

        if $r5 == null goto label1;

        $r22 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi specifiedSpi>;

        return $r22;

     label1:
        $r6 = r0.<javax.crypto.Cipher: java.lang.Object initLock>;

        r2 = $r6;

        entermonitor $r6;

     label2:
        $r7 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spiImpl>;

        if $r7 == null goto label4;

        if r1 != null goto label4;

        $r20 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spiImpl>;

        exitmonitor r2;

     label3:
        return $r20;

     label4:
        $r9 = r0.<javax.crypto.Cipher: java.security.Provider specifiedProvider>;

        $r8 = r0.<javax.crypto.Cipher: java.lang.String[] transformParts>;

        r3 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryCombinations(java.security.Key,java.security.Provider,java.lang.String[])>(r1, $r9, $r8);

        if r3 != null goto label5;

        $r15 = new java.security.ProviderException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider for ");

        $r16 = r0.<javax.crypto.Cipher: java.lang.String transformation>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.security.ProviderException: void <init>(java.lang.String)>($r18);

        throw $r15;

     label5:
        $r10 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r11 = (javax.crypto.CipherSpi) $r10;

        r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spiImpl> = $r11;

        $r12 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        r0.<javax.crypto.Cipher: java.security.Provider provider> = $r12;

        $r13 = r0.<javax.crypto.Cipher: javax.crypto.CipherSpi spiImpl>;

        exitmonitor r2;

     label6:
        return $r13;

     label7:
        $r21 := @caughtexception;

        r4 = $r21;

        exitmonitor r2;

     label8:
        throw r4;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private javax.crypto.CipherSpi getSpi()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;

        r0 := @this: javax.crypto.Cipher;

        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi(java.security.Key)>(null);

        return $r1;
    }

    private static org.apache.harmony.security.fortress.Engine$SpiAndProvider tryCombinations(java.security.Key, java.security.Provider, java.lang.String[])
    {
        java.security.Key r0;
        java.security.Provider r1;
        java.lang.String[] r2;
        java.lang.String $r3, $r4, $r5, $r7, $r10, $r13, $r16, $r19, $r20, $r22, $r26, $r28, $r32, $r33, $r35;
        javax.crypto.Cipher$NeedToSet $r6, $r15, $r24, $r34;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider $r8, r37, r38, r39;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r17, $r18, $r21, $r23, $r25, $r27, $r29, $r30, $r31, $r36;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.Provider;

        r2 := @parameter2: java.lang.String[];

        $r3 = r2[1];

        if $r3 == null goto label1;

        $r26 = r2[2];

        if $r26 == null goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r28 = r2[0];

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r32 = r2[1];

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r35 = r2[2];

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet NONE>;

        r37 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransform(java.security.Key,java.security.Provider,java.lang.String,java.lang.String[],javax.crypto.Cipher$NeedToSet)>(r0, r1, $r33, r2, $r34);

        if r37 == null goto label1;

        return r37;

     label1:
        $r4 = r2[1];

        if $r4 == null goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = r2[0];

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r20 = r2[1];

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet PADDING>;

        r38 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransform(java.security.Key,java.security.Provider,java.lang.String,java.lang.String[],javax.crypto.Cipher$NeedToSet)>(r0, r1, $r22, r2, $r24);

        if r38 == null goto label2;

        return r38;

     label2:
        $r5 = r2[2];

        if $r5 == null goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = r2[0];

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//");

        $r13 = r2[2];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet MODE>;

        r39 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransform(java.security.Key,java.security.Provider,java.lang.String,java.lang.String[],javax.crypto.Cipher$NeedToSet)>(r0, r1, $r16, r2, $r15);

        if r39 == null goto label3;

        return r39;

     label3:
        $r7 = r2[0];

        $r6 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet BOTH>;

        $r8 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransform(java.security.Key,java.security.Provider,java.lang.String,java.lang.String[],javax.crypto.Cipher$NeedToSet)>(r0, r1, $r7, r2, $r6);

        return $r8;
    }

    private static org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransform(java.security.Key, java.security.Provider, java.lang.String, java.lang.String[], javax.crypto.Cipher$NeedToSet)
    {
        java.security.Key r0;
        java.security.Provider r1;
        java.lang.String r2;
        java.lang.String[] r3;
        javax.crypto.Cipher$NeedToSet r4;
        java.security.Provider$Service r5, r7;
        java.util.Iterator r6;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r8, $r11;
        org.apache.harmony.security.fortress.Engine $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.util.ArrayList r12;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.Provider;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String[];

        r4 := @parameter4: javax.crypto.Cipher$NeedToSet;

        if r1 == null goto label2;

        r5 = virtualinvoke r1.<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>("Cipher", r2);

        if r5 != null goto label1;

        return null;

     label1:
        $r11 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransformWithProvider(java.security.Key,java.lang.String[],javax.crypto.Cipher$NeedToSet,java.security.Provider$Service)>(r0, r3, r4, r5);

        return $r11;

     label2:
        $r9 = <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine ENGINE>;

        r12 = virtualinvoke $r9.<org.apache.harmony.security.fortress.Engine: java.util.ArrayList getServices(java.lang.String)>(r2);

        if r12 != null goto label3;

        return null;

     label3:
        r6 = virtualinvoke r12.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.security.Provider$Service) $r10;

        r8 = staticinvoke <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransformWithProvider(java.security.Key,java.lang.String[],javax.crypto.Cipher$NeedToSet,java.security.Provider$Service)>(r0, r3, r4, r7);

        if r8 == null goto label5;

        return r8;

     label5:
        goto label4;

     label6:
        return null;
    }

    private static org.apache.harmony.security.fortress.Engine$SpiAndProvider tryTransformWithProvider(java.security.Key, java.lang.String[], javax.crypto.Cipher$NeedToSet, java.security.Provider$Service)
    {
        java.security.Key r0;
        java.lang.String[] r1;
        javax.crypto.Cipher$NeedToSet r2, $r12, $r14, $r19, $r20;
        java.security.Provider$Service r3;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r4;
        javax.crypto.CipherSpi r5;
        java.lang.String $r6, $r7, $r15, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3;
        org.apache.harmony.security.fortress.Engine $r8;
        java.lang.Object $r9, $r11, $r13;
        java.security.Provider $r10;
        javax.crypto.NoSuchPaddingException $r21;
        java.security.NoSuchAlgorithmException $r22;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: javax.crypto.Cipher$NeedToSet;

        r3 := @parameter3: java.security.Provider$Service;

     label01:
        if r0 == null goto label03;

        $z3 = virtualinvoke r3.<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>(r0);

        if $z3 != 0 goto label03;

     label02:
        return null;

     label03:
        $r6 = r1[1];

        $z0 = staticinvoke <javax.crypto.Cipher: boolean matchAttribute(java.security.Provider$Service,java.lang.String,java.lang.String)>(r3, "SupportedModes", $r6);

        if $z0 == 0 goto label04;

        $r7 = r1[2];

        $z1 = staticinvoke <javax.crypto.Cipher: boolean matchAttribute(java.security.Provider$Service,java.lang.String,java.lang.String)>(r3, "SupportedPaddings", $r7);

        if $z1 != 0 goto label05;

     label04:
        return null;

     label05:
        $r8 = <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine ENGINE>;

        r4 = virtualinvoke $r8.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.security.Provider$Service,java.lang.String)>(r3, null);

        $r9 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        if $r9 == null goto label06;

        $r10 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        if $r10 != null goto label07;

     label06:
        return null;

     label07:
        $r11 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $z2 = $r11 instanceof javax.crypto.CipherSpi;

        if $z2 != 0 goto label09;

     label08:
        return null;

     label09:
        $r13 = r4.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        r5 = (javax.crypto.CipherSpi) $r13;

        $r12 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet MODE>;

        if r2 == $r12 goto label10;

        $r20 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet BOTH>;

        if r2 != $r20 goto label11;

     label10:
        $r15 = r1[1];

        if $r15 == null goto label11;

        $r18 = r1[1];

        virtualinvoke r5.<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)>($r18);

     label11:
        $r14 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet PADDING>;

        if r2 == $r14 goto label12;

        $r19 = <javax.crypto.Cipher$NeedToSet: javax.crypto.Cipher$NeedToSet BOTH>;

        if r2 != $r19 goto label13;

     label12:
        $r17 = r1[2];

        if $r17 == null goto label13;

        $r16 = r1[2];

        virtualinvoke r5.<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)>($r16);

     label13:
        return r4;

     label14:
        $r22 := @caughtexception;

        goto label16;

     label15:
        $r21 := @caughtexception;

     label16:
        return null;

        catch java.security.NoSuchAlgorithmException from label01 to label02 with label14;
        catch java.security.NoSuchAlgorithmException from label03 to label04 with label14;
        catch java.security.NoSuchAlgorithmException from label05 to label06 with label14;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label14;
        catch java.security.NoSuchAlgorithmException from label09 to label13 with label14;
        catch javax.crypto.NoSuchPaddingException from label01 to label02 with label15;
        catch javax.crypto.NoSuchPaddingException from label03 to label04 with label15;
        catch javax.crypto.NoSuchPaddingException from label05 to label06 with label15;
        catch javax.crypto.NoSuchPaddingException from label07 to label08 with label15;
        catch javax.crypto.NoSuchPaddingException from label09 to label13 with label15;
    }

    private static boolean matchAttribute(java.security.Provider$Service, java.lang.String, java.lang.String)
    {
        java.security.Provider$Service r0;
        java.lang.String r1, r2, r3, r4, $r7;
        java.util.Locale $r5, $r6;
        boolean $z0;

        r0 := @parameter0: java.security.Provider$Service;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r0.<java.security.Provider$Service: java.lang.String getAttribute(java.lang.String)>(r1);

        if r3 != null goto label2;

        return 1;

     label2:
        $r5 = <java.util.Locale: java.util.Locale US>;

        r4 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r5);

        $r6 = <java.util.Locale: java.util.Locale US>;

        $r7 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r6);

        $z0 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>($r7);

        return $z0;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.Cipher r0;
        java.security.Provider $r2;

        r0 := @this: javax.crypto.Cipher;

        specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r2 = r0.<javax.crypto.Cipher: java.security.Provider provider>;

        return $r2;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.Cipher r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.Cipher;

        $r1 = r0.<javax.crypto.Cipher: java.lang.String transformation>;

        return $r1;
    }

    public final int getBlockSize()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        int $i0;

        r0 := @this: javax.crypto.Cipher;

        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i0 = virtualinvoke $r1.<javax.crypto.CipherSpi: int engineGetBlockSize()>();

        return $i0;
    }

    public final int getOutputSize(int)
    {
        javax.crypto.Cipher r0;
        int i0, $i1, $i2;
        javax.crypto.CipherSpi $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        $i1 = r0.<javax.crypto.Cipher: int mode>;

        if $i1 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher has not yet been initialized");

        throw $r2;

     label1:
        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i2 = virtualinvoke $r1.<javax.crypto.CipherSpi: int engineGetOutputSize(int)>(i0);

        return $i2;
    }

    public final byte[] getIV()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        byte[] $r2;

        r0 := @this: javax.crypto.Cipher;

        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: byte[] engineGetIV()>();

        return $r2;
    }

    public final java.security.AlgorithmParameters getParameters()
    {
        javax.crypto.Cipher r0;
        javax.crypto.CipherSpi $r1;
        java.security.AlgorithmParameters $r2;

        r0 := @this: javax.crypto.Cipher;

        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()>();

        return $r2;
    }

    public final javax.crypto.ExemptionMechanism getExemptionMechanism()
    {
        javax.crypto.Cipher r0;

        r0 := @this: javax.crypto.Cipher;

        return null;
    }

    private void checkMode(int)
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.InvalidParameterException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 4 goto label1;

        if i0 == 3 goto label1;

        $r1 = new java.security.InvalidParameterException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid mode: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return;
    }

    public final void init(int, java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom $r2, $r3, $r4;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        $r2 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        if $r2 != null goto label1;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.Cipher: java.security.SecureRandom secureRandom> = $r4;

     label1:
        $r3 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)>(i0, r1, $r3);

        return;
    }

    public final void init(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        javax.crypto.CipherSpi $r3;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<javax.crypto.Cipher: void checkMode(int)>(i0);

        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r3.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i0, r1, r2);

        r0.<javax.crypto.Cipher: int mode> = i0;

        return;
    }

    public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom $r3, $r4, $r5;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r3 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        if $r3 != null goto label1;

        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.Cipher: java.security.SecureRandom secureRandom> = $r5;

     label1:
        $r4 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r2, $r4);

        return;
    }

    public final void init(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter3: java.security.SecureRandom;

        specialinvoke r0.<javax.crypto.Cipher: void checkMode(int)>(i0);

        $r4 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r4.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(i0, r1, r2, r3);

        r0.<javax.crypto.Cipher: int mode> = i0;

        return;
    }

    public final void init(int, java.security.Key, java.security.AlgorithmParameters) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom $r3, $r4, $r5;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        if $r3 != null goto label1;

        $r5 = new java.security.SecureRandom;

        specialinvoke $r5.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.Cipher: java.security.SecureRandom secureRandom> = $r5;

     label1:
        $r4 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(i0, r1, r2, $r4);

        return;
    }

    public final void init(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.Key r1;
        java.security.AlgorithmParameters r2;
        java.security.SecureRandom r3;
        javax.crypto.CipherSpi $r4;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.Key;

        r2 := @parameter2: java.security.AlgorithmParameters;

        r3 := @parameter3: java.security.SecureRandom;

        specialinvoke r0.<javax.crypto.Cipher: void checkMode(int)>(i0);

        $r4 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r4.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)>(i0, r1, r2, r3);

        r0.<javax.crypto.Cipher: int mode> = i0;

        return;
    }

    public final void init(int, java.security.cert.Certificate) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.cert.Certificate r1;
        java.security.SecureRandom $r2, $r3, $r4;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.cert.Certificate;

        $r2 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        if $r2 != null goto label1;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.Cipher: java.security.SecureRandom secureRandom> = $r4;

     label1:
        $r3 = <javax.crypto.Cipher: java.security.SecureRandom secureRandom>;

        virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)>(i0, r1, $r3);

        return;
    }

    public final void init(int, java.security.cert.Certificate, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        int i0;
        java.security.cert.Certificate r1;
        java.security.SecureRandom r2;
        java.util.Set r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Iterator r4;
        java.lang.String r5;
        javax.crypto.CipherSpi $r6;
        java.security.cert.X509Certificate $r7, $r8;
        java.security.InvalidKeyException $r9, $r10;
        java.lang.Object $r11;
        boolean[] r12;
        java.security.PublicKey r13;

        r0 := @this: javax.crypto.Cipher;

        i0 := @parameter0: int;

        r1 := @parameter1: java.security.cert.Certificate;

        r2 := @parameter2: java.security.SecureRandom;

        specialinvoke r0.<javax.crypto.Cipher: void checkMode(int)>(i0);

        $z1 = r1 instanceof java.security.cert.X509Certificate;

        if $z1 == 0 goto label5;

        $r7 = (java.security.cert.X509Certificate) r1;

        r3 = virtualinvoke $r7.<java.security.cert.X509Certificate: java.util.Set getCriticalExtensionOIDs()>();

        z0 = 0;

        if r3 == null goto label5;

        $z2 = interfaceinvoke r3.<java.util.Set: boolean isEmpty()>();

        if $z2 != 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r11;

        $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("2.5.29.15");

        if $z6 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        goto label1;

     label3:
        if z0 == 0 goto label5;

        $r8 = (java.security.cert.X509Certificate) r1;

        r12 = virtualinvoke $r8.<java.security.cert.X509Certificate: boolean[] getKeyUsage()>();

        if r12 == null goto label5;

        if i0 != 1 goto label4;

        $z5 = r12[3];

        if $z5 != 0 goto label4;

        $r10 = new java.security.InvalidKeyException;

        specialinvoke $r10.<java.security.InvalidKeyException: void <init>(java.lang.String)>("The public key in the certificate cannot be used for ENCRYPT_MODE");

        throw $r10;

     label4:
        if i0 != 3 goto label5;

        $z4 = r12[2];

        if $z4 != 0 goto label5;

        $r9 = new java.security.InvalidKeyException;

        specialinvoke $r9.<java.security.InvalidKeyException: void <init>(java.lang.String)>("The public key in the certificate cannot be used for WRAP_MODE");

        throw $r9;

     label5:
        r13 = virtualinvoke r1.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        $r6 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi(java.security.Key)>(r13);

        virtualinvoke $r6.<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)>(i0, r13, r2);

        r0.<javax.crypto.Cipher: int mode> = i0;

        return;
    }

    public final byte[] update(byte[])
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r3;
        int $i0, $i1, $i2, $i3;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i3 = r0.<javax.crypto.Cipher: int mode>;

        if $i3 == 2 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r4;

     label2:
        $i1 = lengthof r1;

        if $i1 != 0 goto label3;

        return null;

     label3:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i2 = lengthof r1;

        $r3 = virtualinvoke $r2.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>(r1, 0, $i2);

        return $r3;
    }

    public final byte[] update(byte[], int, int)
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 1 goto label1;

        $i5 = r0.<javax.crypto.Cipher: int mode>;

        if $i5 == 2 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r4;

     label2:
        $i3 = lengthof r1;

        staticinvoke <javax.crypto.Cipher: void checkInputOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = lengthof r1;

        if $i4 != 0 goto label3;

        return null;

     label3:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r3 = virtualinvoke $r2.<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)>(r1, i0, i1);

        return $r3;
    }

    private static void checkInputOffsetAndCount(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 | i2;

        if $i3 < 0 goto label1;

        if i1 > i0 goto label1;

        $i4 = i0 - i1;

        if $i4 >= i2 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input.length=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; inputOffset=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; inputLen=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        return;
    }

    public final int update(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, $i2;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        $i2 = virtualinvoke r0.<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)>(r1, i0, i1, r2, 0);

        return $i2;
    }

    public final int update(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        javax.crypto.CipherSpi $r3;
        java.lang.IllegalArgumentException $r4, $r9, $r10;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.IllegalStateException $r11;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        $i3 = r0.<javax.crypto.Cipher: int mode>;

        if $i3 == 1 goto label1;

        $i7 = r0.<javax.crypto.Cipher: int mode>;

        if $i7 == 2 goto label1;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>()>();

        throw $r11;

     label1:
        if r1 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r9;

     label2:
        if r2 != null goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("output == null");

        throw $r10;

     label3:
        if i2 >= 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("outputOffset < 0. outputOffset=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        $i4 = lengthof r1;

        staticinvoke <javax.crypto.Cipher: void checkInputOffsetAndCount(int,int,int)>($i4, i0, i1);

        $i5 = lengthof r1;

        if $i5 != 0 goto label5;

        return 0;

     label5:
        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i6 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);

        return $i6;
    }

    public final int update(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1, r2;
        int $i0, $i1, $i2;
        javax.crypto.CipherSpi $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 2 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if r1 != r2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == output");

        throw $r4;

     label2:
        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i1 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r1, r2);

        return $i1;
    }

    public final void updateAAD(byte[])
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        int $i0, $i1, $i2, $i3;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalStateException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r4;

     label1:
        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label2;

        $i3 = r0.<javax.crypto.Cipher: int mode>;

        if $i3 == 2 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label2:
        $i1 = lengthof r1;

        if $i1 != 0 goto label3;

        return;

     label3:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i2 = lengthof r1;

        virtualinvoke $r2.<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>(r1, 0, $i2);

        return;
    }

    public final void updateAAD(byte[], int, int)
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 1 goto label1;

        $i5 = r0.<javax.crypto.Cipher: int mode>;

        if $i5 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r3;

     label2:
        $i3 = lengthof r1;

        staticinvoke <javax.crypto.Cipher: void checkInputOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = lengthof r1;

        if $i4 != 0 goto label3;

        return;

     label3:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        virtualinvoke $r2.<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public final void updateAAD(java.nio.ByteBuffer)
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i1 = r0.<javax.crypto.Cipher: int mode>;

        if $i1 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cipher is not initialized");

        throw $r4;

     label1:
        if r1 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == null");

        throw $r3;

     label2:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        virtualinvoke $r2.<javax.crypto.CipherSpi: void engineUpdateAAD(java.nio.ByteBuffer)>(r1);

        return;
    }

    public final byte[] doFinal() throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        int $i0, $i1;
        javax.crypto.CipherSpi $r1;
        byte[] $r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: javax.crypto.Cipher;

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i1 = r0.<javax.crypto.Cipher: int mode>;

        if $i1 == 2 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label1:
        $r1 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r2 = virtualinvoke $r1.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(null, 0, 0);

        return $r2;
    }

    public final int doFinal(byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.ShortBufferException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        int i0, $i1, $i2, $i3;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<javax.crypto.Cipher: int mode>;

        if $i1 == 1 goto label1;

        $i3 = r0.<javax.crypto.Cipher: int mode>;

        if $i3 == 2 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        if i0 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("outputOffset < 0. outputOffset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i2 = virtualinvoke $r2.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(null, 0, 0, r1, i0);

        return $i2;
    }

    public final byte[] doFinal(byte[]) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r3;
        int $i0, $i1, $i2;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i1 = lengthof r1;

        $r3 = virtualinvoke $r2.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, 0, $i1);

        return $r3;
    }

    public final byte[] doFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, $r3;
        int i0, i1, $i2, $i3, $i4;
        javax.crypto.CipherSpi $r2;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 1 goto label1;

        $i4 = r0.<javax.crypto.Cipher: int mode>;

        if $i4 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $i3 = lengthof r1;

        staticinvoke <javax.crypto.Cipher: void checkInputOffsetAndCount(int,int,int)>($i3, i0, i1);

        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r3 = virtualinvoke $r2.<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)>(r1, i0, i1);

        return $r3;
    }

    public final int doFinal(byte[], int, int, byte[]) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, $i2;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        $i2 = virtualinvoke r0.<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)>(r1, i0, i1, r2, 0);

        return $i2;
    }

    public final int doFinal(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        byte[] r1, r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        javax.crypto.CipherSpi $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: byte[];

        i2 := @parameter4: int;

        $i3 = r0.<javax.crypto.Cipher: int mode>;

        if $i3 == 1 goto label1;

        $i6 = r0.<javax.crypto.Cipher: int mode>;

        if $i6 == 2 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $i4 = lengthof r1;

        staticinvoke <javax.crypto.Cipher: void checkInputOffsetAndCount(int,int,int)>($i4, i0, i1);

        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i5 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)>(r1, i0, i1, r2, i2);

        return $i5;
    }

    public final int doFinal(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        javax.crypto.Cipher r0;
        java.nio.ByteBuffer r1, r2;
        int $i0, $i1, $i2;
        javax.crypto.CipherSpi $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 1 goto label1;

        $i2 = r0.<javax.crypto.Cipher: int mode>;

        if $i2 == 2 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        if r1 != r2 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("input == output");

        throw $r4;

     label2:
        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $i1 = virtualinvoke $r3.<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)>(r1, r2);

        return $i1;
    }

    public final byte[] wrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        javax.crypto.Cipher r0;
        java.security.Key r1;
        int $i0;
        javax.crypto.CipherSpi $r2;
        byte[] $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: java.security.Key;

        $i0 = r0.<javax.crypto.Cipher: int mode>;

        if $i0 == 3 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>()>();

        throw $r4;

     label1:
        $r2 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r3 = virtualinvoke $r2.<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)>(r1);

        return $r3;
    }

    public final java.security.Key unwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        javax.crypto.Cipher r0;
        byte[] r1;
        java.lang.String r2;
        int i0, $i1;
        javax.crypto.CipherSpi $r3;
        java.security.Key $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.crypto.Cipher;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = r0.<javax.crypto.Cipher: int mode>;

        if $i1 == 4 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = specialinvoke r0.<javax.crypto.Cipher: javax.crypto.CipherSpi getSpi()>();

        $r4 = virtualinvoke $r3.<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)>(r1, r2, i0);

        return $r4;
    }

    public static final int getMaxAllowedKeyLength(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("transformation == null");

        throw $r2;

     label1:
        staticinvoke <javax.crypto.Cipher: java.lang.String[] checkTransformation(java.lang.String)>(r0);

        return 2147483647;
    }

    public static final java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("transformation == null");

        throw $r2;

     label1:
        staticinvoke <javax.crypto.Cipher: java.lang.String[] checkTransformation(java.lang.String)>(r0);

        return null;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <javax.crypto.Cipher: java.lang.String ATTRIBUTE_MODES> = "SupportedModes";

        <javax.crypto.Cipher: java.lang.String ATTRIBUTE_PADDINGS> = "SupportedPaddings";

        <javax.crypto.Cipher: java.lang.String SERVICE> = "Cipher";

        <javax.crypto.Cipher: int WRAP_MODE> = 3;

        <javax.crypto.Cipher: int UNWRAP_MODE> = 4;

        <javax.crypto.Cipher: int SECRET_KEY> = 3;

        <javax.crypto.Cipher: int PUBLIC_KEY> = 1;

        <javax.crypto.Cipher: int PRIVATE_KEY> = 2;

        <javax.crypto.Cipher: int ENCRYPT_MODE> = 1;

        <javax.crypto.Cipher: int DECRYPT_MODE> = 2;

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("Cipher");

        <javax.crypto.Cipher: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }
}
