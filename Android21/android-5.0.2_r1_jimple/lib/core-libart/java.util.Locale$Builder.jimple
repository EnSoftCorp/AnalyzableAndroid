public final class java.util.Locale$Builder extends java.lang.Object
{
    private java.lang.String language;
    private java.lang.String region;
    private java.lang.String variant;
    private java.lang.String script;
    private final java.util.Set attributes;
    private final java.util.Map keywords;
    private final java.util.Map extensions;

    public void <init>()
    {
        java.util.Locale$Builder r0;
        java.util.TreeSet $r2;
        java.util.TreeMap $r3, $r4;

        r0 := @this: java.util.Locale$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Locale$Builder: java.lang.String script> = "";

        r0.<java.util.Locale$Builder: java.lang.String variant> = "";

        r0.<java.util.Locale$Builder: java.lang.String region> = "";

        r0.<java.util.Locale$Builder: java.lang.String language> = "";

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        r0.<java.util.Locale$Builder: java.util.Set attributes> = $r2;

        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        r0.<java.util.Locale$Builder: java.util.Map keywords> = $r3;

        $r4 = new java.util.TreeMap;

        specialinvoke $r4.<java.util.TreeMap: void <init>()>();

        r0.<java.util.Locale$Builder: java.util.Map extensions> = $r4;

        return;
    }

    public java.util.Locale$Builder setLanguage(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, $r2;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateLanguage(java.lang.String,boolean)>(r1, 1);

        r0.<java.util.Locale$Builder: java.lang.String language> = $r2;

        return r0;
    }

    private static java.lang.String normalizeAndValidateLanguage(java.lang.String, boolean)
    {
        java.lang.String r0, r1, $r7;
        boolean z0, $z1, $z2;
        java.util.Locale $r2;
        java.util.IllformedLocaleException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return "";

     label2:
        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z2 = staticinvoke <java.util.Locale: boolean access$000(java.lang.String,int,int)>(r1, 2, 3);

        if $z2 != 0 goto label4;

        if z0 == 0 goto label3;

        $r3 = new java.util.IllformedLocaleException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid language: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        return "und";

     label4:
        return r1;
    }

    public java.util.Locale$Builder setLanguageTag(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, $r9;
        java.util.Locale r2;
        boolean $z0;
        java.util.IllformedLocaleException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder clear()>();

        return r0;

     label2:
        r2 = staticinvoke <java.util.Locale: java.util.Locale access$100(java.lang.String,boolean)>(r1, 1);

        if r2 != null goto label3;

        $r5 = new java.util.IllformedLocaleException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid languageTag: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder setLocale(java.util.Locale)>(r2);

        return r0;
    }

    public java.util.Locale$Builder setRegion(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, $r2;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateRegion(java.lang.String,boolean)>(r1, 1);

        r0.<java.util.Locale$Builder: java.lang.String region> = $r2;

        return r0;
    }

    private static java.lang.String normalizeAndValidateRegion(java.lang.String, boolean)
    {
        java.lang.String r0, r1, $r7;
        boolean z0, $z1, $z2, $z3;
        java.util.Locale $r2;
        java.util.IllformedLocaleException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return "";

     label2:
        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r2);

        $z2 = staticinvoke <java.util.Locale: boolean access$000(java.lang.String,int,int)>(r1, 2, 2);

        if $z2 != 0 goto label4;

        $z3 = staticinvoke <java.util.Locale: boolean access$200(java.lang.String)>(r1);

        if $z3 != 0 goto label4;

        if z0 == 0 goto label3;

        $r3 = new java.util.IllformedLocaleException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid region: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label3:
        return "";

     label4:
        return r1;
    }

    public java.util.Locale$Builder setVariant(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, $r2;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateVariant(java.lang.String)>(r1);

        r0.<java.util.Locale$Builder: java.lang.String variant> = $r2;

        return r0;
    }

    private static java.lang.String normalizeAndValidateVariant(java.lang.String)
    {
        java.lang.String r0, r1, r4, $r9;
        java.lang.String[] r2, r3;
        int i0, i1;
        boolean $z0, $z1;
        java.util.IllformedLocaleException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return "";

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(45, 95);

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("_");

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r4 = r3[i1];

        $z1 = staticinvoke <java.util.Locale$Builder: boolean isValidVariantSubtag(java.lang.String)>(r4);

        if $z1 != 0 goto label4;

        $r5 = new java.util.IllformedLocaleException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid variant: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return r1;
    }

    private static boolean isValidVariantSubtag(java.lang.String)
    {
        java.lang.String r0;
        char c0;
        int $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 < 5 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 > 8 goto label1;

        $z1 = staticinvoke <java.util.Locale: boolean access$300(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 4 goto label2;

        c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c0 < 48 goto label2;

        if c0 > 57 goto label2;

        $z0 = staticinvoke <java.util.Locale: boolean access$300(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.util.Locale$Builder setScript(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, $r2;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateScript(java.lang.String,boolean)>(r1, 1);

        r0.<java.util.Locale$Builder: java.lang.String script> = $r2;

        return r0;
    }

    private static java.lang.String normalizeAndValidateScript(java.lang.String, boolean)
    {
        java.lang.String r0, $r1, $r6;
        boolean z0, $z1, $z2;
        java.util.IllformedLocaleException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        return "";

     label2:
        $z2 = staticinvoke <java.util.Locale: boolean access$000(java.lang.String,int,int)>(r0, 4, 4);

        if $z2 != 0 goto label4;

        if z0 == 0 goto label3;

        $r2 = new java.util.IllformedLocaleException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid script: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        return "";

     label4:
        $r1 = staticinvoke <java.util.Locale: java.lang.String access$400(java.lang.String)>(r0);

        return $r1;
    }

    public java.util.Locale$Builder setLocale(java.util.Locale)
    {
        java.util.Locale$Builder r0;
        java.util.Locale r1;
        java.lang.String r2, r3, r4, $r6, $r8, $r10, $r12;
        java.util.IllformedLocaleException r5, $r23;
        java.util.Map $r13, $r14, $r15, $r16, $r17, $r19;
        java.util.Set $r18, $r20, $r21;
        java.lang.NullPointerException $r22;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.util.Locale;

        if r1 != null goto label1;

        $r22 = new java.lang.NullPointerException;

        specialinvoke $r22.<java.lang.NullPointerException: void <init>(java.lang.String)>("locale == null");

        throw $r22;

     label1:
        r2 = r0.<java.util.Locale$Builder: java.lang.String language>;

        r3 = r0.<java.util.Locale$Builder: java.lang.String region>;

        r4 = r0.<java.util.Locale$Builder: java.lang.String variant>;

     label2:
        $r6 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder setLanguage(java.lang.String)>($r6);

        $r8 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder setRegion(java.lang.String)>($r8);

        $r10 = virtualinvoke r1.<java.util.Locale: java.lang.String getVariant()>();

        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder setVariant(java.lang.String)>($r10);

     label3:
        goto label5;

     label4:
        $r23 := @caughtexception;

        r5 = $r23;

        r0.<java.util.Locale$Builder: java.lang.String language> = r2;

        r0.<java.util.Locale$Builder: java.lang.String region> = r3;

        r0.<java.util.Locale$Builder: java.lang.String variant> = r4;

        throw r5;

     label5:
        $r12 = virtualinvoke r1.<java.util.Locale: java.lang.String getScript()>();

        r0.<java.util.Locale$Builder: java.lang.String script> = $r12;

        $r13 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        interfaceinvoke $r13.<java.util.Map: void clear()>();

        $r14 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        $r15 = staticinvoke <java.util.Locale: java.util.Map access$500(java.util.Locale)>(r1);

        interfaceinvoke $r14.<java.util.Map: void putAll(java.util.Map)>($r15);

        $r17 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        interfaceinvoke $r17.<java.util.Map: void clear()>();

        $r16 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        $r19 = staticinvoke <java.util.Locale: java.util.Map access$600(java.util.Locale)>(r1);

        interfaceinvoke $r16.<java.util.Map: void putAll(java.util.Map)>($r19);

        $r18 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        interfaceinvoke $r18.<java.util.Set: void clear()>();

        $r21 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        $r20 = staticinvoke <java.util.Locale: java.util.Set access$700(java.util.Locale)>(r1);

        interfaceinvoke $r21.<java.util.Set: boolean addAll(java.util.Collection)>($r20);

        return r0;

        catch java.util.IllformedLocaleException from label2 to label3 with label4;
    }

    public java.util.Locale$Builder addUnicodeLocaleAttribute(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, r2, $r9;
        java.util.Locale $r3;
        boolean $z0;
        java.util.Set $r4;
        java.util.IllformedLocaleException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("attribute == null");

        throw $r10;

     label1:
        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z0 = staticinvoke <java.util.Locale: boolean access$800(java.lang.String,int,int)>(r2, 3, 8);

        if $z0 != 0 goto label2;

        $r5 = new java.util.IllformedLocaleException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid locale attribute: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r4 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r2);

        return r0;
    }

    public java.util.Locale$Builder removeUnicodeLocaleAttribute(java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, r2, $r9;
        java.util.Locale $r3;
        boolean $z0;
        java.util.Set $r4;
        java.util.IllformedLocaleException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.NullPointerException $r10;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("attribute == null");

        throw $r10;

     label1:
        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r3);

        $z0 = staticinvoke <java.util.Locale: boolean access$800(java.lang.String,int,int)>(r2, 3, 8);

        if $z0 != 0 goto label2;

        $r5 = new java.util.IllformedLocaleException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid locale attribute: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label2:
        $r4 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return r0;
    }

    public java.util.Locale$Builder setExtension(char, java.lang.String)
    {
        java.util.Locale$Builder r0;
        char c0;
        java.lang.String r1, r2, r5, $r10, $r22;
        java.lang.String[] r3, r4;
        byte b1, $b4;
        int i2, i3;
        java.util.Map $r6, $r12, $r13, $r17;
        java.lang.Character $r7, $r11;
        boolean $z0, $z1;
        java.util.Locale $r9;
        java.util.Set $r15, $r16;
        java.lang.StringBuilder $r18, $r20, $r21;
        java.util.IllformedLocaleException $r19;

        r0 := @this: java.util.Locale$Builder;

        c0 := @parameter0: char;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r6 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r7);

        return r0;

     label2:
        $r9 = <java.util.Locale: java.util.Locale ROOT>;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        r2 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        if c0 != 120 goto label3;

        $b4 = 1;

        goto label4;

     label3:
        $b4 = 2;

     label4:
        b1 = $b4;

        r4 = r3;

        i2 = lengthof r4;

        i3 = 0;

     label5:
        if i3 >= i2 goto label7;

        r5 = r4[i3];

        $z1 = staticinvoke <java.util.Locale: boolean access$800(java.lang.String,int,int)>(r5, b1, 8);

        if $z1 != 0 goto label6;

        $r19 = new java.util.IllformedLocaleException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid private use extension : ");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r22);

        throw $r19;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        if c0 != 117 goto label8;

        $r13 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        interfaceinvoke $r13.<java.util.Map: void clear()>();

        $r16 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        interfaceinvoke $r16.<java.util.Set: void clear()>();

        $r17 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        $r15 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        staticinvoke <java.util.Locale: void parseUnicodeExtension(java.lang.String[],java.util.Map,java.util.Set)>(r3, $r17, $r15);

        goto label9;

     label8:
        $r12 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r2);

     label9:
        return r0;
    }

    public java.util.Locale$Builder clearExtensions()
    {
        java.util.Locale$Builder r0;
        java.util.Map $r1, $r3;
        java.util.Set $r2;

        r0 := @this: java.util.Locale$Builder;

        $r1 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        interfaceinvoke $r2.<java.util.Set: void clear()>();

        $r3 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        return r0;
    }

    public java.util.Locale$Builder setUnicodeLocaleKeyword(java.lang.String, java.lang.String)
    {
        java.util.Locale$Builder r0;
        java.lang.String r1, r2, r3, r4, $r10, $r12, $r20;
        java.util.Locale $r5, $r11;
        int $i0;
        java.util.IllformedLocaleException $r6, $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r15, $r17, $r18;
        boolean $z0, $z1;
        java.util.Map $r14, $r19, $r22;
        java.lang.NullPointerException $r23;

        r0 := @this: java.util.Locale$Builder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r23;

     label1:
        if r2 != null goto label2;

        $r19 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        if $r19 == null goto label2;

        $r22 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return r0;

     label2:
        $r5 = <java.util.Locale: java.util.Locale ROOT>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r5);

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 2 goto label3;

        $z0 = staticinvoke <java.util.Locale: boolean access$300(java.lang.String)>(r3);

        if $z0 != 0 goto label4;

     label3:
        $r6 = new java.util.IllformedLocaleException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid unicode locale keyword: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label4:
        $r11 = <java.util.Locale: java.util.Locale ROOT>;

        $r12 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r11);

        r4 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("_", "-");

        $z1 = staticinvoke <java.util.Locale: boolean access$900(java.lang.String)>(r4);

        if $z1 != 0 goto label5;

        $r16 = new java.util.IllformedLocaleException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid unicode locale type: ");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label5:
        $r14 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        return r0;
    }

    public java.util.Locale$Builder clear()
    {
        java.util.Locale$Builder r0;

        r0 := @this: java.util.Locale$Builder;

        virtualinvoke r0.<java.util.Locale$Builder: java.util.Locale$Builder clearExtensions()>();

        r0.<java.util.Locale$Builder: java.lang.String script> = "";

        r0.<java.util.Locale$Builder: java.lang.String variant> = "";

        r0.<java.util.Locale$Builder: java.lang.String region> = "";

        r0.<java.util.Locale$Builder: java.lang.String language> = "";

        return r0;
    }

    public java.util.Locale build()
    {
        java.util.Locale$Builder r0;
        java.util.Locale $r1;
        java.util.Map $r2, $r3;
        java.util.Set $r4;
        java.lang.String $r5, $r6, $r7, $r8;

        r0 := @this: java.util.Locale$Builder;

        $r1 = new java.util.Locale;

        $r8 = r0.<java.util.Locale$Builder: java.lang.String language>;

        $r7 = r0.<java.util.Locale$Builder: java.lang.String region>;

        $r6 = r0.<java.util.Locale$Builder: java.lang.String variant>;

        $r5 = r0.<java.util.Locale$Builder: java.lang.String script>;

        $r4 = r0.<java.util.Locale$Builder: java.util.Set attributes>;

        $r3 = r0.<java.util.Locale$Builder: java.util.Map keywords>;

        $r2 = r0.<java.util.Locale$Builder: java.util.Map extensions>;

        specialinvoke $r1.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>($r8, $r7, $r6, $r5, $r4, $r3, $r2, 1);

        return $r1;
    }

    static java.lang.String access$1000(java.lang.String, boolean)
    {
        java.lang.String r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateRegion(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    static java.lang.String access$1100(java.lang.String, boolean)
    {
        java.lang.String r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateLanguage(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    static java.lang.String access$1200(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateVariant(java.lang.String)>(r0);

        return $r1;
    }

    static boolean access$1300(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.util.Locale$Builder: boolean isValidVariantSubtag(java.lang.String)>(r0);

        return $z0;
    }

    static java.lang.String access$1400(java.lang.String, boolean)
    {
        java.lang.String r0, $r1;
        boolean z0;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.util.Locale$Builder: java.lang.String normalizeAndValidateScript(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }
}
