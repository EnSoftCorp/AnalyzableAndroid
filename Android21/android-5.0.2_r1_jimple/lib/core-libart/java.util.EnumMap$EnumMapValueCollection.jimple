class java.util.EnumMap$EnumMapValueCollection extends java.util.AbstractCollection
{
    private final java.util.EnumMap enumMap;

    void <init>(java.util.EnumMap)
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.util.EnumMap r1;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        r1 := @parameter0: java.util.EnumMap;

        specialinvoke r0.<java.util.AbstractCollection: void <init>()>();

        r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap> = r1;

        return;
    }

    public void clear()
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.util.EnumMap $r1;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        $r1 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        virtualinvoke $r1.<java.util.EnumMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.lang.Object r1;
        java.util.EnumMap $r2;
        boolean $z0;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $z0 = virtualinvoke $r2.<java.util.EnumMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.util.EnumMap$EnumMapIterator $r1;
        java.util.EnumMap$EnumMapValueCollection$1 $r2;
        java.util.EnumMap $r3;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        $r1 = new java.util.EnumMap$EnumMapIterator;

        $r2 = new java.util.EnumMap$EnumMapValueCollection$1;

        specialinvoke $r2.<java.util.EnumMap$EnumMapValueCollection$1: void <init>(java.util.EnumMap$EnumMapValueCollection)>(r0);

        $r3 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        specialinvoke $r1.<java.util.EnumMap$EnumMapIterator: void <init>(java.util.MapEntry$Type,java.util.EnumMap)>($r2, $r3);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.lang.Object r1, $r7, $r19;
        int i0, $i1, $i2, i3;
        java.util.EnumMap $r2, $r3, $r5, $r8, $r11, $r12, $r14, $r17, $r18, $r23;
        boolean[] $r4, $r15;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r6, $r16;
        java.lang.Enum[] $r9, $r21;
        java.lang.Enum $r10, $r20;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label4;

        i0 = 0;

     label1:
        $r12 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $i2 = $r12.<java.util.EnumMap: int enumSize>;

        if i0 >= $i2 goto label3;

        $r14 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r15 = $r14.<java.util.EnumMap: boolean[] hasMapping>;

        $z2 = $r15[i0];

        if $z2 == 0 goto label2;

        $r17 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r16 = $r17.<java.util.EnumMap: java.lang.Object[] values>;

        $r19 = $r16[i0];

        if $r19 != null goto label2;

        $r23 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r18 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r21 = $r18.<java.util.EnumMap: java.lang.Enum[] keys>;

        $r20 = $r21[i0];

        virtualinvoke $r23.<java.util.EnumMap: java.lang.Object remove(java.lang.Object)>($r20);

        return 1;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i3 = 0;

     label5:
        $r2 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $i1 = $r2.<java.util.EnumMap: int enumSize>;

        if i3 >= $i1 goto label7;

        $r3 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r4 = $r3.<java.util.EnumMap: boolean[] hasMapping>;

        $z0 = $r4[i3];

        if $z0 == 0 goto label6;

        $r5 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r6 = $r5.<java.util.EnumMap: java.lang.Object[] values>;

        $r7 = $r6[i3];

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label6;

        $r11 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r8 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $r9 = $r8.<java.util.EnumMap: java.lang.Enum[] keys>;

        $r10 = $r9[i3];

        virtualinvoke $r11.<java.util.EnumMap: java.lang.Object remove(java.lang.Object)>($r10);

        return 1;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 0;
    }

    public int size()
    {
        java.util.EnumMap$EnumMapValueCollection r0;
        java.util.EnumMap $r1;
        int $i0;

        r0 := @this: java.util.EnumMap$EnumMapValueCollection;

        $r1 = r0.<java.util.EnumMap$EnumMapValueCollection: java.util.EnumMap enumMap>;

        $i0 = virtualinvoke $r1.<java.util.EnumMap: int size()>();

        return $i0;
    }
}
