public class java.io.StreamTokenizer extends java.lang.Object
{
    public double nval;
    public java.lang.String sval;
    public static final int TT_EOF;
    public static final int TT_EOL;
    public static final int TT_NUMBER;
    public static final int TT_WORD;
    private static final int TT_UNKNOWN;
    public int ttype;
    private byte[] tokenTypes;
    private static final byte TOKEN_COMMENT;
    private static final byte TOKEN_QUOTE;
    private static final byte TOKEN_WHITE;
    private static final byte TOKEN_WORD;
    private static final byte TOKEN_DIGIT;
    private int lineNumber;
    private boolean forceLowercase;
    private boolean isEOLSignificant;
    private boolean slashStarComments;
    private boolean slashSlashComments;
    private boolean pushBackToken;
    private boolean lastCr;
    private java.io.InputStream inStream;
    private java.io.Reader inReader;
    private int peekChar;

    private void <init>()
    {
        java.io.StreamTokenizer r0;
        byte[] $r1;

        r0 := @this: java.io.StreamTokenizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.io.StreamTokenizer: int ttype> = -4;

        $r1 = newarray (byte)[256];

        r0.<java.io.StreamTokenizer: byte[] tokenTypes> = $r1;

        r0.<java.io.StreamTokenizer: int lineNumber> = 1;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(65, 90);

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(97, 122);

        virtualinvoke r0.<java.io.StreamTokenizer: void wordChars(int,int)>(160, 255);

        virtualinvoke r0.<java.io.StreamTokenizer: void whitespaceChars(int,int)>(0, 32);

        virtualinvoke r0.<java.io.StreamTokenizer: void commentChar(int)>(47);

        virtualinvoke r0.<java.io.StreamTokenizer: void quoteChar(int)>(34);

        virtualinvoke r0.<java.io.StreamTokenizer: void quoteChar(int)>(39);

        virtualinvoke r0.<java.io.StreamTokenizer: void parseNumbers()>();

        return;
    }

    public void <init>(java.io.InputStream)
    {
        java.io.StreamTokenizer r0;
        java.io.InputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.StreamTokenizer;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.io.StreamTokenizer: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("is == null");

        throw $r2;

     label1:
        r0.<java.io.StreamTokenizer: java.io.InputStream inStream> = r1;

        return;
    }

    public void <init>(java.io.Reader)
    {
        java.io.StreamTokenizer r0;
        java.io.Reader r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.StreamTokenizer;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.io.StreamTokenizer: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("r == null");

        throw $r2;

     label1:
        r0.<java.io.StreamTokenizer: java.io.Reader inReader> = r1;

        return;
    }

    public void commentChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 1;

     label1:
        return;
    }

    public void eolIsSignificant(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean isEOLSignificant> = z0;

        return;
    }

    public int lineno()
    {
        java.io.StreamTokenizer r0;
        int $i0;

        r0 := @this: java.io.StreamTokenizer;

        $i0 = r0.<java.io.StreamTokenizer: int lineNumber>;

        return $i0;
    }

    public void lowerCaseMode(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean forceLowercase> = z0;

        return;
    }

    public int nextToken() throws java.io.IOException
    {
        java.io.StreamTokenizer r0;
        int i0, i2, i3, $i4, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i23, $i25, $i26, $i28, $i29, $i36, $i37, $i41, $i42, $i46, $i47, $i48, $i49, $i50, i51, i52, i53, i54, i55, i56, i57;
        byte b1, $b5, $b6, $b7, $b32, $b33, $b40, $b43;
        java.lang.StringBuilder r1, $r5, $r8, $r17, r21, r22;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        byte[] $r3, $r16, $r18;
        java.lang.String $r4, $r9, $r11, $r13, $r15;
        char $c22, $c24, $c27, $c31;
        java.util.Locale $r12;
        java.lang.Double $r19;
        double $d0;
        java.lang.NumberFormatException $r20;

        r0 := @this: java.io.StreamTokenizer;

        $z2 = r0.<java.io.StreamTokenizer: boolean pushBackToken>;

        if $z2 == 0 goto label01;

        r0.<java.io.StreamTokenizer: boolean pushBackToken> = 0;

        $i50 = r0.<java.io.StreamTokenizer: int ttype>;

        if $i50 == -4 goto label01;

        $i48 = r0.<java.io.StreamTokenizer: int ttype>;

        return $i48;

     label01:
        r0.<java.io.StreamTokenizer: java.lang.String sval> = null;

        $i4 = r0.<java.io.StreamTokenizer: int peekChar>;

        if $i4 != -2 goto label02;

        $i49 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label03;

     label02:
        $i49 = r0.<java.io.StreamTokenizer: int peekChar>;

     label03:
        i0 = $i49;

        $z3 = r0.<java.io.StreamTokenizer: boolean lastCr>;

        if $z3 == 0 goto label04;

        if i0 != 10 goto label04;

        r0.<java.io.StreamTokenizer: boolean lastCr> = 0;

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label04:
        if i0 != -1 goto label05;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label05:
        if i0 <= 255 goto label06;

        $b43 = 8;

        goto label07;

     label06:
        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b43 = $r3[i0];

     label07:
        b1 = $b43;

     label08:
        $b5 = b1 & 4;

        if $b5 == 0 goto label17;

        if i0 != 13 goto label10;

        $i37 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i46 = $i37 + 1;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i46;

        $z11 = r0.<java.io.StreamTokenizer: boolean isEOLSignificant>;

        if $z11 == 0 goto label09;

        r0.<java.io.StreamTokenizer: boolean lastCr> = 1;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        r0.<java.io.StreamTokenizer: int ttype> = 10;

        return 10;

     label09:
        $i47 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        i0 = $i47;

        if $i47 != 10 goto label13;

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label13;

     label10:
        if i0 != 10 goto label12;

        $i42 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i41 = $i42 + 1;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i41;

        $z10 = r0.<java.io.StreamTokenizer: boolean isEOLSignificant>;

        if $z10 == 0 goto label11;

        r0.<java.io.StreamTokenizer: int peekChar> = -2;

        r0.<java.io.StreamTokenizer: int ttype> = 10;

        return 10;

     label11:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        goto label13;

     label12:
        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label13:
        if i0 != -1 goto label14;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label14:
        if i0 <= 255 goto label15;

        $b40 = 8;

        goto label16;

     label15:
        $r18 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b40 = $r18[i0];

     label16:
        b1 = $b40;

        goto label08;

     label17:
        $b6 = b1 & 16;

        if $b6 == 0 goto label28;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(int)>(20);

        r1 = $r17;

        z0 = 0;

        if i0 != 45 goto label18;

        $z9 = 1;

        goto label19;

     label18:
        $z9 = 0;

     label19:
        z1 = $z9;

     label20:
        if i0 != 46 goto label21;

        z0 = 1;

     label21:
        $c31 = (char) i0;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c31);

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 < 48 goto label22;

        if i0 <= 57 goto label20;

     label22:
        if z0 != 0 goto label23;

        if i0 == 46 goto label20;

        goto label23;

     label23:
        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        if z1 == 0 goto label24;

        $i36 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i36 != 1 goto label24;

        r0.<java.io.StreamTokenizer: int ttype> = 45;

        return 45;

     label24:
        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r15);

        $d0 = virtualinvoke $r19.<java.lang.Double: double doubleValue()>();

        r0.<java.io.StreamTokenizer: double nval> = $d0;

     label25:
        goto label27;

     label26:
        $r20 := @caughtexception;

        r0.<java.io.StreamTokenizer: double nval> = 0.0;

     label27:
        r0.<java.io.StreamTokenizer: int ttype> = -2;

        return -2;

     label28:
        $b7 = b1 & 8;

        if $b7 == 0 goto label32;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(int)>(20);

        r21 = $r8;

     label29:
        $c27 = (char) i0;

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c27);

        i0 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i0 == -1 goto label30;

        if i0 >= 256 goto label29;

        $r16 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b32 = $r16[i0];

        $b33 = $b32 & 24;

        if $b33 != 0 goto label29;

        goto label30;

     label30:
        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        $r9 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r9;

        $z8 = r0.<java.io.StreamTokenizer: boolean forceLowercase>;

        if $z8 == 0 goto label31;

        $r13 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        $r12 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r11 = virtualinvoke $r13.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r12);

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r11;

     label31:
        r0.<java.io.StreamTokenizer: int ttype> = -3;

        return -3;

     label32:
        if b1 != 2 goto label54;

        i51 = i0;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r22 = $r5;

        i52 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label33:
        if i52 < 0 goto label52;

        if i52 == i51 goto label52;

        if i52 == 13 goto label52;

        if i52 == 10 goto label52;

        z12 = 1;

        if i52 != 92 goto label50;

        i2 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i2 > 55 goto label41;

        if i2 < 48 goto label41;

        i3 = i2 - 48;

        i53 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i53 > 55 goto label34;

        if i53 >= 48 goto label35;

     label34:
        z12 = 0;

        goto label38;

     label35:
        $i25 = i3 * 8;

        $i26 = i53 - 48;

        i3 = $i25 + $i26;

        i53 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i3 > 31 goto label36;

        if i53 > 55 goto label36;

        if i53 >= 48 goto label37;

     label36:
        z12 = 0;

        goto label38;

     label37:
        $i28 = i3 * 8;

        $i29 = i53 - 48;

        i3 = $i28 + $i29;

     label38:
        if z12 != 0 goto label39;

        $c24 = (char) i3;

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c24);

        i52 = i53;

        goto label40;

     label39:
        i52 = i3;

     label40:
        goto label50;

     label41:
        tableswitch(i2)
        {
            case 97: goto label42;
            case 98: goto label43;
            case 99: goto label49;
            case 100: goto label49;
            case 101: goto label49;
            case 102: goto label44;
            case 103: goto label49;
            case 104: goto label49;
            case 105: goto label49;
            case 106: goto label49;
            case 107: goto label49;
            case 108: goto label49;
            case 109: goto label49;
            case 110: goto label45;
            case 111: goto label49;
            case 112: goto label49;
            case 113: goto label49;
            case 114: goto label46;
            case 115: goto label49;
            case 116: goto label47;
            case 117: goto label49;
            case 118: goto label48;
            default: goto label49;
        };

     label42:
        i52 = 7;

        goto label50;

     label43:
        i52 = 8;

        goto label50;

     label44:
        i52 = 12;

        goto label50;

     label45:
        i52 = 10;

        goto label50;

     label46:
        i52 = 13;

        goto label50;

     label47:
        i52 = 9;

        goto label50;

     label48:
        i52 = 11;

        goto label50;

     label49:
        i52 = i2;

     label50:
        if z12 == 0 goto label51;

        $c22 = (char) i52;

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c22);

        i52 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label51:
        goto label33;

     label52:
        if i52 != i51 goto label53;

        i52 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label53:
        r0.<java.io.StreamTokenizer: int peekChar> = i52;

        r0.<java.io.StreamTokenizer: int ttype> = i51;

        $r4 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<java.io.StreamTokenizer: java.lang.String sval> = $r4;

        $i23 = r0.<java.io.StreamTokenizer: int ttype>;

        return $i23;

     label54:
        if i0 != 47 goto label65;

        $z4 = r0.<java.io.StreamTokenizer: boolean slashSlashComments>;

        if $z4 != 0 goto label55;

        $z7 = r0.<java.io.StreamTokenizer: boolean slashStarComments>;

        if $z7 == 0 goto label65;

     label55:
        $i12 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        i0 = $i12;

        if $i12 != 42 goto label61;

        $z6 = r0.<java.io.StreamTokenizer: boolean slashStarComments>;

        if $z6 == 0 goto label61;

        i54 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label56:
        i55 = i54;

        i54 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        if i55 != -1 goto label57;

        r0.<java.io.StreamTokenizer: int peekChar> = -1;

        r0.<java.io.StreamTokenizer: int ttype> = -1;

        return -1;

     label57:
        if i55 != 13 goto label59;

        if i54 != 10 goto label58;

        i54 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

     label58:
        $i20 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i21 = $i20 + 1;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i21;

        goto label56;

     label59:
        if i55 != 10 goto label60;

        $i18 = r0.<java.io.StreamTokenizer: int lineNumber>;

        $i17 = $i18 + 1;

        r0.<java.io.StreamTokenizer: int lineNumber> = $i17;

        goto label56;

     label60:
        if i55 != 42 goto label56;

        if i54 != 47 goto label56;

        $i16 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        r0.<java.io.StreamTokenizer: int peekChar> = $i16;

        $i15 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i15;

     label61:
        if i0 != 47 goto label64;

        $z5 = r0.<java.io.StreamTokenizer: boolean slashSlashComments>;

        if $z5 == 0 goto label64;

     label62:
        $i13 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        i56 = $i13;

        if $i13 < 0 goto label63;

        if i56 == 13 goto label63;

        if i56 == 10 goto label63;

        goto label62;

     label63:
        r0.<java.io.StreamTokenizer: int peekChar> = i56;

        $i14 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i14;

     label64:
        if b1 == 1 goto label65;

        r0.<java.io.StreamTokenizer: int peekChar> = i0;

        r0.<java.io.StreamTokenizer: int ttype> = 47;

        return 47;

     label65:
        if b1 != 1 goto label68;

     label66:
        $i8 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        i57 = $i8;

        if $i8 < 0 goto label67;

        if i57 == 13 goto label67;

        if i57 == 10 goto label67;

        goto label66;

     label67:
        r0.<java.io.StreamTokenizer: int peekChar> = i57;

        $i10 = virtualinvoke r0.<java.io.StreamTokenizer: int nextToken()>();

        return $i10;

     label68:
        $i9 = specialinvoke r0.<java.io.StreamTokenizer: int read()>();

        r0.<java.io.StreamTokenizer: int peekChar> = $i9;

        r0.<java.io.StreamTokenizer: int ttype> = i0;

        return i0;

        catch java.lang.NumberFormatException from label24 to label25 with label26;
    }

    public void ordinaryChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 0;

     label1:
        return;
    }

    public void ordinaryChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1, $r2, $r3;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i4 = lengthof $r3;

        i1 = $i4 - 1;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i2] = 0;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void parseNumbers()
    {
        java.io.StreamTokenizer r0;
        int i0;
        byte[] $r1, $r2, $r3;
        byte $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;

        r0 := @this: java.io.StreamTokenizer;

        i0 = 48;

     label1:
        if i0 > 57 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b7 = $r3[i0];

        $b8 = $b7 | 16;

        $b9 = (byte) $b8;

        $r3[i0] = $b9;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b1 = $r1[46];

        $b2 = $b1 | 16;

        $b3 = (byte) $b2;

        $r1[46] = $b3;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b4 = $r2[45];

        $b5 = $b4 | 16;

        $b6 = (byte) $b5;

        $r2[45] = $b6;

        return;
    }

    public void pushBack()
    {
        java.io.StreamTokenizer r0;

        r0 := @this: java.io.StreamTokenizer;

        r0.<java.io.StreamTokenizer: boolean pushBackToken> = 1;

        return;
    }

    public void quoteChar(int)
    {
        java.io.StreamTokenizer r0;
        int i0, $i1;
        byte[] $r1, $r2;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i0] = 2;

     label1:
        return;
    }

    private int read() throws java.io.IOException
    {
        java.io.StreamTokenizer r0;
        java.io.InputStream $r1, $r2;
        int $i0, $i1;
        java.io.Reader $r3;

        r0 := @this: java.io.StreamTokenizer;

        $r1 = r0.<java.io.StreamTokenizer: java.io.InputStream inStream>;

        if $r1 != null goto label1;

        $r3 = r0.<java.io.StreamTokenizer: java.io.Reader inReader>;

        $i1 = virtualinvoke $r3.<java.io.Reader: int read()>();

        return $i1;

     label1:
        $r2 = r0.<java.io.StreamTokenizer: java.io.InputStream inStream>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        return $i0;
    }

    public void resetSyntax()
    {
        java.io.StreamTokenizer r0;
        int i0;
        byte[] $r1;

        r0 := @this: java.io.StreamTokenizer;

        i0 = 0;

     label1:
        if i0 >= 256 goto label2;

        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r1[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void slashSlashComments(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean slashSlashComments> = z0;

        return;
    }

    public void slashStarComments(boolean)
    {
        java.io.StreamTokenizer r0;
        boolean z0;

        r0 := @this: java.io.StreamTokenizer;

        z0 := @parameter0: boolean;

        r0.<java.io.StreamTokenizer: boolean slashStarComments> = z0;

        return;
    }

    public java.lang.String toString()
    {
        java.io.StreamTokenizer r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r7, $r11, $r13;
        double $d0;
        byte $b4;
        byte[] $r15;
        char $c6;

        r0 := @this: java.io.StreamTokenizer;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Token[");

        $i0 = r0.<java.io.StreamTokenizer: int ttype>;

        lookupswitch($i0)
        {
            case -3: goto label4;
            case -2: goto label3;
            case -1: goto label1;
            case 10: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EOF");

        goto label8;

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EOL");

        goto label8;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("n=");

        $d0 = r0.<java.io.StreamTokenizer: double nval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        goto label8;

     label4:
        $r11 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        goto label8;

     label5:
        $i2 = r0.<java.io.StreamTokenizer: int ttype>;

        if $i2 == -4 goto label6;

        $r15 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = r0.<java.io.StreamTokenizer: int ttype>;

        $b4 = $r15[$i3];

        if $b4 != 2 goto label7;

     label6:
        $r13 = r0.<java.io.StreamTokenizer: java.lang.String sval>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        goto label8;

     label7:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $i5 = r0.<java.io.StreamTokenizer: int ttype>;

        $c6 = (char) $i5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

     label8:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], line ");

        $i1 = r0.<java.io.StreamTokenizer: int lineNumber>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public void whitespaceChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i4;
        byte[] $r1, $r2, $r3;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i4 = lengthof $r3;

        i1 = $i4 - 1;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $r2[i2] = 4;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public void wordChars(int, int)
    {
        java.io.StreamTokenizer r0;
        int i0, i1, i2, $i3, $i7;
        byte[] $r1, $r2, $r3;
        byte $b4, $b5, $b6;

        r0 := @this: java.io.StreamTokenizer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= 0 goto label1;

        i0 = 0;

     label1:
        $r1 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i3 = lengthof $r1;

        if i1 <= $i3 goto label2;

        $r3 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $i7 = lengthof $r3;

        i1 = $i7 - 1;

     label2:
        i2 = i0;

     label3:
        if i2 > i1 goto label4;

        $r2 = r0.<java.io.StreamTokenizer: byte[] tokenTypes>;

        $b4 = $r2[i2];

        $b5 = $b4 | 8;

        $b6 = (byte) $b5;

        $r2[i2] = $b6;

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    public static void <clinit>()
    {
        <java.io.StreamTokenizer: byte TOKEN_DIGIT> = 16;

        <java.io.StreamTokenizer: byte TOKEN_WORD> = 8;

        <java.io.StreamTokenizer: byte TOKEN_WHITE> = 4;

        <java.io.StreamTokenizer: byte TOKEN_QUOTE> = 2;

        <java.io.StreamTokenizer: byte TOKEN_COMMENT> = 1;

        <java.io.StreamTokenizer: int TT_UNKNOWN> = -4;

        <java.io.StreamTokenizer: int TT_WORD> = -3;

        <java.io.StreamTokenizer: int TT_NUMBER> = -2;

        <java.io.StreamTokenizer: int TT_EOL> = 10;

        <java.io.StreamTokenizer: int TT_EOF> = -1;

        return;
    }
}
