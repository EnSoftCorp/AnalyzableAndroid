class java.math.BitLevel extends java.lang.Object
{

    private void <init>()
    {
        java.math.BitLevel r0;

        r0 := @this: java.math.BitLevel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static int bitLength(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;
        int[] $r1;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i3 = r0.<java.math.BigInteger: int sign>;

        if $i3 != 0 goto label1;

        return 0;

     label1:
        $i4 = r0.<java.math.BigInteger: int numberLength>;

        i0 = $i4 << 5;

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i5 = r0.<java.math.BigInteger: int numberLength>;

        $i6 = $i5 - 1;

        i1 = $r1[$i6];

        $i7 = r0.<java.math.BigInteger: int sign>;

        if $i7 >= 0 goto label2;

        i2 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i9 = r0.<java.math.BigInteger: int numberLength>;

        $i10 = $i9 - 1;

        if i2 != $i10 goto label2;

        i1 = i1 + -1;

     label2:
        $i8 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i1);

        i11 = i0 - $i8;

        return i11;
    }

    static int bitCount(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17;
        int[] $r1, $r2, $r3;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i0 = 0;

        $i2 = r0.<java.math.BigInteger: int sign>;

        if $i2 != 0 goto label1;

        return 0;

     label1:
        i1 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        $i3 = r0.<java.math.BigInteger: int sign>;

        if $i3 <= 0 goto label3;

     label2:
        $i12 = r0.<java.math.BigInteger: int numberLength>;

        if i1 >= $i12 goto label6;

        $r3 = r0.<java.math.BigInteger: int[] digits>;

        $i14 = $r3[i1];

        $i15 = staticinvoke <java.lang.Integer: int bitCount(int)>($i14);

        i0 = i0 + $i15;

        i1 = i1 + 1;

        goto label2;

     label3:
        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i4 = $r1[i1];

        $i5 = neg $i4;

        $i6 = staticinvoke <java.lang.Integer: int bitCount(int)>($i5);

        i16 = i0 + $i6;

        i17 = i1 + 1;

     label4:
        $i7 = r0.<java.math.BigInteger: int numberLength>;

        if i17 >= $i7 goto label5;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i10 = $r2[i17];

        $i11 = $i10 ^ -1;

        $i13 = staticinvoke <java.lang.Integer: int bitCount(int)>($i11);

        i16 = i16 + $i13;

        i17 = i17 + 1;

        goto label4;

     label5:
        $i8 = r0.<java.math.BigInteger: int numberLength>;

        $i9 = $i8 << 5;

        i0 = $i9 - i16;

     label6:
        return i0;
    }

    static boolean testBit(java.math.BigInteger, int)
    {
        java.math.BigInteger r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;
        boolean $z0;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $r1 = r0.<java.math.BigInteger: int[] digits>;

        $i1 = i0 >> 5;

        $i4 = $r1[$i1];

        $i2 = i0 & 31;

        $i3 = 1 << $i2;

        $i5 = $i4 & $i3;

        if $i5 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean nonZeroDroppedBits(int, int[])
    {
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[] r0;
        boolean $z0;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        i1 = i0 >> 5;

        i2 = i0 & 31;

        i3 = 0;

     label1:
        if i3 >= i1 goto label2;

        $i7 = r0[i3];

        if $i7 != 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        if i3 != i1 goto label3;

        $i5 = r0[i3];

        $i4 = 32 - i2;

        $i6 = $i5 << $i4;

        if $i6 == 0 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    static void shiftLeftOneBit(int[], int[], int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i1 = 0;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i3 = r1[i2];

        $i4 = i3 << 1;

        $i5 = $i4 | i1;

        r0[i2] = $i5;

        i1 = i3 >>> 31;

        i2 = i2 + 1;

        goto label1;

     label2:
        if i1 == 0 goto label3;

        r0[i0] = i1;

     label3:
        return;
    }

    static java.math.BigInteger shiftLeftOneBit(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r3;
        int i0, i1, $i2;
        int[] r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i0 = r0.<java.math.BigInteger: int numberLength>;

        i1 = i0 + 1;

        r1 = newarray (int)[i1];

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        staticinvoke <java.math.BitLevel: void shiftLeftOneBit(int[],int[],int)>(r1, $r2, i0);

        $r3 = new java.math.BigInteger;

        $i2 = r0.<java.math.BigInteger: int sign>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>($i2, i1, r1);

        return $r3;
    }

    static java.math.BigInteger shiftRight(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3, $r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        int[] r1, $r2, $r4, $r5;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        i1 = i0 >> 5;

        i17 = i0 & 31;

        $i4 = r0.<java.math.BigInteger: int numberLength>;

        if i1 < $i4 goto label03;

        $i15 = r0.<java.math.BigInteger: int sign>;

        if $i15 >= 0 goto label01;

        $r6 = <java.math.BigInteger: java.math.BigInteger MINUS_ONE>;

        goto label02;

     label01:
        $r6 = <java.math.BigInteger: java.math.BigInteger ZERO>;

     label02:
        return $r6;

     label03:
        $i5 = r0.<java.math.BigInteger: int numberLength>;

        i3 = $i5 - i1;

        $i6 = i3 + 1;

        r1 = newarray (int)[$i6];

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        staticinvoke <java.math.BitLevel: boolean shiftRight(int[],int,int[],int,int)>(r1, i3, $r2, i1, i17);

        $i7 = r0.<java.math.BigInteger: int sign>;

        if $i7 >= 0 goto label10;

        i2 = 0;

     label04:
        if i2 >= i1 goto label05;

        $r5 = r0.<java.math.BigInteger: int[] digits>;

        $i16 = $r5[i2];

        if $i16 != 0 goto label05;

        i2 = i2 + 1;

        goto label04;

     label05:
        if i2 < i1 goto label06;

        if i17 <= 0 goto label10;

        $r4 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = $r4[i2];

        $i13 = 32 - i17;

        $i14 = $i12 << $i13;

        if $i14 == 0 goto label10;

     label06:
        i18 = 0;

     label07:
        if i18 >= i3 goto label08;

        $i11 = r1[i18];

        if $i11 != -1 goto label08;

        r1[i18] = 0;

        i18 = i18 + 1;

        goto label07;

     label08:
        if i18 != i3 goto label09;

        i3 = i3 + 1;

     label09:
        $i9 = r1[i18];

        $i10 = $i9 + 1;

        r1[i18] = $i10;

     label10:
        $r3 = new java.math.BigInteger;

        $i8 = r0.<java.math.BigInteger: int sign>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>($i8, i3, r1);

        return $r3;
    }

    static boolean shiftRight(int[], int, int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i21;
        boolean z0, $z1, $z2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 = 1;

        i3 = 0;

     label01:
        if i3 >= i1 goto label04;

        $i19 = r1[i3];

        if $i19 != 0 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z0 = z0 & $z2;

        i3 = i3 + 1;

        goto label01;

     label04:
        if i2 != 0 goto label05;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, i1, r0, 0, i0);

        goto label10;

     label05:
        i4 = 32 - i2;

        $i5 = r1[i3];

        $i6 = $i5 << i4;

        if $i6 != 0 goto label06;

        $z1 = 1;

        goto label07;

     label06:
        $z1 = 0;

     label07:
        z0 = z0 & $z1;

        i21 = 0;

     label08:
        $i7 = i0 - 1;

        if i21 >= $i7 goto label09;

        $i11 = i21 + i1;

        $i12 = r1[$i11];

        $i18 = $i12 >>> i2;

        $i14 = i21 + i1;

        $i13 = $i14 + 1;

        $i16 = r1[$i13];

        $i15 = $i16 << i4;

        $i17 = $i18 | $i15;

        r0[i21] = $i17;

        i21 = i21 + 1;

        goto label08;

     label09:
        $i8 = i21 + i1;

        $i9 = r1[$i8];

        $i10 = $i9 >>> i2;

        r0[i21] = $i10;

     label10:
        return z0;
    }

    static java.math.BigInteger flipBit(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32;
        int[] r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        virtualinvoke r0.<java.math.BigInteger: void prepareJavaRepresentation()>();

        $i8 = r0.<java.math.BigInteger: int sign>;

        if $i8 != 0 goto label01;

        $i28 = 1;

        goto label02;

     label01:
        $i28 = r0.<java.math.BigInteger: int sign>;

     label02:
        i1 = $i28;

        i2 = i0 >> 5;

        i3 = i0 & 31;

        $i10 = i2 + 1;

        $i9 = r0.<java.math.BigInteger: int numberLength>;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>($i10, $i9);

        i4 = $i11 + 1;

        r1 = newarray (int)[i4];

        i6 = 1 << i3;

        $r2 = r0.<java.math.BigInteger: int[] digits>;

        $i12 = r0.<java.math.BigInteger: int numberLength>;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>($r2, 0, r1, 0, $i12);

        $i14 = r0.<java.math.BigInteger: int sign>;

        if $i14 >= 0 goto label11;

        $i16 = r0.<java.math.BigInteger: int numberLength>;

        if i2 < $i16 goto label03;

        r1[i2] = i6;

        goto label12;

     label03:
        i7 = virtualinvoke r0.<java.math.BigInteger: int getFirstNonzeroDigit()>();

        if i2 <= i7 goto label04;

        $i30 = r1[i2];

        $i27 = $i30 ^ i6;

        r1[i2] = $i27;

        goto label10;

     label04:
        if i2 >= i7 goto label07;

        $i26 = neg i6;

        r1[i2] = $i26;

        i5 = i2 + 1;

     label05:
        if i5 >= i7 goto label06;

        r1[i5] = -1;

        i5 = i5 + 1;

        goto label05;

     label06:
        $i25 = r1[i5];

        $i29 = $i25 - 1;

        r1[i5] = $i29;

        r1[i5] = $i25;

        goto label10;

     label07:
        i31 = i2;

        $i18 = r1[i2];

        $i17 = neg $i18;

        $i20 = $i17 ^ i6;

        $i19 = neg $i20;

        r1[i31] = $i19;

        $i22 = r1[i31];

        if $i22 != 0 goto label10;

        i32 = i31 + 1;

     label08:
        $i21 = r1[i32];

        if $i21 != -1 goto label09;

        r1[i32] = 0;

        i32 = i32 + 1;

        goto label08;

     label09:
        $i24 = r1[i32];

        $i23 = $i24 + 1;

        r1[i32] = $i23;

     label10:
        goto label12;

     label11:
        $i13 = r1[i2];

        $i15 = $i13 ^ i6;

        r1[i2] = $i15;

     label12:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,int,int[])>(i1, i4, r1);

        return $r3;
    }
}
