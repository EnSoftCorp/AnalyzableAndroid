public class java.util.logging.StreamHandler extends java.util.logging.Handler
{
    private java.io.OutputStream os;
    private java.io.Writer writer;
    private boolean writerNotInitialized;

    public void <init>()
    {
        java.util.logging.StreamHandler r0;

        r0 := @this: java.util.logging.StreamHandler;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        virtualinvoke r0.<java.util.logging.StreamHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("INFO", null, "java.util.logging.SimpleFormatter", null);

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = null;

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = null;

        r0.<java.util.logging.StreamHandler: boolean writerNotInitialized> = 1;

        return;
    }

    void <init>(java.io.OutputStream)
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = r1;

        return;
    }

    void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.logging.StreamHandler r0;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        virtualinvoke r0.<java.util.logging.StreamHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = null;

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = null;

        r0.<java.util.logging.StreamHandler: boolean writerNotInitialized> = 1;

        return;
    }

    public void <init>(java.io.OutputStream, java.util.logging.Formatter)
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1;
        java.util.logging.Formatter r2;
        java.lang.NullPointerException $r3, $r4;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.logging.Formatter;

        specialinvoke r0.<java.util.logging.StreamHandler: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("os == null");

        throw $r4;

     label1:
        if r2 != null goto label2;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("formatter == null");

        throw $r3;

     label2:
        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = r1;

        virtualinvoke r0.<java.util.logging.StreamHandler: void internalSetFormatter(java.util.logging.Formatter)>(r2);

        return;
    }

    private void initializeWriter()
    {
        java.util.logging.StreamHandler r0;
        java.lang.String $r2, $r5, $r7;
        java.io.OutputStreamWriter $r3, $r8;
        java.io.OutputStream $r4, $r9;
        java.util.logging.Formatter $r6;
        java.io.UnsupportedEncodingException $r10;

        r0 := @this: java.util.logging.StreamHandler;

        r0.<java.util.logging.StreamHandler: boolean writerNotInitialized> = 0;

        $r2 = virtualinvoke r0.<java.util.logging.StreamHandler: java.lang.String getEncoding()>();

        if $r2 != null goto label1;

        $r8 = new java.io.OutputStreamWriter;

        $r9 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r9);

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r8;

        goto label4;

     label1:
        $r3 = new java.io.OutputStreamWriter;

        $r4 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        $r5 = virtualinvoke r0.<java.util.logging.StreamHandler: java.lang.String getEncoding()>();

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r4, $r5);

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r3;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

     label4:
        $r6 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();

        $r7 = virtualinvoke $r6.<java.util.logging.Formatter: java.lang.String getHead(java.util.logging.Handler)>(r0);

        specialinvoke r0.<java.util.logging.StreamHandler: void write(java.lang.String)>($r7);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private void write(java.lang.String)
    {
        java.util.logging.StreamHandler r0;
        java.lang.String r1;
        java.lang.Exception r2, $r4;
        java.io.Writer $r3;
        java.util.logging.ErrorManager $r5;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r5.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when writing to the output stream", r2, 1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void internalSetOutputStream(java.io.OutputStream)
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.io.OutputStream;

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = r1;

        return;
    }

    protected void setOutputStream(java.io.OutputStream)
    {
        java.util.logging.StreamHandler r0;
        java.io.OutputStream r1;
        java.util.logging.LogManager $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("os == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r0.<java.util.logging.StreamHandler: void close(boolean)>(1);

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = null;

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = r1;

        r0.<java.util.logging.StreamHandler: boolean writerNotInitialized> = 1;

        return;
    }

    public void setEncoding(java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.util.logging.StreamHandler r0;
        java.lang.String r1, $r4, $r7;
        java.io.UnsupportedEncodingException r2, $r10;
        java.io.Writer $r3;
        java.io.OutputStreamWriter $r5, $r8;
        java.io.OutputStream $r6, $r9;
        java.lang.AssertionError $r11;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<java.util.logging.StreamHandler: void flush()>();

        specialinvoke r0.<java.util.logging.Handler: void setEncoding(java.lang.String)>(r1);

        $r3 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<java.util.logging.StreamHandler: java.lang.String getEncoding()>();

        if $r4 != null goto label1;

        $r8 = new java.io.OutputStreamWriter;

        $r9 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        specialinvoke $r8.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r9);

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r8;

        goto label4;

     label1:
        $r5 = new java.io.OutputStreamWriter;

        $r6 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        $r7 = virtualinvoke r0.<java.util.logging.StreamHandler: java.lang.String getEncoding()>();

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r6, $r7);

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = $r5;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r11;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    void close(boolean)
    {
        java.util.logging.StreamHandler r0;
        boolean z0, $z1;
        java.lang.Exception r1, $r7;
        java.io.OutputStream $r2;
        java.util.logging.Formatter $r3;
        java.lang.String $r4;
        java.io.Writer $r5, $r6;
        java.util.logging.ErrorManager $r8;

        r0 := @this: java.util.logging.StreamHandler;

        z0 := @parameter0: boolean;

        $r2 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        if $r2 == null goto label5;

        $z1 = r0.<java.util.logging.StreamHandler: boolean writerNotInitialized>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<java.util.logging.StreamHandler: void initializeWriter()>();

     label1:
        $r3 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();

        $r4 = virtualinvoke $r3.<java.util.logging.Formatter: java.lang.String getTail(java.util.logging.Handler)>(r0);

        specialinvoke r0.<java.util.logging.StreamHandler: void write(java.lang.String)>($r4);

     label2:
        $r5 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void flush()>();

        if z0 == 0 goto label3;

        $r6 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        virtualinvoke $r6.<java.io.Writer: void close()>();

        r0.<java.util.logging.StreamHandler: java.io.Writer writer> = null;

        r0.<java.util.logging.StreamHandler: java.io.OutputStream os> = null;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r8.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when closing the output stream", r1, 3);

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void close()
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogManager $r1;

        r0 := @this: java.util.logging.StreamHandler;

        $r1 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r1.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r0.<java.util.logging.StreamHandler: void close(boolean)>(1);

        return;
    }

    public void flush()
    {
        java.util.logging.StreamHandler r0;
        java.lang.Exception r1, $r6;
        java.io.OutputStream $r2, $r4;
        java.io.Writer $r3, $r5;
        java.util.logging.ErrorManager $r7;

        r0 := @this: java.util.logging.StreamHandler;

        $r2 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        if $r2 == null goto label5;

     label1:
        $r3 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        if $r3 == null goto label2;

        $r5 = r0.<java.util.logging.StreamHandler: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void flush()>();

        goto label3;

     label2:
        $r4 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r7.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when flushing the output stream", r1, 2);

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public synchronized void publish(java.util.logging.LogRecord)
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogRecord r1;
        java.lang.String r2;
        java.lang.Exception r3, $r5, $r7, r9;
        boolean $z0, $z1;
        java.util.logging.Formatter $r4;
        java.util.logging.ErrorManager $r6, $r8;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

     label1:
        $z0 = virtualinvoke r0.<java.util.logging.StreamHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        if $z0 == 0 goto label7;

        $z1 = r0.<java.util.logging.StreamHandler: boolean writerNotInitialized>;

        if $z1 == 0 goto label2;

        specialinvoke r0.<java.util.logging.StreamHandler: void initializeWriter()>();

     label2:
        r2 = null;

     label3:
        $r4 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.Formatter getFormatter()>();

        r2 = virtualinvoke $r4.<java.util.logging.Formatter: java.lang.String format(java.util.logging.LogRecord)>(r1);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r6.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when formatting the log record", r3, 5);

     label6:
        specialinvoke r0.<java.util.logging.StreamHandler: void write(java.lang.String)>(r2);

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = virtualinvoke r0.<java.util.logging.StreamHandler: java.util.logging.ErrorManager getErrorManager()>();

        virtualinvoke $r8.<java.util.logging.ErrorManager: void error(java.lang.String,java.lang.Exception,int)>("Exception occurred when logging the record", r9, 0);

     label9:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
        catch java.lang.Exception from label1 to label7 with label8;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.StreamHandler r0;
        java.util.logging.LogRecord r1;
        java.io.OutputStream $r2;
        boolean $z0;

        r0 := @this: java.util.logging.StreamHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        if r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<java.util.logging.StreamHandler: java.io.OutputStream os>;

        if $r2 == null goto label2;

        $z0 = specialinvoke r0.<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }
}
