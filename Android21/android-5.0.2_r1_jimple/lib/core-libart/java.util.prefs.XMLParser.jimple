class java.util.prefs.XMLParser extends java.lang.Object
{
    static final java.lang.String PREFS_DTD_NAME;
    static final java.lang.String PREFS_DTD;
    static final java.lang.String HEADER;
    static final java.lang.String DOCTYPE;
    private static final java.lang.String FILE_PREFS;
    private static final float XML_VERSION;
    private static final javax.xml.parsers.DocumentBuilder builder;
    private static int indent;

    private void <init>()
    {
        java.util.prefs.XMLParser r0;

        r0 := @this: java.util.prefs.XMLParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void exportPrefs(java.util.prefs.Preferences, java.io.OutputStream, boolean) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.prefs.Preferences r0;
        java.io.OutputStream r1;
        boolean z0, $z1;
        java.io.BufferedWriter r2, $r4;
        java.util.StringTokenizer r3, $r11;
        java.io.OutputStreamWriter $r5;
        java.lang.String[] $r6, $r7, $r9, $r10;
        java.lang.String $r8, $r12, $r13;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.OutputStream;

        z0 := @parameter2: boolean;

        <java.util.prefs.XMLParser: int indent> = -1;

        $r4 = new java.io.BufferedWriter;

        $r5 = new java.io.OutputStreamWriter;

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r1, "UTF-8");

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);

        r2 = $r4;

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("<!DOCTYPE preferences SYSTEM");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>(" \'");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("http://java.sun.com/dtd/preferences.dtd");

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("\'>");

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r2.<java.io.BufferedWriter: void newLine()>();

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = "EXTERNAL_XML_VERSION";

        $r7 = newarray (java.lang.String)[1];

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>(1.0F);

        $r7[0] = $r8;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("preferences", $r6, $r7, r2);

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = "type";

        $r10 = newarray (java.lang.String)[1];

        $z1 = virtualinvoke r0.<java.util.prefs.Preferences: boolean isUserNode()>();

        if $z1 == 0 goto label1;

        $r12 = "user";

        goto label2;

     label1:
        $r12 = "system";

     label2:
        $r10[0] = $r12;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("root", $r9, $r10, r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        $r11 = new java.util.StringTokenizer;

        $r13 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String absolutePath()>();

        specialinvoke $r11.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r13, "/");

        r3 = $r11;

        staticinvoke <java.util.prefs.XMLParser: void exportNode(java.util.StringTokenizer,java.util.prefs.Preferences,boolean,java.io.BufferedWriter)>(r3, r0, z0, r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("root", r2);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("preferences", r2);

        virtualinvoke r2.<java.io.BufferedWriter: void flush()>();

        return;
    }

    private static void exportNode(java.util.StringTokenizer, java.util.prefs.Preferences, boolean, java.io.BufferedWriter) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.StringTokenizer r0;
        java.util.prefs.Preferences r1;
        boolean z0, $z1, $z2;
        java.io.BufferedWriter r2;
        java.lang.String r3;
        java.lang.String[] $r4, $r5;

        r0 := @parameter0: java.util.StringTokenizer;

        r1 := @parameter1: java.util.prefs.Preferences;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.io.BufferedWriter;

        $z1 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        r3 = virtualinvoke r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "name";

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = r3;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("node", $r4, $r5, r2);

        $z2 = virtualinvoke r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label1;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        staticinvoke <java.util.prefs.XMLParser: void exportNode(java.util.StringTokenizer,java.util.prefs.Preferences,boolean,java.io.BufferedWriter)>(r0, r1, z0, r2);

        goto label2;

     label1:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.util.prefs.Preferences,java.io.BufferedWriter)>(r1, r2);

        if z0 == 0 goto label2;

        staticinvoke <java.util.prefs.XMLParser: void exportSubTree(java.util.prefs.Preferences,java.io.BufferedWriter)>(r1, r2);

     label2:
        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("node", r2);

     label3:
        return;
    }

    private static void exportSubTree(java.util.prefs.Preferences, java.io.BufferedWriter) throws java.util.prefs.BackingStoreException, java.io.IOException
    {
        java.util.prefs.Preferences r0, r3;
        java.io.BufferedWriter r1;
        java.lang.String[] r2, $r5, $r6;
        int i0, $i1, $i2;
        java.lang.String $r4, $r7;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.BufferedWriter;

        r2 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String[] childrenNames()>();

        $i1 = lengthof r2;

        if $i1 <= 0 goto label2;

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r4 = r2[i0];

        r3 = virtualinvoke r0.<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>($r4);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "name";

        $r6 = newarray (java.lang.String)[1];

        $r7 = r2[i0];

        $r6[0] = $r7;

        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("node", $r5, $r6, r1);

        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.util.prefs.Preferences,java.io.BufferedWriter)>(r3, r1);

        staticinvoke <java.util.prefs.XMLParser: void exportSubTree(java.util.prefs.Preferences,java.io.BufferedWriter)>(r3, r1);

        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("node", r1);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void exportEntries(java.util.prefs.Preferences, java.io.BufferedWriter) throws java.util.prefs.BackingStoreException, java.io.IOException
    {
        java.util.prefs.Preferences r0;
        java.io.BufferedWriter r1;
        java.lang.String[] r2, r3;
        int i0, $i1, $i2;
        java.lang.String $r4, $r5;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: java.io.BufferedWriter;

        r2 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String[] keys()>();

        $i1 = lengthof r2;

        r3 = newarray (java.lang.String)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r4 = r2[i0];

        $r5 = virtualinvoke r0.<java.util.prefs.Preferences: java.lang.String get(java.lang.String,java.lang.String)>($r4, null);

        r3[i0] = $r5;

        i0 = i0 + 1;

        goto label1;

     label2:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r2, r3, r1);

        return;
    }

    private static void exportEntries(java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String[] r0, r1, $r4, $r5;
        java.io.BufferedWriter r2;
        int i0, $i1, $i2;
        java.lang.String $r3, $r6, $r7;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.BufferedWriter;

        $i1 = lengthof r0;

        if $i1 != 0 goto label1;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.io.BufferedWriter)>("map", r2);

        return;

     label1:
        staticinvoke <java.util.prefs.XMLParser: void flushStartTag(java.lang.String,java.io.BufferedWriter)>("map", r2);

        i0 = 0;

     label2:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label4;

        $r3 = r1[i0];

        if $r3 == null goto label3;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "key";

        $r4[1] = "value";

        $r5 = newarray (java.lang.String)[2];

        $r6 = r0[i0];

        $r5[0] = $r6;

        $r7 = r1[i0];

        $r5[1] = $r7;

        staticinvoke <java.util.prefs.XMLParser: void flushEmptyElement(java.lang.String,java.lang.String[],java.lang.String[],java.io.BufferedWriter)>("entry", $r4, $r5, r2);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        staticinvoke <java.util.prefs.XMLParser: void flushEndTag(java.lang.String,java.io.BufferedWriter)>("map", r2);

        return;
    }

    private static void flushEndTag(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        $i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = $i0 - 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>($i0, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("</");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static void flushEmptyElement(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        $i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = $i0 + 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>($i1, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(" />");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        $i2 = <java.util.prefs.XMLParser: int indent>;

        $i3 = $i2 - 1;

        <java.util.prefs.XMLParser: int indent> = $i3;

        return;
    }

    private static void flushEmptyElement(java.lang.String, java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.String[] r1, r2;
        java.io.BufferedWriter r3;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.io.BufferedWriter;

        $i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = $i0 + 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>($i1, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        staticinvoke <java.util.prefs.XMLParser: void flushPairs(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r1, r2, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(" />");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        $i2 = <java.util.prefs.XMLParser: int indent>;

        $i3 = $i2 - 1;

        <java.util.prefs.XMLParser: int indent> = $i3;

        return;
    }

    private static void flushPairs(java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String[] r0, r1;
        java.io.BufferedWriter r2;
        int i0, $i1;
        java.lang.String $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.io.BufferedWriter;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>(" ");

        $r3 = r0[i0];

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r3);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("=\"");

        $r4 = r1[i0];

        $r5 = staticinvoke <java.util.prefs.XMLParser: java.lang.String htmlEncode(java.lang.String)>($r4);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>($r5);

        virtualinvoke r2.<java.io.BufferedWriter: void write(java.lang.String)>("\"");

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void flushIndent(int, java.io.BufferedWriter) throws java.io.IOException
    {
        int i0, i1;
        java.io.BufferedWriter r0;

        i0 := @parameter0: int;

        r0 := @parameter1: java.io.BufferedWriter;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("  ");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void flushStartTag(java.lang.String, java.lang.String[], java.lang.String[], java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.lang.String[] r1, r2;
        java.io.BufferedWriter r3;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: java.lang.String[];

        r3 := @parameter3: java.io.BufferedWriter;

        $i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = $i0 + 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>($i1, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        staticinvoke <java.util.prefs.XMLParser: void flushPairs(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r1, r2, r3);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r3.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static void flushStartTag(java.lang.String, java.io.BufferedWriter) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.BufferedWriter r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.BufferedWriter;

        $i0 = <java.util.prefs.XMLParser: int indent>;

        $i1 = $i0 + 1;

        <java.util.prefs.XMLParser: int indent> = $i1;

        staticinvoke <java.util.prefs.XMLParser: void flushIndent(int,java.io.BufferedWriter)>($i1, r1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("<");

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r0);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(">");

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        return;
    }

    private static java.lang.String htmlEncode(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.StringBuilder r1, $r2;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label8;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        lookupswitch(c1)
        {
            case 34: goto label5;
            case 38: goto label4;
            case 60: goto label2;
            case 62: goto label3;
            default: goto label6;
        };

     label2:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label7;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label7;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label7;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label7;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label7:
        i0 = i0 + 1;

        goto label1;

     label8:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static void importPrefs(java.io.InputStream) throws java.io.IOException, java.util.prefs.InvalidPreferencesFormatException
    {
        java.io.InputStream r0;
        org.w3c.dom.Document r1;
        org.w3c.dom.Element r2, r4;
        java.lang.String r3, r5, $r14;
        org.xml.sax.InputSource $r6;
        javax.xml.parsers.DocumentBuilder $r7;
        org.w3c.dom.NodeList $r8;
        org.w3c.dom.Node $r9;
        boolean $z0;
        byte $b0;
        float $f0;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;
        java.util.prefs.InvalidPreferencesFormatException $r11, $r16, $r18;
        javax.xml.parsers.FactoryConfigurationError $r17, r21;
        org.xml.sax.SAXException $r19, r22;
        java.util.prefs.Preferences r20;

        r0 := @parameter0: java.io.InputStream;

     label1:
        $r7 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r6 = new org.xml.sax.InputSource;

        specialinvoke $r6.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>(r0);

        r1 = virtualinvoke $r7.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r6);

        r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r3 = interfaceinvoke r2.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("EXTERNAL_XML_VERSION");

        if r3 == null goto label2;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r3);

        $b0 = $f0 cmpl 1.0F;

        if $b0 <= 0 goto label2;

        $r11 = new java.util.prefs.InvalidPreferencesFormatException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Preferences version ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label2:
        $r8 = interfaceinvoke r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getElementsByTagName(java.lang.String)>("root");

        $r9 = interfaceinvoke $r8.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(0);

        r4 = (org.w3c.dom.Element) $r9;

        r5 = interfaceinvoke r4.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("type");

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("user");

        if $z0 == 0 goto label3;

        r20 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>();

        goto label4;

     label3:
        r20 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences systemRoot()>();

     label4:
        staticinvoke <java.util.prefs.XMLParser: void loadNode(java.util.prefs.Preferences,org.w3c.dom.Element)>(r20, r4);

     label5:
        goto label8;

     label6:
        $r17 := @caughtexception;

        r21 = $r17;

        $r16 = new java.util.prefs.InvalidPreferencesFormatException;

        specialinvoke $r16.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.Throwable)>(r21);

        throw $r16;

     label7:
        $r19 := @caughtexception;

        r22 = $r19;

        $r18 = new java.util.prefs.InvalidPreferencesFormatException;

        specialinvoke $r18.<java.util.prefs.InvalidPreferencesFormatException: void <init>(java.lang.Throwable)>(r22);

        throw $r18;

     label8:
        return;

        catch javax.xml.parsers.FactoryConfigurationError from label1 to label5 with label6;
        catch org.xml.sax.SAXException from label1 to label5 with label7;
    }

    private static void loadNode(java.util.prefs.Preferences, org.w3c.dom.Element)
    {
        java.util.prefs.Preferences r0, $r14, $r17;
        org.w3c.dom.Element r1, r6, $r16, r20;
        org.w3c.dom.NodeList r2, r3;
        int i0, i1, i2, i3, i4;
        java.util.prefs.Preferences[] r4;
        java.lang.Object r5, $r12;
        java.lang.String r7, r8, r21;
        java.lang.Throwable r9, $r19;
        java.util.prefs.AbstractPreferences $r10, $r11;
        boolean $z0;
        org.w3c.dom.Node $r13, $r15, $r18;

        r0 := @parameter0: java.util.prefs.Preferences;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>(r1, "node");

        r3 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>(r1, "map/entry");

        i0 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        r4 = newarray (java.util.prefs.Preferences)[i0];

        i1 = interfaceinvoke r3.<org.w3c.dom.NodeList: int getLength()>();

        $r10 = (java.util.prefs.AbstractPreferences) r0;

        $r12 = $r10.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r5 = $r12;

        entermonitor $r12;

     label01:
        $r11 = (java.util.prefs.AbstractPreferences) r0;

        $z0 = virtualinvoke $r11.<java.util.prefs.AbstractPreferences: boolean isRemoved()>();

        if $z0 == 0 goto label03;

        exitmonitor r5;

     label02:
        return;

     label03:
        i2 = 0;

     label04:
        if i2 >= i1 goto label05;

        $r18 = interfaceinvoke r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r6 = (org.w3c.dom.Element) $r18;

        r7 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

        r8 = interfaceinvoke r6.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        virtualinvoke r0.<java.util.prefs.Preferences: void put(java.lang.String,java.lang.String)>(r7, r8);

        i2 = i2 + 1;

        goto label04;

     label05:
        i3 = 0;

     label06:
        if i3 >= i0 goto label07;

        $r15 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i3);

        r20 = (org.w3c.dom.Element) $r15;

        r21 = interfaceinvoke r20.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("name");

        $r17 = virtualinvoke r0.<java.util.prefs.Preferences: java.util.prefs.Preferences node(java.lang.String)>(r21);

        r4[i3] = $r17;

        i3 = i3 + 1;

        goto label06;

     label07:
        exitmonitor r5;

     label08:
        goto label11;

     label09:
        $r19 := @caughtexception;

        r9 = $r19;

        exitmonitor r5;

     label10:
        throw r9;

     label11:
        i4 = 0;

     label12:
        if i4 >= i0 goto label13;

        $r14 = r4[i4];

        $r13 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i4);

        $r16 = (org.w3c.dom.Element) $r13;

        staticinvoke <java.util.prefs.XMLParser: void loadNode(java.util.prefs.Preferences,org.w3c.dom.Element)>($r14, $r16);

        i4 = i4 + 1;

        goto label12;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private static org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r0, $r12, $r20, $r25;
        java.lang.String r1, $r9, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r23, $r24;
        java.util.ArrayList r2, $r8;
        java.lang.String[] r3;
        org.w3c.dom.NodeList r4, r6;
        int i0, i1, $i2, $i3, $i4, i5;
        org.w3c.dom.Node r5, r7, $r15, $r22, $r26, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.prefs.NodeSet $r10, r28;
        java.util.Iterator $r11;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: java.lang.String;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $r9 = r3[0];

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("entry");

        if $z0 != 0 goto label01;

        $r16 = r3[0];

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("node");

        if $z3 == 0 goto label05;

     label01:
        i0 = 0;

     label02:
        $i2 = interfaceinvoke r4.<org.w3c.dom.NodeList: int getLength()>();

        if i0 >= $i2 goto label04;

        r5 = interfaceinvoke r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0);

        $z1 = r5 instanceof org.w3c.dom.Element;

        if $z1 == 0 goto label03;

        $r12 = (org.w3c.dom.Element) r5;

        $r14 = interfaceinvoke $r12.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r13 = r3[0];

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z2 == 0 goto label03;

        $r15 = (org.w3c.dom.Node) r5;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

     label03:
        i0 = i0 + 1;

        goto label02;

     label04:
        goto label10;

     label05:
        $r17 = r3[0];

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("map");

        if $z4 == 0 goto label10;

        $r18 = r3[1];

        $z6 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("entry");

        if $z6 == 0 goto label10;

        i5 = 0;

     label06:
        $i3 = interfaceinvoke r4.<org.w3c.dom.NodeList: int getLength()>();

        if i5 >= $i3 goto label10;

        r27 = interfaceinvoke r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i5);

        $z5 = r27 instanceof org.w3c.dom.Element;

        if $z5 == 0 goto label09;

        $r20 = (org.w3c.dom.Element) r27;

        $r21 = interfaceinvoke $r20.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r19 = r3[0];

        $z7 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z7 == 0 goto label09;

        $r22 = (org.w3c.dom.Node) r27;

        r6 = interfaceinvoke $r22.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

     label07:
        $i4 = interfaceinvoke r6.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i4 goto label09;

        r7 = interfaceinvoke r6.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $z8 = r7 instanceof org.w3c.dom.Element;

        if $z8 == 0 goto label08;

        $r25 = (org.w3c.dom.Element) r7;

        $r23 = interfaceinvoke $r25.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        $r24 = r3[1];

        $z9 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z9 == 0 goto label08;

        $r26 = (org.w3c.dom.Node) r7;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r26);

     label08:
        i1 = i1 + 1;

        goto label07;

     label09:
        i5 = i5 + 1;

        goto label06;

     label10:
        $r10 = new java.util.prefs.NodeSet;

        $r11 = virtualinvoke r2.<java.util.ArrayList: java.util.Iterator iterator()>();

        specialinvoke $r10.<java.util.prefs.NodeSet: void <init>(java.util.Iterator)>($r11);

        r28 = $r10;

        return r28;
    }

    static java.util.Properties readXmlPreferences(java.io.File)
    {
        java.io.File r0, $r16;
        java.util.Properties r1, $r9;
        java.io.InputStreamReader r2, $r10;
        org.w3c.dom.Document r3;
        org.w3c.dom.NodeList r4;
        int i0, i1;
        org.w3c.dom.Element r5, $r14;
        java.lang.String r6, r7;
        java.lang.Throwable r8, $r20;
        boolean $z0, $z1;
        org.xml.sax.InputSource $r11;
        java.io.FileInputStream $r12;
        javax.xml.parsers.DocumentBuilder $r13;
        org.w3c.dom.Node $r15;
        org.xml.sax.SAXException $r18;
        java.io.IOException $r19;

        r0 := @parameter0: java.io.File;

        $r9 = new java.util.Properties;

        specialinvoke $r9.<java.util.Properties: void <init>()>();

        r1 = $r9;

        $z0 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r16 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r16.<java.io.File: boolean mkdirs()>();

        goto label13;

     label01:
        $z1 = virtualinvoke r0.<java.io.File: boolean canRead()>();

        if $z1 == 0 goto label12;

        r2 = null;

     label02:
        $r10 = new java.io.InputStreamReader;

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        specialinvoke $r10.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r12, "UTF-8");

        r2 = $r10;

        $r13 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r11 = new org.xml.sax.InputSource;

        specialinvoke $r11.<org.xml.sax.InputSource: void <init>(java.io.Reader)>(r2);

        r3 = virtualinvoke $r13.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r11);

        $r14 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        r4 = staticinvoke <java.util.prefs.XMLParser: org.w3c.dom.NodeList selectNodeList(org.w3c.dom.Element,java.lang.String)>($r14, "entry");

        i0 = interfaceinvoke r4.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label04;

        $r15 = interfaceinvoke r4.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        r5 = (org.w3c.dom.Element) $r15;

        r6 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("key");

        r7 = interfaceinvoke r5.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("value");

        virtualinvoke r1.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>(r6, r7);

        i1 = i1 + 1;

        goto label03;

     label04:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label11;

     label05:
        $r19 := @caughtexception;

     label06:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label11;

     label07:
        $r18 := @caughtexception;

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        goto label11;

     label09:
        $r20 := @caughtexception;

        r8 = $r20;

     label10:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r2);

        throw r8;

     label11:
        goto label13;

     label12:
        virtualinvoke r0.<java.io.File: boolean delete()>();

     label13:
        return r1;

        catch java.io.IOException from label02 to label04 with label05;
        catch org.xml.sax.SAXException from label02 to label04 with label07;
        catch java.lang.Throwable from label02 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    static void writeXmlPreferences(java.io.File, java.util.Properties) throws java.io.IOException
    {
        java.io.File r0, r2, r3, $r8;
        java.util.Properties r1;
        java.io.BufferedWriter r4, $r16;
        java.lang.String[] r5, r6, $r19;
        int i0, i1, $i2;
        java.lang.Throwable r7, $r26;
        java.lang.StringBuilder $r9, $r10, $r12, $r14, $r22, $r23, $r25;
        java.util.UUID $r11;
        java.lang.String $r13, $r24, $r27, $r28;
        java.io.OutputStreamWriter $r15;
        java.util.Set $r17;
        java.io.FileOutputStream $r18;
        boolean $z0;
        java.lang.Object[] $r20;
        java.io.IOException $r21;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.util.Properties;

        r2 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        $r8 = new java.io.File;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prefs-");

        $r11 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml.tmp");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.File: void <init>(java.io.File,java.lang.String)>(r2, $r13);

        r3 = $r8;

        r4 = null;

     label1:
        $r16 = new java.io.BufferedWriter;

        $r15 = new java.io.OutputStreamWriter;

        $r18 = new java.io.FileOutputStream;

        specialinvoke $r18.<java.io.FileOutputStream: void <init>(java.io.File)>(r3);

        specialinvoke $r15.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>($r18, "UTF-8");

        specialinvoke $r16.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r15);

        r4 = $r16;

        virtualinvoke r4.<java.io.BufferedWriter: void write(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");

        virtualinvoke r4.<java.io.BufferedWriter: void newLine()>();

        virtualinvoke r4.<java.io.BufferedWriter: void write(java.lang.String)>("<!DOCTYPE map SYSTEM \'http://java.sun.com/dtd/preferences.dtd\'>");

        virtualinvoke r4.<java.io.BufferedWriter: void newLine()>();

        $r17 = virtualinvoke r1.<java.util.Properties: java.util.Set keySet()>();

        $i2 = virtualinvoke r1.<java.util.Properties: int size()>();

        $r19 = newarray (java.lang.String)[$i2];

        $r20 = interfaceinvoke $r17.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        r5 = (java.lang.String[]) $r20;

        i0 = lengthof r5;

        r6 = newarray (java.lang.String)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r27 = r5[i1];

        $r28 = virtualinvoke r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r27);

        r6[i1] = $r28;

        i1 = i1 + 1;

        goto label2;

     label3:
        staticinvoke <java.util.prefs.XMLParser: void exportEntries(java.lang.String[],java.lang.String[],java.io.BufferedWriter)>(r5, r6, r4);

        virtualinvoke r4.<java.io.BufferedWriter: void close()>();

        $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r0);

        if $z0 != 0 goto label4;

        $r21 = new java.io.IOException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write preferences to ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.io.IOException: void <init>(java.lang.String)>($r24);

        throw $r21;

     label4:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        virtualinvoke r3.<java.io.File: boolean delete()>();

        goto label7;

     label5:
        $r26 := @caughtexception;

        r7 = $r26;

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        virtualinvoke r3.<java.io.File: boolean delete()>();

        throw r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    static void <clinit>()
    {
        javax.xml.parsers.DocumentBuilderFactory r0;
        javax.xml.parsers.ParserConfigurationException r1, $r7;
        javax.xml.parsers.DocumentBuilder $r2, $r4, $r6;
        java.util.prefs.XMLParser$1 $r3;
        java.util.prefs.XMLParser$2 $r5;
        java.lang.Error $r8;

        <java.util.prefs.XMLParser: float XML_VERSION> = 1.0F;

        <java.util.prefs.XMLParser: java.lang.String FILE_PREFS> = "<!DOCTYPE map SYSTEM \'http://java.sun.com/dtd/preferences.dtd\'>";

        <java.util.prefs.XMLParser: java.lang.String DOCTYPE> = "<!DOCTYPE preferences SYSTEM";

        <java.util.prefs.XMLParser: java.lang.String HEADER> = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";

        <java.util.prefs.XMLParser: java.lang.String PREFS_DTD> = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>    <!ELEMENT preferences (root)>    <!ATTLIST preferences EXTERNAL_XML_VERSION CDATA \"0.0\" >    <!ELEMENT root (map, node*) >    <!ATTLIST root type (system|user) #REQUIRED >    <!ELEMENT node (map, node*) >    <!ATTLIST node name CDATA #REQUIRED >    <!ELEMENT map (entry*) >    <!ELEMENT entry EMPTY >    <!ATTLIST entry key   CDATA #REQUIRED value CDATA #REQUIRED >";

        <java.util.prefs.XMLParser: java.lang.String PREFS_DTD_NAME> = "http://java.sun.com/dtd/preferences.dtd";

        <java.util.prefs.XMLParser: int indent> = -1;

        r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(0);

     label1:
        $r2 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder> = $r2;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r8;

     label4:
        $r4 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r3 = new java.util.prefs.XMLParser$1;

        specialinvoke $r3.<java.util.prefs.XMLParser$1: void <init>()>();

        virtualinvoke $r4.<javax.xml.parsers.DocumentBuilder: void setEntityResolver(org.xml.sax.EntityResolver)>($r3);

        $r6 = <java.util.prefs.XMLParser: javax.xml.parsers.DocumentBuilder builder>;

        $r5 = new java.util.prefs.XMLParser$2;

        specialinvoke $r5.<java.util.prefs.XMLParser$2: void <init>()>();

        virtualinvoke $r6.<javax.xml.parsers.DocumentBuilder: void setErrorHandler(org.xml.sax.ErrorHandler)>($r5);

        return;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }
}
