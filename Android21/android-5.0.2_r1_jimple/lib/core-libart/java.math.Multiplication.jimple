class java.math.Multiplication extends java.lang.Object
{
    static final int[] tenPows;
    static final int[] fivePows;
    static final java.math.BigInteger[] bigTenPows;
    static final java.math.BigInteger[] bigFivePows;

    private void <init>()
    {
        java.math.Multiplication r0;

        r0 := @this: java.math.Multiplication;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r3;
        int i0;
        java.math.BigInt r1, $r2;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        r1 = virtualinvoke $r2.<java.math.BigInt: java.math.BigInt copy()>();

        virtualinvoke r1.<java.math.BigInt: void multiplyByPositiveInt(int)>(i0);

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(java.math.BigInt)>(r1);

        return $r3;
    }

    static java.math.BigInteger multiplyByTenPow(java.math.BigInteger, long)
    {
        java.math.BigInteger r0, $r2, $r3;
        long l0, $l2;
        int[] $r1, $r4;
        int $i1, $i4, $i5;
        byte $b3;

        r0 := @parameter0: java.math.BigInteger;

        l0 := @parameter1: long;

        $r1 = <java.math.Multiplication: int[] tenPows>;

        $i1 = lengthof $r1;

        $l2 = (long) $i1;

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $r4 = <java.math.Multiplication: int[] tenPows>;

        $i4 = (int) l0;

        $i5 = $r4[$i4];

        $r3 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>(r0, $i5);

        goto label2;

     label1:
        $r2 = staticinvoke <java.math.Multiplication: java.math.BigInteger powerOf10(long)>(l0);

        $r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

     label2:
        return $r3;
    }

    static java.math.BigInteger powerOf10(long)
    {
        long l0, l2, $l4, $l9, l12;
        int i1, $i3, i11;
        java.math.BigInteger r0, $r3, $r4, $r6, $r8, $r9, $r10, $r11, $r13, r17, r18, r19, r20;
        java.math.BigInteger[] $r1, $r2, $r5, $r7, $r14;
        byte $b5, $b6, $b7, $b8, $b10;
        java.lang.OutOfMemoryError $r12, r21;
        java.lang.ArithmeticException $r15;
        java.lang.String $r16;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $r1 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i3 = lengthof $r1;

        $l4 = (long) $i3;

        $b5 = l0 cmp $l4;

        if $b5 >= 0 goto label01;

        $r14 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $r11 = $r14[i1];

        return $r11;

     label01:
        $b6 = l0 cmp 50L;

        if $b6 > 0 goto label02;

        $r10 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r13 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger pow(int)>(i1);

        return $r13;

     label02:
        $b7 = l0 cmp 2147483647L;

        if $b7 > 0 goto label03;

        $r7 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r9 = $r7[1];

        $r8 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger pow(int)>(i1);

        r17 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i1);

        goto label08;

     label03:
        $r2 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r3 = $r2[1];

        r0 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger pow(int)>(2147483647);

        r18 = r0;

        l2 = l0 - 2147483647L;

        $l9 = l0 % 2147483647L;

        i11 = (int) $l9;

     label04:
        $b8 = l2 cmp 2147483647L;

        if $b8 <= 0 goto label05;

        r18 = virtualinvoke r18.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r0);

        l2 = l2 - 2147483647L;

        goto label04;

     label05:
        $r5 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r4 = $r5[1];

        $r6 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i11);

        r19 = virtualinvoke r18.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        r20 = virtualinvoke r19.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2147483647);

        l12 = l0 - 2147483647L;

     label06:
        $b10 = l12 cmp 2147483647L;

        if $b10 <= 0 goto label07;

        r20 = virtualinvoke r20.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(2147483647);

        l12 = l12 - 2147483647L;

        goto label06;

     label07:
        r17 = virtualinvoke r20.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i11);

     label08:
        goto label10;

     label09:
        $r12 := @caughtexception;

        r21 = $r12;

        $r15 = new java.lang.ArithmeticException;

        $r16 = virtualinvoke r21.<java.lang.OutOfMemoryError: java.lang.String getMessage()>();

        specialinvoke $r15.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label10:
        return r17;

        catch java.lang.OutOfMemoryError from label02 to label08 with label09;
    }

    static java.math.BigInteger multiplyByFivePow(java.math.BigInteger, int)
    {
        java.math.BigInteger r0, $r4, $r5, $r6, $r8, $r9, $r11;
        int i0, $i1, $i2, $i3;
        int[] $r1, $r10;
        java.math.BigInteger[] $r2, $r3, $r7;

        r0 := @parameter0: java.math.BigInteger;

        i0 := @parameter1: int;

        $r1 = <java.math.Multiplication: int[] fivePows>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label1;

        $r10 = <java.math.Multiplication: int[] fivePows>;

        $i3 = $r10[i0];

        $r11 = staticinvoke <java.math.Multiplication: java.math.BigInteger multiplyByPositiveInt(java.math.BigInteger,int)>(r0, $i3);

        return $r11;

     label1:
        $r2 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $i2 = lengthof $r2;

        if i0 >= $i2 goto label2;

        $r7 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r8 = $r7[i0];

        $r9 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        return $r9;

     label2:
        $r3 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r4 = $r3[1];

        $r5 = virtualinvoke $r4.<java.math.BigInteger: java.math.BigInteger pow(int)>(i0);

        $r6 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r5);

        return $r6;
    }

    static void <clinit>()
    {
        int i0, $i2, $i3, $i4;
        long l1, $l5;
        int[] $r0, $r1;
        java.math.BigInteger[] $r2, $r3, $r4, $r5, $r6, $r9, $r11, $r15, $r17, $r18;
        java.math.BigInteger $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r19;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 10;

        $r0[2] = 100;

        $r0[3] = 1000;

        $r0[4] = 10000;

        $r0[5] = 100000;

        $r0[6] = 1000000;

        $r0[7] = 10000000;

        $r0[8] = 100000000;

        $r0[9] = 1000000000;

        <java.math.Multiplication: int[] tenPows> = $r0;

        $r1 = newarray (int)[14];

        $r1[0] = 1;

        $r1[1] = 5;

        $r1[2] = 25;

        $r1[3] = 125;

        $r1[4] = 625;

        $r1[5] = 3125;

        $r1[6] = 15625;

        $r1[7] = 78125;

        $r1[8] = 390625;

        $r1[9] = 1953125;

        $r1[10] = 9765625;

        $r1[11] = 48828125;

        $r1[12] = 244140625;

        $r1[13] = 1220703125;

        <java.math.Multiplication: int[] fivePows> = $r1;

        $r2 = newarray (java.math.BigInteger)[32];

        <java.math.Multiplication: java.math.BigInteger[] bigTenPows> = $r2;

        $r3 = newarray (java.math.BigInteger)[32];

        <java.math.Multiplication: java.math.BigInteger[] bigFivePows> = $r3;

        l1 = 1L;

        i0 = 0;

     label1:
        if i0 > 18 goto label2;

        $r17 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r16 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l1);

        $r17[i0] = $r16;

        $r18 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $l5 = l1 << i0;

        $r19 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l5);

        $r18[i0] = $r19;

        l1 = l1 * 5L;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r4 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i2 = lengthof $r4;

        if i0 >= $i2 goto label3;

        $r9 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r5 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $i3 = i0 - 1;

        $r8 = $r5[$i3];

        $r6 = <java.math.Multiplication: java.math.BigInteger[] bigFivePows>;

        $r7 = $r6[1];

        $r10 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r9[i0] = $r10;

        $r15 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $r11 = <java.math.Multiplication: java.math.BigInteger[] bigTenPows>;

        $i4 = i0 - 1;

        $r12 = $r11[$i4];

        $r13 = <java.math.BigInteger: java.math.BigInteger TEN>;

        $r14 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        $r15[i0] = $r14;

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }
}
