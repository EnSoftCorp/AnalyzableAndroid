public class java.util.zip.ZipEntry extends java.lang.Object implements java.util.zip.ZipConstants, java.lang.Cloneable
{
    java.lang.String name;
    java.lang.String comment;
    long crc;
    long compressedSize;
    long size;
    int compressionMethod;
    int time;
    int modDate;
    byte[] extra;
    int nameLength;
    long localHeaderRelOffset;
    long dataOffset;
    public static final int DEFLATED;
    public static final int STORED;

    void <init>(java.lang.String, java.lang.String, long, long, long, int, int, int, byte[], int, long, long)
    {
        java.util.zip.ZipEntry r0;
        java.lang.String r1, r2;
        long l0, l1, l2, l7, l8;
        int i3, i4, i5, i6;
        byte[] r3;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        r3 := @parameter8: byte[];

        i6 := @parameter9: int;

        l7 := @parameter10: long;

        l8 := @parameter11: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.ZipEntry: long crc> = -1L;

        r0.<java.util.zip.ZipEntry: long compressedSize> = -1L;

        r0.<java.util.zip.ZipEntry: long size> = -1L;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = -1;

        r0.<java.util.zip.ZipEntry: int time> = -1;

        r0.<java.util.zip.ZipEntry: int modDate> = -1;

        r0.<java.util.zip.ZipEntry: int nameLength> = -1;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = -1L;

        r0.<java.util.zip.ZipEntry: long dataOffset> = -1L;

        r0.<java.util.zip.ZipEntry: java.lang.String name> = r1;

        r0.<java.util.zip.ZipEntry: java.lang.String comment> = r2;

        r0.<java.util.zip.ZipEntry: long crc> = l0;

        r0.<java.util.zip.ZipEntry: long compressedSize> = l1;

        r0.<java.util.zip.ZipEntry: long size> = l2;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = i3;

        r0.<java.util.zip.ZipEntry: int time> = i4;

        r0.<java.util.zip.ZipEntry: int modDate> = i5;

        r0.<java.util.zip.ZipEntry: byte[] extra> = r3;

        r0.<java.util.zip.ZipEntry: int nameLength> = i6;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = l7;

        r0.<java.util.zip.ZipEntry: long dataOffset> = l8;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.zip.ZipEntry r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.ZipEntry: long crc> = -1L;

        r0.<java.util.zip.ZipEntry: long compressedSize> = -1L;

        r0.<java.util.zip.ZipEntry: long size> = -1L;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = -1;

        r0.<java.util.zip.ZipEntry: int time> = -1;

        r0.<java.util.zip.ZipEntry: int modDate> = -1;

        r0.<java.util.zip.ZipEntry: int nameLength> = -1;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = -1L;

        r0.<java.util.zip.ZipEntry: long dataOffset> = -1L;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r2;

     label1:
        staticinvoke <java.util.zip.ZipEntry: void validateStringLength(java.lang.String,java.lang.String)>("Name", r1);

        r0.<java.util.zip.ZipEntry: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getComment()
    {
        java.util.zip.ZipEntry r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipEntry;

        $r1 = r0.<java.util.zip.ZipEntry: java.lang.String comment>;

        return $r1;
    }

    public long getCompressedSize()
    {
        java.util.zip.ZipEntry r0;
        long $l0;

        r0 := @this: java.util.zip.ZipEntry;

        $l0 = r0.<java.util.zip.ZipEntry: long compressedSize>;

        return $l0;
    }

    public long getCrc()
    {
        java.util.zip.ZipEntry r0;
        long $l0;

        r0 := @this: java.util.zip.ZipEntry;

        $l0 = r0.<java.util.zip.ZipEntry: long crc>;

        return $l0;
    }

    public byte[] getExtra()
    {
        java.util.zip.ZipEntry r0;
        byte[] $r1;

        r0 := @this: java.util.zip.ZipEntry;

        $r1 = r0.<java.util.zip.ZipEntry: byte[] extra>;

        return $r1;
    }

    public int getMethod()
    {
        java.util.zip.ZipEntry r0;
        int $i0;

        r0 := @this: java.util.zip.ZipEntry;

        $i0 = r0.<java.util.zip.ZipEntry: int compressionMethod>;

        return $i0;
    }

    public java.lang.String getName()
    {
        java.util.zip.ZipEntry r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipEntry;

        $r1 = r0.<java.util.zip.ZipEntry: java.lang.String name>;

        return $r1;
    }

    public long getSize()
    {
        java.util.zip.ZipEntry r0;
        long $l0;

        r0 := @this: java.util.zip.ZipEntry;

        $l0 = r0.<java.util.zip.ZipEntry: long size>;

        return $l0;
    }

    public long getTime()
    {
        java.util.zip.ZipEntry r0;
        java.util.GregorianCalendar r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.util.Date $r3;
        long $l20;

        r0 := @this: java.util.zip.ZipEntry;

        $i0 = r0.<java.util.zip.ZipEntry: int time>;

        if $i0 == -1 goto label1;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int)>(14, 0);

        $i1 = r0.<java.util.zip.ZipEntry: int modDate>;

        $i2 = $i1 >> 9;

        $i3 = $i2 & 127;

        $i19 = 1980 + $i3;

        $i4 = r0.<java.util.zip.ZipEntry: int modDate>;

        $i5 = $i4 >> 5;

        $i6 = $i5 & 15;

        $i17 = $i6 - 1;

        $i7 = r0.<java.util.zip.ZipEntry: int modDate>;

        $i18 = $i7 & 31;

        $i8 = r0.<java.util.zip.ZipEntry: int time>;

        $i9 = $i8 >> 11;

        $i15 = $i9 & 31;

        $i10 = r0.<java.util.zip.ZipEntry: int time>;

        $i11 = $i10 >> 5;

        $i16 = $i11 & 63;

        $i12 = r0.<java.util.zip.ZipEntry: int time>;

        $i14 = $i12 & 31;

        $i13 = $i14 << 1;

        virtualinvoke r1.<java.util.GregorianCalendar: void set(int,int,int,int,int,int)>($i19, $i17, $i18, $i15, $i16, $i13);

        $r3 = virtualinvoke r1.<java.util.GregorianCalendar: java.util.Date getTime()>();

        $l20 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        return $l20;

     label1:
        return -1L;
    }

    public boolean isDirectory()
    {
        java.util.zip.ZipEntry r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        r0 := @this: java.util.zip.ZipEntry;

        $r2 = r0.<java.util.zip.ZipEntry: java.lang.String name>;

        $r1 = r0.<java.util.zip.ZipEntry: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 47 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setComment(java.lang.String)
    {
        java.util.zip.ZipEntry r0;
        java.lang.String r1;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        r0.<java.util.zip.ZipEntry: java.lang.String comment> = null;

        return;

     label1:
        staticinvoke <java.util.zip.ZipEntry: void validateStringLength(java.lang.String,java.lang.String)>("Comment", r1);

        r0.<java.util.zip.ZipEntry: java.lang.String comment> = r1;

        return;
    }

    public void setCompressedSize(long)
    {
        java.util.zip.ZipEntry r0;
        long l0;

        r0 := @this: java.util.zip.ZipEntry;

        l0 := @parameter0: long;

        r0.<java.util.zip.ZipEntry: long compressedSize> = l0;

        return;
    }

    public void setCrc(long)
    {
        java.util.zip.ZipEntry r0;
        long l0;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.zip.ZipEntry;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 4294967295L;

        if $b2 > 0 goto label1;

        r0.<java.util.zip.ZipEntry: long crc> = l0;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad CRC32: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public void setExtra(byte[])
    {
        java.util.zip.ZipEntry r0;
        byte[] r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 <= 65535 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extra data too long: ");

        $i1 = lengthof r1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<java.util.zip.ZipEntry: byte[] extra> = r1;

        return;
    }

    public void setMethod(int)
    {
        java.util.zip.ZipEntry r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.zip.ZipEntry;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 8 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad method: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        r0.<java.util.zip.ZipEntry: int compressionMethod> = i0;

        return;
    }

    public void setSize(long)
    {
        java.util.zip.ZipEntry r0;
        long l0;
        byte $b1, $b2;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.util.zip.ZipEntry;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        $b2 = l0 cmp 4294967295L;

        if $b2 > 0 goto label1;

        r0.<java.util.zip.ZipEntry: long size> = l0;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad size: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public void setTime(long)
    {
        java.util.zip.ZipEntry r0;
        long l0;
        java.util.GregorianCalendar r1, $r2;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        java.util.Date $r3;

        r0 := @this: java.util.zip.ZipEntry;

        l0 := @parameter0: long;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>()>();

        r1 = $r2;

        $r3 = new java.util.Date;

        specialinvoke $r3.<java.util.Date: void <init>(long)>(l0);

        virtualinvoke r1.<java.util.GregorianCalendar: void setTime(java.util.Date)>($r3);

        i1 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(1);

        if i1 >= 1980 goto label1;

        r0.<java.util.zip.ZipEntry: int modDate> = 33;

        r0.<java.util.zip.ZipEntry: int time> = 0;

        goto label2;

     label1:
        $i2 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(5);

        r0.<java.util.zip.ZipEntry: int modDate> = $i2;

        $i3 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(2);

        $i4 = $i3 + 1;

        $i6 = $i4 << 5;

        $i5 = r0.<java.util.zip.ZipEntry: int modDate>;

        $i7 = $i6 | $i5;

        r0.<java.util.zip.ZipEntry: int modDate> = $i7;

        $i8 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(1);

        $i9 = $i8 - 1980;

        $i10 = $i9 << 9;

        $i11 = r0.<java.util.zip.ZipEntry: int modDate>;

        $i13 = $i10 | $i11;

        r0.<java.util.zip.ZipEntry: int modDate> = $i13;

        $i12 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(13);

        $i15 = $i12 >> 1;

        r0.<java.util.zip.ZipEntry: int time> = $i15;

        $i14 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(12);

        $i16 = $i14 << 5;

        $i17 = r0.<java.util.zip.ZipEntry: int time>;

        $i19 = $i16 | $i17;

        r0.<java.util.zip.ZipEntry: int time> = $i19;

        $i18 = virtualinvoke r1.<java.util.GregorianCalendar: int get(int)>(11);

        $i20 = $i18 << 11;

        $i21 = r0.<java.util.zip.ZipEntry: int time>;

        $i22 = $i20 | $i21;

        r0.<java.util.zip.ZipEntry: int time> = $i22;

     label2:
        return;
    }

    public void setDataOffset(long)
    {
        java.util.zip.ZipEntry r0;
        long l0;

        r0 := @this: java.util.zip.ZipEntry;

        l0 := @parameter0: long;

        r0.<java.util.zip.ZipEntry: long dataOffset> = l0;

        return;
    }

    public long getDataOffset()
    {
        java.util.zip.ZipEntry r0;
        long $l0;

        r0 := @this: java.util.zip.ZipEntry;

        $l0 = r0.<java.util.zip.ZipEntry: long dataOffset>;

        return $l0;
    }

    public java.lang.String toString()
    {
        java.util.zip.ZipEntry r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipEntry;

        $r1 = r0.<java.util.zip.ZipEntry: java.lang.String name>;

        return $r1;
    }

    public void <init>(java.util.zip.ZipEntry)
    {
        java.util.zip.ZipEntry r0, r1;
        java.lang.String $r2, $r3;
        int $i0, $i4, $i5, $i6;
        long $l1, $l2, $l3, $l7, $l8;
        byte[] $r4;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: java.util.zip.ZipEntry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.ZipEntry: long crc> = -1L;

        r0.<java.util.zip.ZipEntry: long compressedSize> = -1L;

        r0.<java.util.zip.ZipEntry: long size> = -1L;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = -1;

        r0.<java.util.zip.ZipEntry: int time> = -1;

        r0.<java.util.zip.ZipEntry: int modDate> = -1;

        r0.<java.util.zip.ZipEntry: int nameLength> = -1;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = -1L;

        r0.<java.util.zip.ZipEntry: long dataOffset> = -1L;

        $r2 = r1.<java.util.zip.ZipEntry: java.lang.String name>;

        r0.<java.util.zip.ZipEntry: java.lang.String name> = $r2;

        $r3 = r1.<java.util.zip.ZipEntry: java.lang.String comment>;

        r0.<java.util.zip.ZipEntry: java.lang.String comment> = $r3;

        $i0 = r1.<java.util.zip.ZipEntry: int time>;

        r0.<java.util.zip.ZipEntry: int time> = $i0;

        $l1 = r1.<java.util.zip.ZipEntry: long size>;

        r0.<java.util.zip.ZipEntry: long size> = $l1;

        $l2 = r1.<java.util.zip.ZipEntry: long compressedSize>;

        r0.<java.util.zip.ZipEntry: long compressedSize> = $l2;

        $l3 = r1.<java.util.zip.ZipEntry: long crc>;

        r0.<java.util.zip.ZipEntry: long crc> = $l3;

        $i4 = r1.<java.util.zip.ZipEntry: int compressionMethod>;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = $i4;

        $i5 = r1.<java.util.zip.ZipEntry: int modDate>;

        r0.<java.util.zip.ZipEntry: int modDate> = $i5;

        $r4 = r1.<java.util.zip.ZipEntry: byte[] extra>;

        r0.<java.util.zip.ZipEntry: byte[] extra> = $r4;

        $i6 = r1.<java.util.zip.ZipEntry: int nameLength>;

        r0.<java.util.zip.ZipEntry: int nameLength> = $i6;

        $l7 = r1.<java.util.zip.ZipEntry: long localHeaderRelOffset>;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = $l7;

        $l8 = r1.<java.util.zip.ZipEntry: long dataOffset>;

        r0.<java.util.zip.ZipEntry: long dataOffset> = $l8;

        return;
    }

    public java.lang.Object clone()
    {
        java.util.zip.ZipEntry r0, r1;
        java.lang.Object $r2, $r5;
        byte[] $r3, $r4, $r6;
        java.lang.CloneNotSupportedException $r7, r9;
        java.lang.AssertionError $r8;

        r0 := @this: java.util.zip.ZipEntry;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.zip.ZipEntry) $r2;

        $r3 = r0.<java.util.zip.ZipEntry: byte[] extra>;

        if $r3 == null goto label2;

        $r4 = r0.<java.util.zip.ZipEntry: byte[] extra>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (byte[]) $r5;

        goto label3;

     label2:
        $r6 = null;

     label3:
        r1.<java.util.zip.ZipEntry: byte[] extra> = $r6;

     label4:
        return r1;

     label5:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r9);

        throw $r8;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
    }

    public int hashCode()
    {
        java.util.zip.ZipEntry r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: java.util.zip.ZipEntry;

        $r1 = r0.<java.util.zip.ZipEntry: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    void <init>(byte[], java.io.InputStream, java.nio.charset.Charset) throws java.io.IOException
    {
        java.util.zip.ZipEntry r0;
        byte[] r1, r6, r7, $r10, $r15;
        java.io.InputStream r2;
        java.nio.charset.Charset r3, r5;
        libcore.io.BufferIterator r4;
        int i0, i1, i2, i3, $i4, $i5, $i9, $i10, $i11, $i13, $i15, $i18, $i19, $i21, $i25, $i32, $i33, $i34, $i35, $i36;
        java.nio.ByteOrder $r8;
        long $l6, $l17, $l20, $l22, $l23, $l24, $l27, $l29, $l30;
        short $s7, $s12, $s14, $s16, $s26, $s28, $s31;
        byte $b8;
        boolean $z0;
        java.lang.String $r9, $r11, $r17, $r19, $r20;
        java.lang.StringBuilder $r12, $r13, $r18, $r21, $r22, $r23;
        java.util.zip.ZipException $r14, $r16;

        r0 := @this: java.util.zip.ZipEntry;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.io.InputStream;

        r3 := @parameter2: java.nio.charset.Charset;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.zip.ZipEntry: long crc> = -1L;

        r0.<java.util.zip.ZipEntry: long compressedSize> = -1L;

        r0.<java.util.zip.ZipEntry: long size> = -1L;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = -1;

        r0.<java.util.zip.ZipEntry: int time> = -1;

        r0.<java.util.zip.ZipEntry: int modDate> = -1;

        r0.<java.util.zip.ZipEntry: int nameLength> = -1;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = -1L;

        r0.<java.util.zip.ZipEntry: long dataOffset> = -1L;

        $i4 = lengthof r1;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r2, r1, 0, $i4);

        $i5 = lengthof r1;

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r4 = staticinvoke <libcore.io.HeapBufferIterator: libcore.io.BufferIterator iterator(byte[],int,int,java.nio.ByteOrder)>(r1, 0, $i5, $r8);

        i0 = virtualinvoke r4.<libcore.io.BufferIterator: int readInt()>();

        $l6 = (long) i0;

        $b8 = $l6 cmp 33639248L;

        if $b8 == 0 goto label1;

        staticinvoke <java.util.zip.ZipFile: void throwZipException(java.lang.String,int)>("Central Directory Entry", i0);

     label1:
        virtualinvoke r4.<libcore.io.BufferIterator: void seek(int)>(8);

        $s7 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        i1 = $s7 & 65535;

        $i10 = i1 & 1;

        if $i10 == 0 goto label2;

        $r16 = new java.util.zip.ZipException;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid General Purpose Bit Flag: ");

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r20);

        throw $r16;

     label2:
        r5 = r3;

        $i9 = i1 & 2048;

        if $i9 == 0 goto label3;

        r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

     label3:
        $s12 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        $i11 = $s12 & 65535;

        r0.<java.util.zip.ZipEntry: int compressionMethod> = $i11;

        $s14 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        $i13 = $s14 & 65535;

        r0.<java.util.zip.ZipEntry: int time> = $i13;

        $s16 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        $i15 = $s16 & 65535;

        r0.<java.util.zip.ZipEntry: int modDate> = $i15;

        $i18 = virtualinvoke r4.<libcore.io.BufferIterator: int readInt()>();

        $l17 = (long) $i18;

        $l20 = $l17 & 4294967295L;

        r0.<java.util.zip.ZipEntry: long crc> = $l20;

        $i19 = virtualinvoke r4.<libcore.io.BufferIterator: int readInt()>();

        $l23 = (long) $i19;

        $l24 = $l23 & 4294967295L;

        r0.<java.util.zip.ZipEntry: long compressedSize> = $l24;

        $i21 = virtualinvoke r4.<libcore.io.BufferIterator: int readInt()>();

        $l22 = (long) $i21;

        $l27 = $l22 & 4294967295L;

        r0.<java.util.zip.ZipEntry: long size> = $l27;

        $s28 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        $i25 = $s28 & 65535;

        r0.<java.util.zip.ZipEntry: int nameLength> = $i25;

        $s26 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        i2 = $s26 & 65535;

        $s31 = virtualinvoke r4.<libcore.io.BufferIterator: short readShort()>();

        i3 = $s31 & 65535;

        virtualinvoke r4.<libcore.io.BufferIterator: void seek(int)>(42);

        $i32 = virtualinvoke r4.<libcore.io.BufferIterator: int readInt()>();

        $l29 = (long) $i32;

        $l30 = $l29 & 4294967295L;

        r0.<java.util.zip.ZipEntry: long localHeaderRelOffset> = $l30;

        $i33 = r0.<java.util.zip.ZipEntry: int nameLength>;

        r6 = newarray (byte)[$i33];

        $i34 = lengthof r6;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r2, r6, 0, $i34);

        $z0 = staticinvoke <java.util.zip.ZipEntry: boolean containsNulByte(byte[])>(r6);

        if $z0 == 0 goto label4;

        $r14 = new java.util.zip.ZipException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filename contains NUL byte: ");

        $r19 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r6);

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.util.zip.ZipException: void <init>(java.lang.String)>($r17);

        throw $r14;

     label4:
        $r9 = new java.lang.String;

        $i36 = lengthof r6;

        specialinvoke $r9.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r6, 0, $i36, r5);

        r0.<java.util.zip.ZipEntry: java.lang.String name> = $r9;

        if i2 <= 0 goto label5;

        $r10 = newarray (byte)[i2];

        r0.<java.util.zip.ZipEntry: byte[] extra> = $r10;

        $r15 = r0.<java.util.zip.ZipEntry: byte[] extra>;

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r2, $r15, 0, i2);

     label5:
        if i3 <= 0 goto label6;

        r7 = newarray (byte)[i3];

        staticinvoke <libcore.io.Streams: void readFully(java.io.InputStream,byte[],int,int)>(r2, r7, 0, i3);

        $r11 = new java.lang.String;

        $i35 = lengthof r7;

        specialinvoke $r11.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r7, 0, $i35, r5);

        r0.<java.util.zip.ZipEntry: java.lang.String comment> = $r11;

     label6:
        return;
    }

    private static boolean containsNulByte(byte[])
    {
        byte[] r0, r1;
        int i0, i1;
        byte b2;

        r0 := @parameter0: byte[];

        r1 = r0;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        b2 = r1[i1];

        if b2 != 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static void validateStringLength(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r9;
        byte[] r2;
        java.nio.charset.Charset $r3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $i0 = lengthof r2;

        if $i0 <= 65535 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too long: ");

        $i1 = lengthof r2;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.ZipEntry: int STORED> = 0;

        <java.util.zip.ZipEntry: int DEFLATED> = 8;

        return;
    }
}
