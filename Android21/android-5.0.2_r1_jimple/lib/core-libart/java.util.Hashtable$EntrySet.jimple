final class java.util.Hashtable$EntrySet extends java.util.AbstractSet
{
    final java.util.Hashtable this$0;

    private void <init>(java.util.Hashtable)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.util.Hashtable;

        r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable$EntryIterator $r1;
        java.util.Hashtable $r2;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r1 = new java.util.Hashtable$EntryIterator;

        $r2 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        specialinvoke $r1.<java.util.Hashtable$EntryIterator: void <init>(java.util.Hashtable,java.util.Hashtable$1)>($r2, null);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.Hashtable $r3;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <java.util.Hashtable: boolean access$1100(java.util.Hashtable,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1, $r4, $r5;
        java.util.Map$Entry r2;
        boolean $z0, $z1;
        java.util.Hashtable $r3;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <java.util.Hashtable: boolean access$1200(java.util.Hashtable,java.lang.Object,java.lang.Object)>($r3, $r4, $r5);

        return $z1;
    }

    public int size()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;
        int $i0;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        $i0 = virtualinvoke $r1.<java.util.Hashtable: int size()>();

        return $i0;
    }

    public void clear()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Collection r1;
        java.util.Hashtable r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean removeAll(java.util.Collection)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Collection r1;
        java.util.Hashtable r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean retainAll(java.util.Collection)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Collection r1;
        java.util.Hashtable r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.util.Collection;

        $r4 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean containsAll(java.util.Collection)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object r1;
        java.util.Hashtable r2, $r4;
        java.lang.Throwable r3, $r5;
        boolean $z0;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $r4 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean equals(java.lang.Object)>(r1);

        exitmonitor r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int hashCode()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable $r1;
        int $i0;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r1 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        $i0 = virtualinvoke $r1.<java.util.Hashtable: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String $r4;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r3 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<java.util.AbstractSet: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.Object[] $r4;

        r0 := @this: java.util.Hashtable$EntrySet;

        $r3 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = specialinvoke r0.<java.util.AbstractSet: java.lang.Object[] toArray()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Hashtable$EntrySet r0;
        java.lang.Object[] r1, $r5;
        java.util.Hashtable r2, $r4;
        java.lang.Throwable r3, $r6;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.lang.Object[];

        $r4 = r0.<java.util.Hashtable$EntrySet: java.util.Hashtable this$0>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = specialinvoke r0.<java.util.AbstractSet: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        exitmonitor r2;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label4:
        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void <init>(java.util.Hashtable, java.util.Hashtable$1)
    {
        java.util.Hashtable$EntrySet r0;
        java.util.Hashtable r1;
        java.util.Hashtable$1 r2;

        r0 := @this: java.util.Hashtable$EntrySet;

        r1 := @parameter0: java.util.Hashtable;

        r2 := @parameter1: java.util.Hashtable$1;

        specialinvoke r0.<java.util.Hashtable$EntrySet: void <init>(java.util.Hashtable)>(r1);

        return;
    }
}
