public class javax.crypto.KeyAgreement extends java.lang.Object
{
    private static final java.lang.String SERVICE;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.security.SecureRandom RANDOM;
    private java.security.Provider provider;
    private final java.security.Provider specifiedProvider;
    private javax.crypto.KeyAgreementSpi spiImpl;
    private final java.lang.String algorithm;
    private final java.lang.Object initLock;

    protected void <init>(javax.crypto.KeyAgreementSpi, java.security.Provider, java.lang.String)
    {
        javax.crypto.KeyAgreement r0;
        javax.crypto.KeyAgreementSpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        java.lang.Object $r4;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: javax.crypto.KeyAgreementSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<javax.crypto.KeyAgreement: java.lang.Object initLock> = $r4;

        r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl> = r1;

        r0.<javax.crypto.KeyAgreement: java.security.Provider specifiedProvider> = r2;

        r0.<javax.crypto.KeyAgreement: java.lang.String algorithm> = r3;

        return;
    }

    public final java.lang.String getAlgorithm()
    {
        javax.crypto.KeyAgreement r0;
        java.lang.String $r1;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = r0.<javax.crypto.KeyAgreement: java.lang.String algorithm>;

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        javax.crypto.KeyAgreement r0;
        java.security.Provider $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi()>();

        $r2 = r0.<javax.crypto.KeyAgreement: java.security.Provider provider>;

        return $r2;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        javax.crypto.KeyAgreement $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String,java.security.Provider)>(r0, null);

        return $r1;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        javax.crypto.KeyAgreement $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provider is null or empty");

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static final javax.crypto.KeyAgreement getInstance(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0;
        java.security.Provider r1;
        javax.crypto.KeyAgreement $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getKeyAgreement(java.lang.String,java.security.Provider)>(r0, r1);

        return $r2;
    }

    private static javax.crypto.KeyAgreement getKeyAgreement(java.lang.String, java.security.Provider) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r7, $r11, $r17;
        java.security.Provider r1;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider $r2;
        javax.crypto.KeyAgreement $r3;
        java.security.NoSuchAlgorithmException $r4, $r12;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r10, $r13, $r14, $r15;
        java.lang.NullPointerException $r16;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r0 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("algorithm == null");

        throw $r16;

     label1:
        $r2 = staticinvoke <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithm(java.security.Key,java.security.Provider,java.lang.String)>(null, r1, r0);

        if $r2 != null goto label3;

        if r1 != null goto label2;

        $r12 = new java.security.NoSuchAlgorithmException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider found for ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r17);

        throw $r12;

     label2:
        $r4 = new java.security.NoSuchAlgorithmException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider ");

        $r7 = virtualinvoke r1.<java.security.Provider: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not provide ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r11);

        throw $r4;

     label3:
        $r3 = new javax.crypto.KeyAgreement;

        specialinvoke $r3.<javax.crypto.KeyAgreement: void <init>(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)>(null, r1, r0);

        return $r3;
    }

    private static org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithm(java.security.Key, java.security.Provider, java.lang.String)
    {
        java.security.Key r0;
        java.security.Provider r1;
        java.lang.String r2;
        java.security.Provider$Service r3, r5;
        java.util.Iterator r4;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r6, $r9;
        org.apache.harmony.security.fortress.Engine $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.util.ArrayList r10;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.Provider;

        r2 := @parameter2: java.lang.String;

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<java.security.Provider: java.security.Provider$Service getService(java.lang.String,java.lang.String)>("KeyAgreement", r2);

        if r3 != null goto label1;

        return null;

     label1:
        $r9 = staticinvoke <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithmWithProvider(java.security.Key,java.security.Provider$Service)>(r0, r3);

        return $r9;

     label2:
        $r7 = <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE>;

        r10 = virtualinvoke $r7.<org.apache.harmony.security.fortress.Engine: java.util.ArrayList getServices(java.lang.String)>(r2);

        if r10 != null goto label3;

        return null;

     label3:
        r4 = virtualinvoke r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.security.Provider$Service) $r8;

        r6 = staticinvoke <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithmWithProvider(java.security.Key,java.security.Provider$Service)>(r0, r5);

        if r6 == null goto label5;

        return r6;

     label5:
        goto label4;

     label6:
        return null;
    }

    private static org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithmWithProvider(java.security.Key, java.security.Provider$Service)
    {
        java.security.Key r0;
        java.security.Provider$Service r1;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r2;
        org.apache.harmony.security.fortress.Engine $r3;
        java.lang.Object $r4, $r6;
        java.security.Provider $r5;
        boolean $z0, $z1;
        java.security.NoSuchAlgorithmException $r7;

        r0 := @parameter0: java.security.Key;

        r1 := @parameter1: java.security.Provider$Service;

     label1:
        if r0 == null goto label3;

        $z1 = virtualinvoke r1.<java.security.Provider$Service: boolean supportsParameter(java.lang.Object)>(r0);

        if $z1 != 0 goto label3;

     label2:
        return null;

     label3:
        $r3 = <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r3.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.security.Provider$Service,java.lang.String)>(r1, null);

        $r4 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        if $r4 == null goto label4;

        $r5 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        if $r5 != null goto label5;

     label4:
        return null;

     label5:
        $r6 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $z0 = $r6 instanceof javax.crypto.KeyAgreementSpi;

        if $z0 != 0 goto label7;

     label6:
        return null;

     label7:
        return r2;

     label8:
        $r7 := @caughtexception;

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label8;
        catch java.security.NoSuchAlgorithmException from label3 to label4 with label8;
        catch java.security.NoSuchAlgorithmException from label5 to label6 with label8;
    }

    private javax.crypto.KeyAgreementSpi getSpi(java.security.Key)
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.lang.Object r2, $r5, $r9;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r3;
        java.lang.Throwable r4, $r19;
        javax.crypto.KeyAgreementSpi $r6, $r10, $r12, $r20;
        java.lang.String $r7, $r17, $r18;
        java.security.Provider $r8, $r11;
        java.security.ProviderException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        $r5 = r0.<javax.crypto.KeyAgreement: java.lang.Object initLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        if $r6 == null goto label3;

        if r1 != null goto label3;

        $r20 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        exitmonitor r2;

     label2:
        return $r20;

     label3:
        $r8 = r0.<javax.crypto.KeyAgreement: java.security.Provider specifiedProvider>;

        $r7 = r0.<javax.crypto.KeyAgreement: java.lang.String algorithm>;

        r3 = staticinvoke <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine$SpiAndProvider tryAlgorithm(java.security.Key,java.security.Provider,java.lang.String)>(r1, $r8, $r7);

        if r3 != null goto label4;

        $r13 = new java.security.ProviderException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider for ");

        $r17 = virtualinvoke r0.<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.security.ProviderException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label4:
        $r9 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r10 = (javax.crypto.KeyAgreementSpi) $r9;

        r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl> = $r10;

        $r11 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        r0.<javax.crypto.KeyAgreement: java.security.Provider provider> = $r11;

        $r12 = r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi spiImpl>;

        exitmonitor r2;

     label5:
        return $r12;

     label6:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r2;

     label7:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private javax.crypto.KeyAgreementSpi getSpi()
    {
        javax.crypto.KeyAgreement r0;
        javax.crypto.KeyAgreementSpi $r1;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi(java.security.Key)>(null);

        return $r1;
    }

    public final void init(java.security.Key) throws java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        javax.crypto.KeyAgreementSpi $r2;
        java.security.SecureRandom $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        $r2 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi(java.security.Key)>(r1);

        $r3 = <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM>;

        virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>(r1, $r3);

        return;
    }

    public final void init(java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.SecureRandom r2;
        javax.crypto.KeyAgreementSpi $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.SecureRandom;

        $r3 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r3.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)>(r1, r2);

        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        javax.crypto.KeyAgreementSpi $r3;
        java.security.SecureRandom $r4;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        $r3 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi(java.security.Key)>(r1);

        $r4 = <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM>;

        virtualinvoke $r3.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r1, r2, $r4);

        return;
    }

    public final void init(java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1;
        java.security.spec.AlgorithmParameterSpec r2;
        java.security.SecureRandom r3;
        javax.crypto.KeyAgreementSpi $r4;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        r3 := @parameter2: java.security.SecureRandom;

        $r4 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r4.<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>(r1, r2, r3);

        return;
    }

    public final java.security.Key doPhase(java.security.Key, boolean) throws java.security.InvalidKeyException, java.lang.IllegalStateException
    {
        javax.crypto.KeyAgreement r0;
        java.security.Key r1, $r3;
        boolean z0;
        javax.crypto.KeyAgreementSpi $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.security.Key;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi()>();

        $r3 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)>(r1, z0);

        return $r3;
    }

    public final byte[] generateSecret() throws java.lang.IllegalStateException
    {
        javax.crypto.KeyAgreement r0;
        javax.crypto.KeyAgreementSpi $r1;
        byte[] $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        $r1 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi()>();

        $r2 = virtualinvoke $r1.<javax.crypto.KeyAgreementSpi: byte[] engineGenerateSecret()>();

        return $r2;
    }

    public final int generateSecret(byte[], int) throws java.lang.IllegalStateException, javax.crypto.ShortBufferException
    {
        javax.crypto.KeyAgreement r0;
        byte[] r1;
        int i0, $i1;
        javax.crypto.KeyAgreementSpi $r2;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi()>();

        $i1 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)>(r1, i0);

        return $i1;
    }

    public final javax.crypto.SecretKey generateSecret(java.lang.String) throws java.lang.IllegalStateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException
    {
        javax.crypto.KeyAgreement r0;
        java.lang.String r1;
        javax.crypto.KeyAgreementSpi $r2;
        javax.crypto.SecretKey $r3;

        r0 := @this: javax.crypto.KeyAgreement;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<javax.crypto.KeyAgreement: javax.crypto.KeyAgreementSpi getSpi()>();

        $r3 = virtualinvoke $r2.<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)>(r1);

        return $r3;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;
        java.security.SecureRandom $r1;

        <javax.crypto.KeyAgreement: java.lang.String SERVICE> = "KeyAgreement";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("KeyAgreement");

        <javax.crypto.KeyAgreement: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <javax.crypto.KeyAgreement: java.security.SecureRandom RANDOM> = $r1;

        return;
    }
}
