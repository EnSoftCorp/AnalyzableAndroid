class java.util.prefs.AbstractPreferences$EventDispatcher extends java.lang.Thread
{

    void <init>(java.lang.String)
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.lang.String r1;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>(r1);

        return;
    }

    public void run()
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.util.EventObject r1;
        java.lang.InterruptedException r2, $r10;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        java.util.prefs.PreferenceChangeEvent $r4;
        java.util.List $r5, $r7, $r9;
        java.util.prefs.NodeChangeEvent $r6, $r8;
        java.util.prefs.AbstractPreferences r11;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

     label1:
        r1 = specialinvoke r0.<java.util.prefs.AbstractPreferences$EventDispatcher: java.util.EventObject getEventObject()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r2 = $r10;

        virtualinvoke r2.<java.lang.InterruptedException: void printStackTrace()>();

        goto label1;

     label4:
        $r3 = virtualinvoke r1.<java.util.EventObject: java.lang.Object getSource()>();

        r11 = (java.util.prefs.AbstractPreferences) $r3;

        $z0 = r1 instanceof java.util.prefs.AbstractPreferences$NodeAddEvent;

        if $z0 == 0 goto label5;

        $r8 = (java.util.prefs.NodeChangeEvent) r1;

        $r9 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$000(java.util.prefs.AbstractPreferences)>(r11);

        specialinvoke r0.<java.util.prefs.AbstractPreferences$EventDispatcher: void dispatchNodeAdd(java.util.prefs.NodeChangeEvent,java.util.List)>($r8, $r9);

        goto label7;

     label5:
        $z1 = r1 instanceof java.util.prefs.AbstractPreferences$NodeRemoveEvent;

        if $z1 == 0 goto label6;

        $r6 = (java.util.prefs.NodeChangeEvent) r1;

        $r7 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$000(java.util.prefs.AbstractPreferences)>(r11);

        specialinvoke r0.<java.util.prefs.AbstractPreferences$EventDispatcher: void dispatchNodeRemove(java.util.prefs.NodeChangeEvent,java.util.List)>($r6, $r7);

        goto label7;

     label6:
        $z2 = r1 instanceof java.util.prefs.PreferenceChangeEvent;

        if $z2 == 0 goto label7;

        $r4 = (java.util.prefs.PreferenceChangeEvent) r1;

        $r5 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$100(java.util.prefs.AbstractPreferences)>(r11);

        specialinvoke r0.<java.util.prefs.AbstractPreferences$EventDispatcher: void dispatchPrefChange(java.util.prefs.PreferenceChangeEvent,java.util.List)>($r4, $r5);

     label7:
        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private java.util.EventObject getEventObject() throws java.lang.InterruptedException
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.util.List r1, $r4, $r5, $r6, $r8, $r10;
        java.util.EventObject r2;
        java.lang.Throwable r3, $r11;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

        $r4 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$200()>();

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$200()>();

        $z0 = interfaceinvoke $r5.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r10 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$200()>();

        virtualinvoke $r10.<java.lang.Object: void wait()>();

     label2:
        $r6 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$200()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.util.EventObject) $r7;

        $r8 = staticinvoke <java.util.prefs.AbstractPreferences: java.util.List access$200()>();

        interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(0);

        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r11 := @caughtexception;

        r3 = $r11;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void dispatchPrefChange(java.util.prefs.PreferenceChangeEvent, java.util.List)
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.util.prefs.PreferenceChangeEvent r1;
        java.util.List r2, r3;
        java.util.Iterator r4;
        java.util.EventListener r5;
        java.lang.Throwable r6, $r10;
        boolean $z0;
        java.lang.Object $r8;
        java.util.prefs.PreferenceChangeListener $r9;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

        r1 := @parameter0: java.util.prefs.PreferenceChangeEvent;

        r2 := @parameter1: java.util.List;

        r3 = r2;

        entermonitor r2;

     label1:
        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.EventListener) $r8;

        $r9 = (java.util.prefs.PreferenceChangeListener) r5;

        interfaceinvoke $r9.<java.util.prefs.PreferenceChangeListener: void preferenceChange(java.util.prefs.PreferenceChangeEvent)>(r1);

        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r3;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void dispatchNodeRemove(java.util.prefs.NodeChangeEvent, java.util.List)
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.util.prefs.NodeChangeEvent r1;
        java.util.List r2, r3;
        java.util.Iterator r4;
        java.util.EventListener r5;
        java.lang.Throwable r6, $r10;
        boolean $z0;
        java.lang.Object $r8;
        java.util.prefs.NodeChangeListener $r9;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

        r1 := @parameter0: java.util.prefs.NodeChangeEvent;

        r2 := @parameter1: java.util.List;

        r3 = r2;

        entermonitor r2;

     label1:
        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.EventListener) $r8;

        $r9 = (java.util.prefs.NodeChangeListener) r5;

        interfaceinvoke $r9.<java.util.prefs.NodeChangeListener: void childRemoved(java.util.prefs.NodeChangeEvent)>(r1);

        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r3;

     label6:
        throw r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void dispatchNodeAdd(java.util.prefs.NodeChangeEvent, java.util.List)
    {
        java.util.prefs.AbstractPreferences$EventDispatcher r0;
        java.util.prefs.NodeChangeEvent r1;
        java.util.List r2, r3;
        java.util.Iterator r4;
        java.util.EventListener r5;
        java.util.prefs.NodeChangeListener r6;
        java.lang.Throwable r7, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: java.util.prefs.AbstractPreferences$EventDispatcher;

        r1 := @parameter0: java.util.prefs.NodeChangeEvent;

        r2 := @parameter1: java.util.List;

        r3 = r2;

        entermonitor r2;

     label1:
        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.EventListener) $r9;

        r6 = (java.util.prefs.NodeChangeListener) r5;

        interfaceinvoke r6.<java.util.prefs.NodeChangeListener: void childAdded(java.util.prefs.NodeChangeEvent)>(r1);

        goto label2;

     label3:
        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r10 := @caughtexception;

        r7 = $r10;

        exitmonitor r3;

     label6:
        throw r7;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
