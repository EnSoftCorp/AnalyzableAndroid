public class org.json.JSONArray extends java.lang.Object
{
    private final java.util.List values;

    public void <init>()
    {
        org.json.JSONArray r0;
        java.util.ArrayList $r1;

        r0 := @this: org.json.JSONArray;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.json.JSONArray: java.util.List values> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        org.json.JSONArray r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3, $r4;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<org.json.JSONArray: void <init>()>();

        if r1 == null goto label2;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = staticinvoke <org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>($r3);

        virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }

    public void <init>(org.json.JSONTokener) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r4;
        org.json.JSONTokener r1;
        java.lang.Object r2;
        boolean $z0;
        org.json.JSONException $r3;
        java.util.List $r5;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: org.json.JSONTokener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r2 = virtualinvoke r1.<org.json.JSONTokener: java.lang.Object nextValue()>();

        $z0 = r2 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONArray) r2;

        $r5 = $r4.<org.json.JSONArray: java.util.List values>;

        r0.<org.json.JSONArray: java.util.List values> = $r5;

        goto label2;

     label1:
        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.String)>(r2, "JSONArray");

        throw $r3;

     label2:
        return;
    }

    public void <init>(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        java.lang.String r1;
        org.json.JSONTokener $r2;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.json.JSONTokener;

        specialinvoke $r2.<org.json.JSONTokener: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<org.json.JSONArray: void <init>(org.json.JSONTokener)>($r2);

        return;
    }

    public void <init>(java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        java.lang.Object r1, $r4, $r5;
        int i0, i1;
        java.lang.Class $r2, $r10;
        boolean $z0;
        java.util.ArrayList $r3;
        org.json.JSONException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r12;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r7 = new org.json.JSONException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a primitive array: ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.json.JSONException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r1);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<org.json.JSONArray: java.util.List values> = $r3;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object get(java.lang.Object,int)>(r1, i1);

        $r5 = staticinvoke <org.json.JSONObject: java.lang.Object wrap(java.lang.Object)>($r4);

        virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r5);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public int length()
    {
        org.json.JSONArray r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.json.JSONArray;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.json.JSONArray put(boolean)
    {
        org.json.JSONArray r0;
        boolean z0;
        java.util.List $r1;
        java.lang.Boolean $r2;

        r0 := @this: org.json.JSONArray;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public org.json.JSONArray put(double) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        double d0, $d1;
        java.util.List $r1;
        java.lang.Double $r2;

        r0 := @this: org.json.JSONArray;

        d0 := @parameter0: double;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $d1 = staticinvoke <org.json.JSON: double checkDouble(double)>(d0);

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public org.json.JSONArray put(int)
    {
        org.json.JSONArray r0;
        int i0;
        java.util.List $r1;
        java.lang.Integer $r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public org.json.JSONArray put(long)
    {
        org.json.JSONArray r0;
        long l0;
        java.util.List $r1;
        java.lang.Long $r2;

        r0 := @this: org.json.JSONArray;

        l0 := @parameter0: long;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        return r0;
    }

    public org.json.JSONArray put(java.lang.Object)
    {
        org.json.JSONArray r0;
        java.lang.Object r1;
        java.util.List $r2;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.json.JSONArray: java.util.List values>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    void checkedPut(java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Number $r3;
        double $d0;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r3.<java.lang.Number: double doubleValue()>();

        staticinvoke <org.json.JSON: double checkDouble(double)>($d0);

     label1:
        virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(r1);

        return;
    }

    public org.json.JSONArray put(int, boolean) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r2;
        int i0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r2 = virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return $r2;
    }

    public org.json.JSONArray put(int, double) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r2;
        int i0;
        double d0;
        java.lang.Double $r1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r2 = virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return $r2;
    }

    public org.json.JSONArray put(int, int) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r2;
        int i0, i1;
        java.lang.Integer $r1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2 = virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return $r2;
    }

    public org.json.JSONArray put(int, long) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r2;
        int i0;
        long l1;
        java.lang.Long $r1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2 = virtualinvoke r0.<org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)>(i0, $r1);

        return $r2;
    }

    public org.json.JSONArray put(int, java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0, $i1;
        java.lang.Object r1;
        boolean $z0;
        java.util.List $r2, $r3, $r5;
        java.lang.Number $r6;
        double $d0;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $z0 = r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r6 = (java.lang.Number) r1;

        $d0 = virtualinvoke $r6.<java.lang.Number: double doubleValue()>();

        staticinvoke <org.json.JSON: double checkDouble(double)>($d0);

     label1:
        $r2 = r0.<org.json.JSONArray: java.util.List values>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 > i0 goto label2;

        $r5 = r0.<org.json.JSONArray: java.util.List values>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(null);

        goto label1;

     label2:
        $r3 = r0.<org.json.JSONArray: java.util.List values>;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public boolean isNull(int)
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        if r1 == null goto label1;

        $r2 = <org.json.JSONObject: java.lang.Object NULL>;

        if r1 != $r2 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Object get(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0, $i1;
        java.lang.Object r1;
        java.util.List $r2, $r14;
        org.json.JSONException $r3, $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r11, $r12, $r13, $r15, $r16, $r18;
        java.lang.String $r8, $r17;
        java.lang.IndexOutOfBoundsException $r9;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.json.JSONArray: java.util.List values>;

        r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        if r1 != null goto label2;

        $r3 = new org.json.JSONException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value at ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.json.JSONException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label2:
        return r1;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.json.JSONException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Index ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range [0..");

        $r14 = r0.<org.json.JSONArray: java.util.List values>;

        $i1 = interfaceinvoke $r14.<java.util.List: int size()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.json.JSONException: void <init>(java.lang.String)>($r17);

        throw $r10;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public java.lang.Object opt(int)
    {
        org.json.JSONArray r0;
        int i0, $i1;
        java.util.List $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.json.JSONArray: java.util.List values>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        return $r3;
    }

    public java.lang.Object remove(int)
    {
        org.json.JSONArray r0;
        int i0, $i1;
        java.util.List $r1, $r2;
        java.lang.Object $r3;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

     label1:
        return null;

     label2:
        $r2 = r0.<org.json.JSONArray: java.util.List values>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0);

        return $r3;
    }

    public boolean getBoolean(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        java.lang.Boolean r2;
        boolean $z0;
        java.lang.Integer $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Boolean toBoolean(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, "boolean");

        throw $r4;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public boolean optBoolean(int)
    {
        org.json.JSONArray r0;
        int i0;
        boolean $z0;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.json.JSONArray: boolean optBoolean(int,boolean)>(i0, 0);

        return $z0;
    }

    public boolean optBoolean(int, boolean)
    {
        org.json.JSONArray r0;
        int i0;
        boolean z0, $z1;
        java.lang.Object r1;
        java.lang.Boolean r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Boolean toBoolean(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<java.lang.Boolean: boolean booleanValue()>();

        goto label2;

     label1:
        $z1 = z0;

     label2:
        return $z1;
    }

    public double getDouble(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        java.lang.Double r2;
        double $d0;
        java.lang.Integer $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Double toDouble(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, "double");

        throw $r4;

     label1:
        $d0 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        return $d0;
    }

    public double optDouble(int)
    {
        org.json.JSONArray r0;
        int i0;
        double $d0;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $d0 = virtualinvoke r0.<org.json.JSONArray: double optDouble(int,double)>(i0, #NaN);

        return $d0;
    }

    public double optDouble(int, double)
    {
        org.json.JSONArray r0;
        int i0;
        double d0, $d1;
        java.lang.Object r1;
        java.lang.Double r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Double toDouble(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $d1 = virtualinvoke r2.<java.lang.Double: double doubleValue()>();

        goto label2;

     label1:
        $d1 = d0;

     label2:
        return $d1;
    }

    public int getInt(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Integer r2, $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Integer toInteger(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, "int");

        throw $r4;

     label1:
        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        return $i1;
    }

    public int optInt(int)
    {
        org.json.JSONArray r0;
        int i0, $i1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.json.JSONArray: int optInt(int,int)>(i0, 0);

        return $i1;
    }

    public int optInt(int, int)
    {
        org.json.JSONArray r0;
        int i0, i1, $i2;
        java.lang.Object r1;
        java.lang.Integer r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Integer toInteger(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $i2 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    public long getLong(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        java.lang.Long r2;
        long $l1;
        java.lang.Integer $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Long toLong(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, "long");

        throw $r4;

     label1:
        $l1 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        return $l1;
    }

    public long optLong(int)
    {
        org.json.JSONArray r0;
        int i0;
        long $l1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<org.json.JSONArray: long optLong(int,long)>(i0, 0L);

        return $l1;
    }

    public long optLong(int, long)
    {
        org.json.JSONArray r0;
        int i0;
        long l1, $l2;
        java.lang.Object r1;
        java.lang.Long r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.Long toLong(java.lang.Object)>(r1);

        if r2 == null goto label1;

        $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>();

        goto label2;

     label1:
        $l2 = l1;

     label2:
        return $l2;
    }

    public java.lang.String getString(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        java.lang.String r2;
        java.lang.Integer $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        r2 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>(r1);

        if r2 != null goto label1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r3, r1, "String");

        throw $r4;

     label1:
        return r2;
    }

    public java.lang.String optString(int)
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.String optString(int,java.lang.String)>(i0, "");

        return $r1;
    }

    public java.lang.String optString(int, java.lang.String)
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.String r1, r3, $r4;
        java.lang.Object r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        r3 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>(r2);

        if r3 == null goto label1;

        $r4 = r3;

        goto label2;

     label1:
        $r4 = r1;

     label2:
        return $r4;
    }

    public org.json.JSONArray getJSONArray(int) throws org.json.JSONException
    {
        org.json.JSONArray r0, $r4;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Integer $r2;
        org.json.JSONException $r3;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = r1 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONArray) r1;

        return $r4;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r2, r1, "JSONArray");

        throw $r3;
    }

    public org.json.JSONArray optJSONArray(int)
    {
        org.json.JSONArray r0, $r2;
        int i0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        $z0 = r1 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r2 = (org.json.JSONArray) r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.json.JSONObject getJSONObject(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Integer $r2;
        org.json.JSONException $r3;
        org.json.JSONObject $r4;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object get(int)>(i0);

        $z0 = r1 instanceof org.json.JSONObject;

        if $z0 == 0 goto label1;

        $r4 = (org.json.JSONObject) r1;

        return $r4;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <org.json.JSON: org.json.JSONException typeMismatch(java.lang.Object,java.lang.Object,java.lang.String)>($r2, r1, "JSONObject");

        throw $r3;
    }

    public org.json.JSONObject optJSONObject(int)
    {
        org.json.JSONArray r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        org.json.JSONObject $r2;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i0);

        $z0 = r1 instanceof org.json.JSONObject;

        if $z0 == 0 goto label1;

        $r2 = (org.json.JSONObject) r1;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public org.json.JSONObject toJSONObject(org.json.JSONArray) throws org.json.JSONException
    {
        org.json.JSONArray r0, r1;
        org.json.JSONObject r2, $r4;
        int i0, i1, $i2, $i3;
        java.lang.String r3;
        java.util.List $r5;
        java.lang.Object $r6, $r7;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: org.json.JSONArray;

        $r4 = new org.json.JSONObject;

        specialinvoke $r4.<org.json.JSONObject: void <init>()>();

        r2 = $r4;

        $i2 = virtualinvoke r1.<org.json.JSONArray: int length()>();

        $r5 = r0.<org.json.JSONArray: java.util.List values>;

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        if i0 != 0 goto label1;

        return null;

     label1:
        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = virtualinvoke r1.<org.json.JSONArray: java.lang.Object opt(int)>(i1);

        r3 = staticinvoke <org.json.JSON: java.lang.String toString(java.lang.Object)>($r6);

        $r7 = virtualinvoke r0.<org.json.JSONArray: java.lang.Object opt(int)>(i1);

        virtualinvoke r2.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>(r3, $r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        return r2;
    }

    public java.lang.String join(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        java.lang.String r1, $r11;
        org.json.JSONStringer r2, $r3;
        int i0, i1;
        org.json.JSONStringer$Scope $r4, $r7, $r8;
        java.util.List $r6, $r12;
        java.lang.StringBuilder $r10, $r16;
        java.lang.Object $r14;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.String;

        $r3 = new org.json.JSONStringer;

        specialinvoke $r3.<org.json.JSONStringer: void <init>()>();

        r2 = $r3;

        $r4 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        virtualinvoke r2.<org.json.JSONStringer: org.json.JSONStringer open(org.json.JSONStringer$Scope,java.lang.String)>($r4, "");

        i0 = 0;

        $r6 = r0.<org.json.JSONArray: java.util.List values>;

        i1 = interfaceinvoke $r6.<java.util.List: int size()>();

     label1:
        if i0 >= i1 goto label3;

        if i0 <= 0 goto label2;

        $r16 = r2.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

     label2:
        $r12 = r0.<org.json.JSONArray: java.util.List values>;

        $r14 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i0);

        virtualinvoke r2.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>($r14);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r8 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        $r7 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        virtualinvoke r2.<org.json.JSONStringer: org.json.JSONStringer close(org.json.JSONStringer$Scope,org.json.JSONStringer$Scope,java.lang.String)>($r8, $r7, "");

        $r10 = r2.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String toString()
    {
        org.json.JSONArray r0;
        org.json.JSONStringer r1, $r2;
        java.lang.String $r3;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONArray;

     label1:
        $r2 = new org.json.JSONStringer;

        specialinvoke $r2.<org.json.JSONStringer: void <init>()>();

        r1 = $r2;

        virtualinvoke r0.<org.json.JSONArray: void writeTo(org.json.JSONStringer)>(r1);

        $r3 = virtualinvoke r1.<org.json.JSONStringer: java.lang.String toString()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch org.json.JSONException from label1 to label2 with label3;
    }

    public java.lang.String toString(int) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        int i0;
        org.json.JSONStringer r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.json.JSONArray;

        i0 := @parameter0: int;

        $r2 = new org.json.JSONStringer;

        specialinvoke $r2.<org.json.JSONStringer: void <init>(int)>(i0);

        r1 = $r2;

        virtualinvoke r0.<org.json.JSONArray: void writeTo(org.json.JSONStringer)>(r1);

        $r3 = virtualinvoke r1.<org.json.JSONStringer: java.lang.String toString()>();

        return $r3;
    }

    void writeTo(org.json.JSONStringer) throws org.json.JSONException
    {
        org.json.JSONArray r0;
        org.json.JSONStringer r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.List $r5;
        boolean $z0;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: org.json.JSONStringer;

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer array()>();

        $r5 = r0.<org.json.JSONArray: java.util.List values>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>(r3);

        goto label1;

     label2:
        virtualinvoke r1.<org.json.JSONStringer: org.json.JSONStringer endArray()>();

        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.json.JSONArray r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        java.util.List $r3, $r4;

        r0 := @this: org.json.JSONArray;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof org.json.JSONArray;

        if $z0 == 0 goto label1;

        $r2 = (org.json.JSONArray) r1;

        $r4 = $r2.<org.json.JSONArray: java.util.List values>;

        $r3 = r0.<org.json.JSONArray: java.util.List values>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public int hashCode()
    {
        org.json.JSONArray r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: org.json.JSONArray;

        $r1 = r0.<org.json.JSONArray: java.util.List values>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }
}
