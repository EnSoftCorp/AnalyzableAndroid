public abstract class java.util.Calendar extends java.lang.Object implements java.io.Serializable, java.lang.Cloneable, java.lang.Comparable
{
    private static final long serialVersionUID;
    protected boolean areFieldsSet;
    protected int[] fields;
    protected boolean[] isSet;
    protected boolean isTimeSet;
    protected long time;
    transient int lastTimeFieldSet;
    transient int lastDateFieldSet;
    private boolean lenient;
    private int firstDayOfWeek;
    private int minimalDaysInFirstWeek;
    private java.util.TimeZone zone;
    public static final int JANUARY;
    public static final int FEBRUARY;
    public static final int MARCH;
    public static final int APRIL;
    public static final int MAY;
    public static final int JUNE;
    public static final int JULY;
    public static final int AUGUST;
    public static final int SEPTEMBER;
    public static final int OCTOBER;
    public static final int NOVEMBER;
    public static final int DECEMBER;
    public static final int UNDECIMBER;
    public static final int SUNDAY;
    public static final int MONDAY;
    public static final int TUESDAY;
    public static final int WEDNESDAY;
    public static final int THURSDAY;
    public static final int FRIDAY;
    public static final int SATURDAY;
    public static final int ERA;
    public static final int YEAR;
    public static final int MONTH;
    public static final int WEEK_OF_YEAR;
    public static final int WEEK_OF_MONTH;
    public static final int DATE;
    public static final int DAY_OF_MONTH;
    public static final int DAY_OF_YEAR;
    public static final int DAY_OF_WEEK;
    public static final int DAY_OF_WEEK_IN_MONTH;
    public static final int AM_PM;
    public static final int HOUR;
    public static final int HOUR_OF_DAY;
    public static final int MINUTE;
    public static final int SECOND;
    public static final int MILLISECOND;
    public static final int ZONE_OFFSET;
    public static final int DST_OFFSET;
    public static final int FIELD_COUNT;
    public static final int AM;
    public static final int PM;
    public static final int ALL_STYLES;
    public static final int SHORT;
    public static final int LONG;
    private static final java.lang.String[] FIELD_NAMES;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    protected void <init>()
    {
        java.util.Calendar r0;
        java.util.TimeZone $r1;
        java.util.Locale $r2;

        r0 := @this: java.util.Calendar;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>($r1, $r2);

        return;
    }

    void <init>(java.util.TimeZone)
    {
        java.util.Calendar r0;
        java.util.TimeZone r1;
        int[] $r2;
        boolean[] $r3;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.util.TimeZone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (int)[17];

        r0.<java.util.Calendar: int[] fields> = $r2;

        $r3 = newarray (boolean)[17];

        r0.<java.util.Calendar: boolean[] isSet> = $r3;

        r0.<java.util.Calendar: boolean isTimeSet> = 0;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        virtualinvoke r0.<java.util.Calendar: void setLenient(boolean)>(1);

        virtualinvoke r0.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>(r1);

        return;
    }

    protected void <init>(java.util.TimeZone, java.util.Locale)
    {
        java.util.Calendar r0;
        java.util.TimeZone r1;
        java.util.Locale r2, r6;
        libcore.icu.LocaleData r3;
        java.lang.Integer $r4, $r5;
        int $i0, $i1;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.util.TimeZone;

        r2 := @parameter1: java.util.Locale;

        specialinvoke r0.<java.util.Calendar: void <init>(java.util.TimeZone)>(r1);

        r6 = staticinvoke <libcore.icu.LocaleData: java.util.Locale mapInvalidAndNullLocales(java.util.Locale)>(r2);

        r3 = staticinvoke <libcore.icu.LocaleData: libcore.icu.LocaleData get(java.util.Locale)>(r6);

        $r4 = r3.<libcore.icu.LocaleData: java.lang.Integer firstDayOfWeek>;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<java.util.Calendar: void setFirstDayOfWeek(int)>($i0);

        $r5 = r3.<libcore.icu.LocaleData: java.lang.Integer minimalDaysInFirstWeek>;

        $i1 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r0.<java.util.Calendar: void setMinimalDaysInFirstWeek(int)>($i1);

        return;
    }

    public abstract void add(int, int);

    public boolean after(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Calendar;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        $r2 = (java.util.Calendar) r1;

        $l1 = virtualinvoke $r2.<java.util.Calendar: long getTimeInMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public boolean before(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        long $l0, $l1;
        byte $b2;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Calendar;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        $r2 = (java.util.Calendar) r1;

        $l1 = virtualinvoke $r2.<java.util.Calendar: long getTimeInMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 >= 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public final void clear()
    {
        java.util.Calendar r0;
        int i0;
        int[] $r1;
        boolean[] $r2;

        r0 := @this: java.util.Calendar;

        i0 = 0;

     label1:
        if i0 >= 17 goto label2;

        $r1 = r0.<java.util.Calendar: int[] fields>;

        $r1[i0] = 0;

        $r2 = r0.<java.util.Calendar: boolean[] isSet>;

        $r2[i0] = 0;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<java.util.Calendar: boolean isTimeSet> = 0;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        return;
    }

    public final void clear(int)
    {
        java.util.Calendar r0;
        int i0;
        int[] $r1;
        boolean[] $r2;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.Calendar: int[] fields>;

        $r1[i0] = 0;

        $r2 = r0.<java.util.Calendar: boolean[] isSet>;

        $r2[i0] = 0;

        r0.<java.util.Calendar: boolean isTimeSet> = 0;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        return;
    }

    public java.lang.Object clone()
    {
        java.util.Calendar r0, r1;
        java.lang.Object $r2, $r4, $r7, $r10;
        int[] $r3, $r5;
        boolean[] $r6, $r8;
        java.util.TimeZone $r9, $r11;
        java.lang.CloneNotSupportedException $r12, r14;
        java.lang.AssertionError $r13;

        r0 := @this: java.util.Calendar;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.Calendar) $r2;

        $r3 = r0.<java.util.Calendar: int[] fields>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (int[]) $r4;

        r1.<java.util.Calendar: int[] fields> = $r5;

        $r6 = r0.<java.util.Calendar: boolean[] isSet>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (boolean[]) $r7;

        r1.<java.util.Calendar: boolean[] isSet> = $r8;

        $r9 = r0.<java.util.Calendar: java.util.TimeZone zone>;

        $r10 = virtualinvoke $r9.<java.util.TimeZone: java.lang.Object clone()>();

        $r11 = (java.util.TimeZone) $r10;

        r1.<java.util.Calendar: java.util.TimeZone zone> = $r11;

     label2:
        return r1;

     label3:
        $r12 := @caughtexception;

        r14 = $r12;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>(r14);

        throw $r13;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    protected void complete()
    {
        java.util.Calendar r0;
        boolean $z0, $z1;

        r0 := @this: java.util.Calendar;

        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.util.Calendar: void computeTime()>();

        r0.<java.util.Calendar: boolean isTimeSet> = 1;

     label1:
        $z1 = r0.<java.util.Calendar: boolean areFieldsSet>;

        if $z1 != 0 goto label2;

        virtualinvoke r0.<java.util.Calendar: void computeFields()>();

        r0.<java.util.Calendar: boolean areFieldsSet> = 1;

     label2:
        return;
    }

    protected abstract void computeFields();

    protected abstract void computeTime();

    public boolean equals(java.lang.Object)
    {
        java.util.Calendar r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        long $l0, $l1;
        byte $b2;
        int $i3, $i4, $i5, $i6;
        java.util.TimeZone $r3, $r4;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Calendar;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.util.Calendar) r1;

        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        $l1 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.util.Calendar: boolean isLenient()>();

        $z2 = virtualinvoke r2.<java.util.Calendar: boolean isLenient()>();

        if $z1 != $z2 goto label3;

        $i3 = virtualinvoke r0.<java.util.Calendar: int getFirstDayOfWeek()>();

        $i4 = virtualinvoke r2.<java.util.Calendar: int getFirstDayOfWeek()>();

        if $i3 != $i4 goto label3;

        $i5 = virtualinvoke r0.<java.util.Calendar: int getMinimalDaysInFirstWeek()>();

        $i6 = virtualinvoke r2.<java.util.Calendar: int getMinimalDaysInFirstWeek()>();

        if $i5 != $i6 goto label3;

        $r3 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $r4 = virtualinvoke r2.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $z3 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        return $z4;
    }

    public int get(int)
    {
        java.util.Calendar r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.util.Calendar: void complete()>();

        $r1 = r0.<java.util.Calendar: int[] fields>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int getActualMaximum(int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, $i4, $i5;
        long l3;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        $i4 = virtualinvoke r0.<java.util.Calendar: int getMaximum(int)>(i0);

        $i5 = virtualinvoke r0.<java.util.Calendar: int getLeastMaximum(int)>(i0);

        i2 = $i5;

        if $i4 != $i5 goto label1;

        return i2;

     label1:
        virtualinvoke r0.<java.util.Calendar: void complete()>();

        l3 = r0.<java.util.Calendar: long time>;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(i0, i2);

     label2:
        i1 = i2;

        virtualinvoke r0.<java.util.Calendar: void roll(int,boolean)>(i0, 1);

        i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(i0);

        if i2 > i1 goto label2;

        r0.<java.util.Calendar: long time> = l3;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        return i1;
    }

    public int getActualMinimum(int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, $i4, $i5;
        long l3;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        $i4 = virtualinvoke r0.<java.util.Calendar: int getMinimum(int)>(i0);

        $i5 = virtualinvoke r0.<java.util.Calendar: int getGreatestMinimum(int)>(i0);

        i2 = $i5;

        if $i4 != $i5 goto label1;

        return i2;

     label1:
        virtualinvoke r0.<java.util.Calendar: void complete()>();

        l3 = r0.<java.util.Calendar: long time>;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(i0, i2);

     label2:
        i1 = i2;

        virtualinvoke r0.<java.util.Calendar: void roll(int,boolean)>(i0, 0);

        i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(i0);

        if i2 < i1 goto label2;

        r0.<java.util.Calendar: long time> = l3;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        return i1;
    }

    public static synchronized java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableCalendarLocales()>();

        return $r0;
    }

    public int getFirstDayOfWeek()
    {
        java.util.Calendar r0;
        int $i0;

        r0 := @this: java.util.Calendar;

        $i0 = r0.<java.util.Calendar: int firstDayOfWeek>;

        return $i0;
    }

    public abstract int getGreatestMinimum(int);

    public static synchronized java.util.Calendar getInstance()
    {
        java.util.GregorianCalendar $r0;

        $r0 = new java.util.GregorianCalendar;

        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();

        return $r0;
    }

    public static synchronized java.util.Calendar getInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.GregorianCalendar $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(java.util.Locale)>(r0);

        return $r1;
    }

    public static synchronized java.util.Calendar getInstance(java.util.TimeZone)
    {
        java.util.TimeZone r0;
        java.util.GregorianCalendar $r1;

        r0 := @parameter0: java.util.TimeZone;

        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>(r0);

        return $r1;
    }

    public static synchronized java.util.Calendar getInstance(java.util.TimeZone, java.util.Locale)
    {
        java.util.TimeZone r0;
        java.util.Locale r1;
        java.util.GregorianCalendar $r2;

        r0 := @parameter0: java.util.TimeZone;

        r1 := @parameter1: java.util.Locale;

        $r2 = new java.util.GregorianCalendar;

        specialinvoke $r2.<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>(r0, r1);

        return $r2;
    }

    public abstract int getLeastMaximum(int);

    public abstract int getMaximum(int);

    public int getMinimalDaysInFirstWeek()
    {
        java.util.Calendar r0;
        int $i0;

        r0 := @this: java.util.Calendar;

        $i0 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;

        return $i0;
    }

    public abstract int getMinimum(int);

    public final java.util.Date getTime()
    {
        java.util.Calendar r0;
        java.util.Date $r1;
        long $l0;

        r0 := @this: java.util.Calendar;

        $r1 = new java.util.Date;

        $l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        return $r1;
    }

    public long getTimeInMillis()
    {
        java.util.Calendar r0;
        boolean $z0;
        long $l0;

        r0 := @this: java.util.Calendar;

        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.util.Calendar: void computeTime()>();

        r0.<java.util.Calendar: boolean isTimeSet> = 1;

     label1:
        $l0 = r0.<java.util.Calendar: long time>;

        return $l0;
    }

    public java.util.TimeZone getTimeZone()
    {
        java.util.Calendar r0;
        java.util.TimeZone $r1;

        r0 := @this: java.util.Calendar;

        $r1 = r0.<java.util.Calendar: java.util.TimeZone zone>;

        return $r1;
    }

    public int hashCode()
    {
        java.util.Calendar r0;
        boolean $z0;
        short $s0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.TimeZone $r1;

        r0 := @this: java.util.Calendar;

        $z0 = virtualinvoke r0.<java.util.Calendar: boolean isLenient()>();

        if $z0 == 0 goto label1;

        $s0 = 1237;

        goto label2;

     label1:
        $s0 = 1231;

     label2:
        $i1 = virtualinvoke r0.<java.util.Calendar: int getFirstDayOfWeek()>();

        $i2 = $s0 + $i1;

        $i3 = virtualinvoke r0.<java.util.Calendar: int getMinimalDaysInFirstWeek()>();

        $i4 = $i2 + $i3;

        $r1 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i6 = $i4 + $i5;

        return $i6;
    }

    protected final int internalGet(int)
    {
        java.util.Calendar r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.Calendar: int[] fields>;

        $i1 = $r1[i0];

        return $i1;
    }

    public boolean isLenient()
    {
        java.util.Calendar r0;
        boolean $z0;

        r0 := @this: java.util.Calendar;

        $z0 = r0.<java.util.Calendar: boolean lenient>;

        return $z0;
    }

    public final boolean isSet(int)
    {
        java.util.Calendar r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.Calendar: boolean[] isSet>;

        $z0 = $r1[i0];

        return $z0;
    }

    public void roll(int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, $i4;
        boolean z0, $z1;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        if z0 == 0 goto label3;

        $i4 = i1;

        goto label4;

     label3:
        $i4 = neg i1;

     label4:
        i2 = $i4;

        i3 = 0;

     label5:
        if i3 >= i2 goto label6;

        virtualinvoke r0.<java.util.Calendar: void roll(int,boolean)>(i0, z0);

        i3 = i3 + 1;

        goto label5;

     label6:
        return;
    }

    public abstract void roll(int, boolean);

    public void set(int, int)
    {
        java.util.Calendar r0;
        int i0, i1;
        int[] $r1;
        boolean[] $r2;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<java.util.Calendar: int[] fields>;

        $r1[i0] = i1;

        $r2 = r0.<java.util.Calendar: boolean[] isSet>;

        $r2[i0] = 1;

        r0.<java.util.Calendar: boolean isTimeSet> = 0;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        if i0 <= 2 goto label1;

        if i0 >= 9 goto label1;

        r0.<java.util.Calendar: int lastDateFieldSet> = i0;

     label1:
        if i0 == 10 goto label2;

        if i0 != 11 goto label3;

     label2:
        r0.<java.util.Calendar: int lastTimeFieldSet> = i0;

     label3:
        if i0 != 9 goto label4;

        r0.<java.util.Calendar: int lastTimeFieldSet> = 10;

     label4:
        return;
    }

    public final void set(int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(1, i0);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(2, i1);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(5, i2);

        return;
    }

    public final void set(int, int, int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        virtualinvoke r0.<java.util.Calendar: void set(int,int,int)>(i0, i1, i2);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(11, i3);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(12, i4);

        return;
    }

    public final void set(int, int, int, int, int, int)
    {
        java.util.Calendar r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        virtualinvoke r0.<java.util.Calendar: void set(int,int,int,int,int)>(i0, i1, i2, i3, i4);

        virtualinvoke r0.<java.util.Calendar: void set(int,int)>(13, i5);

        return;
    }

    public void setFirstDayOfWeek(int)
    {
        java.util.Calendar r0;
        int i0;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        r0.<java.util.Calendar: int firstDayOfWeek> = i0;

        return;
    }

    public void setLenient(boolean)
    {
        java.util.Calendar r0;
        boolean z0;

        r0 := @this: java.util.Calendar;

        z0 := @parameter0: boolean;

        r0.<java.util.Calendar: boolean lenient> = z0;

        return;
    }

    public void setMinimalDaysInFirstWeek(int)
    {
        java.util.Calendar r0;
        int i0;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        r0.<java.util.Calendar: int minimalDaysInFirstWeek> = i0;

        return;
    }

    public final void setTime(java.util.Date)
    {
        java.util.Calendar r0;
        java.util.Date r1;
        long $l0;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.util.Date;

        $l0 = virtualinvoke r1.<java.util.Date: long getTime()>();

        virtualinvoke r0.<java.util.Calendar: void setTimeInMillis(long)>($l0);

        return;
    }

    public void setTimeInMillis(long)
    {
        java.util.Calendar r0;
        long l0, $l1;
        boolean $z0, $z1;
        byte $b2;

        r0 := @this: java.util.Calendar;

        l0 := @parameter0: long;

        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;

        if $z0 == 0 goto label1;

        $z1 = r0.<java.util.Calendar: boolean areFieldsSet>;

        if $z1 == 0 goto label1;

        $l1 = r0.<java.util.Calendar: long time>;

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label2;

     label1:
        r0.<java.util.Calendar: long time> = l0;

        r0.<java.util.Calendar: boolean isTimeSet> = 1;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        virtualinvoke r0.<java.util.Calendar: void complete()>();

     label2:
        return;
    }

    public void setTimeZone(java.util.TimeZone)
    {
        java.util.Calendar r0;
        java.util.TimeZone r1;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.util.TimeZone;

        r0.<java.util.Calendar: java.util.TimeZone zone> = r1;

        r0.<java.util.Calendar: boolean areFieldsSet> = 0;

        return;
    }

    public java.lang.String toString()
    {
        java.util.Calendar r0;
        java.lang.StringBuilder r1, $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r21;
        int i0, $i1, $i2, $i3;
        java.lang.Class $r4;
        java.lang.String $r5, $r14, $r20, $r22, $r28, $r32;
        boolean $z0, $z1, $z2, $z3;
        java.util.TimeZone $r15;
        java.lang.String[] $r24;
        boolean[] $r27;
        int[] $r30;
        long $l4;

        r0 := @this: java.util.Calendar;

        $r2 = new java.lang.StringBuilder;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[time=");

        $z0 = r0.<java.util.Calendar: boolean isTimeSet>;

        if $z0 == 0 goto label1;

        $l4 = r0.<java.util.Calendar: long time>;

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l4);

        goto label2;

     label1:
        $r32 = "?";

     label2:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",areFieldsSet=");

        $z1 = r0.<java.util.Calendar: boolean areFieldsSet>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",lenient=");

        $z2 = r0.<java.util.Calendar: boolean lenient>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",zone=");

        $r15 = r0.<java.util.Calendar: java.util.TimeZone zone>;

        $r14 = virtualinvoke $r15.<java.util.TimeZone: java.lang.String getID()>();

        $r17 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",firstDayOfWeek=");

        $i1 = r0.<java.util.Calendar: int firstDayOfWeek>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",minimalDaysInFirstWeek=");

        $i2 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        r1 = $r2;

        i0 = 0;

     label3:
        if i0 >= 17 goto label6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $r24 = <java.util.Calendar: java.lang.String[] FIELD_NAMES>;

        $r28 = $r24[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r27 = r0.<java.util.Calendar: boolean[] isSet>;

        $z3 = $r27[i0];

        if $z3 == 0 goto label4;

        $r30 = r0.<java.util.Calendar: int[] fields>;

        $i3 = $r30[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        goto label5;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r22 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }

    public int compareTo(java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        long l0, l1;
        byte $b2, $b3;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.util.Calendar;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("anotherCalendar == null");

        throw $r2;

     label1:
        l0 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>();

        $b2 = l0 cmp l1;

        if $b2 <= 0 goto label2;

        return 1;

     label2:
        $b3 = l0 cmp l1;

        if $b3 != 0 goto label3;

        return 0;

     label3:
        return -1;
    }

    public java.lang.String getDisplayName(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1, i2;
        java.util.Locale r1;
        java.lang.String[] r2;
        java.lang.String $r3;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        if i1 != 0 goto label1;

        i1 = 1;

     label1:
        r2 = specialinvoke r0.<java.util.Calendar: java.lang.String[] getDisplayNameArray(int,int,java.util.Locale)>(i0, i1, r1);

        i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(i0);

        if r2 == null goto label2;

        $r3 = r2[i2];

        goto label3;

     label2:
        $r3 = null;

     label3:
        return $r3;
    }

    private java.lang.String[] getDisplayNameArray(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1;
        java.util.Locale r1;
        java.text.DateFormatSymbols r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        java.lang.String[] $r8, $r9, $r10, $r11;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        if i0 < 0 goto label01;

        if i0 < 17 goto label02;

     label01:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad field ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label02:
        staticinvoke <java.util.Calendar: void checkStyle(int)>(i1);

        r2 = staticinvoke <java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>(r1);

        tableswitch(i0)
        {
            case 0: goto label07;
            case 1: goto label11;
            case 2: goto label08;
            case 3: goto label11;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label04;
            case 8: goto label11;
            case 9: goto label03;
            default: goto label11;
        };

     label03:
        $r8 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getAmPmStrings()>();

        return $r8;

     label04:
        if i1 != 2 goto label05;

        $r9 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getWeekdays()>();

        goto label06;

     label05:
        $r9 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getShortWeekdays()>();

     label06:
        return $r9;

     label07:
        $r11 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getEras()>();

        return $r11;

     label08:
        if i1 != 2 goto label09;

        $r10 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getMonths()>();

        goto label10;

     label09:
        $r10 = virtualinvoke r2.<java.text.DateFormatSymbols: java.lang.String[] getShortMonths()>();

     label10:
        return $r10;

     label11:
        return null;
    }

    private static void checkStyle(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad style ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label1:
        return;
    }

    public java.util.Map getDisplayNames(int, int, java.util.Locale)
    {
        java.util.Calendar r0;
        int i0, i1;
        java.util.Locale r1;
        java.util.HashMap r2, $r3, $r6;
        java.lang.String[] $r4, $r5;
        boolean $z0;

        r0 := @this: java.util.Calendar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.Locale;

        staticinvoke <java.util.Calendar: void checkStyle(int)>(i1);

        virtualinvoke r0.<java.util.Calendar: void complete()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r2 = $r3;

        if i1 == 1 goto label1;

        if i1 != 0 goto label2;

     label1:
        $r4 = specialinvoke r0.<java.util.Calendar: java.lang.String[] getDisplayNameArray(int,int,java.util.Locale)>(i0, 1, r1);

        staticinvoke <java.util.Calendar: void insertValuesInMap(java.util.Map,java.lang.String[])>(r2, $r4);

     label2:
        if i1 == 2 goto label3;

        if i1 != 0 goto label4;

     label3:
        $r5 = specialinvoke r0.<java.util.Calendar: java.lang.String[] getDisplayNameArray(int,int,java.util.Locale)>(i0, 2, r1);

        staticinvoke <java.util.Calendar: void insertValuesInMap(java.util.Map,java.lang.String[])>(r2, $r5);

     label4:
        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r6 = null;

        goto label6;

     label5:
        $r6 = r2;

     label6:
        return $r6;
    }

    private static void insertValuesInMap(java.util.Map, java.lang.String[])
    {
        java.util.Map r0;
        java.lang.String[] r1;
        int i0, $i1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0;
        java.lang.Integer $r5;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String[];

        if r1 != null goto label1;

        return;

     label1:
        i0 = 0;

     label2:
        $i1 = lengthof r1;

        if i0 >= $i1 goto label4;

        $r2 = r1[i0];

        if $r2 == null goto label3;

        $r3 = r1[i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r4 = r1[i0];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Calendar r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        boolean $z0, $z1, $z2;
        int[] $r3;
        int $i0, $i1;
        boolean[] $r4;
        long $l2;
        java.util.TimeZone $r5;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.util.Calendar: void complete()>();

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $z0 = r0.<java.util.Calendar: boolean areFieldsSet>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("areFieldsSet", $z0);

        $r3 = r0.<java.util.Calendar: int[] fields>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("fields", $r3);

        $i0 = r0.<java.util.Calendar: int firstDayOfWeek>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("firstDayOfWeek", $i0);

        $r4 = r0.<java.util.Calendar: boolean[] isSet>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("isSet", $r4);

        $z1 = r0.<java.util.Calendar: boolean isTimeSet>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("isTimeSet", $z1);

        $z2 = r0.<java.util.Calendar: boolean lenient>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("lenient", $z2);

        $i1 = r0.<java.util.Calendar: int minimalDaysInFirstWeek>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("minimalDaysInFirstWeek", $i1);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("nextStamp", 2);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("serialVersionOnStream", 1);

        $l2 = r0.<java.util.Calendar: long time>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,long)>("time", $l2);

        $r5 = r0.<java.util.Calendar: java.util.TimeZone zone>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("zone", $r5);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Calendar r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r6, $r10;
        int[] $r4, $r5;
        int $i0, $i1;
        boolean[] $r7, $r8;
        long $l2;
        java.util.TimeZone $r9;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $z0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("areFieldsSet", 0);

        r0.<java.util.Calendar: boolean areFieldsSet> = $z0;

        $r3 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("fields", null);

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        r0.<java.util.Calendar: int[] fields> = $r5;

        $i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("firstDayOfWeek", 1);

        r0.<java.util.Calendar: int firstDayOfWeek> = $i0;

        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("isSet", null);

        $r7 = (boolean[]) $r6;

        $r8 = (boolean[]) $r7;

        r0.<java.util.Calendar: boolean[] isSet> = $r8;

        $z1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("isTimeSet", 0);

        r0.<java.util.Calendar: boolean isTimeSet> = $z1;

        $z2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: boolean get(java.lang.String,boolean)>("lenient", 1);

        r0.<java.util.Calendar: boolean lenient> = $z2;

        $i1 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("minimalDaysInFirstWeek", 1);

        r0.<java.util.Calendar: int minimalDaysInFirstWeek> = $i1;

        $l2 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: long get(java.lang.String,long)>("time", 0L);

        r0.<java.util.Calendar: long time> = $l2;

        $r10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("zone", null);

        $r9 = (java.util.TimeZone) $r10;

        r0.<java.util.Calendar: java.util.TimeZone zone> = $r9;

        return;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.util.Calendar r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.util.Calendar;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.Calendar) r1;

        $i0 = virtualinvoke r0.<java.util.Calendar: int compareTo(java.util.Calendar)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.io.ObjectStreamField[] $r1;
        java.io.ObjectStreamField $r2, $r4, $r5, $r7, $r8, $r10, $r13, $r14, $r17, $r18, $r20;
        java.lang.Class $r3, $r6, $r9, $r11, $r12, $r15, $r16, $r19;

        <java.util.Calendar: int LONG> = 2;

        <java.util.Calendar: int SHORT> = 1;

        <java.util.Calendar: int ALL_STYLES> = 0;

        <java.util.Calendar: int PM> = 1;

        <java.util.Calendar: int AM> = 0;

        <java.util.Calendar: int FIELD_COUNT> = 17;

        <java.util.Calendar: int DST_OFFSET> = 16;

        <java.util.Calendar: int ZONE_OFFSET> = 15;

        <java.util.Calendar: int MILLISECOND> = 14;

        <java.util.Calendar: int SECOND> = 13;

        <java.util.Calendar: int MINUTE> = 12;

        <java.util.Calendar: int HOUR_OF_DAY> = 11;

        <java.util.Calendar: int HOUR> = 10;

        <java.util.Calendar: int AM_PM> = 9;

        <java.util.Calendar: int DAY_OF_WEEK_IN_MONTH> = 8;

        <java.util.Calendar: int DAY_OF_WEEK> = 7;

        <java.util.Calendar: int DAY_OF_YEAR> = 6;

        <java.util.Calendar: int DAY_OF_MONTH> = 5;

        <java.util.Calendar: int DATE> = 5;

        <java.util.Calendar: int WEEK_OF_MONTH> = 4;

        <java.util.Calendar: int WEEK_OF_YEAR> = 3;

        <java.util.Calendar: int MONTH> = 2;

        <java.util.Calendar: int YEAR> = 1;

        <java.util.Calendar: int ERA> = 0;

        <java.util.Calendar: int SATURDAY> = 7;

        <java.util.Calendar: int FRIDAY> = 6;

        <java.util.Calendar: int THURSDAY> = 5;

        <java.util.Calendar: int WEDNESDAY> = 4;

        <java.util.Calendar: int TUESDAY> = 3;

        <java.util.Calendar: int MONDAY> = 2;

        <java.util.Calendar: int SUNDAY> = 1;

        <java.util.Calendar: int UNDECIMBER> = 12;

        <java.util.Calendar: int DECEMBER> = 11;

        <java.util.Calendar: int NOVEMBER> = 10;

        <java.util.Calendar: int OCTOBER> = 9;

        <java.util.Calendar: int SEPTEMBER> = 8;

        <java.util.Calendar: int AUGUST> = 7;

        <java.util.Calendar: int JULY> = 6;

        <java.util.Calendar: int JUNE> = 5;

        <java.util.Calendar: int MAY> = 4;

        <java.util.Calendar: int APRIL> = 3;

        <java.util.Calendar: int MARCH> = 2;

        <java.util.Calendar: int FEBRUARY> = 1;

        <java.util.Calendar: int JANUARY> = 0;

        <java.util.Calendar: long serialVersionUID> = -1807547505821590642L;

        $r0 = newarray (java.lang.String)[17];

        $r0[0] = "ERA";

        $r0[1] = "YEAR";

        $r0[2] = "MONTH";

        $r0[3] = "WEEK_OF_YEAR";

        $r0[4] = "WEEK_OF_MONTH";

        $r0[5] = "DAY_OF_MONTH";

        $r0[6] = "DAY_OF_YEAR";

        $r0[7] = "DAY_OF_WEEK";

        $r0[8] = "DAY_OF_WEEK_IN_MONTH";

        $r0[9] = "AM_PM";

        $r0[10] = "HOUR";

        $r0[11] = "HOUR_OF_DAY";

        $r0[12] = "MINUTE";

        $r0[13] = "SECOND";

        $r0[14] = "MILLISECOND";

        $r0[15] = "ZONE_OFFSET";

        $r0[16] = "DST_OFFSET";

        <java.util.Calendar: java.lang.String[] FIELD_NAMES> = $r0;

        $r1 = newarray (java.io.ObjectStreamField)[11];

        $r2 = new java.io.ObjectStreamField;

        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("areFieldsSet", $r3);

        $r1[0] = $r2;

        $r4 = new java.io.ObjectStreamField;

        specialinvoke $r4.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("fields", class "[I");

        $r1[1] = $r4;

        $r5 = new java.io.ObjectStreamField;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("firstDayOfWeek", $r6);

        $r1[2] = $r5;

        $r7 = new java.io.ObjectStreamField;

        specialinvoke $r7.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("isSet", class "[Z");

        $r1[3] = $r7;

        $r8 = new java.io.ObjectStreamField;

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r8.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("isTimeSet", $r9);

        $r1[4] = $r8;

        $r10 = new java.io.ObjectStreamField;

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r10.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("lenient", $r11);

        $r1[5] = $r10;

        $r13 = new java.io.ObjectStreamField;

        $r12 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r13.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("minimalDaysInFirstWeek", $r12);

        $r1[6] = $r13;

        $r14 = new java.io.ObjectStreamField;

        $r15 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r14.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("nextStamp", $r15);

        $r1[7] = $r14;

        $r17 = new java.io.ObjectStreamField;

        $r16 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r17.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("serialVersionOnStream", $r16);

        $r1[8] = $r17;

        $r18 = new java.io.ObjectStreamField;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        specialinvoke $r18.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("time", $r19);

        $r1[9] = $r18;

        $r20 = new java.io.ObjectStreamField;

        specialinvoke $r20.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("zone", class "java/util/TimeZone");

        $r1[10] = $r20;

        <java.util.Calendar: java.io.ObjectStreamField[] serialPersistentFields> = $r1;

        return;
    }
}
