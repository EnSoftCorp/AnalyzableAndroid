public final class javax.security.auth.x500.X500Principal extends java.lang.Object implements java.io.Serializable, java.security.Principal
{
    private static final long serialVersionUID;
    public static final java.lang.String CANONICAL;
    public static final java.lang.String RFC1779;
    public static final java.lang.String RFC2253;
    private transient org.apache.harmony.security.x501.Name dn;
    private transient java.lang.String canonicalName;

    public void <init>(byte[])
    {
        javax.security.auth.x500.X500Principal r0;
        byte[] r1;
        java.io.IOException r2, $r7;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r3;
        java.lang.Object $r4;
        org.apache.harmony.security.x501.Name $r5;
        java.lang.IllegalArgumentException $r6, $r8;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name cannot be null");

        throw $r6;

     label1:
        $r3 = <org.apache.harmony.security.x501.Name: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(byte[])>(r1);

        $r5 = (org.apache.harmony.security.x501.Name) $r4;

        r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn> = $r5;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.IllegalArgumentException incorrectInputEncoding(java.io.IOException)>(r2);

        throw $r8;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(java.io.InputStream)
    {
        javax.security.auth.x500.X500Principal r0;
        java.io.InputStream r1;
        java.io.IOException r2, $r7;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r3;
        java.lang.Object $r4;
        org.apache.harmony.security.x501.Name $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null");

        throw $r6;

     label1:
        $r3 = <org.apache.harmony.security.x501.Name: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(java.io.InputStream)>(r1);

        $r5 = (org.apache.harmony.security.x501.Name) $r4;

        r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn> = $r5;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r2 = $r7;

        $r8 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.IllegalArgumentException incorrectInputEncoding(java.io.IOException)>(r2);

        throw $r8;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.IllegalArgumentException incorrectInputEncoding(java.io.IOException)
    {
        javax.security.auth.x500.X500Principal r0;
        java.io.IOException r1;
        java.lang.IllegalArgumentException r2, $r3;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.io.IOException;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Incorrect input encoding");

        r2 = $r3;

        virtualinvoke r2.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r2;
    }

    public void <init>(java.lang.String)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1;
        java.io.IOException r2, $r5;
        org.apache.harmony.security.x501.Name $r3;
        java.lang.NullPointerException $r4;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r4;

     label1:
        $r3 = new org.apache.harmony.security.x501.Name;

        specialinvoke $r3.<org.apache.harmony.security.x501.Name: void <init>(java.lang.String)>(r1);

        r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn> = $r3;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.IllegalArgumentException incorrectInputName(java.io.IOException,java.lang.String)>(r2, r1);

        throw $r6;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(java.lang.String, java.util.Map)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1, $r5;
        java.util.Map r2;
        java.io.IOException r3, $r7;
        org.apache.harmony.security.x501.Name $r4;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r6;

     label1:
        $r4 = new org.apache.harmony.security.x501.Name;

        $r5 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.String substituteNameFromMap(java.lang.String,java.util.Map)>(r1, r2);

        specialinvoke $r4.<org.apache.harmony.security.x501.Name: void <init>(java.lang.String)>($r5);

        r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn> = $r4;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.IllegalArgumentException incorrectInputName(java.io.IOException,java.lang.String)>(r3, r1);

        throw $r8;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.lang.IllegalArgumentException incorrectInputName(java.io.IOException, java.lang.String)
    {
        javax.security.auth.x500.X500Principal r0;
        java.io.IOException r1;
        java.lang.String r2, $r8;
        java.lang.IllegalArgumentException r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.io.IOException;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incorrect input name:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        r3 = $r4;

        virtualinvoke r3.<java.lang.IllegalArgumentException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw r3;
    }

    private synchronized java.lang.String getCanonicalName()
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String $r1, $r2, $r4;
        org.apache.harmony.security.x501.Name $r3;

        r0 := @this: javax.security.auth.x500.X500Principal;

        $r1 = r0.<javax.security.auth.x500.X500Principal: java.lang.String canonicalName>;

        if $r1 != null goto label1;

        $r3 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>("CANONICAL");

        r0.<javax.security.auth.x500.X500Principal: java.lang.String canonicalName> = $r4;

     label1:
        $r2 = r0.<javax.security.auth.x500.X500Principal: java.lang.String canonicalName>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        javax.security.auth.x500.X500Principal r0, r2;
        java.lang.Object r1;
        java.lang.Class $r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r1 == null goto label2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == $r4 goto label3;

     label2:
        return 0;

     label3:
        r2 = (javax.security.auth.x500.X500Principal) r1;

        $r5 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.String getCanonicalName()>();

        $r6 = specialinvoke r2.<javax.security.auth.x500.X500Principal: java.lang.String getCanonicalName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        return $z0;
    }

    public byte[] getEncoded()
    {
        javax.security.auth.x500.X500Principal r0;
        byte[] r1, r2;
        org.apache.harmony.security.x501.Name $r3;
        int $i0, $i1;

        r0 := @this: javax.security.auth.x500.X500Principal;

        $r3 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: byte[] getEncoded()>();

        $i0 = lengthof r1;

        r2 = newarray (byte)[$i0];

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, 0, r2, 0, $i1);

        return r2;
    }

    public java.lang.String getName()
    {
        javax.security.auth.x500.X500Principal r0;
        org.apache.harmony.security.x501.Name $r1;
        java.lang.String $r2;

        r0 := @this: javax.security.auth.x500.X500Principal;

        $r1 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>("RFC2253");

        return $r2;
    }

    public java.lang.String getName(java.lang.String)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1, $r2, $r4, $r5;
        boolean $z0;
        org.apache.harmony.security.x501.Name $r3;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.String;

        $r2 = "CANONICAL";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.String getCanonicalName()>();

        return $r5;

     label1:
        $r3 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>(r1);

        return $r4;
    }

    public java.lang.String getName(java.lang.String, java.util.Map)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1, r3, r4, r6, r7, r8, r9, $r15, $r19, $r20, $r21, $r23, $r27, $r28, $r29;
        java.util.Map r2;
        java.lang.StringBuilder r5, $r13, $r14, $r16, $r17, $r18, $r25, $r30, $r31, $r32, r35, r36;
        int i0, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i19, i20, i21;
        org.apache.harmony.security.x501.Name $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object $r22, $r33;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r10 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        r3 = virtualinvoke $r10.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>("RFC1779");

        $r11 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        r4 = virtualinvoke $r11.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>("RFC2253");

        $z0 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("RFC1779");

        if $z0 == 0 goto label05;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3);

        r5 = $r25;

        i0 = virtualinvoke r5.<java.lang.StringBuilder: int length()>();

     label01:
        $i10 = virtualinvoke r5.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>("=", i0);

        i14 = $i10;

        if -1 == $i10 goto label04;

        i2 = virtualinvoke r5.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>(",", i14);

        $i11 = i2 + 1;

        $r28 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i11, i14);

        r6 = virtualinvoke $r28.<java.lang.String: java.lang.String trim()>();

        $i12 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i12 <= 4 goto label03;

        $r29 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, 4);

        $z3 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("OID.");

        if $z3 == 0 goto label03;

        r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(4);

        $z4 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z4 == 0 goto label03;

        $r33 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (java.lang.String) $r33;

        if i2 <= 0 goto label02;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        r8 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        $i13 = i2 + 1;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i13, i14, r8);

     label03:
        i0 = i2;

        goto label01;

     label04:
        $r27 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r27;

     label05:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("RFC2253");

        if $z1 == 0 goto label11;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>(r4);

        r35 = $r18;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>(r3);

        r36 = $r17;

        i15 = virtualinvoke r35.<java.lang.StringBuilder: int length()>();

        i16 = virtualinvoke r36.<java.lang.StringBuilder: int length()>();

     label06:
        $i5 = virtualinvoke r35.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>("=", i15);

        i19 = $i5;

        if -1 == $i5 goto label10;

        i20 = virtualinvoke r36.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>("=", i16);

        i21 = virtualinvoke r35.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>(",", i19);

        $i6 = i21 + 1;

        $r20 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i6, i19);

        r9 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z2 == 0 goto label09;

        i3 = virtualinvoke r35.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(",", i19);

        if i3 != -1 goto label07;

        i3 = virtualinvoke r35.<java.lang.StringBuilder: int length()>();

     label07:
        i4 = virtualinvoke r36.<java.lang.StringBuilder: int indexOf(java.lang.String,int)>(",", i20);

        if i4 != -1 goto label08;

        i4 = virtualinvoke r36.<java.lang.StringBuilder: int length()>();

     label08:
        $i7 = i19 + 1;

        $i8 = i20 + 1;

        $r21 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i8, i4);

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i7, i3, $r21);

        $i9 = i21 + 1;

        $r22 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r23 = (java.lang.String) $r22;

        virtualinvoke r35.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i9, i19, $r23);

     label09:
        i15 = i21;

        i16 = i20 - 1;

        goto label06;

     label10:
        $r19 = virtualinvoke r35.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r19;

     label11:
        $r12 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid format specified: ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r12;
    }

    public int hashCode()
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: javax.security.auth.x500.X500Principal;

        $r1 = specialinvoke r0.<javax.security.auth.x500.X500Principal: java.lang.String getCanonicalName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        javax.security.auth.x500.X500Principal r0;
        org.apache.harmony.security.x501.Name $r1;
        java.lang.String $r2;

        r0 := @this: javax.security.auth.x500.X500Principal;

        $r1 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x501.Name: java.lang.String getName(java.lang.String)>("RFC1779");

        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        javax.security.auth.x500.X500Principal r0;
        java.io.ObjectOutputStream r1;
        org.apache.harmony.security.x501.Name $r2;
        byte[] $r3;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.io.ObjectOutputStream;

        $r2 = r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x501.Name: byte[] getEncoded()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.security.auth.x500.X500Principal r0;
        java.io.ObjectInputStream r1;
        org.apache.harmony.security.asn1.ASN1SequenceOf $r2;
        java.lang.Object $r3, $r6;
        byte[] $r4, $r5;
        org.apache.harmony.security.x501.Name $r7;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r2 = <org.apache.harmony.security.x501.Name: org.apache.harmony.security.asn1.ASN1SequenceOf ASN1>;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = (byte[]) $r3;

        $r5 = (byte[]) $r4;

        $r6 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1SequenceOf: java.lang.Object decode(byte[])>($r5);

        $r7 = (org.apache.harmony.security.x501.Name) $r6;

        r0.<javax.security.auth.x500.X500Principal: org.apache.harmony.security.x501.Name dn> = $r7;

        return;
    }

    private java.lang.String substituteNameFromMap(java.lang.String, java.util.Map)
    {
        javax.security.auth.x500.X500Principal r0;
        java.lang.String r1, r4, $r6, $r7, $r10;
        java.util.Map r2;
        java.lang.StringBuilder r3, $r5;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: javax.security.auth.x500.X500Principal;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Map;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1);

        r3 = $r5;

        i0 = virtualinvoke r3.<java.lang.StringBuilder: int length()>();

     label1:
        $i3 = virtualinvoke r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>("=", i0);

        i1 = $i3;

        if -1 == $i3 goto label3;

        i2 = virtualinvoke r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String,int)>(",", i1);

        $i4 = i2 + 1;

        $r7 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i4, i1);

        r4 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>();

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label2;

        $i5 = i2 + 1;

        $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r10 = (java.lang.String) $r8;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i5, i1, $r10);

     label2:
        i0 = i2;

        goto label1;

     label3:
        $r6 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <javax.security.auth.x500.X500Principal: java.lang.String RFC2253> = "RFC2253";

        <javax.security.auth.x500.X500Principal: java.lang.String RFC1779> = "RFC1779";

        <javax.security.auth.x500.X500Principal: java.lang.String CANONICAL> = "CANONICAL";

        <javax.security.auth.x500.X500Principal: long serialVersionUID> = -500463348111345721L;

        return;
    }
}
