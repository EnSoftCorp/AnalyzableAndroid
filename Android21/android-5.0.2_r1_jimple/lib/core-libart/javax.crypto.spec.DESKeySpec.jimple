public class javax.crypto.spec.DESKeySpec extends java.lang.Object implements java.security.spec.KeySpec
{
    public static final int DES_KEY_LEN;
    private final byte[] key;
    private static final byte[][] SEMIWEAKS;

    public void <init>(byte[]) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] r1;

        r0 := @this: javax.crypto.spec.DESKeySpec;

        r1 := @parameter0: byte[];

        specialinvoke r0.<javax.crypto.spec.DESKeySpec: void <init>(byte[],int)>(r1, 0);

        return;
    }

    public void <init>(byte[], int) throws java.security.InvalidKeyException
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] r1, $r2, $r3;
        int i0, $i1, $i2;
        java.security.InvalidKeyException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: javax.crypto.spec.DESKeySpec;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r5;

     label1:
        $i1 = lengthof r1;

        $i2 = $i1 - i0;

        if $i2 >= 8 goto label2;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key too short");

        throw $r4;

     label2:
        $r2 = newarray (byte)[8];

        r0.<javax.crypto.spec.DESKeySpec: byte[] key> = $r2;

        $r3 = r0.<javax.crypto.spec.DESKeySpec: byte[] key>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, i0, $r3, 0, 8);

        return;
    }

    public byte[] getKey()
    {
        javax.crypto.spec.DESKeySpec r0;
        byte[] r1, $r2;

        r0 := @this: javax.crypto.spec.DESKeySpec;

        r1 = newarray (byte)[8];

        $r2 = r0.<javax.crypto.spec.DESKeySpec: byte[] key>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r2, 0, r1, 0, 8);

        return r1;
    }

    public static boolean isParityAdjusted(byte[], int) throws java.security.InvalidKeyException
    {
        byte[] r0;
        int i0, i1, $i2, $i3;
        byte $b4, $b5, $b6, $b7, b8, b9, b10, b11;
        java.security.InvalidKeyException $r1, $r2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r2 = new java.security.InvalidKeyException;

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r2;

     label1:
        $i2 = lengthof r0;

        $i3 = $i2 - i0;

        if $i3 >= 8 goto label2;

        $r1 = new java.security.InvalidKeyException;

        specialinvoke $r1.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key too short");

        throw $r1;

     label2:
        i1 = i0;

     label3:
        if i1 >= 8 goto label5;

        b8 = r0[i1];

        $b4 = b8 >> 1;

        b9 = b8 ^ $b4;

        $b5 = b9 >> 2;

        b10 = b9 ^ $b5;

        $b6 = b10 >> 4;

        b11 = b10 ^ $b6;

        $b7 = b11 & 1;

        if $b7 != 0 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return 1;
    }

    public static boolean isWeak(byte[], int) throws java.security.InvalidKeyException
    {
        byte[] r0, $r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        byte[][] $r1, $r2;
        byte $b7, $b8;
        java.security.InvalidKeyException $r4, $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.security.InvalidKeyException;

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key == null");

        throw $r5;

     label1:
        $i3 = lengthof r0;

        $i4 = $i3 - i0;

        if $i4 >= 8 goto label2;

        $r4 = new java.security.InvalidKeyException;

        specialinvoke $r4.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key too short");

        throw $r4;

     label2:
        i1 = 0;

     label3:
        $r1 = <javax.crypto.spec.DESKeySpec: byte[][] SEMIWEAKS>;

        $i5 = lengthof $r1;

        if i1 >= $i5 goto label8;

        i2 = 0;

     label4:
        if i2 >= 8 goto label6;

        $r2 = <javax.crypto.spec.DESKeySpec: byte[][] SEMIWEAKS>;

        $r3 = $r2[i1];

        $b8 = $r3[i2];

        $i6 = i0 + i2;

        $b7 = r0[$i6];

        if $b8 == $b7 goto label5;

        goto label7;

     label5:
        i2 = i2 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        i1 = i1 + 1;

        goto label3;

     label8:
        return 0;
    }

    static void <clinit>()
    {
        byte[][] $r0;
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;

        <javax.crypto.spec.DESKeySpec: int DES_KEY_LEN> = 8;

        $r0 = newarray (byte[])[16];

        $r1 = newarray (byte)[8];

        $r1[0] = -32;

        $r1[1] = 1;

        $r1[2] = -32;

        $r1[3] = 1;

        $r1[4] = -15;

        $r1[5] = 1;

        $r1[6] = -15;

        $r1[7] = 1;

        $r0[0] = $r1;

        $r2 = newarray (byte)[8];

        $r2[0] = 1;

        $r2[1] = -32;

        $r2[2] = 1;

        $r2[3] = -32;

        $r2[4] = 1;

        $r2[5] = -15;

        $r2[6] = 1;

        $r2[7] = -15;

        $r0[1] = $r2;

        $r3 = newarray (byte)[8];

        $r3[0] = -2;

        $r3[1] = 31;

        $r3[2] = -2;

        $r3[3] = 31;

        $r3[4] = -2;

        $r3[5] = 14;

        $r3[6] = -2;

        $r3[7] = 14;

        $r0[2] = $r3;

        $r4 = newarray (byte)[8];

        $r4[0] = 31;

        $r4[1] = -2;

        $r4[2] = 31;

        $r4[3] = -2;

        $r4[4] = 14;

        $r4[5] = -2;

        $r4[6] = 14;

        $r4[7] = -2;

        $r0[3] = $r4;

        $r5 = newarray (byte)[8];

        $r5[0] = -32;

        $r5[1] = 31;

        $r5[2] = -32;

        $r5[3] = 31;

        $r5[4] = -15;

        $r5[5] = 14;

        $r5[6] = -15;

        $r5[7] = 14;

        $r0[4] = $r5;

        $r6 = newarray (byte)[8];

        $r6[0] = 31;

        $r6[1] = -32;

        $r6[2] = 31;

        $r6[3] = -32;

        $r6[4] = 14;

        $r6[5] = -15;

        $r6[6] = 14;

        $r6[7] = -15;

        $r0[5] = $r6;

        $r7 = newarray (byte)[8];

        $r7[0] = 1;

        $r7[1] = -2;

        $r7[2] = 1;

        $r7[3] = -2;

        $r7[4] = 1;

        $r7[5] = -2;

        $r7[6] = 1;

        $r7[7] = -2;

        $r0[6] = $r7;

        $r8 = newarray (byte)[8];

        $r8[0] = -2;

        $r8[1] = 1;

        $r8[2] = -2;

        $r8[3] = 1;

        $r8[4] = -2;

        $r8[5] = 1;

        $r8[6] = -2;

        $r8[7] = 1;

        $r0[7] = $r8;

        $r9 = newarray (byte)[8];

        $r9[0] = 1;

        $r9[1] = 31;

        $r9[2] = 1;

        $r9[3] = 31;

        $r9[4] = 1;

        $r9[5] = 14;

        $r9[6] = 1;

        $r9[7] = 14;

        $r0[8] = $r9;

        $r10 = newarray (byte)[8];

        $r10[0] = 31;

        $r10[1] = 1;

        $r10[2] = 31;

        $r10[3] = 1;

        $r10[4] = 14;

        $r10[5] = 1;

        $r10[6] = 14;

        $r10[7] = 1;

        $r0[9] = $r10;

        $r11 = newarray (byte)[8];

        $r11[0] = -32;

        $r11[1] = -2;

        $r11[2] = -32;

        $r11[3] = -2;

        $r11[4] = -15;

        $r11[5] = -2;

        $r11[6] = -15;

        $r11[7] = -2;

        $r0[10] = $r11;

        $r12 = newarray (byte)[8];

        $r12[0] = -2;

        $r12[1] = -32;

        $r12[2] = -2;

        $r12[3] = -32;

        $r12[4] = -2;

        $r12[5] = -15;

        $r12[6] = -2;

        $r12[7] = -15;

        $r0[11] = $r12;

        $r13 = newarray (byte)[8];

        $r13[0] = 1;

        $r13[1] = 1;

        $r13[2] = 1;

        $r13[3] = 1;

        $r13[4] = 1;

        $r13[5] = 1;

        $r13[6] = 1;

        $r13[7] = 1;

        $r0[12] = $r13;

        $r14 = newarray (byte)[8];

        $r14[0] = -2;

        $r14[1] = -2;

        $r14[2] = -2;

        $r14[3] = -2;

        $r14[4] = -2;

        $r14[5] = -2;

        $r14[6] = -2;

        $r14[7] = -2;

        $r0[13] = $r14;

        $r15 = newarray (byte)[8];

        $r15[0] = -32;

        $r15[1] = -32;

        $r15[2] = -32;

        $r15[3] = -32;

        $r15[4] = -15;

        $r15[5] = -15;

        $r15[6] = -15;

        $r15[7] = -15;

        $r0[14] = $r15;

        $r16 = newarray (byte)[8];

        $r16[0] = 31;

        $r16[1] = 31;

        $r16[2] = 31;

        $r16[3] = 31;

        $r16[4] = 14;

        $r16[5] = 14;

        $r16[6] = 14;

        $r16[7] = 14;

        $r0[15] = $r16;

        <javax.crypto.spec.DESKeySpec: byte[][] SEMIWEAKS> = $r0;

        return;
    }
}
