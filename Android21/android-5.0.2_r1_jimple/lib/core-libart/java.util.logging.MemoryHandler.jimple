public class java.util.logging.MemoryHandler extends java.util.logging.Handler
{
    private static final int DEFAULT_SIZE;
    private java.util.logging.Handler target;
    private int size;
    private java.util.logging.Level push;
    private final java.util.logging.LogManager manager;
    private java.util.logging.LogRecord[] buffer;
    private int cursor;

    public void <init>()
    {
        java.util.logging.MemoryHandler r0;
        java.lang.String r1, r2, $r13, $r20, $r25, $r31, $r41, $r42, r47, r49;
        java.lang.ClassLoader r3;
        java.lang.Class r4, $r8;
        java.lang.Exception r5, $r29, $r36, $r40, r48;
        java.util.logging.Level $r6, $r28;
        java.util.logging.LogManager $r7, $r10, $r19, $r24;
        java.lang.StringBuilder $r9, $r11, $r12, $r16, $r18, $r21, $r22, $r23, $r26, $r30, $r32, $r33, $r34, $r35, $r37, $r38, $r43, $r44, $r45;
        java.lang.Thread $r14;
        java.lang.Object $r15;
        java.util.logging.Handler $r17;
        java.util.logging.LogRecord[] $r27;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r39;

        r0 := @this: java.util.logging.MemoryHandler;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r6;

        $r7 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager> = $r7;

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".target");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        r2 = virtualinvoke $r10.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r13);

     label01:
        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r3 = virtualinvoke $r14.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r3 != null goto label02;

        r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label02:
        r4 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r2);

        $r15 = virtualinvoke r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r17 = (java.util.logging.Handler) $r15;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target> = $r17;

     label03:
        goto label05;

     label04:
        $r40 := @caughtexception;

        $r39 = new java.lang.RuntimeException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load target handler \'");

        $r44 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r43 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.RuntimeException: void <init>(java.lang.String)>($r42);

        throw $r39;

     label05:
        $r19 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".size");

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        r47 = virtualinvoke $r19.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r20);

        if r47 == null goto label09;

     label06:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r47);

        r0.<java.util.logging.MemoryHandler: int size> = $i1;

        $i2 = r0.<java.util.logging.MemoryHandler: int size>;

        if $i2 > 0 goto label07;

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

     label07:
        goto label09;

     label08:
        $r29 := @caughtexception;

        r48 = $r29;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".size");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.logging.MemoryHandler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>($r31, r47, r48);

     label09:
        $r24 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".push");

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r49 = virtualinvoke $r24.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r25);

        if r49 == null goto label13;

     label10:
        $r28 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r49);

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r28;

     label11:
        goto label13;

     label12:
        $r36 := @caughtexception;

        r5 = $r36;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".push");

        $r41 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.logging.MemoryHandler: void printInvalidPropMessage(java.lang.String,java.lang.String,java.lang.Exception)>($r41, r49, r5);

     label13:
        virtualinvoke r0.<java.util.logging.MemoryHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.SimpleFormatter", null);

        $i0 = r0.<java.util.logging.MemoryHandler: int size>;

        $r27 = newarray (java.util.logging.LogRecord)[$i0];

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer> = $r27;

        return;

        catch java.lang.Exception from label01 to label03 with label04;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    public void <init>(java.util.logging.Handler, int, java.util.logging.Level)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Handler r1;
        int i0;
        java.util.logging.Level r2, $r3;
        java.util.logging.LogManager $r4;
        java.util.logging.LogRecord[] $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.logging.Level;

        specialinvoke r0.<java.util.logging.Handler: void <init>()>();

        r0.<java.util.logging.MemoryHandler: int size> = 1000;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = $r3;

        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager> = $r4;

        if i0 > 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r7;

     label1:
        virtualinvoke r1.<java.util.logging.Handler: java.util.logging.Level getLevel()>();

        virtualinvoke r2.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target> = r1;

        r0.<java.util.logging.MemoryHandler: int size> = i0;

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = r2;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void initProperties(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("ALL", null, "java.util.logging.SimpleFormatter", null);

        $r6 = newarray (java.util.logging.LogRecord)[i0];

        r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer> = $r6;

        return;
    }

    public void close()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogManager $r1;
        java.util.logging.Handler $r2;
        java.util.logging.Level $r3;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r1.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        virtualinvoke $r2.<java.util.logging.Handler: void close()>();

        $r3 = <java.util.logging.Level: java.util.logging.Level OFF>;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void setLevel(java.util.logging.Level)>($r3);

        return;
    }

    public void flush()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Handler $r1;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        virtualinvoke $r1.<java.util.logging.Handler: void flush()>();

        return;
    }

    public synchronized void publish(java.util.logging.LogRecord)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogRecord r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.logging.LogRecord[] $r2;
        java.util.logging.Level $r3, $r4;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        $z0 = virtualinvoke r0.<java.util.logging.MemoryHandler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $i1 = r0.<java.util.logging.MemoryHandler: int cursor>;

        $i0 = r0.<java.util.logging.MemoryHandler: int size>;

        if $i1 < $i0 goto label2;

        r0.<java.util.logging.MemoryHandler: int cursor> = 0;

     label2:
        $r2 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $i2 = r0.<java.util.logging.MemoryHandler: int cursor>;

        $i3 = $i2 + 1;

        r0.<java.util.logging.MemoryHandler: int cursor> = $i3;

        $r2[$i2] = r1;

        $r3 = virtualinvoke r1.<java.util.logging.LogRecord: java.util.logging.Level getLevel()>();

        $i4 = virtualinvoke $r3.<java.util.logging.Level: int intValue()>();

        $r4 = r0.<java.util.logging.MemoryHandler: java.util.logging.Level push>;

        $i5 = virtualinvoke $r4.<java.util.logging.Level: int intValue()>();

        if $i4 < $i5 goto label3;

        virtualinvoke r0.<java.util.logging.MemoryHandler: void push()>();

     label3:
        return;
    }

    public java.util.logging.Level getPushLevel()
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Level $r1;

        r0 := @this: java.util.logging.MemoryHandler;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.Level push>;

        return $r1;
    }

    public boolean isLoggable(java.util.logging.LogRecord)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.LogRecord r1;
        boolean $z0;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.LogRecord;

        $z0 = specialinvoke r0.<java.util.logging.Handler: boolean isLoggable(java.util.logging.LogRecord)>(r1);

        return $z0;
    }

    public void push()
    {
        java.util.logging.MemoryHandler r0;
        int i0, $i1, $i2, i3;
        java.util.logging.LogRecord[] $r1, $r3, $r4, $r7, $r9, $r10;
        java.util.logging.LogRecord $r2, $r5, $r8, $r11;
        java.util.logging.Handler $r6, $r12;

        r0 := @this: java.util.logging.MemoryHandler;

        i0 = r0.<java.util.logging.MemoryHandler: int cursor>;

     label1:
        $i1 = r0.<java.util.logging.MemoryHandler: int size>;

        if i0 >= $i1 goto label3;

        $r7 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r8 = $r7[i0];

        if $r8 == null goto label2;

        $r12 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        $r10 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r11 = $r10[i0];

        virtualinvoke $r12.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>($r11);

     label2:
        $r9 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r9[i0] = null;

        i0 = i0 + 1;

        goto label1;

     label3:
        i3 = 0;

     label4:
        $i2 = r0.<java.util.logging.MemoryHandler: int cursor>;

        if i3 >= $i2 goto label6;

        $r1 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r2 = $r1[i3];

        if $r2 == null goto label5;

        $r6 = r0.<java.util.logging.MemoryHandler: java.util.logging.Handler target>;

        $r4 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r5 = $r4[i3];

        virtualinvoke $r6.<java.util.logging.Handler: void publish(java.util.logging.LogRecord)>($r5);

     label5:
        $r3 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogRecord[] buffer>;

        $r3[i3] = null;

        i3 = i3 + 1;

        goto label4;

     label6:
        r0.<java.util.logging.MemoryHandler: int cursor> = 0;

        return;
    }

    public void setPushLevel(java.util.logging.Level)
    {
        java.util.logging.MemoryHandler r0;
        java.util.logging.Level r1;
        java.util.logging.LogManager $r2;

        r0 := @this: java.util.logging.MemoryHandler;

        r1 := @parameter0: java.util.logging.Level;

        $r2 = r0.<java.util.logging.MemoryHandler: java.util.logging.LogManager manager>;

        virtualinvoke $r2.<java.util.logging.LogManager: void checkAccess()>();

        virtualinvoke r1.<java.util.logging.Level: int intValue()>();

        r0.<java.util.logging.MemoryHandler: java.util.logging.Level push> = r1;

        return;
    }

    public static void <clinit>()
    {
        <java.util.logging.MemoryHandler: int DEFAULT_SIZE> = 1000;

        return;
    }
}
