public class java.lang.reflect.Proxy extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static int nextClassNameIndex;
    private static final java.util.Comparator ORDER_BY_SIGNATURE_AND_SUBTYPE;
    protected java.lang.reflect.InvocationHandler h;

    private void <init>()
    {
        java.lang.reflect.Proxy r0;

        r0 := @this: java.lang.reflect.Proxy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(java.lang.reflect.InvocationHandler)
    {
        java.lang.reflect.Proxy r0;
        java.lang.reflect.InvocationHandler r1;

        r0 := @this: java.lang.reflect.Proxy;

        r1 := @parameter0: java.lang.reflect.InvocationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler h> = r1;

        return;
    }

    public static transient java.lang.Class getProxyClass(java.lang.ClassLoader, java.lang.Class[]) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.Class[] r1, r61;
        java.util.ArrayList r2, $r13;
        java.util.HashSet r3, $r14;
        java.util.Map r4, r10, $r15, $r17, $r20, $r23, $r28;
        java.lang.Class r5, r7, r9;
        java.lang.Throwable r6, r12, $r55, $r56;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.String r8, r11, $r31, $r42, $r44, $r47, $r57, r60, r66;
        boolean $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Object $r16, $r21, $r30;
        java.util.Comparator $r18;
        java.lang.Class[][] $r19, r65;
        java.lang.Object[] $r22;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r32, $r33, $r36, $r37, $r40, $r41, $r43, $r46, $r49, $r50, $r52, $r53, $r54, $r58;
        java.lang.reflect.ArtMethod $r34;
        java.lang.reflect.Method $r35;
        java.lang.IllegalArgumentException $r38, $r39, $r45, $r51;
        java.lang.NullPointerException $r48, $r59;
        java.util.List r62, r63;
        java.lang.reflect.ArtMethod[] r64;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Class[];

        if r0 != null goto label01;

        r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label01:
        if r1 != null goto label02;

        $r59 = new java.lang.NullPointerException;

        specialinvoke $r59.<java.lang.NullPointerException: void <init>(java.lang.String)>("interfaces == null");

        throw $r59;

     label02:
        $r13 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r13.<java.util.ArrayList: void <init>(int)>($i1);

        r2 = $r13;

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r2, r1);

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>(java.util.Collection)>(r2);

        r3 = $r14;

        $z1 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(null);

        if $z1 == 0 goto label03;

        $r48 = new java.lang.NullPointerException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("interface list contains null: ");

        $r58 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.lang.NullPointerException: void <init>(java.lang.String)>($r57);

        throw $r48;

     label03:
        $i2 = interfaceinvoke r3.<java.util.Set: int size()>();

        $i3 = lengthof r1;

        if $i2 == $i3 goto label04;

        $r51 = new java.lang.IllegalArgumentException;

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("duplicate interface in list: ");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r47 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r51.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r51;

     label04:
        $r15 = r0.<java.lang.ClassLoader: java.util.Map proxyCache>;

        r4 = $r15;

        entermonitor $r15;

     label05:
        $r17 = r0.<java.lang.ClassLoader: java.util.Map proxyCache>;

        $r16 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (java.lang.Class) $r16;

        if r5 == null goto label07;

        exitmonitor r4;

     label06:
        return r5;

     label07:
        exitmonitor r4;

     label08:
        goto label11;

     label09:
        $r56 := @caughtexception;

        r6 = $r56;

        exitmonitor r4;

     label10:
        throw r6;

     label11:
        r60 = null;

        r61 = r1;

        i10 = lengthof r61;

        i0 = 0;

     label12:
        if i0 >= i10 goto label18;

        r7 = r61[i0];

        $z4 = virtualinvoke r7.<java.lang.Class: boolean isInterface()>();

        if $z4 != 0 goto label13;

        $r45 = new java.lang.IllegalArgumentException;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an interface");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);

        throw $r45;

     label13:
        $z3 = staticinvoke <java.lang.reflect.Proxy: boolean isVisibleToClassLoader(java.lang.ClassLoader,java.lang.Class)>(r0, r7);

        if $z3 != 0 goto label14;

        $r38 = new java.lang.IllegalArgumentException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r43 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not visible from class loader");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r44);

        throw $r38;

     label14:
        $i9 = virtualinvoke r7.<java.lang.Class: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i9);

        if $z6 != 0 goto label17;

        r8 = virtualinvoke r7.<java.lang.Class: java.lang.String getPackageName$()>();

        if r8 != null goto label15;

        r8 = "";

     label15:
        if r60 == null goto label16;

        $z5 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z5 != 0 goto label16;

        $r39 = new java.lang.IllegalArgumentException;

        specialinvoke $r39.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("non-public interfaces must be in the same package");

        throw $r39;

     label16:
        r60 = r8;

     label17:
        i0 = i0 + 1;

        goto label12;

     label18:
        r62 = staticinvoke <java.lang.reflect.Proxy: java.util.List getMethods(java.lang.Class[])>(r1);

        $r18 = <java.lang.reflect.Proxy: java.util.Comparator ORDER_BY_SIGNATURE_AND_SUBTYPE>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r62, $r18);

        staticinvoke <java.lang.reflect.Proxy: void validateReturnTypes(java.util.List)>(r62);

        r63 = staticinvoke <java.lang.reflect.Proxy: java.util.List deduplicateAndGetExceptions(java.util.List)>(r62);

        $i5 = interfaceinvoke r62.<java.util.List: int size()>();

        r64 = newarray (java.lang.reflect.ArtMethod)[$i5];

        i11 = 0;

     label19:
        $i4 = lengthof r64;

        if i11 >= $i4 goto label20;

        $r30 = interfaceinvoke r62.<java.util.List: java.lang.Object get(int)>(i11);

        $r35 = (java.lang.reflect.Method) $r30;

        $r34 = virtualinvoke $r35.<java.lang.reflect.Method: java.lang.reflect.ArtMethod getArtMethod()>();

        r64[i11] = $r34;

        i11 = i11 + 1;

        goto label19;

     label20:
        $i6 = interfaceinvoke r63.<java.util.List: int size()>();

        $r19 = newarray (java.lang.Class[])[$i6];

        $r22 = interfaceinvoke r63.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r19);

        r65 = (java.lang.Class[][]) $r22;

        if r60 == null goto label21;

        $z2 = virtualinvoke r60.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label21;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r32 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".$Proxy");

        $r31 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label22;

     label21:
        $r31 = "$Proxy";

     label22:
        r66 = $r31;

        $r23 = r0.<java.lang.ClassLoader: java.util.Map proxyCache>;

        r10 = $r23;

        entermonitor $r23;

     label23:
        $r20 = r0.<java.lang.ClassLoader: java.util.Map proxyCache>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r9 = (java.lang.Class) $r21;

        if r9 != null goto label24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r66);

        $i7 = <java.lang.reflect.Proxy: int nextClassNameIndex>;

        $i8 = $i7 + 1;

        <java.lang.reflect.Proxy: int nextClassNameIndex> = $i8;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        r11 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class generateProxy(java.lang.String,java.lang.Class[],java.lang.ClassLoader,java.lang.reflect.ArtMethod[],java.lang.Class[][])>(r11, r1, r0, r64, r65);

        $r28 = r0.<java.lang.ClassLoader: java.util.Map proxyCache>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r9);

     label24:
        exitmonitor r10;

     label25:
        goto label28;

     label26:
        $r55 := @caughtexception;

        r12 = $r55;

        exitmonitor r10;

     label27:
        throw r12;

     label28:
        return r9;

        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label23 to label25 with label26;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    private static boolean isVisibleToClassLoader(java.lang.ClassLoader, java.lang.Class)
    {
        java.lang.ClassLoader r0, $r3;
        java.lang.Class r1, $r5;
        java.lang.String $r4;
        boolean $z0;
        java.lang.ClassNotFoundException $r6;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Class;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r0 == $r3 goto label2;

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r4, 0, r0);

        if r1 != $r5 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;

     label5:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label4 with label5;
    }

    public static java.lang.Object newProxyInstance(java.lang.ClassLoader, java.lang.Class[], java.lang.reflect.InvocationHandler) throws java.lang.IllegalArgumentException
    {
        java.lang.ClassLoader r0;
        java.lang.Class[] r1, $r6;
        java.lang.reflect.InvocationHandler r2;
        java.lang.ReflectiveOperationException r3;
        java.lang.NoSuchMethodException r4, $r14;
        java.lang.Class $r5;
        java.lang.reflect.Constructor $r7;
        java.lang.Object[] $r8;
        java.lang.Object $r9;
        java.lang.NullPointerException $r10;
        java.lang.IllegalAccessException $r11, r17;
        java.lang.AssertionError $r12, r20;
        java.lang.InstantiationException $r15, r18;
        java.lang.reflect.InvocationTargetException $r16, r19;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.Class[];

        r2 := @parameter2: java.lang.reflect.InvocationHandler;

        if r2 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("invocationHandler == null");

        throw $r10;

     label1:
        $r5 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>(r0, r1);

        $r6 = newarray (java.lang.Class)[1];

        $r6[0] = class "java/lang/reflect/InvocationHandler";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r2;

        $r9 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

     label2:
        return $r9;

     label3:
        $r14 := @caughtexception;

        r4 = $r14;

        r3 = r4;

        goto label7;

     label4:
        $r11 := @caughtexception;

        r17 = $r11;

        r3 = r17;

        goto label7;

     label5:
        $r15 := @caughtexception;

        r18 = $r15;

        r3 = r18;

        goto label7;

     label6:
        $r16 := @caughtexception;

        r19 = $r16;

        r3 = r19;

     label7:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        r20 = $r12;

        virtualinvoke r20.<java.lang.AssertionError: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        throw r20;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
        catch java.lang.InstantiationException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
    }

    public static boolean isProxyClass(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isProxy()>();

        return $z0;
    }

    public static java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object) throws java.lang.IllegalArgumentException
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.reflect.Proxy $r1;
        java.lang.reflect.InvocationHandler $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.reflect.Proxy;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not a proxy instance");

        throw $r3;

     label1:
        $r1 = (java.lang.reflect.Proxy) r0;

        $r2 = $r1.<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler h>;

        return $r2;
    }

    private static java.util.List getMethods(java.lang.Class[])
    {
        java.lang.Class[] r0, $r4, $r7, $r10;
        java.util.ArrayList r1, $r3;
        java.lang.Class $r5, $r8, $r11;
        java.lang.reflect.Method $r6, $r9, $r12;
        java.lang.AssertionError $r13;
        java.lang.NoSuchMethodException $r14;

        r0 := @parameter0: java.lang.Class[];

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r1 = $r3;

     label1:
        $r5 = class "java/lang/Object";

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "java/lang/Object";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("equals", $r4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r8 = class "java/lang/Object";

        $r7 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("hashCode", $r7);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r11 = class "java/lang/Object";

        $r10 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("toString", $r10);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label4:
        staticinvoke <java.lang.reflect.Proxy: void getMethodsRecursive(java.lang.Class[],java.util.List)>(r0, r1);

        return r1;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static void getMethodsRecursive(java.lang.Class[], java.util.List)
    {
        java.lang.Class[] r0, r2, $r4;
        java.util.List r1;
        int i0, i1;
        java.lang.Class r3;
        java.lang.reflect.Method[] $r5;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.util.List;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r4 = virtualinvoke r3.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        staticinvoke <java.lang.reflect.Proxy: void getMethodsRecursive(java.lang.Class[],java.util.List)>($r4, r1);

        $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>(r1, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private static void validateReturnTypes(java.util.List)
    {
        java.util.List r0;
        java.lang.reflect.Method r1, r3;
        java.util.Iterator r2;
        java.lang.Class r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;
        java.lang.String $r12;

        r0 := @parameter0: java.util.List;

        r1 = null;

        r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.reflect.Method) $r6;

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<java.lang.reflect.Method: boolean equalNameAndParameters(java.lang.reflect.Method)>(r3);

        if $z1 != 0 goto label3;

     label2:
        r1 = r3;

        goto label1;

     label3:
        r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        r5 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z2 = virtualinvoke r4.<java.lang.Class: boolean isInterface()>();

        if $z2 == 0 goto label4;

        $z5 = virtualinvoke r5.<java.lang.Class: boolean isInterface()>();

        if $z5 == 0 goto label4;

        goto label6;

     label4:
        $z3 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z3 == 0 goto label5;

        r1 = r3;

        goto label6;

     label5:
        $z4 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r5);

        if $z4 != 0 goto label6;

        $r7 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("proxied interface methods have incompatible return types:\n  ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n  ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        goto label1;

     label7:
        return;
    }

    private static java.util.List deduplicateAndGetExceptions(java.util.List)
    {
        java.util.List r0;
        java.util.ArrayList r1, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.reflect.Method r2;
        java.lang.Class[] r3, $r9, $r10;
        java.lang.Object $r5, $r7, $r8;
        java.util.Comparator $r6;

        r0 := @parameter0: java.util.List;

        $r4 = new java.util.ArrayList;

        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        r1 = $r4;

        i0 = 0;

     label1:
        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if i0 >= $i2 goto label4;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (java.lang.reflect.Method) $r5;

        r3 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        if i0 <= 0 goto label2;

        $r6 = <java.lang.reflect.Method: java.util.Comparator ORDER_BY_SIGNATURE>;

        $i3 = i0 - 1;

        $r7 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i3);

        $i4 = interfaceinvoke $r6.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r7);

        if $i4 != 0 goto label2;

        $i6 = i0 - 1;

        $i5 = i0 - 1;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i5);

        $r10 = (java.lang.Class[]) $r8;

        $r9 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class[] intersectExceptions(java.lang.Class[],java.lang.Class[])>($r10, r3);

        interfaceinvoke r1.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i6, $r9);

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i0);

        goto label3;

     label2:
        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r3);

        i0 = i0 + 1;

     label3:
        goto label1;

     label4:
        return r1;
    }

    private static java.lang.Class[] intersectExceptions(java.lang.Class[], java.lang.Class[])
    {
        java.lang.Class[] r0, r1, r3, r5, $r7, $r9, $r10;
        java.util.HashSet r2, $r8;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        java.lang.Class r4, r6;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r11;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        $i4 = lengthof r0;

        if $i4 == 0 goto label1;

        $i5 = lengthof r1;

        if $i5 != 0 goto label2;

     label1:
        $r7 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        return $r7;

     label2:
        $z0 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>(r0, r1);

        if $z0 == 0 goto label3;

        return r0;

     label3:
        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r2 = $r8;

        r3 = r0;

        i0 = lengthof r3;

        i1 = 0;

     label4:
        if i1 >= i0 goto label9;

        r4 = r3[i1];

        r5 = r1;

        i2 = lengthof r5;

        i3 = 0;

     label5:
        if i3 >= i2 goto label8;

        r6 = r5[i3];

        $z2 = virtualinvoke r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6);

        if $z2 == 0 goto label6;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label7;

     label6:
        $z1 = virtualinvoke r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r4);

        if $z1 == 0 goto label7;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label7:
        i3 = i3 + 1;

        goto label5;

     label8:
        i1 = i1 + 1;

        goto label4;

     label9:
        $i6 = interfaceinvoke r2.<java.util.Set: int size()>();

        $r9 = newarray (java.lang.Class)[$i6];

        $r11 = interfaceinvoke r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r10 = (java.lang.Class[]) $r11;

        return $r10;
    }

    private static native java.lang.Class generateProxy(java.lang.String, java.lang.Class[], java.lang.ClassLoader, java.lang.reflect.ArtMethod[], java.lang.Class[][]);

    private static native void constructorPrototype(java.lang.reflect.InvocationHandler);

    static java.lang.Object invoke(java.lang.reflect.Proxy, java.lang.reflect.ArtMethod, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.reflect.Proxy r0;
        java.lang.reflect.ArtMethod r1;
        java.lang.Object[] r2;
        java.lang.reflect.InvocationHandler r3;
        java.lang.reflect.Method $r4;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.reflect.Proxy;

        r1 := @parameter1: java.lang.reflect.ArtMethod;

        r2 := @parameter2: java.lang.Object[];

        r3 = r0.<java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler h>;

        $r4 = new java.lang.reflect.Method;

        specialinvoke $r4.<java.lang.reflect.Method: void <init>(java.lang.reflect.ArtMethod)>(r1);

        $r5 = interfaceinvoke r3.<java.lang.reflect.InvocationHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>(r0, $r4, r2);

        return $r5;
    }

    static void <clinit>()
    {
        java.lang.reflect.Proxy$1 $r0;

        <java.lang.reflect.Proxy: long serialVersionUID> = -2222568056686623797L;

        <java.lang.reflect.Proxy: int nextClassNameIndex> = 0;

        $r0 = new java.lang.reflect.Proxy$1;

        specialinvoke $r0.<java.lang.reflect.Proxy$1: void <init>()>();

        <java.lang.reflect.Proxy: java.util.Comparator ORDER_BY_SIGNATURE_AND_SUBTYPE> = $r0;

        return;
    }
}
