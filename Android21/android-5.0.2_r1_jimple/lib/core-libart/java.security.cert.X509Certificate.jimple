public abstract class java.security.cert.X509Certificate extends java.security.cert.Certificate implements java.security.cert.X509Extension
{
    private static final long serialVersionUID;

    protected void <init>()
    {
        java.security.cert.X509Certificate r0;

        r0 := @this: java.security.cert.X509Certificate;

        specialinvoke r0.<java.security.cert.Certificate: void <init>(java.lang.String)>("X.509");

        return;
    }

    public abstract void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;

    public abstract void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException;

    public abstract int getVersion();

    public abstract java.math.BigInteger getSerialNumber();

    public abstract java.security.Principal getIssuerDN();

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        java.security.cert.X509Certificate r0, r2;
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.security.cert.Certificate $r5;
        javax.security.auth.x500.X500Principal $r6;
        java.lang.Exception $r7, r9;
        java.lang.RuntimeException $r8;

        r0 := @this: java.security.cert.X509Certificate;

     label1:
        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

        r2 = (java.security.cert.X509Certificate) $r5;

        $r6 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get X500Principal issuer", r9);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract java.security.Principal getSubjectDN();

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        java.security.cert.X509Certificate r0, r2;
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.security.cert.Certificate $r5;
        javax.security.auth.x500.X500Principal $r6;
        java.lang.Exception $r7, r9;
        java.lang.RuntimeException $r8;

        r0 := @this: java.security.cert.X509Certificate;

     label1:
        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = virtualinvoke r0.<java.security.cert.X509Certificate: byte[] getEncoded()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r3);

        r2 = (java.security.cert.X509Certificate) $r5;

        $r6 = virtualinvoke r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get X500Principal subject", r9);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract java.util.Date getNotBefore();

    public abstract java.util.Date getNotAfter();

    public abstract byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException;

    public abstract byte[] getSignature();

    public abstract java.lang.String getSigAlgName();

    public abstract java.lang.String getSigAlgOID();

    public abstract byte[] getSigAlgParams();

    public abstract boolean[] getIssuerUniqueID();

    public abstract boolean[] getSubjectUniqueID();

    public abstract boolean[] getKeyUsage();

    public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;

        r0 := @this: java.security.cert.X509Certificate;

        return null;
    }

    public abstract int getBasicConstraints();

    public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;

        r0 := @this: java.security.cert.X509Certificate;

        return null;
    }

    public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        java.security.cert.X509Certificate r0;

        r0 := @this: java.security.cert.X509Certificate;

        return null;
    }

    public static void <clinit>()
    {
        <java.security.cert.X509Certificate: long serialVersionUID> = -2491127588187038216L;

        return;
    }
}
