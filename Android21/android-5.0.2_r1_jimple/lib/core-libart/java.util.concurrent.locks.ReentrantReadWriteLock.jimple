public class java.util.concurrent.locks.ReentrantReadWriteLock extends java.lang.Object implements java.util.concurrent.locks.ReadWriteLock, java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readerLock;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writerLock;
    final java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync;

    public void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        boolean z0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$FairSync r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock r6;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock r7;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if z0 == 0 goto label1;

        r4 = new java.util.concurrent.locks.ReentrantReadWriteLock$FairSync;

        $r1 = r4;

        specialinvoke r4.<java.util.concurrent.locks.ReentrantReadWriteLock$FairSync: void <init>()>();

        goto label2;

     label1:
        r5 = new java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync;

        $r1 = r5;

        specialinvoke r5.<java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync: void <init>()>();

     label2:
        r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync> = $r1;

        r6 = new java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock;

        specialinvoke r6.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>(r0);

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readerLock> = r6;

        r7 = new java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock;

        specialinvoke r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>(r0);

        r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writerLock> = r7;

        return;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writerLock>;

        return $r1;
    }

    public java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readerLock>;

        return $r1;
    }

    public final boolean isFair()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = $r1 instanceof java.util.concurrent.locks.ReentrantReadWriteLock$FairSync;

        return $z0;
    }

    protected java.lang.Thread getOwner()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.lang.Thread getOwner()>();

        return $r2;
    }

    public int getReadLockCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadLockCount()>();

        return $i0;
    }

    public boolean isWriteLocked()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isWriteLocked()>();

        return $z0;
    }

    public boolean isWriteLockedByCurrentThread()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isHeldExclusively()>();

        return $z0;
    }

    public int getWriteHoldCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getWriteHoldCount()>();

        return $i0;
    }

    public int getReadHoldCount()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getReadHoldCount()>();

        return $i0;
    }

    protected java.util.Collection getQueuedWriterThreads()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.Collection getExclusiveQueuedThreads()>();

        return $r2;
    }

    protected java.util.Collection getQueuedReaderThreads()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.Collection getSharedQueuedThreads()>();

        return $r2;
    }

    public final boolean hasQueuedThreads()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean hasQueuedThreads()>();

        return $z0;
    }

    public final boolean hasQueuedThread(java.lang.Thread)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.lang.Thread r1;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        r1 := @parameter0: java.lang.Thread;

        $r2 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean isQueued(java.lang.Thread)>(r1);

        return $z0;
    }

    public final int getQueueLength()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        int $i0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getQueueLength()>();

        return $i0;
    }

    protected java.util.Collection getQueuedThreads()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.util.Collection $r2;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.Collection getQueuedThreads()>();

        return $r2;
    }

    public boolean hasWaiters(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0, $z1;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r4;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $z1 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $z1;
    }

    public int getWaitQueueLength(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r4;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $i0 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $i0;
    }

    protected java.util.Collection getWaitingThreads(java.util.concurrent.locks.Condition)
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.Condition r1;
        boolean $z0;
        java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject $r2;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r3;
        java.util.Collection $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        r1 := @parameter0: java.util.concurrent.locks.Condition;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $z0 = r1 instanceof java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject;

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not owner");

        throw $r5;

     label2:
        $r3 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        $r2 = (java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject) r1;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: java.util.Collection getWaitingThreads(java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)>($r2);

        return $r4;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        int i0, i1, i2;
        java.util.concurrent.locks.ReentrantReadWriteLock$Sync $r1;
        java.lang.StringBuilder $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r3, $r10;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync sync>;

        i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int getCount()>();

        i1 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int exclusiveCount(int)>(i0);

        i2 = staticinvoke <java.util.concurrent.locks.ReentrantReadWriteLock$Sync: int sharedCount(int)>(i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[Write locks = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", Read locks = ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public volatile java.util.concurrent.locks.Lock writeLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        return $r1;
    }

    public volatile java.util.concurrent.locks.Lock readLock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock;

        $r1 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantReadWriteLock: long serialVersionUID> = -6992448646407690164L;

        return;
    }
}
