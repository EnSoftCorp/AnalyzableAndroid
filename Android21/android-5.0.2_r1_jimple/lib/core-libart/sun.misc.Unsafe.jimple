public final class sun.misc.Unsafe extends java.lang.Object
{
    private static final sun.misc.Unsafe THE_ONE;
    private static final sun.misc.Unsafe theUnsafe;

    private void <init>()
    {
        sun.misc.Unsafe r0;

        r0 := @this: sun.misc.Unsafe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static sun.misc.Unsafe getUnsafe()
    {
        java.lang.ClassLoader r0, $r3;
        sun.misc.Unsafe $r1;
        java.lang.Class $r2;
        java.lang.SecurityException $r4;

        r0 = staticinvoke <dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>();

        if r0 == null goto label1;

        $r2 = class "sun/misc/Unsafe";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if r0 == $r3 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Unsafe access denied");

        throw $r4;

     label1:
        $r1 = <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE>;

        return $r1;
    }

    public long objectFieldOffset(java.lang.reflect.Field)
    {
        sun.misc.Unsafe r0;
        java.lang.reflect.Field r1;
        int $i0, $i1;
        boolean $z0;
        long $l2;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valid for instance fields only");

        throw $r2;

     label1:
        $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getOffset()>();

        $l2 = (long) $i1;

        return $l2;
    }

    public int arrayBaseOffset(java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.Class r1, r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Valid for array classes only: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $i0 = staticinvoke <sun.misc.Unsafe: int getArrayBaseOffsetForComponentType(java.lang.Class)>(r2);

        return $i0;
    }

    public int arrayIndexScale(java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.Class r1, r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Class;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Valid for array classes only: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $i0 = staticinvoke <sun.misc.Unsafe: int getArrayIndexScaleForComponentType(java.lang.Class)>(r2);

        return $i0;
    }

    private static native int getArrayBaseOffsetForComponentType(java.lang.Class);

    private static native int getArrayIndexScaleForComponentType(java.lang.Class);

    public native boolean compareAndSwapInt(java.lang.Object, long, int, int);

    public native boolean compareAndSwapLong(java.lang.Object, long, long, long);

    public native boolean compareAndSwapObject(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public native int getIntVolatile(java.lang.Object, long);

    public native void putIntVolatile(java.lang.Object, long, int);

    public native long getLongVolatile(java.lang.Object, long);

    public native void putLongVolatile(java.lang.Object, long, long);

    public native java.lang.Object getObjectVolatile(java.lang.Object, long);

    public native void putObjectVolatile(java.lang.Object, long, java.lang.Object);

    public native int getInt(java.lang.Object, long);

    public native void putInt(java.lang.Object, long, int);

    public native void putOrderedInt(java.lang.Object, long, int);

    public native long getLong(java.lang.Object, long);

    public native void putLong(java.lang.Object, long, long);

    public native void putOrderedLong(java.lang.Object, long, long);

    public native java.lang.Object getObject(java.lang.Object, long);

    public native void putObject(java.lang.Object, long, java.lang.Object);

    public native void putOrderedObject(java.lang.Object, long, java.lang.Object);

    public void park(boolean, long)
    {
        sun.misc.Unsafe r0;
        boolean z0;
        long l0;
        java.lang.Thread $r1, $r2;

        r0 := @this: sun.misc.Unsafe;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        if z0 == 0 goto label1;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void parkUntil(long)>(l0);

        goto label2;

     label1:
        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r1.<java.lang.Thread: void parkFor(long)>(l0);

     label2:
        return;
    }

    public void unpark(java.lang.Object)
    {
        sun.misc.Unsafe r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.Thread $r3;

        r0 := @this: sun.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Thread;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Thread) r1;

        virtualinvoke $r3.<java.lang.Thread: void unpark()>();

        goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("valid for Threads only");

        throw $r2;

     label2:
        return;
    }

    public native java.lang.Object allocateInstance(java.lang.Class);

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;

        $r0 = new sun.misc.Unsafe;

        specialinvoke $r0.<sun.misc.Unsafe: void <init>()>();

        <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE> = $r0;

        $r1 = <sun.misc.Unsafe: sun.misc.Unsafe THE_ONE>;

        <sun.misc.Unsafe: sun.misc.Unsafe theUnsafe> = $r1;

        return;
    }
}
