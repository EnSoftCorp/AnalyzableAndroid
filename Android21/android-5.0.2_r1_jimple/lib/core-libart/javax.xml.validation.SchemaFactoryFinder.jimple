final class javax.xml.validation.SchemaFactoryFinder extends java.lang.Object
{
    private static final java.lang.String W3C_XML_SCHEMA10_NS_URI;
    private static final java.lang.String W3C_XML_SCHEMA11_NS_URI;
    private static boolean debug;
    private static java.util.Properties cacheProps;
    private static boolean firstTime;
    private static final int DEFAULT_LINE_LENGTH;
    private final java.lang.ClassLoader classLoader;
    private static final java.lang.Class SERVICE_CLASS;
    private static final java.lang.String SERVICE_ID;

    private static void debugPrintln(java.lang.String)
    {
        java.lang.String r0, $r5;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.io.PrintStream $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JAXP: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ClassLoader r1;
        boolean $z0;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader> = r1;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<javax.xml.validation.SchemaFactoryFinder: void debugDisplayClassLoader()>();

     label1:
        return;
    }

    private void debugDisplayClassLoader()
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ClassLoader $r1, $r3, $r4, $r5, $r8, $r14, $r21;
        java.lang.Thread $r2;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r19, $r20, $r23;
        java.lang.String $r11, $r16, $r22;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        $r1 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r1 != $r3 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("using thread context class loader (");

        $r21 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for search");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r22);

        return;

     label1:
        $r4 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r5 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        if $r4 != $r5 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("using system class loader (");

        $r14 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for search");

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r16);

        return;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("using class loader (");

        $r8 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for search");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r11);

        return;
    }

    public javax.xml.validation.SchemaFactory newFactory(java.lang.String)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.String r1, $r6, $r10, $r15;
        javax.xml.validation.SchemaFactory r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r7, $r8, $r11, $r12, $r13;
        java.lang.Class $r9;
        java.lang.NullPointerException $r14;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("schemaLanguage == null");

        throw $r14;

     label1:
        r2 = specialinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory _newFactory(java.lang.String)>(r1);

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label3;

        if r2 == null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("factory \'");

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found for ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r15);

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to find a factory for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r6);

     label3:
        return r2;
    }

    private javax.xml.validation.SchemaFactory _newFactory(java.lang.String)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.String r1, r3, r4, r5, $r11, $r16, $r21, $r26, $r33, $r35, $r44, $r50, $r53, $r66, $r70, r75, r76;
        javax.xml.validation.SchemaFactory r2, $r25, $r27, r77, r81;
        java.util.Properties r6, $r23, $r40, $r46;
        java.io.File r7, $r39;
        java.lang.Throwable r8, $r52, $r71, r74;
        java.lang.StringBuilder $r9, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20, $r22, $r29, $r30, $r32, $r34, $r36, $r37, $r38, $r41, $r42, $r43, $r47, $r48, $r49, $r51, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r65, $r67, $r68, $r69;
        java.lang.Class $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Iterable $r24;
        java.lang.Object $r28;
        java.io.InputStream $r31;
        java.io.FileInputStream $r45;
        int $i0;
        java.lang.VirtualMachineError $r54, r72;
        java.lang.Exception $r62, r78;
        java.io.IOException $r63, r82;
        java.lang.ThreadDeath $r64, r73;
        java.util.Iterator r79;
        java.net.URL r80;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.String;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r3 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label01:
        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label02;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking up system property \'");

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r57 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r53 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r53);

     label02:
        r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r3);

        if r4 == null goto label05;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 <= 0 goto label05;

        $z15 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z15 == 0 goto label03;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r47 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The value is \'");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r50);

     label03:
        r2 = virtualinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>(r4);

        if r2 == null goto label06;

     label04:
        return r2;

     label05:
        $z1 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z1 == 0 goto label06;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("The property is undefined.");

     label06:
        goto label10;

     label07:
        $r54 := @caughtexception;

        r72 = $r54;

        throw r72;

     label08:
        $r64 := @caughtexception;

        r73 = $r64;

        throw r73;

     label09:
        $r71 := @caughtexception;

        r74 = $r71;

        $z18 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z18 == 0 goto label10;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to look up system property \'");

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r65 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r66);

        virtualinvoke r74.<java.lang.Throwable: void printStackTrace()>();

     label10:
        r75 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r16 = <java.io.File: java.lang.String separator>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");

        $r21 = <java.io.File: java.lang.String separator>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jaxp.properties");

        r5 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        $z2 = <javax.xml.validation.SchemaFactoryFinder: boolean firstTime>;

        if $z2 == 0 goto label18;

        $r40 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        r6 = $r40;

        entermonitor $r40;

     label12:
        $z12 = <javax.xml.validation.SchemaFactoryFinder: boolean firstTime>;

        if $z12 == 0 goto label14;

        $r39 = new java.io.File;

        specialinvoke $r39.<java.io.File: void <init>(java.lang.String)>(r5);

        r7 = $r39;

        <javax.xml.validation.SchemaFactoryFinder: boolean firstTime> = 0;

        $z13 = virtualinvoke r7.<java.io.File: boolean exists()>();

        if $z13 == 0 goto label14;

        $z14 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z14 == 0 goto label13;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read properties file ");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r44);

     label13:
        $r46 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        $r45 = new java.io.FileInputStream;

        specialinvoke $r45.<java.io.FileInputStream: void <init>(java.io.File)>(r7);

        virtualinvoke $r46.<java.util.Properties: void load(java.io.InputStream)>($r45);

     label14:
        exitmonitor r6;

     label15:
        goto label18;

     label16:
        $r52 := @caughtexception;

        r8 = $r52;

        exitmonitor r6;

     label17:
        throw r8;

     label18:
        $r23 = <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps>;

        r76 = virtualinvoke $r23.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r3);

        $z3 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z3 == 0 goto label19;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found ");

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r76);

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in $java.home/jaxp.properties");

        $r35 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r35);

     label19:
        if r76 == null goto label21;

        r77 = virtualinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>(r76);

        if r77 == null goto label21;

     label20:
        return r77;

     label21:
        goto label23;

     label22:
        $r62 := @caughtexception;

        r78 = $r62;

        $z17 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z17 == 0 goto label23;

        virtualinvoke r78.<java.lang.Exception: void printStackTrace()>();

     label23:
        $r24 = specialinvoke r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.Iterable createServiceFileIterator()>();

        r79 = interfaceinvoke $r24.<java.lang.Iterable: java.util.Iterator iterator()>();

     label24:
        $z5 = interfaceinvoke r79.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label30;

        $r28 = interfaceinvoke r79.<java.util.Iterator: java.lang.Object next()>();

        r80 = (java.net.URL) $r28;

        $z11 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z11 == 0 goto label25;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("looking into ");

        $r34 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r80);

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r33);

     label25:
        $r26 = virtualinvoke r80.<java.net.URL: java.lang.String toExternalForm()>();

        $r31 = virtualinvoke r80.<java.net.URL: java.io.InputStream openStream()>();

        r81 = specialinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory loadFromServicesFile(java.lang.String,java.lang.String,java.io.InputStream)>(r1, $r26, $r31);

        if r81 == null goto label27;

     label26:
        return r81;

     label27:
        goto label29;

     label28:
        $r63 := @caughtexception;

        r82 = $r63;

        $z16 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z16 == 0 goto label29;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to read ");

        $r60 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r80);

        $r70 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r70);

        virtualinvoke r82.<java.io.IOException: void printStackTrace()>();

     label29:
        goto label24;

     label30:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/2001/XMLSchema");

        if $z6 != 0 goto label31;

        $z9 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/XMLSchema/v1.0");

        if $z9 == 0 goto label33;

     label31:
        $z4 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z4 == 0 goto label32;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("attempting to use the platform default XML Schema 1.0 validator");

     label32:
        $r25 = virtualinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>("org.apache.xerces.jaxp.validation.XMLSchemaFactory");

        return $r25;

     label33:
        $z10 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("http://www.w3.org/XML/XMLSchema/v1.1");

        if $z10 == 0 goto label35;

        $z8 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z8 == 0 goto label34;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("attempting to use the platform default XML Schema 1.1 validator");

     label34:
        $r27 = virtualinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>("org.apache.xerces.jaxp.validation.XMLSchema11Factory");

        return $r27;

     label35:
        $z7 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z7 == 0 goto label36;

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>("all things were tried, but none was found. bailing out.");

     label36:
        return null;

        catch java.lang.VirtualMachineError from label01 to label04 with label07;
        catch java.lang.VirtualMachineError from label05 to label06 with label07;
        catch java.lang.ThreadDeath from label01 to label04 with label08;
        catch java.lang.ThreadDeath from label05 to label06 with label08;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label12 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Exception from label11 to label20 with label22;
        catch java.io.IOException from label25 to label26 with label28;
    }

    javax.xml.validation.SchemaFactory createInstance(java.lang.String)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.String r1, $r9, $r10, $r14, $r16, $r21, $r25;
        java.lang.Class r2, $r8;
        java.lang.Object r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.ClassLoader $r4, $r18;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r15, $r17, $r19, $r20, $r22, $r23, $r26, $r27;
        javax.xml.validation.SchemaFactory $r13;
        java.lang.Throwable $r24, r32;
        java.lang.VirtualMachineError $r28, r30;
        java.lang.ThreadDeath $r29, r31;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.String;

     label01:
        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label02;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("instantiating ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r21);

     label02:
        $r4 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        if $r4 == null goto label03;

        $r18 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        r2 = virtualinvoke $r18.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1);

        goto label04;

     label03:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label04:
        $z1 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z1 == 0 goto label05;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loaded it from ");

        $r14 = staticinvoke <javax.xml.validation.SchemaFactoryFinder: java.lang.String which(java.lang.Class)>(r2);

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r16);

     label05:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $z2 = r3 instanceof javax.xml.validation.SchemaFactory;

        if $z2 == 0 goto label07;

        $r13 = (javax.xml.validation.SchemaFactory) r3;

     label06:
        return $r13;

     label07:
        $z3 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z3 == 0 goto label08;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not assignable to ");

        $r8 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r10);

     label08:
        goto label12;

     label09:
        $r28 := @caughtexception;

        r30 = $r28;

        throw r30;

     label10:
        $r29 := @caughtexception;

        r31 = $r29;

        throw r31;

     label11:
        $r24 := @caughtexception;

        r32 = $r24;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to instantiate ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r25);

        $z4 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z4 == 0 goto label12;

        virtualinvoke r32.<java.lang.Throwable: void printStackTrace()>();

     label12:
        return null;

        catch java.lang.VirtualMachineError from label01 to label06 with label09;
        catch java.lang.VirtualMachineError from label07 to label08 with label09;
        catch java.lang.ThreadDeath from label01 to label06 with label10;
        catch java.lang.ThreadDeath from label07 to label08 with label10;
        catch java.lang.Throwable from label01 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
    }

    private java.lang.Iterable createServiceFileIterator()
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.ClassLoader r1, $r2, $r4;
        java.lang.String $r3, $r8, $r11, $r13, $r19, $r21;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r17, $r20, $r22;
        java.lang.Class $r12;
        java.util.Set $r14, $r18;
        java.net.URL $r15;
        java.io.IOException $r16, r24;
        java.util.Enumeration r23;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        $r2 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        if $r2 != null goto label1;

        $r12 = class "javax/xml/validation/SchemaFactoryFinder";

        r1 = virtualinvoke $r12.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r13 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r15 = virtualinvoke r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r13);

        $r14 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r15);

        return $r14;

     label1:
        $r4 = r0.<javax.xml.validation.SchemaFactoryFinder: java.lang.ClassLoader classLoader>;

        $r3 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        r23 = virtualinvoke $r4.<java.lang.ClassLoader: java.util.Enumeration getResources(java.lang.String)>($r3);

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label2;

        $z1 = interfaceinvoke r23.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 != 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no ");

        $r8 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file was found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r11);

     label2:
        $r5 = staticinvoke <java.util.Collections: java.util.ArrayList list(java.util.Enumeration)>(r23);

     label3:
        return $r5;

     label4:
        $r16 := @caughtexception;

        r24 = $r16;

        $z2 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z2 == 0 goto label5;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("failed to enumerate resources ");

        $r19 = <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r21);

        virtualinvoke r24.<java.io.IOException: void printStackTrace()>();

     label5:
        $r18 = staticinvoke <java.util.Collections: java.util.Set emptySet()>();

        return $r18;

        catch java.io.IOException from label1 to label3 with label4;
    }

    private javax.xml.validation.SchemaFactory loadFromServicesFile(java.lang.String, java.lang.String, java.io.InputStream)
    {
        javax.xml.validation.SchemaFactoryFinder r0;
        java.lang.String r1, r2, $r13, r18, r19;
        java.io.InputStream r3;
        java.io.BufferedReader r4, $r7, $r17;
        javax.xml.validation.SchemaFactory r5, r6;
        boolean $z0, $z1;
        java.io.InputStreamReader $r8, $r16;
        int $i0, i1;
        java.lang.StringBuilder $r9, $r10, $r11;
        java.lang.Exception $r12;
        java.io.UnsupportedEncodingException $r14;
        java.io.IOException $r15;

        r0 := @this: javax.xml.validation.SchemaFactoryFinder;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.InputStream;

        $z0 = <javax.xml.validation.SchemaFactoryFinder: boolean debug>;

        if $z0 == 0 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reading ");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.xml.validation.SchemaFactoryFinder: void debugPrintln(java.lang.String)>($r13);

     label01:
        $r7 = new java.io.BufferedReader;

        $r8 = new java.io.InputStreamReader;

        specialinvoke $r8.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r3, "UTF-8");

        specialinvoke $r7.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r8, 80);

        r4 = $r7;

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r17 = new java.io.BufferedReader;

        $r16 = new java.io.InputStreamReader;

        specialinvoke $r16.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r3);

        specialinvoke $r17.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r16, 80);

        r4 = $r17;

     label04:
        r5 = null;

     label05:
        r18 = virtualinvoke r4.<java.io.BufferedReader: java.lang.String readLine()>();

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        goto label15;

     label08:
        if r18 == null goto label15;

        i1 = virtualinvoke r18.<java.lang.String: int indexOf(int)>(35);

        if i1 == -1 goto label09;

        r18 = virtualinvoke r18.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

     label09:
        r19 = virtualinvoke r18.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i0 != 0 goto label10;

        goto label05;

     label10:
        r6 = virtualinvoke r0.<javax.xml.validation.SchemaFactoryFinder: javax.xml.validation.SchemaFactory createInstance(java.lang.String)>(r19);

        $z1 = virtualinvoke r6.<javax.xml.validation.SchemaFactory: boolean isSchemaLanguageSupported(java.lang.String)>(r1);

        if $z1 == 0 goto label12;

        r5 = r6;

     label11:
        goto label15;

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

     label14:
        goto label05;

     label15:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        return r5;

        catch java.io.UnsupportedEncodingException from label01 to label02 with label03;
        catch java.io.IOException from label05 to label06 with label07;
        catch java.lang.Exception from label10 to label11 with label13;
    }

    private static java.lang.String which(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = staticinvoke <javax.xml.validation.SchemaFactoryFinder: java.lang.String which(java.lang.String,java.lang.ClassLoader)>($r1, $r2);

        return $r3;
    }

    private static java.lang.String which(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String r0, r2, $r5, $r8;
        java.lang.ClassLoader r1;
        java.net.URL r3;
        java.lang.StringBuilder $r4, $r6, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        if r1 != null goto label1;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        r3 = virtualinvoke r1.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2);

        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<java.net.URL: java.lang.String toString()>();

        goto label3;

     label2:
        $r8 = null;

     label3:
        return $r8;
    }

    static void <clinit>()
    {
        java.lang.String r0, $r5, $r7, $r8;
        java.util.Properties $r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        java.lang.Class $r4;
        boolean $z0, $z1;

        <javax.xml.validation.SchemaFactoryFinder: int DEFAULT_LINE_LENGTH> = 80;

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String W3C_XML_SCHEMA11_NS_URI> = "http://www.w3.org/XML/XMLSchema/v1.1";

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String W3C_XML_SCHEMA10_NS_URI> = "http://www.w3.org/XML/XMLSchema/v1.0";

        <javax.xml.validation.SchemaFactoryFinder: boolean debug> = 0;

        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        <javax.xml.validation.SchemaFactoryFinder: java.util.Properties cacheProps> = $r1;

        <javax.xml.validation.SchemaFactoryFinder: boolean firstTime> = 1;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jaxp.debug");

        if r0 == null goto label1;

        $r8 = "false";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <javax.xml.validation.SchemaFactoryFinder: boolean debug> = $z1;

        <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS> = class "javax/xml/validation/SchemaFactory";

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/");

        $r4 = <javax.xml.validation.SchemaFactoryFinder: java.lang.Class SERVICE_CLASS>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <javax.xml.validation.SchemaFactoryFinder: java.lang.String SERVICE_ID> = $r7;

        return;
    }
}
