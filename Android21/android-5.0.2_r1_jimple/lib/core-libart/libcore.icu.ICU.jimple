public final class libcore.icu.ICU extends java.lang.Object
{
    private static final libcore.util.BasicLruCache CACHED_PATTERNS;
    private static java.util.Locale[] availableLocalesCache;
    private static java.lang.String[] isoCountries;
    private static java.lang.String[] isoLanguages;
    private static final int IDX_LANGUAGE;
    private static final int IDX_SCRIPT;
    private static final int IDX_REGION;
    private static final int IDX_VARIANT;
    public static final int U_ZERO_ERROR;
    public static final int U_INVALID_CHAR_FOUND;
    public static final int U_TRUNCATED_CHAR_FOUND;
    public static final int U_ILLEGAL_CHAR_FOUND;
    public static final int U_BUFFER_OVERFLOW_ERROR;

    public void <init>()
    {
        libcore.icu.ICU r0;

        r0 := @this: libcore.icu.ICU;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String[] getISOLanguages()
    {
        java.lang.String[] $r0, $r1, $r3, $r4;
        java.lang.Object $r2;

        $r0 = <libcore.icu.ICU: java.lang.String[] isoLanguages>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOLanguagesNative()>();

        <libcore.icu.ICU: java.lang.String[] isoLanguages> = $r4;

     label1:
        $r1 = <libcore.icu.ICU: java.lang.String[] isoLanguages>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public static java.lang.String[] getISOCountries()
    {
        java.lang.String[] $r0, $r1, $r3, $r4;
        java.lang.Object $r2;

        $r0 = <libcore.icu.ICU: java.lang.String[] isoCountries>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOCountriesNative()>();

        <libcore.icu.ICU: java.lang.String[] isoCountries> = $r4;

     label1:
        $r1 = <libcore.icu.ICU: java.lang.String[] isoCountries>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    private static void parseLangScriptRegionAndVariants(java.lang.String, java.lang.String[])
    {
        java.lang.String r0, r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r11, r12;
        java.lang.String[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(95);

        $i3 = i0 + 1;

        i1 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(95, $i3);

        $i4 = i1 + 1;

        i2 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(95, $i4);

        if i0 != -1 goto label01;

        r1[0] = r0;

        goto label15;

     label01:
        if i1 != -1 goto label06;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r1[0] = $r10;

        $i20 = i0 + 1;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i20);

        $i18 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i18 != 4 goto label02;

        r1[1] = r2;

        goto label05;

     label02:
        $i19 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i19 == 2 goto label03;

        $i21 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i21 != 3 goto label04;

     label03:
        r1[2] = r2;

        goto label05;

     label04:
        r1[3] = r2;

     label05:
        goto label15;

     label06:
        if i2 != -1 goto label13;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r1[0] = $r8;

        $i10 = i0 + 1;

        r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i10, i1);

        $i11 = i1 + 1;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i11);

        $i14 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i14 != 4 goto label09;

        r1[1] = r11;

        $i15 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i15 == 2 goto label07;

        $i17 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i17 == 3 goto label07;

        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label08;

     label07:
        r1[2] = r3;

        goto label12;

     label08:
        r1[3] = r3;

        goto label12;

     label09:
        $z0 = virtualinvoke r11.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label10;

        $i12 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i12 == 2 goto label10;

        $i13 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i13 != 3 goto label11;

     label10:
        r1[2] = r11;

        r1[3] = r3;

        goto label12;

     label11:
        $i16 = i0 + 1;

        $r9 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i16);

        r1[3] = $r9;

     label12:
        goto label15;

     label13:
        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r1[0] = $r4;

        $i5 = i0 + 1;

        r12 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i5, i1);

        $i7 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i7 != 4 goto label14;

        r1[1] = r12;

        $i8 = i1 + 1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i8, i2);

        r1[2] = $r6;

        $i9 = i2 + 1;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i9);

        r1[3] = $r7;

        goto label15;

     label14:
        r1[2] = r12;

        $i6 = i1 + 1;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i6);

        r1[3] = $r5;

     label15:
        return;
    }

    public static java.util.Locale localeFromIcuLocaleId(java.lang.String)
    {
        java.lang.String r0, r4, r7, r8, r10, $r13, $r14, $r15, $r16, $r17, $r21, $r23, $r26, r27;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i8;
        java.util.Map r1, r2;
        java.util.Set r3;
        java.lang.String[] r5, r6, r9, $r11, r28;
        java.util.Locale $r12;
        java.util.HashMap $r18, $r19;
        java.util.HashSet $r20;
        boolean $z0;
        java.lang.Character $r24;
        char c9;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(64);

        r1 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r2 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r3 = <java.util.Collections: java.util.Set EMPTY_SET>;

        if i0 == -1 goto label7;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r1 = $r19;

        $r18 = new java.util.HashMap;

        specialinvoke $r18.<java.util.HashMap: void <init>()>();

        r2 = $r18;

        $r20 = new java.util.HashSet;

        specialinvoke $r20.<java.util.HashSet: void <init>()>();

        r3 = $r20;

        $i5 = i0 + 1;

        r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i5);

        r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        r6 = r5;

        i1 = lengthof r6;

        i2 = 0;

     label1:
        if i2 >= i1 goto label7;

        r7 = r6[i2];

        $z0 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("attribute=");

        if $z0 == 0 goto label4;

        $r26 = "attribute=";

        $i7 = virtualinvoke $r26.<java.lang.String: int length()>();

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i7);

        r9 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        i3 = lengthof r9;

        i4 = 0;

     label2:
        if i4 >= i3 goto label3;

        r10 = r9[i4];

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r10);

        i4 = i4 + 1;

        goto label2;

     label3:
        goto label6;

     label4:
        i8 = virtualinvoke r7.<java.lang.String: int indexOf(int)>(61);

        if i8 != 1 goto label5;

        r27 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>(2);

        c9 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0);

        $r24 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c9);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r27);

        goto label6;

     label5:
        $r23 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, i8);

        $i6 = i8 + 1;

        $r21 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i6);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r21);

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        $r11 = newarray (java.lang.String)[4];

        $r11[0] = "";

        $r11[1] = "";

        $r11[2] = "";

        $r11[3] = "";

        r28 = $r11;

        if i0 != -1 goto label8;

        staticinvoke <libcore.icu.ICU: void parseLangScriptRegionAndVariants(java.lang.String,java.lang.String[])>(r0, r28);

        goto label9;

     label8:
        $r13 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        staticinvoke <libcore.icu.ICU: void parseLangScriptRegionAndVariants(java.lang.String,java.lang.String[])>($r13, r28);

     label9:
        $r12 = new java.util.Locale;

        $r16 = r28[0];

        $r17 = r28[2];

        $r14 = r28[3];

        $r15 = r28[1];

        specialinvoke $r12.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>($r16, $r17, $r14, $r15, r3, r2, r1, 1);

        return $r12;
    }

    public static java.util.Locale[] localesFromStrings(java.lang.String[])
    {
        java.lang.String[] r0, r2;
        java.util.LinkedHashSet r1, $r4;
        int i0, i1, $i2;
        java.lang.String r3;
        java.util.Locale[] $r5, $r7;
        java.lang.Object[] $r6;
        java.util.Locale $r8;

        r0 := @parameter0: java.lang.String[];

        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        r1 = $r4;

        r2 = r0;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r8 = staticinvoke <libcore.icu.ICU: java.util.Locale localeFromIcuLocaleId(java.lang.String)>(r3);

        virtualinvoke r1.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $i2 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>();

        $r5 = newarray (java.util.Locale)[$i2];

        $r6 = virtualinvoke r1.<java.util.LinkedHashSet: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (java.util.Locale[]) $r6;

        return $r7;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0, $r1, $r3, $r5;
        java.lang.Object $r2;
        java.lang.String[] $r4;

        $r0 = <libcore.icu.ICU: java.util.Locale[] availableLocalesCache>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableLocalesNative()>();

        $r5 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r4);

        <libcore.icu.ICU: java.util.Locale[] availableLocalesCache> = $r5;

     label1:
        $r1 = <libcore.icu.ICU: java.util.Locale[] availableLocalesCache>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.util.Locale[]) $r2;

        return $r3;
    }

    public static java.util.Locale[] getAvailableBreakIteratorLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableBreakIteratorLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    public static java.util.Locale[] getAvailableCalendarLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableCalendarLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    public static java.util.Locale[] getAvailableCollatorLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableCollatorLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    public static java.util.Locale[] getAvailableDateFormatLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableDateFormatLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    public static java.util.Locale[] getAvailableDateFormatSymbolsLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableDateFormatLocales()>();

        return $r0;
    }

    public static java.util.Locale[] getAvailableDecimalFormatSymbolsLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableNumberFormatLocales()>();

        return $r0;
    }

    public static java.util.Locale[] getAvailableNumberFormatLocales()
    {
        java.lang.String[] $r0;
        java.util.Locale[] $r1;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getAvailableNumberFormatLocalesNative()>();

        $r1 = staticinvoke <libcore.icu.ICU: java.util.Locale[] localesFromStrings(java.lang.String[])>($r0);

        return $r1;
    }

    public static java.lang.String getBestDateTimePattern(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, r2, r3, r5;
        java.util.Locale r1;
        libcore.util.BasicLruCache r4, $r11, $r12, $r15;
        java.lang.Throwable r6, $r16;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.Object $r13;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        r2 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        r4 = $r11;

        entermonitor $r11;

     label1:
        $r12 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        $r13 = virtualinvoke $r12.<libcore.util.BasicLruCache: java.lang.Object get(java.lang.Object)>(r3);

        r5 = (java.lang.String) $r13;

        if r5 != null goto label2;

        r5 = staticinvoke <libcore.icu.ICU: java.lang.String getBestDateTimePatternNative(java.lang.String,java.lang.String)>(r0, r2);

        $r15 = <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS>;

        virtualinvoke $r15.<libcore.util.BasicLruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r5);

     label2:
        exitmonitor r4;

     label3:
        return r5;

     label4:
        $r16 := @caughtexception;

        r6 = $r16;

        exitmonitor r4;

     label5:
        throw r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static native java.lang.String getBestDateTimePatternNative(java.lang.String, java.lang.String);

    public static char[] getDateFormatOrder(java.lang.String)
    {
        java.lang.String r0, $r5, $r13;
        char[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12;
        boolean z0, z1, z2;
        char c2, $c10;
        java.lang.IllegalArgumentException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12;

        r0 := @parameter0: java.lang.String;

        r1 = newarray (char)[3];

        i0 = 0;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        i1 = 0;

     label01:
        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if i1 >= $i3 goto label14;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 == 100 goto label02;

        if c2 == 76 goto label02;

        if c2 == 77 goto label02;

        if c2 != 121 goto label06;

     label02:
        if c2 != 100 goto label03;

        if z0 != 0 goto label03;

        $i6 = i0;

        i0 = i0 + 1;

        r1[$i6] = 100;

        z0 = 1;

        goto label13;

     label03:
        if c2 == 76 goto label04;

        if c2 != 77 goto label05;

     label04:
        if z1 != 0 goto label05;

        $i5 = i0;

        i0 = i0 + 1;

        r1[$i5] = 77;

        z1 = 1;

        goto label13;

     label05:
        if c2 != 121 goto label13;

        if z2 != 0 goto label13;

        $i4 = i0;

        i0 = i0 + 1;

        r1[$i4] = 121;

        z2 = 1;

        goto label13;

     label06:
        if c2 != 71 goto label07;

        goto label13;

     label07:
        if c2 < 97 goto label08;

        if c2 <= 122 goto label09;

     label08:
        if c2 < 65 goto label10;

        if c2 > 90 goto label10;

     label09:
        $r8 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pattern character \'");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label10:
        if c2 != 39 goto label13;

        $i7 = virtualinvoke r0.<java.lang.String: int length()>();

        $i8 = $i7 - 1;

        if i1 >= $i8 goto label11;

        $i11 = i1 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i11);

        if $c10 != 39 goto label11;

        i1 = i1 + 1;

        goto label13;

     label11:
        $i9 = i1 + 1;

        i12 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(39, $i9);

        if i12 != -1 goto label12;

        $r2 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad quoting in ");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r2;

     label12:
        i1 = i12 + 1;

     label13:
        i1 = i1 + 1;

        goto label01;

     label14:
        return r1;
    }

    public static native java.lang.String getCldrVersion();

    public static native java.lang.String getIcuVersion();

    public static native java.lang.String getUnicodeVersion();

    public static java.lang.String toLowerCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2, $r3;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = staticinvoke <libcore.icu.ICU: java.lang.String toLowerCase(java.lang.String,java.lang.String)>(r0, $r2);

        return $r3;
    }

    private static native java.lang.String toLowerCase(java.lang.String, java.lang.String);

    public static java.lang.String toUpperCase(java.lang.String, java.util.Locale)
    {
        java.lang.String r0, $r2, $r3;
        java.util.Locale r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = staticinvoke <libcore.icu.ICU: java.lang.String toUpperCase(java.lang.String,java.lang.String)>(r0, $r2);

        return $r3;
    }

    private static native java.lang.String toUpperCase(java.lang.String, java.lang.String);

    public static boolean U_FAILURE(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static native java.lang.String[] getAvailableBreakIteratorLocalesNative();

    private static native java.lang.String[] getAvailableCalendarLocalesNative();

    private static native java.lang.String[] getAvailableCollatorLocalesNative();

    private static native java.lang.String[] getAvailableDateFormatLocalesNative();

    private static native java.lang.String[] getAvailableLocalesNative();

    private static native java.lang.String[] getAvailableNumberFormatLocalesNative();

    public static native java.lang.String[] getAvailableCurrencyCodes();

    public static native java.lang.String getCurrencyCode(java.lang.String);

    public static java.lang.String getCurrencyDisplayName(java.util.Locale, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, $r2, $r3;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = staticinvoke <libcore.icu.ICU: java.lang.String getCurrencyDisplayName(java.lang.String,java.lang.String)>($r2, r1);

        return $r3;
    }

    private static native java.lang.String getCurrencyDisplayName(java.lang.String, java.lang.String);

    public static native int getCurrencyFractionDigits(java.lang.String);

    public static native int getCurrencyNumericCode(java.lang.String);

    public static java.lang.String getCurrencySymbol(java.util.Locale, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, $r2, $r3;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = staticinvoke <libcore.icu.ICU: java.lang.String getCurrencySymbol(java.lang.String,java.lang.String)>($r2, r1);

        return $r3;
    }

    private static native java.lang.String getCurrencySymbol(java.lang.String, java.lang.String);

    public static java.lang.String getDisplayCountry(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayCountryNative(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    private static native java.lang.String getDisplayCountryNative(java.lang.String, java.lang.String);

    public static java.lang.String getDisplayLanguage(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayLanguageNative(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    private static native java.lang.String getDisplayLanguageNative(java.lang.String, java.lang.String);

    public static java.lang.String getDisplayVariant(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayVariantNative(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    private static native java.lang.String getDisplayVariantNative(java.lang.String, java.lang.String);

    public static java.lang.String getDisplayScript(java.util.Locale, java.util.Locale)
    {
        java.util.Locale r0, r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.Locale;

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r4 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayScriptNative(java.lang.String,java.lang.String)>($r2, $r3);

        return $r4;
    }

    private static native java.lang.String getDisplayScriptNative(java.lang.String, java.lang.String);

    public static native java.lang.String getISO3Country(java.lang.String);

    public static native java.lang.String getISO3Language(java.lang.String);

    public static java.util.Locale addLikelySubtags(java.util.Locale)
    {
        java.util.Locale r0, $r4;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: java.util.Locale;

        $r1 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        $r2 = staticinvoke <libcore.icu.ICU: java.lang.String addLikelySubtags(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        $r4 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>($r3);

        return $r4;
    }

    public static native java.lang.String addLikelySubtags(java.lang.String);

    public static native java.lang.String getScript(java.lang.String);

    private static native java.lang.String[] getISOLanguagesNative();

    private static native java.lang.String[] getISOCountriesNative();

    static native boolean initLocaleDataNative(java.lang.String, libcore.icu.LocaleData);

    public static native void setDefaultLocale(java.lang.String);

    public static native java.lang.String getDefaultLocale();

    static void <clinit>()
    {
        libcore.util.BasicLruCache $r0;

        <libcore.icu.ICU: int U_BUFFER_OVERFLOW_ERROR> = 15;

        <libcore.icu.ICU: int U_ILLEGAL_CHAR_FOUND> = 12;

        <libcore.icu.ICU: int U_TRUNCATED_CHAR_FOUND> = 11;

        <libcore.icu.ICU: int U_INVALID_CHAR_FOUND> = 10;

        <libcore.icu.ICU: int U_ZERO_ERROR> = 0;

        <libcore.icu.ICU: int IDX_VARIANT> = 3;

        <libcore.icu.ICU: int IDX_REGION> = 2;

        <libcore.icu.ICU: int IDX_SCRIPT> = 1;

        <libcore.icu.ICU: int IDX_LANGUAGE> = 0;

        $r0 = new libcore.util.BasicLruCache;

        specialinvoke $r0.<libcore.util.BasicLruCache: void <init>(int)>(8);

        <libcore.icu.ICU: libcore.util.BasicLruCache CACHED_PATTERNS> = $r0;

        return;
    }
}
