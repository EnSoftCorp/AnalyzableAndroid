public class org.apache.harmony.dalvik.ddmc.DdmServer extends java.lang.Object
{
    public static final int CLIENT_PROTOCOL_VERSION;
    private static java.util.HashMap mHandlerMap;
    private static final int CONNECTED;
    private static final int DISCONNECTED;
    private static volatile boolean mRegistrationComplete;
    private static boolean mRegistrationTimedOut;

    private void <init>()
    {
        org.apache.harmony.dalvik.ddmc.DdmServer r0;

        r0 := @this: org.apache.harmony.dalvik.ddmc.DdmServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void registerHandler(int, org.apache.harmony.dalvik.ddmc.ChunkHandler)
    {
        int i0;
        org.apache.harmony.dalvik.ddmc.ChunkHandler r0;
        java.util.HashMap r1, $r3, $r4, $r7;
        java.lang.Throwable r2, $r18;
        java.lang.Integer $r5, $r8;
        java.lang.Object $r6;
        java.lang.RuntimeException $r10;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;
        java.lang.String $r13, $r17;
        java.lang.NullPointerException $r16;

        i0 := @parameter0: int;

        r0 := @parameter1: org.apache.harmony.dalvik.ddmc.ChunkHandler;

        if r0 != null goto label1;

        $r16 = new java.lang.NullPointerException;

        specialinvoke $r16.<java.lang.NullPointerException: void <init>(java.lang.String)>("handler == null");

        throw $r16;

     label1:
        $r3 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r1 = $r3;

        entermonitor $r3;

     label2:
        $r4 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        if $r6 == null goto label3;

        $r10 = new java.lang.RuntimeException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("type ");

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already registered");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17);

        throw $r10;

     label3:
        $r7 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r0);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r18 := @caughtexception;

        r2 = $r18;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static org.apache.harmony.dalvik.ddmc.ChunkHandler unregisterHandler(int)
    {
        int i0;
        java.util.HashMap r0, $r2, $r3;
        java.lang.Throwable r1, $r7;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        org.apache.harmony.dalvik.ddmc.ChunkHandler $r6;

        i0 := @parameter0: int;

        $r2 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        $r3 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        $r6 = (org.apache.harmony.dalvik.ddmc.ChunkHandler) $r5;

        exitmonitor r0;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r1 = $r7;

        exitmonitor r0;

     label4:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void registrationComplete()
    {
        java.util.HashMap r0, $r2, $r3;
        java.lang.Throwable r1, $r4;

        $r2 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationComplete> = 1;

        $r3 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

     label4:
        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        org.apache.harmony.dalvik.ddmc.Chunk r0;
        int $i0, $i1, $i2;
        byte[] $r1;

        r0 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $i2 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $r1 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: byte[] data>;

        $i1 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: int offset>;

        $i0 = r0.<org.apache.harmony.dalvik.ddmc.Chunk: int length>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void nativeSendChunk(int,byte[],int,int)>($i2, $r1, $i1, $i0);

        return;
    }

    private static native void nativeSendChunk(int, byte[], int, int);

    private static void broadcast(int)
    {
        int i0;
        java.util.HashMap r0, $r5, $r6;
        java.util.Collection r1;
        java.util.Iterator r2;
        org.apache.harmony.dalvik.ddmc.ChunkHandler r3;
        java.lang.Throwable r4, $r9;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.UnsupportedOperationException $r8;

        i0 := @parameter0: int;

        $r5 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r0 = $r5;

        entermonitor $r5;

     label01:
        $r6 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r1 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.harmony.dalvik.ddmc.ChunkHandler) $r7;

        lookupswitch(i0)
        {
            case 1: goto label03;
            case 2: goto label04;
            default: goto label05;
        };

     label03:
        virtualinvoke r3.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void connected()>();

        goto label06;

     label04:
        virtualinvoke r3.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void disconnected()>();

        goto label06;

     label05:
        $r8 = new java.lang.UnsupportedOperationException;

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r8;

     label06:
        goto label02;

     label07:
        exitmonitor r0;

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r0;

     label10:
        throw r4;

     label11:
        return;

        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private static org.apache.harmony.dalvik.ddmc.Chunk dispatch(int, byte[], int, int)
    {
        int i0, i1, i2;
        byte[] r0;
        org.apache.harmony.dalvik.ddmc.ChunkHandler r1;
        java.util.HashMap r2, $r5, $r6, $r11;
        java.lang.Throwable r4, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        org.apache.harmony.dalvik.ddmc.Chunk $r9, $r10, r14;
        java.lang.InterruptedException $r12;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r5 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $z0 = <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationComplete>;

        if $z0 != 0 goto label06;

        $z1 = <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationTimedOut>;

        if $z1 != 0 goto label06;

     label02:
        $r11 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        virtualinvoke $r11.<java.lang.Object: void wait(long)>(1000L);

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        goto label01;

     label05:
        $z2 = <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationComplete>;

        if $z2 != 0 goto label01;

        <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationTimedOut> = 1;

        goto label01;

     label06:
        $r6 = <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r8 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r7);

        r1 = (org.apache.harmony.dalvik.ddmc.ChunkHandler) $r8;

        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r2;

     label09:
        throw r4;

     label10:
        if r1 != null goto label11;

        return null;

     label11:
        $r9 = new org.apache.harmony.dalvik.ddmc.Chunk;

        specialinvoke $r9.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>(i0, r0, i1, i2);

        r14 = $r9;

        $r10 = virtualinvoke r1.<org.apache.harmony.dalvik.ddmc.ChunkHandler: org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)>(r14);

        return $r10;

        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <org.apache.harmony.dalvik.ddmc.DdmServer: int DISCONNECTED> = 2;

        <org.apache.harmony.dalvik.ddmc.DdmServer: int CONNECTED> = 1;

        <org.apache.harmony.dalvik.ddmc.DdmServer: int CLIENT_PROTOCOL_VERSION> = 1;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.harmony.dalvik.ddmc.DdmServer: java.util.HashMap mHandlerMap> = $r0;

        <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationComplete> = 0;

        <org.apache.harmony.dalvik.ddmc.DdmServer: boolean mRegistrationTimedOut> = 0;

        return;
    }
}
