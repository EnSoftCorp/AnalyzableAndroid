public class java.util.ArrayList extends java.util.AbstractList implements java.lang.Cloneable, java.io.Serializable, java.util.RandomAccess
{
    private static final int MIN_CAPACITY_INCREMENT;
    int size;
    transient java.lang.Object[] array;
    private static final long serialVersionUID;

    public void <init>(int)
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        if i0 != 0 goto label2;

        $r1 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        goto label3;

     label2:
        $r1 = newarray (java.lang.Object)[i0];

     label3:
        r0.<java.util.ArrayList: java.lang.Object[] array> = $r1;

        return;
    }

    public void <init>()
    {
        java.util.ArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayList;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        $r1 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.ArrayList: java.lang.Object[] array> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, r3;
        java.lang.Class $r4;
        int $i0, $i1, $i2;
        java.lang.NullPointerException $r5;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("collection == null");

        throw $r5;

     label1:
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r4 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r4 == class "[Ljava/lang/Object;" goto label2;

        $i1 = lengthof r2;

        r3 = newarray (java.lang.Object)[$i1];

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i2);

        r2 = r3;

     label2:
        r0.<java.util.ArrayList: java.lang.Object[] array> = r2;

        $i0 = lengthof r2;

        r0.<java.util.ArrayList: int size> = $i0;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i0 = r0.<java.util.ArrayList: int size>;

        $i1 = lengthof r2;

        if i0 != $i1 goto label3;

        if i0 >= 6 goto label1;

        $i5 = 12;

        goto label2;

     label1:
        $i5 = i0 >> 1;

     label2:
        $i6 = i0 + $i5;

        r3 = newarray (java.lang.Object)[$i6];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);

        r2 = r3;

        r0.<java.util.ArrayList: java.lang.Object[] array> = r3;

     label3:
        r2[i0] = r1;

        $i2 = i0 + 1;

        r0.<java.util.ArrayList: int size> = $i2;

        $i3 = r0.<java.util.ArrayList: int modCount>;

        $i4 = $i3 + 1;

        r0.<java.util.ArrayList: int modCount> = $i4;

        return 1;
    }

    public void add(int, java.lang.Object)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object r1;
        java.lang.Object[] r2, r3;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i1 = r0.<java.util.ArrayList: int size>;

        if i0 > i1 goto label1;

        if i0 >= 0 goto label2;

     label1:
        staticinvoke <java.util.ArrayList: java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int,int)>(i0, i1);

     label2:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label3;

        $i10 = i0 + 1;

        $i9 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, r2, $i10, $i9);

        goto label4;

     label3:
        $i3 = staticinvoke <java.util.ArrayList: int newCapacity(int)>(i1);

        r3 = newarray (java.lang.Object)[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0);

        $i5 = i0 + 1;

        $i4 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i0, r3, $i5, $i4);

        r2 = r3;

        r0.<java.util.ArrayList: java.lang.Object[] array> = r3;

     label4:
        r2[i0] = r1;

        $i6 = i1 + 1;

        r0.<java.util.ArrayList: int size> = $i6;

        $i7 = r0.<java.util.ArrayList: int modCount>;

        $i8 = $i7 + 1;

        r0.<java.util.ArrayList: int modCount> = $i8;

        return;
    }

    private static int newCapacity(int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        if i0 >= 6 goto label1;

        $i3 = 12;

        goto label2;

     label1:
        $i3 = i0 >> 1;

     label2:
        i1 = $i3;

        $i2 = i0 + i1;

        return $i2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.ArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, r3, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof r2;

        if i0 != 0 goto label1;

        return 0;

     label1:
        r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i1 = r0.<java.util.ArrayList: int size>;

        i2 = i1 + i0;

        $i4 = lengthof r3;

        if i2 <= $i4 goto label2;

        $i7 = i2 - 1;

        i3 = staticinvoke <java.util.ArrayList: int newCapacity(int)>($i7);

        r4 = newarray (java.lang.Object)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i1);

        r3 = r4;

        r0.<java.util.ArrayList: java.lang.Object[] array> = r4;

     label2:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i1, i0);

        r0.<java.util.ArrayList: int size> = i2;

        $i5 = r0.<java.util.ArrayList: int modCount>;

        $i6 = $i5 + 1;

        r0.<java.util.ArrayList: int modCount> = $i6;

        return 1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.ArrayList r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.util.Collection r1;
        java.lang.Object[] r2, r3, r4;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        i1 = r0.<java.util.ArrayList: int size>;

        if i0 > i1 goto label1;

        if i0 >= 0 goto label2;

     label1:
        staticinvoke <java.util.ArrayList: java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int,int)>(i0, i1);

     label2:
        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        i2 = lengthof r2;

        if i2 != 0 goto label3;

        return 0;

     label3:
        r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i3 = i1 + i2;

        $i5 = lengthof r3;

        if i3 > $i5 goto label4;

        $i12 = i0 + i2;

        $i10 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i0, r3, $i12, $i10);

        goto label5;

     label4:
        $i6 = i3 - 1;

        i4 = staticinvoke <java.util.ArrayList: int newCapacity(int)>($i6);

        r4 = newarray (java.lang.Object)[i4];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r4, 0, i0);

        $i9 = i0 + i2;

        $i7 = i1 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, i0, r4, $i9, $i7);

        r3 = r4;

        r0.<java.util.ArrayList: java.lang.Object[] array> = r4;

     label5:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, i2);

        r0.<java.util.ArrayList: int size> = i3;

        $i8 = r0.<java.util.ArrayList: int modCount>;

        $i11 = $i8 + 1;

        r0.<java.util.ArrayList: int modCount> = $i11;

        return 1;
    }

    static java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int, int)
    {
        int i0, i1;
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", size is ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public void clear()
    {
        java.util.ArrayList r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r1;

        r0 := @this: java.util.ArrayList;

        $i0 = r0.<java.util.ArrayList: int size>;

        if $i0 == 0 goto label1;

        $r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $i1 = r0.<java.util.ArrayList: int size>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i1, null);

        r0.<java.util.ArrayList: int size> = 0;

        $i2 = r0.<java.util.ArrayList: int modCount>;

        $i3 = $i2 + 1;

        r0.<java.util.ArrayList: int modCount> = $i3;

     label1:
        return;
    }

    public java.lang.Object clone()
    {
        java.util.ArrayList r0, r1;
        java.lang.Object $r2, $r4;
        java.lang.Object[] $r3, $r5;
        java.lang.CloneNotSupportedException $r6;
        java.lang.AssertionError $r7;

        r0 := @this: java.util.ArrayList;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.ArrayList) $r2;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        r1.<java.util.ArrayList: java.lang.Object[] array> = $r5;

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void ensureCapacity(int)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object[] r1, r2;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $i1 = lengthof r1;

        if $i1 >= i0 goto label1;

        r2 = newarray (java.lang.Object)[i0];

        $i2 = r0.<java.util.ArrayList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i2);

        r0.<java.util.ArrayList: java.lang.Object[] array> = r2;

        $i3 = r0.<java.util.ArrayList: int modCount>;

        $i4 = $i3 + 1;

        r0.<java.util.ArrayList: int modCount> = $i4;

     label1:
        return;
    }

    public java.lang.Object get(int)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        $i1 = r0.<java.util.ArrayList: int size>;

        if i0 < $i1 goto label1;

        $i2 = r0.<java.util.ArrayList: int size>;

        staticinvoke <java.util.ArrayList: java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int,int)>(i0, $i2);

     label1:
        $r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $r2 = $r1[i0];

        return $r2;
    }

    public int size()
    {
        java.util.ArrayList r0;
        int $i0;

        r0 := @this: java.util.ArrayList;

        $i0 = r0.<java.util.ArrayList: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.ArrayList r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.ArrayList;

        $i0 = r0.<java.util.ArrayList: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i0 = r0.<java.util.ArrayList: int size>;

        if r1 == null goto label4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i2 = 0;

     label5:
        if i2 >= i0 goto label7;

        $r3 = r2[i2];

        if $r3 != null goto label6;

        return 1;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return 0;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i0 = r0.<java.util.ArrayList: int size>;

        if r1 == null goto label4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i2 = 0;

     label5:
        if i2 >= i0 goto label7;

        $r3 = r2[i2];

        if $r3 != null goto label6;

        return i2;

     label6:
        i2 = i2 + 1;

        goto label5;

     label7:
        return -1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        if r1 == null goto label4;

        $i2 = r0.<java.util.ArrayList: int size>;

        i0 = $i2 - 1;

     label1:
        if i0 < 0 goto label3;

        $r4 = r2[i0];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + -1;

        goto label1;

     label3:
        goto label7;

     label4:
        $i1 = r0.<java.util.ArrayList: int size>;

        i3 = $i1 - 1;

     label5:
        if i3 < 0 goto label7;

        $r3 = r2[i3];

        if $r3 != null goto label6;

        return i3;

     label6:
        i3 = i3 + -1;

        goto label5;

     label7:
        return -1;
    }

    public java.lang.Object remove(int)
    {
        java.util.ArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.Object[] r1;
        java.lang.Object r2;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i1 = r0.<java.util.ArrayList: int size>;

        if i0 < i1 goto label1;

        staticinvoke <java.util.ArrayList: java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int,int)>(i0, i1);

     label1:
        r2 = r1[i0];

        $i3 = i0 + 1;

        i6 = i1 + -1;

        $i2 = i6 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i3, r1, i0, $i2);

        r1[i6] = null;

        r0.<java.util.ArrayList: int size> = i6;

        $i4 = r0.<java.util.ArrayList: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.ArrayList: int modCount> = $i5;

        return r2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12;
        boolean $z0;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i0 = r0.<java.util.ArrayList: int size>;

        if r1 == null goto label4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i7 = i1 + 1;

        i10 = i0 + -1;

        $i6 = i10 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i7, r2, i1, $i6);

        r2[i10] = null;

        r0.<java.util.ArrayList: int size> = i10;

        $i8 = r0.<java.util.ArrayList: int modCount>;

        $i9 = $i8 + 1;

        r0.<java.util.ArrayList: int modCount> = $i9;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i11 = 0;

     label5:
        if i11 >= i0 goto label7;

        $r3 = r2[i11];

        if $r3 != null goto label6;

        $i3 = i11 + 1;

        i12 = i0 + -1;

        $i2 = i12 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i3, r2, i11, $i2);

        r2[i12] = null;

        r0.<java.util.ArrayList: int size> = i12;

        $i4 = r0.<java.util.ArrayList: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.ArrayList: int modCount> = $i5;

        return 1;

     label6:
        i11 = i11 + 1;

        goto label5;

     label7:
        return 0;
    }

    protected void removeRange(int, int)
    {
        java.util.ArrayList r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.Object[] r1;
        java.lang.IndexOutOfBoundsException $r2, $r10, $r17;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21;
        java.lang.String $r7, $r14, $r22;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        return;

     label1:
        r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i2 = r0.<java.util.ArrayList: int size>;

        if i0 < i2 goto label2;

        $r17 = new java.lang.IndexOutOfBoundsException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= size ");

        $i10 = r0.<java.util.ArrayList: int size>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label2:
        if i1 <= i2 goto label3;

        $r10 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("toIndex ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > size ");

        $i9 = r0.<java.util.ArrayList: int size>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        if i0 <= i1 goto label4;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fromIndex ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > toIndex ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label4:
        $i4 = i2 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r1, i0, $i4);

        i3 = i1 - i0;

        $i5 = i2 - i3;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>(r1, $i5, i2, null);

        $i6 = i2 - i3;

        r0.<java.util.ArrayList: int size> = $i6;

        $i7 = r0.<java.util.ArrayList: int modCount>;

        $i8 = $i7 + 1;

        r0.<java.util.ArrayList: int modCount> = $i8;

        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2;
        java.lang.Object r1, r3;
        java.lang.Object[] r2;

        r0 := @this: java.util.ArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $i1 = r0.<java.util.ArrayList: int size>;

        if i0 < $i1 goto label1;

        $i2 = r0.<java.util.ArrayList: int size>;

        staticinvoke <java.util.ArrayList: java.lang.IndexOutOfBoundsException throwIndexOutOfBoundsException(int,int)>(i0, $i2);

     label1:
        r3 = r2[i0];

        r2[i0] = r1;

        return r3;
    }

    public java.lang.Object[] toArray()
    {
        java.util.ArrayList r0;
        int i0;
        java.lang.Object[] r1, $r2;

        r0 := @this: java.util.ArrayList;

        i0 = r0.<java.util.ArrayList: int size>;

        r1 = newarray (java.lang.Object)[i0];

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, i0);

        return r1;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.ArrayList r0;
        java.lang.Object[] r1, r2, $r3, $r7;
        int i0, $i1, $i2;
        java.lang.Class $r4, $r5;
        java.lang.Object $r6;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object[];

        i0 = r0.<java.util.ArrayList: int size>;

        $i1 = lengthof r1;

        if $i1 >= i0 goto label1;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r6 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r5, i0);

        $r7 = (java.lang.Object[]) $r6;

        r2 = (java.lang.Object[]) $r7;

        r1 = r2;

     label1:
        $r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        $i2 = lengthof r1;

        if $i2 <= i0 goto label2;

        r1[i0] = null;

     label2:
        return r1;
    }

    public void trimToSize()
    {
        java.util.ArrayList r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.ArrayList;

        i0 = r0.<java.util.ArrayList: int size>;

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $i1 = lengthof $r2;

        if i0 != $i1 goto label1;

        return;

     label1:
        if i0 != 0 goto label2;

        $r4 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.ArrayList: java.lang.Object[] array> = $r4;

        goto label3;

     label2:
        r1 = newarray (java.lang.Object)[i0];

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        r0.<java.util.ArrayList: java.lang.Object[] array> = r1;

     label3:
        $i2 = r0.<java.util.ArrayList: int modCount>;

        $i3 = $i2 + 1;

        r0.<java.util.ArrayList: int modCount> = $i3;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.ArrayList r0;
        java.util.ArrayList$ArrayListIterator $r1;

        r0 := @this: java.util.ArrayList;

        $r1 = new java.util.ArrayList$ArrayListIterator;

        specialinvoke $r1.<java.util.ArrayList$ArrayListIterator: void <init>(java.util.ArrayList,java.util.ArrayList$1)>(r0, null);

        return $r1;
    }

    public int hashCode()
    {
        java.util.ArrayList r0;
        java.lang.Object[] r1;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r2;

        r0 := @this: java.util.ArrayList;

        r1 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        i0 = 1;

        i1 = 0;

        i2 = r0.<java.util.ArrayList: int size>;

     label1:
        if i1 >= i2 goto label4;

        r2 = r1[i1];

        $i3 = 31 * i0;

        if r2 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $i4 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

     label3:
        i0 = $i3 + $i4;

        i1 = i1 + 1;

        goto label1;

     label4:
        return i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.ArrayList r0;
        java.lang.Object r1, r4, r5, r6, r8;
        java.util.List r2;
        int i0, i1, $i2, i3;
        java.lang.Object[] r3;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator r7;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof java.util.List;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (java.util.List) r1;

        i0 = r0.<java.util.ArrayList: int size>;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i2 == i0 goto label03;

        return 0;

     label03:
        r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $z1 = r2 instanceof java.util.RandomAccess;

        if $z1 == 0 goto label09;

        i1 = 0;

     label04:
        if i1 >= i0 goto label08;

        r4 = r3[i1];

        r5 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        if r4 != null goto label05;

        if r5 == null goto label07;

        goto label06;

     label05:
        $z3 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z3 != 0 goto label07;

     label06:
        return 0;

     label07:
        i1 = i1 + 1;

        goto label04;

     label08:
        goto label14;

     label09:
        r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        i3 = 0;

     label10:
        if i3 >= i0 goto label14;

        r8 = r3[i3];

        r6 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        if r8 != null goto label11;

        if r6 == null goto label13;

        goto label12;

     label11:
        $z2 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z2 != 0 goto label13;

     label12:
        return 0;

     label13:
        i3 = i3 + 1;

        goto label10;

     label14:
        return 1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.ArrayList r0;
        java.io.ObjectOutputStream r1;
        int i0, $i1, $i2;
        java.lang.Object[] $r2, $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $i1 = lengthof $r2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        i0 = 0;

     label1:
        $i2 = r0.<java.util.ArrayList: int size>;

        if i0 >= $i2 goto label2;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $r4 = $r3[i0];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r4);

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.ArrayList r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object[] $r2, $r3;
        java.lang.Object $r4;
        java.io.InvalidObjectException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: java.util.ArrayList;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $i2 = r0.<java.util.ArrayList: int size>;

        if i0 >= $i2 goto label1;

        $r5 = new java.io.InvalidObjectException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" < size: ");

        $i4 = r0.<java.util.ArrayList: int size>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        $r2 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[i0];

     label3:
        r0.<java.util.ArrayList: java.lang.Object[] array> = $r2;

        i1 = 0;

     label4:
        $i3 = r0.<java.util.ArrayList: int size>;

        if i1 >= $i3 goto label5;

        $r3 = r0.<java.util.ArrayList: java.lang.Object[] array>;

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3[i1] = $r4;

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }

    public static void <clinit>()
    {
        <java.util.ArrayList: long serialVersionUID> = 8683452581122892189L;

        <java.util.ArrayList: int MIN_CAPACITY_INCREMENT> = 12;

        return;
    }
}
