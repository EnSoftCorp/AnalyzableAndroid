public class java.util.concurrent.atomic.AtomicReference extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe unsafe;
    private static final long valueOffset;
    private volatile java.lang.Object value;

    public void <init>(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object value> = r1;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.atomic.AtomicReference r0;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final java.lang.Object get()
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        $r1 = r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object value>;

        return $r1;
    }

    public final void set(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

        r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object value> = r1;

        return;
    }

    public final void lazySet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1;
        long $l0;
        sun.misc.Unsafe $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.concurrent.atomic.AtomicReference: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicReference: long valueOffset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r0, $l0, r1);

        return;
    }

    public final boolean compareAndSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = <java.util.concurrent.atomic.AtomicReference: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicReference: long valueOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    public final boolean weakCompareAndSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = <java.util.concurrent.atomic.AtomicReference: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicReference: long valueOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    public final java.lang.Object getAndSet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        r1 := @parameter0: java.lang.Object;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r2, r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        goto label1;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicReference;

        $r1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.atomic.AtomicReference: long serialVersionUID> = -1848883965231344442L;

        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicReference: sun.misc.Unsafe unsafe> = $r1;

     label1:
        $r3 = <java.util.concurrent.atomic.AtomicReference: sun.misc.Unsafe unsafe>;

        $r2 = class "java/util/concurrent/atomic/AtomicReference";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.atomic.AtomicReference: long valueOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
