final class java.nio.FileChannelImpl extends java.nio.channels.FileChannel
{
    private static final java.util.Comparator LOCK_COMPARATOR;
    private final java.io.Closeable ioObject;
    private final java.io.FileDescriptor fd;
    private final int mode;
    private final java.util.SortedSet locks;

    public void <init>(java.io.Closeable, java.io.FileDescriptor, int)
    {
        java.nio.FileChannelImpl r0;
        java.io.Closeable r1;
        java.io.FileDescriptor r2;
        int i0;
        java.util.TreeSet $r3;
        java.util.Comparator $r4;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.io.Closeable;

        r2 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        specialinvoke r0.<java.nio.channels.FileChannel: void <init>()>();

        $r3 = new java.util.TreeSet;

        $r4 = <java.nio.FileChannelImpl: java.util.Comparator LOCK_COMPARATOR>;

        specialinvoke $r3.<java.util.TreeSet: void <init>(java.util.Comparator)>($r4);

        r0.<java.nio.FileChannelImpl: java.util.SortedSet locks> = $r3;

        r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd> = r2;

        r0.<java.nio.FileChannelImpl: java.io.Closeable ioObject> = r1;

        r0.<java.nio.FileChannelImpl: int mode> = i0;

        return;
    }

    private void checkOpen() throws java.nio.channels.ClosedChannelException
    {
        java.nio.FileChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: java.nio.FileChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.FileChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkReadable()
    {
        java.nio.FileChannelImpl r0;
        int $i0, $i1, $i2, $i3;
        java.nio.channels.NonReadableChannelException $r1;

        r0 := @this: java.nio.FileChannelImpl;

        $i1 = r0.<java.nio.FileChannelImpl: int mode>;

        $i0 = <android.system.OsConstants: int O_ACCMODE>;

        $i3 = $i1 & $i0;

        $i2 = <android.system.OsConstants: int O_WRONLY>;

        if $i3 != $i2 goto label1;

        $r1 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r1.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkWritable()
    {
        java.nio.FileChannelImpl r0;
        int $i0, $i1, $i2, $i3;
        java.nio.channels.NonWritableChannelException $r1;

        r0 := @this: java.nio.FileChannelImpl;

        $i1 = r0.<java.nio.FileChannelImpl: int mode>;

        $i0 = <android.system.OsConstants: int O_ACCMODE>;

        $i3 = $i1 & $i0;

        $i2 = <android.system.OsConstants: int O_RDONLY>;

        if $i3 != $i2 goto label1;

        $r1 = new java.nio.channels.NonWritableChannelException;

        specialinvoke $r1.<java.nio.channels.NonWritableChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.io.Closeable $r1;

        r0 := @this: java.nio.FileChannelImpl;

        $r1 = r0.<java.nio.FileChannelImpl: java.io.Closeable ioObject>;

        interfaceinvoke $r1.<java.io.Closeable: void close()>();

        return;
    }

    private java.nio.channels.FileLock basicLock(long, long, boolean, boolean) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        long l0, l1, $l13;
        boolean z0, z1, z2, $z3, z4;
        int i2, $i3, $i4, $i5, $i7, $i10, $i12, $i14, $i15;
        java.nio.FileChannelImpl$FileLockImpl r1, $r13, $r17;
        android.system.StructFlock r2, $r12;
        android.system.ErrnoException r3, $r18;
        java.lang.Throwable r4, $r21;
        byte $b6, $b8;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r6;
        java.lang.String $r11;
        short $s9, $s11;
        java.io.FileDescriptor $r14;
        libcore.io.Os $r15;
        java.nio.channels.NonReadableChannelException $r16;
        java.io.IOException $r19;
        java.nio.channels.NonWritableChannelException $r20;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $i4 = r0.<java.nio.FileChannelImpl: int mode>;

        $i3 = <android.system.OsConstants: int O_ACCMODE>;

        i2 = $i4 & $i3;

        $i5 = <android.system.OsConstants: int O_RDONLY>;

        if i2 != $i5 goto label01;

        if z0 != 0 goto label02;

        $r20 = new java.nio.channels.NonWritableChannelException;

        specialinvoke $r20.<java.nio.channels.NonWritableChannelException: void <init>()>();

        throw $r20;

     label01:
        $i7 = <android.system.OsConstants: int O_WRONLY>;

        if i2 != $i7 goto label02;

        if z0 == 0 goto label02;

        $r16 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r16.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r16;

     label02:
        $b6 = l0 cmp 0L;

        if $b6 < 0 goto label03;

        $b8 = l1 cmp 0L;

        if $b8 >= 0 goto label04;

     label03:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label04:
        $r13 = new java.nio.FileChannelImpl$FileLockImpl;

        specialinvoke $r13.<java.nio.FileChannelImpl$FileLockImpl: void <init>(java.nio.channels.FileChannel,long,long,boolean)>(r0, l0, l1, z0);

        r1 = $r13;

        specialinvoke r0.<java.nio.FileChannelImpl: void addLock(java.nio.channels.FileLock)>(r1);

        $r12 = new android.system.StructFlock;

        specialinvoke $r12.<android.system.StructFlock: void <init>()>();

        r2 = $r12;

        if z0 == 0 goto label05;

        $i10 = <android.system.OsConstants: int F_RDLCK>;

        goto label06;

     label05:
        $i10 = <android.system.OsConstants: int F_WRLCK>;

     label06:
        $s9 = (short) $i10;

        r2.<android.system.StructFlock: short l_type> = $s9;

        $i12 = <android.system.OsConstants: int SEEK_SET>;

        $s11 = (short) $i12;

        r2.<android.system.StructFlock: short l_whence> = $s11;

        r2.<android.system.StructFlock: long l_start> = l0;

        $l13 = staticinvoke <java.nio.FileChannelImpl: long translateLockLength(long)>(l1);

        r2.<android.system.StructFlock: long l_len> = $l13;

        z2 = 0;

     label07:
        $r15 = <libcore.io.Libcore: libcore.io.Os os>;

        $r14 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        if z1 == 0 goto label08;

        $i14 = <android.system.OsConstants: int F_SETLKW64>;

        goto label09;

     label08:
        $i14 = <android.system.OsConstants: int F_SETLK64>;

     label09:
        $i15 = interfaceinvoke $r15.<libcore.io.Os: int fcntlFlock(java.io.FileDescriptor,int,android.system.StructFlock)>($r14, $i14, r2);

        if $i15 == -1 goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        z4 = $z3;

     label12:
        if z4 != 0 goto label17;

        specialinvoke r0.<java.nio.FileChannelImpl: void removeLock(java.nio.channels.FileLock)>(r1);

        goto label17;

     label13:
        $r18 := @caughtexception;

        r3 = $r18;

        $r19 = virtualinvoke r3.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r19;

     label14:
        $r21 := @caughtexception;

        r4 = $r21;

     label15:
        if z2 != 0 goto label16;

        specialinvoke r0.<java.nio.FileChannelImpl: void removeLock(java.nio.channels.FileLock)>(r1);

     label16:
        throw r4;

     label17:
        if z4 == 0 goto label18;

        $r17 = r1;

        goto label19;

     label18:
        $r17 = null;

     label19:
        return $r17;

        catch android.system.ErrnoException from label07 to label12 with label13;
        catch java.lang.Throwable from label07 to label12 with label14;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    private static long translateLockLength(long)
    {
        long l0, $l2;
        byte $b1;

        l0 := @parameter0: long;

        $b1 = l0 cmp 9223372036854775807L;

        if $b1 != 0 goto label1;

        $l2 = 0L;

        goto label2;

     label1:
        $l2 = l0;

     label2:
        return $l2;
    }

    public final java.nio.channels.FileLock lock(long, long, boolean) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        long l0, l1;
        boolean z0;
        java.lang.Throwable r1, $r2;
        java.nio.channels.ClosedByInterruptException $r3, $r5;
        java.nio.channels.FileLockInterruptionException $r4, $r6;
        java.nio.channels.FileLock r7;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

     label01:
        virtualinvoke r0.<java.nio.FileChannelImpl: void begin()>();

        r7 = specialinvoke r0.<java.nio.FileChannelImpl: java.nio.channels.FileLock basicLock(long,long,boolean,boolean)>(l0, l1, z0, 1);

     label02:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(1);

     label03:
        goto label10;

     label04:
        $r3 := @caughtexception;

        $r4 = new java.nio.channels.FileLockInterruptionException;

        specialinvoke $r4.<java.nio.channels.FileLockInterruptionException: void <init>()>();

        throw $r4;

     label05:
        $r2 := @caughtexception;

        r1 = $r2;

     label06:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(0);

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

        $r6 = new java.nio.channels.FileLockInterruptionException;

        specialinvoke $r6.<java.nio.channels.FileLockInterruptionException: void <init>()>();

        throw $r6;

     label09:
        throw r1;

     label10:
        return r7;

        catch java.nio.channels.ClosedByInterruptException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.nio.channels.ClosedByInterruptException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public final java.nio.channels.FileLock tryLock(long, long, boolean) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        long l0, l1;
        boolean z0;
        java.nio.channels.FileLock $r1;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $r1 = specialinvoke r0.<java.nio.FileChannelImpl: java.nio.channels.FileLock basicLock(long,long,boolean,boolean)>(l0, l1, z0, 0);

        return $r1;
    }

    public void release(java.nio.channels.FileLock) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.channels.FileLock r1;
        android.system.StructFlock r2, $r4;
        android.system.ErrnoException r3, $r8;
        int $i0, $i2, $i7;
        short $s1, $s3;
        long $l4, $l5, $l6;
        java.io.FileDescriptor $r5;
        libcore.io.Os $r6;
        java.io.IOException $r7;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.channels.FileLock;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $r4 = new android.system.StructFlock;

        specialinvoke $r4.<android.system.StructFlock: void <init>()>();

        r2 = $r4;

        $i0 = <android.system.OsConstants: int F_UNLCK>;

        $s1 = (short) $i0;

        r2.<android.system.StructFlock: short l_type> = $s1;

        $i2 = <android.system.OsConstants: int SEEK_SET>;

        $s3 = (short) $i2;

        r2.<android.system.StructFlock: short l_whence> = $s3;

        $l4 = virtualinvoke r1.<java.nio.channels.FileLock: long position()>();

        r2.<android.system.StructFlock: long l_start> = $l4;

        $l5 = virtualinvoke r1.<java.nio.channels.FileLock: long size()>();

        $l6 = staticinvoke <java.nio.FileChannelImpl: long translateLockLength(long)>($l5);

        r2.<android.system.StructFlock: long l_len> = $l6;

     label1:
        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r5 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $i7 = <android.system.OsConstants: int F_SETLKW64>;

        interfaceinvoke $r6.<libcore.io.Os: int fcntlFlock(java.io.FileDescriptor,int,android.system.StructFlock)>($r5, $i7, r2);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        $r7 = virtualinvoke r3.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r7;

     label4:
        specialinvoke r0.<java.nio.FileChannelImpl: void removeLock(java.nio.channels.FileLock)>(r1);

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public void force(boolean) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        boolean z0;
        android.system.ErrnoException r1, $r6;
        int $i0, $i1, $i2, $i3;
        java.io.FileDescriptor $r2, $r4;
        libcore.io.Os $r3, $r5;
        java.io.IOException $r7;

        r0 := @this: java.nio.FileChannelImpl;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $i1 = r0.<java.nio.FileChannelImpl: int mode>;

        $i0 = <android.system.OsConstants: int O_ACCMODE>;

        $i3 = $i1 & $i0;

        $i2 = <android.system.OsConstants: int O_RDONLY>;

        if $i3 == $i2 goto label5;

     label1:
        if z0 == 0 goto label2;

        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r5.<libcore.io.Os: void fsync(java.io.FileDescriptor)>($r4);

        goto label3;

     label2:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r3.<libcore.io.Os: void fdatasync(java.io.FileDescriptor)>($r2);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r7;

     label5:
        return;

        catch android.system.ErrnoException from label1 to label3 with label4;
    }

    public final java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.channels.FileChannel$MapMode r1, $r14, $r21;
        long l0, l1, $l10, $l13, $l15, $l16, $l17, $l18, $l19, $l21, l25;
        int i2, i3, $i6, $i8, $i9, $i11, $i14, $i20, $i22, $i23, $i24;
        android.system.ErrnoException r2, r3, $r23, $r25;
        java.nio.MemoryBlock r4;
        byte $b4, $b5, $b7, $b12;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r11;
        libcore.io.Os $r12, $r17, $r27;
        java.io.FileDescriptor $r13, $r16, $r22;
        java.nio.DirectByteBuffer $r15;
        boolean $z0, $z1;
        java.nio.channels.NonWritableChannelException $r18;
        java.lang.NullPointerException $r19;
        java.nio.channels.NonReadableChannelException $r20;
        java.io.IOException $r24, $r28;
        android.system.StructStat $r26;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.channels.FileChannel$MapMode;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        if r1 != null goto label01;

        $r19 = new java.lang.NullPointerException;

        specialinvoke $r19.<java.lang.NullPointerException: void <init>(java.lang.String)>("mapMode == null");

        throw $r19;

     label01:
        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label02;

        $b5 = l1 cmp 0L;

        if $b5 < 0 goto label02;

        $b7 = l1 cmp 2147483647L;

        if $b7 <= 0 goto label03;

     label02:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r5;

     label03:
        $i9 = r0.<java.nio.FileChannelImpl: int mode>;

        $i6 = <android.system.OsConstants: int O_ACCMODE>;

        i2 = $i9 & $i6;

        $i8 = <android.system.OsConstants: int O_RDONLY>;

        if i2 != $i8 goto label04;

        $r21 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        if r1 == $r21 goto label05;

        $r18 = new java.nio.channels.NonWritableChannelException;

        specialinvoke $r18.<java.nio.channels.NonWritableChannelException: void <init>()>();

        throw $r18;

     label04:
        $i11 = <android.system.OsConstants: int O_WRONLY>;

        if i2 != $i11 goto label05;

        $r20 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r20.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r20;

     label05:
        $l10 = l0 + l1;

        $l13 = virtualinvoke r0.<java.nio.FileChannelImpl: long size()>();

        $b12 = $l10 cmp $l13;

        if $b12 <= 0 goto label13;

     label06:
        $r17 = <libcore.io.Libcore: libcore.io.Os os>;

        $r16 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $l21 = l0 + l1;

        interfaceinvoke $r17.<libcore.io.Os: void ftruncate(java.io.FileDescriptor,long)>($r16, $l21);

     label07:
        goto label13;

     label08:
        $r23 := @caughtexception;

        r2 = $r23;

     label09:
        $r27 = <libcore.io.Libcore: libcore.io.Os os>;

        $r22 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $r26 = interfaceinvoke $r27.<libcore.io.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r22);

        $i22 = $r26.<android.system.StructStat: int st_mode>;

        $z1 = staticinvoke <android.system.OsConstants: boolean S_ISREG(int)>($i22);

        if $z1 != 0 goto label10;

        $i23 = r2.<android.system.ErrnoException: int errno>;

        $i24 = <android.system.OsConstants: int EINVAL>;

        if $i23 == $i24 goto label11;

     label10:
        $r28 = virtualinvoke r2.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r28;

     label11:
        goto label13;

     label12:
        $r25 := @caughtexception;

        r3 = $r25;

        $r24 = virtualinvoke r3.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r24;

     label13:
        $r12 = <libcore.io.Libcore: libcore.io.Os os>;

        $i14 = <android.system.OsConstants: int _SC_PAGE_SIZE>;

        $l16 = interfaceinvoke $r12.<libcore.io.Os: long sysconf(int)>($i14);

        $l15 = l0 % $l16;

        l25 = l0 - $l15;

        $l18 = l0 - l25;

        i3 = (int) $l18;

        $r13 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $l19 = (long) i3;

        $l17 = l1 + $l19;

        r4 = staticinvoke <java.nio.MemoryBlock: java.nio.MemoryBlock mmap(java.io.FileDescriptor,long,long,java.nio.channels.FileChannel$MapMode)>($r13, l25, $l17, r1);

        $r15 = new java.nio.DirectByteBuffer;

        $i20 = (int) l1;

        $r14 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        if r1 != $r14 goto label14;

        $z0 = 1;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        specialinvoke $r15.<java.nio.DirectByteBuffer: void <init>(java.nio.MemoryBlock,int,int,boolean,java.nio.channels.FileChannel$MapMode)>(r4, $i20, i3, $z0, r1);

        return $r15;

        catch android.system.ErrnoException from label06 to label07 with label08;
        catch android.system.ErrnoException from label09 to label11 with label12;
    }

    public long position() throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        android.system.ErrnoException r1, $r4;
        int $i0;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        long $l1;
        java.io.IOException $r5;

        r0 := @this: java.nio.FileChannelImpl;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $i0 = <android.system.OsConstants: int SEEK_CUR>;

        $l1 = interfaceinvoke $r3.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>($r2, 0L, $i0);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r5;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public java.nio.channels.FileChannel position(long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        long l0;
        android.system.ErrnoException r1, $r9;
        byte $b1;
        int $i2;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.io.IOException $r10;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $i2 = <android.system.OsConstants: int SEEK_SET>;

        interfaceinvoke $r3.<libcore.io.Os: long lseek(java.io.FileDescriptor,long,int)>($r2, l0, $i2);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

     label4:
        return r0;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public int read(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        byte $b1;
        int $i2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $i2 = specialinvoke r0.<java.nio.FileChannelImpl: int readImpl(java.nio.ByteBuffer,long)>(r1, l0);

        return $i2;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        int $i0;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = specialinvoke r0.<java.nio.FileChannelImpl: int readImpl(java.nio.ByteBuffer,long)>(r1, -1L);

        return $i0;
    }

    private int readImpl(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        int i1, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2, $z3, z4;
        android.system.ErrnoException r2, $r9;
        java.lang.Throwable r3, $r11;
        byte $b2;
        java.io.FileDescriptor $r4, $r7;
        libcore.io.Os $r5, $r8;
        java.io.IOException $r10;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        specialinvoke r0.<java.nio.FileChannelImpl: void checkReadable()>();

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        i1 = 0;

        z0 = 0;

     label02:
        virtualinvoke r0.<java.nio.FileChannelImpl: void begin()>();

     label03:
        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label04;

        $r8 = <libcore.io.Libcore: libcore.io.Os os>;

        $r7 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        i1 = interfaceinvoke $r8.<libcore.io.Os: int read(java.io.FileDescriptor,java.nio.ByteBuffer)>($r7, r1);

        goto label05;

     label04:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        i1 = interfaceinvoke $r5.<libcore.io.Os: int pread(java.io.FileDescriptor,java.nio.ByteBuffer,long)>($r4, r1, l0);

     label05:
        if i1 != 0 goto label06;

        i1 = -1;

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

        r2 = $r9;

        $i6 = r2.<android.system.ErrnoException: int errno>;

        $i5 = <android.system.OsConstants: int EAGAIN>;

        if $i6 != $i5 goto label08;

        i1 = 0;

        goto label09;

     label08:
        $r10 = virtualinvoke r2.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

     label09:
        z4 = 1;

     label10:
        if z4 == 0 goto label11;

        if i1 < 0 goto label11;

        $z2 = 1;

        goto label12;

     label11:
        $z2 = 0;

     label12:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>($z2);

        goto label17;

     label13:
        $r11 := @caughtexception;

        r3 = $r11;

     label14:
        if z0 == 0 goto label15;

        if i1 < 0 goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>($z3);

        throw r3;

     label17:
        if i1 <= 0 goto label18;

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i4 = $i3 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i4);

     label18:
        return i1;

        catch android.system.ErrnoException from label03 to label06 with label07;
        catch java.lang.Throwable from label02 to label10 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private int transferIoVec(java.nio.IoVec) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.IoVec r1;
        boolean z1, z2;
        java.lang.Throwable r2, $r4;
        int $i0, i1;
        java.io.FileDescriptor $r3;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.IoVec;

        $i0 = virtualinvoke r1.<java.nio.IoVec: int init()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        z1 = 0;

     label2:
        virtualinvoke r0.<java.nio.FileChannelImpl: void begin()>();

        $r3 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        i1 = virtualinvoke r1.<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)>($r3);

        z2 = 1;

     label3:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z2);

        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

     label5:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z1);

        throw r2;

     label6:
        virtualinvoke r1.<java.nio.IoVec: void didTransfer(int)>(i1);

        return i1;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, $i2, $i3;
        java.nio.IoVec $r2;
        java.nio.IoVec$Direction $r3;
        long $l4;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        specialinvoke r0.<java.nio.FileChannelImpl: void checkReadable()>();

        $r2 = new java.nio.IoVec;

        $r3 = <java.nio.IoVec$Direction: java.nio.IoVec$Direction READV>;

        specialinvoke $r2.<java.nio.IoVec: void <init>(java.nio.ByteBuffer[],int,int,java.nio.IoVec$Direction)>(r1, i0, i1, $r3);

        $i3 = specialinvoke r0.<java.nio.FileChannelImpl: int transferIoVec(java.nio.IoVec)>($r2);

        $l4 = (long) $i3;

        return $l4;
    }

    public long size() throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        android.system.ErrnoException r1, $r5;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        android.system.StructStat $r4;
        long $l0;
        java.io.IOException $r6;

        r0 := @this: java.nio.FileChannelImpl;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        $r4 = interfaceinvoke $r3.<libcore.io.Os: android.system.StructStat fstat(java.io.FileDescriptor)>($r2);

        $l0 = $r4.<android.system.StructStat: long st_size>;

     label2:
        return $l0;

     label3:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r6;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public long transferFrom(java.nio.channels.ReadableByteChannel, long, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.channels.ReadableByteChannel r1;
        long l0, l1, l2, l3, l4, $l9, $l12, $l14, $l16, l17;
        java.nio.channels.FileChannel r2;
        java.nio.MappedByteBuffer r3;
        java.lang.Throwable r4, $r16;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r5;
        byte $b5, $b6, $b7, $b8;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r11;
        java.lang.String $r10;
        int $i10, $i13, $i15;
        java.nio.channels.FileChannel$MapMode $r13;
        java.nio.channels.ClosedChannelException $r15;
        java.nio.ByteBuffer r17;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $z0 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r15 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r15.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r15;

     label1:
        specialinvoke r0.<java.nio.FileChannelImpl: void checkWritable()>();

        $b5 = l0 cmp 0L;

        if $b5 < 0 goto label2;

        $b7 = l1 cmp 0L;

        if $b7 < 0 goto label2;

        $b6 = l1 cmp 2147483647L;

        if $b6 <= 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        $l9 = virtualinvoke r0.<java.nio.FileChannelImpl: long size()>();

        $b8 = l0 cmp $l9;

        if $b8 <= 0 goto label4;

        return 0L;

     label4:
        $z1 = r1 instanceof java.nio.channels.FileChannel;

        if $z1 == 0 goto label9;

        r2 = (java.nio.channels.FileChannel) r1;

        l2 = virtualinvoke r2.<java.nio.channels.FileChannel: long size()>();

        l3 = virtualinvoke r2.<java.nio.channels.FileChannel: long position()>();

        $l14 = l2 - l3;

        l17 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l14);

        $r13 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r3 = virtualinvoke r2.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r13, l3, l17);

     label5:
        $l16 = l3 + l17;

        virtualinvoke r2.<java.nio.channels.FileChannel: java.nio.channels.FileChannel position(long)>($l16);

        $i15 = virtualinvoke r0.<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)>(r3, l0);

        l4 = (long) $i15;

     label6:
        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r3);

        return l4;

     label7:
        $r16 := @caughtexception;

        r4 = $r16;

     label8:
        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r3);

        throw r4;

     label9:
        $i10 = (int) l1;

        r17 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i10);

        interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r17);

        virtualinvoke r17.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $i13 = virtualinvoke r0.<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)>(r17, l0);

        $l12 = (long) $i13;

        return $l12;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0, $r17;
        long l0, l1, l2, l3, $l6, $l8, $l10, l16, l17;
        java.nio.channels.WritableByteChannel r1;
        boolean z0, $z1, $z2, $z3;
        java.io.FileDescriptor r2, $r15;
        android.util.MutableLong r3, $r14;
        java.lang.Throwable r4, r5, $r21, $r22;
        byte $b4, $b5, $b7, $b9;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r12;
        int $i11, $i12, $i13, $i14, $i15;
        java.nio.channels.FileChannel$MapMode $r13;
        java.nio.SocketChannelImpl $r16;
        java.nio.channels.ClosedChannelException $r18;
        libcore.io.Os $r19;
        android.system.ErrnoException $r20, r24;
        java.io.IOException $r23;
        java.nio.MappedByteBuffer r25;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.nio.channels.WritableByteChannel;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $z1 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: boolean isOpen()>();

        if $z1 != 0 goto label01;

        $r18 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r18.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r18;

     label01:
        specialinvoke r0.<java.nio.FileChannelImpl: void checkReadable()>();

        $z2 = r1 instanceof java.nio.FileChannelImpl;

        if $z2 == 0 goto label02;

        $r17 = (java.nio.FileChannelImpl) r1;

        specialinvoke $r17.<java.nio.FileChannelImpl: void checkWritable()>();

     label02:
        $b4 = l0 cmp 0L;

        if $b4 < 0 goto label03;

        $b5 = l1 cmp 0L;

        if $b5 >= 0 goto label04;

     label03:
        $r7 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position=");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label04:
        $b7 = l1 cmp 0L;

        if $b7 == 0 goto label05;

        $l6 = virtualinvoke r0.<java.nio.FileChannelImpl: long size()>();

        $b9 = l0 cmp $l6;

        if $b9 < 0 goto label06;

     label05:
        return 0L;

     label06:
        $l8 = virtualinvoke r0.<java.nio.FileChannelImpl: long size()>();

        $l10 = $l8 - l0;

        l16 = staticinvoke <java.lang.Math: long min(long,long)>(l1, $l10);

        z0 = 0;

        $z3 = r1 instanceof java.nio.SocketChannelImpl;

        if $z3 == 0 goto label14;

        $r16 = (java.nio.SocketChannelImpl) r1;

        r2 = virtualinvoke $r16.<java.nio.SocketChannelImpl: java.io.FileDescriptor getFD()>();

     label07:
        virtualinvoke r0.<java.nio.FileChannelImpl: void begin()>();

     label08:
        $r14 = new android.util.MutableLong;

        specialinvoke $r14.<android.util.MutableLong: void <init>(long)>(l0);

        r3 = $r14;

        $r19 = <libcore.io.Libcore: libcore.io.Os os>;

        $r15 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        l2 = interfaceinvoke $r19.<libcore.io.Os: long sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)>(r2, $r15, r3, l16);

        z0 = 1;

        l3 = l2;

     label09:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z0);

        return l3;

     label10:
        $r20 := @caughtexception;

        r24 = $r20;

        $i12 = r24.<android.system.ErrnoException: int errno>;

        $i14 = <android.system.OsConstants: int ENOSYS>;

        if $i12 == $i14 goto label11;

        $i15 = r24.<android.system.ErrnoException: int errno>;

        $i13 = <android.system.OsConstants: int EINVAL>;

        if $i15 == $i13 goto label11;

        $r23 = virtualinvoke r24.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r23;

     label11:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z0);

        goto label14;

     label12:
        $r21 := @caughtexception;

        r4 = $r21;

     label13:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z0);

        throw r4;

     label14:
        r25 = null;

     label15:
        $r13 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        r25 = virtualinvoke r0.<java.nio.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r13, l0, l16);

        $i11 = interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r25);

        l17 = (long) $i11;

     label16:
        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r25);

        return l17;

     label17:
        $r22 := @caughtexception;

        r5 = $r22;

     label18:
        staticinvoke <java.nio.NioUtils: void freeDirectBuffer(java.nio.ByteBuffer)>(r25);

        throw r5;

        catch android.system.ErrnoException from label08 to label09 with label10;
        catch java.lang.Throwable from label07 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public java.nio.channels.FileChannel truncate(long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        long l0, $l2, $l4;
        android.system.ErrnoException r1, $r9;
        byte $b1, $b3, $b5;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r10;
        java.io.IOException $r11;

        r0 := @this: java.nio.FileChannelImpl;

        l0 := @parameter0: long;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size < 0: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        specialinvoke r0.<java.nio.FileChannelImpl: void checkWritable()>();

        $l2 = virtualinvoke r0.<java.nio.FileChannelImpl: long size()>();

        $b3 = l0 cmp $l2;

        if $b3 >= 0 goto label5;

     label2:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r4.<libcore.io.Os: void ftruncate(java.io.FileDescriptor,long)>($r3, l0);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r1 = $r9;

        $r11 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r11;

     label5:
        $l4 = virtualinvoke r0.<java.nio.FileChannelImpl: long position()>();

        $b5 = $l4 cmp l0;

        if $b5 <= 0 goto label6;

        virtualinvoke r0.<java.nio.FileChannelImpl: java.nio.channels.FileChannel position(long)>(l0);

     label6:
        return r0;

        catch android.system.ErrnoException from label2 to label3 with label4;
    }

    public int write(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        byte $b1;
        int $i2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $i2 = specialinvoke r0.<java.nio.FileChannelImpl: int writeImpl(java.nio.ByteBuffer,long)>(r1, l0);

        return $i2;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        int $i0;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = specialinvoke r0.<java.nio.FileChannelImpl: int writeImpl(java.nio.ByteBuffer,long)>(r1, -1L);

        return $i0;
    }

    private int writeImpl(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer r1;
        long l0;
        boolean z1, $z2, z3;
        android.system.ErrnoException r2, $r11;
        java.lang.Throwable r3, $r12;
        byte $b1;
        java.io.FileDescriptor $r4, $r8;
        libcore.io.Os $r5, $r7;
        int $i2, $i3, i4;
        java.lang.NullPointerException $r9;
        java.io.IOException $r10;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        l0 := @parameter1: long;

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        specialinvoke r0.<java.nio.FileChannelImpl: void checkWritable()>();

        if r1 != null goto label01;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("buffer == null");

        throw $r9;

     label01:
        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label02;

        return 0;

     label02:
        z1 = 0;

     label03:
        virtualinvoke r0.<java.nio.FileChannelImpl: void begin()>();

     label04:
        $b1 = l0 cmp -1L;

        if $b1 != 0 goto label05;

        $r7 = <libcore.io.Libcore: libcore.io.Os os>;

        $r8 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        i4 = interfaceinvoke $r7.<libcore.io.Os: int write(java.io.FileDescriptor,java.nio.ByteBuffer)>($r8, r1);

        goto label06;

     label05:
        $r5 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        i4 = interfaceinvoke $r5.<libcore.io.Os: int pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)>($r4, r1, l0);

     label06:
        goto label08;

     label07:
        $r11 := @caughtexception;

        r2 = $r11;

        $r10 = virtualinvoke r2.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r10;

     label08:
        z3 = 1;

     label09:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z3);

        goto label12;

     label10:
        $r12 := @caughtexception;

        r3 = $r12;

     label11:
        virtualinvoke r0.<java.nio.FileChannelImpl: void end(boolean)>(z1);

        throw r3;

     label12:
        if i4 <= 0 goto label13;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i3 = $i2 + i4;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

     label13:
        return i4;

        catch android.system.ErrnoException from label04 to label06 with label07;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.FileChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, $i2, $i3;
        java.nio.IoVec $r2;
        java.nio.IoVec$Direction $r3;
        long $l4;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        specialinvoke r0.<java.nio.FileChannelImpl: void checkOpen()>();

        specialinvoke r0.<java.nio.FileChannelImpl: void checkWritable()>();

        $r2 = new java.nio.IoVec;

        $r3 = <java.nio.IoVec$Direction: java.nio.IoVec$Direction WRITEV>;

        specialinvoke $r2.<java.nio.IoVec: void <init>(java.nio.ByteBuffer[],int,int,java.nio.IoVec$Direction)>(r1, i0, i1, $r3);

        $i3 = specialinvoke r0.<java.nio.FileChannelImpl: int transferIoVec(java.nio.IoVec)>($r2);

        $l4 = (long) $i3;

        return $l4;
    }

    static int calculateTotalRemaining(java.nio.ByteBuffer[], int, int, boolean)
    {
        java.nio.ByteBuffer[] r0;
        int i0, i1, i2, i3, $i4, $i5;
        boolean z0;
        java.nio.ByteBuffer $r1, $r2;

        r0 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 = 0;

        i3 = i0;

     label1:
        $i4 = i0 + i1;

        if i3 >= $i4 goto label3;

        $r1 = r0[i3];

        $i5 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        i2 = i2 + $i5;

        if z0 == 0 goto label2;

        $r2 = r0[i3];

        virtualinvoke $r2.<java.nio.ByteBuffer: void checkWritable()>();

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return i2;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.FileChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.FileChannelImpl;

        $r1 = r0.<java.nio.FileChannelImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    private synchronized void addLock(java.nio.channels.FileLock) throws java.nio.channels.OverlappingFileLockException
    {
        java.nio.FileChannelImpl r0;
        java.nio.channels.FileLock r1, r3;
        long l0, $l1, $l2, $l3, $l5, $l6;
        java.util.Iterator r2;
        java.util.SortedSet $r4, $r5;
        boolean $z0, $z2;
        java.lang.Object $r6;
        byte $b4;
        java.nio.channels.OverlappingFileLockException $r7;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.channels.FileLock;

        $l1 = virtualinvoke r1.<java.nio.channels.FileLock: long position()>();

        $l2 = virtualinvoke r1.<java.nio.channels.FileLock: long size()>();

        l0 = $l1 + $l2;

        $r4 = r0.<java.nio.FileChannelImpl: java.util.SortedSet locks>;

        r2 = interfaceinvoke $r4.<java.util.SortedSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.nio.channels.FileLock) $r6;

        $l3 = virtualinvoke r3.<java.nio.channels.FileLock: long position()>();

        $b4 = $l3 cmp l0;

        if $b4 <= 0 goto label2;

        goto label4;

     label2:
        $l6 = virtualinvoke r1.<java.nio.channels.FileLock: long position()>();

        $l5 = virtualinvoke r1.<java.nio.channels.FileLock: long size()>();

        $z2 = virtualinvoke r3.<java.nio.channels.FileLock: boolean overlaps(long,long)>($l6, $l5);

        if $z2 == 0 goto label3;

        $r7 = new java.nio.channels.OverlappingFileLockException;

        specialinvoke $r7.<java.nio.channels.OverlappingFileLockException: void <init>()>();

        throw $r7;

     label3:
        goto label1;

     label4:
        $r5 = r0.<java.nio.FileChannelImpl: java.util.SortedSet locks>;

        interfaceinvoke $r5.<java.util.SortedSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    private synchronized void removeLock(java.nio.channels.FileLock)
    {
        java.nio.FileChannelImpl r0;
        java.nio.channels.FileLock r1;
        java.util.SortedSet $r2;

        r0 := @this: java.nio.FileChannelImpl;

        r1 := @parameter0: java.nio.channels.FileLock;

        $r2 = r0.<java.nio.FileChannelImpl: java.util.SortedSet locks>;

        interfaceinvoke $r2.<java.util.SortedSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.nio.FileChannelImpl$1 $r0;

        $r0 = new java.nio.FileChannelImpl$1;

        specialinvoke $r0.<java.nio.FileChannelImpl$1: void <init>()>();

        <java.nio.FileChannelImpl: java.util.Comparator LOCK_COMPARATOR> = $r0;

        return;
    }
}
