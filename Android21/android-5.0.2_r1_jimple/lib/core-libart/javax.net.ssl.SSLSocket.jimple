public abstract class javax.net.ssl.SSLSocket extends java.net.Socket
{

    protected void <init>()
    {
        javax.net.ssl.SSLSocket r0;

        r0 := @this: javax.net.ssl.SSLSocket;

        specialinvoke r0.<java.net.Socket: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, int) throws java.io.IOException, java.net.UnknownHostException
    {
        javax.net.ssl.SSLSocket r0;
        java.lang.String r1;
        int i0;

        r0 := @this: javax.net.ssl.SSLSocket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    protected void <init>(java.net.InetAddress, int) throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: javax.net.ssl.SSLSocket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.Socket: void <init>(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    protected void <init>(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException, java.net.UnknownHostException
    {
        javax.net.ssl.SSLSocket r0;
        java.lang.String r1;
        int i0, i1;
        java.net.InetAddress r2;

        r0 := @this: javax.net.ssl.SSLSocket;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        return;
    }

    protected void <init>(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r0;
        java.net.InetAddress r1, r2;
        int i0, i1;

        r0 := @this: javax.net.ssl.SSLSocket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        return;
    }

    public void shutdownInput() throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: javax.net.ssl.SSLSocket;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void shutdownOutput() throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: javax.net.ssl.SSLSocket;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public abstract java.lang.String[] getSupportedCipherSuites();

    public abstract java.lang.String[] getEnabledCipherSuites();

    public abstract void setEnabledCipherSuites(java.lang.String[]);

    public abstract java.lang.String[] getSupportedProtocols();

    public abstract java.lang.String[] getEnabledProtocols();

    public abstract void setEnabledProtocols(java.lang.String[]);

    public abstract javax.net.ssl.SSLSession getSession();

    public abstract void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);

    public abstract void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener);

    public abstract void startHandshake() throws java.io.IOException;

    public abstract void setUseClientMode(boolean);

    public abstract boolean getUseClientMode();

    public abstract void setNeedClientAuth(boolean);

    public abstract void setWantClientAuth(boolean);

    public abstract boolean getNeedClientAuth();

    public abstract boolean getWantClientAuth();

    public abstract void setEnableSessionCreation(boolean);

    public abstract boolean getEnableSessionCreation();

    public javax.net.ssl.SSLParameters getSSLParameters()
    {
        javax.net.ssl.SSLSocket r0;
        javax.net.ssl.SSLParameters r1, $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: javax.net.ssl.SSLSocket;

        $r2 = new javax.net.ssl.SSLParameters;

        specialinvoke $r2.<javax.net.ssl.SSLParameters: void <init>()>();

        r1 = $r2;

        $r3 = virtualinvoke r0.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledCipherSuites()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>($r3);

        $r4 = virtualinvoke r0.<javax.net.ssl.SSLSocket: java.lang.String[] getEnabledProtocols()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>($r4);

        $z0 = virtualinvoke r0.<javax.net.ssl.SSLSocket: boolean getNeedClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)>($z0);

        $z1 = virtualinvoke r0.<javax.net.ssl.SSLSocket: boolean getWantClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)>($z1);

        return r1;
    }

    public void setSSLParameters(javax.net.ssl.SSLParameters)
    {
        javax.net.ssl.SSLSocket r0;
        javax.net.ssl.SSLParameters r1;
        java.lang.String[] r2, r3;
        boolean $z0, $z1;

        r0 := @this: javax.net.ssl.SSLSocket;

        r1 := @parameter0: javax.net.ssl.SSLParameters;

        r2 = virtualinvoke r1.<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>();

        if r2 == null goto label1;

        virtualinvoke r0.<javax.net.ssl.SSLSocket: void setEnabledCipherSuites(java.lang.String[])>(r2);

     label1:
        r3 = virtualinvoke r1.<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>();

        if r3 == null goto label2;

        virtualinvoke r0.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>(r3);

     label2:
        $z0 = virtualinvoke r1.<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<javax.net.ssl.SSLSocket: void setNeedClientAuth(boolean)>(1);

        goto label5;

     label3:
        $z1 = virtualinvoke r1.<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)>(1);

        goto label5;

     label4:
        virtualinvoke r0.<javax.net.ssl.SSLSocket: void setWantClientAuth(boolean)>(0);

     label5:
        return;
    }
}
