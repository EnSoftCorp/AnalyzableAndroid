public final class dalvik.system.DexFile extends java.lang.Object
{
    private long mCookie;
    private final java.lang.String mFileName;
    private final dalvik.system.CloseGuard guard;
    public static final byte UP_TO_DATE;
    public static final byte PATCHOAT_NEEDED;
    public static final byte DEXOPT_NEEDED;

    public void <init>(java.io.File) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.io.File r1;
        java.lang.String $r2;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke r0.<dalvik.system.DexFile: void <init>(java.lang.String)>($r2);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.lang.String r1;
        dalvik.system.CloseGuard $r2, $r3;
        long $l0;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard> = $r2;

        $l0 = staticinvoke <dalvik.system.DexFile: long openDexFile(java.lang.String,java.lang.String,int)>(r1, null, 0);

        r0.<dalvik.system.DexFile: long mCookie> = $l0;

        r0.<dalvik.system.DexFile: java.lang.String mFileName> = r1;

        $r3 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    private void <init>(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        java.lang.String r1, r2, r3, $r15;
        int i0, $i2, $i3;
        dalvik.system.CloseGuard $r4, $r5;
        long $l1;
        java.io.File $r6;
        libcore.io.Os $r7, $r8;
        android.system.StructStat $r9;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16;
        android.system.ErrnoException $r17;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard> = $r4;

        if r2 == null goto label4;

     label1:
        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r2);

        r3 = virtualinvoke $r6.<java.io.File: java.lang.String getParent()>();

        $r7 = <libcore.io.Libcore: libcore.io.Os os>;

        $i2 = interfaceinvoke $r7.<libcore.io.Os: int getuid()>();

        $r8 = <libcore.io.Libcore: libcore.io.Os os>;

        $r9 = interfaceinvoke $r8.<libcore.io.Os: android.system.StructStat stat(java.lang.String)>(r3);

        $i3 = $r9.<android.system.StructStat: int st_uid>;

        if $i2 == $i3 goto label2;

        $r10 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Optimized data directory ");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not owned by the current user. Shared storage cannot protect");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" your application from code injection attacks.");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

     label2:
        goto label4;

     label3:
        $r17 := @caughtexception;

     label4:
        $l1 = staticinvoke <dalvik.system.DexFile: long openDexFile(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        r0.<dalvik.system.DexFile: long mCookie> = $l1;

        r0.<dalvik.system.DexFile: java.lang.String mFileName> = r1;

        $r5 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.String r0, r1;
        int i0;
        dalvik.system.DexFile $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = new dalvik.system.DexFile;

        specialinvoke $r2.<dalvik.system.DexFile: void <init>(java.lang.String,java.lang.String,int)>(r0, r1, i0);

        return $r2;
    }

    public java.lang.String getName()
    {
        dalvik.system.DexFile r0;
        java.lang.String $r1;

        r0 := @this: dalvik.system.DexFile;

        $r1 = r0.<dalvik.system.DexFile: java.lang.String mFileName>;

        return $r1;
    }

    public java.lang.String toString()
    {
        dalvik.system.DexFile r0;
        java.lang.String $r1;

        r0 := @this: dalvik.system.DexFile;

        $r1 = virtualinvoke r0.<dalvik.system.DexFile: java.lang.String getName()>();

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        dalvik.system.DexFile r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: dalvik.system.DexFile;

        $l0 = r0.<dalvik.system.DexFile: long mCookie>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $l2 = r0.<dalvik.system.DexFile: long mCookie>;

        staticinvoke <dalvik.system.DexFile: void closeDexFile(long)>($l2);

        r0.<dalvik.system.DexFile: long mCookie> = 0L;

     label1:
        return;
    }

    public java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader)
    {
        dalvik.system.DexFile r0;
        java.lang.String r1, r3;
        java.lang.ClassLoader r2;
        java.lang.Class $r4;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r4 = virtualinvoke r0.<dalvik.system.DexFile: java.lang.Class loadClassBinaryName(java.lang.String,java.lang.ClassLoader,java.util.List)>(r3, r2, null);

        return $r4;
    }

    public java.lang.Class loadClassBinaryName(java.lang.String, java.lang.ClassLoader, java.util.List)
    {
        dalvik.system.DexFile r0;
        java.lang.String r1;
        java.lang.ClassLoader r2;
        java.util.List r3;
        long $l0;
        java.lang.Class $r4;

        r0 := @this: dalvik.system.DexFile;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r3 := @parameter2: java.util.List;

        $l0 = r0.<dalvik.system.DexFile: long mCookie>;

        $r4 = staticinvoke <dalvik.system.DexFile: java.lang.Class defineClass(java.lang.String,java.lang.ClassLoader,long,java.util.List)>(r1, r2, $l0, r3);

        return $r4;
    }

    private static java.lang.Class defineClass(java.lang.String, java.lang.ClassLoader, long, java.util.List)
    {
        java.lang.String r0;
        java.lang.ClassLoader r1;
        long l0;
        java.util.List r2;
        java.lang.Class r3;
        java.lang.NoClassDefFoundError r4, $r5;
        java.lang.ClassNotFoundException $r6, r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

        l0 := @parameter2: long;

        r2 := @parameter3: java.util.List;

        r3 = null;

     label1:
        r3 = staticinvoke <dalvik.system.DexFile: java.lang.Class defineClassNative(java.lang.String,java.lang.ClassLoader,long)>(r0, r1, l0);

     label2:
        goto label6;

     label3:
        $r5 := @caughtexception;

        r4 = $r5;

        if r2 == null goto label4;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label4:
        goto label6;

     label5:
        $r6 := @caughtexception;

        r7 = $r6;

        if r2 == null goto label6;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7);

     label6:
        return r3;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
    }

    public java.util.Enumeration entries()
    {
        dalvik.system.DexFile r0;
        dalvik.system.DexFile$DFEnum $r1;

        r0 := @this: dalvik.system.DexFile;

        $r1 = new dalvik.system.DexFile$DFEnum;

        specialinvoke $r1.<dalvik.system.DexFile$DFEnum: void <init>(dalvik.system.DexFile,dalvik.system.DexFile)>(r0, r0);

        return $r1;
    }

    protected void finalize() throws java.lang.Throwable
    {
        dalvik.system.DexFile r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: dalvik.system.DexFile;

     label1:
        $r2 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<dalvik.system.DexFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<dalvik.system.DexFile: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static long openDexFile(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.String r0, r1, $r3, $r5;
        int i0;
        java.io.File $r2, $r4;
        long $l1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0);

        $r3 = virtualinvoke $r2.<java.io.File: java.lang.String getAbsolutePath()>();

        if r1 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

     label2:
        $l1 = staticinvoke <dalvik.system.DexFile: long openDexFileNative(java.lang.String,java.lang.String,int)>($r3, $r5, i0);

        return $l1;
    }

    private static native void closeDexFile(long);

    private static native java.lang.Class defineClassNative(java.lang.String, java.lang.ClassLoader, long) throws java.lang.ClassNotFoundException, java.lang.NoClassDefFoundError;

    private static native java.lang.String[] getClassNameList(long);

    private static native long openDexFileNative(java.lang.String, java.lang.String, int);

    public static native boolean isDexOptNeeded(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;

    public static native byte isDexOptNeededInternal(java.lang.String, java.lang.String, java.lang.String, boolean) throws java.io.FileNotFoundException, java.io.IOException;

    static long access$000(dalvik.system.DexFile)
    {
        dalvik.system.DexFile r0;
        long $l0;

        r0 := @parameter0: dalvik.system.DexFile;

        $l0 = r0.<dalvik.system.DexFile: long mCookie>;

        return $l0;
    }

    static java.lang.String[] access$100(long)
    {
        long l0;
        java.lang.String[] $r0;

        l0 := @parameter0: long;

        $r0 = staticinvoke <dalvik.system.DexFile: java.lang.String[] getClassNameList(long)>(l0);

        return $r0;
    }

    public static void <clinit>()
    {
        <dalvik.system.DexFile: byte DEXOPT_NEEDED> = 2;

        <dalvik.system.DexFile: byte PATCHOAT_NEEDED> = 1;

        <dalvik.system.DexFile: byte UP_TO_DATE> = 0;

        return;
    }
}
