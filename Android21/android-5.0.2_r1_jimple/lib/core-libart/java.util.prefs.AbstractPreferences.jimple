public abstract class java.util.prefs.AbstractPreferences extends java.util.prefs.Preferences
{
    private static final java.util.List events;
    private static final java.util.prefs.AbstractPreferences$EventDispatcher dispatcher;
    boolean userNode;
    protected final java.lang.Object lock;
    protected boolean newNode;
    private java.util.Map cachedNode;
    private java.util.List nodeChangeListeners;
    private java.util.List preferenceChangeListeners;
    private java.lang.String nodeName;
    private java.util.prefs.AbstractPreferences parentPref;
    private boolean isRemoved;
    private java.util.prefs.AbstractPreferences root;

    protected void <init>(java.util.prefs.AbstractPreferences, java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0, r1, $r4, $r9;
        java.lang.String r2;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r3;
        java.util.LinkedList $r5, $r6;
        java.util.HashMap $r7;
        java.lang.Object $r8;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.AbstractPreferences;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.util.prefs.Preferences: void <init>()>();

        if r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        $z1 = $z0 ^ $z3;

        if $z1 != 0 goto label5;

        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("/");

        if $i1 < 0 goto label6;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label6:
        if r1 != null goto label7;

        $r4 = r0;

        goto label8;

     label7:
        $r4 = r1.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

     label8:
        r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root> = $r4;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners> = $r6;

        r0.<java.util.prefs.AbstractPreferences: boolean isRemoved> = 0;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode> = $r7;

        r0.<java.util.prefs.AbstractPreferences: java.lang.String nodeName> = r2;

        r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref> = r1;

        $r8 = new java.lang.Object;

        specialinvoke $r8.<java.lang.Object: void <init>()>();

        r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock> = $r8;

        $r9 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        $z2 = $r9.<java.util.prefs.AbstractPreferences: boolean userNode>;

        r0.<java.util.prefs.AbstractPreferences: boolean userNode> = $z2;

        return;
    }

    protected final java.util.prefs.AbstractPreferences[] cachedChildren()
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.Map $r1, $r3;
        java.util.Collection $r2;
        int $i0;
        java.util.prefs.AbstractPreferences[] $r4, $r6;
        java.lang.Object[] $r5;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (java.util.prefs.AbstractPreferences)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.util.prefs.AbstractPreferences[]) $r5;

        return $r6;
    }

    protected java.util.prefs.AbstractPreferences getChild(java.lang.String) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r3;
        java.lang.String r1, r6;
        java.lang.Object r2, $r8;
        java.lang.String[] r4, r5;
        int i0, i1;
        java.lang.Throwable r7, $r9;
        boolean $z0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        $r8 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r2 = $r8;

        entermonitor $r8;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        r3 = null;

        r4 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNames()>();

        r5 = r4;

        i0 = lengthof r5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r6 = r5[i1];

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        r3 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences childSpi(java.lang.String)>(r1);

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        exitmonitor r2;

     label5:
        return r3;

     label6:
        $r9 := @caughtexception;

        r7 = $r9;

        exitmonitor r2;

     label7:
        throw r7;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected boolean isRemoved()
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r3 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = r0.<java.util.prefs.AbstractPreferences: boolean isRemoved>;

        exitmonitor r1;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected abstract void flushSpi() throws java.util.prefs.BackingStoreException;

    protected abstract java.lang.String[] childrenNamesSpi() throws java.util.prefs.BackingStoreException;

    protected abstract java.util.prefs.AbstractPreferences childSpi(java.lang.String);

    protected abstract void putSpi(java.lang.String, java.lang.String);

    protected abstract java.lang.String getSpi(java.lang.String);

    protected abstract java.lang.String[] keysSpi() throws java.util.prefs.BackingStoreException;

    protected abstract void removeNodeSpi() throws java.util.prefs.BackingStoreException;

    protected abstract void removeSpi(java.lang.String);

    protected abstract void syncSpi() throws java.util.prefs.BackingStoreException;

    public java.lang.String absolutePath()
    {
        java.util.prefs.AbstractPreferences r0, $r1, $r2, $r3, $r5;
        java.lang.StringBuilder $r4, $r7, $r8, $r10, $r12, $r13, $r15;
        java.lang.String $r6, $r9, $r11, $r14, $r16;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        if $r1 != null goto label1;

        return "/";

     label1:
        $r3 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        $r2 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        if $r3 != $r2 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r14 = r0.<java.util.prefs.AbstractPreferences: java.lang.String nodeName>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        $r6 = virtualinvoke $r5.<java.util.prefs.AbstractPreferences: java.lang.String absolutePath()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = r0.<java.util.prefs.AbstractPreferences: java.lang.String nodeName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String[] childrenNames() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.Object r1, $r5;
        java.util.TreeSet r2, $r6;
        java.lang.String[] r3, $r9, $r12;
        int i0, $i1, $i2;
        java.lang.Throwable r4, $r13;
        java.util.Map $r7;
        java.util.Set $r8;
        java.lang.Object[] $r10;
        java.lang.String $r11;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r5 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r6 = new java.util.TreeSet;

        $r7 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r6.<java.util.TreeSet: void <init>(java.util.Collection)>($r8);

        r2 = $r6;

        r3 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNamesSpi()>();

        i0 = 0;

     label2:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label3;

        $r11 = r3[i0];

        virtualinvoke r2.<java.util.TreeSet: boolean add(java.lang.Object)>($r11);

        i0 = i0 + 1;

        goto label2;

     label3:
        $i2 = virtualinvoke r2.<java.util.TreeSet: int size()>();

        $r9 = newarray (java.lang.String)[$i2];

        $r10 = virtualinvoke r2.<java.util.TreeSet: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r12 = (java.lang.String[]) $r10;

        exitmonitor r1;

     label4:
        return $r12;

     label5:
        $r13 := @caughtexception;

        r4 = $r13;

        exitmonitor r1;

     label6:
        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void clear() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.Object r1, $r5;
        java.lang.String[] r2;
        int i0, i1;
        java.lang.String r3;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r5 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r5;

        entermonitor $r5;

     label1:
        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String[] keys()>();

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void remove(java.lang.String)>(r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

        exitmonitor r1;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void exportNode(java.io.OutputStream) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0;
        java.io.OutputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("ostream == null");

        throw $r2;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        staticinvoke <java.util.prefs.XMLParser: void exportPrefs(java.util.prefs.Preferences,java.io.OutputStream,boolean)>(r0, r1, 0);

        return;
    }

    public void exportSubtree(java.io.OutputStream) throws java.io.IOException, java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0;
        java.io.OutputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("ostream == null");

        throw $r2;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        staticinvoke <java.util.prefs.XMLParser: void exportPrefs(java.util.prefs.Preferences,java.io.OutputStream,boolean)>(r0, r1, 1);

        return;
    }

    public void flush() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, $r4;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, i1;
        java.util.prefs.AbstractPreferences[] r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r3 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void flushSpi()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        r6 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences[] cachedChildren()>();

        i1 = 0;

     label6:
        $i0 = lengthof r6;

        if i1 >= $i0 goto label7;

        $r4 = r6[i1];

        virtualinvoke $r4.<java.util.prefs.AbstractPreferences: void flush()>();

        i1 = i1 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String get(java.lang.String, java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2, r3, $r8;
        java.lang.Object r4, $r7;
        java.lang.Throwable r6, $r10;
        java.lang.NullPointerException $r9;
        java.lang.Exception $r11;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label01;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r9;

     label01:
        r3 = null;

        $r7 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r4 = $r7;

        entermonitor $r7;

     label02:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

     label03:
        r3 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String getSpi(java.lang.String)>(r1);

     label04:
        goto label06;

     label05:
        $r11 := @caughtexception;

     label06:
        exitmonitor r4;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r6 = $r10;

        exitmonitor r4;

     label09:
        throw r6;

     label10:
        if r3 != null goto label11;

        $r8 = r2;

        goto label12;

     label11:
        $r8 = r3;

     label12:
        return $r8;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public boolean getBoolean(java.lang.String, boolean)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2, $r3, $r4;
        boolean z0, $z1, $z2;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r2 != null goto label1;

        return z0;

     label1:
        $r3 = "true";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r4 = "false";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        return z0;
    }

    public byte[] getByteArray(java.lang.String, byte[])
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r3;
        byte[] r2, r4, $r6, $r7;
        int $i0, $i1, $i2;
        java.nio.charset.Charset $r5;
        java.lang.Exception $r8;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        r3 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r3 != null goto label1;

        return r2;

     label1:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        $r7 = <libcore.util.EmptyArray: byte[] BYTE>;

        return $r7;

     label2:
        $r5 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5);

        $i1 = lengthof r4;

        $i2 = $i1 % 4;

        if $i2 == 0 goto label4;

     label3:
        return r2;

     label4:
        $r6 = staticinvoke <libcore.io.Base64: byte[] decode(byte[])>(r4);

     label5:
        return $r6;

     label6:
        $r8 := @caughtexception;

        return r2;

        catch java.lang.Exception from label2 to label3 with label6;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    public double getDouble(java.lang.String, double)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        double d0, $d1;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r2 != null goto label1;

        return d0;

     label1:
        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r2);

     label2:
        return $d1;

     label3:
        $r4 := @caughtexception;

        return d0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public float getFloat(java.lang.String, float)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        float f0, $f1;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r2 != null goto label1;

        return f0;

     label1:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r2);

     label2:
        return $f1;

     label3:
        $r4 := @caughtexception;

        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public int getInt(java.lang.String, int)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        int i0, $i1;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r2 != null goto label1;

        return i0;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

     label2:
        return $i1;

     label3:
        $r4 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public long getLong(java.lang.String, long)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        long l0, $l1;
        java.lang.NumberFormatException $r4;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String get(java.lang.String,java.lang.String)>(r1, null);

        if r2 != null goto label1;

        return l0;

     label1:
        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2);

     label2:
        return $l1;

     label3:
        $r4 := @caughtexception;

        return l0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public boolean isUserNode()
    {
        java.util.prefs.AbstractPreferences r0, $r1;
        java.util.prefs.Preferences $r2;
        boolean $z0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        $r2 = staticinvoke <java.util.prefs.Preferences: java.util.prefs.Preferences userRoot()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String[] keys() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.lang.String[] $r4;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r3 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r4 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String[] keysSpi()>();

        exitmonitor r1;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String name()
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String $r1;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.lang.String nodeName>;

        return $r1;
    }

    public java.util.prefs.Preferences node(java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0, $r6, $r7, r10;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z1, $z2;
        java.util.prefs.BackingStoreException $r9;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        specialinvoke r0.<java.util.prefs.AbstractPreferences: void validateName(java.lang.String)>(r1);

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        exitmonitor r2;

     label02:
        return r0;

     label03:
        $r5 = "/";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label05;

        $r7 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        exitmonitor r2;

     label04:
        return $r7;

     label05:
        $z2 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z2 == 0 goto label06;

        r10 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        goto label07;

     label06:
        r10 = r0;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label10:
        throw r3;

     label11:
        $r6 = specialinvoke r10.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences nodeImpl(java.lang.String,boolean)>(r1, 1);

     label12:
        return $r6;

     label13:
        $r9 := @caughtexception;

        return null;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.util.prefs.BackingStoreException from label11 to label12 with label13;
    }

    private void validateName(java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2, $r3;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name cannot end with \'/\'");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("//");

        if $i0 < 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name cannot contain consecutive \'/\' characters");

        throw $r2;

     label2:
        return;
    }

    private java.util.prefs.AbstractPreferences nodeImpl(java.lang.String, boolean) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r3, r4;
        java.lang.String r1, r6;
        boolean z0;
        java.lang.String[] r2, r5;
        int i0, i1;
        java.lang.Object r7, $r9, $r11;
        java.lang.Throwable r8, $r12;
        java.util.Map $r10;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        r3 = r0;

        r5 = r2;

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        r6 = r5[i1];

        $r9 = r3.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r7 = $r9;

        entermonitor $r9;

     label2:
        $r10 = r3.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r4 = (java.util.prefs.AbstractPreferences) $r11;

        if r4 != null goto label3;

        r4 = specialinvoke r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences getNodeFromBackend(boolean,java.util.prefs.AbstractPreferences,java.lang.String)>(z0, r3, r6);

     label3:
        exitmonitor r7;

     label4:
        goto label7;

     label5:
        $r12 := @caughtexception;

        r8 = $r12;

        exitmonitor r7;

     label6:
        throw r8;

     label7:
        r3 = r4;

        if r3 != null goto label8;

        goto label9;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return r3;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private java.util.prefs.AbstractPreferences getNodeFromBackend(boolean, java.util.prefs.AbstractPreferences, java.lang.String) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r1, r3;
        boolean z0, $z1;
        java.lang.String r2, $r12;
        int $i0, $i1;
        java.util.Map $r4;
        java.util.List $r6;
        java.lang.IllegalArgumentException $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11;

        r0 := @this: java.util.prefs.AbstractPreferences;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.prefs.AbstractPreferences;

        r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i0 <= 80 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Name \'");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' too long");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label1:
        if z0 == 0 goto label2;

        r3 = virtualinvoke r1.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences childSpi(java.lang.String)>(r2);

        $r4 = r1.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        $z1 = r3.<java.util.prefs.AbstractPreferences: boolean newNode>;

        if $z1 == 0 goto label3;

        $r6 = r1.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 <= 0 goto label3;

        specialinvoke r1.<java.util.prefs.AbstractPreferences: void notifyChildAdded(java.util.prefs.Preferences)>(r3);

        goto label3;

     label2:
        r3 = virtualinvoke r1.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences getChild(java.lang.String)>(r2);

     label3:
        return r3;
    }

    public boolean nodeExists(java.lang.String) throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r10, r11;
        java.lang.String r1, $r5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.IllegalStateException $r6;
        java.lang.NullPointerException $r7;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label01;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r7;

     label01:
        $r4 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label02:
        $z0 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: boolean isRemoved()>();

        if $z0 == 0 goto label05;

        $z5 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label04;

        exitmonitor r2;

     label03:
        return 0;

     label04:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This node has been removed");

        throw $r6;

     label05:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void validateName(java.lang.String)>(r1);

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label06;

        $r5 = "/";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label08;

     label06:
        exitmonitor r2;

     label07:
        return 1;

     label08:
        $z3 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z3 == 0 goto label09;

        r10 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        goto label10;

     label09:
        r10 = r0;

     label10:
        exitmonitor r2;

     label11:
        goto label14;

     label12:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label13:
        throw r3;

     label14:
        r11 = specialinvoke r10.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences nodeImpl(java.lang.String,boolean)>(r1, 0);

        if r11 == null goto label15;

        $z4 = 1;

        goto label16;

     label15:
        $z4 = 0;

     label16:
        return $z4;

     label17:
        $r9 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label07 with label12;
        catch java.lang.Throwable from label08 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
        catch java.lang.IllegalArgumentException from label14 to label16 with label17;
    }

    public java.util.prefs.Preferences parent()
    {
        java.util.prefs.AbstractPreferences r0, $r1;

        r0 := @this: java.util.prefs.AbstractPreferences;

        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        return $r1;
    }

    private void checkState()
    {
        java.util.prefs.AbstractPreferences r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $z0 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: boolean isRemoved()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This node has been removed");

        throw $r1;

     label1:
        return;
    }

    public void put(java.lang.String, java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r9;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r5;
        java.lang.NullPointerException $r7, $r8;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r8;

     label1:
        if r2 != null goto label2;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("value == null");

        throw $r7;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 > 80 goto label3;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 <= 8192 goto label4;

     label3:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label4:
        $r6 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r3 = $r6;

        entermonitor $r6;

     label5:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void putSpi(java.lang.String,java.lang.String)>(r1, r2);

        exitmonitor r3;

     label6:
        goto label9;

     label7:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label8:
        throw r4;

     label9:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void notifyPreferenceChange(java.lang.String,java.lang.String)>(r1, r2);

        return;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void putBoolean(java.lang.String, boolean)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r2;
        boolean z0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void putByteArray(java.lang.String, byte[])
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r3;
        byte[] r2;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        $r3 = staticinvoke <libcore.io.Base64: java.lang.String encode(byte[])>(r2);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }

    public void putDouble(java.lang.String, double)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r2;
        double d0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void putFloat(java.lang.String, float)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r2;
        float f0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        $r2 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void putInt(java.lang.String, int)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r2;
        int i0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void putLong(java.lang.String, long)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, $r2;
        long l0;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void put(java.lang.String,java.lang.String)>(r1, $r2);

        return;
    }

    public void remove(java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r5;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void removeSpi(java.lang.String)>(r1);

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void notifyPreferenceChange(java.lang.String,java.lang.String)>(r1, null);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeNode() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, $r3, $r4;
        java.lang.Object r1, $r5;
        java.lang.Throwable r2, $r7;
        java.lang.UnsupportedOperationException $r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r3 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences root>;

        if $r3 != r0 goto label1;

        $r6 = new java.lang.UnsupportedOperationException;

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot remove root node");

        throw $r6;

     label1:
        $r4 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        $r5 = $r4.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r5;

        entermonitor $r5;

     label2:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void removeNodeImpl()>();

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void removeNodeImpl() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r5, r6, $r11, $r17, $r18;
        java.lang.Object r1, $r8, $r19;
        java.lang.String[] r2, r3;
        int i0, i1, $i2, $i3, i4, i5;
        java.lang.String r4, $r14;
        java.lang.Throwable r7, $r22;
        java.util.Map $r9, $r13, $r20, $r21;
        java.util.prefs.AbstractPreferences[] $r10, r25, r26;
        java.lang.Object[] $r12;
        java.util.List $r16;
        java.util.Collection r24;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r8 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r8;

        entermonitor $r8;

     label01:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        r2 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String[] childrenNamesSpi()>();

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label02:
        if i1 >= i0 goto label04;

        r4 = r3[i1];

        $r20 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $r19 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        if $r19 != null goto label03;

        r5 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences childSpi(java.lang.String)>(r4);

        $r21 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        $r9 = r0.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        r24 = interfaceinvoke $r9.<java.util.Map: java.util.Collection values()>();

        $i2 = interfaceinvoke r24.<java.util.Collection: int size()>();

        $r10 = newarray (java.util.prefs.AbstractPreferences)[$i2];

        $r12 = interfaceinvoke r24.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        r25 = (java.util.prefs.AbstractPreferences[]) $r12;

        r26 = r25;

        i4 = lengthof r26;

        i5 = 0;

     label05:
        if i5 >= i4 goto label06;

        r6 = r26[i5];

        specialinvoke r6.<java.util.prefs.AbstractPreferences: void removeNodeImpl()>();

        i5 = i5 + 1;

        goto label05;

     label06:
        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void removeNodeSpi()>();

        r0.<java.util.prefs.AbstractPreferences: boolean isRemoved> = 1;

        $r11 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        $r13 = $r11.<java.util.prefs.AbstractPreferences: java.util.Map cachedNode>;

        $r14 = r0.<java.util.prefs.AbstractPreferences: java.lang.String nodeName>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14);

        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r22 := @caughtexception;

        r7 = $r22;

        exitmonitor r1;

     label09:
        throw r7;

     label10:
        $r17 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        $r16 = $r17.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        $i3 = interfaceinvoke $r16.<java.util.List: int size()>();

        if $i3 <= 0 goto label11;

        $r18 = r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences parentPref>;

        specialinvoke $r18.<java.util.prefs.AbstractPreferences: void notifyChildRemoved(java.util.prefs.Preferences)>(r0);

     label11:
        return;

        catch java.lang.Throwable from label01 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void addNodeChangeListener(java.util.prefs.NodeChangeListener)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.NodeChangeListener r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.NodeChangeListener;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("ncl == null");

        throw $r6;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void addPreferenceChangeListener(java.util.prefs.PreferenceChangeListener)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.PreferenceChangeListener r1;
        java.util.List r2, $r4, $r5;
        java.lang.Throwable r3, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.PreferenceChangeListener;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("pcl == null");

        throw $r6;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        r2 = $r4;

        entermonitor $r4;

     label2:
        $r5 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void removeNodeChangeListener(java.util.prefs.NodeChangeListener)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.NodeChangeListener r1;
        java.util.List r2, $r4, $r5, $r6;
        int i0, $i1;
        java.lang.Throwable r3, $r9;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.NodeChangeListener;

        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        $i1 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>(r1);

        i0 = $i1;

        if $i1 != -1 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        $r6 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void removePreferenceChangeListener(java.util.prefs.PreferenceChangeListener)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.PreferenceChangeListener r1;
        java.util.List r2, $r4, $r5, $r6;
        int i0, $i1;
        java.lang.Throwable r3, $r9;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.PreferenceChangeListener;

        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        $r5 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        $i1 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>(r1);

        i0 = $i1;

        if $i1 != -1 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        $r6 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r9 := @caughtexception;

        r3 = $r9;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void sync() throws java.util.prefs.BackingStoreException
    {
        java.util.prefs.AbstractPreferences r0, r3;
        java.lang.Object r1, $r4;
        java.lang.Throwable r2, $r5;
        int i0, i1;
        java.util.prefs.AbstractPreferences[] r6;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r4 = r0.<java.util.prefs.AbstractPreferences: java.lang.Object lock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<java.util.prefs.AbstractPreferences: void checkState()>();

        virtualinvoke r0.<java.util.prefs.AbstractPreferences: void syncSpi()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        r6 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences[] cachedChildren()>();

        i1 = lengthof r6;

        i0 = 0;

     label6:
        if i0 >= i1 goto label7;

        r3 = r6[i0];

        virtualinvoke r3.<java.util.prefs.AbstractPreferences: void sync()>();

        i0 = i0 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.String toString()
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r5;
        boolean $z0;
        java.lang.String $r4, $r6, $r7;

        r0 := @this: java.util.prefs.AbstractPreferences;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: boolean isUserNode()>();

        if $z0 == 0 goto label1;

        $r7 = "User";

        goto label2;

     label1:
        $r7 = "System";

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Preference Node: ");

        $r4 = virtualinvoke r0.<java.util.prefs.AbstractPreferences: java.lang.String absolutePath()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private void notifyChildAdded(java.util.prefs.Preferences)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.Preferences r1;
        java.util.prefs.AbstractPreferences$NodeAddEvent r2, $r5;
        java.util.List r3, $r6, $r7, $r8;
        java.lang.Throwable r4, $r9;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.Preferences;

        $r5 = new java.util.prefs.AbstractPreferences$NodeAddEvent;

        specialinvoke $r5.<java.util.prefs.AbstractPreferences$NodeAddEvent: void <init>(java.util.prefs.Preferences,java.util.prefs.Preferences)>(r0, r1);

        r2 = $r5;

        $r6 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r8 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void notifyChildRemoved(java.util.prefs.Preferences)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.prefs.Preferences r1;
        java.util.prefs.AbstractPreferences$NodeRemoveEvent r2, $r5;
        java.util.List r3, $r6, $r7, $r8;
        java.lang.Throwable r4, $r9;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.util.prefs.Preferences;

        $r5 = new java.util.prefs.AbstractPreferences$NodeRemoveEvent;

        specialinvoke $r5.<java.util.prefs.AbstractPreferences$NodeRemoveEvent: void <init>(java.util.prefs.Preferences,java.util.prefs.Preferences)>(r0, r1);

        r2 = $r5;

        $r6 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r7 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r8 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        virtualinvoke $r8.<java.lang.Object: void notifyAll()>();

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void notifyPreferenceChange(java.lang.String, java.lang.String)
    {
        java.util.prefs.AbstractPreferences r0;
        java.lang.String r1, r2;
        java.util.prefs.PreferenceChangeEvent r3, $r6;
        java.util.List r4, $r7, $r8, $r9;
        java.lang.Throwable r5, $r10;

        r0 := @this: java.util.prefs.AbstractPreferences;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r6 = new java.util.prefs.PreferenceChangeEvent;

        specialinvoke $r6.<java.util.prefs.PreferenceChangeEvent: void <init>(java.util.prefs.Preferences,java.lang.String,java.lang.String)>(r0, r1, r2);

        r3 = $r6;

        $r7 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        r4 = $r7;

        entermonitor $r7;

     label1:
        $r8 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3);

        $r9 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        virtualinvoke $r9.<java.lang.Object: void notifyAll()>();

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        r5 = $r10;

        exitmonitor r4;

     label4:
        throw r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static java.util.List access$000(java.util.prefs.AbstractPreferences)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.List $r1;

        r0 := @parameter0: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.List nodeChangeListeners>;

        return $r1;
    }

    static java.util.List access$100(java.util.prefs.AbstractPreferences)
    {
        java.util.prefs.AbstractPreferences r0;
        java.util.List $r1;

        r0 := @parameter0: java.util.prefs.AbstractPreferences;

        $r1 = r0.<java.util.prefs.AbstractPreferences: java.util.List preferenceChangeListeners>;

        return $r1;
    }

    static java.util.List access$200()
    {
        java.util.List $r0;

        $r0 = <java.util.prefs.AbstractPreferences: java.util.List events>;

        return $r0;
    }

    static void <clinit>()
    {
        java.util.LinkedList $r0;
        java.util.prefs.AbstractPreferences$EventDispatcher $r1, $r2, $r3;
        java.lang.Runtime $r4;
        java.util.prefs.AbstractPreferences$1 $r5;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        <java.util.prefs.AbstractPreferences: java.util.List events> = $r0;

        $r1 = new java.util.prefs.AbstractPreferences$EventDispatcher;

        specialinvoke $r1.<java.util.prefs.AbstractPreferences$EventDispatcher: void <init>(java.lang.String)>("Preference Event Dispatcher");

        <java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences$EventDispatcher dispatcher> = $r1;

        $r2 = <java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences$EventDispatcher dispatcher>;

        virtualinvoke $r2.<java.util.prefs.AbstractPreferences$EventDispatcher: void setDaemon(boolean)>(1);

        $r3 = <java.util.prefs.AbstractPreferences: java.util.prefs.AbstractPreferences$EventDispatcher dispatcher>;

        virtualinvoke $r3.<java.util.prefs.AbstractPreferences$EventDispatcher: void start()>();

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = new java.util.prefs.AbstractPreferences$1;

        specialinvoke $r5.<java.util.prefs.AbstractPreferences$1: void <init>()>();

        virtualinvoke $r4.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r5);

        return;
    }
}
