public final class libcore.icu.DateIntervalFormat extends java.lang.Object
{
    public static final int FORMAT_SHOW_TIME;
    public static final int FORMAT_SHOW_WEEKDAY;
    public static final int FORMAT_SHOW_YEAR;
    public static final int FORMAT_NO_YEAR;
    public static final int FORMAT_SHOW_DATE;
    public static final int FORMAT_NO_MONTH_DAY;
    public static final int FORMAT_12HOUR;
    public static final int FORMAT_24HOUR;
    public static final int FORMAT_UTC;
    public static final int FORMAT_ABBREV_TIME;
    public static final int FORMAT_ABBREV_WEEKDAY;
    public static final int FORMAT_ABBREV_MONTH;
    public static final int FORMAT_NUMERIC_DATE;
    public static final int FORMAT_ABBREV_ALL;
    private static final int DAY_IN_MS;
    private static final int EPOCH_JULIAN_DAY;
    private static final libcore.icu.DateIntervalFormat$FormatterCache CACHED_FORMATTERS;

    private void <init>()
    {
        libcore.icu.DateIntervalFormat r0;

        r0 := @this: libcore.icu.DateIntervalFormat;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String formatDateRange(long, long, int, java.lang.String)
    {
        long l0, l1;
        int i2, $i3;
        java.lang.String r0, $r4;
        java.util.TimeZone r1, $r2;
        java.util.Locale $r3;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        $i3 = i2 & 8192;

        if $i3 == 0 goto label1;

        r0 = "UTC";

     label1:
        if r0 == null goto label2;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>(r0);

        goto label3;

     label2:
        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>();

     label3:
        r1 = $r2;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = staticinvoke <libcore.icu.DateIntervalFormat: java.lang.String formatDateRange(java.util.Locale,java.util.TimeZone,long,long,int)>($r3, r1, l0, l1, i2);

        return $r4;
    }

    public static java.lang.String formatDateRange(java.util.Locale, java.util.TimeZone, long, long, int)
    {
        java.util.Locale r0;
        java.util.TimeZone r1;
        long l0, l1, $l5;
        int i2, $i6, $i7;
        java.util.Calendar r2, r3;
        boolean z0;
        java.lang.String r4, $r8, $r9, $r10;
        libcore.icu.DateIntervalFormat$FormatterCache r5, $r7;
        java.lang.Throwable r6, $r11;
        byte $b3, $b4;

        r0 := @parameter0: java.util.Locale;

        r1 := @parameter1: java.util.TimeZone;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        i2 := @parameter4: int;

        r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(r1);

        virtualinvoke r2.<java.util.Calendar: void setTimeInMillis(long)>(l0);

        $b3 = l0 cmp l1;

        if $b3 != 0 goto label1;

        r3 = r2;

        goto label2;

     label1:
        r3 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>(r1);

        virtualinvoke r3.<java.util.Calendar: void setTimeInMillis(long)>(l1);

     label2:
        z0 = staticinvoke <libcore.icu.DateIntervalFormat: boolean isMidnight(java.util.Calendar)>(r3);

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label4;

        if z0 == 0 goto label4;

        $i6 = i2 & 1;

        if $i6 == 0 goto label3;

        $i7 = staticinvoke <libcore.icu.DateIntervalFormat: int dayDistance(java.util.Calendar,java.util.Calendar)>(r2, r3);

        if $i7 > 1 goto label4;

     label3:
        virtualinvoke r3.<java.util.Calendar: void roll(int,boolean)>(5, 0);

        l1 = l1 - 86400000L;

     label4:
        r4 = staticinvoke <libcore.icu.DateIntervalFormat: java.lang.String toSkeleton(java.util.Calendar,java.util.Calendar,int)>(r2, r3, i2);

        $r7 = <libcore.icu.DateIntervalFormat: libcore.icu.DateIntervalFormat$FormatterCache CACHED_FORMATTERS>;

        r5 = $r7;

        entermonitor $r7;

     label5:
        $r9 = virtualinvoke r0.<java.util.Locale: java.lang.String toString()>();

        $r8 = virtualinvoke r1.<java.util.TimeZone: java.lang.String getID()>();

        $l5 = staticinvoke <libcore.icu.DateIntervalFormat: long getFormatter(java.lang.String,java.lang.String,java.lang.String)>(r4, $r9, $r8);

        $r10 = staticinvoke <libcore.icu.DateIntervalFormat: java.lang.String formatDateInterval(long,long,long)>($l5, l0, l1);

        exitmonitor r5;

     label6:
        return $r10;

     label7:
        $r11 := @caughtexception;

        r6 = $r11;

        exitmonitor r5;

     label8:
        throw r6;

        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private static long getFormatter(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, r2, r3;
        java.lang.Long r4, $r15;
        long l0, $l1;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        libcore.icu.DateIntervalFormat$FormatterCache $r11, $r13;
        java.lang.Object $r12;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = <libcore.icu.DateIntervalFormat: libcore.icu.DateIntervalFormat$FormatterCache CACHED_FORMATTERS>;

        $r12 = virtualinvoke $r11.<libcore.icu.DateIntervalFormat$FormatterCache: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (java.lang.Long) $r12;

        if r4 == null goto label1;

        $l1 = virtualinvoke r4.<java.lang.Long: long longValue()>();

        return $l1;

     label1:
        l0 = staticinvoke <libcore.icu.DateIntervalFormat: long createDateIntervalFormat(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        $r13 = <libcore.icu.DateIntervalFormat: libcore.icu.DateIntervalFormat$FormatterCache CACHED_FORMATTERS>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        virtualinvoke $r13.<libcore.icu.DateIntervalFormat$FormatterCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15);

        return l0;
    }

    private static java.lang.String toSkeleton(java.util.Calendar, java.util.Calendar, int)
    {
        java.util.Calendar r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        java.lang.String r2, r3, r4, $r11;
        java.lang.StringBuilder r5, $r6, $r7, $r8, $r9, $r16, $r17, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        i0 := @parameter2: int;

        $i1 = i0 & 524288;

        if $i1 == 0 goto label01;

        i0 = i0 | 114688;

     label01:
        r2 = "MMMM";

        $i2 = i0 & 131072;

        if $i2 == 0 goto label02;

        r2 = "M";

        goto label03;

     label02:
        $i3 = i0 & 65536;

        if $i3 == 0 goto label03;

        r2 = "MMM";

     label03:
        r3 = "EEEE";

        $i4 = i0 & 32768;

        if $i4 == 0 goto label04;

        r3 = "EEE";

     label04:
        r4 = "j";

        $i5 = i0 & 128;

        if $i5 == 0 goto label05;

        r4 = "H";

        goto label06;

     label05:
        $i6 = i0 & 64;

        if $i6 == 0 goto label06;

        r4 = "h";

     label06:
        $i7 = i0 & 16384;

        if $i7 == 0 goto label07;

        $i18 = i0 & 128;

        if $i18 == 0 goto label08;

     label07:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m");

        r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label08:
        $z4 = staticinvoke <libcore.icu.DateIntervalFormat: boolean onTheHour(java.util.Calendar)>(r0);

        if $z4 == 0 goto label09;

        $z5 = staticinvoke <libcore.icu.DateIntervalFormat: boolean onTheHour(java.util.Calendar)>(r1);

        if $z5 != 0 goto label10;

     label09:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("m");

        r4 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $z1 = staticinvoke <libcore.icu.DateIntervalFormat: boolean fallOnDifferentDates(java.util.Calendar,java.util.Calendar)>(r0, r1);

        if $z1 == 0 goto label11;

        i0 = i0 | 16;

     label11:
        $z0 = staticinvoke <libcore.icu.DateIntervalFormat: boolean fallInSameMonth(java.util.Calendar,java.util.Calendar)>(r0, r1);

        if $z0 == 0 goto label12;

        $i17 = i0 & 32;

        if $i17 == 0 goto label12;

        i19 = i0 & -3;

        i0 = i19 & -2;

     label12:
        $i9 = i0 & 19;

        if $i9 != 0 goto label13;

        i0 = i0 | 16;

     label13:
        $i8 = i0 & 16;

        if $i8 == 0 goto label17;

        $i15 = i0 & 4;

        if $i15 == 0 goto label14;

        goto label17;

     label14:
        $i16 = i0 & 8;

        if $i16 == 0 goto label15;

        goto label17;

     label15:
        $z2 = staticinvoke <libcore.icu.DateIntervalFormat: boolean fallInSameYear(java.util.Calendar,java.util.Calendar)>(r0, r1);

        if $z2 == 0 goto label16;

        $z3 = staticinvoke <libcore.icu.DateIntervalFormat: boolean isThisYear(java.util.Calendar)>(r0);

        if $z3 != 0 goto label17;

     label16:
        i0 = i0 | 4;

     label17:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        r5 = $r9;

        $i10 = i0 & 48;

        if $i10 == 0 goto label19;

        $i13 = i0 & 4;

        if $i13 == 0 goto label18;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("y");

     label18:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $i14 = i0 & 32;

        if $i14 != 0 goto label19;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("d");

     label19:
        $i12 = i0 & 2;

        if $i12 == 0 goto label20;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label20:
        $i11 = i0 & 1;

        if $i11 == 0 goto label21;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label21:
        $r11 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private static boolean isMidnight(java.util.Calendar)
    {
        java.util.Calendar r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(11);

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        if $i1 != 0 goto label1;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        if $i2 != 0 goto label1;

        $i3 = virtualinvoke r0.<java.util.Calendar: int get(int)>(14);

        if $i3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean onTheHour(java.util.Calendar)
    {
        java.util.Calendar r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(12);

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.util.Calendar: int get(int)>(13);

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean fallOnDifferentDates(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        if $i0 != $i1 goto label1;

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        $i3 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        if $i2 != $i3 goto label1;

        $i4 = virtualinvoke r0.<java.util.Calendar: int get(int)>(5);

        $i5 = virtualinvoke r1.<java.util.Calendar: int get(int)>(5);

        if $i4 == $i5 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static boolean fallInSameMonth(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(2);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(2);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean fallInSameYear(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isThisYear(java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        java.util.TimeZone $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.util.Calendar;

        $r2 = virtualinvoke r0.<java.util.Calendar: java.util.TimeZone getTimeZone()>();

        r1 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone)>($r2);

        $i0 = virtualinvoke r0.<java.util.Calendar: int get(int)>(1);

        $i1 = virtualinvoke r1.<java.util.Calendar: int get(int)>(1);

        if $i0 != $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int dayDistance(java.util.Calendar, java.util.Calendar)
    {
        java.util.Calendar r0, r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.util.Calendar;

        r1 := @parameter1: java.util.Calendar;

        $i0 = staticinvoke <libcore.icu.DateIntervalFormat: int julianDay(java.util.Calendar)>(r1);

        $i1 = staticinvoke <libcore.icu.DateIntervalFormat: int julianDay(java.util.Calendar)>(r0);

        $i2 = $i0 - $i1;

        return $i2;
    }

    private static int julianDay(java.util.Calendar)
    {
        java.util.Calendar r0;
        long l0, $l1, $l3, $l4, $l6, $l7;
        int $i2, $i5, $i8, $i9;

        r0 := @parameter0: java.util.Calendar;

        $l1 = virtualinvoke r0.<java.util.Calendar: long getTimeInMillis()>();

        $i2 = virtualinvoke r0.<java.util.Calendar: int get(int)>(15);

        $l3 = (long) $i2;

        $l4 = $l1 + $l3;

        $i5 = virtualinvoke r0.<java.util.Calendar: int get(int)>(16);

        $l6 = (long) $i5;

        l0 = $l4 + $l6;

        $l7 = l0 / 86400000L;

        $i8 = (int) $l7;

        $i9 = $i8 + 2440588;

        return $i9;
    }

    private static native long createDateIntervalFormat(java.lang.String, java.lang.String, java.lang.String);

    private static native void destroyDateIntervalFormat(long);

    private static native java.lang.String formatDateInterval(long, long, long);

    static void access$000(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <libcore.icu.DateIntervalFormat: void destroyDateIntervalFormat(long)>(l0);

        return;
    }

    static void <clinit>()
    {
        libcore.icu.DateIntervalFormat$FormatterCache $r0;

        <libcore.icu.DateIntervalFormat: int EPOCH_JULIAN_DAY> = 2440588;

        <libcore.icu.DateIntervalFormat: int DAY_IN_MS> = 86400000;

        <libcore.icu.DateIntervalFormat: int FORMAT_ABBREV_ALL> = 524288;

        <libcore.icu.DateIntervalFormat: int FORMAT_NUMERIC_DATE> = 131072;

        <libcore.icu.DateIntervalFormat: int FORMAT_ABBREV_MONTH> = 65536;

        <libcore.icu.DateIntervalFormat: int FORMAT_ABBREV_WEEKDAY> = 32768;

        <libcore.icu.DateIntervalFormat: int FORMAT_ABBREV_TIME> = 16384;

        <libcore.icu.DateIntervalFormat: int FORMAT_UTC> = 8192;

        <libcore.icu.DateIntervalFormat: int FORMAT_24HOUR> = 128;

        <libcore.icu.DateIntervalFormat: int FORMAT_12HOUR> = 64;

        <libcore.icu.DateIntervalFormat: int FORMAT_NO_MONTH_DAY> = 32;

        <libcore.icu.DateIntervalFormat: int FORMAT_SHOW_DATE> = 16;

        <libcore.icu.DateIntervalFormat: int FORMAT_NO_YEAR> = 8;

        <libcore.icu.DateIntervalFormat: int FORMAT_SHOW_YEAR> = 4;

        <libcore.icu.DateIntervalFormat: int FORMAT_SHOW_WEEKDAY> = 2;

        <libcore.icu.DateIntervalFormat: int FORMAT_SHOW_TIME> = 1;

        $r0 = new libcore.icu.DateIntervalFormat$FormatterCache;

        specialinvoke $r0.<libcore.icu.DateIntervalFormat$FormatterCache: void <init>()>();

        <libcore.icu.DateIntervalFormat: libcore.icu.DateIntervalFormat$FormatterCache CACHED_FORMATTERS> = $r0;

        return;
    }
}
