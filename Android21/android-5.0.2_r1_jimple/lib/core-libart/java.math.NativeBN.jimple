final class java.math.NativeBN extends java.lang.Object
{

    void <init>()
    {
        java.math.NativeBN r0;

        r0 := @this: java.math.NativeBN;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native long BN_new();

    public static native void BN_free(long);

    public static native int BN_cmp(long, long);

    public static native void BN_copy(long, long);

    public static native void putLongInt(long, long);

    public static native void putULongInt(long, long, boolean);

    public static native int BN_dec2bn(long, java.lang.String);

    public static native int BN_hex2bn(long, java.lang.String);

    public static native void BN_bin2bn(byte[], int, boolean, long);

    public static native void litEndInts2bn(int[], int, boolean, long);

    public static native void twosComp2bn(byte[], int, long);

    public static native long longInt(long);

    public static native java.lang.String BN_bn2dec(long);

    public static native java.lang.String BN_bn2hex(long);

    public static native byte[] BN_bn2bin(long);

    public static native int[] bn2litEndInts(long);

    public static native int sign(long);

    public static native void BN_set_negative(long, int);

    public static native int bitLength(long);

    public static native boolean BN_is_bit_set(long, int);

    public static native void BN_shift(long, long, int);

    public static native void BN_add_word(long, int);

    public static native void BN_mul_word(long, int);

    public static native int BN_mod_word(long, int);

    public static native void BN_add(long, long, long);

    public static native void BN_sub(long, long, long);

    public static native void BN_gcd(long, long, long);

    public static native void BN_mul(long, long, long);

    public static native void BN_exp(long, long, long);

    public static native void BN_div(long, long, long, long);

    public static native void BN_nnmod(long, long, long);

    public static native void BN_mod_exp(long, long, long, long);

    public static native void BN_mod_inverse(long, long, long);

    public static native void BN_generate_prime_ex(long, int, boolean, long, long, long);

    public static native boolean BN_is_prime_ex(long, int, long);
}
