public abstract class java.util.concurrent.CountedCompleter extends java.util.concurrent.ForkJoinTask
{
    private static final long serialVersionUID;
    final java.util.concurrent.CountedCompleter completer;
    volatile int pending;
    private static final sun.misc.Unsafe U;
    private static final long PENDING;

    protected void <init>(java.util.concurrent.CountedCompleter, int)
    {
        java.util.concurrent.CountedCompleter r0, r1;
        int i0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        i0 := @parameter1: int;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer> = r1;

        r0.<java.util.concurrent.CountedCompleter: int pending> = i0;

        return;
    }

    protected void <init>(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.CountedCompleter r0, r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer> = r1;

        return;
    }

    protected void <init>()
    {
        java.util.concurrent.CountedCompleter r0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer> = null;

        return;
    }

    public abstract void compute();

    public void onCompletion(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.CountedCompleter r0, r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        return;
    }

    public boolean onExceptionalCompletion(java.lang.Throwable, java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.CountedCompleter r0, r2;
        java.lang.Throwable r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.util.concurrent.CountedCompleter;

        return 1;
    }

    public final java.util.concurrent.CountedCompleter getCompleter()
    {
        java.util.concurrent.CountedCompleter r0, $r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        $r1 = r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        return $r1;
    }

    public final int getPendingCount()
    {
        java.util.concurrent.CountedCompleter r0;
        int $i0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        $i0 = r0.<java.util.concurrent.CountedCompleter: int pending>;

        return $i0;
    }

    public final void setPendingCount(int)
    {
        java.util.concurrent.CountedCompleter r0;
        int i0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        i0 := @parameter0: int;

        r0.<java.util.concurrent.CountedCompleter: int pending> = i0;

        return;
    }

    public final void addToPendingCount(int)
    {
        java.util.concurrent.CountedCompleter r0;
        int i0, i1, $i2, $i3;
        long $l4;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        i0 := @parameter0: int;

     label1:
        $r1 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l4 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $i2 = r0.<java.util.concurrent.CountedCompleter: int pending>;

        i1 = $i2;

        $i3 = i1 + i0;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l4, $i2, $i3);

        if $z0 == 0 goto label1;

        return;
    }

    public final boolean compareAndSetPendingCount(int, int)
    {
        java.util.concurrent.CountedCompleter r0;
        int i0, i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l2 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, i1);

        return $z0;
    }

    public final int decrementPendingCountUnlessZero()
    {
        java.util.concurrent.CountedCompleter r0;
        int i0, $i1, $i2;
        long $l3;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

     label1:
        $i1 = r0.<java.util.concurrent.CountedCompleter: int pending>;

        i0 = $i1;

        if $i1 == 0 goto label2;

        $r1 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l3 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $i2 = i0 - 1;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l3, i0, $i2);

        if $z0 == 0 goto label1;

     label2:
        return i0;
    }

    public final java.util.concurrent.CountedCompleter getRoot()
    {
        java.util.concurrent.CountedCompleter r0, r1, r2, $r3;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 = r0;

     label1:
        $r3 = r1.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r2 = $r3;

        if $r3 == null goto label2;

        r1 = r2;

        goto label1;

     label2:
        return r1;
    }

    public final void tryComplete()
    {
        java.util.concurrent.CountedCompleter r0, r1, r2, $r4;
        int i0, $i1, $i2;
        long $l3;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 = r0;

        r2 = r1;

     label1:
        $i1 = r1.<java.util.concurrent.CountedCompleter: int pending>;

        i0 = $i1;

        if $i1 != 0 goto label2;

        virtualinvoke r1.<java.util.concurrent.CountedCompleter: void onCompletion(java.util.concurrent.CountedCompleter)>(r2);

        r2 = r1;

        $r4 = r1.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r1 = $r4;

        if $r4 != null goto label1;

        virtualinvoke r2.<java.util.concurrent.CountedCompleter: void quietlyComplete()>();

        return;

     label2:
        $r3 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l3 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $i2 = i0 - 1;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r1, $l3, i0, $i2);

        if $z0 == 0 goto label1;

        return;
    }

    public final void propagateCompletion()
    {
        java.util.concurrent.CountedCompleter r0, r1, $r4, r5;
        int i0, $i1, $i2;
        long $l3;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 = r0;

     label1:
        $i1 = r1.<java.util.concurrent.CountedCompleter: int pending>;

        i0 = $i1;

        if $i1 != 0 goto label2;

        r5 = r1;

        $r4 = r1.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r1 = $r4;

        if $r4 != null goto label1;

        virtualinvoke r5.<java.util.concurrent.CountedCompleter: void quietlyComplete()>();

        return;

     label2:
        $r3 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l3 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $i2 = i0 - 1;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r1, $l3, i0, $i2);

        if $z0 == 0 goto label1;

        return;
    }

    public void complete(java.lang.Object)
    {
        java.util.concurrent.CountedCompleter r0, r2, $r3;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.CountedCompleter: void setRawResult(java.lang.Object)>(r1);

        virtualinvoke r0.<java.util.concurrent.CountedCompleter: void onCompletion(java.util.concurrent.CountedCompleter)>(r0);

        virtualinvoke r0.<java.util.concurrent.CountedCompleter: void quietlyComplete()>();

        $r3 = r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r2 = $r3;

        if $r3 == null goto label1;

        virtualinvoke r2.<java.util.concurrent.CountedCompleter: void tryComplete()>();

     label1:
        return;
    }

    public final java.util.concurrent.CountedCompleter firstComplete()
    {
        java.util.concurrent.CountedCompleter r0;
        int i0, $i1, $i2;
        long $l3;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CountedCompleter;

     label1:
        $i1 = r0.<java.util.concurrent.CountedCompleter: int pending>;

        i0 = $i1;

        if $i1 != 0 goto label2;

        return r0;

     label2:
        $r1 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $l3 = <java.util.concurrent.CountedCompleter: long PENDING>;

        $i2 = i0 - 1;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l3, i0, $i2);

        if $z0 == 0 goto label1;

        return null;
    }

    public final java.util.concurrent.CountedCompleter nextComplete()
    {
        java.util.concurrent.CountedCompleter r0, r1, $r2, $r3;

        r0 := @this: java.util.concurrent.CountedCompleter;

        $r2 = r0.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r1 = $r2;

        if $r2 == null goto label1;

        $r3 = virtualinvoke r1.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter firstComplete()>();

        return $r3;

     label1:
        virtualinvoke r0.<java.util.concurrent.CountedCompleter: void quietlyComplete()>();

        return null;
    }

    public final void quietlyCompleteRoot()
    {
        java.util.concurrent.CountedCompleter r0, r1, r2, $r3;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 = r0;

     label1:
        $r3 = r1.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r2 = $r3;

        if $r3 != null goto label2;

        virtualinvoke r1.<java.util.concurrent.CountedCompleter: void quietlyComplete()>();

        return;

     label2:
        r1 = r2;

        goto label1;
    }

    void internalPropagateException(java.lang.Throwable)
    {
        java.util.concurrent.CountedCompleter r0, r2, r3, $r4;
        java.lang.Throwable r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.lang.Throwable;

        r2 = r0;

        r3 = r2;

     label1:
        $z0 = virtualinvoke r2.<java.util.concurrent.CountedCompleter: boolean onExceptionalCompletion(java.lang.Throwable,java.util.concurrent.CountedCompleter)>(r1, r3);

        if $z0 == 0 goto label2;

        r3 = r2;

        $r4 = r2.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r2 = $r4;

        if $r4 == null goto label2;

        $i0 = r2.<java.util.concurrent.CountedCompleter: int status>;

        if $i0 < 0 goto label2;

        $i1 = virtualinvoke r2.<java.util.concurrent.CountedCompleter: int recordExceptionalCompletion(java.lang.Throwable)>(r1);

        if $i1 != -2147483648 goto label2;

        goto label1;

     label2:
        return;
    }

    protected final boolean exec()
    {
        java.util.concurrent.CountedCompleter r0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        virtualinvoke r0.<java.util.concurrent.CountedCompleter: void compute()>();

        return 0;
    }

    public java.lang.Object getRawResult()
    {
        java.util.concurrent.CountedCompleter r0;

        r0 := @this: java.util.concurrent.CountedCompleter;

        return null;
    }

    protected void setRawResult(java.lang.Object)
    {
        java.util.concurrent.CountedCompleter r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.CountedCompleter;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    static void <clinit>()
    {
        java.lang.Exception r0, $r5;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Class $r2;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Error $r6;

        <java.util.concurrent.CountedCompleter: long serialVersionUID> = 5232453752276485070L;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U> = $r1;

        $r3 = <java.util.concurrent.CountedCompleter: sun.misc.Unsafe U>;

        $r2 = class "java/util/concurrent/CountedCompleter";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("pending");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.CountedCompleter: long PENDING> = $l0;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r0 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r0);

        throw $r6;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
