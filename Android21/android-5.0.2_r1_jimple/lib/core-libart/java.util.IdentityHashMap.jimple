public class java.util.IdentityHashMap extends java.util.AbstractMap implements java.util.Map, java.io.Serializable, java.lang.Cloneable
{
    private static final long serialVersionUID;
    transient java.lang.Object[] elementData;
    int size;
    transient int threshold;
    private static final int DEFAULT_MAX_SIZE;
    private static final int loadFactor;
    transient int modCount;
    private static final java.lang.Object NULL_OBJECT;

    public void <init>()
    {
        java.util.IdentityHashMap r0;

        r0 := @this: java.util.IdentityHashMap;

        specialinvoke r0.<java.util.IdentityHashMap: void <init>(int)>(21);

        return;
    }

    public void <init>(int)
    {
        java.util.IdentityHashMap r0;
        int i0, $i1, $i2;
        java.lang.Object[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: java.util.IdentityHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        r0.<java.util.IdentityHashMap: int modCount> = 0;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxSize < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        r0.<java.util.IdentityHashMap: int size> = 0;

        $i1 = specialinvoke r0.<java.util.IdentityHashMap: int getThreshold(int)>(i0);

        r0.<java.util.IdentityHashMap: int threshold> = $i1;

        $i2 = specialinvoke r0.<java.util.IdentityHashMap: int computeElementArraySize()>();

        $r1 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object[] newElementArray(int)>($i2);

        r0.<java.util.IdentityHashMap: java.lang.Object[] elementData> = $r1;

        return;
    }

    private int getThreshold(int)
    {
        java.util.IdentityHashMap r0;
        int i0, $i1;

        r0 := @this: java.util.IdentityHashMap;

        i0 := @parameter0: int;

        if i0 <= 3 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = 3;

     label2:
        return $i1;
    }

    private int computeElementArraySize()
    {
        java.util.IdentityHashMap r0;
        int i0, $i1, $i5, $i6;
        long $l2, $l3, $l4;

        r0 := @this: java.util.IdentityHashMap;

        $i1 = r0.<java.util.IdentityHashMap: int threshold>;

        $l2 = (long) $i1;

        $l3 = $l2 * 10000L;

        $l4 = $l3 / 7500L;

        $i5 = (int) $l4;

        i0 = $i5 * 2;

        if i0 >= 0 goto label1;

        $i6 = neg i0;

        goto label2;

     label1:
        $i6 = i0;

     label2:
        return $i6;
    }

    private java.lang.Object[] newElementArray(int)
    {
        java.util.IdentityHashMap r0;
        int i0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.IdentityHashMap;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[i0];

        return $r1;
    }

    public void <init>(java.util.Map)
    {
        java.util.IdentityHashMap r0;
        java.util.Map r1;
        int $i0, $i1, $i2;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i0 >= 6 goto label1;

        $i2 = 11;

        goto label2;

     label1:
        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i2 = $i1 * 2;

     label2:
        specialinvoke r0.<java.util.IdentityHashMap: void <init>(int)>($i2);

        specialinvoke r0.<java.util.IdentityHashMap: void putAllImpl(java.util.Map)>(r1);

        return;
    }

    private java.lang.Object massageValue(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r2, $r3;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

        if r1 != $r2 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        return $r3;
    }

    public void clear()
    {
        java.util.IdentityHashMap r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r1, $r2;

        r0 := @this: java.util.IdentityHashMap;

        r0.<java.util.IdentityHashMap: int size> = 0;

        i0 = 0;

     label1:
        $r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r2[i0] = null;

        i0 = i0 + 1;

        goto label1;

     label2:
        $i2 = r0.<java.util.IdentityHashMap: int modCount>;

        $i3 = $i2 + 1;

        r0.<java.util.IdentityHashMap: int modCount> = $i3;

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.Object[] $r2, $r3;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label1:
        $r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i0 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r1, $r2);

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r4 = $r3[i0];

        if $r4 != r1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r4;
        int i0, $i1;
        java.lang.Object[] $r2, $r3;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label1:
        i0 = 1;

     label2:
        $r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = lengthof $r2;

        if i0 >= $i1 goto label4;

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r4 = $r3[i0];

        if $r4 != r1 goto label3;

        return 1;

     label3:
        i0 = i0 + 2;

        goto label2;

     label4:
        return 0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, $r5, $r7;
        int i0, $i1;
        java.lang.Object[] $r3, $r4, $r6;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label1:
        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i0 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r1, $r3);

        $r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r5 = $r4[i0];

        if $r5 != r1 goto label2;

        $r6 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = i0 + 1;

        r2 = $r6[$i1];

        $r7 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object massageValue(java.lang.Object)>(r2);

        return $r7;

     label2:
        return null;
    }

    private java.util.IdentityHashMap$IdentityHashMapEntry getEntry(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r4;
        int i0;
        java.lang.Object[] $r2, $r3;
        java.util.IdentityHashMap$IdentityHashMapEntry $r5;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        r1 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label1:
        $r2 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i0 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r1, $r2);

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r4 = $r3[i0];

        if $r4 != r1 goto label2;

        $r5 = specialinvoke r0.<java.util.IdentityHashMap: java.util.IdentityHashMap$IdentityHashMapEntry getEntry(int)>(i0);

        return $r5;

     label2:
        return null;
    }

    private java.util.IdentityHashMap$IdentityHashMapEntry getEntry(int)
    {
        java.util.IdentityHashMap r0;
        int i0, $i1;
        java.lang.Object r1, r2, $r5, $r6;
        java.lang.Object[] $r3, $r4;
        java.util.IdentityHashMap$IdentityHashMapEntry $r7;

        r0 := @this: java.util.IdentityHashMap;

        i0 := @parameter0: int;

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        r1 = $r3[i0];

        $r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = i0 + 1;

        r2 = $r4[$i1];

        $r5 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

        if r1 != $r5 goto label1;

        r1 = null;

     label1:
        $r6 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

        if r2 != $r6 goto label2;

        r2 = null;

     label2:
        $r7 = new java.util.IdentityHashMap$IdentityHashMapEntry;

        specialinvoke $r7.<java.util.IdentityHashMap$IdentityHashMapEntry: void <init>(java.util.IdentityHashMap,java.lang.Object,java.lang.Object)>(r0, r1, r2);

        return $r7;
    }

    private int findIndex(java.lang.Object, java.lang.Object[])
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, i1, i2, $i3, $i4, $i5;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        i0 = lengthof r2;

        i1 = specialinvoke r0.<java.util.IdentityHashMap: int getModuloHash(java.lang.Object,int)>(r1, i0);

        $i3 = i1 + i0;

        $i4 = $i3 - 2;

        i2 = $i4 % i0;

     label1:
        if i1 == i2 goto label3;

        $r3 = r2[i1];

        if $r3 == r1 goto label3;

        $r4 = r2[i1];

        if $r4 != null goto label2;

        goto label3;

     label2:
        $i5 = i1 + 2;

        i1 = $i5 % i0;

        goto label1;

     label3:
        return i1;
    }

    private int getModuloHash(java.lang.Object, int)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = staticinvoke <java.util.Collections: int secondaryIdentityHash(java.lang.Object)>(r1);

        $i3 = $i1 & 2147483647;

        $i2 = i0 / 2;

        $i4 = $i3 % $i2;

        $i5 = $i4 * 2;

        return $i5;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, r4, r5, $r8, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object[] $r6, $r7, $r9, $r10, $r12, $r13, $r14;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 = r1;

        r4 = r2;

        if r3 != null goto label1;

        r3 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label1:
        if r4 != null goto label2;

        r4 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label2:
        $r6 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i0 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r3, $r6);

        $r7 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r8 = $r7[i0];

        if $r8 == r3 goto label4;

        $i4 = r0.<java.util.IdentityHashMap: int modCount>;

        $i3 = $i4 + 1;

        r0.<java.util.IdentityHashMap: int modCount> = $i3;

        $i6 = r0.<java.util.IdentityHashMap: int size>;

        $i5 = $i6 + 1;

        r0.<java.util.IdentityHashMap: int size> = $i5;

        $i7 = r0.<java.util.IdentityHashMap: int threshold>;

        if $i5 <= $i7 goto label3;

        specialinvoke r0.<java.util.IdentityHashMap: void rehash()>();

        $r14 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i0 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r3, $r14);

     label3:
        $r12 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r12[i0] = r3;

        $r13 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i8 = i0 + 1;

        $r13[$i8] = null;

     label4:
        $r9 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = i0 + 1;

        r5 = $r9[$i1];

        $r10 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i2 = i0 + 1;

        $r10[$i2] = r4;

        $r11 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object massageValue(java.lang.Object)>(r5);

        return $r11;
    }

    public void putAll(java.util.Map)
    {
        java.util.IdentityHashMap r0;
        java.util.Map r1;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.IdentityHashMap: void putAllImpl(java.util.Map)>(r1);

        return;
    }

    private void rehash()
    {
        java.util.IdentityHashMap r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] r1, $r3, $r4, $r5, $r6;
        java.lang.Object r2, $r7;

        r0 := @this: java.util.IdentityHashMap;

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i3 = lengthof $r3;

        i0 = $i3 * 2;

        if i0 != 0 goto label1;

        i0 = 1;

     label1:
        r1 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object[] newElementArray(int)>(i0);

        i1 = 0;

     label2:
        $r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i4 = lengthof $r4;

        if i1 >= $i4 goto label4;

        $r5 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        r2 = $r5[i1];

        if r2 == null goto label3;

        i2 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r2, r1);

        r1[i2] = r2;

        $i6 = i2 + 1;

        $r6 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i5 = i1 + 1;

        $r7 = $r6[$i5];

        r1[$i6] = $r7;

     label3:
        i1 = i1 + 2;

        goto label2;

     label4:
        r0.<java.util.IdentityHashMap: java.lang.Object[] elementData> = r1;

        specialinvoke r0.<java.util.IdentityHashMap: void computeMaxSize()>();

        return;
    }

    private void computeMaxSize()
    {
        java.util.IdentityHashMap r0;
        java.lang.Object[] $r1;
        int $i0, $i1, $i5;
        long $l2, $l3, $l4;

        r0 := @this: java.util.IdentityHashMap;

        $r1 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i0 = lengthof $r1;

        $i1 = $i0 / 2;

        $l2 = (long) $i1;

        $l3 = $l2 * 7500L;

        $l4 = $l3 / 10000L;

        $i5 = (int) $l4;

        r0.<java.util.IdentityHashMap: int threshold> = $i5;

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1, r2, r3, $r6, $r12, $r15;
        boolean z0, $z1, $z2, $z3, z4;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object[] $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r13, $r14, $r16;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label01;

        r1 = <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT>;

     label01:
        $r4 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i4 = specialinvoke r0.<java.util.IdentityHashMap: int findIndex(java.lang.Object,java.lang.Object[])>(r1, $r4);

        i1 = $i4;

        i0 = $i4;

        $r5 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r6 = $r5[i0];

        if $r6 == r1 goto label02;

        return null;

     label02:
        $r7 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i5 = i0 + 1;

        r2 = $r7[$i5];

        $r8 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        i3 = lengthof $r8;

     label03:
        $i6 = i1 + 2;

        i1 = $i6 % i3;

        $r9 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        r3 = $r9[i1];

        if r3 != null goto label04;

        goto label14;

     label04:
        i2 = specialinvoke r0.<java.util.IdentityHashMap: int getModuloHash(java.lang.Object,int)>(r3, i3);

        if i2 <= i0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        z0 = $z2;

        if i1 >= i0 goto label10;

        if z0 != 0 goto label07;

        if i2 > i1 goto label08;

     label07:
        $z3 = 1;

        goto label09;

     label08:
        $z3 = 0;

     label09:
        z4 = $z3;

        goto label13;

     label10:
        if z0 == 0 goto label11;

        if i2 > i1 goto label11;

        $z1 = 1;

        goto label12;

     label11:
        $z1 = 0;

     label12:
        z4 = $z1;

     label13:
        if z4 != 0 goto label03;

        $r10 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r10[i0] = r3;

        $r13 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i8 = i0 + 1;

        $r11 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i7 = i1 + 1;

        $r12 = $r11[$i7];

        $r13[$i8] = $r12;

        i0 = i1;

        goto label03;

     label14:
        $i10 = r0.<java.util.IdentityHashMap: int size>;

        $i9 = $i10 - 1;

        r0.<java.util.IdentityHashMap: int size> = $i9;

        $i12 = r0.<java.util.IdentityHashMap: int modCount>;

        $i11 = $i12 + 1;

        r0.<java.util.IdentityHashMap: int modCount> = $i11;

        $r16 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r16[i0] = null;

        $r14 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i13 = i0 + 1;

        $r14[$i13] = null;

        $r15 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object massageValue(java.lang.Object)>(r2);

        return $r15;
    }

    public java.util.Set entrySet()
    {
        java.util.IdentityHashMap r0;
        java.util.IdentityHashMap$IdentityHashMapEntrySet $r1;

        r0 := @this: java.util.IdentityHashMap;

        $r1 = new java.util.IdentityHashMap$IdentityHashMapEntrySet;

        specialinvoke $r1.<java.util.IdentityHashMap$IdentityHashMapEntrySet: void <init>(java.util.IdentityHashMap)>(r0);

        return $r1;
    }

    public java.util.Set keySet()
    {
        java.util.IdentityHashMap r0;
        java.util.Set $r1, $r2;
        java.util.IdentityHashMap$1 $r3;

        r0 := @this: java.util.IdentityHashMap;

        $r1 = r0.<java.util.IdentityHashMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new java.util.IdentityHashMap$1;

        specialinvoke $r3.<java.util.IdentityHashMap$1: void <init>(java.util.IdentityHashMap)>(r0);

        r0.<java.util.IdentityHashMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<java.util.IdentityHashMap: java.util.Set keySet>;

        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.IdentityHashMap r0;
        java.util.Collection $r1, $r2;
        java.util.IdentityHashMap$2 $r3;

        r0 := @this: java.util.IdentityHashMap;

        $r1 = r0.<java.util.IdentityHashMap: java.util.Collection valuesCollection>;

        if $r1 != null goto label1;

        $r3 = new java.util.IdentityHashMap$2;

        specialinvoke $r3.<java.util.IdentityHashMap$2: void <init>(java.util.IdentityHashMap)>(r0);

        r0.<java.util.IdentityHashMap: java.util.Collection valuesCollection> = $r3;

     label1:
        $r2 = r0.<java.util.IdentityHashMap: java.util.Collection valuesCollection>;

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1;
        java.util.Map r2;
        java.util.Set r3, $r4;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Map;

        if $z0 == 0 goto label3;

        r2 = (java.util.Map) r1;

        $i0 = virtualinvoke r0.<java.util.IdentityHashMap: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        r3 = virtualinvoke r0.<java.util.IdentityHashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>();

        $z1 = interfaceinvoke r3.<java.util.Set: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label3:
        return 0;
    }

    public java.lang.Object clone()
    {
        java.util.IdentityHashMap r0, r1;
        java.lang.Object $r2;
        java.lang.Object[] $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.CloneNotSupportedException $r8, r10;
        java.lang.AssertionError $r9;

        r0 := @this: java.util.IdentityHashMap;

     label1:
        $r2 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r1 = (java.util.IdentityHashMap) $r2;

        $r3 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i0 = lengthof $r3;

        $r4 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object[] newElementArray(int)>($i0);

        r1.<java.util.IdentityHashMap: java.lang.Object[] elementData> = $r4;

        $r7 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r6 = r1.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $r5 = r0.<java.util.IdentityHashMap: java.lang.Object[] elementData>;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i1);

     label2:
        return r1;

     label3:
        $r8 := @caughtexception;

        r10 = $r8;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>(r10);

        throw $r9;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean isEmpty()
    {
        java.util.IdentityHashMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.IdentityHashMap;

        $i0 = r0.<java.util.IdentityHashMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        java.util.IdentityHashMap r0;
        int $i0;

        r0 := @this: java.util.IdentityHashMap;

        $i0 = r0.<java.util.IdentityHashMap: int size>;

        return $i0;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.IdentityHashMap r0;
        java.io.ObjectOutputStream r1;
        java.util.Iterator r2;
        java.util.MapEntry r3;
        int $i0;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i0 = r0.<java.util.IdentityHashMap: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $r4 = virtualinvoke r0.<java.util.IdentityHashMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.MapEntry) $r5;

        $r6 = r3.<java.util.MapEntry: java.lang.Object key>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r6);

        $r7 = r3.<java.util.MapEntry: java.lang.Object value>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.IdentityHashMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, $i2, $i3;
        java.lang.Object r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $i2 = specialinvoke r0.<java.util.IdentityHashMap: int getThreshold(int)>(21);

        r0.<java.util.IdentityHashMap: int threshold> = $i2;

        $i3 = specialinvoke r0.<java.util.IdentityHashMap: int computeElementArraySize()>();

        $r3 = specialinvoke r0.<java.util.IdentityHashMap: java.lang.Object[] newElementArray(int)>($i3);

        r0.<java.util.IdentityHashMap: java.lang.Object[] elementData> = $r3;

        i1 = i0;

     label1:
        i1 = i1 + -1;

        if i1 < 0 goto label2;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r4 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r0.<java.util.IdentityHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4);

        goto label1;

     label2:
        r0.<java.util.IdentityHashMap: int size> = i0;

        return;
    }

    private void putAllImpl(java.util.Map)
    {
        java.util.IdentityHashMap r0;
        java.util.Map r1;
        java.util.Set $r2;

        r0 := @this: java.util.IdentityHashMap;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        if $r2 == null goto label1;

        specialinvoke r0.<java.util.AbstractMap: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }

    static java.util.IdentityHashMap$IdentityHashMapEntry access$000(java.util.IdentityHashMap, int)
    {
        java.util.IdentityHashMap r0;
        int i0;
        java.util.IdentityHashMap$IdentityHashMapEntry $r1;

        r0 := @parameter0: java.util.IdentityHashMap;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<java.util.IdentityHashMap: java.util.IdentityHashMap$IdentityHashMapEntry getEntry(int)>(i0);

        return $r1;
    }

    static java.util.IdentityHashMap$IdentityHashMapEntry access$100(java.util.IdentityHashMap, java.lang.Object)
    {
        java.util.IdentityHashMap r0;
        java.lang.Object r1;
        java.util.IdentityHashMap$IdentityHashMapEntry $r2;

        r0 := @parameter0: java.util.IdentityHashMap;

        r1 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<java.util.IdentityHashMap: java.util.IdentityHashMap$IdentityHashMapEntry getEntry(java.lang.Object)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <java.util.IdentityHashMap: int loadFactor> = 7500;

        <java.util.IdentityHashMap: int DEFAULT_MAX_SIZE> = 21;

        <java.util.IdentityHashMap: long serialVersionUID> = 8188218128353913216L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <java.util.IdentityHashMap: java.lang.Object NULL_OBJECT> = $r0;

        return;
    }
}
