class java.util.EnumMap$EnumMapEntrySet extends java.util.AbstractSet
{
    private final java.util.EnumMap enumMap;

    void <init>(java.util.EnumMap)
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.util.EnumMap r1;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        r1 := @parameter0: java.util.EnumMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap> = r1;

        return;
    }

    public void clear()
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.util.EnumMap $r1;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        $r1 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        virtualinvoke $r1.<java.util.EnumMap: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.lang.Object r1, r2, r3, r4;
        boolean z0, $z1, $z2, $z3;
        java.util.Map$Entry $r5, $r6;
        java.util.EnumMap $r7, $r8;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        r1 := @parameter0: java.lang.Object;

        z0 = 0;

        $z1 = r1 instanceof java.util.Map$Entry;

        if $z1 == 0 goto label4;

        $r5 = (java.util.Map$Entry) r1;

        r2 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.util.Map$Entry) r1;

        r3 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        $z2 = virtualinvoke $r7.<java.util.EnumMap: boolean containsKey(java.lang.Object)>(r2);

        if $z2 == 0 goto label4;

        $r8 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        r4 = virtualinvoke $r8.<java.util.EnumMap: java.lang.Object get(java.lang.Object)>(r2);

        if r4 != null goto label3;

        if r3 != null goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z0 = $z3;

        goto label4;

     label3:
        z0 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

     label4:
        return z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.util.EnumMap$EnumMapEntryIterator $r1;
        java.util.EnumMap$EnumMapEntrySet$1 $r2;
        java.util.EnumMap $r3;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        $r1 = new java.util.EnumMap$EnumMapEntryIterator;

        $r2 = new java.util.EnumMap$EnumMapEntrySet$1;

        specialinvoke $r2.<java.util.EnumMap$EnumMapEntrySet$1: void <init>(java.util.EnumMap$EnumMapEntrySet)>(r0);

        $r3 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        specialinvoke $r1.<java.util.EnumMap$EnumMapEntryIterator: void <init>(java.util.MapEntry$Type,java.util.EnumMap)>($r2, $r3);

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.lang.Object r1, $r4;
        boolean $z0;
        java.util.Map$Entry $r2;
        java.util.EnumMap $r3;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.EnumMap$EnumMapEntrySet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        $r2 = (java.util.Map$Entry) r1;

        $r4 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r3.<java.util.EnumMap: java.lang.Object remove(java.lang.Object)>($r4);

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.util.EnumMap $r1;
        int $i0;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        $r1 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        $i0 = virtualinvoke $r1.<java.util.EnumMap: int size()>();

        return $i0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.lang.Object[] r1, $r3;
        java.util.EnumMap $r2;
        int $i0;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        $r2 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        $i0 = virtualinvoke $r2.<java.util.EnumMap: int size()>();

        r1 = newarray (java.lang.Object)[$i0];

        $r3 = virtualinvoke r0.<java.util.EnumMap$EnumMapEntrySet: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.EnumMap$EnumMapEntrySet r0;
        java.lang.Object[] r1, r2, $r11;
        int i0, i1, $i2, $i3;
        java.lang.Class r3, $r10;
        java.util.Map$Entry r4;
        java.util.EnumMap $r5;
        java.lang.Object $r6, $r8, $r9, $r12;
        java.util.MapEntry $r7;
        java.util.Iterator r13;

        r0 := @this: java.util.EnumMap$EnumMapEntrySet;

        r1 := @parameter0: java.lang.Object[];

        $r5 = r0.<java.util.EnumMap$EnumMapEntrySet: java.util.EnumMap enumMap>;

        i0 = virtualinvoke $r5.<java.util.EnumMap: int size()>();

        i1 = 0;

        r2 = r1;

        $i2 = lengthof r1;

        if i0 <= $i2 goto label1;

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r10.<java.lang.Class: java.lang.Class getComponentType()>();

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, i0);

        $r11 = (java.lang.Object[]) $r12;

        r2 = (java.lang.Object[]) $r11;

     label1:
        r13 = virtualinvoke r0.<java.util.EnumMap$EnumMapEntrySet: java.util.Iterator iterator()>();

     label2:
        if i1 >= i0 goto label3;

        $r6 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r6;

        $r7 = new java.util.MapEntry;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke $r7.<java.util.MapEntry: void <init>(java.lang.Object,java.lang.Object)>($r8, $r9);

        r2[i1] = $r7;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label4;

        r2[i1] = null;

     label4:
        return r2;
    }
}
