public final enum class dalvik.annotation.TestLevel extends java.lang.Enum
{
    public static final enum dalvik.annotation.TestLevel COMPLETE;
    public static final enum dalvik.annotation.TestLevel PARTIAL_COMPLETE;
    public static final enum dalvik.annotation.TestLevel PARTIAL_OK;
    public static final enum dalvik.annotation.TestLevel PARTIAL;
    public static final enum dalvik.annotation.TestLevel SUFFICIENT;
    public static final enum dalvik.annotation.TestLevel ADDITIONAL;
    public static final enum dalvik.annotation.TestLevel NOT_NECESSARY;
    public static final enum dalvik.annotation.TestLevel NOT_FEASIBLE;
    public static final enum dalvik.annotation.TestLevel TODO;
    private static final dalvik.annotation.TestLevel[] $VALUES;

    public static dalvik.annotation.TestLevel[] values()
    {
        dalvik.annotation.TestLevel[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (dalvik.annotation.TestLevel[]) $r1;

        return $r2;
    }

    public static dalvik.annotation.TestLevel valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        dalvik.annotation.TestLevel $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "dalvik/annotation/TestLevel", r0);

        $r2 = (dalvik.annotation.TestLevel) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        dalvik.annotation.TestLevel r0;
        java.lang.String r1;
        int i0;

        r0 := @this: dalvik.annotation.TestLevel;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        dalvik.annotation.TestLevel $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        dalvik.annotation.TestLevel[] $r9;

        $r0 = new dalvik.annotation.TestLevel;

        specialinvoke $r0.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("COMPLETE", 0);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel COMPLETE> = $r0;

        $r1 = new dalvik.annotation.TestLevel;

        specialinvoke $r1.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("PARTIAL_COMPLETE", 1);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL_COMPLETE> = $r1;

        $r2 = new dalvik.annotation.TestLevel;

        specialinvoke $r2.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("PARTIAL_OK", 2);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL_OK> = $r2;

        $r3 = new dalvik.annotation.TestLevel;

        specialinvoke $r3.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("PARTIAL", 3);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL> = $r3;

        $r4 = new dalvik.annotation.TestLevel;

        specialinvoke $r4.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("SUFFICIENT", 4);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel SUFFICIENT> = $r4;

        $r5 = new dalvik.annotation.TestLevel;

        specialinvoke $r5.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("ADDITIONAL", 5);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel ADDITIONAL> = $r5;

        $r6 = new dalvik.annotation.TestLevel;

        specialinvoke $r6.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("NOT_NECESSARY", 6);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel NOT_NECESSARY> = $r6;

        $r7 = new dalvik.annotation.TestLevel;

        specialinvoke $r7.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("NOT_FEASIBLE", 7);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel NOT_FEASIBLE> = $r7;

        $r8 = new dalvik.annotation.TestLevel;

        specialinvoke $r8.<dalvik.annotation.TestLevel: void <init>(java.lang.String,int)>("TODO", 8);

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel TODO> = $r8;

        $r9 = newarray (dalvik.annotation.TestLevel)[9];

        $r10 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel COMPLETE>;

        $r9[0] = $r10;

        $r11 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL_COMPLETE>;

        $r9[1] = $r11;

        $r12 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL_OK>;

        $r9[2] = $r12;

        $r13 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel PARTIAL>;

        $r9[3] = $r13;

        $r14 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel SUFFICIENT>;

        $r9[4] = $r14;

        $r15 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel ADDITIONAL>;

        $r9[5] = $r15;

        $r17 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel NOT_NECESSARY>;

        $r9[6] = $r17;

        $r16 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel NOT_FEASIBLE>;

        $r9[7] = $r16;

        $r18 = <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel TODO>;

        $r9[8] = $r18;

        <dalvik.annotation.TestLevel: dalvik.annotation.TestLevel[] $VALUES> = $r9;

        return;
    }
}
