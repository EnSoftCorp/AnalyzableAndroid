public class java.net.PlainSocketImpl extends java.net.SocketImpl
{
    private static java.net.InetAddress lastConnectedAddress;
    private static int lastConnectedPort;
    private boolean streaming;
    private boolean shutdownInput;
    private java.net.Proxy proxy;
    private final dalvik.system.CloseGuard guard;

    public void <init>(java.io.FileDescriptor)
    {
        java.net.PlainSocketImpl r0;
        java.io.FileDescriptor r1;
        dalvik.system.CloseGuard $r2, $r3;
        boolean $z0;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.net.SocketImpl: void <init>()>();

        r0.<java.net.PlainSocketImpl: boolean streaming> = 1;

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard> = $r2;

        r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd> = r1;

        $z0 = virtualinvoke r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label1:
        return;
    }

    public void <init>(java.net.Proxy)
    {
        java.net.PlainSocketImpl r0;
        java.net.Proxy r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.Proxy;

        $r2 = new java.io.FileDescriptor;

        specialinvoke $r2.<java.io.FileDescriptor: void <init>()>();

        specialinvoke r0.<java.net.PlainSocketImpl: void <init>(java.io.FileDescriptor)>($r2);

        r0.<java.net.PlainSocketImpl: java.net.Proxy proxy> = r1;

        return;
    }

    public void <init>()
    {
        java.net.PlainSocketImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.PlainSocketImpl;

        $r1 = new java.io.FileDescriptor;

        specialinvoke $r1.<java.io.FileDescriptor: void <init>()>();

        specialinvoke r0.<java.net.PlainSocketImpl: void <init>(java.io.FileDescriptor)>($r1);

        return;
    }

    public void <init>(java.io.FileDescriptor, int, java.net.InetAddress, int)
    {
        java.net.PlainSocketImpl r0;
        java.io.FileDescriptor r1;
        int i0, i1;
        java.net.InetAddress r2;
        dalvik.system.CloseGuard $r3, $r4;
        boolean $z0;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.SocketImpl: void <init>()>();

        r0.<java.net.PlainSocketImpl: boolean streaming> = 1;

        $r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard> = $r3;

        r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd> = r1;

        r0.<java.net.PlainSocketImpl: int localport> = i0;

        r0.<java.net.PlainSocketImpl: java.net.InetAddress address> = r2;

        r0.<java.net.PlainSocketImpl: int port> = i1;

        $z0 = virtualinvoke r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label1:
        return;
    }

    protected void accept(java.net.SocketImpl) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0, $r11, $r13;
        java.net.SocketImpl r1;
        java.net.InetSocketAddress r2, $r4;
        java.io.FileDescriptor r3, $r5, $r7, $r10;
        boolean $z0;
        libcore.io.Os $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.net.InetAddress $r8;
        java.lang.Integer $r9;
        android.system.ErrnoException $r12, r16;
        java.net.SocketTimeoutException $r14;
        java.net.SocketException $r15;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.SocketImpl;

        $z0 = specialinvoke r0.<java.net.PlainSocketImpl: boolean usingSocks()>();

        if $z0 == 0 goto label1;

        $r11 = (java.net.PlainSocketImpl) r1;

        specialinvoke $r11.<java.net.PlainSocketImpl: void socksBind()>();

        $r13 = (java.net.PlainSocketImpl) r1;

        virtualinvoke $r13.<java.net.PlainSocketImpl: void socksAccept()>();

        return;

     label1:
        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>()>();

        r2 = $r4;

        $r6 = <libcore.io.Libcore: libcore.io.Os os>;

        $r5 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        r3 = interfaceinvoke $r6.<libcore.io.Os: java.io.FileDescriptor accept(java.io.FileDescriptor,java.net.InetSocketAddress)>($r5, r2);

        $r7 = r1.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        $i0 = virtualinvoke r3.<java.io.FileDescriptor: int getInt$()>();

        virtualinvoke $r7.<java.io.FileDescriptor: void setInt$(int)>($i0);

        $r8 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r1.<java.net.SocketImpl: java.net.InetAddress address> = $r8;

        $i1 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        r1.<java.net.SocketImpl: int port> = $i1;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        r16 = $r12;

        $i3 = r16.<android.system.ErrnoException: int errno>;

        $i4 = <android.system.OsConstants: int EAGAIN>;

        if $i3 != $i4 goto label4;

        $r14 = new java.net.SocketTimeoutException;

        specialinvoke $r14.<java.net.SocketTimeoutException: void <init>(java.lang.Throwable)>(r16);

        throw $r14;

     label4:
        $r15 = virtualinvoke r16.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r15;

     label5:
        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke r1.<java.net.SocketImpl: void setOption(int,java.lang.Object)>(4102, $r9);

        $r10 = r1.<java.net.SocketImpl: java.io.FileDescriptor fd>;

        $i2 = staticinvoke <libcore.io.IoBridge: int getSocketLocalPort(java.io.FileDescriptor)>($r10);

        r1.<java.net.SocketImpl: int localport> = $i2;

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private boolean usingSocks()
    {
        java.net.PlainSocketImpl r0;
        java.net.Proxy $r1, $r2;
        java.net.Proxy$Type $r3, $r4;
        boolean $z0;

        r0 := @this: java.net.PlainSocketImpl;

        $r1 = r0.<java.net.PlainSocketImpl: java.net.Proxy proxy>;

        if $r1 == null goto label1;

        $r2 = r0.<java.net.PlainSocketImpl: java.net.Proxy proxy>;

        $r3 = virtualinvoke $r2.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r4 = <java.net.Proxy$Type: java.net.Proxy$Type SOCKS>;

        if $r3 != $r4 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.io.FileDescriptor $r1;
        boolean $z0;
        java.net.SocketException $r2;

        r0 := @this: java.net.PlainSocketImpl;

        $r1 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $z0 = virtualinvoke $r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 != 0 goto label1;

        $r2 = new java.net.SocketException;

        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r2;

     label1:
        return;
    }

    protected synchronized int available() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        boolean $z0;
        java.io.FileDescriptor $r1;
        int $i0;

        r0 := @this: java.net.PlainSocketImpl;

        specialinvoke r0.<java.net.PlainSocketImpl: void checkNotClosed()>();

        $z0 = r0.<java.net.PlainSocketImpl: boolean shutdownInput>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $i0 = staticinvoke <libcore.io.IoBridge: int available(java.io.FileDescriptor)>($r1);

        return $i0;
    }

    protected void bind(java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1;
        int i0, $i1;
        java.io.FileDescriptor $r2, $r3;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>($r2, r1, i0);

        if i0 == 0 goto label1;

        r0.<java.net.PlainSocketImpl: int localport> = i0;

        goto label2;

     label1:
        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $i1 = staticinvoke <libcore.io.IoBridge: int getSocketLocalPort(java.io.FileDescriptor)>($r3);

        r0.<java.net.PlainSocketImpl: int localport> = $i1;

     label2:
        return;
    }

    public void onBind(java.net.InetAddress, int)
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.PlainSocketImpl: int localport> = i0;

        return;
    }

    protected synchronized void close() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        dalvik.system.CloseGuard $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.PlainSocketImpl;

        $r1 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r2);

        return;
    }

    public void onClose()
    {
        java.net.PlainSocketImpl r0;
        dalvik.system.CloseGuard $r1;

        r0 := @this: java.net.PlainSocketImpl;

        $r1 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    protected void connect(java.lang.String, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.lang.String r1;
        int i0;
        java.net.InetAddress $r2;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        virtualinvoke r0.<java.net.PlainSocketImpl: void connect(java.net.InetAddress,int)>($r2, i0);

        return;
    }

    protected void connect(java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.PlainSocketImpl: void connect(java.net.InetAddress,int,int)>(r1, i0, 0);

        return;
    }

    private void connect(java.net.InetAddress, int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1, r2, $r4;
        int i0, i1;
        boolean $z0, $z1, $z2;
        java.io.FileDescriptor $r3;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = virtualinvoke r1.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z0 == 0 goto label1;

        $r4 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        goto label2;

     label1:
        $r4 = r1;

     label2:
        r2 = $r4;

        $z1 = r0.<java.net.PlainSocketImpl: boolean streaming>;

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r0.<java.net.PlainSocketImpl: boolean usingSocks()>();

        if $z2 == 0 goto label3;

        specialinvoke r0.<java.net.PlainSocketImpl: void socksConnect(java.net.InetAddress,int,int)>(r1, i0, 0);

        goto label4;

     label3:
        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int,int)>($r3, r2, i0, i1);

     label4:
        r0.<java.net.PlainSocketImpl: java.net.InetAddress address> = r2;

        r0.<java.net.PlainSocketImpl: int port> = i0;

        return;
    }

    public void onConnect(java.net.InetAddress, int)
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.PlainSocketImpl: java.net.InetAddress address> = r1;

        r0.<java.net.PlainSocketImpl: int port> = i0;

        return;
    }

    protected void create(boolean) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.PlainSocketImpl;

        z0 := @parameter0: boolean;

        r0.<java.net.PlainSocketImpl: boolean streaming> = z0;

        $r1 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(z0);

        r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd> = $r1;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.net.PlainSocketImpl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: java.net.PlainSocketImpl;

     label1:
        $r2 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<java.net.PlainSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<java.net.PlainSocketImpl: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected synchronized java.io.InputStream getInputStream() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.PlainSocketImpl$PlainSocketInputStream $r1;

        r0 := @this: java.net.PlainSocketImpl;

        specialinvoke r0.<java.net.PlainSocketImpl: void checkNotClosed()>();

        $r1 = new java.net.PlainSocketImpl$PlainSocketInputStream;

        specialinvoke $r1.<java.net.PlainSocketImpl$PlainSocketInputStream: void <init>(java.net.PlainSocketImpl)>(r0);

        return $r1;
    }

    public java.lang.Object getOption(int) throws java.net.SocketException
    {
        java.net.PlainSocketImpl r0;
        int i0;
        java.io.FileDescriptor $r1;
        java.lang.Object $r2;

        r0 := @this: java.net.PlainSocketImpl;

        i0 := @parameter0: int;

        $r1 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $r2 = staticinvoke <libcore.io.IoBridge: java.lang.Object getSocketOption(java.io.FileDescriptor,int)>($r1, i0);

        return $r2;
    }

    protected synchronized java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.PlainSocketImpl$PlainSocketOutputStream $r1;

        r0 := @this: java.net.PlainSocketImpl;

        specialinvoke r0.<java.net.PlainSocketImpl: void checkNotClosed()>();

        $r1 = new java.net.PlainSocketImpl$PlainSocketOutputStream;

        specialinvoke $r1.<java.net.PlainSocketImpl$PlainSocketOutputStream: void <init>(java.net.PlainSocketImpl)>(r0);

        return $r1;
    }

    protected void listen(int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        int i0;
        android.system.ErrnoException r1, $r4;
        boolean $z0;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        java.net.SocketException $r5;

        r0 := @this: java.net.PlainSocketImpl;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<java.net.PlainSocketImpl: boolean usingSocks()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r3.<libcore.io.Os: void listen(java.io.FileDescriptor,int)>($r2, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r1.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r5;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public void setOption(int, java.lang.Object) throws java.net.SocketException
    {
        java.net.PlainSocketImpl r0;
        int i0;
        java.lang.Object r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.PlainSocketImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>($r2, i0, r1);

        return;
    }

    private int socksGetServerPort()
    {
        java.net.PlainSocketImpl r0;
        java.net.InetSocketAddress r1;
        java.net.Proxy $r2;
        java.net.SocketAddress $r3;
        int $i0;

        r0 := @this: java.net.PlainSocketImpl;

        $r2 = r0.<java.net.PlainSocketImpl: java.net.Proxy proxy>;

        $r3 = virtualinvoke $r2.<java.net.Proxy: java.net.SocketAddress address()>();

        r1 = (java.net.InetSocketAddress) $r3;

        $i0 = virtualinvoke r1.<java.net.InetSocketAddress: int getPort()>();

        return $i0;
    }

    private java.net.InetAddress socksGetServerAddress() throws java.net.UnknownHostException
    {
        java.net.PlainSocketImpl r0;
        java.lang.String r1;
        java.net.InetSocketAddress r2;
        java.net.Proxy $r3;
        java.net.SocketAddress $r4;
        java.net.InetAddress $r5, $r6;

        r0 := @this: java.net.PlainSocketImpl;

        $r3 = r0.<java.net.PlainSocketImpl: java.net.Proxy proxy>;

        $r4 = virtualinvoke $r3.<java.net.Proxy: java.net.SocketAddress address()>();

        r2 = (java.net.InetSocketAddress) $r4;

        r1 = virtualinvoke r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        if r1 != null goto label1;

        $r6 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r1 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostAddress()>();

     label1:
        $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r1);

        return $r5;
    }

    private void socksConnect(java.net.InetAddress, int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1, $r4;
        int i0, i1, $i2;
        java.lang.Exception r2, $r5;
        java.io.FileDescriptor $r3;
        java.net.SocketException $r6;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $r4 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.InetAddress socksGetServerAddress()>();

        $i2 = specialinvoke r0.<java.net.PlainSocketImpl: int socksGetServerPort()>();

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int,int)>($r3, $r4, $i2, i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.net.SocketException;

        specialinvoke $r6.<java.net.SocketException: void <init>(java.lang.String,java.lang.Throwable)>("SOCKS connection failed", r2);

        throw $r6;

     label4:
        specialinvoke r0.<java.net.PlainSocketImpl: void socksRequestConnection(java.net.InetAddress,int)>(r1, i0);

        <java.net.PlainSocketImpl: java.net.InetAddress lastConnectedAddress> = r1;

        <java.net.PlainSocketImpl: int lastConnectedPort> = i0;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void socksRequestConnection(java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.InetAddress r1;
        int i0, $i1, $i2;
        java.net.Socks4Message r2;
        java.io.IOException $r3;
        java.lang.String $r4;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.PlainSocketImpl: void socksSendRequest(int,java.net.InetAddress,int)>(1, r1, i0);

        r2 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.Socks4Message socksReadReply()>();

        $i1 = virtualinvoke r2.<java.net.Socks4Message: int getCommandOrResult()>();

        if $i1 == 90 goto label1;

        $r3 = new java.io.IOException;

        $i2 = virtualinvoke r2.<java.net.Socks4Message: int getCommandOrResult()>();

        $r4 = virtualinvoke r2.<java.net.Socks4Message: java.lang.String getErrorString(int)>($i2);

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        return;
    }

    public void socksAccept() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.Socks4Message r1;
        int $i0, $i1;
        java.io.IOException $r2;
        java.lang.String $r3;

        r0 := @this: java.net.PlainSocketImpl;

        r1 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.Socks4Message socksReadReply()>();

        $i0 = virtualinvoke r1.<java.net.Socks4Message: int getCommandOrResult()>();

        if $i0 == 90 goto label1;

        $r2 = new java.io.IOException;

        $i1 = virtualinvoke r1.<java.net.Socks4Message: int getCommandOrResult()>();

        $r3 = virtualinvoke r1.<java.net.Socks4Message: java.lang.String getErrorString(int)>($i1);

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    protected void shutdownInput() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        android.system.ErrnoException r1, $r4;
        int $i0;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        java.net.SocketException $r5;

        r0 := @this: java.net.PlainSocketImpl;

        r0.<java.net.PlainSocketImpl: boolean shutdownInput> = 1;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $i0 = <android.system.OsConstants: int SHUT_RD>;

        interfaceinvoke $r3.<libcore.io.Os: void shutdown(java.io.FileDescriptor,int)>($r2, $i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r1.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r5;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    protected void shutdownOutput() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        android.system.ErrnoException r1, $r4;
        int $i0;
        java.io.FileDescriptor $r2;
        libcore.io.Os $r3;
        java.net.SocketException $r5;

        r0 := @this: java.net.PlainSocketImpl;

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $i0 = <android.system.OsConstants: int SHUT_WR>;

        interfaceinvoke $r3.<libcore.io.Os: void shutdown(java.io.FileDescriptor,int)>($r2, $i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = virtualinvoke r1.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r5;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private void socksBind() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.lang.Exception r1, $r14;
        byte[] r2;
        java.io.FileDescriptor $r3;
        java.net.InetAddress $r4, $r5, $r6, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.nio.ByteOrder $r7;
        java.io.IOException $r10, $r13;
        java.net.SocketException $r11;
        java.lang.String $r12;
        java.net.Socks4Message r15;

        r0 := @this: java.net.PlainSocketImpl;

     label1:
        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $r4 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.InetAddress socksGetServerAddress()>();

        $i0 = specialinvoke r0.<java.net.PlainSocketImpl: int socksGetServerPort()>();

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r3, $r4, $i0);

     label2:
        goto label4;

     label3:
        $r14 := @caughtexception;

        r1 = $r14;

        $r13 = new java.io.IOException;

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to connect to SOCKS server", r1);

        throw $r13;

     label4:
        $r5 = <java.net.PlainSocketImpl: java.net.InetAddress lastConnectedAddress>;

        if $r5 != null goto label5;

        $r11 = new java.net.SocketException;

        specialinvoke $r11.<java.net.SocketException: void <init>(java.lang.String)>("Invalid SOCKS client");

        throw $r11;

     label5:
        $r6 = <java.net.PlainSocketImpl: java.net.InetAddress lastConnectedAddress>;

        $i1 = <java.net.PlainSocketImpl: int lastConnectedPort>;

        specialinvoke r0.<java.net.PlainSocketImpl: void socksSendRequest(int,java.net.InetAddress,int)>(2, $r6, $i1);

        r15 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.Socks4Message socksReadReply()>();

        $i2 = virtualinvoke r15.<java.net.Socks4Message: int getCommandOrResult()>();

        if $i2 == 90 goto label6;

        $r10 = new java.io.IOException;

        $i6 = virtualinvoke r15.<java.net.Socks4Message: int getCommandOrResult()>();

        $r12 = virtualinvoke r15.<java.net.Socks4Message: java.lang.String getErrorString(int)>($i6);

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label6:
        $i3 = virtualinvoke r15.<java.net.Socks4Message: int getIP()>();

        if $i3 != 0 goto label7;

        $r9 = specialinvoke r0.<java.net.PlainSocketImpl: java.net.InetAddress socksGetServerAddress()>();

        r0.<java.net.PlainSocketImpl: java.net.InetAddress address> = $r9;

        goto label8;

     label7:
        r2 = newarray (byte)[4];

        $i4 = virtualinvoke r15.<java.net.Socks4Message: int getIP()>();

        $r7 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)>(r2, 0, $i4, $r7);

        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r2);

        r0.<java.net.PlainSocketImpl: java.net.InetAddress address> = $r8;

     label8:
        $i5 = virtualinvoke r15.<java.net.Socks4Message: int getPort()>();

        r0.<java.net.PlainSocketImpl: int localport> = $i5;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void socksSendRequest(int, java.net.InetAddress, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        int i0, i1, $i2;
        java.net.InetAddress r1;
        java.net.Socks4Message r2, $r3;
        byte[] $r4, $r6;
        java.io.OutputStream $r5;

        r0 := @this: java.net.PlainSocketImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        i1 := @parameter2: int;

        $r3 = new java.net.Socks4Message;

        specialinvoke $r3.<java.net.Socks4Message: void <init>()>();

        r2 = $r3;

        virtualinvoke r2.<java.net.Socks4Message: void setCommandOrResult(int)>(i0);

        virtualinvoke r2.<java.net.Socks4Message: void setPort(int)>(i1);

        $r4 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        virtualinvoke r2.<java.net.Socks4Message: void setIP(byte[])>($r4);

        virtualinvoke r2.<java.net.Socks4Message: void setUserId(java.lang.String)>("default");

        $r5 = virtualinvoke r0.<java.net.PlainSocketImpl: java.io.OutputStream getOutputStream()>();

        $r6 = virtualinvoke r2.<java.net.Socks4Message: byte[] getBytes()>();

        $i2 = virtualinvoke r2.<java.net.Socks4Message: int getLength()>();

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>($r6, 0, $i2);

        return;
    }

    private java.net.Socks4Message socksReadReply() throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.Socks4Message r1, $r2;
        int i0, i1, $i2;
        java.net.SocketException $r3;
        java.io.InputStream $r4;
        byte[] $r5;

        r0 := @this: java.net.PlainSocketImpl;

        $r2 = new java.net.Socks4Message;

        specialinvoke $r2.<java.net.Socks4Message: void <init>()>();

        r1 = $r2;

        i0 = 0;

     label1:
        if i0 >= 8 goto label3;

        $r4 = virtualinvoke r0.<java.net.PlainSocketImpl: java.io.InputStream getInputStream()>();

        $r5 = virtualinvoke r1.<java.net.Socks4Message: byte[] getBytes()>();

        $i2 = 8 - i0;

        i1 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>($r5, i0, $i2);

        if i1 != -1 goto label2;

        goto label3;

     label2:
        i0 = i0 + i1;

        goto label1;

     label3:
        if 8 == i0 goto label4;

        $r3 = new java.net.SocketException;

        specialinvoke $r3.<java.net.SocketException: void <init>(java.lang.String)>("Malformed reply from SOCKS server");

        throw $r3;

     label4:
        return r1;
    }

    protected void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        java.net.SocketAddress r1;
        int i0, $i1;
        java.net.InetSocketAddress r2;
        java.net.InetAddress $r3;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: java.net.SocketAddress;

        i0 := @parameter1: int;

        r2 = (java.net.InetSocketAddress) r1;

        $r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i1 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke r0.<java.net.PlainSocketImpl: void connect(java.net.InetAddress,int,int)>($r3, $i1, i0);

        return;
    }

    protected boolean supportsUrgentData()
    {
        java.net.PlainSocketImpl r0;

        r0 := @this: java.net.PlainSocketImpl;

        return 1;
    }

    protected void sendUrgentData(int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        int i0, $i2;
        byte[] r1, $r2;
        byte $b1;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        android.system.ErrnoException $r5, r7;
        java.net.SocketException $r6;

        r0 := @this: java.net.PlainSocketImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r2[0] = $b1;

        r1 = $r2;

        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $i2 = <android.system.OsConstants: int MSG_OOB>;

        interfaceinvoke $r4.<libcore.io.Os: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>($r3, r1, 0, 1, $i2, null, 0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = virtualinvoke r7.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r6;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    private int read(byte[], int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        byte[] r1;
        int i0, i1, i2, $i3;
        boolean $z0;
        java.io.FileDescriptor $r2;
        java.net.SocketTimeoutException $r3;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return 0;

     label1:
        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $z0 = r0.<java.net.PlainSocketImpl: boolean shutdownInput>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        $r2 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        i2 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,byte[],int,int,int,java.net.DatagramPacket,boolean)>(1, $r2, r1, i0, i1, 0, null, 0);

        if i2 != 0 goto label3;

        $r3 = new java.net.SocketTimeoutException;

        specialinvoke $r3.<java.net.SocketTimeoutException: void <init>()>();

        throw $r3;

     label3:
        if i2 != -1 goto label4;

        r0.<java.net.PlainSocketImpl: boolean shutdownInput> = 1;

     label4:
        return i2;
    }

    private void write(byte[], int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        boolean $z0;
        java.net.InetAddress $r2;
        java.io.FileDescriptor $r3, $r4;

        r0 := @this: java.net.PlainSocketImpl;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $z0 = r0.<java.net.PlainSocketImpl: boolean streaming>;

        if $z0 == 0 goto label2;

     label1:
        if i1 <= 0 goto label3;

        $r4 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        i2 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>($r4, r1, i0, i1, 0, null, 0);

        i1 = i1 - i2;

        i0 = i0 + i2;

        goto label1;

     label2:
        $r3 = r0.<java.net.PlainSocketImpl: java.io.FileDescriptor fd>;

        $r2 = r0.<java.net.PlainSocketImpl: java.net.InetAddress address>;

        $i4 = r0.<java.net.PlainSocketImpl: int port>;

        staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>($r3, r1, i0, i1, 0, $r2, $i4);

     label3:
        return;
    }

    static int access$000(java.net.PlainSocketImpl, byte[], int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        byte[] r1;
        int i0, i1, $i2;

        r0 := @parameter0: java.net.PlainSocketImpl;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = specialinvoke r0.<java.net.PlainSocketImpl: int read(byte[],int,int)>(r1, i0, i1);

        return $i2;
    }

    static void access$100(java.net.PlainSocketImpl, byte[], int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl r0;
        byte[] r1;
        int i0, i1;

        r0 := @parameter0: java.net.PlainSocketImpl;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.PlainSocketImpl: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }
}
