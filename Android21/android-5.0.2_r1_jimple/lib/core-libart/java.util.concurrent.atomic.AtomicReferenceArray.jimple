public class java.util.concurrent.atomic.AtomicReferenceArray extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe unsafe;
    private static final int base;
    private static final int shift;
    private static final long arrayFieldOffset;
    private final java.lang.Object[] array;

    private long checkedByteOffset(int)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0, $i1;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.Object[] $r6;
        long $l2;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r6 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $i1 = lengthof $r6;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $l2 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceArray: long byteOffset(int)>(i0);

        return $l2;
    }

    private static long byteOffset(int)
    {
        int i0, $i1, $i3;
        long $l2, $l4, $l5, $l6;

        i0 := @parameter0: int;

        $l2 = (long) i0;

        $i1 = <java.util.concurrent.atomic.AtomicReferenceArray: int shift>;

        $l5 = $l2 << $i1;

        $i3 = <java.util.concurrent.atomic.AtomicReferenceArray: int base>;

        $l4 = (long) $i3;

        $l6 = $l5 + $l4;

        return $l6;
    }

    public void <init>(int)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Object)[i0];

        r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array> = $r1;

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r1, $i0, class "[Ljava/lang/Object;");

        r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array> = $r2;

        return;
    }

    public final int length()
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        $r1 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public final java.lang.Object get(int)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        long $l1;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        $l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: long checkedByteOffset(int)>(i0);

        $r1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getRaw(long)>($l1);

        return $r1;
    }

    private java.lang.Object getRaw(long)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        long l0;
        java.lang.Object[] $r1;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        l0 := @parameter0: long;

        $r2 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $r1 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>($r1, l0);

        return $r3;
    }

    public final void set(int, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object r1;
        sun.misc.Unsafe $r2;
        java.lang.Object[] $r3;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $r3 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: long checkedByteOffset(int)>(i0);

        virtualinvoke $r2.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>($r3, $l1, r1);

        return;
    }

    public final void lazySet(int, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object r1;
        sun.misc.Unsafe $r2;
        java.lang.Object[] $r3;
        long $l1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $r3 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: long checkedByteOffset(int)>(i0);

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>($r3, $l1, r1);

        return;
    }

    public final java.lang.Object getAndSet(int, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object r1, r2;
        long l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: long checkedByteOffset(int)>(i0);

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getRaw(long)>(l1);

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSetRaw(long,java.lang.Object,java.lang.Object)>(l1, r2, r1);

        if $z0 == 0 goto label2;

        return r2;

     label2:
        goto label1;
    }

    public final boolean compareAndSet(int, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object r1, r2;
        long $l1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $l1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: long checkedByteOffset(int)>(i0);

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSetRaw(long,java.lang.Object,java.lang.Object)>($l1, r1, r2);

        return $z0;
    }

    private boolean compareAndSetRaw(long, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        long l0;
        java.lang.Object r1, r2;
        java.lang.Object[] $r3;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $r4 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $r3 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>($r3, l0, r1, r2);

        return $z0;
    }

    public final boolean weakCompareAndSet(int, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: boolean compareAndSet(int,java.lang.Object,java.lang.Object)>(i0, r1, r2);

        return $z0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        int i0, i1, $i2;
        java.lang.StringBuilder r1, $r3, $r7, $r9;
        java.lang.Object[] $r2;
        long $l3;
        java.lang.Object $r5;
        java.lang.String $r10;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        $r2 = r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object[] array>;

        $i2 = lengthof $r2;

        i0 = $i2 - 1;

        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = 0;

     label2:
        $l3 = staticinvoke <java.util.concurrent.atomic.AtomicReferenceArray: long byteOffset(int)>(i1);

        $r5 = specialinvoke r0.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object getRaw(long)>($l3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        if i1 != i0 goto label3;

        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label3:
        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

        goto label2;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException, java.io.InvalidObjectException
    {
        java.util.concurrent.atomic.AtomicReferenceArray r0;
        java.io.ObjectInputStream r1;
        java.lang.Object r2;
        java.io.ObjectInputStream$GetField $r3;
        java.io.InvalidObjectException $r4;
        java.lang.Class $r5, $r6;
        boolean $z0;
        long $l0;
        sun.misc.Unsafe $r7;
        java.lang.Object[] $r8, $r9;
        int $i1;

        r0 := @this: java.util.concurrent.atomic.AtomicReferenceArray;

        r1 := @parameter0: java.io.ObjectInputStream;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        r2 = virtualinvoke $r3.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("array", null);

        if r2 == null goto label1;

        $r5 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label2;

     label1:
        $r4 = new java.io.InvalidObjectException;

        specialinvoke $r4.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Not array type");

        throw $r4;

     label2:
        $r6 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 == class "[Ljava/lang/Object;" goto label3;

        $r8 = (java.lang.Object[]) r2;

        $r9 = (java.lang.Object[]) $r8;

        $i1 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>(r2);

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>($r9, $i1, class "[Ljava/lang/Object;");

     label3:
        $r7 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $l0 = <java.util.concurrent.atomic.AtomicReferenceArray: long arrayFieldOffset>;

        virtualinvoke $r7.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r0, $l0, r2);

        return;
    }

    static void <clinit>()
    {
        int i0, $i2, $i3, $i4, $i5, $i6;
        sun.misc.Unsafe $r0, $r2, $r4, $r5;
        java.lang.Class $r1;
        java.lang.reflect.Field $r3;
        long $l1;
        java.lang.Error $r6, $r7;
        java.lang.Exception $r8, r9;

        <java.util.concurrent.atomic.AtomicReferenceArray: long serialVersionUID> = -6209656149925076980L;

     label1:
        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe> = $r0;

        $r2 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $r1 = class "java/util/concurrent/atomic/AtomicReferenceArray";

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("array");

        $l1 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.atomic.AtomicReferenceArray: long arrayFieldOffset> = $l1;

        $r4 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        $i2 = virtualinvoke $r4.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/lang/Object;");

        <java.util.concurrent.atomic.AtomicReferenceArray: int base> = $i2;

        $r5 = <java.util.concurrent.atomic.AtomicReferenceArray: sun.misc.Unsafe unsafe>;

        i0 = virtualinvoke $r5.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/lang/Object;");

        $i3 = i0 - 1;

        $i4 = i0 & $i3;

        if $i4 == 0 goto label2;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r6;

     label2:
        $i5 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i6 = 31 - $i5;

        <java.util.concurrent.atomic.AtomicReferenceArray: int shift> = $i6;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r9 = $r8;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r9);

        throw $r7;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
