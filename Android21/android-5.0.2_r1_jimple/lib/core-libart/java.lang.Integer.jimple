public final class java.lang.Integer extends java.lang.Number implements java.lang.Comparable
{
    private static final long serialVersionUID;
    private final int value;
    public static final int MAX_VALUE;
    public static final int MIN_VALUE;
    public static final int SIZE;
    private static final byte[] NTZ_TABLE;
    public static final java.lang.Class TYPE;
    private static final java.lang.Integer[] SMALL_VALUES;

    public void <init>(int)
    {
        java.lang.Integer r0;
        int i0;

        r0 := @this: java.lang.Integer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Integer: int value> = i0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Integer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.Integer;

        r1 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Integer: void <init>(int)>($i0);

        return;
    }

    public byte byteValue()
    {
        java.lang.Integer r0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $b1 = (byte) $i0;

        return $b1;
    }

    public int compareTo(java.lang.Integer)
    {
        java.lang.Integer r0, r1;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.Integer;

        r1 := @parameter0: java.lang.Integer;

        $i1 = r0.<java.lang.Integer: int value>;

        $i0 = r1.<java.lang.Integer: int value>;

        $i2 = staticinvoke <java.lang.Integer: int compare(int,int)>($i1, $i0);

        return $i2;
    }

    public static int compare(int, int)
    {
        int i0, i1;
        byte $b2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 >= i1 goto label1;

        $b2 = -1;

        goto label3;

     label1:
        if i0 != i1 goto label2;

        $b2 = 0;

        goto label3;

     label2:
        $b2 = 1;

     label3:
        return $b2;
    }

    private static java.lang.NumberFormatException invalidInt(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.NumberFormatException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid int: \"");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6);

        throw $r1;
    }

    public static java.lang.Integer decode(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0, i1, i4;
        char c2, $c5, c6;
        boolean z0, $z1;
        byte b3;
        java.lang.Integer $r1, $r4;
        java.lang.NumberFormatException $r2, $r3, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 != 0 goto label01;

        $r6 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r6;

     label01:
        i1 = 0;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if c2 != 45 goto label02;

        $z1 = 1;

        goto label03;

     label02:
        $z1 = 0;

     label03:
        z0 = $z1;

        if z0 != 0 goto label04;

        if c2 != 43 goto label06;

     label04:
        if i0 != 1 goto label05;

        $r5 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r5;

     label05:
        i1 = i1 + 1;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

     label06:
        b3 = 10;

        if c2 != 48 goto label11;

        i1 = i1 + 1;

        if i1 != i0 goto label07;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r4;

     label07:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        c6 = $c5;

        if $c5 == 120 goto label08;

        if c6 != 88 goto label10;

     label08:
        i1 = i1 + 1;

        if i1 != i0 goto label09;

        $r3 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r3;

     label09:
        b3 = 16;

        goto label13;

     label10:
        b3 = 8;

        goto label13;

     label11:
        if c2 != 35 goto label13;

        i1 = i1 + 1;

        if i1 != i0 goto label12;

        $r2 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r2;

     label12:
        b3 = 16;

     label13:
        i4 = staticinvoke <java.lang.Integer: int parse(java.lang.String,int,int,boolean)>(r0, i1, b3, z0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        return $r1;
    }

    public double doubleValue()
    {
        java.lang.Integer r0;
        int $i0;
        double $d0;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $d0 = (double) $i0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Integer r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: java.lang.Integer;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Integer;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Integer) r1;

        $i1 = $r2.<java.lang.Integer: int value>;

        $i0 = r0.<java.lang.Integer: int value>;

        if $i1 != $i0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public float floatValue()
    {
        java.lang.Integer r0;
        int $i0;
        float $f0;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $f0 = (float) $i0;

        return $f0;
    }

    public static java.lang.Integer getInteger(java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;
        java.lang.Integer $r3;
        java.lang.NumberFormatException $r4;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 != null goto label3;

        return null;

     label3:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r1);

     label4:
        return $r3;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Integer getInteger(java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0, $i1;
        java.lang.Integer $r3, $r4, $r5, $r7;
        java.lang.NumberFormatException $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if r0 == null goto label1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r3;

     label2:
        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 != null goto label3;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r5;

     label3:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r1);

     label4:
        return $r4;

     label5:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        return $r7;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public static java.lang.Integer getInteger(java.lang.String, java.lang.Integer)
    {
        java.lang.String r0, r2;
        java.lang.Integer r1, $r4;
        int $i0;
        java.lang.NumberFormatException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Integer;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r2 != null goto label3;

        return r1;

     label3:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r2);

     label4:
        return $r4;

     label5:
        $r5 := @caughtexception;

        return r1;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public int hashCode()
    {
        java.lang.Integer r0;
        int $i0;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        return $i0;
    }

    public int intValue()
    {
        java.lang.Integer r0;
        int $i0;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        return $i0;
    }

    public long longValue()
    {
        java.lang.Integer r0;
        int $i0;
        long $l1;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $l1 = (long) $i0;

        return $l1;
    }

    public static int parseInt(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 10);

        return $i0;
    }

    public static int parseInt(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r5;
        int i0, $i3, $i4;
        char c1;
        byte b2, $b5;
        java.lang.NumberFormatException $r1, $r6, $r7;
        java.lang.StringBuilder $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 2 goto label01;

        if i0 <= 36 goto label02;

     label01:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label02:
        if r0 == null goto label03;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label04;

     label03:
        $r6 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r6;

     label04:
        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if c1 == 45 goto label05;

        if c1 != 43 goto label06;

     label05:
        $b5 = 1;

        goto label07;

     label06:
        $b5 = 0;

     label07:
        b2 = $b5;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if b2 != $i3 goto label08;

        $r7 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r7;

     label08:
        if c1 != 45 goto label09;

        $z1 = 1;

        goto label10;

     label09:
        $z1 = 0;

     label10:
        $i4 = staticinvoke <java.lang.Integer: int parse(java.lang.String,int,int,boolean)>(r0, b2, i0, $z1);

        return $i4;
    }

    public static int parsePositiveInt(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parsePositiveInt(java.lang.String,int)>(r0, 10);

        return $i0;
    }

    public static int parsePositiveInt(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0, $r5;
        int i0, $i1, $i2;
        java.lang.NumberFormatException $r1, $r6;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 < 2 goto label1;

        if i0 <= 36 goto label2;

     label1:
        $r1 = new java.lang.NumberFormatException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid radix: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        if r0 == null goto label3;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label4;

     label3:
        $r6 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r6;

     label4:
        $i2 = staticinvoke <java.lang.Integer: int parse(java.lang.String,int,int,boolean)>(r0, 0, i0, 0);

        return $i2;
    }

    private static int parse(java.lang.String, int, int, boolean) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9;
        boolean z0;
        java.lang.NumberFormatException $r1, $r2, $r3, $r4;
        char $c8;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        i2 = -2147483648 / i1;

        i3 = 0;

        i4 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        if i0 >= i4 goto label5;

        $i7 = i0;

        i0 = i0 + 1;

        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i7);

        i5 = staticinvoke <java.lang.Character: int digit(char,int)>($c8, i1);

        if i5 != -1 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r3;

     label2:
        if i2 <= i3 goto label3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r4;

     label3:
        $i9 = i3 * i1;

        i6 = $i9 - i5;

        if i6 <= i3 goto label4;

        $r2 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r2;

     label4:
        i3 = i6;

        goto label1;

     label5:
        if z0 != 0 goto label6;

        i3 = neg i3;

        if i3 >= 0 goto label6;

        $r1 = staticinvoke <java.lang.Integer: java.lang.NumberFormatException invalidInt(java.lang.String)>(r0);

        throw $r1;

     label6:
        return i3;
    }

    public short shortValue()
    {
        java.lang.Integer r0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $s1 = (short) $i0;

        return $s1;
    }

    public static java.lang.String toBinaryString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String intToBinaryString(int)>(i0);

        return $r0;
    }

    public static java.lang.String toHexString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String intToHexString(int,boolean,int)>(i0, 0, 0);

        return $r0;
    }

    public static java.lang.String toOctalString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String intToOctalString(int)>(i0);

        return $r0;
    }

    public java.lang.String toString()
    {
        java.lang.Integer r0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: java.lang.Integer;

        $i0 = r0.<java.lang.Integer: int value>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        return $r1;
    }

    public static java.lang.String toString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String intToString(int)>(i0);

        return $r0;
    }

    public static java.lang.String toString(int, int)
    {
        int i0, i1;
        java.lang.String $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <java.lang.IntegralToString: java.lang.String intToString(int,int)>(i0, i1);

        return $r0;
    }

    public static java.lang.Integer valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int $i0;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r1;
    }

    public static java.lang.Integer valueOf(java.lang.String, int) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        int i0, $i1;
        java.lang.Integer $r1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, i0);

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r1;
    }

    public static int highestOneBit(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;

        i0 := @parameter0: int;

        $i1 = i0 >> 1;

        i8 = i0 | $i1;

        $i2 = i8 >> 2;

        i9 = i8 | $i2;

        $i3 = i9 >> 4;

        i10 = i9 | $i3;

        $i4 = i10 >> 8;

        i11 = i10 | $i4;

        $i5 = i11 >> 16;

        i12 = i11 | $i5;

        $i6 = i12 >>> 1;

        $i7 = i12 - $i6;

        return $i7;
    }

    public static int lowestOneBit(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = neg i0;

        $i2 = i0 & $i1;

        return $i2;
    }

    public static int numberOfLeadingZeros(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $i8 = i0 ^ -1;

        $i9 = $i8 >> 26;

        $i10 = $i9 & 32;

        return $i10;

     label1:
        i1 = 1;

        $i2 = i0 >> 16;

        if $i2 != 0 goto label2;

        i1 = i1 + 16;

        i0 = i0 << 16;

     label2:
        $i3 = i0 >> 24;

        if $i3 != 0 goto label3;

        i1 = i1 + 8;

        i0 = i0 << 8;

     label3:
        $i4 = i0 >> 28;

        if $i4 != 0 goto label4;

        i1 = i1 + 4;

        i0 = i0 << 4;

     label4:
        $i5 = i0 >> 30;

        if $i5 != 0 goto label5;

        i1 = i1 + 2;

        i0 = i0 << 2;

     label5:
        $i6 = i0 >>> 31;

        $i7 = i1 - $i6;

        return $i7;
    }

    public static int numberOfTrailingZeros(int)
    {
        int i0, $i1, $i2, $i3, $i4;
        byte[] $r0;
        byte $b5;

        i0 := @parameter0: int;

        $r0 = <java.lang.Integer: byte[] NTZ_TABLE>;

        $i1 = neg i0;

        $i2 = i0 & $i1;

        $i3 = $i2 * 72416175;

        $i4 = $i3 >>> 26;

        $b5 = $r0[$i4];

        return $b5;
    }

    public static int bitCount(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15;

        i0 := @parameter0: int;

        $i1 = i0 >> 1;

        $i2 = $i1 & 1431655765;

        i11 = i0 - $i2;

        $i5 = i11 & 858993459;

        $i3 = i11 >> 2;

        $i4 = $i3 & 858993459;

        i12 = $i5 + $i4;

        $i6 = i12 >> 4;

        $i7 = $i6 + i12;

        i13 = $i7 & 252645135;

        $i8 = i13 >> 8;

        i14 = i13 + $i8;

        $i9 = i14 >> 16;

        i15 = i14 + $i9;

        $i10 = i15 & 63;

        return $i10;
    }

    public static int rotateLeft(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 << i1;

        $i2 = neg i1;

        $i3 = i0 >>> $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    public static int rotateRight(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = i0 >>> i1;

        $i2 = neg i1;

        $i3 = i0 << $i2;

        $i5 = $i4 | $i3;

        return $i5;
    }

    public static int reverseBytes(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;

        i0 := @parameter0: int;

        $i1 = i0 >>> 8;

        $i4 = $i1 & 16711935;

        $i2 = i0 & 16711935;

        $i3 = $i2 << 8;

        i8 = $i4 | $i3;

        $i6 = i8 >>> 16;

        $i5 = i8 << 16;

        $i7 = $i6 | $i5;

        return $i7;
    }

    public static int reverse(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;

        i0 := @parameter0: int;

        $i1 = i0 >>> 1;

        $i4 = $i1 & 1431655765;

        $i2 = i0 & 1431655765;

        $i3 = $i2 << 1;

        i20 = $i4 | $i3;

        $i5 = i20 >>> 2;

        $i8 = $i5 & 858993459;

        $i6 = i20 & 858993459;

        $i7 = $i6 << 2;

        i21 = $i8 | $i7;

        $i9 = i21 >>> 4;

        $i12 = $i9 & 252645135;

        $i10 = i21 & 252645135;

        $i11 = $i10 << 4;

        i22 = $i12 | $i11;

        $i13 = i22 >>> 8;

        $i17 = $i13 & 16711935;

        $i14 = i22 & 16711935;

        $i15 = $i14 << 8;

        i23 = $i17 | $i15;

        $i19 = i23 >>> 16;

        $i16 = i23 << 16;

        $i18 = $i19 | $i16;

        return $i18;
    }

    public static int signum(int)
    {
        int i0, $i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i3 = i0 >> 31;

        $i1 = neg i0;

        $i2 = $i1 >>> 31;

        $i4 = $i3 | $i2;

        return $i4;
    }

    public static java.lang.Integer valueOf(int)
    {
        int i0, $i1;
        java.lang.Integer $r0;
        java.lang.Integer[] $r1;

        i0 := @parameter0: int;

        if i0 >= 128 goto label1;

        if i0 >= -128 goto label2;

     label1:
        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(i0);

        goto label3;

     label2:
        $r1 = <java.lang.Integer: java.lang.Integer[] SMALL_VALUES>;

        $i1 = i0 + 128;

        $r0 = $r1[$i1];

     label3:
        return $r0;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Integer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Integer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        int i0, $i1;
        byte[] $r0;
        java.lang.Class $r1, $r2;
        java.lang.Integer[] $r3, $r5;
        java.lang.Integer $r4;

        <java.lang.Integer: int SIZE> = 32;

        <java.lang.Integer: int MIN_VALUE> = -2147483648;

        <java.lang.Integer: int MAX_VALUE> = 2147483647;

        <java.lang.Integer: long serialVersionUID> = 1360826667806852920L;

        $r0 = newarray (byte)[64];

        $r0[0] = 32;

        $r0[1] = 0;

        $r0[2] = 1;

        $r0[3] = 12;

        $r0[4] = 2;

        $r0[5] = 6;

        $r0[6] = -1;

        $r0[7] = 13;

        $r0[8] = 3;

        $r0[9] = -1;

        $r0[10] = 7;

        $r0[11] = -1;

        $r0[12] = -1;

        $r0[13] = -1;

        $r0[14] = -1;

        $r0[15] = 14;

        $r0[16] = 10;

        $r0[17] = 4;

        $r0[18] = -1;

        $r0[19] = -1;

        $r0[20] = 8;

        $r0[21] = -1;

        $r0[22] = -1;

        $r0[23] = 25;

        $r0[24] = -1;

        $r0[25] = -1;

        $r0[26] = -1;

        $r0[27] = -1;

        $r0[28] = -1;

        $r0[29] = 21;

        $r0[30] = 27;

        $r0[31] = 15;

        $r0[32] = 31;

        $r0[33] = 11;

        $r0[34] = 5;

        $r0[35] = -1;

        $r0[36] = -1;

        $r0[37] = -1;

        $r0[38] = -1;

        $r0[39] = -1;

        $r0[40] = 9;

        $r0[41] = -1;

        $r0[42] = -1;

        $r0[43] = 24;

        $r0[44] = -1;

        $r0[45] = -1;

        $r0[46] = 20;

        $r0[47] = 26;

        $r0[48] = 30;

        $r0[49] = -1;

        $r0[50] = -1;

        $r0[51] = -1;

        $r0[52] = -1;

        $r0[53] = 23;

        $r0[54] = -1;

        $r0[55] = 19;

        $r0[56] = 29;

        $r0[57] = -1;

        $r0[58] = 22;

        $r0[59] = 18;

        $r0[60] = 28;

        $r0[61] = 17;

        $r0[62] = 16;

        $r0[63] = -1;

        <java.lang.Integer: byte[] NTZ_TABLE> = $r0;

        $r1 = class "[I";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Integer: java.lang.Class TYPE> = $r2;

        $r3 = newarray (java.lang.Integer)[256];

        <java.lang.Integer: java.lang.Integer[] SMALL_VALUES> = $r3;

        i0 = -128;

     label1:
        if i0 >= 128 goto label2;

        $r5 = <java.lang.Integer: java.lang.Integer[] SMALL_VALUES>;

        $i1 = i0 + 128;

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        $r5[$i1] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
}
