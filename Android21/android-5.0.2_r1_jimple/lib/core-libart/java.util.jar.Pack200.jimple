public abstract class java.util.jar.Pack200 extends java.lang.Object
{
    private static final java.lang.String SYSTEM_PROPERTY_PACKER;
    private static final java.lang.String SYSTEM_PROPERTY_UNPACKER;

    private void <init>()
    {
        java.util.jar.Pack200 r0;

        r0 := @this: java.util.jar.Pack200;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.jar.Pack200$Packer newPacker()
    {
        java.lang.String r0, $r11;
        java.lang.Exception r1, $r6;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.util.jar.Pack200$Packer $r5;
        java.lang.Error $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.util.jar.Pack200.Packer", "org.apache.harmony.pack200.Pack200PackerAdapter");

     label1:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (java.util.jar.Pack200$Packer) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.Error;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load class ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r11, r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.util.jar.Pack200$Unpacker newUnpacker()
    {
        java.lang.String r0, $r11;
        java.lang.Exception r1, $r6;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.util.jar.Pack200$Unpacker $r5;
        java.lang.Error $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.util.jar.Pack200.Unpacker", "org.apache.harmony.unpack200.Pack200UnpackerAdapter");

     label1:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (java.util.jar.Pack200$Unpacker) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.Error;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t load class ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>($r11, r1);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <java.util.jar.Pack200: java.lang.String SYSTEM_PROPERTY_UNPACKER> = "java.util.jar.Pack200.Unpacker";

        <java.util.jar.Pack200: java.lang.String SYSTEM_PROPERTY_PACKER> = "java.util.jar.Pack200.Packer";

        return;
    }
}
