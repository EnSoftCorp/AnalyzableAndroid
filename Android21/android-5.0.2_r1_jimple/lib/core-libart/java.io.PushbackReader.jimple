public class java.io.PushbackReader extends java.io.FilterReader
{
    char[] buf;
    int pos;

    public void <init>(java.io.Reader)
    {
        java.io.PushbackReader r0;
        java.io.Reader r1;
        char[] $r2;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.io.FilterReader: void <init>(java.io.Reader)>(r1);

        $r2 = newarray (char)[1];

        r0.<java.io.PushbackReader: char[] buf> = $r2;

        r0.<java.io.PushbackReader: int pos> = 1;

        return;
    }

    public void <init>(java.io.Reader, int)
    {
        java.io.PushbackReader r0;
        java.io.Reader r1;
        int i0;
        char[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterReader: void <init>(java.io.Reader)>(r1);

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r3;

     label1:
        $r2 = newarray (char)[i0];

        r0.<java.io.PushbackReader: char[] buf> = $r2;

        r0.<java.io.PushbackReader: int pos> = i0;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        java.io.Reader $r4;

        r0 := @this: java.io.PushbackReader;

        $r3 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        r0.<java.io.PushbackReader: char[] buf> = null;

        $r4 = r0.<java.io.PushbackReader: java.io.Reader in>;

        virtualinvoke $r4.<java.io.Reader: void close()>();

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        int i0;
        java.io.IOException $r1;

        r0 := @this: java.io.PushbackReader;

        i0 := @parameter0: int;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;
    }

    public boolean markSupported()
    {
        java.io.PushbackReader r0;

        r0 := @this: java.io.PushbackReader;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r7;
        char[] $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.io.Reader $r5;
        char $c5;

        r0 := @this: java.io.PushbackReader;

        $r3 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i1 = r0.<java.io.PushbackReader: int pos>;

        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        $i0 = lengthof $r4;

        if $i1 >= $i0 goto label3;

        $r6 = r0.<java.io.PushbackReader: char[] buf>;

        $i3 = r0.<java.io.PushbackReader: int pos>;

        $i4 = $i3 + 1;

        r0.<java.io.PushbackReader: int pos> = $i4;

        $c5 = $r6[$i3];

        exitmonitor r1;

     label2:
        return $c5;

     label3:
        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        $i2 = virtualinvoke $r5.<java.io.Reader: int read()>();

        exitmonitor r1;

     label4:
        return $i2;

     label5:
        $r7 := @caughtexception;

        r2 = $r7;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.PushbackReader;

        $r1 = r0.<java.io.PushbackReader: char[] buf>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("PushbackReader is closed");

        throw $r2;

     label1:
        return;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1, $r5, $r7, $r8, $r9;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r10;
        java.io.Reader $r6;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label01:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i6 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i6, i0, i1);

        i2 = 0;

        i3 = 0;

        i4 = i0;

        $i8 = r0.<java.io.PushbackReader: int pos>;

        $r5 = r0.<java.io.PushbackReader: char[] buf>;

        $i7 = lengthof $r5;

        if $i8 >= $i7 goto label04;

        $r7 = r0.<java.io.PushbackReader: char[] buf>;

        $i11 = lengthof $r7;

        $i12 = r0.<java.io.PushbackReader: int pos>;

        $i13 = $i11 - $i12;

        if $i13 < i1 goto label02;

        $i17 = i1;

        goto label03;

     label02:
        $r8 = r0.<java.io.PushbackReader: char[] buf>;

        $i14 = lengthof $r8;

        $i15 = r0.<java.io.PushbackReader: int pos>;

        $i17 = $i14 - $i15;

     label03:
        i3 = $i17;

        $r9 = r0.<java.io.PushbackReader: char[] buf>;

        $i16 = r0.<java.io.PushbackReader: int pos>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r9, $i16, r1, i4, i3);

        i4 = i4 + i3;

        i2 = i2 + i3;

        $i18 = r0.<java.io.PushbackReader: int pos>;

        $i19 = $i18 + i3;

        r0.<java.io.PushbackReader: int pos> = $i19;

     label04:
        if i3 != i1 goto label06;

        exitmonitor r2;

     label05:
        return i1;

     label06:
        $r6 = r0.<java.io.PushbackReader: java.io.Reader in>;

        $i9 = i1 - i2;

        i5 = virtualinvoke $r6.<java.io.Reader: int read(char[],int,int)>(r1, i4, $i9);

        if i5 <= 0 goto label08;

        $i10 = i5 + i2;

        exitmonitor r2;

     label07:
        return $i10;

     label08:
        if i2 != 0 goto label10;

        exitmonitor r2;

     label09:
        return i5;

     label10:
        exitmonitor r2;

     label11:
        return i2;

     label12:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r2;

     label13:
        throw r3;

        catch java.lang.Throwable from label01 to label05 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r8;
        char[] $r4, $r5;
        int $i0, $i1, $i2;
        java.io.Reader $r6;
        boolean $z0, $z1;
        java.io.IOException $r7;

        r0 := @this: java.io.PushbackReader;

        $r3 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        if $r4 != null goto label2;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("Reader is closed");

        throw $r7;

     label2:
        $r5 = r0.<java.io.PushbackReader: char[] buf>;

        $i1 = lengthof $r5;

        $i0 = r0.<java.io.PushbackReader: int pos>;

        $i2 = $i1 - $i0;

        if $i2 > 0 goto label3;

        $r6 = r0.<java.io.PushbackReader: java.io.Reader in>;

        $z0 = virtualinvoke $r6.<java.io.Reader: boolean ready()>();

        if $z0 == 0 goto label4;

     label3:
        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        exitmonitor r1;

     label6:
        return $z1;

     label7:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void reset() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.io.IOException $r1;

        r0 := @this: java.io.PushbackReader;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;
    }

    public void unread(char[]) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1;
        int $i0;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.PushbackReader: void unread(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void unread(char[], int, int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;
        char $c6;
        java.io.IOException $r5;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r4 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i3 = r0.<java.io.PushbackReader: int pos>;

        if i1 <= $i3 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Pushback buffer full");

        throw $r5;

     label2:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        $i5 = i0 + i1;

        i2 = $i5 - 1;

     label3:
        if i2 < i0 goto label4;

        $c6 = r1[i2];

        virtualinvoke r0.<java.io.PushbackReader: void unread(int)>($c6);

        i2 = i2 + -1;

        goto label3;

     label4:
        exitmonitor r2;

     label5:
        goto label8;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label7:
        throw r3;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void unread(int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r6;
        char[] $r4;
        char $c4;
        java.io.IOException $r5;

        r0 := @this: java.io.PushbackReader;

        i0 := @parameter0: int;

        $r3 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i1 = r0.<java.io.PushbackReader: int pos>;

        if $i1 != 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Pushback buffer full");

        throw $r5;

     label2:
        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        $i2 = r0.<java.io.PushbackReader: int pos>;

        $i3 = $i2 - 1;

        r0.<java.io.PushbackReader: int pos> = $i3;

        $c4 = (char) i0;

        $r4[$i3] = $c4;

        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        long l0, l1, l3, $l8, $l9, $l10, $l15, $l16;
        java.lang.Object r1, $r3;
        int i2, $i6, $i7, $i11, $i13, $i14, $i17;
        java.lang.Throwable r2, $r10;
        byte $b4, $b5, $b12;
        char[] $r4;
        java.io.Reader $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r11;
        java.lang.IllegalArgumentException $r9;
        java.lang.String $r12;

        r0 := @this: java.io.PushbackReader;

        l0 := @parameter0: long;

        $b4 = l0 cmp 0L;

        if $b4 >= 0 goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("charCount < 0: ");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;

     label01:
        $r3 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label02:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $b5 = l0 cmp 0L;

        if $b5 != 0 goto label04;

        exitmonitor r1;

     label03:
        return 0L;

     label04:
        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        $i7 = lengthof $r4;

        $i6 = r0.<java.io.PushbackReader: int pos>;

        i2 = $i7 - $i6;

        if i2 <= 0 goto label07;

        $l9 = (long) i2;

        l3 = l0 - $l9;

        $b12 = l3 cmp 0L;

        if $b12 > 0 goto label06;

        $i14 = r0.<java.io.PushbackReader: int pos>;

        $l16 = (long) $i14;

        $l15 = $l16 + l0;

        $i17 = (int) $l15;

        r0.<java.io.PushbackReader: int pos> = $i17;

        exitmonitor r1;

     label05:
        return l0;

     label06:
        $i11 = r0.<java.io.PushbackReader: int pos>;

        $i13 = $i11 + i2;

        r0.<java.io.PushbackReader: int pos> = $i13;

        $r6 = r0.<java.io.PushbackReader: java.io.Reader in>;

        l1 = virtualinvoke $r6.<java.io.Reader: long skip(long)>(l3);

        goto label08;

     label07:
        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        l1 = virtualinvoke $r5.<java.io.Reader: long skip(long)>(l0);

     label08:
        $l8 = (long) i2;

        $l10 = l1 + $l8;

        exitmonitor r1;

     label09:
        return $l10;

     label10:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r1;

     label11:
        throw r2;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }
}
