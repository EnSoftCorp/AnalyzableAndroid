class java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater extends java.util.concurrent.atomic.AtomicLongFieldUpdater
{
    private static final sun.misc.Unsafe unsafe;
    private final long offset;
    private final java.lang.Class tclass;
    private final java.lang.Class cclass;

    void <init>(java.lang.Class, java.lang.String)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Class r1, r4, $r6, $r9, r13;
        java.lang.String r2;
        java.lang.reflect.Field r3;
        int i0;
        java.lang.Exception r5, $r10;
        boolean $z0, $z1;
        sun.misc.Unsafe $r7;
        long $l1;
        java.lang.IllegalArgumentException $r8, $r11;
        java.lang.RuntimeException $r12;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater: void <init>()>();

     label1:
        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r2);

        r4 = staticinvoke <dalvik.system.VMStack: java.lang.Class getStackClass2()>();

        i0 = virtualinvoke r3.<java.lang.reflect.Field: int getModifiers()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        r5 = $r10;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r5);

        throw $r12;

     label4:
        r13 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r13 == $r6 goto label5;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be long type");

        throw $r11;

     label5:
        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isVolatile(int)>(i0);

        if $z0 != 0 goto label6;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must be volatile type");

        throw $r8;

     label6:
        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i0);

        if $z1 == 0 goto label7;

        if r4 == r1 goto label7;

        $r9 = r4;

        goto label8;

     label7:
        $r9 = null;

     label8:
        r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass> = $r9;

        r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass> = r1;

        $r7 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l1 = virtualinvoke $r7.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r3);

        r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset> = $l1;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void fullCheck(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r3;
        boolean $z0;
        java.lang.ClassCastException $r4;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r4 = new java.lang.ClassCastException;

        specialinvoke $r4.<java.lang.ClassCastException: void <init>()>();

        throw $r4;

     label1:
        $r3 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r3 == null goto label2;

        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void ensureProtectedAccess(java.lang.Object)>(r1);

     label2:
        return;
    }

    public boolean compareAndSet(java.lang.Object, long, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        sun.misc.Unsafe $r2;
        boolean $z0;
        java.lang.Class $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        if $r3 != $r4 goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r5 == null goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void fullCheck(java.lang.Object)>(r1);

     label2:
        $r2 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l2 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r1, $l2, l0, l1);

        return $z0;
    }

    public boolean weakCompareAndSet(java.lang.Object, long, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        sun.misc.Unsafe $r2;
        boolean $z0;
        java.lang.Class $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        if $r3 != $r4 goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r5 == null goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void fullCheck(java.lang.Object)>(r1);

     label2:
        $r2 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l2 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset>;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r1, $l2, l0, l1);

        return $z0;
    }

    public void set(java.lang.Object, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        long l0, $l1;
        sun.misc.Unsafe $r2;
        java.lang.Class $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        if $r3 != $r4 goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r5 == null goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void fullCheck(java.lang.Object)>(r1);

     label2:
        $r2 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l1 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>(r1, $l1, l0);

        return;
    }

    public void lazySet(java.lang.Object, long)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        long l0, $l1;
        sun.misc.Unsafe $r2;
        java.lang.Class $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        if $r3 != $r4 goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r5 == null goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void fullCheck(java.lang.Object)>(r1);

     label2:
        $r2 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l1 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset>;

        virtualinvoke $r2.<sun.misc.Unsafe: void putOrderedLong(java.lang.Object,long,long)>(r1, $l1, l0);

        return;
    }

    public long get(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        long $l0, $l1;
        sun.misc.Unsafe $r2;
        java.lang.Class $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        if $r3 != $r4 goto label1;

        $r5 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        if $r5 == null goto label2;

     label1:
        specialinvoke r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: void fullCheck(java.lang.Object)>(r1);

     label2:
        $r2 = <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe>;

        $l0 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: long offset>;

        $l1 = virtualinvoke $r2.<sun.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, $l0);

        return $l1;
    }

    private void ensureProtectedAccess(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater r0;
        java.lang.Object r1;
        java.lang.Class $r2, $r7, $r11, $r16;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.IllegalAccessException $r4;
        java.lang.StringBuilder $r5, $r6, $r9, $r10, $r13, $r14, $r18;
        java.lang.String $r8, $r12, $r15, $r17;

        r0 := @this: java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.IllegalAccessException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r7 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class cclass>;

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can not access a protected member of class ");

        $r11 = r0.<java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: java.lang.Class tclass>;

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using an instance of ");

        $r16 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r17);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r3;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicLongFieldUpdater$CASUpdater: sun.misc.Unsafe unsafe> = $r0;

        return;
    }
}
