public final class java.lang.reflect.Field extends java.lang.reflect.AccessibleObject implements java.lang.reflect.Member
{
    public static final java.util.Comparator ORDER_BY_NAME_AND_DECLARING_CLASS;
    private final java.lang.reflect.ArtField artField;

    public void <init>(java.lang.reflect.ArtField)
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.reflect.ArtField;

        specialinvoke r0.<java.lang.reflect.AccessibleObject: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("artField == null");

        throw $r2;

     label1:
        r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField> = r1;

        return;
    }

    public int getModifiers()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        int $i0, $i1;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtField: int getAccessFlags()>();

        $i1 = $i0 & 65535;

        return $i1;
    }

    public boolean isEnumConstant()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtField: int getAccessFlags()>();

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isSynthetic()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtField: int getAccessFlags()>();

        $i1 = $i0 & 4096;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getName()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtField: java.lang.String getName()>();

        return $r2;
    }

    public java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtField: java.lang.Class getDeclaringClass()>();

        return $r2;
    }

    public java.lang.Class getType()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        java.lang.Class $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.ArtField: java.lang.Class getType()>();

        return $r2;
    }

    public int getDexFieldIndex()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        int $i0;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtField: int getDexFieldIndex()>();

        return $i0;
    }

    public int getOffset()
    {
        java.lang.reflect.Field r0;
        java.lang.reflect.ArtField $r1;
        int $i0;

        r0 := @this: java.lang.reflect.Field;

        $r1 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.ArtField: int getOffset()>();

        return $i0;
    }

    public int hashCode()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;
        java.lang.String $r2, $r3;
        int $i0, $i1, $i2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        $i1 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.reflect.Field r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.reflect.ArtField $r3, $r4;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.Field;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        $r2 = (java.lang.reflect.Field) r1;

        $r3 = $r2.<java.lang.reflect.Field: java.lang.reflect.ArtField artField>;

        if $r4 != $r3 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public java.lang.String toGenericString()
    {
        java.lang.reflect.Field r0;
        java.lang.StringBuilder r1, $r2, $r7, $r8, $r13;
        int i0;
        java.lang.reflect.Type $r3;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, $r11, $r12;

        r0 := @this: java.lang.reflect.Field;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(80);

        r1 = $r2;

        i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        if i0 == 0 goto label1;

        $r12 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        staticinvoke <libcore.reflect.Types: void appendGenericType(java.lang.StringBuilder,java.lang.reflect.Type)>(r1, $r3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r5 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.reflect.Type getGenericType()
    {
        java.lang.reflect.Field r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.ClassLoader r3;
        libcore.reflect.GenericSignatureParser r4, $r6;
        java.lang.reflect.Type r5;

        r0 := @this: java.lang.reflect.Field;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.String getSignature(java.lang.reflect.AnnotatedElement)>(r0);

        r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r6 = new libcore.reflect.GenericSignatureParser;

        specialinvoke $r6.<libcore.reflect.GenericSignatureParser: void <init>(java.lang.ClassLoader)>(r3);

        r4 = $r6;

        virtualinvoke r4.<libcore.reflect.GenericSignatureParser: void parseForField(java.lang.reflect.GenericDeclaration,java.lang.String)>(r2, r1);

        r5 = r4.<libcore.reflect.GenericSignatureParser: java.lang.reflect.Type fieldType>;

        if r5 != null goto label1;

        r5 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

     label1:
        return r5;
    }

    private java.lang.String getSignature()
    {
        java.lang.reflect.Field r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: java.lang.reflect.Field;

        $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r2 = staticinvoke <libcore.reflect.Types: java.lang.String getSignature(java.lang.Class)>($r1);

        return $r2;
    }

    public java.lang.annotation.Annotation[] getDeclaredAnnotations()
    {
        java.lang.reflect.Field r0;
        java.util.List r1;
        int $i0;
        java.lang.annotation.Annotation[] $r2, $r4;
        java.lang.Object[] $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 = staticinvoke <libcore.reflect.AnnotationAccess: java.util.List getDeclaredAnnotations(java.lang.reflect.AnnotatedElement)>(r0);

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.annotation.Annotation)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.annotation.Annotation[]) $r3;

        return $r4;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1;
        java.lang.annotation.Annotation $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r3;

     label1:
        $r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.annotation.Annotation getDeclaredAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)>(r0, r1);

        return $r2;
    }

    public boolean isAnnotationPresent(java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Class;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("annotationType == null");

        throw $r2;

     label1:
        $z0 = staticinvoke <libcore.reflect.AnnotationAccess: boolean isDeclaredAnnotationPresent(java.lang.reflect.AnnotatedElement,java.lang.Class)>(r0, r1);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $r2 = specialinvoke r0.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object,boolean)>(r1, $z0);

        return $r2;
    }

    private native java.lang.Object get(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public boolean getBoolean(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $z1 = specialinvoke r0.<java.lang.reflect.Field: boolean getBoolean(java.lang.Object,boolean)>(r1, $z0);

        return $z1;
    }

    private native boolean getBoolean(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public byte getByte(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        byte $b0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $b0 = specialinvoke r0.<java.lang.reflect.Field: byte getByte(java.lang.Object,boolean)>(r1, $z0);

        return $b0;
    }

    private native byte getByte(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public char getChar(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        char $c0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $c0 = specialinvoke r0.<java.lang.reflect.Field: char getChar(java.lang.Object,boolean)>(r1, $z0);

        return $c0;
    }

    private native char getChar(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public double getDouble(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        double $d0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $d0 = specialinvoke r0.<java.lang.reflect.Field: double getDouble(java.lang.Object,boolean)>(r1, $z0);

        return $d0;
    }

    private native double getDouble(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public float getFloat(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        float $f0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $f0 = specialinvoke r0.<java.lang.reflect.Field: float getFloat(java.lang.Object,boolean)>(r1, $z0);

        return $f0;
    }

    private native float getFloat(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public int getInt(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $i0 = specialinvoke r0.<java.lang.reflect.Field: int getInt(java.lang.Object,boolean)>(r1, $z0);

        return $i0;
    }

    private native int getInt(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public long getLong(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        long $l0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $l0 = specialinvoke r0.<java.lang.reflect.Field: long getLong(java.lang.Object,boolean)>(r1, $z0);

        return $l0;
    }

    private native long getLong(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public short getShort(java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean $z0;
        short $s0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        $s0 = specialinvoke r0.<java.lang.reflect.Field: short getShort(java.lang.Object,boolean)>(r1, $z0);

        return $s0;
    }

    private native short getShort(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void set(java.lang.Object, java.lang.Object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object,boolean)>(r1, r2, $z0);

        return;
    }

    private native void set(java.lang.Object, java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setBoolean(java.lang.Object, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        boolean z0, $z1;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean,boolean)>(r1, z0, $z1);

        return;
    }

    private native void setBoolean(java.lang.Object, boolean, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setByte(java.lang.Object, byte) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        byte b0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        b0 := @parameter1: byte;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setByte(java.lang.Object,byte,boolean)>(r1, b0, $z0);

        return;
    }

    private native void setByte(java.lang.Object, byte, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setChar(java.lang.Object, char) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        char c0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        c0 := @parameter1: char;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setChar(java.lang.Object,char,boolean)>(r1, c0, $z0);

        return;
    }

    private native void setChar(java.lang.Object, char, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setDouble(java.lang.Object, double) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        double d0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        d0 := @parameter1: double;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setDouble(java.lang.Object,double,boolean)>(r1, d0, $z0);

        return;
    }

    private native void setDouble(java.lang.Object, double, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setFloat(java.lang.Object, float) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        float f0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        f0 := @parameter1: float;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setFloat(java.lang.Object,float,boolean)>(r1, f0, $z0);

        return;
    }

    private native void setFloat(java.lang.Object, float, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setInt(java.lang.Object, int) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        int i0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setInt(java.lang.Object,int,boolean)>(r1, i0, $z0);

        return;
    }

    private native void setInt(java.lang.Object, int, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setLong(java.lang.Object, long) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        long l0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setLong(java.lang.Object,long,boolean)>(r1, l0, $z0);

        return;
    }

    private native void setLong(java.lang.Object, long, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public void setShort(java.lang.Object, short) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException
    {
        java.lang.reflect.Field r0;
        java.lang.Object r1;
        short s0;
        boolean $z0;

        r0 := @this: java.lang.reflect.Field;

        r1 := @parameter0: java.lang.Object;

        s0 := @parameter1: short;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAccessible()>();

        specialinvoke r0.<java.lang.reflect.Field: void setShort(java.lang.Object,short,boolean)>(r1, s0, $z0);

        return;
    }

    private native void setShort(java.lang.Object, short, boolean) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;

    public java.lang.String toString()
    {
        java.lang.reflect.Field r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1;
        java.lang.String $r3, $r7, $r10, $r12;
        java.lang.Class $r4, $r6;

        r0 := @this: java.lang.reflect.Field;

        $r2 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.lang.reflect.Field: int getModifiers()>();

        $r3 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>($i0);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        r1 = $r2;

        $i1 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i1 == 0 goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label1:
        $r4 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>();

        staticinvoke <libcore.reflect.Types: void appendTypeName(java.lang.StringBuilder,java.lang.Class)>(r1, $r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r10 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    static void <clinit>()
    {
        java.lang.reflect.Field$1 $r0;

        $r0 = new java.lang.reflect.Field$1;

        specialinvoke $r0.<java.lang.reflect.Field$1: void <init>()>();

        <java.lang.reflect.Field: java.util.Comparator ORDER_BY_NAME_AND_DECLARING_CLASS> = $r0;

        return;
    }
}
