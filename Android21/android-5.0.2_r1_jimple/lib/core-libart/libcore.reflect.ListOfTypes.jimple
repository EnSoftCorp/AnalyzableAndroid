public final class libcore.reflect.ListOfTypes extends java.lang.Object
{
    public static final libcore.reflect.ListOfTypes EMPTY;
    private final java.util.ArrayList types;
    private java.lang.reflect.Type[] resolvedTypes;

    void <init>(int)
    {
        libcore.reflect.ListOfTypes r0;
        int i0;
        java.util.ArrayList $r1;

        r0 := @this: libcore.reflect.ListOfTypes;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types> = $r1;

        return;
    }

    void <init>(java.lang.reflect.Type[])
    {
        libcore.reflect.ListOfTypes r0;
        java.lang.reflect.Type[] r1, r2;
        int i0, i1, $i2;
        java.lang.reflect.Type r3;
        java.util.ArrayList $r4, $r5;

        r0 := @this: libcore.reflect.ListOfTypes;

        r1 := @parameter0: java.lang.reflect.Type[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.ArrayList;

        $i2 = lengthof r1;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types> = $r4;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = r2[i1];

        $r5 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void add(java.lang.reflect.Type)
    {
        libcore.reflect.ListOfTypes r0;
        java.lang.reflect.Type r1;
        java.util.ArrayList $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: libcore.reflect.ListOfTypes;

        r1 := @parameter0: java.lang.reflect.Type;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r3;

     label1:
        $r2 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    int length()
    {
        libcore.reflect.ListOfTypes r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: libcore.reflect.ListOfTypes;

        $r1 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.lang.reflect.Type[] getResolvedTypes()
    {
        libcore.reflect.ListOfTypes r0;
        java.lang.reflect.Type[] r1;
        java.util.ArrayList $r2;

        r0 := @this: libcore.reflect.ListOfTypes;

        r1 = r0.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes>;

        if r1 != null goto label1;

        $r2 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        r1 = specialinvoke r0.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] resolveTypes(java.util.List)>($r2);

        r0.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes> = r1;

     label1:
        return r1;
    }

    private java.lang.reflect.Type[] resolveTypes(java.util.List)
    {
        libcore.reflect.ListOfTypes r0;
        java.util.List r1;
        int i0, i1;
        java.lang.reflect.Type[] r2, $r8;
        java.lang.reflect.Type r3, $r7;
        java.lang.Object $r5;
        libcore.reflect.ParameterizedTypeImpl $r6;
        java.lang.ClassCastException $r9;

        r0 := @this: libcore.reflect.ListOfTypes;

        r1 := @parameter0: java.util.List;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 != 0 goto label1;

        $r8 = <libcore.util.EmptyArray: java.lang.reflect.Type[] TYPE>;

        return $r8;

     label1:
        r2 = newarray (java.lang.reflect.Type)[i0];

        i1 = 0;

     label2:
        if i1 >= i0 goto label7;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.lang.reflect.Type) $r5;

     label3:
        $r6 = (libcore.reflect.ParameterizedTypeImpl) r3;

        $r7 = virtualinvoke $r6.<libcore.reflect.ParameterizedTypeImpl: java.lang.reflect.Type getResolvedType()>();

        r2[i1] = $r7;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r2[i1] = r3;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        return r2;

        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public java.lang.String toString()
    {
        libcore.reflect.ListOfTypes r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1;
        java.util.ArrayList $r3, $r5;
        java.lang.String $r4;
        java.lang.Object $r6;

        r0 := @this: libcore.reflect.ListOfTypes;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        i0 = 0;

     label1:
        $r3 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i0 >= $i1 goto label3;

        if i0 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r5 = r0.<libcore.reflect.ListOfTypes: java.util.ArrayList types>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        i0 = i0 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    static void <clinit>()
    {
        libcore.reflect.ListOfTypes $r0;

        $r0 = new libcore.reflect.ListOfTypes;

        specialinvoke $r0.<libcore.reflect.ListOfTypes: void <init>(int)>(0);

        <libcore.reflect.ListOfTypes: libcore.reflect.ListOfTypes EMPTY> = $r0;

        return;
    }
}
