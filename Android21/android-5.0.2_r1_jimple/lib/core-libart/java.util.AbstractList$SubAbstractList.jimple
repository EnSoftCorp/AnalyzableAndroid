class java.util.AbstractList$SubAbstractList extends java.util.AbstractList
{
    private final java.util.AbstractList fullList;
    private int offset;
    private int size;

    void <init>(java.util.AbstractList, int, int)
    {
        java.util.AbstractList$SubAbstractList r0;
        java.util.AbstractList r1, $r2;
        int i0, i1, $i2, $i3;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        r1 := @parameter0: java.util.AbstractList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList> = r1;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i2 = $r2.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i2;

        r0.<java.util.AbstractList$SubAbstractList: int offset> = i0;

        $i3 = i1 - i0;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i3;

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object r1;
        java.util.AbstractList $r2, $r5, $r6;
        java.util.ConcurrentModificationException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r2.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label2;

        if i0 < 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 > $i3 goto label1;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        virtualinvoke $r5.<java.util.AbstractList: void add(int,java.lang.Object)>($i5, r1);

        $i6 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i7 = $i6 + 1;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i7;

        $r6 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i8 = $r6.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i8;

        goto label3;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Collection r1;
        boolean z0;
        java.util.AbstractList $r2, $r5, $r6;
        java.util.ConcurrentModificationException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r2.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label3;

        if i0 < 0 goto label2;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 > $i3 goto label2;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        z0 = virtualinvoke $r5.<java.util.AbstractList: boolean addAll(int,java.util.Collection)>($i5, r1);

        if z0 == 0 goto label1;

        $i6 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i7 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i8 = $i6 + $i7;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i8;

        $r6 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i9 = $r6.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i9;

     label1:
        return z0;

     label2:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label3:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.AbstractList$SubAbstractList r0;
        java.util.Collection r1;
        boolean z0;
        java.util.AbstractList $r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.ConcurrentModificationException $r3;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        r1 := @parameter0: java.util.Collection;

        $i1 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i0 = $r2.<java.util.AbstractList: int modCount>;

        if $i1 != $i0 goto label2;

        $r4 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i4 = $i3 + $i2;

        z0 = virtualinvoke $r4.<java.util.AbstractList: boolean addAll(int,java.util.Collection)>($i4, r1);

        if z0 == 0 goto label1;

        $i5 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i6 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $i7 = $i5 + $i6;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i7;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i8 = $r5.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i8;

     label1:
        return z0;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public java.lang.Object get(int)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.AbstractList $r1, $r4;
        java.util.ConcurrentModificationException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.Object $r5;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r1 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r1.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label2;

        if i0 < 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 >= $i3 goto label1;

        $r4 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        $r5 = virtualinvoke $r4.<java.util.AbstractList: java.lang.Object get(int)>($i5);

        return $r5;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }

    public java.util.Iterator iterator()
    {
        java.util.AbstractList$SubAbstractList r0;
        java.util.ListIterator $r1;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        $r1 = virtualinvoke r0.<java.util.AbstractList$SubAbstractList: java.util.ListIterator listIterator(int)>(0);

        return $r1;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.AbstractList $r1, $r5;
        java.util.ConcurrentModificationException $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.util.AbstractList$SubAbstractList$SubAbstractListIterator $r4;
        java.util.ListIterator $r6;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r1 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r1.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label2;

        if i0 < 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 > $i3 goto label1;

        $r4 = new java.util.AbstractList$SubAbstractList$SubAbstractListIterator;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        $r6 = virtualinvoke $r5.<java.util.AbstractList: java.util.ListIterator listIterator(int)>($i5);

        $i7 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i6 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        specialinvoke $r4.<java.util.AbstractList$SubAbstractList$SubAbstractListIterator: void <init>(java.util.ListIterator,java.util.AbstractList$SubAbstractList,int,int)>($r6, r0, $i7, $i6);

        return $r4;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }

    public java.lang.Object remove(int)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Object r1;
        java.util.AbstractList $r2, $r5, $r6;
        java.util.ConcurrentModificationException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r2.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label2;

        if i0 < 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 >= $i3 goto label1;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        r1 = virtualinvoke $r5.<java.util.AbstractList: java.lang.Object remove(int)>($i5);

        $i6 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i7 = $i6 - 1;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i7;

        $r6 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i8 = $r6.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i8;

        return r1;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    protected void removeRange(int, int)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.AbstractList $r1, $r3, $r4;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == i1 goto label2;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r1 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i2 = $r1.<java.util.AbstractList: int modCount>;

        if $i3 != $i2 goto label1;

        $r3 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i7 = i0 + $i4;

        $i5 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i6 = i1 + $i5;

        virtualinvoke $r3.<java.util.AbstractList: void removeRange(int,int)>($i7, $i6);

        $i9 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i8 = i1 - i0;

        $i10 = $i9 - $i8;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i10;

        $r4 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i11 = $r4.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i11;

        goto label2;

     label1:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;

     label2:
        return;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.AbstractList$SubAbstractList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1, $r6;
        java.util.AbstractList $r2, $r5;
        java.util.ConcurrentModificationException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r2 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i1 = $r2.<java.util.AbstractList: int modCount>;

        if $i2 != $i1 goto label2;

        if i0 < 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        if i0 >= $i3 goto label1;

        $r5 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i4 = r0.<java.util.AbstractList$SubAbstractList: int offset>;

        $i5 = i0 + $i4;

        $r6 = virtualinvoke $r5.<java.util.AbstractList: java.lang.Object set(int,java.lang.Object)>($i5, r1);

        return $r6;

     label1:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $r3 = new java.util.ConcurrentModificationException;

        specialinvoke $r3.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r3;
    }

    public int size()
    {
        java.util.AbstractList$SubAbstractList r0;
        java.util.AbstractList $r1;
        int $i0, $i1, $i2;
        java.util.ConcurrentModificationException $r2;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        $i1 = r0.<java.util.AbstractList$SubAbstractList: int modCount>;

        $r1 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i0 = $r1.<java.util.AbstractList: int modCount>;

        if $i1 != $i0 goto label1;

        $i2 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        return $i2;

     label1:
        $r2 = new java.util.ConcurrentModificationException;

        specialinvoke $r2.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r2;
    }

    void sizeChanged(boolean)
    {
        java.util.AbstractList$SubAbstractList r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.AbstractList $r1;

        r0 := @this: java.util.AbstractList$SubAbstractList;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i3 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i4 = $i3 + 1;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i4;

        goto label2;

     label1:
        $i0 = r0.<java.util.AbstractList$SubAbstractList: int size>;

        $i1 = $i0 - 1;

        r0.<java.util.AbstractList$SubAbstractList: int size> = $i1;

     label2:
        $r1 = r0.<java.util.AbstractList$SubAbstractList: java.util.AbstractList fullList>;

        $i2 = $r1.<java.util.AbstractList: int modCount>;

        r0.<java.util.AbstractList$SubAbstractList: int modCount> = $i2;

        return;
    }
}
