public abstract class javax.net.ssl.SSLEngine extends java.lang.Object
{
    private final java.lang.String peerHost;
    private final int peerPort;

    protected void <init>()
    {
        javax.net.ssl.SSLEngine r0;

        r0 := @this: javax.net.ssl.SSLEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.net.ssl.SSLEngine: java.lang.String peerHost> = null;

        r0.<javax.net.ssl.SSLEngine: int peerPort> = -1;

        return;
    }

    protected void <init>(java.lang.String, int)
    {
        javax.net.ssl.SSLEngine r0;
        java.lang.String r1;
        int i0;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.net.ssl.SSLEngine: java.lang.String peerHost> = r1;

        r0.<javax.net.ssl.SSLEngine: int peerPort> = i0;

        return;
    }

    public java.lang.String getPeerHost()
    {
        javax.net.ssl.SSLEngine r0;
        java.lang.String $r1;

        r0 := @this: javax.net.ssl.SSLEngine;

        $r1 = r0.<javax.net.ssl.SSLEngine: java.lang.String peerHost>;

        return $r1;
    }

    public int getPeerPort()
    {
        javax.net.ssl.SSLEngine r0;
        int $i0;

        r0 := @this: javax.net.ssl.SSLEngine;

        $i0 = r0.<javax.net.ssl.SSLEngine: int peerPort>;

        return $i0;
    }

    public abstract void beginHandshake() throws javax.net.ssl.SSLException;

    public abstract void closeInbound() throws javax.net.ssl.SSLException;

    public abstract void closeOutbound();

    public abstract java.lang.Runnable getDelegatedTask();

    public abstract java.lang.String[] getEnabledCipherSuites();

    public abstract java.lang.String[] getEnabledProtocols();

    public abstract boolean getEnableSessionCreation();

    public abstract javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus();

    public abstract boolean getNeedClientAuth();

    public abstract javax.net.ssl.SSLSession getSession();

    public abstract java.lang.String[] getSupportedCipherSuites();

    public abstract java.lang.String[] getSupportedProtocols();

    public abstract boolean getUseClientMode();

    public abstract boolean getWantClientAuth();

    public abstract boolean isInboundDone();

    public abstract boolean isOutboundDone();

    public abstract void setEnabledCipherSuites(java.lang.String[]);

    public abstract void setEnabledProtocols(java.lang.String[]);

    public abstract void setEnableSessionCreation(boolean);

    public abstract void setNeedClientAuth(boolean);

    public abstract void setUseClientMode(boolean);

    public abstract void setWantClientAuth(boolean);

    public abstract javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException;

    public abstract javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException;

    public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        javax.net.ssl.SSLEngine r0;
        java.nio.ByteBuffer r1, r2;
        java.nio.ByteBuffer[] $r3;
        javax.net.ssl.SSLEngineResult $r4;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = newarray (java.nio.ByteBuffer)[1];

        $r3[0] = r2;

        $r4 = virtualinvoke r0.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)>(r1, $r3, 0, 1);

        return $r4;
    }

    public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[]) throws javax.net.ssl.SSLException
    {
        javax.net.ssl.SSLEngine r0;
        java.nio.ByteBuffer r1;
        java.nio.ByteBuffer[] r2;
        int $i0;
        javax.net.ssl.SSLEngineResult $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer[];

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte buffer array dsts is null");

        throw $r4;

     label1:
        $i0 = lengthof r2;

        $r3 = virtualinvoke r0.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)>(r1, r2, 0, $i0);

        return $r3;
    }

    public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        javax.net.ssl.SSLEngine r0;
        java.nio.ByteBuffer[] r1;
        java.nio.ByteBuffer r2;
        int $i0;
        javax.net.ssl.SSLEngineResult $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: java.nio.ByteBuffer[];

        r2 := @parameter1: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Byte buffer array srcs is null");

        throw $r4;

     label1:
        $i0 = lengthof r1;

        $r3 = virtualinvoke r0.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>(r1, 0, $i0, r2);

        return $r3;
    }

    public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        javax.net.ssl.SSLEngine r0;
        java.nio.ByteBuffer r1, r2;
        java.nio.ByteBuffer[] $r3;
        javax.net.ssl.SSLEngineResult $r4;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r3 = newarray (java.nio.ByteBuffer)[1];

        $r3[0] = r1;

        $r4 = virtualinvoke r0.<javax.net.ssl.SSLEngine: javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)>($r3, 0, 1, r2);

        return $r4;
    }

    public javax.net.ssl.SSLParameters getSSLParameters()
    {
        javax.net.ssl.SSLEngine r0;
        javax.net.ssl.SSLParameters r1, $r2;
        java.lang.String[] $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: javax.net.ssl.SSLEngine;

        $r2 = new javax.net.ssl.SSLParameters;

        specialinvoke $r2.<javax.net.ssl.SSLParameters: void <init>()>();

        r1 = $r2;

        $r3 = virtualinvoke r0.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledCipherSuites()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setCipherSuites(java.lang.String[])>($r3);

        $r4 = virtualinvoke r0.<javax.net.ssl.SSLEngine: java.lang.String[] getEnabledProtocols()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setProtocols(java.lang.String[])>($r4);

        $z0 = virtualinvoke r0.<javax.net.ssl.SSLEngine: boolean getNeedClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setNeedClientAuth(boolean)>($z0);

        $z1 = virtualinvoke r0.<javax.net.ssl.SSLEngine: boolean getWantClientAuth()>();

        virtualinvoke r1.<javax.net.ssl.SSLParameters: void setWantClientAuth(boolean)>($z1);

        return r1;
    }

    public void setSSLParameters(javax.net.ssl.SSLParameters)
    {
        javax.net.ssl.SSLEngine r0;
        javax.net.ssl.SSLParameters r1;
        java.lang.String[] r2, r3;
        boolean $z0, $z1;

        r0 := @this: javax.net.ssl.SSLEngine;

        r1 := @parameter0: javax.net.ssl.SSLParameters;

        r2 = virtualinvoke r1.<javax.net.ssl.SSLParameters: java.lang.String[] getCipherSuites()>();

        if r2 == null goto label1;

        virtualinvoke r0.<javax.net.ssl.SSLEngine: void setEnabledCipherSuites(java.lang.String[])>(r2);

     label1:
        r3 = virtualinvoke r1.<javax.net.ssl.SSLParameters: java.lang.String[] getProtocols()>();

        if r3 == null goto label2;

        virtualinvoke r0.<javax.net.ssl.SSLEngine: void setEnabledProtocols(java.lang.String[])>(r3);

     label2:
        $z0 = virtualinvoke r1.<javax.net.ssl.SSLParameters: boolean getNeedClientAuth()>();

        if $z0 == 0 goto label3;

        virtualinvoke r0.<javax.net.ssl.SSLEngine: void setNeedClientAuth(boolean)>(1);

        goto label5;

     label3:
        $z1 = virtualinvoke r1.<javax.net.ssl.SSLParameters: boolean getWantClientAuth()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>(1);

        goto label5;

     label4:
        virtualinvoke r0.<javax.net.ssl.SSLEngine: void setWantClientAuth(boolean)>(0);

     label5:
        return;
    }
}
