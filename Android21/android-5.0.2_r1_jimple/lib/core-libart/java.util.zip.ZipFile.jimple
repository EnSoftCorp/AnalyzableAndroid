public class java.util.zip.ZipFile extends java.lang.Object implements java.io.Closeable, java.util.zip.ZipConstants
{
    static final int GPBF_ENCRYPTED_FLAG;
    static final int GPBF_DATA_DESCRIPTOR_FLAG;
    static final int GPBF_UTF8_FLAG;
    static final int GPBF_UNSUPPORTED_MASK;
    public static final int OPEN_READ;
    public static final int OPEN_DELETE;
    private final java.lang.String filename;
    private java.io.File fileToDeleteOnClose;
    private java.io.RandomAccessFile raf;
    private final java.util.LinkedHashMap entries;
    private java.lang.String comment;
    private final dalvik.system.CloseGuard guard;

    public void <init>(java.io.File) throws java.util.zip.ZipException, java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.File r1;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.util.zip.ZipFile: void <init>(java.io.File,int)>(r1, 1);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.lang.String;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.util.zip.ZipFile: void <init>(java.io.File,int)>($r2, 1);

        return;
    }

    public void <init>(java.io.File, int) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.File r1, $r10;
        int i0, $i1;
        boolean z0, z1;
        java.lang.Throwable r2, $r15;
        java.util.LinkedHashMap $r3;
        dalvik.system.CloseGuard $r4, $r8;
        java.lang.String $r5, $r7, $r16;
        java.io.RandomAccessFile $r6, $r9, $r17;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.io.File;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries> = $r3;

        $r4 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard> = $r4;

        $r5 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        r0.<java.util.zip.ZipFile: java.lang.String filename> = $r5;

        if i0 == 1 goto label1;

        if i0 == 5 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad mode: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label1:
        $i1 = i0 & 4;

        if $i1 == 0 goto label2;

        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = r1;

        $r10 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        virtualinvoke $r10.<java.io.File: void deleteOnExit()>();

        goto label3;

     label2:
        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = null;

     label3:
        $r6 = new java.io.RandomAccessFile;

        $r7 = r0.<java.util.zip.ZipFile: java.lang.String filename>;

        specialinvoke $r6.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r7, "r");

        r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf> = $r6;

        z0 = 1;

     label4:
        specialinvoke r0.<java.util.zip.ZipFile: void readCentralDir()>();

        z1 = 0;

     label5:
        if z1 == 0 goto label9;

        $r9 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r9);

        goto label9;

     label6:
        $r15 := @caughtexception;

        r2 = $r15;

     label7:
        if z0 == 0 goto label8;

        $r17 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r17);

     label8:
        throw r2;

     label9:
        $r8 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r8.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void finalize() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.lang.Throwable r1, r2, r3, $r6, $r7, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r8, $r10;

        r0 := @this: java.util.zip.ZipFile;

     label01:
        $r4 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label02;

        $r5 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label02:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label03:
        goto label10;

     label04:
        $r9 := @caughtexception;

        r1 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r10;

     label05:
        $r6 := @caughtexception;

        r2 = $r6;

     label06:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label07:
        goto label09;

     label08:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r8;

     label09:
        throw r2;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.io.RandomAccessFile r1, r2;
        java.lang.Throwable r3, $r8;
        dalvik.system.CloseGuard $r4;
        java.io.File $r6, $r7;

        r0 := @this: java.util.zip.ZipFile;

        $r4 = r0.<java.util.zip.ZipFile: dalvik.system.CloseGuard guard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void close()>();

        r1 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        if r1 == null goto label6;

        r2 = r1;

        entermonitor r1;

     label1:
        r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf> = null;

        virtualinvoke r1.<java.io.RandomAccessFile: void close()>();

        exitmonitor r2;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label4:
        throw r3;

     label5:
        $r6 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        if $r6 == null goto label6;

        $r7 = r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose>;

        virtualinvoke $r7.<java.io.File: boolean delete()>();

        r0.<java.util.zip.ZipFile: java.io.File fileToDeleteOnClose> = null;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkNotClosed()
    {
        java.util.zip.ZipFile r0;
        java.io.RandomAccessFile $r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.zip.ZipFile;

        $r1 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Zip file closed");

        throw $r2;

     label1:
        return;
    }

    public java.util.Enumeration entries()
    {
        java.util.zip.ZipFile r0;
        java.util.Iterator r1;
        java.util.LinkedHashMap $r2;
        java.util.Collection $r3;
        java.util.zip.ZipFile$1 $r4;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r2 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r3 = virtualinvoke $r2.<java.util.LinkedHashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = new java.util.zip.ZipFile$1;

        specialinvoke $r4.<java.util.zip.ZipFile$1: void <init>(java.util.zip.ZipFile,java.util.Iterator)>(r0, r1);

        return $r4;
    }

    public java.lang.String getComment()
    {
        java.util.zip.ZipFile r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r1 = r0.<java.util.zip.ZipFile: java.lang.String comment>;

        return $r1;
    }

    public java.util.zip.ZipEntry getEntry(java.lang.String)
    {
        java.util.zip.ZipFile r0;
        java.lang.String r1, $r9;
        java.util.zip.ZipEntry r2;
        java.util.LinkedHashMap $r3, $r6;
        java.lang.Object $r4, $r10;
        java.lang.StringBuilder $r5, $r7, $r8;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("entryName == null");

        throw $r11;

     label1:
        $r3 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r4 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.zip.ZipEntry) $r4;

        if r2 != null goto label2;

        $r6 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r9);

        r2 = (java.util.zip.ZipEntry) $r10;

     label2:
        return r2;
    }

    public java.io.InputStream getInputStream(java.util.zip.ZipEntry) throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        java.util.zip.ZipEntry r1, r19;
        java.io.RandomAccessFile r2, r3;
        java.util.zip.ZipFile$RAFStream r4, $r9;
        java.io.DataInputStream r5, $r10;
        int i0, i1, i2, i3, i4, $i6, $i11, $i17, $i19, $i26;
        java.lang.Throwable r6, $r17;
        java.lang.String $r7, $r18;
        long $l5, $l8, $l20, $l21, $l24, $l25, $l27, $l28, $l29, $l31, $l32;
        byte $b7;
        short $s9, $s12, $s13, $s15, $s16, $s18;
        java.util.zip.ZipFile$ZipInflaterInputStream $r11;
        java.util.zip.Inflater $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.util.zip.ZipException $r16;

        r0 := @this: java.util.zip.ZipFile;

        r1 := @parameter0: java.util.zip.ZipEntry;

        $r7 = virtualinvoke r1.<java.util.zip.ZipEntry: java.lang.String getName()>();

        r19 = virtualinvoke r0.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r7);

        if r19 != null goto label1;

        return null;

     label1:
        r2 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        r3 = r2;

        entermonitor r2;

     label2:
        $r9 = new java.util.zip.ZipFile$RAFStream;

        $l5 = r19.<java.util.zip.ZipEntry: long localHeaderRelOffset>;

        specialinvoke $r9.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long)>(r2, $l5);

        r4 = $r9;

        $r10 = new java.io.DataInputStream;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r4);

        r5 = $r10;

        $i6 = virtualinvoke r5.<java.io.DataInputStream: int readInt()>();

        i0 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i6);

        $l8 = (long) i0;

        $b7 = $l8 cmp 67324752L;

        if $b7 == 0 goto label3;

        staticinvoke <java.util.zip.ZipFile: void throwZipException(java.lang.String,int)>("Local File Header", i0);

     label3:
        virtualinvoke r5.<java.io.DataInputStream: int skipBytes(int)>(2);

        $s9 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s12 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s9);

        i1 = $s12 & 65535;

        $i11 = i1 & 1;

        if $i11 == 0 goto label4;

        $r16 = new java.util.zip.ZipException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid General Purpose Bit Flag: ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.util.zip.ZipException: void <init>(java.lang.String)>($r18);

        throw $r16;

     label4:
        virtualinvoke r5.<java.io.DataInputStream: int skipBytes(int)>(18);

        $s13 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s16 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s13);

        i2 = $s16 & 65535;

        $s15 = virtualinvoke r5.<java.io.DataInputStream: short readShort()>();

        $s18 = staticinvoke <java.lang.Short: short reverseBytes(short)>($s15);

        i3 = $s18 & 65535;

        virtualinvoke r5.<java.io.DataInputStream: void close()>();

        $i17 = i2 + i3;

        $l21 = (long) $i17;

        virtualinvoke r4.<java.util.zip.ZipFile$RAFStream: long skip(long)>($l21);

        $i19 = r19.<java.util.zip.ZipEntry: int compressionMethod>;

        if $i19 != 0 goto label6;

        $l29 = staticinvoke <java.util.zip.ZipFile$RAFStream: long access$200(java.util.zip.ZipFile$RAFStream)>(r4);

        $l32 = r19.<java.util.zip.ZipEntry: long size>;

        $l31 = $l29 + $l32;

        staticinvoke <java.util.zip.ZipFile$RAFStream: long access$102(java.util.zip.ZipFile$RAFStream,long)>(r4, $l31);

        exitmonitor r3;

     label5:
        return r4;

     label6:
        $l20 = staticinvoke <java.util.zip.ZipFile$RAFStream: long access$200(java.util.zip.ZipFile$RAFStream)>(r4);

        $l24 = r19.<java.util.zip.ZipEntry: long compressedSize>;

        $l25 = $l20 + $l24;

        staticinvoke <java.util.zip.ZipFile$RAFStream: long access$102(java.util.zip.ZipFile$RAFStream,long)>(r4, $l25);

        $l27 = virtualinvoke r19.<java.util.zip.ZipEntry: long getSize()>();

        $l28 = staticinvoke <java.lang.Math: long min(long,long)>($l27, 65535L);

        $i26 = (int) $l28;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(1024, $i26);

        $r11 = new java.util.zip.ZipFile$ZipInflaterInputStream;

        $r12 = new java.util.zip.Inflater;

        specialinvoke $r12.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r11.<java.util.zip.ZipFile$ZipInflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater,int,java.util.zip.ZipEntry)>(r4, $r12, i4, r19);

        exitmonitor r3;

     label7:
        return $r11;

     label8:
        $r17 := @caughtexception;

        r6 = $r17;

        exitmonitor r3;

     label9:
        throw r6;

        catch java.lang.Throwable from label2 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.lang.String getName()
    {
        java.util.zip.ZipFile r0;
        java.lang.String $r1;

        r0 := @this: java.util.zip.ZipFile;

        $r1 = r0.<java.util.zip.ZipFile: java.lang.String filename>;

        return $r1;
    }

    public int size()
    {
        java.util.zip.ZipFile r0;
        java.util.LinkedHashMap $r1;
        int $i0;

        r0 := @this: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        $r1 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $i0 = virtualinvoke $r1.<java.util.LinkedHashMap: int size()>();

        return $i0;
    }

    private void readCentralDir() throws java.io.IOException
    {
        java.util.zip.ZipFile r0;
        long l0, l2, l7, $l11, $l14, $l16, $l22, $l28, $l32, $l33;
        int i1, i3, i4, i5, i6, i8, i9, $i12, $i17, $i21, $i23, $i29, $i34;
        byte[] r1, r3, r4;
        libcore.io.BufferIterator r2;
        java.io.BufferedInputStream r5, $r16;
        java.util.zip.ZipEntry r6, $r21;
        java.io.RandomAccessFile $r7, $r9, $r10, $r11, $r12, $r15, $r17, $r26, $r35;
        java.lang.String r8, $r27, $r32, $r39;
        byte $b10, $b13, $b15, $b18, $b19, $b20, $b31;
        java.nio.ByteOrder $r13;
        java.util.zip.ZipException $r14, $r19, $r22, $r25, $r36, $r37, $r38;
        short $s24, $s25, $s26, $s27, $s30;
        java.util.zip.ZipFile$RAFStream $r18, r41;
        java.nio.charset.Charset $r20, $r28;
        java.lang.Object $r23;
        java.util.LinkedHashMap $r24;
        java.lang.StringBuilder $r29, $r30, $r31, $r33, $r34, $r40;

        r0 := @this: java.util.zip.ZipFile;

        $r7 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $l11 = virtualinvoke $r7.<java.io.RandomAccessFile: long length()>();

        l0 = $l11 - 22L;

        $b10 = l0 cmp 0L;

        if $b10 >= 0 goto label01;

        $r38 = new java.util.zip.ZipException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File too short to be a zip file: ");

        $r35 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $l33 = virtualinvoke $r35.<java.io.RandomAccessFile: long length()>();

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l33);

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.util.zip.ZipException: void <init>(java.lang.String)>($r39);

        throw $r38;

     label01:
        $r10 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r10.<java.io.RandomAccessFile: void seek(long)>(0L);

        $r9 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $i12 = virtualinvoke $r9.<java.io.RandomAccessFile: int readInt()>();

        i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i12);

        $l14 = (long) i1;

        $b13 = $l14 cmp 101010256L;

        if $b13 != 0 goto label02;

        $r37 = new java.util.zip.ZipException;

        specialinvoke $r37.<java.util.zip.ZipException: void <init>(java.lang.String)>("Empty zip archive not supported");

        throw $r37;

     label02:
        $l16 = (long) i1;

        $b15 = $l16 cmp 67324752L;

        if $b15 == 0 goto label03;

        $r36 = new java.util.zip.ZipException;

        specialinvoke $r36.<java.util.zip.ZipException: void <init>(java.lang.String)>("Not a zip archive");

        throw $r36;

     label03:
        l2 = l0 - 65536L;

        $b18 = l2 cmp 0L;

        if $b18 >= 0 goto label04;

        l2 = 0L;

     label04:
        $r12 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r12.<java.io.RandomAccessFile: void seek(long)>(l0);

        $r11 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        $i17 = virtualinvoke $r11.<java.io.RandomAccessFile: int readInt()>();

        $i21 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i17);

        $l22 = (long) $i21;

        $b19 = $l22 cmp 101010256L;

        if $b19 != 0 goto label05;

        goto label06;

     label05:
        l0 = l0 - 1L;

        $b20 = l0 cmp l2;

        if $b20 >= 0 goto label04;

        $r14 = new java.util.zip.ZipException;

        specialinvoke $r14.<java.util.zip.ZipException: void <init>(java.lang.String)>("End Of Central Directory signature not found");

        throw $r14;

     label06:
        r1 = newarray (byte)[18];

        $r15 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r15.<java.io.RandomAccessFile: void readFully(byte[])>(r1);

        $i23 = lengthof r1;

        $r13 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        r2 = staticinvoke <libcore.io.HeapBufferIterator: libcore.io.BufferIterator iterator(byte[],int,int,java.nio.ByteOrder)>(r1, 0, $i23, $r13);

        $s26 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i3 = $s26 & 65535;

        $s24 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i4 = $s24 & 65535;

        $s25 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i5 = $s25 & 65535;

        $s30 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i6 = $s30 & 65535;

        virtualinvoke r2.<libcore.io.BufferIterator: void skip(int)>(4);

        $i29 = virtualinvoke r2.<libcore.io.BufferIterator: int readInt()>();

        $l28 = (long) $i29;

        l7 = $l28 & 4294967295L;

        $s27 = virtualinvoke r2.<libcore.io.BufferIterator: short readShort()>();

        i8 = $s27 & 65535;

        if i5 != i6 goto label07;

        if i3 != 0 goto label07;

        if i4 == 0 goto label08;

     label07:
        $r19 = new java.util.zip.ZipException;

        specialinvoke $r19.<java.util.zip.ZipException: void <init>(java.lang.String)>("Spanned archives not supported");

        throw $r19;

     label08:
        if i8 <= 0 goto label09;

        r3 = newarray (byte)[i8];

        $r26 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        virtualinvoke $r26.<java.io.RandomAccessFile: void readFully(byte[])>(r3);

        $r27 = new java.lang.String;

        $i34 = lengthof r3;

        $r28 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r27.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r3, 0, $i34, $r28);

        r0.<java.util.zip.ZipFile: java.lang.String comment> = $r27;

     label09:
        $r18 = new java.util.zip.ZipFile$RAFStream;

        $r17 = r0.<java.util.zip.ZipFile: java.io.RandomAccessFile raf>;

        specialinvoke $r18.<java.util.zip.ZipFile$RAFStream: void <init>(java.io.RandomAccessFile,long)>($r17, l7);

        r41 = $r18;

        $r16 = new java.io.BufferedInputStream;

        specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r41, 4096);

        r5 = $r16;

        r4 = newarray (byte)[46];

        i9 = 0;

     label10:
        if i9 >= i5 goto label13;

        $r21 = new java.util.zip.ZipEntry;

        $r20 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        specialinvoke $r21.<java.util.zip.ZipEntry: void <init>(byte[],java.io.InputStream,java.nio.charset.Charset)>(r4, r5, $r20);

        r6 = $r21;

        $l32 = r6.<java.util.zip.ZipEntry: long localHeaderRelOffset>;

        $b31 = $l32 cmp l7;

        if $b31 < 0 goto label11;

        $r25 = new java.util.zip.ZipException;

        specialinvoke $r25.<java.util.zip.ZipException: void <init>(java.lang.String)>("Local file header offset is after central directory");

        throw $r25;

     label11:
        r8 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r24 = r0.<java.util.zip.ZipFile: java.util.LinkedHashMap entries>;

        $r23 = virtualinvoke $r24.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r6);

        if $r23 == null goto label12;

        $r22 = new java.util.zip.ZipException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate entry name: ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r22.<java.util.zip.ZipException: void <init>(java.lang.String)>($r32);

        throw $r22;

     label12:
        i9 = i9 + 1;

        goto label10;

     label13:
        return;
    }

    static void throwZipException(java.lang.String, int) throws java.util.zip.ZipException
    {
        java.lang.String r0, r1, $r7;
        int i0;
        java.util.zip.ZipException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.lang.IntegralToString: java.lang.String intToHexString(int,boolean,int)>(i0, 1, 8);

        $r2 = new java.util.zip.ZipException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" signature not found; was ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.util.zip.ZipException: void <init>(java.lang.String)>($r7);

        throw $r2;
    }

    static void access$000(java.util.zip.ZipFile)
    {
        java.util.zip.ZipFile r0;

        r0 := @parameter0: java.util.zip.ZipFile;

        specialinvoke r0.<java.util.zip.ZipFile: void checkNotClosed()>();

        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.ZipFile: int OPEN_DELETE> = 4;

        <java.util.zip.ZipFile: int OPEN_READ> = 1;

        <java.util.zip.ZipFile: int GPBF_UNSUPPORTED_MASK> = 1;

        <java.util.zip.ZipFile: int GPBF_UTF8_FLAG> = 2048;

        <java.util.zip.ZipFile: int GPBF_DATA_DESCRIPTOR_FLAG> = 8;

        <java.util.zip.ZipFile: int GPBF_ENCRYPTED_FLAG> = 1;

        return;
    }
}
