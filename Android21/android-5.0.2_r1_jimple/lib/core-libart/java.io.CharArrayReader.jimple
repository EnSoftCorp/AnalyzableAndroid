public class java.io.CharArrayReader extends java.io.Reader
{
    protected char[] buf;
    protected int pos;
    protected int markedPos;
    protected int count;

    public void <init>(char[])
    {
        java.io.CharArrayReader r0;
        char[] r1;
        int $i0;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.CharArrayReader: int markedPos> = -1;

        r0.<java.io.CharArrayReader: char[] buf> = r1;

        $i0 = lengthof r1;

        r0.<java.io.CharArrayReader: int count> = $i0;

        return;
    }

    public void <init>(char[], int, int)
    {
        java.io.CharArrayReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.io.Reader: void <init>()>();

        r0.<java.io.CharArrayReader: int markedPos> = -1;

        if i0 < 0 goto label1;

        $i3 = lengthof r1;

        if i0 > $i3 goto label1;

        if i1 < 0 goto label1;

        $i4 = i0 + i1;

        if $i4 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        r0.<java.io.CharArrayReader: char[] buf> = r1;

        r0.<java.io.CharArrayReader: int pos> = i0;

        r0.<java.io.CharArrayReader: int markedPos> = i0;

        i2 = lengthof r1;

        $i5 = i0 + i1;

        if $i5 >= i2 goto label3;

        $i6 = i1;

        goto label4;

     label3:
        $i6 = i2;

     label4:
        r0.<java.io.CharArrayReader: int count> = $i6;

        return;
    }

    public void close()
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        boolean $z0;

        r0 := @this: java.io.CharArrayReader;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $z0 = specialinvoke r0.<java.io.CharArrayReader: boolean isOpen()>();

        if $z0 == 0 goto label2;

        r0.<java.io.CharArrayReader: char[] buf> = null;

     label2:
        exitmonitor r1;

     label3:
        goto label6;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label5:
        throw r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private boolean isOpen()
    {
        java.io.CharArrayReader r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: java.io.CharArrayReader;

        $r1 = r0.<java.io.CharArrayReader: char[] buf>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isClosed()
    {
        java.io.CharArrayReader r0;
        char[] $r1;
        boolean $z0;

        r0 := @this: java.io.CharArrayReader;

        $r1 = r0.<java.io.CharArrayReader: char[] buf>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;

        r0 := @this: java.io.CharArrayReader;

        i0 := @parameter0: int;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int pos>;

        r0.<java.io.CharArrayReader: int markedPos> = $i1;

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label4:
        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.io.CharArrayReader;

        $z0 = specialinvoke r0.<java.io.CharArrayReader: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("CharArrayReader is closed");

        throw $r1;

     label1:
        return;
    }

    public boolean markSupported()
    {
        java.io.CharArrayReader r0;

        r0 := @this: java.io.CharArrayReader;

        return 1;
    }

    public int read() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r5;
        int $i0, $i1, $i2, $i3;
        char[] $r4;
        char $c4;

        r0 := @this: java.io.CharArrayReader;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int pos>;

        $i0 = r0.<java.io.CharArrayReader: int count>;

        if $i1 != $i0 goto label3;

        exitmonitor r1;

     label2:
        return -1;

     label3:
        $r4 = r0.<java.io.CharArrayReader: char[] buf>;

        $i2 = r0.<java.io.CharArrayReader: int pos>;

        $i3 = $i2 + 1;

        r0.<java.io.CharArrayReader: int pos> = $i3;

        $c4 = $r4[$i2];

        exitmonitor r1;

     label4:
        return $c4;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        char[] r1, $r5;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.Object r2, $r4;
        java.lang.Throwable r3, $r6;

        r0 := @this: java.io.CharArrayReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $r4 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r2 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i5 = r0.<java.io.CharArrayReader: int pos>;

        $i4 = r0.<java.io.CharArrayReader: int count>;

        if $i5 >= $i4 goto label5;

        $i6 = r0.<java.io.CharArrayReader: int pos>;

        $i8 = $i6 + i1;

        $i7 = r0.<java.io.CharArrayReader: int count>;

        if $i8 <= $i7 goto label2;

        $i12 = r0.<java.io.CharArrayReader: int count>;

        $i13 = r0.<java.io.CharArrayReader: int pos>;

        $i14 = $i12 - $i13;

        goto label3;

     label2:
        $i14 = i1;

     label3:
        i2 = $i14;

        $r5 = r0.<java.io.CharArrayReader: char[] buf>;

        $i9 = r0.<java.io.CharArrayReader: int pos>;

        staticinvoke <java.lang.System: void arraycopy(char[],int,char[],int,int)>($r5, $i9, r1, i0, i2);

        $i10 = r0.<java.io.CharArrayReader: int pos>;

        $i11 = $i10 + i2;

        r0.<java.io.CharArrayReader: int pos> = $i11;

        exitmonitor r2;

     label4:
        return i2;

     label5:
        exitmonitor r2;

     label6:
        return -1;

     label7:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label8:
        throw r3;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.io.CharArrayReader;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i1 = r0.<java.io.CharArrayReader: int pos>;

        $i0 = r0.<java.io.CharArrayReader: int count>;

        if $i1 == $i0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor r1;

     label4:
        return $z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void reset() throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        int $i0, $i1;

        r0 := @this: java.io.CharArrayReader;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $i0 = r0.<java.io.CharArrayReader: int markedPos>;

        if $i0 == -1 goto label2;

        $i1 = r0.<java.io.CharArrayReader: int markedPos>;

        goto label3;

     label2:
        $i1 = 0;

     label3:
        r0.<java.io.CharArrayReader: int pos> = $i1;

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.CharArrayReader r0;
        long l0, $l6, l15;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r4;
        byte $b2, $b7;
        int $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: java.io.CharArrayReader;

        l0 := @parameter0: long;

        $r3 = r0.<java.io.CharArrayReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        specialinvoke r0.<java.io.CharArrayReader: void checkNotClosed()>();

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label3;

        exitmonitor r1;

     label2:
        return 0L;

     label3:
        $i4 = r0.<java.io.CharArrayReader: int count>;

        $i3 = r0.<java.io.CharArrayReader: int pos>;

        $i5 = $i4 - $i3;

        $l6 = (long) $i5;

        $b7 = l0 cmp $l6;

        if $b7 >= 0 goto label4;

        $i14 = r0.<java.io.CharArrayReader: int pos>;

        $i12 = (int) l0;

        $i13 = $i14 + $i12;

        r0.<java.io.CharArrayReader: int pos> = $i13;

        l15 = l0;

        goto label5;

     label4:
        $i9 = r0.<java.io.CharArrayReader: int count>;

        $i8 = r0.<java.io.CharArrayReader: int pos>;

        $i11 = $i9 - $i8;

        l15 = (long) $i11;

        $i10 = r0.<java.io.CharArrayReader: int count>;

        r0.<java.io.CharArrayReader: int pos> = $i10;

     label5:
        exitmonitor r1;

     label6:
        return l15;

     label7:
        $r4 := @caughtexception;

        r2 = $r4;

        exitmonitor r1;

     label8:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }
}
