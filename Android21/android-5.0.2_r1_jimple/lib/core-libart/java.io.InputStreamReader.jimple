public class java.io.InputStreamReader extends java.io.Reader
{
    private java.io.InputStream in;
    private boolean endOfInput;
    private java.nio.charset.CharsetDecoder decoder;
    private final java.nio.ByteBuffer bytes;

    public void <init>(java.io.InputStream)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.nio.charset.Charset $r2;

        r0 := @this: java.io.InputStreamReader;

        r1 := @parameter0: java.io.InputStream;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

        specialinvoke r0.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r1, $r2);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.lang.IllegalArgumentException r3, $r14;
        java.nio.ByteBuffer $r4, $r11;
        java.nio.charset.Charset $r5;
        java.nio.charset.CharsetDecoder $r6, $r8, $r10;
        java.nio.charset.CodingErrorAction $r7, $r9;
        java.lang.NullPointerException $r13;
        java.io.UnsupportedEncodingException $r15, $r16;
        java.lang.Throwable $r17;

        r0 := @this: java.io.InputStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);

        r0.<java.io.InputStreamReader: boolean endOfInput> = 0;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes> = $r4;

        if r2 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("charsetName == null");

        throw $r13;

     label1:
        r0.<java.io.InputStreamReader: java.io.InputStream in> = r1;

     label2:
        $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r7);

        $r9 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r10 = virtualinvoke $r8.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r9);

        r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder> = $r10;

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        r3 = $r14;

        $r15 = new java.io.UnsupportedEncodingException;

        specialinvoke $r15.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r2);

        $r17 = virtualinvoke $r15.<java.io.UnsupportedEncodingException: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        $r16 = (java.io.UnsupportedEncodingException) $r17;

        throw $r16;

     label5:
        $r11 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        virtualinvoke $r11.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
    }

    public void <init>(java.io.InputStream, java.nio.charset.CharsetDecoder)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.nio.charset.CharsetDecoder r2;
        java.nio.ByteBuffer $r3, $r4;

        r0 := @this: java.io.InputStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.nio.charset.CharsetDecoder;

        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);

        r0.<java.io.InputStreamReader: boolean endOfInput> = 0;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes> = $r3;

        virtualinvoke r2.<java.nio.charset.CharsetDecoder: float averageCharsPerByte()>();

        r0.<java.io.InputStreamReader: java.io.InputStream in> = r1;

        r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder> = r2;

        $r4 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        return;
    }

    public void <init>(java.io.InputStream, java.nio.charset.Charset)
    {
        java.io.InputStreamReader r0;
        java.io.InputStream r1;
        java.nio.charset.Charset r2;
        java.nio.ByteBuffer $r3, $r9;
        java.nio.charset.CharsetDecoder $r4, $r6, $r8;
        java.nio.charset.CodingErrorAction $r5, $r7;

        r0 := @this: java.io.InputStreamReader;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.nio.charset.Charset;

        specialinvoke r0.<java.io.Reader: void <init>(java.lang.Object)>(r1);

        r0.<java.io.InputStreamReader: boolean endOfInput> = 0;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8192);

        r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes> = $r3;

        r0.<java.io.InputStreamReader: java.io.InputStream in> = r1;

        $r4 = virtualinvoke r2.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r5 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r6 = virtualinvoke $r4.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r5);

        $r7 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPLACE>;

        $r8 = virtualinvoke $r6.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r7);

        r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder> = $r8;

        $r9 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>(0);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable r2, $r9;
        java.nio.charset.CharsetDecoder $r4, $r7;
        java.io.InputStream $r5, $r6;

        r0 := @this: java.io.InputStreamReader;

        $r3 = r0.<java.io.InputStreamReader: java.lang.Object lock>;

        r1 = $r3;

        entermonitor $r3;

     label1:
        $r4 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        if $r4 == null goto label2;

        $r7 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        virtualinvoke $r7.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

     label2:
        r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder> = null;

        $r5 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        if $r5 == null goto label3;

        $r6 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        virtualinvoke $r6.<java.io.InputStream: void close()>();

        r0.<java.io.InputStreamReader: java.io.InputStream in> = null;

     label3:
        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String getEncoding()
    {
        java.io.InputStreamReader r0;
        boolean $z0;
        java.nio.charset.CharsetDecoder $r1;
        java.nio.charset.Charset $r2;
        java.lang.String $r3;

        r0 := @this: java.io.InputStreamReader;

        $z0 = specialinvoke r0.<java.io.InputStreamReader: boolean isOpen()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        $r2 = virtualinvoke $r1.<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>();

        $r3 = virtualinvoke $r2.<java.nio.charset.Charset: java.lang.String name()>();

        return $r3;
    }

    public int read() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        java.lang.Object r1, $r4;
        char[] r2;
        java.lang.Throwable r3, $r6;
        boolean $z0;
        int $i0, $i1;
        java.io.IOException $r5;

        r0 := @this: java.io.InputStreamReader;

        $r4 = r0.<java.io.InputStreamReader: java.lang.Object lock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $z0 = specialinvoke r0.<java.io.InputStreamReader: boolean isOpen()>();

        if $z0 != 0 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("InputStreamReader is closed");

        throw $r5;

     label2:
        r2 = newarray (char)[1];

        $i0 = virtualinvoke r0.<java.io.InputStreamReader: int read(char[],int,int)>(r2, 0, 1);

        if $i0 == -1 goto label3;

        $i1 = r2[0];

        goto label4;

     label3:
        $i1 = -1;

     label4:
        exitmonitor r1;

     label5:
        return $i1;

     label6:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r1;

     label7:
        throw r3;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        char[] r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20;
        java.lang.Object r2, $r7;
        java.nio.CharBuffer r3;
        java.nio.charset.CoderResult r4, $r9, $r12;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.Throwable r6, $r40;
        java.nio.ByteBuffer $r8, $r11, $r16, $r18, $r19, $r20, $r21, $r22, $r25, $r27, $r29, $r30, $r32, $r33, $r36, $r37;
        java.nio.charset.CharsetDecoder $r10, $r13, $r14, $r17;
        java.io.InputStream $r28, $r31;
        byte[] $r35;
        java.io.IOException $r38, $r39;

        r0 := @this: java.io.InputStreamReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r7 = r0.<java.io.InputStreamReader: java.lang.Object lock>;

        r2 = $r7;

        entermonitor $r7;

     label01:
        $z1 = specialinvoke r0.<java.io.InputStreamReader: boolean isOpen()>();

        if $z1 != 0 goto label02;

        $r39 = new java.io.IOException;

        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>("InputStreamReader is closed");

        throw $r39;

     label02:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

        if i1 != 0 goto label04;

        exitmonitor r2;

     label03:
        return 0;

     label04:
        r3 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>(r1, i0, i1);

        r4 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        $r8 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $z2 = virtualinvoke $r8.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 != 0 goto label05;

        $z8 = 1;

        goto label06;

     label05:
        $z8 = 0;

     label06:
        z0 = $z8;

     label07:
        $z3 = virtualinvoke r3.<java.nio.CharBuffer: boolean hasRemaining()>();

        if $z3 == 0 goto label17;

        if z0 == 0 goto label15;

     label08:
        $r28 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        $i13 = virtualinvoke $r28.<java.io.InputStream: int available()>();

        if $i13 != 0 goto label10;

        $i19 = virtualinvoke r3.<java.nio.CharBuffer: int position()>();

        if $i19 <= i0 goto label10;

     label09:
        goto label17;

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

     label12:
        $r27 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i12 = virtualinvoke $r27.<java.nio.ByteBuffer: int capacity()>();

        $r30 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i15 = virtualinvoke $r30.<java.nio.ByteBuffer: int limit()>();

        i20 = $i12 - $i15;

        $r29 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i14 = virtualinvoke $r29.<java.nio.ByteBuffer: int arrayOffset()>();

        $r33 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i16 = virtualinvoke $r33.<java.nio.ByteBuffer: int limit()>();

        i2 = $i14 + $i16;

        $r31 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        $r32 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $r35 = virtualinvoke $r32.<java.nio.ByteBuffer: byte[] array()>();

        i3 = virtualinvoke $r31.<java.io.InputStream: int read(byte[],int,int)>($r35, i2, i20);

        if i3 != -1 goto label13;

        r0.<java.io.InputStreamReader: boolean endOfInput> = 1;

        goto label17;

     label13:
        if i3 != 0 goto label14;

        goto label17;

     label14:
        $r37 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $r36 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i17 = virtualinvoke $r36.<java.nio.ByteBuffer: int limit()>();

        $i18 = $i17 + i3;

        virtualinvoke $r37.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i18);

     label15:
        $r17 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        $r16 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        r4 = virtualinvoke $r17.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r16, r3, 0);

        $z7 = virtualinvoke r4.<java.nio.charset.CoderResult: boolean isUnderflow()>();

        if $z7 == 0 goto label17;

        $r19 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i10 = virtualinvoke $r19.<java.nio.ByteBuffer: int limit()>();

        $r18 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i9 = virtualinvoke $r18.<java.nio.ByteBuffer: int capacity()>();

        if $i10 != $i9 goto label16;

        $r22 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        virtualinvoke $r22.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        $r21 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $r20 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $i11 = virtualinvoke $r20.<java.nio.ByteBuffer: int position()>();

        virtualinvoke $r21.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i11);

        $r25 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        virtualinvoke $r25.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

     label16:
        z0 = 1;

        goto label07;

     label17:
        $r9 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r4 != $r9 goto label19;

        $z5 = r0.<java.io.InputStreamReader: boolean endOfInput>;

        if $z5 == 0 goto label19;

        $r10 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        $r11 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        r4 = virtualinvoke $r10.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r11, r3, 1);

        $r12 = <java.nio.charset.CoderResult: java.nio.charset.CoderResult UNDERFLOW>;

        if r4 != $r12 goto label18;

        $r13 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        r4 = virtualinvoke $r13.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>(r3);

     label18:
        $r14 = r0.<java.io.InputStreamReader: java.nio.charset.CharsetDecoder decoder>;

        virtualinvoke $r14.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

     label19:
        $z4 = virtualinvoke r4.<java.nio.charset.CoderResult: boolean isMalformed()>();

        if $z4 != 0 goto label20;

        $z6 = virtualinvoke r4.<java.nio.charset.CoderResult: boolean isUnmappable()>();

        if $z6 == 0 goto label21;

     label20:
        virtualinvoke r4.<java.nio.charset.CoderResult: void throwException()>();

     label21:
        $i5 = virtualinvoke r3.<java.nio.CharBuffer: int position()>();

        $i7 = $i5 - i0;

        if $i7 != 0 goto label22;

        $i8 = -1;

        goto label23;

     label22:
        $i6 = virtualinvoke r3.<java.nio.CharBuffer: int position()>();

        $i8 = $i6 - i0;

     label23:
        exitmonitor r2;

     label24:
        return $i8;

     label25:
        $r40 := @caughtexception;

        r6 = $r40;

        exitmonitor r2;

     label26:
        throw r6;

        catch java.io.IOException from label08 to label09 with label11;
        catch java.lang.Throwable from label01 to label03 with label25;
        catch java.lang.Throwable from label04 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    private boolean isOpen()
    {
        java.io.InputStreamReader r0;
        java.io.InputStream $r1;
        boolean $z0;

        r0 := @this: java.io.InputStreamReader;

        $r1 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.InputStreamReader r0;
        java.lang.Object r1, $r4;
        java.lang.Throwable r3, $r10;
        java.io.InputStream $r5, $r7;
        java.nio.ByteBuffer $r6;
        boolean $z0, $z1;
        int $i0;
        java.io.IOException $r8, $r9;

        r0 := @this: java.io.InputStreamReader;

        $r4 = r0.<java.io.InputStreamReader: java.lang.Object lock>;

        r1 = $r4;

        entermonitor $r4;

     label01:
        $r5 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        if $r5 != null goto label02;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("InputStreamReader is closed");

        throw $r8;

     label02:
        $r6 = r0.<java.io.InputStreamReader: java.nio.ByteBuffer bytes>;

        $z0 = virtualinvoke $r6.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label03;

        $r7 = r0.<java.io.InputStreamReader: java.io.InputStream in>;

        $i0 = virtualinvoke $r7.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label04;

     label03:
        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        exitmonitor r1;

     label06:
        return $z1;

     label07:
        $r9 := @caughtexception;

        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r10 := @caughtexception;

        r3 = $r10;

        exitmonitor r1;

     label10:
        throw r3;

        catch java.io.IOException from label02 to label05 with label07;
        catch java.lang.Throwable from label01 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
}
