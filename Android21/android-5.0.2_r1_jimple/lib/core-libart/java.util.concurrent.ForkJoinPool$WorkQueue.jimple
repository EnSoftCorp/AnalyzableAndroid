final class java.util.concurrent.ForkJoinPool$WorkQueue extends java.lang.Object
{
    static final int INITIAL_QUEUE_CAPACITY;
    static final int MAXIMUM_QUEUE_CAPACITY;
    volatile long pad00;
    volatile long pad01;
    volatile long pad02;
    volatile long pad03;
    volatile long pad04;
    volatile long pad05;
    volatile long pad06;
    volatile int eventCount;
    int nextWait;
    int nsteals;
    int hint;
    short poolIndex;
    final short mode;
    volatile int qlock;
    volatile int base;
    int top;
    java.util.concurrent.ForkJoinTask[] array;
    final java.util.concurrent.ForkJoinPool pool;
    final java.util.concurrent.ForkJoinWorkerThread owner;
    volatile java.lang.Thread parker;
    volatile java.util.concurrent.ForkJoinTask currentJoin;
    java.util.concurrent.ForkJoinTask currentSteal;
    volatile java.lang.Object pad10;
    volatile java.lang.Object pad11;
    volatile java.lang.Object pad12;
    volatile java.lang.Object pad13;
    volatile java.lang.Object pad14;
    volatile java.lang.Object pad15;
    volatile java.lang.Object pad16;
    volatile java.lang.Object pad17;
    volatile java.lang.Object pad18;
    volatile java.lang.Object pad19;
    volatile java.lang.Object pad1a;
    volatile java.lang.Object pad1b;
    volatile java.lang.Object pad1c;
    volatile java.lang.Object pad1d;
    private static final sun.misc.Unsafe U;
    private static final long QBASE;
    private static final long QLOCK;
    private static final int ABASE;
    private static final int ASHIFT;

    void <init>(java.util.concurrent.ForkJoinPool, java.util.concurrent.ForkJoinWorkerThread, int, int)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinPool r1;
        java.util.concurrent.ForkJoinWorkerThread r2;
        int i0, i1;
        short $s2;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool;

        r2 := @parameter1: java.util.concurrent.ForkJoinWorkerThread;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinPool pool> = r1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner> = r2;

        $s2 = (short) i0;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: short mode> = $s2;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int hint> = i1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = 4096;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base> = 4096;

        return;
    }

    final int queueSize()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i0 = $i2 - $i1;

        if i0 < 0 goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $i3 = neg i0;

     label2:
        return $i3;
    }

    final boolean isEmpty()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1, $r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0;
        long $l12, $l13, $l14;
        sun.misc.Unsafe $r3;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = $i3;

        i2 = $i4 - $i3;

        if i2 >= 0 goto label1;

        if i2 != -1 goto label2;

        $r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r1 = $r2;

        if $r2 == null goto label1;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        i0 = $i6;

        if $i6 < 0 goto label1;

        $r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i7 = i1 - 1;

        $i9 = i0 & $i7;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i9 << $i8;

        $l12 = (long) $i10;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $l13 = (long) $i11;

        $l14 = $l12 + $l13;

        $r4 = virtualinvoke $r3.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, $l14);

        if $r4 != null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    final void push(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinTask[] r2, $r4;
        java.util.concurrent.ForkJoinPool r3, $r8;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12;
        long $l9;
        sun.misc.Unsafe $r5;
        java.util.concurrent.ForkJoinPool$WorkQueue[] $r7;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $r4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r4;

        if $r4 == null goto label2;

        $i3 = lengthof r2;

        i2 = $i3 - 1;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i5 = i2 & i0;

        $i4 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i7 = $i5 << $i4;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i8 = $i7 + $i6;

        $l9 = (long) $i8;

        virtualinvoke $r5.<sun.misc.Unsafe: void putOrderedObject(java.lang.Object,long,java.lang.Object)>(r2, $l9, r1);

        $i11 = i0 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i11;

        $i10 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i12 = $i11 - $i10;

        i1 = $i12;

        if $i12 > 2 goto label1;

        $r8 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinPool pool>;

        r3 = $r8;

        $r7 = r3.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue[] workQueues>;

        virtualinvoke $r8.<java.util.concurrent.ForkJoinPool: void signalWork(java.util.concurrent.ForkJoinPool$WorkQueue[],java.util.concurrent.ForkJoinPool$WorkQueue)>($r7, r0);

        goto label2;

     label1:
        if i1 < i2 goto label2;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] growArray()>();

     label2:
        return;
    }

    final java.util.concurrent.ForkJoinTask[] growArray()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1, r2, $r4;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20, $i23, $i24;
        java.util.concurrent.ForkJoinTask r3;
        long $l19, $l21, $l22;
        java.lang.Object $r5;
        sun.misc.Unsafe $r6, $r7, $r8;
        boolean $z0;
        java.util.concurrent.RejectedExecutionException $r9;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label1;

        $i23 = lengthof r1;

        $i24 = $i23 << 1;

        goto label2;

     label1:
        $i24 = 8192;

     label2:
        i0 = $i24;

        if i0 <= 67108864 goto label3;

        $r9 = new java.util.concurrent.RejectedExecutionException;

        specialinvoke $r9.<java.util.concurrent.RejectedExecutionException: void <init>(java.lang.String)>("Queue capacity exceeded");

        throw $r9;

     label3:
        $r4 = newarray (java.util.concurrent.ForkJoinTask)[i0];

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array> = $r4;

        r2 = $r4;

        if r1 == null goto label6;

        $i7 = lengthof r1;

        $i8 = $i7 - 1;

        i1 = $i8;

        if $i8 < 0 goto label6;

        $i9 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i2 = $i9;

        $i10 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i3 = $i10;

        $i12 = $i9 - $i10;

        if $i12 <= 0 goto label6;

        i4 = i0 - 1;

     label4:
        $i14 = i3 & i1;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i16 = $i14 << $i11;

        $i13 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i5 = $i16 + $i13;

        $i18 = i3 & i4;

        $i15 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i20 = $i18 << $i15;

        $i17 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i6 = $i20 + $i17;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l19 = (long) i5;

        $r5 = virtualinvoke $r6.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l19);

        r3 = (java.util.concurrent.ForkJoinTask) $r5;

        if r3 == null goto label5;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l21 = (long) i5;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l21, r3, null);

        if $z0 == 0 goto label5;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l22 = (long) i6;

        virtualinvoke $r8.<sun.misc.Unsafe: void putObjectVolatile(java.lang.Object,long,java.lang.Object)>(r2, $l22, r3);

     label5:
        i3 = i3 + 1;

        if i3 != i2 goto label4;

     label6:
        return r2;
    }

    final java.util.concurrent.ForkJoinTask pop()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1, $r3;
        java.util.concurrent.ForkJoinTask r2, $r5;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        long l2;
        sun.misc.Unsafe $r4, $r7;
        java.lang.Object $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r1 = $r3;

        if $r3 == null goto label4;

        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        i0 = $i4;

        if $i4 < 0 goto label4;

     label1:
        $i5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i6 = $i5 - 1;

        i1 = $i6;

        $i7 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i8 = $i6 - $i7;

        if $i8 < 0 goto label4;

        $i10 = i0 & i1;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i11 = $i10 << $i9;

        $i12 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i13 = $i11 + $i12;

        l2 = (long) $i13;

        $r4 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r6 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r1, l2);

        $r5 = (java.util.concurrent.ForkJoinTask) $r6;

        r2 = $r5;

        if $r5 != null goto label2;

        goto label4;

     label2:
        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l2, r2, null);

        if $z0 == 0 goto label3;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        return r2;

     label3:
        goto label1;

     label4:
        return null;
    }

    final java.util.concurrent.ForkJoinTask pollAt(int)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i12;
        java.util.concurrent.ForkJoinTask r1, $r6;
        java.util.concurrent.ForkJoinTask[] r2, $r3;
        long $l8, $l9, $l11;
        sun.misc.Unsafe $r4, $r7, $r8;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        i0 := @parameter0: int;

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r3;

        if $r3 == null goto label1;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        $i5 = $i3 & i0;

        $i4 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i7 = $i5 << $i4;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i1 = $i7 + $i6;

        $r4 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l8 = (long) i1;

        $r5 = virtualinvoke $r4.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, $l8);

        $r6 = (java.util.concurrent.ForkJoinTask) $r5;

        r1 = $r6;

        if $r6 == null goto label1;

        $i10 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i10 != i0 goto label1;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l9 = (long) i1;

        $z0 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l9, r1, null);

        if $z0 == 0 goto label1;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l11 = <java.util.concurrent.ForkJoinPool$WorkQueue: long QBASE>;

        $i12 = i0 + 1;

        virtualinvoke $r8.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l11, $i12);

        return r1;

     label1:
        return null;
    }

    final java.util.concurrent.ForkJoinTask poll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i15, $i17;
        java.util.concurrent.ForkJoinTask r2;
        long $l11, $l14, $l16;
        java.lang.Object $r4;
        sun.misc.Unsafe $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i0 = $i2;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i4 = $i2 - $i3;

        if $i4 >= 0 goto label5;

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r1 = $r3;

        if $r3 == null goto label5;

        $i5 = lengthof r1;

        $i6 = $i5 - 1;

        $i8 = $i6 & i0;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i8 << $i7;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i1 = $i10 + $i9;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l11 = (long) i1;

        $r4 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l11);

        r2 = (java.util.concurrent.ForkJoinTask) $r4;

        if r2 == null goto label2;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l14 = (long) i1;

        $z0 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, $l14, r2, null);

        if $z0 == 0 goto label4;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l16 = <java.util.concurrent.ForkJoinPool$WorkQueue: long QBASE>;

        $i17 = i0 + 1;

        virtualinvoke $r7.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l16, $i17);

        return r2;

     label2:
        $i13 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i13 != i0 goto label4;

        $i15 = i0 + 1;

        $i12 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i15 != $i12 goto label3;

        goto label5;

     label3:
        staticinvoke <java.lang.Thread: void yield()>();

     label4:
        goto label1;

     label5:
        return null;
    }

    final java.util.concurrent.ForkJoinTask nextLocalTask()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        short $s0;
        java.util.concurrent.ForkJoinTask $r1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $s0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: short mode>;

        if $s0 != 0 goto label1;

        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask pop()>();

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

     label2:
        return $r1;
    }

    final java.util.concurrent.ForkJoinTask peek()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask[] r1;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12;
        short $s5;
        long $l10;
        sun.misc.Unsafe $r2;
        java.lang.Object $r3;
        java.util.concurrent.ForkJoinTask $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if r1 == null goto label1;

        $i3 = lengthof r1;

        $i4 = $i3 - 1;

        i0 = $i4;

        if $i4 >= 0 goto label2;

     label1:
        return null;

     label2:
        $s5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: short mode>;

        if $s5 != 0 goto label3;

        $i12 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i11 = $i12 - 1;

        goto label4;

     label3:
        $i11 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

     label4:
        i1 = $i11;

        $i7 = i1 & i0;

        $i6 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i9 = $i7 << $i6;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        i2 = $i9 + $i8;

        $r2 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l10 = (long) i2;

        $r3 = virtualinvoke $r2.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r1, $l10);

        $r4 = (java.util.concurrent.ForkJoinTask) $r3;

        return $r4;
    }

    final boolean tryUnpush(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinTask[] r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i11;
        long $l10;
        sun.misc.Unsafe $r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r3;

        if $r3 == null goto label1;

        $i1 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i0 = $i1;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i1 == $i2 goto label1;

        $r4 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i3 = lengthof r2;

        $i4 = $i3 - 1;

        i11 = i0 + -1;

        $i6 = $i4 & i11;

        $i5 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i8 = $i6 << $i5;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i9 = $i8 + $i7;

        $l10 = (long) $i9;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, $l10, r1, null);

        if $z0 == 0 goto label1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i11;

        return 1;

     label1:
        return 0;
    }

    final void cancelAll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, $r2, $r3, $r4;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentJoin>;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>($r2);

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal>;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>($r3);

     label1:
        $r4 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        r1 = $r4;

        if $r4 == null goto label2;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>(r1);

        goto label1;

     label2:
        return;
    }

    final void pollAndExecAll()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, $r2;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

     label1:
        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask poll()>();

        r1 = $r2;

        if $r2 == null goto label2;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

        goto label1;

     label2:
        return;
    }

    final void runTask(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, r3;
        java.util.concurrent.ForkJoinTask[] r2;
        short s0;
        int i1, i2, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        long l3;
        java.lang.Object $r4;
        sun.misc.Unsafe $r5, $r6;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = r1;

        if r1 == null goto label5;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

        r2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        s0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: short mode>;

        $i5 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals>;

        $i6 = $i5 + 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int nsteals> = $i6;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask currentSteal> = null;

        if s0 == 0 goto label1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinPool$WorkQueue: void pollAndExecAll()>();

        goto label5;

     label1:
        if r2 == null goto label5;

        $i7 = lengthof r2;

        i2 = $i7 - 1;

     label2:
        $i8 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i9 = $i8 - 1;

        i1 = $i9;

        $i10 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i12 = $i9 - $i10;

        if $i12 < 0 goto label5;

        $i14 = i2 & i1;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i16 = $i14 << $i11;

        $i13 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i15 = $i16 + $i13;

        l3 = (long) $i15;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r4 = virtualinvoke $r5.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r2, l3);

        r3 = (java.util.concurrent.ForkJoinTask) $r4;

        if r3 != null goto label3;

        goto label5;

     label3:
        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z0 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l3, r3, null);

        if $z0 == 0 goto label4;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        virtualinvoke r3.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label4:
        goto label2;

     label5:
        return;
    }

    final boolean tryRemoveAndExec(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinTask r1, r3;
        boolean z0, z1, z2, $z3, $z4;
        java.util.concurrent.ForkJoinTask[] r2, $r4;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, $i20, $i21, $i22;
        long l4;
        java.lang.Object $r5;
        sun.misc.Unsafe $r6, $r7, $r8, $r10;
        java.util.concurrent.ForkJoinPool$EmptyTask $r9;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r1 == null goto label11;

        $r4 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r4;

        if $r4 == null goto label11;

        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        i0 = $i6;

        if $i6 < 0 goto label11;

        $i8 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i1 = $i8;

        $i7 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i2 = $i7;

        $i10 = $i8 - $i7;

        i3 = $i10;

        if $i10 <= 0 goto label11;

        z1 = 0;

        z2 = 1;

        z0 = 1;

     label01:
        i1 = i1 + -1;

        $i12 = i1 & i0;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i14 = $i12 << $i9;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i13 = $i14 + $i11;

        l4 = (long) $i13;

        $r6 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r5 = virtualinvoke $r6.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r2, l4);

        r3 = (java.util.concurrent.ForkJoinTask) $r5;

        if r3 != null goto label02;

        goto label09;

     label02:
        if r3 != r1 goto label05;

        $i20 = i1 + 1;

        $i22 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i20 != $i22 goto label04;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z4 = virtualinvoke $r8.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l4, r1, null);

        if $z4 != 0 goto label03;

        goto label09;

     label03:
        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        z1 = 1;

        goto label09;

     label04:
        $i21 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i21 != i2 goto label09;

        $r10 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r9 = new java.util.concurrent.ForkJoinPool$EmptyTask;

        specialinvoke $r9.<java.util.concurrent.ForkJoinPool$EmptyTask: void <init>()>();

        z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l4, r1, $r9);

        goto label09;

     label05:
        $i16 = r3.<java.util.concurrent.ForkJoinTask: int status>;

        if $i16 < 0 goto label06;

        z2 = 0;

        goto label07;

     label06:
        $i18 = i1 + 1;

        $i15 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i18 != $i15 goto label07;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z3 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l4, r3, null);

        if $z3 == 0 goto label09;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = i1;

        goto label09;

     label07:
        i3 = i3 + -1;

        if i3 != 0 goto label08;

        if z2 != 0 goto label09;

        $i19 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i19 != i2 goto label09;

        z0 = 0;

        goto label09;

     label08:
        goto label01;

     label09:
        if z1 == 0 goto label10;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label10:
        goto label12;

     label11:
        z0 = 0;

     label12:
        return z0;
    }

    final boolean pollAndExecCC(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.CountedCompleter r1, r4, r5, $r9;
        java.util.concurrent.ForkJoinTask[] r2, $r6;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object r3, $r7;
        long l1, $l14;
        sun.misc.Unsafe $r8, $r10, $r11;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        i0 = $i2;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        $i4 = $i2 - $i3;

        if $i4 >= 0 goto label5;

        $r6 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r6;

        if $r6 == null goto label5;

        $i5 = lengthof r2;

        $i6 = $i5 - 1;

        $i9 = $i6 & i0;

        $i7 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i11 = $i9 << $i7;

        $i8 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i10 = $i11 + $i8;

        l1 = (long) $i10;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r7 = virtualinvoke $r8.<sun.misc.Unsafe: java.lang.Object getObjectVolatile(java.lang.Object,long)>(r2, l1);

        r3 = $r7;

        if $r7 != null goto label1;

        return 1;

     label1:
        $z0 = r3 instanceof java.util.concurrent.CountedCompleter;

        if $z0 == 0 goto label5;

        r4 = (java.util.concurrent.CountedCompleter) r3;

        r5 = r4;

     label2:
        if r5 != r1 goto label4;

        $i12 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        if $i12 != i0 goto label3;

        $r10 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l1, r4, null);

        if $z1 == 0 goto label3;

        $r11 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l14 = <java.util.concurrent.ForkJoinPool$WorkQueue: long QBASE>;

        $i13 = i0 + 1;

        virtualinvoke $r11.<sun.misc.Unsafe: void putOrderedInt(java.lang.Object,long,int)>(r0, $l14, $i13);

        virtualinvoke r4.<java.util.concurrent.CountedCompleter: int doExec()>();

     label3:
        return 1;

     label4:
        $r9 = r5.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r5 = $r9;

        if $r9 != null goto label2;

        goto label5;

     label5:
        return 0;
    }

    final boolean externalPopAndExecCC(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.CountedCompleter r1, r4, r5, $r9;
        java.util.concurrent.ForkJoinTask[] r2, $r6, $r11;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15;
        java.lang.Object r3, $r8;
        long l1, $l13;
        sun.misc.Unsafe $r7, $r10, $r12;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i0 = $i2;

        $i4 = $i3 - $i2;

        if $i4 >= 0 goto label5;

        $r6 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r6;

        if $r6 == null goto label5;

        $i5 = lengthof r2;

        $i7 = $i5 - 1;

        $i6 = i0 - 1;

        $i8 = $i7 & $i6;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i8 << $i9;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i12 = $i10 + $i11;

        l1 = (long) $i12;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r8 = virtualinvoke $r7.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r2, l1);

        r3 = $r8;

        $z0 = $r8 instanceof java.util.concurrent.CountedCompleter;

        if $z0 == 0 goto label5;

        r4 = (java.util.concurrent.CountedCompleter) r3;

        r5 = r4;

     label1:
        if r5 != r1 goto label4;

        $r10 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $l13 = <java.util.concurrent.ForkJoinPool$WorkQueue: long QLOCK>;

        $z1 = virtualinvoke $r10.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l13, 0, 1);

        if $z1 == 0 goto label3;

        $i14 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        if $i14 != i0 goto label2;

        $r11 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        if $r11 != r2 goto label2;

        $r12 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z2 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l1, r4, null);

        if $z2 == 0 goto label2;

        $i15 = i0 - 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i15;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

        virtualinvoke r4.<java.util.concurrent.CountedCompleter: int doExec()>();

        goto label3;

     label2:
        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock> = 0;

     label3:
        return 1;

     label4:
        $r9 = r5.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r5 = $r9;

        if $r9 != null goto label1;

        goto label5;

     label5:
        return 0;
    }

    final boolean internalPopAndExecCC(java.util.concurrent.CountedCompleter)
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.CountedCompleter r1, r4, r5, $r10;
        java.util.concurrent.ForkJoinTask[] r2, $r6;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Object r3, $r8;
        long l1;
        sun.misc.Unsafe $r7, $r9;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        r1 := @parameter0: java.util.concurrent.CountedCompleter;

        $i3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int base>;

        $i2 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top>;

        i0 = $i2;

        $i4 = $i3 - $i2;

        if $i4 >= 0 goto label4;

        $r6 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask[] array>;

        r2 = $r6;

        if $r6 == null goto label4;

        $i5 = lengthof r2;

        $i7 = $i5 - 1;

        $i6 = i0 - 1;

        $i8 = $i7 & $i6;

        $i9 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT>;

        $i10 = $i8 << $i9;

        $i11 = <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE>;

        $i12 = $i10 + $i11;

        l1 = (long) $i12;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r8 = virtualinvoke $r7.<sun.misc.Unsafe: java.lang.Object getObject(java.lang.Object,long)>(r2, l1);

        r3 = $r8;

        $z0 = $r8 instanceof java.util.concurrent.CountedCompleter;

        if $z0 == 0 goto label4;

        r4 = (java.util.concurrent.CountedCompleter) r3;

        r5 = r4;

     label1:
        if r5 != r1 goto label3;

        $r9 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $z1 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r2, l1, r4, null);

        if $z1 == 0 goto label2;

        $i13 = i0 - 1;

        r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int top> = $i13;

        virtualinvoke r4.<java.util.concurrent.CountedCompleter: int doExec()>();

     label2:
        return 1;

     label3:
        $r10 = r5.<java.util.concurrent.CountedCompleter: java.util.concurrent.CountedCompleter completer>;

        r5 = $r10;

        if $r10 != null goto label1;

        goto label4;

     label4:
        return 0;
    }

    final boolean isApparentlyUnblocked()
    {
        java.util.concurrent.ForkJoinPool$WorkQueue r0;
        java.util.concurrent.ForkJoinWorkerThread r1, $r3;
        java.lang.Thread$State r2, $r4, $r5, $r6, $r7;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinPool$WorkQueue;

        $i0 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: int eventCount>;

        if $i0 < 0 goto label1;

        $r3 = r0.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinWorkerThread owner>;

        r1 = $r3;

        if $r3 == null goto label1;

        $r4 = virtualinvoke r1.<java.lang.Thread: java.lang.Thread$State getState()>();

        r2 = $r4;

        $r5 = <java.lang.Thread$State: java.lang.Thread$State BLOCKED>;

        if $r4 == $r5 goto label1;

        $r6 = <java.lang.Thread$State: java.lang.Thread$State WAITING>;

        if r2 == $r6 goto label1;

        $r7 = <java.lang.Thread$State: java.lang.Thread$State TIMED_WAITING>;

        if r2 == $r7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class r0, r1;
        int i0, $i3, $i4, $i5, $i6, $i7;
        sun.misc.Unsafe $r2, $r3, $r5, $r7, $r8;
        java.lang.reflect.Field $r4, $r6;
        long $l1, $l2;
        java.lang.Error $r9, $r10;
        java.lang.Exception $r11, r12;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int MAXIMUM_QUEUE_CAPACITY> = 67108864;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int INITIAL_QUEUE_CAPACITY> = 8192;

     label1:
        $r2 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U> = $r2;

        r0 = class "java/util/concurrent/ForkJoinPool$WorkQueue";

        r1 = class "[Ljava/util/concurrent/ForkJoinTask;";

        $r3 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("base");

        $l1 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ForkJoinPool$WorkQueue: long QBASE> = $l1;

        $r5 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("qlock");

        $l2 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.ForkJoinPool$WorkQueue: long QLOCK> = $l2;

        $r7 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        $i3 = virtualinvoke $r7.<sun.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(r1);

        <java.util.concurrent.ForkJoinPool$WorkQueue: int ABASE> = $i3;

        $r8 = <java.util.concurrent.ForkJoinPool$WorkQueue: sun.misc.Unsafe U>;

        i0 = virtualinvoke $r8.<sun.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(r1);

        $i4 = i0 - 1;

        $i5 = i0 & $i4;

        if $i5 == 0 goto label2;

        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r9;

     label2:
        $i6 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i7 = 31 - $i6;

        <java.util.concurrent.ForkJoinPool$WorkQueue: int ASHIFT> = $i7;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        r12 = $r11;

        $r10 = new java.lang.Error;

        specialinvoke $r10.<java.lang.Error: void <init>(java.lang.Throwable)>(r12);

        throw $r10;

     label5:
        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
