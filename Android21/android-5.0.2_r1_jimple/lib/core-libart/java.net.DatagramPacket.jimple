public final class java.net.DatagramPacket extends java.lang.Object
{
    private byte[] data;
    private int length;
    private int userSuppliedLength;
    private java.net.InetAddress address;
    private int port;
    private int offset;

    public void <init>(byte[], int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int)>(r1, 0, i0);

        return;
    }

    public void <init>(byte[], int, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramPacket: int port> = -1;

        r0.<java.net.DatagramPacket: int offset> = 0;

        virtualinvoke r0.<java.net.DatagramPacket: void setData(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void <init>(byte[], int, int, java.net.InetAddress, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1, i2;
        java.net.InetAddress r2;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.net.InetAddress;

        i2 := @parameter4: int;

        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<java.net.DatagramPacket: void setPort(int)>(i2);

        r0.<java.net.DatagramPacket: java.net.InetAddress address> = r2;

        return;
    }

    public void <init>(byte[], int, java.net.InetAddress, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;
        java.net.InetAddress r2;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int,java.net.InetAddress,int)>(r1, 0, i0, r2, i1);

        return;
    }

    public synchronized java.net.InetAddress getAddress()
    {
        java.net.DatagramPacket r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.DatagramPacket;

        $r1 = r0.<java.net.DatagramPacket: java.net.InetAddress address>;

        return $r1;
    }

    public synchronized byte[] getData()
    {
        java.net.DatagramPacket r0;
        byte[] $r1;

        r0 := @this: java.net.DatagramPacket;

        $r1 = r0.<java.net.DatagramPacket: byte[] data>;

        return $r1;
    }

    public synchronized int getLength()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;

        $i0 = r0.<java.net.DatagramPacket: int length>;

        return $i0;
    }

    public synchronized int getOffset()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;

        $i0 = r0.<java.net.DatagramPacket: int offset>;

        return $i0;
    }

    public synchronized int getPort()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;

        $i0 = r0.<java.net.DatagramPacket: int port>;

        return $i0;
    }

    public synchronized void setAddress(java.net.InetAddress)
    {
        java.net.DatagramPacket r0;
        java.net.InetAddress r1;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: java.net.InetAddress;

        r0.<java.net.DatagramPacket: java.net.InetAddress address> = r1;

        return;
    }

    public synchronized void setData(byte[], int, int)
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 | i1;

        if $i2 < 0 goto label1;

        $i3 = lengthof r1;

        if i0 > $i3 goto label1;

        $i4 = lengthof r1;

        $i5 = $i4 - i0;

        if i1 <= $i5 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label2:
        r0.<java.net.DatagramPacket: byte[] data> = r1;

        r0.<java.net.DatagramPacket: int offset> = i0;

        r0.<java.net.DatagramPacket: int length> = i1;

        r0.<java.net.DatagramPacket: int userSuppliedLength> = i1;

        return;
    }

    public synchronized void setData(byte[])
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int $i0, $i1;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        r0.<java.net.DatagramPacket: int length> = $i0;

        $i1 = r0.<java.net.DatagramPacket: int length>;

        r0.<java.net.DatagramPacket: int userSuppliedLength> = $i1;

        r0.<java.net.DatagramPacket: byte[] data> = r1;

        r0.<java.net.DatagramPacket: int offset> = 0;

        return;
    }

    public synchronized void setLength(int)
    {
        java.net.DatagramPacket r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        byte[] $r8, $r11;
        java.lang.String $r10;

        r0 := @this: java.net.DatagramPacket;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i3 = r0.<java.net.DatagramPacket: int offset>;

        $i4 = $i3 + i0;

        $r11 = r0.<java.net.DatagramPacket: byte[] data>;

        $i5 = lengthof $r11;

        if $i4 <= $i5 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("length=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", offset=");

        $i1 = r0.<java.net.DatagramPacket: int offset>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", buffer size=");

        $r8 = r0.<java.net.DatagramPacket: byte[] data>;

        $i2 = lengthof $r8;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label2:
        r0.<java.net.DatagramPacket: int length> = i0;

        r0.<java.net.DatagramPacket: int userSuppliedLength> = i0;

        return;
    }

    public void resetLengthForReceive()
    {
        java.net.DatagramPacket r0;
        int $i0;

        r0 := @this: java.net.DatagramPacket;

        $i0 = r0.<java.net.DatagramPacket: int userSuppliedLength>;

        r0.<java.net.DatagramPacket: int length> = $i0;

        return;
    }

    public void setReceivedLength(int)
    {
        java.net.DatagramPacket r0;
        int i0;

        r0 := @this: java.net.DatagramPacket;

        i0 := @parameter0: int;

        r0.<java.net.DatagramPacket: int length> = i0;

        return;
    }

    public synchronized void setPort(int)
    {
        java.net.DatagramPacket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.net.DatagramPacket;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 65535 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0.<java.net.DatagramPacket: int port> = i0;

        return;
    }

    public void <init>(byte[], int, java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0;
        java.net.SocketAddress r2;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.SocketAddress;

        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int)>(r1, 0, i0);

        virtualinvoke r0.<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>(r2);

        return;
    }

    public void <init>(byte[], int, int, java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramPacket r0;
        byte[] r1;
        int i0, i1;
        java.net.SocketAddress r2;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.net.SocketAddress;

        specialinvoke r0.<java.net.DatagramPacket: void <init>(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<java.net.DatagramPacket: void setSocketAddress(java.net.SocketAddress)>(r2);

        return;
    }

    public synchronized java.net.SocketAddress getSocketAddress()
    {
        java.net.DatagramPacket r0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramPacket;

        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r0.<java.net.DatagramPacket: int getPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public synchronized void setSocketAddress(java.net.SocketAddress)
    {
        java.net.DatagramPacket r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        boolean $z0, $z1;
        int $i0;
        java.net.InetAddress $r3;
        java.lang.IllegalArgumentException $r4, $r9;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r11, $r14;
        java.lang.String $r8, $r13;
        java.lang.Class $r12;

        r0 := @this: java.net.DatagramPacket;

        r1 := @parameter0: java.net.SocketAddress;

        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket address not an InetSocketAddress: ");

        if r1 != null goto label1;

        $r12 = null;

        goto label2;

     label1:
        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r9;

     label3:
        r2 = (java.net.InetSocketAddress) r1;

        $z1 = virtualinvoke r2.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z1 == 0 goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket address unresolved: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label4:
        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        r0.<java.net.DatagramPacket: int port> = $i0;

        $r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r0.<java.net.DatagramPacket: java.net.InetAddress address> = $r3;

        return;
    }
}
