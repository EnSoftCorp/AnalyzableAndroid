class java.nio.channels.Channels$ChannelInputStream extends java.io.InputStream
{
    private final java.nio.channels.ReadableByteChannel channel;

    void <init>(java.nio.channels.ReadableByteChannel)
    {
        java.nio.channels.Channels$ChannelInputStream r0;
        java.nio.channels.ReadableByteChannel r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.channels.Channels$ChannelInputStream;

        r1 := @parameter0: java.nio.channels.ReadableByteChannel;

        specialinvoke r0.<java.io.InputStream: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("channel == null");

        throw $r2;

     label1:
        r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel> = r1;

        return;
    }

    public synchronized int read() throws java.io.IOException
    {
        java.nio.channels.Channels$ChannelInputStream r0;
        int $i0;

        r0 := @this: java.nio.channels.Channels$ChannelInputStream;

        $i0 = staticinvoke <libcore.io.Streams: int readSingleByte(java.io.InputStream)>(r0);

        return $i0;
    }

    public synchronized int read(byte[], int, int) throws java.io.IOException
    {
        java.nio.channels.Channels$ChannelInputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.nio.ByteBuffer r2;
        java.nio.channels.ReadableByteChannel $r3, $r4;

        r0 := @this: java.nio.channels.Channels$ChannelInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        $r3 = r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel>;

        staticinvoke <java.nio.channels.Channels: void checkBlocking(java.nio.channels.Channel)>($r3);

        $r4 = r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel>;

        $i2 = interfaceinvoke $r4.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r2);

        return $i2;
    }

    public int available() throws java.io.IOException
    {
        java.nio.channels.Channels$ChannelInputStream r0;
        java.nio.channels.FileChannel r1;
        long l0, $l2, $l3;
        java.nio.channels.ReadableByteChannel $r2, $r3;
        boolean $z0;
        int $i1, $i5;
        byte $b4;

        r0 := @this: java.nio.channels.Channels$ChannelInputStream;

        $r2 = r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel>;

        $z0 = $r2 instanceof java.nio.channels.FileChannel;

        if $z0 == 0 goto label3;

        $r3 = r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel>;

        r1 = (java.nio.channels.FileChannel) $r3;

        $l2 = virtualinvoke r1.<java.nio.channels.FileChannel: long size()>();

        $l3 = virtualinvoke r1.<java.nio.channels.FileChannel: long position()>();

        l0 = $l2 - $l3;

        $b4 = l0 cmp 2147483647L;

        if $b4 <= 0 goto label1;

        $i5 = 2147483647;

        goto label2;

     label1:
        $i5 = (int) l0;

     label2:
        return $i5;

     label3:
        $i1 = specialinvoke r0.<java.io.InputStream: int available()>();

        return $i1;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.nio.channels.Channels$ChannelInputStream r0;
        java.nio.channels.ReadableByteChannel $r1;

        r0 := @this: java.nio.channels.Channels$ChannelInputStream;

        $r1 = r0.<java.nio.channels.Channels$ChannelInputStream: java.nio.channels.ReadableByteChannel channel>;

        interfaceinvoke $r1.<java.nio.channels.ReadableByteChannel: void close()>();

        return;
    }
}
