public class java.util.concurrent.LinkedBlockingDeque extends java.util.AbstractQueue implements java.util.concurrent.BlockingDeque, java.io.Serializable
{
    private static final long serialVersionUID;
    transient java.util.concurrent.LinkedBlockingDeque$Node first;
    transient java.util.concurrent.LinkedBlockingDeque$Node last;
    private transient int count;
    private final int capacity;
    final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.concurrent.locks.Condition notEmpty;
    private final java.util.concurrent.locks.Condition notFull;

    public void <init>()
    {
        java.util.concurrent.LinkedBlockingDeque r0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(2147483647);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        int i0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2, $r4;
        java.util.concurrent.locks.Condition $r3, $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock> = $r1;

        $r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty> = $r3;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull> = $r5;

        if i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        r0.<java.util.concurrent.LinkedBlockingDeque: int capacity> = i0;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.Iterator r3;
        java.lang.Object r4;
        java.lang.Throwable r5, $r9;
        boolean $z0, $z1;
        java.util.concurrent.LinkedBlockingDeque$Node $r6;
        java.lang.IllegalStateException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(2147483647);

        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r4 != null goto label3;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label3:
        $r6 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r4);

        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkLast(java.util.concurrent.LinkedBlockingDeque$Node)>($r6);

        if $z1 != 0 goto label4;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Deque full");

        throw $r7;

     label4:
        goto label2;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label6:
        $r9 := @caughtexception;

        r5 = $r9;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private boolean linkFirst(java.util.concurrent.LinkedBlockingDeque$Node)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque$Node;

        $i1 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int capacity>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = r2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = r1;

        $r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

        if $r3 != null goto label2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = r1;

        goto label3;

     label2:
        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = r1;

     label3:
        $i2 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i3 = $i2 + 1;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = $i3;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

        return 1;
    }

    private boolean linkLast(java.util.concurrent.LinkedBlockingDeque$Node)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque$Node;

        $i1 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int capacity>;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = r2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = r1;

        $r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        if $r3 != null goto label2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = r1;

        goto label3;

     label2:
        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = r1;

     label3:
        $i2 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i3 = $i2 + 1;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = $i3;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

        return 1;
    }

    private java.lang.Object unlinkFirst()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2;
        java.lang.Object r3;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        r3 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item> = null;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = r1;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = r2;

        if r2 != null goto label2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = null;

        goto label3;

     label2:
        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = null;

     label3:
        $i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i1 = $i0 - 1;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = $i1;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

        return r3;
    }

    private java.lang.Object unlinkLast()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2;
        java.lang.Object r3;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev>;

        r3 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item> = null;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = r1;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = r2;

        if r2 != null goto label2;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = null;

        goto label3;

     label2:
        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = null;

     label3:
        $i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i1 = $i0 - 1;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = $i1;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

        return r3;
    }

    void unlink(java.util.concurrent.LinkedBlockingDeque$Node)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Node r1, r2, r3;
        int $i0, $i1;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.concurrent.LinkedBlockingDeque$Node;

        r2 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev>;

        r3 = r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        if r2 != null goto label1;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkFirst()>();

        goto label3;

     label1:
        if r3 != null goto label2;

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkLast()>();

        goto label3;

     label2:
        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = r3;

        r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = r2;

        r1.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item> = null;

        $i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $i1 = $i0 - 1;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = $i1;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Condition: void signal()>();

     label3:
        return;
    }

    public void addFirst(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean offerFirst(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Deque full");

        throw $r2;

     label1:
        return;
    }

    public void addLast(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean offerLast(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Deque full");

        throw $r2;

     label1:
        return;
    }

    public boolean offerFirst(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2, $r5;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0;
        java.lang.Throwable r4, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $r5 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r5;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        z0 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkFirst(java.util.concurrent.LinkedBlockingDeque$Node)>(r2);

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean offerLast(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2, $r5;
        java.util.concurrent.locks.ReentrantLock r3;
        boolean z0;
        java.lang.Throwable r4, $r7;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>()>();

        throw $r6;

     label1:
        $r5 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r5;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        z0 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkLast(java.util.concurrent.LinkedBlockingDeque$Node)>(r2);

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void putFirst(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2, $r5;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.util.concurrent.locks.Condition $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        $r5 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r5;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $z0 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkFirst(java.util.concurrent.LinkedBlockingDeque$Node)>(r2);

        if $z0 != 0 goto label3;

        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void await()>();

        goto label2;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void putLast(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2, $r5;
        java.util.concurrent.locks.ReentrantLock r3;
        java.lang.Throwable r4, $r8;
        boolean $z0;
        java.util.concurrent.locks.Condition $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        $r5 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r5.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r5;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        $z0 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkLast(java.util.concurrent.LinkedBlockingDeque$Node)>(r2);

        if $z0 != 0 goto label3;

        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void await()>();

        goto label2;

     label3:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

        r4 = $r8;

     label5:
        virtualinvoke r3.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean offerFirst(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3, $r6;
        java.util.concurrent.locks.ReentrantLock r4;
        boolean z0, $z1, z2;
        java.lang.Throwable r5, $r9;
        byte $b2;
        java.util.concurrent.locks.Condition $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        $r6 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r3 = $r6;

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkFirst(java.util.concurrent.LinkedBlockingDeque$Node)>(r3);

        if $z1 != 0 goto label5;

        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label4;

        z0 = 0;

     label3:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r7 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        l1 = interfaceinvoke $r7.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label2;

     label5:
        z2 = 1;

     label6:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z2;

     label7:
        $r9 := @caughtexception;

        r5 = $r9;

     label8:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public boolean offerLast(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        long l0, l1;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3, $r6;
        java.util.concurrent.locks.ReentrantLock r4;
        boolean z0, $z1, z2;
        java.lang.Throwable r5, $r9;
        byte $b2;
        java.util.concurrent.locks.Condition $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        $r6 = new java.util.concurrent.LinkedBlockingDeque$Node;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingDeque$Node: void <init>(java.lang.Object)>(r1);

        r3 = $r6;

        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label2:
        $z1 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean linkLast(java.util.concurrent.LinkedBlockingDeque$Node)>(r3);

        if $z1 != 0 goto label5;

        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label4;

        z0 = 0;

     label3:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r7 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        l1 = interfaceinvoke $r7.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label2;

     label5:
        z2 = 1;

     label6:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z2;

     label7:
        $r9 := @caughtexception;

        r5 = $r9;

     label8:
        virtualinvoke r4.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.Object removeFirst()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollFirst()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public java.lang.Object removeLast()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollLast()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public java.lang.Object pollFirst()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkFirst()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object pollLast()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r2 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkLast()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object takeFirst() throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, r3, $r5;
        java.lang.Throwable r4, $r7;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkFirst()>();

        r2 = $r5;

        if $r5 != null goto label2;

        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void await()>();

        goto label1;

     label2:
        r3 = r2;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object takeLast() throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, r3, $r5;
        java.lang.Throwable r4, $r7;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkLast()>();

        r2 = $r5;

        if $r5 != null goto label2;

        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        interfaceinvoke $r6.<java.util.concurrent.locks.Condition: void await()>();

        goto label1;

     label2:
        r3 = r2;

     label3:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object pollFirst(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object r3, $r5, r8;
        java.lang.Throwable r4, $r7;
        byte $b2;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        $r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkFirst()>();

        r3 = $r5;

        if $r5 != null goto label4;

        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label3;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label3:
        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        l1 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label1;

     label4:
        r8 = r3;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.Object pollLast(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        long l0, l1;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Object r3, $r5, r8;
        java.lang.Throwable r4, $r7;
        byte $b2;
        java.util.concurrent.locks.Condition $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label1:
        $r5 = specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkLast()>();

        r3 = $r5;

        if $r5 != null goto label4;

        $b2 = l1 cmp 0L;

        if $b2 > 0 goto label3;

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label3:
        $r6 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notEmpty>;

        l1 = interfaceinvoke $r6.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label1;

     label4:
        r8 = r3;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r8;

     label6:
        $r7 := @caughtexception;

        r4 = $r7;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.Object getFirst()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peekFirst()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public java.lang.Object getLast()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        java.util.NoSuchElementException $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peekLast()>();

        if r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        return r1;
    }

    public java.lang.Object peekFirst()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.LinkedBlockingDeque$Node $r4, $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        if $r4 != null goto label2;

        $r6 = null;

        goto label3;

     label2:
        $r5 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        $r6 = $r5.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

     label3:
        r2 = $r6;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.Object peekLast()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object r2, $r6;
        java.lang.Throwable r3, $r7;
        java.util.concurrent.LinkedBlockingDeque$Node $r4, $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

        if $r4 != null goto label2;

        $r6 = null;

        goto label3;

     label2:
        $r5 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

        $r6 = $r5.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

     label3:
        r2 = $r6;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label5:
        $r7 := @caughtexception;

        r3 = $r7;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean removeFirstOccurrence(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1, $r5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label3:
        if r3 == null goto label6;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void unlink(java.util.concurrent.LinkedBlockingDeque$Node)>(r3);

        z0 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label5:
        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        goto label3;

     label6:
        z2 = 0;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z2;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean removeLastOccurrence(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1, $r5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last>;

     label3:
        if r3 == null goto label6;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void unlink(java.util.concurrent.LinkedBlockingDeque$Node)>(r3);

        z0 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label5:
        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev>;

        goto label3;

     label6:
        z2 = 0;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z2;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void addLast(java.lang.Object)>(r1);

        return 1;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean offerLast(java.lang.Object)>(r1);

        return $z0;
    }

    public void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void putLast(java.lang.Object)>(r1);

        return;
    }

    public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean offerLast(java.lang.Object,long,java.util.concurrent.TimeUnit)>(r1, l0, r2);

        return $z0;
    }

    public java.lang.Object remove()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object removeFirst()>();

        return $r1;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollFirst()>();

        return $r1;
    }

    public java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object takeFirst()>();

        return $r1;
    }

    public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object pollFirst(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r2;
    }

    public java.lang.Object element()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object getFirst()>();

        return $r1;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object peekFirst()>();

        return $r1;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i2 = r0.<java.util.concurrent.LinkedBlockingDeque: int capacity>;

        $i1 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        i0 = $i2 - $i1;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.Collection r1;
        int $i0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: int drainTo(java.util.Collection,int)>(r1, 2147483647);

        return $i0;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.Collection r1;
        int i0, i1, i2, $i3, i4;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r3, $r9;
        java.util.concurrent.LinkedBlockingDeque$Node $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r7;
        java.lang.NullPointerException $r8;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label1:
        if r1 != r0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label2:
        if i0 > 0 goto label3;

        return 0;

     label3:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label4:
        $i3 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        i2 = 0;

     label5:
        if i2 >= i1 goto label6;

        $r4 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        $r5 = $r4.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>($r5);

        specialinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object unlinkFirst()>();

        i2 = i2 + 1;

        goto label5;

     label6:
        i4 = i1;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i4;

     label8:
        $r9 := @caughtexception;

        r3 = $r9;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void push(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: void addFirst(java.lang.Object)>(r1);

        return;
    }

    public java.lang.Object pop()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: java.lang.Object removeFirst()>();

        return $r1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean removeFirstOccurrence(java.lang.Object)>(r1);

        return $z0;
    }

    public int size()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        i0 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object r1, $r5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        boolean z0, $z1, z2;
        java.lang.Throwable r4, $r6;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label3:
        if r3 == null goto label6;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

        z0 = 1;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label5:
        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        goto label3;

     label6:
        z2 = 0;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z2;

     label8:
        $r6 := @caughtexception;

        r4 = $r6;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2, r7;
        int i0, $i1, $i2;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        java.lang.Throwable r4, $r6;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i1 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        r2 = newarray (java.lang.Object)[$i1];

        i0 = 0;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label2:
        if r3 == null goto label3;

        $i2 = i0;

        i0 = i0 + 1;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        r2[$i2] = $r5;

        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        goto label2;

     label3:
        r7 = r2;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r7;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.lang.Object[] r1, $r9, r11;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        java.lang.Throwable r4, $r10;
        java.lang.Object $r5, $r8;
        java.lang.Class $r6, $r7;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i2 = lengthof r1;

        $i1 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        if $i2 >= $i1 goto label2;

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        $i5 = r0.<java.util.concurrent.LinkedBlockingDeque: int count>;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r7, $i5);

        $r9 = (java.lang.Object[]) $r8;

        r1 = (java.lang.Object[]) $r9;

     label2:
        i0 = 0;

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label3:
        if r3 == null goto label4;

        $i4 = i0;

        i0 = i0 + 1;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        r1[$i4] = $r5;

        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        goto label3;

     label4:
        $i3 = lengthof r1;

        if $i3 <= i0 goto label5;

        r1[i0] = null;

     label5:
        r11 = r1;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r11;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2;
        java.lang.String r3, r5;
        java.lang.Object r4, $r13;
        java.lang.Throwable r6, $r14;
        java.lang.StringBuilder $r7, $r10, $r12, r15;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

        if r2 != null goto label03;

        r3 = "[]";

     label02:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label03:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        r15 = $r7;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

     label04:
        r4 = r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        if r4 != r0 goto label05;

        $r13 = "(this Collection)";

        goto label06;

     label05:
        $r13 = r4;

     label06:
        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        r2 = r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        if r2 != null goto label08;

        $r12 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r5;

     label08:
        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label04;

     label09:
        $r14 := @caughtexception;

        r6 = $r14;

     label10:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label07 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public void clear()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.LinkedBlockingDeque$Node r2, r3;
        java.lang.Throwable r4, $r6;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label2:
        if r2 == null goto label3;

        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item> = null;

        r3 = r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node prev> = null;

        r2.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next> = null;

        r2 = r3;

        goto label2;

     label3:
        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = null;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = null;

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = 0;

        $r5 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.Condition notFull>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Condition: void signalAll()>();

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$Itr $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = new java.util.concurrent.LinkedBlockingDeque$Itr;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingDeque$Itr: void <init>(java.util.concurrent.LinkedBlockingDeque,java.util.concurrent.LinkedBlockingDeque$1)>(r0, null);

        return $r1;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.util.concurrent.LinkedBlockingDeque$DescendingItr $r1;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        $r1 = new java.util.concurrent.LinkedBlockingDeque$DescendingItr;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingDeque$DescendingItr: void <init>(java.util.concurrent.LinkedBlockingDeque,java.util.concurrent.LinkedBlockingDeque$1)>(r0, null);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.io.ObjectOutputStream r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.LinkedBlockingDeque$Node r3;
        java.lang.Throwable r4, $r6;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        r3 = r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first>;

     label2:
        if r3 == null goto label3;

        $r5 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.lang.Object item>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r5);

        r3 = r3.<java.util.concurrent.LinkedBlockingDeque$Node: java.util.concurrent.LinkedBlockingDeque$Node next>;

        goto label2;

     label3:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label5:
        $r6 := @caughtexception;

        r4 = $r6;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.LinkedBlockingDeque r0;
        java.io.ObjectInputStream r1;
        java.lang.Object r2;

        r0 := @this: java.util.concurrent.LinkedBlockingDeque;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<java.util.concurrent.LinkedBlockingDeque: int count> = 0;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node first> = null;

        r0.<java.util.concurrent.LinkedBlockingDeque: java.util.concurrent.LinkedBlockingDeque$Node last> = null;

     label1:
        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r2 != null goto label2;

        goto label3;

     label2:
        virtualinvoke r0.<java.util.concurrent.LinkedBlockingDeque: boolean add(java.lang.Object)>(r2);

        goto label1;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.LinkedBlockingDeque: long serialVersionUID> = -387911632671998426L;

        return;
    }
}
