class java.nio.SocketChannelImpl extends java.nio.channels.SocketChannel implements java.nio.FileDescriptorChannel
{
    private static final int SOCKET_STATUS_UNINITIALIZED;
    private static final int SOCKET_STATUS_UNCONNECTED;
    private static final int SOCKET_STATUS_PENDING;
    private static final int SOCKET_STATUS_CONNECTED;
    private static final int SOCKET_STATUS_CLOSED;
    private final java.io.FileDescriptor fd;
    private java.nio.SocketChannelImpl$SocketAdapter socket;
    private java.net.InetSocketAddress connectAddress;
    private java.net.InetAddress localAddress;
    private int localPort;
    private int status;
    private volatile boolean isBound;
    private final java.lang.Object readLock;
    private final java.lang.Object writeLock;

    public void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.nio.channels.spi.SelectorProvider, boolean) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        boolean z0;
        java.lang.Object $r2, $r3;
        java.io.FileDescriptor $r4;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket> = null;

        r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        r0.<java.nio.SocketChannelImpl: java.net.InetAddress localAddress> = null;

        r0.<java.nio.SocketChannelImpl: int status> = -1;

        r0.<java.nio.SocketChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.SocketChannelImpl: java.lang.Object readLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.SocketChannelImpl: java.lang.Object writeLock> = $r3;

        r0.<java.nio.SocketChannelImpl: int status> = 0;

        if z0 == 0 goto label1;

        $r4 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(1);

        goto label2;

     label1:
        $r4 = new java.io.FileDescriptor;

        specialinvoke $r4.<java.io.FileDescriptor: void <init>()>();

     label2:
        r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd> = $r4;

        return;
    }

    public void <init>(java.nio.channels.spi.SelectorProvider, java.io.FileDescriptor) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.io.FileDescriptor r2;
        java.lang.Object $r3, $r4;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        r2 := @parameter1: java.io.FileDescriptor;

        specialinvoke r0.<java.nio.channels.SocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket> = null;

        r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        r0.<java.nio.SocketChannelImpl: java.net.InetAddress localAddress> = null;

        r0.<java.nio.SocketChannelImpl: int status> = -1;

        r0.<java.nio.SocketChannelImpl: boolean isBound> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.SocketChannelImpl: java.lang.Object readLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<java.nio.SocketChannelImpl: java.lang.Object writeLock> = $r4;

        r0.<java.nio.SocketChannelImpl: int status> = 2;

        r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd> = r2;

        return;
    }

    public synchronized java.net.Socket socket()
    {
        java.nio.SocketChannelImpl r0;
        java.net.InetAddress r1;
        int i0, $i1;
        java.nio.SocketChannelImpl$SocketAdapter $r2, $r3, $r5;
        java.net.InetSocketAddress $r4, $r8, $r9;
        java.net.PlainSocketImpl $r6;
        java.io.FileDescriptor $r7;
        java.net.SocketException $r10;

        r0 := @this: java.nio.SocketChannelImpl;

        $r2 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        if $r2 != null goto label5;

     label1:
        r1 = null;

        i0 = 0;

        $r4 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        if $r4 == null goto label2;

        $r8 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        r1 = virtualinvoke $r8.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r9 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        i0 = virtualinvoke $r9.<java.net.InetSocketAddress: int getPort()>();

     label2:
        $r5 = new java.nio.SocketChannelImpl$SocketAdapter;

        $r6 = new java.net.PlainSocketImpl;

        $r7 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        $i1 = r0.<java.nio.SocketChannelImpl: int localPort>;

        specialinvoke $r6.<java.net.PlainSocketImpl: void <init>(java.io.FileDescriptor,int,java.net.InetAddress,int)>($r7, $i1, r1, i0);

        specialinvoke $r5.<java.nio.SocketChannelImpl$SocketAdapter: void <init>(java.net.PlainSocketImpl,java.nio.SocketChannelImpl)>($r6, r0);

        r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket> = $r5;

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        return null;

     label5:
        $r3 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        return $r3;

        catch java.net.SocketException from label1 to label3 with label4;
    }

    void onBind(boolean)
    {
        java.nio.SocketChannelImpl r0;
        boolean z0;
        java.net.SocketAddress r1;
        android.system.ErrnoException r2, $r9;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        java.net.InetAddress $r5, $r7;
        int $i0, $i1;
        java.nio.SocketChannelImpl$SocketAdapter $r6, $r8;
        java.lang.AssertionError $r10;
        java.net.InetSocketAddress r11;

        r0 := @this: java.nio.SocketChannelImpl;

        z0 := @parameter0: boolean;

     label1:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        r1 = interfaceinvoke $r4.<libcore.io.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>($r3);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

     label4:
        r0.<java.nio.SocketChannelImpl: boolean isBound> = 1;

        r11 = (java.net.InetSocketAddress) r1;

        $r5 = virtualinvoke r11.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r0.<java.nio.SocketChannelImpl: java.net.InetAddress localAddress> = $r5;

        $i0 = virtualinvoke r11.<java.net.InetSocketAddress: int getPort()>();

        r0.<java.nio.SocketChannelImpl: int localPort> = $i0;

        if z0 == 0 goto label5;

        $r6 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        if $r6 == null goto label5;

        $r8 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        $r7 = r0.<java.nio.SocketChannelImpl: java.net.InetAddress localAddress>;

        $i1 = r0.<java.nio.SocketChannelImpl: int localPort>;

        virtualinvoke $r8.<java.nio.SocketChannelImpl$SocketAdapter: void onBind(java.net.InetAddress,int)>($r7, $i1);

     label5:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public synchronized boolean isConnected()
    {
        java.nio.SocketChannelImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl;

        $i0 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i0 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized boolean isConnectionPending()
    {
        java.nio.SocketChannelImpl r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl;

        $i0 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i0 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean connect(java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        java.net.InetAddress r3;
        int i0, $i2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, z7;
        byte b1, $b3;
        java.io.IOException r4, $r7;
        java.lang.Throwable r5, $r8;
        java.io.FileDescriptor $r6;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<java.nio.SocketChannelImpl: void checkUnconnected()>();

        r2 = staticinvoke <java.nio.SocketChannelImpl: java.net.InetSocketAddress validateAddress(java.net.SocketAddress)>(r1);

        r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        $z2 = virtualinvoke r3.<java.net.InetAddress: boolean isAnyLocalAddress()>();

        if $z2 == 0 goto label01;

        r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

     label01:
        z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        z1 = 0;

     label02:
        if z0 == 0 goto label03;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void begin()>();

     label03:
        $r6 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r6, r3, i0);

        if z0 == 0 goto label04;

        $b3 = 2;

        goto label05;

     label04:
        $b3 = 1;

     label05:
        b1 = $b3;

        z7 = 1;

     label06:
        if z0 == 0 goto label14;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>(z7);

        goto label14;

     label07:
        $r7 := @caughtexception;

        r4 = $r7;

        $z6 = specialinvoke r0.<java.nio.SocketChannelImpl: boolean isEINPROGRESS(java.io.IOException)>(r4);

        if $z6 == 0 goto label08;

        b1 = 1;

        goto label10;

     label08:
        $z5 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z5 == 0 goto label09;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void close()>();

        z1 = 1;

     label09:
        throw r4;

     label10:
        if z0 == 0 goto label14;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>(z1);

        goto label14;

     label11:
        $r8 := @caughtexception;

        r5 = $r8;

     label12:
        if z0 == 0 goto label13;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>(z1);

     label13:
        throw r5;

     label14:
        $z3 = r0.<java.nio.SocketChannelImpl: boolean isBound>;

        if $z3 != 0 goto label15;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void onBind(boolean)>(1);

     label15:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void onConnectStatusChanged(java.net.InetSocketAddress,int,boolean)>(r2, b1, 1);

        $i2 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i2 != 2 goto label16;

        $z4 = 1;

        goto label17;

     label16:
        $z4 = 0;

     label17:
        return $z4;

        catch java.io.IOException from label02 to label06 with label07;
        catch java.lang.Throwable from label02 to label06 with label11;
        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    void onConnectStatusChanged(java.net.InetSocketAddress, int, boolean)
    {
        java.nio.SocketChannelImpl r0;
        java.net.InetSocketAddress r1, $r3, $r6;
        int i0, $i1;
        boolean z0;
        java.nio.SocketChannelImpl$SocketAdapter $r2, $r4;
        java.net.InetAddress $r5;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.net.InetSocketAddress;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<java.nio.SocketChannelImpl: int status> = i0;

        r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress> = r1;

        if i0 != 2 goto label1;

        if z0 == 0 goto label1;

        $r2 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        if $r2 == null goto label1;

        $r4 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        $r3 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r5 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r6 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        $i1 = virtualinvoke $r6.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r4.<java.nio.SocketChannelImpl$SocketAdapter: void onConnect(java.net.InetAddress,int)>($r5, $i1);

     label1:
        return;
    }

    private boolean isEINPROGRESS(java.io.IOException)
    {
        java.nio.SocketChannelImpl r0;
        java.io.IOException r1;
        java.lang.Throwable r2;
        boolean $z0, $z1, $z2, $z3;
        android.system.ErrnoException $r3;
        int $i0, $i1;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.io.IOException;

        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r1 instanceof java.net.ConnectException;

        if $z1 == 0 goto label4;

        r2 = virtualinvoke r1.<java.io.IOException: java.lang.Throwable getCause()>();

        $z2 = r2 instanceof android.system.ErrnoException;

        if $z2 == 0 goto label4;

        $r3 = (android.system.ErrnoException) r2;

        $i1 = $r3.<android.system.ErrnoException: int errno>;

        $i0 = <android.system.OsConstants: int EINPROGRESS>;

        if $i1 != $i0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public boolean finishConnect() throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0, r1, r23;
        java.lang.Throwable r2, r3, r4, $r16, $r18, $r20;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, z2, z3;
        java.net.InetSocketAddress $r6, $r7, $r10, $r14;
        java.io.FileDescriptor $r8;
        java.nio.SocketChannelImpl$SocketAdapter $r11, $r13;
        java.net.InetAddress $r12, r21;
        java.nio.channels.NoConnectionPendingException $r15;
        java.nio.channels.ClosedChannelException $r17;
        java.net.ConnectException $r19, r22;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 = r0;

        entermonitor r0;

     label01:
        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label02;

        $r17 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r17.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r17;

     label02:
        $i1 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i1 != 2 goto label04;

        exitmonitor r1;

     label03:
        return 1;

     label04:
        $i2 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i2 == 1 goto label05;

        $r15 = new java.nio.channels.NoConnectionPendingException;

        specialinvoke $r15.<java.nio.channels.NoConnectionPendingException: void <init>()>();

        throw $r15;

     label05:
        exitmonitor r1;

     label06:
        goto label09;

     label07:
        $r20 := @caughtexception;

        r2 = $r20;

        exitmonitor r1;

     label08:
        throw r2;

     label09:
        z2 = 0;

     label10:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void begin()>();

        $r6 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        r21 = virtualinvoke $r6.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r7 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        i0 = virtualinvoke $r7.<java.net.InetSocketAddress: int getPort()>();

        $r8 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        z3 = staticinvoke <libcore.io.IoBridge: boolean isConnected(java.io.FileDescriptor,java.net.InetAddress,int,int,int)>($r8, r21, i0, 0, 0);

     label11:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>(z3);

        goto label16;

     label12:
        $r19 := @caughtexception;

        r22 = $r19;

        $z1 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z1 == 0 goto label13;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void close()>();

        z2 = 1;

     label13:
        throw r22;

     label14:
        $r18 := @caughtexception;

        r3 = $r18;

     label15:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>(z2);

        throw r3;

     label16:
        r23 = r0;

        entermonitor r0;

     label17:
        if z3 == 0 goto label18;

        $i3 = 2;

        goto label19;

     label18:
        $i3 = r0.<java.nio.SocketChannelImpl: int status>;

     label19:
        r0.<java.nio.SocketChannelImpl: int status> = $i3;

        if z3 == 0 goto label20;

        $r11 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        if $r11 == null goto label20;

        $r13 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        $r10 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r12 = virtualinvoke $r10.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r14 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        $i4 = virtualinvoke $r14.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r13.<java.nio.SocketChannelImpl$SocketAdapter: void onConnect(java.net.InetAddress,int)>($r12, $i4);

     label20:
        exitmonitor r23;

     label21:
        goto label24;

     label22:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r23;

     label23:
        throw r4;

     label24:
        return z3;

        catch java.lang.Throwable from label01 to label03 with label07;
        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.net.ConnectException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label15 with label14;
        catch java.lang.Throwable from label17 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.SocketChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = specialinvoke r0.<java.nio.SocketChannelImpl: int readImpl(java.nio.ByteBuffer)>(r1);

        return $i0;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10;
        byte[] r2;
        java.nio.ByteBuffer r3, $r5, $r6;
        long $l8;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i7, i0, i1);

        specialinvoke r0.<java.nio.SocketChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 1);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = newarray (byte)[i2];

        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);

        i3 = specialinvoke r0.<java.nio.SocketChannelImpl: int readImpl(java.nio.ByteBuffer)>(r3);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        if i3 <= 0 goto label3;

        i4 = i3;

        i5 = i0;

     label2:
        if i4 <= 0 goto label3;

        $r5 = r1[i5];

        $i9 = virtualinvoke $r5.<java.nio.ByteBuffer: int remaining()>();

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i4);

        $r6 = r1[i5];

        $i10 = i3 - i4;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r2, $i10, i6);

        i5 = i5 + 1;

        i4 = i4 - i6;

        goto label2;

     label3:
        $l8 = (long) i3;

        return $l8;
    }

    private int readImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r5;
        int i0, $i1, $i2;
        java.lang.Throwable r3, r4, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.FileDescriptor $r6;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r5 = r0.<java.nio.SocketChannelImpl: java.lang.Object readLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        i0 = 0;

     label02:
        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z0 == 0 goto label03;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void begin()>();

     label03:
        $r6 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        i0 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.DatagramPacket,boolean)>(1, $r6, r1, 0, null, 0);

        if i0 <= 0 goto label04;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

     label04:
        $z1 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z1 == 0 goto label12;

        if i0 <= 0 goto label05;

        $z2 = 1;

        goto label06;

     label05:
        $z2 = 0;

     label06:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>($z2);

        goto label12;

     label07:
        $r9 := @caughtexception;

        r3 = $r9;

     label08:
        $z3 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z3 == 0 goto label11;

        if i0 <= 0 goto label09;

        $z4 = 1;

        goto label10;

     label09:
        $z4 = 0;

     label10:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>($z4);

     label11:
        throw r3;

     label12:
        exitmonitor r2;

     label13:
        return i0;

     label14:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label15:
        throw r4;

        catch java.lang.Throwable from label02 to label04 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label01 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean $z0;
        int $i0;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("src == null");

        throw $r2;

     label1:
        specialinvoke r0.<java.nio.SocketChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i0 = specialinvoke r0.<java.nio.SocketChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r1);

        return $i0;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i9, $i10, $i11, i12, i13, i14;
        java.nio.ByteBuffer r2, r3, r4;
        long $l8;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i6 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i6, i0, i1);

        specialinvoke r0.<java.nio.SocketChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 0);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        i3 = i0;

     label2:
        $i7 = i1 + i0;

        if i3 >= $i7 goto label3;

        r3 = r1[i3];

        i4 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r3);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i4);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        i12 = specialinvoke r0.<java.nio.SocketChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r2);

        i13 = i0;

        i14 = i12;

     label4:
        if i12 <= 0 goto label5;

        r4 = r1[i13];

        $i9 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i12, $i9);

        $i11 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        $i10 = $i11 + i5;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

        i13 = i13 + 1;

        i12 = i12 - i5;

        goto label4;

     label5:
        $l8 = (long) i14;

        return $l8;
    }

    private int writeImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r5;
        int i0, $i1, $i2;
        java.lang.Throwable r3, r4, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.io.FileDescriptor $r6;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r5 = r0.<java.nio.SocketChannelImpl: java.lang.Object writeLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label03;

        exitmonitor r2;

     label02:
        return 0;

     label03:
        i0 = 0;

     label04:
        $z1 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z1 == 0 goto label05;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void begin()>();

     label05:
        $r6 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        i0 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>($r6, r1, 0, null, 0);

        if i0 <= 0 goto label06;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

     label06:
        $z2 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z2 == 0 goto label14;

        if i0 < 0 goto label07;

        $z3 = 1;

        goto label08;

     label07:
        $z3 = 0;

     label08:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>($z3);

        goto label14;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

     label10:
        $z4 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isBlocking()>();

        if $z4 == 0 goto label13;

        if i0 < 0 goto label11;

        $z5 = 1;

        goto label12;

     label11:
        $z5 = 0;

     label12:
        virtualinvoke r0.<java.nio.SocketChannelImpl: void end(boolean)>($z5);

     label13:
        throw r3;

     label14:
        exitmonitor r2;

     label15:
        return i0;

     label16:
        $r9 := @caughtexception;

        r4 = $r9;

        exitmonitor r2;

     label17:
        throw r4;

        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private synchronized void checkOpenConnected() throws java.nio.channels.ClosedChannelException
    {
        java.nio.SocketChannelImpl r0;
        boolean $z0, $z1;
        java.nio.channels.NotYetConnectedException $r1;
        java.nio.channels.ClosedChannelException $r2;

        r0 := @this: java.nio.SocketChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r2 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r2.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r2;

     label1:
        $z1 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isConnected()>();

        if $z1 != 0 goto label2;

        $r1 = new java.nio.channels.NotYetConnectedException;

        specialinvoke $r1.<java.nio.channels.NotYetConnectedException: void <init>()>();

        throw $r1;

     label2:
        return;
    }

    private synchronized void checkUnconnected() throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        boolean $z0;
        int $i0, $i1;
        java.nio.channels.ConnectionPendingException $r1;
        java.nio.channels.AlreadyConnectedException $r2;
        java.nio.channels.ClosedChannelException $r3;

        r0 := @this: java.nio.SocketChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.SocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r3 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r3.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r3;

     label1:
        $i0 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i0 != 2 goto label2;

        $r2 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r2.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r2;

     label2:
        $i1 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i1 != 1 goto label3;

        $r1 = new java.nio.channels.ConnectionPendingException;

        specialinvoke $r1.<java.nio.channels.ConnectionPendingException: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    static java.net.InetSocketAddress validateAddress(java.net.SocketAddress)
    {
        java.net.SocketAddress r0;
        java.net.InetSocketAddress r1;
        boolean $z0, $z1;
        java.nio.channels.UnresolvedAddressException $r2;
        java.nio.channels.UnsupportedAddressTypeException $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.net.SocketAddress;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("socketAddress == null");

        throw $r4;

     label1:
        $z0 = r0 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label2;

        $r3 = new java.nio.channels.UnsupportedAddressTypeException;

        specialinvoke $r3.<java.nio.channels.UnsupportedAddressTypeException: void <init>()>();

        throw $r3;

     label2:
        r1 = (java.net.InetSocketAddress) r0;

        $z1 = virtualinvoke r1.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z1 == 0 goto label3;

        $r2 = new java.nio.channels.UnresolvedAddressException;

        specialinvoke $r2.<java.nio.channels.UnresolvedAddressException: void <init>()>();

        throw $r2;

     label3:
        return r1;
    }

    protected synchronized void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        int $i0;
        java.io.FileDescriptor $r1;
        java.nio.SocketChannelImpl$SocketAdapter $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: java.nio.SocketChannelImpl;

        $i0 = r0.<java.nio.SocketChannelImpl: int status>;

        if $i0 == 3 goto label1;

        r0.<java.nio.SocketChannelImpl: int status> = 3;

        $r1 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r1);

        $r2 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        if $r2 == null goto label1;

        $r3 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        $z0 = virtualinvoke $r3.<java.nio.SocketChannelImpl$SocketAdapter: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<java.nio.SocketChannelImpl: java.nio.SocketChannelImpl$SocketAdapter socket>;

        virtualinvoke $r4.<java.nio.SocketChannelImpl$SocketAdapter: void onClose()>();

     label1:
        return;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.SocketChannelImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.SocketChannelImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r1, z0);

        return;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.SocketChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.SocketChannelImpl;

        $r1 = r0.<java.nio.SocketChannelImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    public void onAccept(java.net.InetSocketAddress, boolean)
    {
        java.nio.SocketChannelImpl r0;
        java.net.InetSocketAddress r1;
        boolean z0;

        r0 := @this: java.nio.SocketChannelImpl;

        r1 := @parameter0: java.net.InetSocketAddress;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<java.nio.SocketChannelImpl: void onBind(boolean)>(z0);

        virtualinvoke r0.<java.nio.SocketChannelImpl: void onConnectStatusChanged(java.net.InetSocketAddress,int,boolean)>(r1, 2, z0);

        return;
    }

    static boolean access$000(java.nio.SocketChannelImpl)
    {
        java.nio.SocketChannelImpl r0;
        boolean $z0;

        r0 := @parameter0: java.nio.SocketChannelImpl;

        $z0 = r0.<java.nio.SocketChannelImpl: boolean isBound>;

        return $z0;
    }

    static java.net.InetAddress access$100(java.nio.SocketChannelImpl)
    {
        java.nio.SocketChannelImpl r0;
        java.net.InetAddress $r1;

        r0 := @parameter0: java.nio.SocketChannelImpl;

        $r1 = r0.<java.nio.SocketChannelImpl: java.net.InetAddress localAddress>;

        return $r1;
    }

    static int access$200(java.nio.SocketChannelImpl)
    {
        java.nio.SocketChannelImpl r0;
        int $i0;

        r0 := @parameter0: java.nio.SocketChannelImpl;

        $i0 = r0.<java.nio.SocketChannelImpl: int localPort>;

        return $i0;
    }

    static java.net.InetSocketAddress access$300(java.nio.SocketChannelImpl)
    {
        java.nio.SocketChannelImpl r0;
        java.net.InetSocketAddress $r1;

        r0 := @parameter0: java.nio.SocketChannelImpl;

        $r1 = r0.<java.nio.SocketChannelImpl: java.net.InetSocketAddress connectAddress>;

        return $r1;
    }

    static int access$400(java.nio.SocketChannelImpl)
    {
        java.nio.SocketChannelImpl r0;
        int $i0;

        r0 := @parameter0: java.nio.SocketChannelImpl;

        $i0 = r0.<java.nio.SocketChannelImpl: int status>;

        return $i0;
    }

    public static void <clinit>()
    {
        <java.nio.SocketChannelImpl: int SOCKET_STATUS_CLOSED> = 3;

        <java.nio.SocketChannelImpl: int SOCKET_STATUS_CONNECTED> = 2;

        <java.nio.SocketChannelImpl: int SOCKET_STATUS_PENDING> = 1;

        <java.nio.SocketChannelImpl: int SOCKET_STATUS_UNCONNECTED> = 0;

        <java.nio.SocketChannelImpl: int SOCKET_STATUS_UNINITIALIZED> = -1;

        return;
    }
}
