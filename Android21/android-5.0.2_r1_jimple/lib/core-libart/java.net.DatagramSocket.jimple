public class java.net.DatagramSocket extends java.lang.Object implements java.io.Closeable
{
    java.net.DatagramSocketImpl impl;
    java.net.InetAddress address;
    int port;
    static java.net.DatagramSocketImplFactory factory;
    boolean isBound;
    private boolean isConnected;
    private java.net.SocketException pendingConnectException;
    private boolean isClosed;
    private java.lang.Object lock;

    public void <init>() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;

        r0 := @this: java.net.DatagramSocket;

        specialinvoke r0.<java.net.DatagramSocket: void <init>(int)>(0);

        return;
    }

    public void <init>(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.Object $r1;
        java.net.InetAddress $r2;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isBound> = 0;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        r0.<java.net.DatagramSocket: boolean isClosed> = 0;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: java.lang.Object lock> = $r1;

        specialinvoke r0.<java.net.DatagramSocket: void checkPort(int)>(i0);

        $r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        virtualinvoke r0.<java.net.DatagramSocket: void createSocket(int,java.net.InetAddress)>(i0, $r2);

        return;
    }

    public void <init>(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.InetAddress r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isBound> = 0;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        r0.<java.net.DatagramSocket: boolean isClosed> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: java.lang.Object lock> = $r2;

        specialinvoke r0.<java.net.DatagramSocket: void checkPort(int)>(i0);

        if r1 != null goto label1;

        $r3 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        goto label2;

     label1:
        $r3 = r1;

     label2:
        virtualinvoke r0.<java.net.DatagramSocket: void createSocket(int,java.net.InetAddress)>(i0, $r3);

        return;
    }

    private void checkPort(int)
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if i0 <= 65535 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Port out of range: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public void close()
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.DatagramSocket;

        r0.<java.net.DatagramSocket: boolean isClosed> = 1;

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void close()>();

        return;
    }

    public void onClose()
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.DatagramSocket;

        r0.<java.net.DatagramSocket: boolean isClosed> = 1;

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void onClose()>();

        return;
    }

    public void disconnect()
    {
        java.net.DatagramSocket r0;
        boolean $z0, $z1;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isConnected()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void disconnect()>();

        r0.<java.net.DatagramSocket: java.net.InetAddress address> = null;

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        return;
    }

    public void onDisconnect()
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;

        r0 := @this: java.net.DatagramSocket;

        r0.<java.net.DatagramSocket: java.net.InetAddress address> = null;

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void onDisconnect()>();

        return;
    }

    synchronized void createSocket(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.InetAddress r1;
        java.net.SocketException r2, $r8;
        java.net.DatagramSocketImplFactory $r3, $r7;
        java.net.DatagramSocketImpl $r4, $r5, $r6;
        java.net.PlainDatagramSocketImpl r9;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        $r3 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;

        if $r3 == null goto label1;

        $r7 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;

        $r4 = interfaceinvoke $r7.<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>();

        goto label2;

     label1:
        r9 = new java.net.PlainDatagramSocketImpl;

        $r4 = r9;

        specialinvoke r9.<java.net.PlainDatagramSocketImpl: void <init>()>();

     label2:
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = $r4;

        $r5 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r5.<java.net.DatagramSocketImpl: void create()>();

     label3:
        $r6 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r6.<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>(i0, r1);

        r0.<java.net.DatagramSocket: boolean isBound> = 1;

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        r2 = $r8;

        virtualinvoke r0.<java.net.DatagramSocket: void close()>();

        throw r2;

     label6:
        return;

        catch java.net.SocketException from label3 to label4 with label5;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress $r1;

        r0 := @this: java.net.DatagramSocket;

        $r1 = r0.<java.net.DatagramSocket: java.net.InetAddress address>;

        return $r1;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r2;
        java.io.FileDescriptor $r3;
        java.net.InetAddress $r4;
        java.net.SocketException $r5;

        r0 := @this: java.net.DatagramSocket;

     label1:
        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r3 = $r2.<java.net.DatagramSocketImpl: java.io.FileDescriptor fd>;

        $r4 = staticinvoke <libcore.io.IoBridge: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public int getLocalPort()
    {
        java.net.DatagramSocket r0;
        boolean $z0, $z1;
        java.net.DatagramSocketImpl $r1;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $i0 = virtualinvoke $r1.<java.net.DatagramSocketImpl: int getLocalPort()>();

        return $i0;
    }

    public int getPort()
    {
        java.net.DatagramSocket r0;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        $i0 = r0.<java.net.DatagramSocket: int port>;

        return $i0;
    }

    boolean isMulticastSocket()
    {
        java.net.DatagramSocket r0;

        r0 := @this: java.net.DatagramSocket;

        return 0;
    }

    public synchronized int getReceiveBufferSize() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4098);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public synchronized int getSendBufferSize() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4097);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public synchronized int getSoTimeout() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4102);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public synchronized void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramPacket r1;
        java.net.SocketException $r2, $r4, $r5;
        java.net.DatagramSocketImpl $r3;
        java.lang.NullPointerException $r6;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.DatagramPacket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        specialinvoke r0.<java.net.DatagramSocket: void ensureBound()>();

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("pack == null");

        throw $r6;

     label1:
        $r2 = r0.<java.net.DatagramSocket: java.net.SocketException pendingConnectException>;

        if $r2 == null goto label2;

        $r4 = new java.net.SocketException;

        $r5 = r0.<java.net.DatagramSocket: java.net.SocketException pendingConnectException>;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String,java.lang.Throwable)>("Pending connect failure", $r5);

        throw $r4;

     label2:
        virtualinvoke r1.<java.net.DatagramPacket: void resetLengthForReceive()>();

        $r3 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r3.<java.net.DatagramSocketImpl: void receive(java.net.DatagramPacket)>(r1);

        return;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramPacket r1;
        java.net.InetAddress r2, $r3, $r6, $r7;
        java.net.DatagramSocketImpl $r4;
        java.lang.NullPointerException $r5;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalArgumentException $r8;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.DatagramPacket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        specialinvoke r0.<java.net.DatagramSocket: void ensureBound()>();

        r2 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r3 = r0.<java.net.DatagramSocket: java.net.InetAddress address>;

        if $r3 == null goto label3;

        if r2 == null goto label2;

        $r7 = r0.<java.net.DatagramSocket: java.net.InetAddress address>;

        $z0 = virtualinvoke $r7.<java.net.InetAddress: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $i1 = r0.<java.net.DatagramSocket: int port>;

        $i2 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();

        if $i1 == $i2 goto label4;

     label1:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Packet address mismatch with connected address");

        throw $r8;

     label2:
        $r6 = r0.<java.net.DatagramSocket: java.net.InetAddress address>;

        virtualinvoke r1.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r6);

        $i0 = r0.<java.net.DatagramSocket: int port>;

        virtualinvoke r1.<java.net.DatagramPacket: void setPort(int)>($i0);

        goto label4;

     label3:
        if r2 != null goto label4;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("Destination address is null");

        throw $r5;

     label4:
        $r4 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r4.<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)>(r1);

        return;
    }

    public void setNetworkInterface(java.net.NetworkInterface) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.NetworkInterface r1;
        android.system.ErrnoException r2, $r8;
        java.net.DatagramSocketImpl $r3;
        libcore.io.Os $r4;
        java.io.FileDescriptor $r5;
        int $i0, $i1;
        java.lang.String $r6;
        java.lang.NullPointerException $r7;
        java.net.SocketException $r9;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.NetworkInterface;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("netInterface == null");

        throw $r7;

     label1:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r5 = $r3.<java.net.DatagramSocketImpl: java.io.FileDescriptor fd>;

        $i0 = <android.system.OsConstants: int SOL_SOCKET>;

        $i1 = <android.system.OsConstants: int SO_BINDTODEVICE>;

        $r6 = virtualinvoke r1.<java.net.NetworkInterface: java.lang.String getName()>();

        interfaceinvoke $r4.<libcore.io.Os: void setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)>($r5, $i0, $i1, $r6);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        r2 = $r8;

        $r9 = virtualinvoke r2.<android.system.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r9;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public synchronized void setSendBufferSize(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 1");

        throw $r3;

     label1:
        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4097, $r2);

        return;
    }

    public synchronized void setReceiveBufferSize(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 1");

        throw $r3;

     label1:
        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4098, $r2);

        return;
    }

    public synchronized void setSoTimeout(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Integer $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("timeout < 0");

        throw $r3;

     label1:
        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4102, $r2);

        return;
    }

    public static synchronized void setDatagramSocketImplFactory(java.net.DatagramSocketImplFactory) throws java.io.IOException
    {
        java.net.DatagramSocketImplFactory r0, $r1;
        java.net.SocketException $r2;

        r0 := @parameter0: java.net.DatagramSocketImplFactory;

        $r1 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;

        if $r1 == null goto label1;

        $r2 = new java.net.SocketException;

        specialinvoke $r2.<java.net.SocketException: void <init>(java.lang.String)>("Factory already set");

        throw $r2;

     label1:
        <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory> = r0;

        return;
    }

    protected void <init>(java.net.DatagramSocketImpl)
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.DatagramSocketImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isBound> = 0;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        r0.<java.net.DatagramSocket: boolean isClosed> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: java.lang.Object lock> = $r2;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("socketImpl == null");

        throw $r3;

     label1:
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = r1;

        return;
    }

    public void <init>(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        java.net.SocketException r2, $r15;
        java.net.DatagramSocketImplFactory $r4, $r7;
        java.net.DatagramSocketImpl $r5, $r6;
        boolean $z0;
        java.net.InetSocketAddress $r8;
        int $i0;
        java.lang.StringBuilder $r11, $r14, r17;
        java.lang.Class $r12;
        java.lang.String $r13;
        java.lang.Object r16;
        java.lang.IllegalArgumentException r18;
        java.net.PlainDatagramSocketImpl r19;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: int port> = -1;

        r0.<java.net.DatagramSocket: boolean isBound> = 0;

        r0.<java.net.DatagramSocket: boolean isConnected> = 0;

        r0.<java.net.DatagramSocket: boolean isClosed> = 0;

        r16 = new java.lang.Object;

        specialinvoke r16.<java.lang.Object: void <init>()>();

        r0.<java.net.DatagramSocket: java.lang.Object lock> = r16;

        if r1 == null goto label2;

        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label1;

        r18 = new java.lang.IllegalArgumentException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local address not an InetSocketAddress: ");

        $r12 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r18;

     label1:
        $r8 = (java.net.InetSocketAddress) r1;

        $i0 = virtualinvoke $r8.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke r0.<java.net.DatagramSocket: void checkPort(int)>($i0);

     label2:
        $r4 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;

        if $r4 == null goto label3;

        $r7 = <java.net.DatagramSocket: java.net.DatagramSocketImplFactory factory>;

        $r5 = interfaceinvoke $r7.<java.net.DatagramSocketImplFactory: java.net.DatagramSocketImpl createDatagramSocketImpl()>();

        goto label4;

     label3:
        r19 = new java.net.PlainDatagramSocketImpl;

        $r5 = r19;

        specialinvoke r19.<java.net.PlainDatagramSocketImpl: void <init>()>();

     label4:
        r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl> = $r5;

        $r6 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r6.<java.net.DatagramSocketImpl: void create()>();

        if r1 == null goto label8;

     label5:
        virtualinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>(r1);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        r2 = $r15;

        virtualinvoke r0.<java.net.DatagramSocket: void close()>();

        throw r2;

     label8:
        virtualinvoke r0.<java.net.DatagramSocket: void setBroadcast(boolean)>(1);

        return;

        catch java.net.SocketException from label5 to label6 with label7;
    }

    void checkOpen() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.SocketException $r1;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r1;

     label1:
        return;
    }

    private void ensureBound() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.InetAddress $r1;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r1 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>(0, $r1);

        r0.<java.net.DatagramSocket: boolean isBound> = 1;

     label1:
        return;
    }

    public void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        int i0;
        java.net.InetAddress r2;
        java.net.InetSocketAddress r3;
        boolean $z0;
        java.net.DatagramSocketImpl $r4;
        java.net.SocketException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r14;
        java.lang.String $r8, $r10, $r16;
        java.lang.IllegalArgumentException $r11;
        java.lang.Class $r15;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.SocketAddress;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        if r1 != null goto label1;

        i0 = 0;

        r2 = <java.net.Inet4Address: java.net.InetAddress ANY>;

        goto label4;

     label1:
        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Local address not an InetSocketAddress: ");

        $r15 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label2:
        r3 = (java.net.InetSocketAddress) r1;

        r2 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if r2 != null goto label3;

        $r5 = new java.net.SocketException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r8 = virtualinvoke r3.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.net.SocketException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        i0 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke r0.<java.net.DatagramSocket: void checkPort(int)>(i0);

     label4:
        $r4 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r4.<java.net.DatagramSocketImpl: void bind(int,java.net.InetAddress)>(i0, r2);

        r0.<java.net.DatagramSocket: boolean isBound> = 1;

        return;
    }

    public void onBind(java.net.InetAddress, int)
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.DatagramSocket: boolean isBound> = 1;

        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void onBind(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    public void connect(java.net.SocketAddress) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r22;
        boolean $z0;
        java.net.InetAddress $r5, $r7, $r8;
        int $i0, $i1;
        java.net.DatagramSocketImpl $r9;
        java.net.SocketException $r10;
        java.lang.StringBuilder $r11, $r13, $r15, $r16, $r19, $r21;
        java.lang.String $r12, $r14, $r20;
        java.lang.IllegalArgumentException $r17, $r23;
        java.lang.Class $r18;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.SocketAddress;

        if r1 != null goto label1;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("peer == null");

        throw $r23;

     label1:
        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label2;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("peer not an InetSocketAddress: ");

        $r18 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label2:
        r2 = (java.net.InetSocketAddress) r1;

        $r5 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if $r5 != null goto label3;

        $r10 = new java.net.SocketException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r12 = virtualinvoke r2.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.net.SocketException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label3:
        $r6 = r0.<java.net.DatagramSocket: java.lang.Object lock>;

        r3 = $r6;

        entermonitor $r6;

     label4:
        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        specialinvoke r0.<java.net.DatagramSocket: void ensureBound()>();

        $r7 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r0.<java.net.DatagramSocket: java.net.InetAddress address> = $r7;

        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        r0.<java.net.DatagramSocket: int port> = $i0;

        r0.<java.net.DatagramSocket: boolean isConnected> = 1;

        $r9 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r8 = r0.<java.net.DatagramSocket: java.net.InetAddress address>;

        $i1 = r0.<java.net.DatagramSocket: int port>;

        virtualinvoke $r9.<java.net.DatagramSocketImpl: void connect(java.net.InetAddress,int)>($r8, $i1);

        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r22 := @caughtexception;

        r4 = $r22;

        exitmonitor r3;

     label7:
        throw r4;

     label8:
        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void onConnect(java.net.InetAddress, int)
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.DatagramSocketImpl $r2;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.DatagramSocket: boolean isConnected> = 1;

        r0.<java.net.DatagramSocket: java.net.InetAddress address> = r1;

        r0.<java.net.DatagramSocket: int port> = i0;

        $r2 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        virtualinvoke $r2.<java.net.DatagramSocketImpl: void onConnect(java.net.InetAddress,int)>(r1, i0);

        return;
    }

    public void connect(java.net.InetAddress, int)
    {
        java.net.DatagramSocket r0;
        java.net.InetAddress r1;
        int i0;
        java.net.SocketException r2, $r5;
        java.net.InetSocketAddress $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: java.net.DatagramSocket;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("address == null");

        throw $r4;

     label1:
        $r3 = new java.net.InetSocketAddress;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        virtualinvoke r0.<java.net.DatagramSocket: void connect(java.net.SocketAddress)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        r0.<java.net.DatagramSocket: java.net.SocketException pendingConnectException> = r2;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public boolean isBound()
    {
        java.net.DatagramSocket r0;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = r0.<java.net.DatagramSocket: boolean isBound>;

        return $z0;
    }

    public boolean isConnected()
    {
        java.net.DatagramSocket r0;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = r0.<java.net.DatagramSocket: boolean isConnected>;

        return $z0;
    }

    public java.net.SocketAddress getRemoteSocketAddress()
    {
        java.net.DatagramSocket r0;
        boolean $z0;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.InetAddress getInetAddress()>();

        $i0 = virtualinvoke r0.<java.net.DatagramSocket: int getPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        java.net.DatagramSocket r0;
        boolean $z0, $z1;
        java.net.InetSocketAddress $r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = virtualinvoke r0.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.net.DatagramSocket: boolean isBound()>();

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = new java.net.InetSocketAddress;

        $r2 = virtualinvoke r0.<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()>();

        $i0 = virtualinvoke r0.<java.net.DatagramSocket: int getLocalPort()>();

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        return $r1;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean z0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.DatagramSocket;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(4, $r2);

        return;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(4);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setBroadcast(boolean) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        boolean z0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Boolean $r2;

        r0 := @this: java.net.DatagramSocket;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        virtualinvoke $r1.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(32, $r2);

        return;
    }

    public boolean getBroadcast() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Boolean $r3;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(32);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.net.DatagramSocketImpl $r6;
        java.lang.Integer $r7;

        r0 := @this: java.net.DatagramSocket;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        if i0 < 0 goto label1;

        if i0 <= 255 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value doesn\'t fit in an unsigned byte: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        $r6 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r6.<java.net.DatagramSocketImpl: void setOption(int,java.lang.Object)>(3, $r7);

        return;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        r0 := @this: java.net.DatagramSocket;

        virtualinvoke r0.<java.net.DatagramSocket: void checkOpen()>();

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.DatagramSocketImpl: java.lang.Object getOption(int)>(3);

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public boolean isClosed()
    {
        java.net.DatagramSocket r0;
        boolean $z0;

        r0 := @this: java.net.DatagramSocket;

        $z0 = r0.<java.net.DatagramSocket: boolean isClosed>;

        return $z0;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        java.net.DatagramSocket r0;

        r0 := @this: java.net.DatagramSocket;

        return null;
    }

    public final java.io.FileDescriptor getFileDescriptor$()
    {
        java.net.DatagramSocket r0;
        java.net.DatagramSocketImpl $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.DatagramSocket;

        $r1 = r0.<java.net.DatagramSocket: java.net.DatagramSocketImpl impl>;

        $r2 = $r1.<java.net.DatagramSocketImpl: java.io.FileDescriptor fd>;

        return $r2;
    }
}
