public class java.util.Observable extends java.lang.Object
{
    java.util.List observers;
    boolean changed;

    public void <init>()
    {
        java.util.Observable r0;
        java.util.ArrayList $r1;

        r0 := @this: java.util.Observable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<java.util.Observable: java.util.List observers> = $r1;

        r0.<java.util.Observable: boolean changed> = 0;

        return;
    }

    public void addObserver(java.util.Observer)
    {
        java.util.Observable r0, r2;
        java.util.Observer r1;
        java.lang.Throwable r3, $r8;
        java.util.List $r5, $r6;
        boolean $z0;
        java.lang.NullPointerException $r7;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.util.Observer;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("observer == null");

        throw $r7;

     label1:
        r2 = r0;

        entermonitor r0;

     label2:
        $r5 = r0.<java.util.Observable: java.util.List observers>;

        $z0 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r6 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

     label3:
        exitmonitor r2;

     label4:
        goto label7;

     label5:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r2;

     label6:
        throw r3;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected void clearChanged()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        r0.<java.util.Observable: boolean changed> = 0;

        return;
    }

    public int countObservers()
    {
        java.util.Observable r0;
        java.util.List $r1;
        int $i0;

        r0 := @this: java.util.Observable;

        $r1 = r0.<java.util.Observable: java.util.List observers>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public synchronized void deleteObserver(java.util.Observer)
    {
        java.util.Observable r0;
        java.util.Observer r1;
        java.util.List $r2;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.util.Observer;

        $r2 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public synchronized void deleteObservers()
    {
        java.util.Observable r0;
        java.util.List $r1;

        r0 := @this: java.util.Observable;

        $r1 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    public boolean hasChanged()
    {
        java.util.Observable r0;
        boolean $z0;

        r0 := @this: java.util.Observable;

        $z0 = r0.<java.util.Observable: boolean changed>;

        return $z0;
    }

    public void notifyObservers()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        virtualinvoke r0.<java.util.Observable: void notifyObservers(java.lang.Object)>(null);

        return;
    }

    public void notifyObservers(java.lang.Object)
    {
        java.util.Observable r0, r3;
        java.lang.Object r1;
        java.util.Observer[] r2, r11;
        java.lang.Throwable r4, $r10;
        int i0, i1, i2;
        java.util.Observer r5;
        boolean $z1;
        java.util.List $r7, $r8;

        r0 := @this: java.util.Observable;

        r1 := @parameter0: java.lang.Object;

        r2 = null;

        r3 = r0;

        entermonitor r0;

     label1:
        $z1 = virtualinvoke r0.<java.util.Observable: boolean hasChanged()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<java.util.Observable: void clearChanged()>();

        $r7 = r0.<java.util.Observable: java.util.List observers>;

        i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        r2 = newarray (java.util.Observer)[i1];

        $r8 = r0.<java.util.Observable: java.util.List observers>;

        interfaceinvoke $r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2);

     label2:
        exitmonitor r3;

     label3:
        goto label6;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r3;

     label5:
        throw r4;

     label6:
        if r2 == null goto label8;

        r11 = r2;

        i2 = lengthof r11;

        i0 = 0;

     label7:
        if i0 >= i2 goto label8;

        r5 = r11[i0];

        interfaceinvoke r5.<java.util.Observer: void update(java.util.Observable,java.lang.Object)>(r0, r1);

        i0 = i0 + 1;

        goto label7;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void setChanged()
    {
        java.util.Observable r0;

        r0 := @this: java.util.Observable;

        r0.<java.util.Observable: boolean changed> = 1;

        return;
    }
}
