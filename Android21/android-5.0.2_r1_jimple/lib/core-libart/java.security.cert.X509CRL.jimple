public abstract class java.security.cert.X509CRL extends java.security.cert.CRL implements java.security.cert.X509Extension
{

    protected void <init>()
    {
        java.security.cert.X509CRL r0;

        r0 := @this: java.security.cert.X509CRL;

        specialinvoke r0.<java.security.cert.CRL: void <init>(java.lang.String)>("X.509");

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.security.cert.X509CRL r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        byte[] $r4, $r5;
        java.security.cert.CRLException $r6;

        r0 := @this: java.security.cert.X509CRL;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.security.cert.X509CRL;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.security.cert.X509CRL) r1;

     label3:
        $r4 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();

        $r5 = virtualinvoke r2.<java.security.cert.X509CRL: byte[] getEncoded()>();

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, $r5);

     label4:
        return $z1;

     label5:
        $r6 := @caughtexception;

        return 0;

        catch java.security.cert.CRLException from label3 to label4 with label5;
    }

    public int hashCode()
    {
        java.security.cert.X509CRL r0;
        int i0, i1, $i2;
        byte[] r1;
        byte $b3;
        short $s4;
        java.security.cert.CRLException $r2;

        r0 := @this: java.security.cert.X509CRL;

     label1:
        i0 = 0;

        r1 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();

        i1 = 0;

     label2:
        $i2 = lengthof r1;

        if i1 >= $i2 goto label3;

        $b3 = r1[i1];

        $s4 = $b3 & 255;

        i0 = i0 + $s4;

        i1 = i1 + 1;

        goto label2;

     label3:
        return i0;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.security.cert.CRLException from label1 to label3 with label4;
    }

    public abstract byte[] getEncoded() throws java.security.cert.CRLException;

    public abstract void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    public abstract void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException;

    public abstract int getVersion();

    public abstract java.security.Principal getIssuerDN();

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        java.security.cert.X509CRL r0, r2;
        java.security.cert.CertificateFactory r1;
        java.io.ByteArrayInputStream $r3;
        byte[] $r4;
        java.security.cert.CRL $r5;
        javax.security.auth.x500.X500Principal $r6;
        java.lang.Exception $r7, r9;
        java.lang.RuntimeException $r8;

        r0 := @this: java.security.cert.X509CRL;

     label1:
        r1 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r3 = new java.io.ByteArrayInputStream;

        $r4 = virtualinvoke r0.<java.security.cert.X509CRL: byte[] getEncoded()>();

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>($r4);

        $r5 = virtualinvoke r1.<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)>($r3);

        r2 = (java.security.cert.X509CRL) $r5;

        $r6 = virtualinvoke r2.<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to get X500Principal issuer", r9);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public abstract java.util.Date getThisUpdate();

    public abstract java.util.Date getNextUpdate();

    public abstract java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger);

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        java.security.cert.X509CRL r0;
        java.security.cert.X509Certificate r1;
        java.math.BigInteger $r2;
        java.security.cert.X509CRLEntry $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.security.cert.X509CRL;

        r1 := @parameter0: java.security.cert.X509Certificate;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("certificate == null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        $r3 = virtualinvoke r0.<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)>($r2);

        return $r3;
    }

    public abstract java.util.Set getRevokedCertificates();

    public abstract byte[] getTBSCertList() throws java.security.cert.CRLException;

    public abstract byte[] getSignature();

    public abstract java.lang.String getSigAlgName();

    public abstract java.lang.String getSigAlgOID();

    public abstract byte[] getSigAlgParams();
}
