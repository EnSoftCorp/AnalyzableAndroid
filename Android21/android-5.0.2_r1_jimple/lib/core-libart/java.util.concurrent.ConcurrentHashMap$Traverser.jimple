class java.util.concurrent.ConcurrentHashMap$Traverser extends java.lang.Object
{
    java.util.concurrent.ConcurrentHashMap$Node[] tab;
    java.util.concurrent.ConcurrentHashMap$Node next;
    int index;
    int baseIndex;
    int baseLimit;
    final int baseSize;

    void <init>(java.util.concurrent.ConcurrentHashMap$Node[], int, int, int)
    {
        java.util.concurrent.ConcurrentHashMap$Traverser r0;
        java.util.concurrent.ConcurrentHashMap$Node[] r1;
        int i0, i1, i2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Traverser;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$Node[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node[] tab> = r1;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseSize> = i0;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index> = i1;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseIndex> = i1;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseLimit> = i2;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node next> = null;

        return;
    }

    final java.util.concurrent.ConcurrentHashMap$Node advance()
    {
        java.util.concurrent.ConcurrentHashMap$Traverser r0;
        java.util.concurrent.ConcurrentHashMap$Node r1, $r3, $r5;
        java.util.concurrent.ConcurrentHashMap$Node[] r2, $r4, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean $z0, $z1;
        java.util.concurrent.ConcurrentHashMap$TreeBin $r6;
        java.util.concurrent.ConcurrentHashMap$ForwardingNode $r8;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Traverser;

        $r3 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node next>;

        r1 = $r3;

        if $r3 == null goto label1;

        r1 = r1.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

     label1:
        if r1 == null goto label2;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node next> = r1;

        return r1;

     label2:
        $i3 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseIndex>;

        $i2 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseLimit>;

        if $i3 >= $i2 goto label3;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node[] tab>;

        r2 = $r4;

        if $r4 == null goto label3;

        $i4 = lengthof r2;

        i1 = $i4;

        $i5 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index>;

        i0 = $i5;

        if $i4 <= $i5 goto label3;

        if i0 >= 0 goto label4;

     label3:
        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node next> = null;

        return null;

     label4:
        $i6 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index>;

        $r5 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node tabAt(java.util.concurrent.ConcurrentHashMap$Node[],int)>(r2, $i6);

        r1 = $r5;

        if $r5 == null goto label7;

        $i12 = r1.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i12 >= 0 goto label7;

        $z0 = r1 instanceof java.util.concurrent.ConcurrentHashMap$ForwardingNode;

        if $z0 == 0 goto label5;

        $r8 = (java.util.concurrent.ConcurrentHashMap$ForwardingNode) r1;

        $r7 = $r8.<java.util.concurrent.ConcurrentHashMap$ForwardingNode: java.util.concurrent.ConcurrentHashMap$Node[] nextTable>;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: java.util.concurrent.ConcurrentHashMap$Node[] tab> = $r7;

        r1 = null;

        goto label1;

     label5:
        $z1 = r1 instanceof java.util.concurrent.ConcurrentHashMap$TreeBin;

        if $z1 == 0 goto label6;

        $r6 = (java.util.concurrent.ConcurrentHashMap$TreeBin) r1;

        r1 = $r6.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        goto label7;

     label6:
        r1 = null;

     label7:
        $i9 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index>;

        $i7 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseSize>;

        $i8 = $i9 + $i7;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index> = $i8;

        if $i8 < i1 goto label8;

        $i11 = r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseIndex>;

        $i10 = $i11 + 1;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int baseIndex> = $i10;

        r0.<java.util.concurrent.ConcurrentHashMap$Traverser: int index> = $i10;

     label8:
        goto label1;
    }
}
