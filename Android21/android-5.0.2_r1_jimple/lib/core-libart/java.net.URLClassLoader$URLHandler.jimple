class java.net.URLClassLoader$URLHandler extends java.lang.Object
{
    java.net.URL url;
    java.net.URL codeSourceUrl;
    final java.net.URLClassLoader this$0;

    public void <init>(java.net.URLClassLoader, java.net.URL)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.net.URLClassLoader r1;
        java.net.URL r2;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.net.URLClassLoader;

        r2 := @parameter1: java.net.URL;

        r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.net.URLClassLoader$URLHandler: java.net.URL url> = r2;

        r0.<java.net.URLClassLoader$URLHandler: java.net.URL codeSourceUrl> = r2;

        return;
    }

    void findResources(java.lang.String, java.util.ArrayList)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1;
        java.util.ArrayList r2;
        java.net.URL r3;
        boolean $z0;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.ArrayList;

        r3 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL findResource(java.lang.String)>(r1);

        if r3 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label1:
        return;
    }

    java.lang.Class findClass(java.lang.String, java.lang.String, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1, r2, r3;
        java.net.URL r4, $r6;
        java.io.InputStream r5;
        java.lang.Class $r7;
        java.io.IOException $r8;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r6 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL url>;

        r4 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL targetURL(java.net.URL,java.lang.String)>($r6, r2);

        if r4 == null goto label4;

     label1:
        r5 = virtualinvoke r4.<java.net.URL: java.io.InputStream openStream()>();

        $r7 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.lang.Class createClass(java.io.InputStream,java.lang.String,java.lang.String)>(r5, r1, r3);

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

     label4:
        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.lang.Class createClass(java.io.InputStream, java.lang.String, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.io.InputStream r1;
        java.lang.String r2, r3, r17;
        byte[] r4;
        java.lang.Package r6;
        java.security.CodeSource $r7;
        java.security.cert.Certificate[] $r8;
        java.net.URL $r9;
        java.net.URLClassLoader $r10, $r12, $r15;
        int $i0;
        java.lang.Class $r11;
        java.lang.SecurityException $r13;
        boolean $z0;
        java.io.IOException $r16;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        r4 = staticinvoke <libcore.io.Streams: byte[] readFully(java.io.InputStream)>(r1);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        return null;

     label4:
        if r2 == null goto label6;

        r17 = virtualinvoke r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r12 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        r6 = staticinvoke <java.net.URLClassLoader: java.lang.Package access$000(java.net.URLClassLoader,java.lang.String)>($r12, r17);

        if r6 != null goto label5;

        $r15 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        staticinvoke <java.net.URLClassLoader: java.lang.Package access$100(java.net.URLClassLoader,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)>($r15, r17, null, null, null, null, null, null, null);

        goto label6;

     label5:
        $z0 = virtualinvoke r6.<java.lang.Package: boolean isSealed()>();

        if $z0 == 0 goto label6;

        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Package is sealed");

        throw $r13;

     label6:
        $r10 = r0.<java.net.URLClassLoader$URLHandler: java.net.URLClassLoader this$0>;

        $i0 = lengthof r4;

        $r7 = new java.security.CodeSource;

        $r9 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL codeSourceUrl>;

        $r8 = (java.security.cert.Certificate[]) null;

        specialinvoke $r7.<java.security.CodeSource: void <init>(java.net.URL,java.security.cert.Certificate[])>($r9, $r8);

        $r11 = staticinvoke <java.net.URLClassLoader: java.lang.Class access$200(java.net.URLClassLoader,java.lang.String,byte[],int,int,java.security.CodeSource)>($r10, r3, r4, 0, $i0, $r7);

        return $r11;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.net.URL findResource(java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.lang.String r1, $r6;
        java.net.URL r2, $r4;
        java.net.URLConnection r3;
        int i0, $i1;
        java.io.InputStream $r5;
        boolean $z0;
        java.net.HttpURLConnection $r7;
        java.lang.SecurityException $r8;
        java.io.IOException $r9;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<java.net.URLClassLoader$URLHandler: java.net.URL url>;

        r2 = virtualinvoke r0.<java.net.URLClassLoader$URLHandler: java.net.URL targetURL(java.net.URL,java.lang.String)>($r4, r1);

        if r2 == null goto label8;

     label1:
        r3 = virtualinvoke r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r5 = virtualinvoke r3.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        $r6 = virtualinvoke r2.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("http");

        if $z0 != 0 goto label3;

     label2:
        return r2;

     label3:
        $r7 = (java.net.HttpURLConnection) r3;

        $i1 = virtualinvoke $r7.<java.net.HttpURLConnection: int getResponseCode()>();

        i0 = $i1;

        if $i1 < 200 goto label5;

        if i0 >= 300 goto label5;

     label4:
        return r2;

     label5:
        goto label8;

     label6:
        $r8 := @caughtexception;

        return null;

     label7:
        $r9 := @caughtexception;

        return null;

     label8:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.lang.SecurityException from label3 to label4 with label6;
        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
    }

    java.net.URL targetURL(java.net.URL, java.lang.String)
    {
        java.net.URLClassLoader$URLHandler r0;
        java.net.URL r1, $r9;
        java.lang.String r2, r4, $r6, $r10, $r11;
        java.lang.StringBuilder r3, $r5;
        libcore.net.UriCodec $r8;
        int $i0;
        java.net.MalformedURLException $r12;

        r0 := @this: java.net.URLClassLoader$URLHandler;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        r3 = $r5;

        $r6 = virtualinvoke r1.<java.net.URL: java.lang.String getFile()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = <java.net.URI: libcore.net.UriCodec PATH_ENCODER>;

        virtualinvoke $r8.<libcore.net.UriCodec: void appendEncoded(java.lang.StringBuilder,java.lang.String)>(r3, r2);

        r4 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = new java.net.URL;

        $r10 = virtualinvoke r1.<java.net.URL: java.lang.String getProtocol()>();

        $r11 = virtualinvoke r1.<java.net.URL: java.lang.String getHost()>();

        $i0 = virtualinvoke r1.<java.net.URL: int getPort()>();

        specialinvoke $r9.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>($r10, $r11, $i0, r4, null);

     label2:
        return $r9;

     label3:
        $r12 := @caughtexception;

        return null;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }
}
