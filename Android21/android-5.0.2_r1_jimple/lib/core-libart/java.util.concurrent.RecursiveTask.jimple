public abstract class java.util.concurrent.RecursiveTask extends java.util.concurrent.ForkJoinTask
{
    private static final long serialVersionUID;
    java.lang.Object result;

    public void <init>()
    {
        java.util.concurrent.RecursiveTask r0;

        r0 := @this: java.util.concurrent.RecursiveTask;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void <init>()>();

        return;
    }

    protected abstract java.lang.Object compute();

    public final java.lang.Object getRawResult()
    {
        java.util.concurrent.RecursiveTask r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.RecursiveTask;

        $r1 = r0.<java.util.concurrent.RecursiveTask: java.lang.Object result>;

        return $r1;
    }

    protected final void setRawResult(java.lang.Object)
    {
        java.util.concurrent.RecursiveTask r0;
        java.lang.Object r1;

        r0 := @this: java.util.concurrent.RecursiveTask;

        r1 := @parameter0: java.lang.Object;

        r0.<java.util.concurrent.RecursiveTask: java.lang.Object result> = r1;

        return;
    }

    protected final boolean exec()
    {
        java.util.concurrent.RecursiveTask r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.RecursiveTask;

        $r1 = virtualinvoke r0.<java.util.concurrent.RecursiveTask: java.lang.Object compute()>();

        r0.<java.util.concurrent.RecursiveTask: java.lang.Object result> = $r1;

        return 1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.RecursiveTask: long serialVersionUID> = 5232453952276485270L;

        return;
    }
}
