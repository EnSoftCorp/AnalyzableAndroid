class org.apache.harmony.xml.parsers.DocumentBuilderImpl extends javax.xml.parsers.DocumentBuilder
{
    private static org.apache.harmony.xml.dom.DOMImplementationImpl dom;
    private boolean coalescing;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.ErrorHandler errorHandler;
    private boolean ignoreComments;
    private boolean ignoreElementContentWhitespace;
    private boolean namespaceAware;

    void <init>()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        specialinvoke r0.<javax.xml.parsers.DocumentBuilder: void <init>()>();

        return;
    }

    public void reset()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver> = null;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler> = null;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace> = 0;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware> = 0;

        return;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementation()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        return $r1;
    }

    public boolean isNamespaceAware()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        return $z0;
    }

    public boolean isValidating()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        return 0;
    }

    public org.w3c.dom.Document newDocument()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r1;
        org.w3c.dom.Document $r2;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xml.dom.DOMImplementationImpl: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>(null, null, null);

        return $r2;
    }

    public org.w3c.dom.Document parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException, java.io.IOException
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.InputSource r1;
        java.lang.String r2, r3, $r27, $r30;
        org.apache.harmony.xml.dom.DocumentImpl r4, $r10;
        org.kxml2.io.KXmlParser r5, $r11;
        java.net.URL r6, $r16;
        java.net.URLConnection r7;
        org.xml.sax.SAXParseException r8, $r14, $r19, $r26;
        java.lang.Throwable r9, $r22, $r25, $r29, $r33, $r35;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r12;
        java.io.InputStream $r13, $r17, $r21;
        boolean $z0, $z1, $z2;
        java.io.Reader $r15, $r18;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r20;
        org.xmlpull.v1.XmlPullParserException $r23, r36;
        org.xml.sax.helpers.LocatorImpl $r24, r37;
        org.xml.sax.ErrorHandler $r28, $r31;
        java.io.IOException $r32;
        java.lang.RuntimeException $r34;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.InputSource;

        if r1 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("source == null");

        throw $r20;

     label01:
        r2 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        r3 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        $r10 = new org.apache.harmony.xml.dom.DocumentImpl;

        $r12 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom>;

        specialinvoke $r10.<org.apache.harmony.xml.dom.DocumentImpl: void <init>(org.apache.harmony.xml.dom.DOMImplementationImpl,java.lang.String,java.lang.String,org.w3c.dom.DocumentType,java.lang.String)>($r12, null, null, null, r2);

        r4 = $r10;

        virtualinvoke r4.<org.apache.harmony.xml.dom.DocumentImpl: void setDocumentURI(java.lang.String)>(r3);

        $r11 = new org.kxml2.io.KXmlParser;

        specialinvoke $r11.<org.kxml2.io.KXmlParser: void <init>()>();

        r5 = $r11;

     label02:
        virtualinvoke r5.<org.kxml2.io.KXmlParser: void keepNamespaceAttributes()>();

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", $z0);

        $r13 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        if $r13 == null goto label03;

        $r21 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>($r21, r2);

        goto label06;

     label03:
        $r15 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        if $r15 == null goto label04;

        $r18 = virtualinvoke r1.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.Reader)>($r18);

        goto label06;

     label04:
        if r3 == null goto label05;

        $r16 = new java.net.URL;

        specialinvoke $r16.<java.net.URL: void <init>(java.lang.String)>(r3);

        r6 = $r16;

        r7 = virtualinvoke r6.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke r7.<java.net.URLConnection: void connect()>();

        $r17 = virtualinvoke r7.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void setInput(java.io.InputStream,java.lang.String)>($r17, r2);

        goto label06;

     label05:
        $r14 = new org.xml.sax.SAXParseException;

        specialinvoke $r14.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("InputSource needs a stream, reader or URI", null);

        throw $r14;

     label06:
        $i0 = virtualinvoke r5.<org.kxml2.io.KXmlParser: int nextToken()>();

        if $i0 != 1 goto label07;

        $r19 = new org.xml.sax.SAXParseException;

        specialinvoke $r19.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("Unexpected end of document", null);

        throw $r19;

     label07:
        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r5, r4, r4, 1);

        virtualinvoke r5.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(1, null, null);

     label08:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        goto label15;

     label09:
        $r23 := @caughtexception;

        r36 = $r23;

        $r22 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z2 = $r22 instanceof java.io.IOException;

        if $z2 == 0 goto label10;

        $r35 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r32 = (java.io.IOException) $r35;

        throw $r32;

     label10:
        $r25 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z1 = $r25 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label11;

        $r29 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r34 = (java.lang.RuntimeException) $r29;

        throw $r34;

     label11:
        $r24 = new org.xml.sax.helpers.LocatorImpl;

        specialinvoke $r24.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        r37 = $r24;

        $r27 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        virtualinvoke r37.<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>($r27);

        virtualinvoke r37.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>(r3);

        $i2 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>();

        virtualinvoke r37.<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>($i2);

        $i1 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>();

        virtualinvoke r37.<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>($i1);

        $r26 = new org.xml.sax.SAXParseException;

        $r30 = virtualinvoke r36.<org.xmlpull.v1.XmlPullParserException: java.lang.String getMessage()>();

        specialinvoke $r26.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>($r30, r37);

        r8 = $r26;

        $r31 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        if $r31 == null goto label12;

        $r28 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        interfaceinvoke $r28.<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)>(r8);

     label12:
        throw r8;

     label13:
        $r33 := @caughtexception;

        r9 = $r33;

     label14:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        throw r9;

     label15:
        return r4;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label08 with label09;
        catch java.lang.Throwable from label02 to label08 with label13;
        catch java.lang.Throwable from label09 to label14 with label13;
    }

    private void parse(org.kxml2.io.KXmlParser, org.apache.harmony.xml.dom.DocumentImpl, org.w3c.dom.Node, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.kxml2.io.KXmlParser r1;
        org.apache.harmony.xml.dom.DocumentImpl r2;
        org.w3c.dom.Node r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, i8;
        java.lang.String r4, r5, r6, r7, r8, r9, r10, $r12, $r16, $r17, $r23, $r24, $r28, $r31, r32, r33, r34, r35, r36, r37, r38, r39, r41, r43, r44;
        org.apache.harmony.xml.dom.AttrImpl r11, r45;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.xml.sax.EntityResolver $r18;
        org.apache.harmony.xml.dom.EntityReferenceImpl $r21;
        org.apache.harmony.xml.dom.CommentImpl $r22;
        org.apache.harmony.xml.dom.DocumentTypeImpl $r27;
        org.apache.harmony.xml.dom.ProcessingInstructionImpl $r29;
        org.apache.harmony.xml.dom.ElementImpl r40, r42;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.kxml2.io.KXmlParser;

        r2 := @parameter1: org.apache.harmony.xml.dom.DocumentImpl;

        r3 := @parameter2: org.w3c.dom.Node;

        i0 := @parameter3: int;

        i1 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getEventType()>();

     label01:
        if i1 == i0 goto label24;

        if i1 == 1 goto label24;

        if i1 != 8 goto label06;

        r4 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        i2 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(32);

        if i2 == -1 goto label02;

        $r28 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        goto label03;

     label02:
        $r28 = r4;

     label03:
        r5 = $r28;

        if i2 == -1 goto label04;

        $i6 = i2 + 1;

        $r31 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i6);

        goto label05;

     label04:
        $r31 = "";

     label05:
        r6 = $r31;

        $r29 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ProcessingInstructionImpl createProcessingInstruction(java.lang.String,java.lang.String)>(r5, r6);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r29);

        goto label23;

     label06:
        if i1 != 10 goto label07;

        r32 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getRootElementName()>();

        r33 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getPublicId()>();

        r34 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getSystemId()>();

        $r27 = new org.apache.harmony.xml.dom.DocumentTypeImpl;

        specialinvoke $r27.<org.apache.harmony.xml.dom.DocumentTypeImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String,java.lang.String,java.lang.String)>(r2, r32, r33, r34);

        virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r27);

        goto label23;

     label07:
        if i1 != 9 goto label08;

        $z4 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments>;

        if $z4 != 0 goto label23;

        $r23 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        $r22 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.CommentImpl createComment(java.lang.String)>($r23);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r22);

        goto label23;

     label08:
        if i1 != 7 goto label09;

        $z3 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace>;

        if $z3 != 0 goto label23;

        if r2 == r3 goto label23;

        $r24 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, $r24);

        goto label23;

     label09:
        if i1 == 4 goto label10;

        if i1 != 5 goto label11;

     label10:
        $r12 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getText()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, $r12);

        goto label23;

     label11:
        if i1 != 6 goto label15;

        r35 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        $r18 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver>;

        if $r18 == null goto label12;

     label12:
        r36 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolvePredefinedOrCharacterEntity(java.lang.String)>(r35);

        if r36 == null goto label13;

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void appendText(org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int,java.lang.String)>(r2, r3, i1, r36);

        goto label14;

     label13:
        $r21 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.EntityReferenceImpl createEntityReference(java.lang.String)>(r35);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r21);

     label14:
        goto label23;

     label15:
        if i1 != 2 goto label23;

        $z0 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        if $z0 == 0 goto label20;

        r37 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getNamespace()>();

        r38 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        r39 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getPrefix()>();

        $r16 = "";

        $z1 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r37);

        if $z1 == 0 goto label16;

        r37 = null;

     label16:
        r40 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElementNS(java.lang.String,java.lang.String)>(r37, r38);

        interfaceinvoke r40.<org.w3c.dom.Element: void setPrefix(java.lang.String)>(r39);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r40);

        i3 = 0;

     label17:
        $i5 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getAttributeCount()>();

        if i3 >= $i5 goto label19;

        r7 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeNamespace(int)>(i3);

        r8 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributePrefix(int)>(i3);

        r9 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)>(i3);

        r10 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)>(i3);

        $r17 = "";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label18;

        r7 = null;

     label18:
        r11 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttributeNS(java.lang.String,java.lang.String)>(r7, r9);

        interfaceinvoke r11.<org.w3c.dom.Attr: void setPrefix(java.lang.String)>(r8);

        interfaceinvoke r11.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r10);

        interfaceinvoke r40.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r11);

        i3 = i3 + 1;

        goto label17;

     label19:
        virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r1, r2, r40, 3);

        virtualinvoke r1.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(3, r37, r38);

        goto label23;

     label20:
        r41 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getName()>();

        r42 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.ElementImpl createElement(java.lang.String)>(r41);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r42);

        i8 = 0;

     label21:
        $i4 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int getAttributeCount()>();

        if i8 >= $i4 goto label22;

        r43 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeName(int)>(i8);

        r44 = virtualinvoke r1.<org.kxml2.io.KXmlParser: java.lang.String getAttributeValue(int)>(i8);

        r45 = virtualinvoke r2.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.AttrImpl createAttribute(java.lang.String)>(r43);

        interfaceinvoke r45.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r44);

        interfaceinvoke r42.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r45);

        i8 = i8 + 1;

        goto label21;

     label22:
        virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.kxml2.io.KXmlParser,org.apache.harmony.xml.dom.DocumentImpl,org.w3c.dom.Node,int)>(r1, r2, r42, 3);

        virtualinvoke r1.<org.kxml2.io.KXmlParser: void require(int,java.lang.String,java.lang.String)>(3, "", r41);

     label23:
        i1 = virtualinvoke r1.<org.kxml2.io.KXmlParser: int nextToken()>();

        goto label01;

     label24:
        return;
    }

    private void appendText(org.apache.harmony.xml.dom.DocumentImpl, org.w3c.dom.Node, int, java.lang.String)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.apache.harmony.xml.dom.DocumentImpl r1;
        org.w3c.dom.Node r2, r4;
        int i0;
        java.lang.String r3;
        org.w3c.dom.Text r5;
        boolean $z0, $z1;
        org.apache.harmony.xml.dom.TextImpl $r6, r9;
        short $s1;
        org.apache.harmony.xml.dom.CDATASectionImpl r8;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.DocumentImpl;

        r2 := @parameter1: org.w3c.dom.Node;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        $z0 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing>;

        if $z1 != 0 goto label2;

        if i0 == 5 goto label3;

     label2:
        r4 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if r4 == null goto label3;

        $s1 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 != 3 goto label3;

        r5 = (org.w3c.dom.Text) r4;

        interfaceinvoke r5.<org.w3c.dom.Text: void appendData(java.lang.String)>(r3);

        return;

     label3:
        if i0 != 5 goto label4;

        r8 = new org.apache.harmony.xml.dom.CDATASectionImpl;

        $r6 = r8;

        specialinvoke r8.<org.apache.harmony.xml.dom.CDATASectionImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r1, r3);

        goto label5;

     label4:
        r9 = new org.apache.harmony.xml.dom.TextImpl;

        $r6 = r9;

        specialinvoke r9.<org.apache.harmony.xml.dom.TextImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl,java.lang.String)>(r1, r3);

     label5:
        interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r6);

        return;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.EntityResolver r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.EntityResolver;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver> = r1;

        return;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        org.xml.sax.ErrorHandler r1;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: org.xml.sax.ErrorHandler;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler> = r1;

        return;
    }

    public void setIgnoreComments(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments> = z0;

        return;
    }

    public void setCoalescing(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean coalescing> = z0;

        return;
    }

    public void setIgnoreElementContentWhitespace(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace> = z0;

        return;
    }

    public void setNamespaceAware(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        boolean z0;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 := @parameter0: boolean;

        r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware> = z0;

        return;
    }

    private java.lang.String resolvePredefinedOrCharacterEntity(java.lang.String)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#x");

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(2);

        $r9 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolveCharacterReference(java.lang.String,int)>($r10, 16);

        return $r9;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z1 == 0 goto label2;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

        $r8 = specialinvoke r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolveCharacterReference(java.lang.String,int)>($r7, 10);

        return $r8;

     label2:
        $r2 = "lt";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return "<";

     label3:
        $r3 = "gt";

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        return ">";

     label4:
        $r4 = "amp";

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        return "&";

     label5:
        $r5 = "apos";

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label6;

        return "\'";

     label6:
        $r6 = "quot";

        $z6 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label7;

        return "\"";

     label7:
        return null;
    }

    private java.lang.String resolveCharacterReference(java.lang.String, int)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl r0;
        java.lang.String r1, $r2;
        int i0, i1;
        char $c2;
        java.lang.NumberFormatException $r3;

        r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, i0);

        if i1 < 0 goto label2;

        if i1 <= 65535 goto label3;

     label2:
        return null;

     label3:
        $c2 = (char) i1;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

     label4:
        return $r2;

     label5:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NumberFormatException from label1 to label2 with label5;
        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    static void <clinit>()
    {
        org.apache.harmony.xml.dom.DOMImplementationImpl $r0;

        $r0 = staticinvoke <org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>();

        <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.apache.harmony.xml.dom.DOMImplementationImpl dom> = $r0;

        return;
    }
}
