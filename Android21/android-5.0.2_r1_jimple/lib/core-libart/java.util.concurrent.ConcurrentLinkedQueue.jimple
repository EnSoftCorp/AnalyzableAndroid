public class java.util.concurrent.ConcurrentLinkedQueue extends java.util.AbstractQueue implements java.util.Queue, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient volatile java.util.concurrent.ConcurrentLinkedQueue$Node head;
    private transient volatile java.util.concurrent.ConcurrentLinkedQueue$Node tail;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long headOffset;
    private static final long tailOffset;

    public void <init>()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node $r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(null);

        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail> = $r1;

        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.Collection r1;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r6, $r7, $r8;
        java.util.Iterator r4;
        java.lang.Object r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        r2 = null;

        r3 = null;

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <java.util.concurrent.ConcurrentLinkedQueue: void checkNotNull(java.lang.Object)>(r5);

        $r8 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r8.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(r5);

        r6 = $r8;

        if r2 != null goto label2;

        r3 = r6;

        r2 = r6;

        goto label3;

     label2:
        virtualinvoke r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r6);

        r3 = r6;

     label3:
        goto label1;

     label4:
        if r2 != null goto label5;

        $r7 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r7.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(null);

        r3 = $r7;

        r2 = $r7;

     label5:
        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head> = r2;

        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail> = r3;

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean offer(java.lang.Object)>(r1);

        return $z0;
    }

    final void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        if r1 == r2 goto label1;

        $z0 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1, r2);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1);

     label1:
        return;
    }

    final java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        r2 = r1.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if r1 != r2 goto label1;

        $r3 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        goto label2;

     label1:
        $r3 = r2;

     label2:
        return $r3;
    }

    public boolean offer(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.lang.Object;

        staticinvoke <java.util.concurrent.ConcurrentLinkedQueue: void checkNotNull(java.lang.Object)>(r1);

        $r6 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(r1);

        r2 = $r6;

        r3 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r4 = r3;

     label1:
        r5 = r4.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if r5 != null goto label3;

        $z0 = virtualinvoke r4.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(null, r2);

        if $z0 == 0 goto label9;

        if r4 == r3 goto label2;

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3, r2);

     label2:
        return 1;

     label3:
        if r4 != r5 goto label6;

        $r11 = r3;

        $r10 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r3 = $r10;

        if $r11 == $r10 goto label4;

        $r12 = r3;

        goto label5;

     label4:
        $r12 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

     label5:
        r4 = $r12;

        goto label9;

     label6:
        if r4 == r3 goto label7;

        $r8 = r3;

        $r7 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r3 = $r7;

        if $r8 == $r7 goto label7;

        $r9 = r3;

        goto label8;

     label7:
        $r9 = r5;

     label8:
        r4 = $r9;

     label9:
        goto label1;
    }

    public java.lang.Object poll()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2, r3, $r5, $r6, $r7, r8;
        java.lang.Object r4;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

     label1:
        r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        r2 = r1;

     label2:
        r4 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r4 == null goto label6;

        $z0 = virtualinvoke r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casItem(java.lang.Object,java.lang.Object)>(r4, null);

        if $z0 == 0 goto label6;

        if r2 == r1 goto label5;

        $r6 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        r3 = $r6;

        if $r6 == null goto label3;

        $r7 = r3;

        goto label4;

     label3:
        $r7 = r2;

     label4:
        virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1, $r7);

     label5:
        return r4;

     label6:
        $r5 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        r8 = $r5;

        if $r5 != null goto label7;

        virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1, r2);

        return null;

     label7:
        if r2 != r8 goto label8;

        goto label1;

     label8:
        r2 = r8;

        goto label2;
    }

    public java.lang.Object peek()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2, r3, $r5;
        java.lang.Object r4;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

     label1:
        r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        r2 = r1;

     label2:
        r4 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r4 != null goto label3;

        $r5 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        r3 = $r5;

        if $r5 != null goto label4;

     label3:
        virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1, r2);

        return r4;

     label4:
        if r2 != r3 goto label5;

        goto label1;

     label5:
        r2 = r3;

        goto label2;
    }

    java.util.concurrent.ConcurrentLinkedQueue$Node first()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2, r3, $r5, $r6;
        boolean z0, $z1;
        java.lang.Object $r4;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

     label1:
        r1 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

        r2 = r1;

     label2:
        $r4 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if $r4 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        if z0 != 0 goto label5;

        $r6 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        r3 = $r6;

        if $r6 != null goto label8;

     label5:
        virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: void updateHead(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1, r2);

        if z0 == 0 goto label6;

        $r5 = r2;

        goto label7;

     label6:
        $r5 = null;

     label7:
        return $r5;

     label8:
        if r2 != r3 goto label9;

        goto label1;

     label9:
        r2 = r3;

        goto label2;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        int i0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        i0 = 0;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label1:
        if r1 == null goto label3;

        $r2 = r1.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if $r2 == null goto label2;

        i0 = i0 + 1;

        if i0 != 2147483647 goto label2;

        goto label3;

     label2:
        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r1);

        goto label1;

     label3:
        return i0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.lang.Object r1, r3;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label2:
        if r2 == null goto label4;

        r3 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r3 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r2);

        goto label2;

     label4:
        return 0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.lang.Object r1, r4;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r5;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return 0;

     label1:
        r2 = null;

        r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label2:
        if r3 == null goto label5;

        r4 = r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r4 == null goto label4;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casItem(java.lang.Object,java.lang.Object)>(r4, null);

        if $z1 == 0 goto label4;

        r5 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3);

        if r2 == null goto label3;

        if r5 == null goto label3;

        virtualinvoke r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3, r5);

     label3:
        return 1;

     label4:
        r2 = r3;

        r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r3);

        goto label2;

     label5:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.Collection r1;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, r16, r17, r18, r19;
        java.util.Iterator r4;
        java.lang.Object r5;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.Collection;

        if r1 != r0 goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r14;

     label01:
        r2 = null;

        r3 = null;

        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        staticinvoke <java.util.concurrent.ConcurrentLinkedQueue: void checkNotNull(java.lang.Object)>(r5);

        $r15 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r15.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(r5);

        r6 = $r15;

        if r2 != null goto label03;

        r3 = r6;

        r2 = r6;

        goto label04;

     label03:
        virtualinvoke r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r6);

        r3 = r6;

     label04:
        goto label02;

     label05:
        if r2 != null goto label06;

        return 0;

     label06:
        r16 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r17 = r16;

     label07:
        r18 = r17.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if r18 != null goto label09;

        $z1 = virtualinvoke r17.<java.util.concurrent.ConcurrentLinkedQueue$Node: boolean casNext(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(null, r2);

        if $z1 == 0 goto label15;

        $z2 = specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r16, r3);

        if $z2 != 0 goto label08;

        r19 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        $r13 = r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;

        if $r13 != null goto label08;

        specialinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node,java.util.concurrent.ConcurrentLinkedQueue$Node)>(r19, r3);

     label08:
        return 1;

     label09:
        if r17 != r18 goto label12;

        $r11 = r16;

        $r10 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r16 = $r10;

        if $r11 == $r10 goto label10;

        $r12 = r16;

        goto label11;

     label10:
        $r12 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;

     label11:
        r17 = $r12;

        goto label15;

     label12:
        if r17 == r16 goto label13;

        $r8 = r16;

        $r7 = r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;

        r16 = $r7;

        if $r8 == $r7 goto label13;

        $r9 = r16;

        goto label14;

     label13:
        $r9 = r18;

     label14:
        r17 = $r9;

     label15:
        goto label07;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.ArrayList r1, $r4;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2;
        java.lang.Object r3;
        java.lang.Object[] $r5;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label1:
        if r2 == null goto label3;

        r3 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r3 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r2);

        goto label1;

     label3:
        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r5;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.lang.Object[] r1, $r7;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r4;
        java.lang.Object r3, r5;
        java.util.ArrayList $r6, r8;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.lang.Object[];

        i0 = 0;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label1:
        if r2 == null goto label3;

        $i2 = lengthof r1;

        if i0 >= $i2 goto label3;

        r3 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r3 == null goto label2;

        $i3 = i0;

        i0 = i0 + 1;

        r1[$i3] = r3;

     label2:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r2);

        goto label1;

     label3:
        if r2 != null goto label5;

        $i1 = lengthof r1;

        if i0 >= $i1 goto label4;

        r1[i0] = null;

     label4:
        return r1;

     label5:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r8 = $r6;

        r4 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label6:
        if r4 == null goto label8;

        r5 = r4.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r5 == null goto label7;

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

     label7:
        r4 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r4);

        goto label6;

     label8:
        $r7 = virtualinvoke r8.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r7;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Itr $r1;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        $r1 = new java.util.concurrent.ConcurrentLinkedQueue$Itr;

        specialinvoke $r1.<java.util.concurrent.ConcurrentLinkedQueue$Itr: void <init>(java.util.concurrent.ConcurrentLinkedQueue)>(r0);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.io.ObjectOutputStream r1;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2;
        java.lang.Object r3;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node first()>();

     label1:
        if r2 == null goto label3;

        r3 = r2.<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;

        if r3 == null goto label2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r3);

     label2:
        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node succ(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r2);

        goto label1;

     label3:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.io.ObjectInputStream r1;
        java.util.concurrent.ConcurrentLinkedQueue$Node r2, r3, r5, $r7, $r8;
        java.lang.Object r4, $r6;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r2 = null;

        r3 = null;

     label1:
        $r6 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = $r6;

        if $r6 == null goto label4;

        $r8 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r8.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(r4);

        r5 = $r8;

        if r2 != null goto label2;

        r3 = r5;

        r2 = r5;

        goto label3;

     label2:
        virtualinvoke r3.<java.util.concurrent.ConcurrentLinkedQueue$Node: void lazySetNext(java.util.concurrent.ConcurrentLinkedQueue$Node)>(r5);

        r3 = r5;

     label3:
        goto label1;

     label4:
        if r2 != null goto label5;

        $r7 = new java.util.concurrent.ConcurrentLinkedQueue$Node;

        specialinvoke $r7.<java.util.concurrent.ConcurrentLinkedQueue$Node: void <init>(java.lang.Object)>(null);

        r3 = $r7;

        r2 = $r7;

     label5:
        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head> = r2;

        r0.<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail> = r3;

        return;
    }

    private static void checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private boolean casTail(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r3 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue: long tailOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    private boolean casHead(java.util.concurrent.ConcurrentLinkedQueue$Node, java.util.concurrent.ConcurrentLinkedQueue$Node)
    {
        java.util.concurrent.ConcurrentLinkedQueue r0;
        java.util.concurrent.ConcurrentLinkedQueue$Node r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentLinkedQueue;

        r1 := @parameter0: java.util.concurrent.ConcurrentLinkedQueue$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentLinkedQueue$Node;

        $r3 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentLinkedQueue: long headOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2, $r4;
        java.lang.reflect.Field $r3, $r5;
        long $l0, $l1;
        java.lang.Exception $r6, r8;
        java.lang.Error $r7;

        <java.util.concurrent.ConcurrentLinkedQueue: long serialVersionUID> = 196745693267521676L;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/ConcurrentLinkedQueue";

        $r2 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("head");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.ConcurrentLinkedQueue: long headOffset> = $l0;

        $r4 = <java.util.concurrent.ConcurrentLinkedQueue: sun.misc.Unsafe UNSAFE>;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("tail");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.ConcurrentLinkedQueue: long tailOffset> = $l1;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r8);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
