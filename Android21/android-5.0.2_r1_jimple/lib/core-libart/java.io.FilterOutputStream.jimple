public class java.io.FilterOutputStream extends java.io.OutputStream
{
    protected java.io.OutputStream out;

    public void <init>(java.io.OutputStream)
    {
        java.io.FilterOutputStream r0;
        java.io.OutputStream r1;

        r0 := @this: java.io.FilterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<java.io.FilterOutputStream: java.io.OutputStream out> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.FilterOutputStream r0;
        java.lang.Throwable r1, r2, $r4, $r5, r6;
        java.io.OutputStream $r3;

        r0 := @this: java.io.FilterOutputStream;

        r1 = null;

     label1:
        virtualinvoke r0.<java.io.FilterOutputStream: void flush()>();

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        r1 = r2;

     label4:
        $r3 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r6 = $r5;

        if r1 != null goto label7;

        r1 = r6;

     label7:
        if r1 == null goto label8;

        staticinvoke <libcore.util.SneakyThrow: void sneakyThrow(java.lang.Throwable)>(r1);

     label8:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public void flush() throws java.io.IOException
    {
        java.io.FilterOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.io.FilterOutputStream;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.FilterOutputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        byte $b5;

        r0 := @this: java.io.FilterOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $i4 = i0 + i2;

        $b5 = r1[$i4];

        virtualinvoke r0.<java.io.FilterOutputStream: void write(int)>($b5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.FilterOutputStream r0;
        int i0;
        java.io.OutputStream $r1;

        r0 := @this: java.io.FilterOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<java.io.FilterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0);

        return;
    }
}
