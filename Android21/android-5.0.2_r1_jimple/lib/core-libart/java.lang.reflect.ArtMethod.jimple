public final class java.lang.reflect.ArtMethod extends java.lang.Object
{
    private java.lang.Class declaringClass;
    private java.lang.reflect.ArtMethod[] dexCacheResolvedMethods;
    java.lang.Class[] dexCacheResolvedTypes;
    private java.lang.String[] dexCacheStrings;
    private long entryPointFromInterpreter;
    private long entryPointFromJni;
    private long entryPointFromQuickCompiledCode;
    private long gcMap;
    private int accessFlags;
    private int dexCodeItemOffset;
    private int dexMethodIndex;
    private int methodIndex;

    private void <init>()
    {
        java.lang.reflect.ArtMethod r0;

        r0 := @this: java.lang.reflect.ArtMethod;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    java.lang.Class getDeclaringClass()
    {
        java.lang.reflect.ArtMethod r0;
        java.lang.Class $r1;

        r0 := @this: java.lang.reflect.ArtMethod;

        $r1 = r0.<java.lang.reflect.ArtMethod: java.lang.Class declaringClass>;

        return $r1;
    }

    public int getAccessFlags()
    {
        java.lang.reflect.ArtMethod r0;
        int $i0;

        r0 := @this: java.lang.reflect.ArtMethod;

        $i0 = r0.<java.lang.reflect.ArtMethod: int accessFlags>;

        return $i0;
    }

    int getDexMethodIndex()
    {
        java.lang.reflect.ArtMethod r0;
        int $i0;

        r0 := @this: java.lang.reflect.ArtMethod;

        $i0 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        return $i0;
    }

    public static java.lang.String getMethodName(java.lang.reflect.ArtMethod)
    {
        java.lang.reflect.ArtMethod r0, r4;
        com.android.dex.Dex r1;
        int i0, $i1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.reflect.ArtMethod;

        r4 = virtualinvoke r0.<java.lang.reflect.ArtMethod: java.lang.reflect.ArtMethod findOverriddenMethodIfProxy()>();

        $r2 = virtualinvoke r4.<java.lang.reflect.ArtMethod: java.lang.Class getDeclaringClass()>();

        r1 = virtualinvoke $r2.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i1 = virtualinvoke r4.<java.lang.reflect.ArtMethod: int getDexMethodIndex()>();

        i0 = virtualinvoke r1.<com.android.dex.Dex: int nameIndexFromMethodIndex(int)>($i1);

        $r3 = specialinvoke r4.<java.lang.reflect.ArtMethod: java.lang.String getDexCacheString(com.android.dex.Dex,int)>(r1, i0);

        return $r3;
    }

    public static boolean equalConstructorParameters(java.lang.reflect.ArtMethod, java.lang.Class[])
    {
        java.lang.reflect.ArtMethod r0;
        java.lang.Class[] r1;
        com.android.dex.Dex r2;
        short[] r3;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r4, $r5, $r6;
        short $s5;

        r0 := @parameter0: java.lang.reflect.ArtMethod;

        r1 := @parameter1: java.lang.Class[];

        $r4 = virtualinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDeclaringClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i1 = virtualinvoke r0.<java.lang.reflect.ArtMethod: int getDexMethodIndex()>();

        r3 = virtualinvoke r2.<com.android.dex.Dex: short[] parameterTypeIndicesFromMethodIndex(int)>($i1);

        $i3 = lengthof r3;

        $i2 = lengthof r1;

        if $i3 == $i2 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i4 = lengthof r3;

        if i0 >= $i4 goto label4;

        $s5 = r3[i0];

        $r5 = specialinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r2, $s5);

        $r6 = r1[i0];

        if $r5 == $r6 goto label3;

        return 0;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return 1;
    }

    public static boolean equalMethodParameters(java.lang.reflect.ArtMethod, java.lang.Class[])
    {
        java.lang.reflect.ArtMethod r0, $r2;
        java.lang.Class[] r1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.ArtMethod;

        r1 := @parameter1: java.lang.Class[];

        $r2 = virtualinvoke r0.<java.lang.reflect.ArtMethod: java.lang.reflect.ArtMethod findOverriddenMethodIfProxy()>();

        $z0 = staticinvoke <java.lang.reflect.ArtMethod: boolean equalConstructorParameters(java.lang.reflect.ArtMethod,java.lang.Class[])>($r2, r1);

        return $z0;
    }

    java.lang.Class[] getParameterTypes()
    {
        java.lang.reflect.ArtMethod r0;
        com.android.dex.Dex r1;
        short[] r2;
        java.lang.Class[] r3, $r6;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Class $r4, $r5;
        short $s5;

        r0 := @this: java.lang.reflect.ArtMethod;

        $r4 = virtualinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDeclaringClass()>();

        r1 = virtualinvoke $r4.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i1 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        r2 = virtualinvoke r1.<com.android.dex.Dex: short[] parameterTypeIndicesFromMethodIndex(int)>($i1);

        $i2 = lengthof r2;

        if $i2 != 0 goto label1;

        $r6 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        return $r6;

     label1:
        $i3 = lengthof r2;

        r3 = newarray (java.lang.Class)[$i3];

        i0 = 0;

     label2:
        $i4 = lengthof r2;

        if i0 >= $i4 goto label3;

        $s5 = r2[i0];

        $r5 = specialinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r1, $s5);

        r3[i0] = $r5;

        i0 = i0 + 1;

        goto label2;

     label3:
        return r3;
    }

    java.lang.Class getReturnType()
    {
        java.lang.reflect.ArtMethod r0;
        com.android.dex.Dex r1;
        int i0, $i1;
        java.lang.Class $r2, $r3;

        r0 := @this: java.lang.reflect.ArtMethod;

        $r2 = r0.<java.lang.reflect.ArtMethod: java.lang.Class declaringClass>;

        r1 = virtualinvoke $r2.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i1 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        i0 = virtualinvoke r1.<com.android.dex.Dex: int returnTypeIndexFromMethodIndex(int)>($i1);

        $r3 = specialinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r1, i0);

        return $r3;
    }

    int compareParameters(java.lang.Class[])
    {
        java.lang.reflect.ArtMethod r0;
        java.lang.Class[] r1;
        com.android.dex.Dex r2;
        short[] r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i9;
        java.lang.Class r4, r5, $r6;
        short $s8;
        java.lang.String $r7, $r8;

        r0 := @this: java.lang.reflect.ArtMethod;

        r1 := @parameter0: java.lang.Class[];

        $r6 = virtualinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDeclaringClass()>();

        r2 = virtualinvoke $r6.<java.lang.Class: com.android.dex.Dex getDex()>();

        $i3 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        r3 = virtualinvoke r2.<com.android.dex.Dex: short[] parameterTypeIndicesFromMethodIndex(int)>($i3);

        $i5 = lengthof r3;

        $i4 = lengthof r1;

        i0 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i4);

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $s8 = r3[i1];

        r4 = specialinvoke r0.<java.lang.reflect.ArtMethod: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r2, $s8);

        r5 = r1[i1];

        if r4 == r5 goto label2;

        $r7 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        i2 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r8);

        if i2 == 0 goto label2;

        return i2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i6 = lengthof r3;

        $i7 = lengthof r1;

        $i9 = $i6 - $i7;

        return $i9;
    }

    java.lang.annotation.Annotation[][] getParameterAnnotations()
    {
        java.lang.reflect.ArtMethod r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.annotation.Annotation[][] $r2;

        r0 := @this: java.lang.reflect.ArtMethod;

        $r1 = r0.<java.lang.reflect.ArtMethod: java.lang.Class declaringClass>;

        $i0 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        $r2 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.annotation.Annotation[][] getParameterAnnotations(java.lang.Class,int)>($r1, $i0);

        return $r2;
    }

    private java.lang.String getDexCacheString(com.android.dex.Dex, int)
    {
        java.lang.reflect.ArtMethod r0;
        com.android.dex.Dex r1;
        int i0;
        java.lang.String r2, $r6;
        java.lang.String[] $r3, $r7;
        java.util.List $r4;
        java.lang.Object $r5;

        r0 := @this: java.lang.reflect.ArtMethod;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r3 = r0.<java.lang.reflect.ArtMethod: java.lang.String[] dexCacheStrings>;

        r2 = $r3[i0];

        if r2 != null goto label1;

        $r4 = virtualinvoke r1.<com.android.dex.Dex: java.util.List strings()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0);

        $r6 = (java.lang.String) $r5;

        r2 = virtualinvoke $r6.<java.lang.String: java.lang.String intern()>();

        $r7 = r0.<java.lang.reflect.ArtMethod: java.lang.String[] dexCacheStrings>;

        $r7[i0] = r2;

     label1:
        return r2;
    }

    private java.lang.Class getDexCacheType(com.android.dex.Dex, int)
    {
        java.lang.reflect.ArtMethod r0;
        com.android.dex.Dex r1;
        int i0;
        java.lang.Class r2, $r4;
        java.lang.Class[] $r3;

        r0 := @this: java.lang.reflect.ArtMethod;

        r1 := @parameter0: com.android.dex.Dex;

        i0 := @parameter1: int;

        $r3 = r0.<java.lang.reflect.ArtMethod: java.lang.Class[] dexCacheResolvedTypes>;

        r2 = $r3[i0];

        if r2 != null goto label1;

        $r4 = r0.<java.lang.reflect.ArtMethod: java.lang.Class declaringClass>;

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getDexCacheType(com.android.dex.Dex,int)>(r1, i0);

     label1:
        return r2;
    }

    java.lang.reflect.ArtMethod findOverriddenMethodIfProxy()
    {
        java.lang.reflect.ArtMethod r0, $r3;
        java.lang.Class $r1;
        boolean $z0;
        int $i0;
        java.lang.reflect.ArtMethod[] $r2;

        r0 := @this: java.lang.reflect.ArtMethod;

        $r1 = r0.<java.lang.reflect.ArtMethod: java.lang.Class declaringClass>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isProxy()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<java.lang.reflect.ArtMethod: java.lang.reflect.ArtMethod[] dexCacheResolvedMethods>;

        $i0 = r0.<java.lang.reflect.ArtMethod: int dexMethodIndex>;

        $r3 = $r2[$i0];

        return $r3;

     label1:
        return r0;
    }
}
