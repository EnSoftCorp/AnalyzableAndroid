final class java.util.MiniEnumSet extends java.util.EnumSet
{
    private static final int MAX_ELEMENTS;
    private int size;
    private final java.lang.Enum[] enums;
    private long bits;

    void <init>(java.lang.Class, java.lang.Enum[])
    {
        java.util.MiniEnumSet r0;
        java.lang.Class r1;
        java.lang.Enum[] r2;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Enum[];

        specialinvoke r0.<java.util.EnumSet: void <init>(java.lang.Class)>(r1);

        r0.<java.util.MiniEnumSet: java.lang.Enum[] enums> = r2;

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.MiniEnumSet r0;
        java.util.MiniEnumSet$MiniEnumSetIterator $r1;

        r0 := @this: java.util.MiniEnumSet;

        $r1 = new java.util.MiniEnumSet$MiniEnumSetIterator;

        specialinvoke $r1.<java.util.MiniEnumSet$MiniEnumSetIterator: void <init>(java.util.MiniEnumSet,java.util.MiniEnumSet$1)>(r0, null);

        return $r1;
    }

    public int size()
    {
        java.util.MiniEnumSet r0;
        int $i0;

        r0 := @this: java.util.MiniEnumSet;

        $i0 = r0.<java.util.MiniEnumSet: int size>;

        return $i0;
    }

    public void clear()
    {
        java.util.MiniEnumSet r0;

        r0 := @this: java.util.MiniEnumSet;

        r0.<java.util.MiniEnumSet: long bits> = 0L;

        r0.<java.util.MiniEnumSet: int size> = 0;

        return;
    }

    public boolean add(java.lang.Enum)
    {
        java.util.MiniEnumSet r0;
        java.lang.Enum r1;
        long l0, l1, $l3;
        java.lang.Class $r2;
        int $i2, $i5, $i6;
        byte $b4;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Enum;

        $r2 = r0.<java.util.MiniEnumSet: java.lang.Class elementClass>;

        virtualinvoke $r2.<java.lang.Class: java.lang.Object cast(java.lang.Object)>(r1);

        l0 = r0.<java.util.MiniEnumSet: long bits>;

        $i2 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();

        $l3 = 1L << $i2;

        l1 = l0 | $l3;

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label1;

        r0.<java.util.MiniEnumSet: long bits> = l1;

        $i5 = r0.<java.util.MiniEnumSet: int size>;

        $i6 = $i5 + 1;

        r0.<java.util.MiniEnumSet: int size> = $i6;

        return 1;

     label1:
        return 0;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.MiniEnumSet r0, r3;
        java.util.Collection r1;
        java.util.EnumSet r2;
        long l0, l1, $l2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r4, $r5;
        int $i3;
        byte $b4;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r1 instanceof java.util.EnumSet;

        if $z1 == 0 goto label4;

        r2 = (java.util.EnumSet) r1;

        $r5 = r2.<java.util.EnumSet: java.lang.Class elementClass>;

        $r4 = r0.<java.util.MiniEnumSet: java.lang.Class elementClass>;

        virtualinvoke $r5.<java.lang.Class: java.lang.Class asSubclass(java.lang.Class)>($r4);

        r3 = (java.util.MiniEnumSet) r2;

        l0 = r0.<java.util.MiniEnumSet: long bits>;

        $l2 = r3.<java.util.MiniEnumSet: long bits>;

        l1 = l0 | $l2;

        r0.<java.util.MiniEnumSet: long bits> = l1;

        $i3 = staticinvoke <java.lang.Long: int bitCount(long)>(l1);

        r0.<java.util.MiniEnumSet: int size> = $i3;

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        $z2 = specialinvoke r0.<java.util.EnumSet: boolean addAll(java.util.Collection)>(r1);

        return $z2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.MiniEnumSet r0;
        java.lang.Object r1;
        java.lang.Enum r2;
        int i0;
        java.lang.Class $r3;
        boolean $z0, $z1;
        long $l1, $l2, $l3;
        byte $b4;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r3);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.lang.Enum) r1;

        i0 = virtualinvoke r2.<java.lang.Enum: int ordinal()>();

        $l2 = r0.<java.util.MiniEnumSet: long bits>;

        $l1 = 1L << i0;

        $l3 = $l2 & $l1;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.MiniEnumSet r0, r2;
        java.util.Collection r1;
        long l0, $l1, $l2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class $r3;
        byte $b3;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof java.util.MiniEnumSet;

        if $z1 == 0 goto label4;

        r2 = (java.util.MiniEnumSet) r1;

        l0 = r2.<java.util.MiniEnumSet: long bits>;

        $r3 = r2.<java.util.MiniEnumSet: java.lang.Class elementClass>;

        $z5 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r3);

        if $z5 == 0 goto label2;

        $l1 = r0.<java.util.MiniEnumSet: long bits>;

        $l2 = $l1 & l0;

        $b3 = $l2 cmp l0;

        if $b3 != 0 goto label2;

        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;

     label4:
        $z2 = r1 instanceof java.util.EnumSet;

        if $z2 != 0 goto label5;

        $z3 = specialinvoke r0.<java.util.EnumSet: boolean containsAll(java.util.Collection)>(r1);

        if $z3 == 0 goto label5;

        $z4 = 1;

        goto label6;

     label5:
        $z4 = 0;

     label6:
        return $z4;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.MiniEnumSet r0, r3;
        java.util.Collection r1;
        java.util.EnumSet r2;
        long l0, l1, $l2, $l3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class $r4;
        byte $b4;
        int $i5;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.util.Collection;

        $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r1 instanceof java.util.EnumSet;

        if $z1 == 0 goto label4;

        r2 = (java.util.EnumSet) r1;

        $r4 = r2.<java.util.EnumSet: java.lang.Class elementClass>;

        $z3 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r4);

        if $z3 != 0 goto label2;

        return 0;

     label2:
        r3 = (java.util.MiniEnumSet) r2;

        l0 = r0.<java.util.MiniEnumSet: long bits>;

        $l2 = r3.<java.util.MiniEnumSet: long bits>;

        $l3 = $l2 ^ -1L;

        l1 = l0 & $l3;

        $b4 = l0 cmp l1;

        if $b4 == 0 goto label3;

        r0.<java.util.MiniEnumSet: long bits> = l1;

        $i5 = staticinvoke <java.lang.Long: int bitCount(long)>(l1);

        r0.<java.util.MiniEnumSet: int size> = $i5;

        return 1;

     label3:
        return 0;

     label4:
        $z2 = specialinvoke r0.<java.util.EnumSet: boolean removeAll(java.util.Collection)>(r1);

        return $z2;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.MiniEnumSet r0, r3;
        java.util.Collection r1;
        java.util.EnumSet r2;
        long l0, l1, $l2;
        boolean $z0, $z1, $z2;
        java.lang.Class $r4;
        byte $b3;
        int $i4, $i5;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.util.Collection;

        $z0 = r1 instanceof java.util.EnumSet;

        if $z0 == 0 goto label4;

        r2 = (java.util.EnumSet) r1;

        $r4 = r2.<java.util.EnumSet: java.lang.Class elementClass>;

        $z2 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r4);

        if $z2 != 0 goto label2;

        $i5 = r0.<java.util.MiniEnumSet: int size>;

        if $i5 <= 0 goto label1;

        virtualinvoke r0.<java.util.MiniEnumSet: void clear()>();

        return 1;

     label1:
        return 0;

     label2:
        r3 = (java.util.MiniEnumSet) r2;

        l0 = r0.<java.util.MiniEnumSet: long bits>;

        $l2 = r3.<java.util.MiniEnumSet: long bits>;

        l1 = l0 & $l2;

        $b3 = l0 cmp l1;

        if $b3 == 0 goto label3;

        r0.<java.util.MiniEnumSet: long bits> = l1;

        $i4 = staticinvoke <java.lang.Long: int bitCount(long)>(l1);

        r0.<java.util.MiniEnumSet: int size> = $i4;

        return 1;

     label3:
        return 0;

     label4:
        $z1 = specialinvoke r0.<java.util.EnumSet: boolean retainAll(java.util.Collection)>(r1);

        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.MiniEnumSet r0;
        java.lang.Object r1;
        java.lang.Enum r2;
        int i0, $i6, $i7;
        long l1, l2, $l3, $l4;
        java.lang.Class $r3;
        boolean $z0;
        byte $b5;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r3);

        if $z0 != 0 goto label2;

     label1:
        return 0;

     label2:
        r2 = (java.lang.Enum) r1;

        i0 = virtualinvoke r2.<java.lang.Enum: int ordinal()>();

        l1 = r0.<java.util.MiniEnumSet: long bits>;

        $l3 = 1L << i0;

        $l4 = $l3 ^ -1L;

        l2 = l1 & $l4;

        $b5 = l1 cmp l2;

        if $b5 == 0 goto label3;

        r0.<java.util.MiniEnumSet: long bits> = l2;

        $i6 = r0.<java.util.MiniEnumSet: int size>;

        $i7 = $i6 - 1;

        r0.<java.util.MiniEnumSet: int size> = $i7;

        return 1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.MiniEnumSet r0, $r4;
        java.lang.Object r1;
        java.util.EnumSet r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Class $r3;
        long $l0, $l1;
        byte $b2;
        int $i3;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.EnumSet;

        if $z0 != 0 goto label1;

        $z5 = specialinvoke r0.<java.util.EnumSet: boolean equals(java.lang.Object)>(r1);

        return $z5;

     label1:
        r2 = (java.util.EnumSet) r1;

        $r3 = r2.<java.util.EnumSet: java.lang.Class elementClass>;

        $z1 = virtualinvoke r0.<java.util.MiniEnumSet: boolean isValidType(java.lang.Class)>($r3);

        if $z1 != 0 goto label4;

        $i3 = r0.<java.util.MiniEnumSet: int size>;

        if $i3 != 0 goto label2;

        $z3 = virtualinvoke r2.<java.util.EnumSet: boolean isEmpty()>();

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        $l1 = r0.<java.util.MiniEnumSet: long bits>;

        $r4 = (java.util.MiniEnumSet) r2;

        $l0 = $r4.<java.util.MiniEnumSet: long bits>;

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        return $z2;
    }

    void complement()
    {
        java.util.MiniEnumSet r0;
        java.lang.Enum[] $r1, $r2, $r3;
        int $i0, $i3, $i4, $i8, $i9, $i10;
        long $l1, $l2, $l5, $l6, $l7;

        r0 := @this: java.util.MiniEnumSet;

        $r1 = r0.<java.util.MiniEnumSet: java.lang.Enum[] enums>;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label1;

        $l1 = r0.<java.util.MiniEnumSet: long bits>;

        $l2 = $l1 ^ -1L;

        r0.<java.util.MiniEnumSet: long bits> = $l2;

        $l6 = r0.<java.util.MiniEnumSet: long bits>;

        $r2 = r0.<java.util.MiniEnumSet: java.lang.Enum[] enums>;

        $i3 = lengthof $r2;

        $i4 = 64 - $i3;

        $l5 = -1L >>> $i4;

        $l7 = $l6 & $l5;

        r0.<java.util.MiniEnumSet: long bits> = $l7;

        $r3 = r0.<java.util.MiniEnumSet: java.lang.Enum[] enums>;

        $i9 = lengthof $r3;

        $i8 = r0.<java.util.MiniEnumSet: int size>;

        $i10 = $i9 - $i8;

        r0.<java.util.MiniEnumSet: int size> = $i10;

     label1:
        return;
    }

    void setRange(java.lang.Enum, java.lang.Enum)
    {
        java.util.MiniEnumSet r0;
        java.lang.Enum r1, r2;
        int i0, $i2, $i3, $i4, $i5, $i7, $i11;
        long l1, $l6, $l8, $l9, $l10;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Enum;

        r2 := @parameter1: java.lang.Enum;

        $i2 = virtualinvoke r2.<java.lang.Enum: int ordinal()>();

        $i3 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();

        $i4 = $i2 - $i3;

        i0 = $i4 + 1;

        $i5 = 64 - i0;

        $l6 = -1L >>> $i5;

        $i7 = virtualinvoke r1.<java.lang.Enum: int ordinal()>();

        l1 = $l6 << $i7;

        $l8 = r0.<java.util.MiniEnumSet: long bits>;

        $l9 = $l8 | l1;

        r0.<java.util.MiniEnumSet: long bits> = $l9;

        $l10 = r0.<java.util.MiniEnumSet: long bits>;

        $i11 = staticinvoke <java.lang.Long: int bitCount(long)>($l10);

        r0.<java.util.MiniEnumSet: int size> = $i11;

        return;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.MiniEnumSet r0;
        java.lang.Object r1;
        java.lang.Enum $r2;
        boolean $z0;

        r0 := @this: java.util.MiniEnumSet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Enum) r1;

        $z0 = virtualinvoke r0.<java.util.MiniEnumSet: boolean add(java.lang.Enum)>($r2);

        return $z0;
    }

    static long access$000(java.util.MiniEnumSet)
    {
        java.util.MiniEnumSet r0;
        long $l0;

        r0 := @parameter0: java.util.MiniEnumSet;

        $l0 = r0.<java.util.MiniEnumSet: long bits>;

        return $l0;
    }

    static java.lang.Enum[] access$100(java.util.MiniEnumSet)
    {
        java.util.MiniEnumSet r0;
        java.lang.Enum[] $r1;

        r0 := @parameter0: java.util.MiniEnumSet;

        $r1 = r0.<java.util.MiniEnumSet: java.lang.Enum[] enums>;

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.MiniEnumSet: int MAX_ELEMENTS> = 64;

        return;
    }
}
