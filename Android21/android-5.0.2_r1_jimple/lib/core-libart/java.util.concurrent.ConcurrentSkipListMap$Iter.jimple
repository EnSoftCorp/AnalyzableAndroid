abstract class java.util.concurrent.ConcurrentSkipListMap$Iter extends java.lang.Object implements java.util.Iterator
{
    java.util.concurrent.ConcurrentSkipListMap$Node lastReturned;
    java.util.concurrent.ConcurrentSkipListMap$Node next;
    java.lang.Object nextValue;
    final java.util.concurrent.ConcurrentSkipListMap this$0;

    void <init>(java.util.concurrent.ConcurrentSkipListMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$Iter r0;
        java.util.concurrent.ConcurrentSkipListMap r1;
        java.lang.Object r2;
        java.util.concurrent.ConcurrentSkipListMap$Node $r3, $r4, $r5, $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Iter;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

     label1:
        $r3 = virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap: java.util.concurrent.ConcurrentSkipListMap$Node findFirst()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next> = $r3;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if $r4 != null goto label2;

        goto label4;

     label2:
        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        r2 = $r5.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r2 == null goto label3;

        $r6 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 == $r6 goto label3;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.lang.Object nextValue> = r2;

        goto label4;

     label3:
        goto label1;

     label4:
        return;
    }

    public final boolean hasNext()
    {
        java.util.concurrent.ConcurrentSkipListMap$Iter r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Iter;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final void advance()
    {
        java.util.concurrent.ConcurrentSkipListMap$Iter r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentSkipListMap$Node $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.NoSuchElementException $r9;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Iter;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if $r2 != null goto label1;

        $r9 = new java.util.NoSuchElementException;

        specialinvoke $r9.<java.util.NoSuchElementException: void <init>()>();

        throw $r9;

     label1:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node lastReturned> = $r3;

     label2:
        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        $r5 = $r4.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next> = $r5;

        $r6 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if $r6 != null goto label3;

        goto label5;

     label3:
        $r7 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        r1 = $r7.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r1 == null goto label4;

        $r8 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r1 == $r8 goto label4;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.lang.Object nextValue> = r1;

        goto label5;

     label4:
        goto label2;

     label5:
        return;
    }

    public void remove()
    {
        java.util.concurrent.ConcurrentSkipListMap$Iter r0;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;
        java.lang.Object $r2;
        java.util.concurrent.ConcurrentSkipListMap $r3;
        java.lang.IllegalStateException $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Iter;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node lastReturned>;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap this$0>;

        $r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap: java.lang.Object remove(java.lang.Object)>($r2);

        r0.<java.util.concurrent.ConcurrentSkipListMap$Iter: java.util.concurrent.ConcurrentSkipListMap$Node lastReturned> = null;

        return;
    }
}
