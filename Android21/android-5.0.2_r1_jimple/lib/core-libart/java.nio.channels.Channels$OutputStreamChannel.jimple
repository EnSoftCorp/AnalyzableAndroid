class java.nio.channels.Channels$OutputStreamChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.WritableByteChannel
{
    private final java.io.OutputStream outputStream;

    void <init>(java.io.OutputStream)
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.io.OutputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("outputStream == null");

        throw $r2;

     label1:
        r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream> = r1;

        return;
    }

    public synchronized int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.nio.ByteBuffer r1;
        int i0;
        byte[] r2;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        java.io.OutputStream $r5;
        java.nio.channels.ClosedChannelException $r6;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r6 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r6.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r6;

     label01:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        if i0 != 0 goto label02;

        return 0;

     label02:
        r2 = newarray (byte)[i0];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

     label03:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void begin()>();

        $r5 = r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, i0);

     label04:
        if i0 < 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void end(boolean)>($z1);

        goto label11;

     label07:
        $r7 := @caughtexception;

        r3 = $r7;

     label08:
        if i0 < 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        virtualinvoke r0.<java.nio.channels.Channels$OutputStreamChannel: void end(boolean)>($z2);

        throw r3;

     label11:
        return i0;

        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.Channels$OutputStreamChannel r0;
        java.io.OutputStream $r1;

        r0 := @this: java.nio.channels.Channels$OutputStreamChannel;

        $r1 = r0.<java.nio.channels.Channels$OutputStreamChannel: java.io.OutputStream outputStream>;

        virtualinvoke $r1.<java.io.OutputStream: void close()>();

        return;
    }
}
