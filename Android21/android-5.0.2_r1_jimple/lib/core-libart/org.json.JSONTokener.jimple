public class org.json.JSONTokener extends java.lang.Object
{
    private final java.lang.String in;
    private int pos;

    public void <init>(java.lang.String)
    {
        org.json.JSONTokener r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("\ufeff");

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(1);

     label1:
        r0.<org.json.JSONTokener: java.lang.String in> = r1;

        return;
    }

    public java.lang.Object nextValue() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        int i0, $i2, $i3;
        org.json.JSONObject $r1;
        org.json.JSONArray $r2;
        char $c1;
        java.lang.String $r3;
        org.json.JSONException $r4;
        java.lang.Object $r5;

        r0 := @this: org.json.JSONTokener;

        i0 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        lookupswitch(i0)
        {
            case -1: goto label1;
            case 34: goto label4;
            case 39: goto label4;
            case 91: goto label3;
            case 123: goto label2;
            default: goto label5;
        };

     label1:
        $r4 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("End of input");

        throw $r4;

     label2:
        $r1 = specialinvoke r0.<org.json.JSONTokener: org.json.JSONObject readObject()>();

        return $r1;

     label3:
        $r2 = specialinvoke r0.<org.json.JSONTokener: org.json.JSONArray readArray()>();

        return $r2;

     label4:
        $c1 = (char) i0;

        $r3 = virtualinvoke r0.<org.json.JSONTokener: java.lang.String nextString(char)>($c1);

        return $r3;

     label5:
        $i2 = r0.<org.json.JSONTokener: int pos>;

        $i3 = $i2 - 1;

        r0.<org.json.JSONTokener: int pos> = $i3;

        $r5 = specialinvoke r0.<org.json.JSONTokener: java.lang.Object readLiteral()>();

        return $r5;
    }

    private int nextCleanInternal() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        char c0, c1;
        int i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        org.json.JSONException $r6;

        r0 := @this: org.json.JSONTokener;

     label01:
        $i3 = r0.<org.json.JSONTokener: int pos>;

        $r1 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label11;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i5 = r0.<org.json.JSONTokener: int pos>;

        $i6 = $i5 + 1;

        r0.<org.json.JSONTokener: int pos> = $i6;

        c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i5);

        lookupswitch(c0)
        {
            case 9: goto label02;
            case 10: goto label02;
            case 13: goto label02;
            case 32: goto label02;
            case 35: goto label09;
            case 47: goto label03;
            default: goto label10;
        };

     label02:
        goto label01;

     label03:
        $i7 = r0.<org.json.JSONTokener: int pos>;

        $r3 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i8 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i7 != $i8 goto label04;

        return c0;

     label04:
        $r4 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i9 = r0.<org.json.JSONTokener: int pos>;

        c1 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i9);

        lookupswitch(c1)
        {
            case 42: goto label05;
            case 47: goto label07;
            default: goto label08;
        };

     label05:
        $i11 = r0.<org.json.JSONTokener: int pos>;

        $i14 = $i11 + 1;

        r0.<org.json.JSONTokener: int pos> = $i14;

        $r5 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i13 = r0.<org.json.JSONTokener: int pos>;

        i2 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String,int)>("*/", $i13);

        if i2 != -1 goto label06;

        $r6 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated comment");

        throw $r6;

     label06:
        $i15 = i2 + 2;

        r0.<org.json.JSONTokener: int pos> = $i15;

        goto label01;

     label07:
        $i10 = r0.<org.json.JSONTokener: int pos>;

        $i12 = $i10 + 1;

        r0.<org.json.JSONTokener: int pos> = $i12;

        specialinvoke r0.<org.json.JSONTokener: void skipToEndOfLine()>();

        goto label01;

     label08:
        return c0;

     label09:
        specialinvoke r0.<org.json.JSONTokener: void skipToEndOfLine()>();

        goto label01;

     label10:
        return c0;

     label11:
        return -1;
    }

    private void skipToEndOfLine()
    {
        org.json.JSONTokener r0;
        char c0;
        java.lang.String $r1, $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.json.JSONTokener;

     label1:
        $i1 = r0.<org.json.JSONTokener: int pos>;

        $r1 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label4;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i3 = r0.<org.json.JSONTokener: int pos>;

        c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i3);

        if c0 == 13 goto label2;

        if c0 != 10 goto label3;

     label2:
        $i4 = r0.<org.json.JSONTokener: int pos>;

        $i5 = $i4 + 1;

        r0.<org.json.JSONTokener: int pos> = $i5;

        goto label4;

     label3:
        $i6 = r0.<org.json.JSONTokener: int pos>;

        $i7 = $i6 + 1;

        r0.<org.json.JSONTokener: int pos> = $i7;

        goto label1;

     label4:
        return;
    }

    public java.lang.String nextString(char) throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        char c0, c2, $c11;
        java.lang.StringBuilder r1, $r10;
        int i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15;
        java.lang.String $r2, $r4, $r5, $r7, $r12, $r13, $r14, $r15, $r16;
        org.json.JSONException $r3, $r9;

        r0 := @this: org.json.JSONTokener;

        c0 := @parameter0: char;

        r1 = null;

        i1 = r0.<org.json.JSONTokener: int pos>;

     label1:
        $i3 = r0.<org.json.JSONTokener: int pos>;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i4 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label7;

        $r4 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i5 = r0.<org.json.JSONTokener: int pos>;

        $i6 = $i5 + 1;

        r0.<org.json.JSONTokener: int pos> = $i6;

        c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>($i5);

        if c2 != c0 goto label3;

        if r1 != null goto label2;

        $r13 = new java.lang.String;

        $r15 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i15 = r0.<org.json.JSONTokener: int pos>;

        $i14 = $i15 - 1;

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int,int)>(i1, $i14);

        specialinvoke $r13.<java.lang.String: void <init>(java.lang.String)>($r16);

        return $r13;

     label2:
        $r12 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i13 = r0.<org.json.JSONTokener: int pos>;

        $i12 = $i13 - 1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r12, i1, $i12);

        $r14 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label3:
        if c2 != 92 goto label6;

        $i7 = r0.<org.json.JSONTokener: int pos>;

        $r5 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i8 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i7 != $i8 goto label4;

        $r9 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated escape sequence");

        throw $r9;

     label4:
        if r1 != null goto label5;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        r1 = $r10;

     label5:
        $r7 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i10 = r0.<org.json.JSONTokener: int pos>;

        $i9 = $i10 - 1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r7, i1, $i9);

        $c11 = specialinvoke r0.<org.json.JSONTokener: char readEscapeCharacter()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c11);

        i1 = r0.<org.json.JSONTokener: int pos>;

     label6:
        goto label1;

     label7:
        $r3 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r3;
    }

    private char readEscapeCharacter() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        char c0, $c11;
        java.lang.String r1, $r2, $r3, $r4;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        org.json.JSONException $r5;

        r0 := @this: org.json.JSONTokener;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i1 = r0.<org.json.JSONTokener: int pos>;

        $i2 = $i1 + 1;

        r0.<org.json.JSONTokener: int pos> = $i2;

        c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        lookupswitch(c0)
        {
            case 34: goto label8;
            case 39: goto label8;
            case 92: goto label8;
            case 98: goto label4;
            case 102: goto label7;
            case 110: goto label5;
            case 114: goto label6;
            case 116: goto label3;
            case 117: goto label1;
            default: goto label8;
        };

     label1:
        $i3 = r0.<org.json.JSONTokener: int pos>;

        $i4 = $i3 + 4;

        $r3 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i5 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 <= $i5 goto label2;

        $r5 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated escape sequence");

        throw $r5;

     label2:
        $r4 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i8 = r0.<org.json.JSONTokener: int pos>;

        $i6 = r0.<org.json.JSONTokener: int pos>;

        $i7 = $i6 + 4;

        r1 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i8, $i7);

        $i10 = r0.<org.json.JSONTokener: int pos>;

        $i9 = $i10 + 4;

        r0.<org.json.JSONTokener: int pos> = $i9;

        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, 16);

        $c11 = (char) $i12;

        return $c11;

     label3:
        return 9;

     label4:
        return 8;

     label5:
        return 10;

     label6:
        return 13;

     label7:
        return 12;

     label8:
        return c0;
    }

    private java.lang.Object readLiteral() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        java.lang.String r1, r2, $r3, $r4, $r5, $r15;
        byte b0, $b4, $b5;
        long l1;
        int $i2, $i3, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Double $r6;
        java.lang.Long $r7;
        java.lang.Integer $r8;
        java.lang.Boolean $r9, $r10;
        org.json.JSONException $r11;
        java.lang.Object $r12;
        java.lang.NumberFormatException $r13, $r14;

        r0 := @this: org.json.JSONTokener;

        r1 = specialinvoke r0.<org.json.JSONTokener: java.lang.String nextToInternal(java.lang.String)>("{}[]/\\:,=;# \t\f");

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        $r11 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Expected literal value");

        throw $r11;

     label01:
        $r3 = "null";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label02;

        $r12 = <org.json.JSONObject: java.lang.Object NULL>;

        return $r12;

     label02:
        $r4 = "true";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label03;

        $r9 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return $r9;

     label03:
        $r5 = "false";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z2 == 0 goto label04;

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r10;

     label04:
        $i3 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46);

        if $i3 != -1 goto label12;

        b0 = 10;

        r2 = r1;

        $z3 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("0x");

        if $z3 != 0 goto label05;

        $z5 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("0X");

        if $z5 == 0 goto label06;

     label05:
        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(2);

        b0 = 16;

        goto label07;

     label06:
        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $z4 == 0 goto label07;

        $i7 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i7 <= 1 goto label07;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(1);

        b0 = 8;

     label07:
        l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r2, b0);

        $b4 = l1 cmp 2147483647L;

        if $b4 > 0 goto label09;

        $b5 = l1 cmp -2147483648L;

        if $b5 < 0 goto label09;

        $i6 = (int) l1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

     label08:
        return $r8;

     label09:
        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

     label10:
        return $r7;

     label11:
        $r13 := @caughtexception;

     label12:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r1);

     label13:
        return $r6;

     label14:
        $r14 := @caughtexception;

        $r15 = new java.lang.String;

        specialinvoke $r15.<java.lang.String: void <init>(java.lang.String)>(r1);

        return $r15;

        catch java.lang.NumberFormatException from label07 to label08 with label11;
        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.lang.NumberFormatException from label12 to label13 with label14;
    }

    private java.lang.String nextToInternal(java.lang.String)
    {
        org.json.JSONTokener r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        char c1;

        r0 := @this: org.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        i0 = r0.<org.json.JSONTokener: int pos>;

     label1:
        $i2 = r0.<org.json.JSONTokener: int pos>;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label4;

        $r5 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i4 = r0.<org.json.JSONTokener: int pos>;

        c1 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i4);

        if c1 == 13 goto label2;

        if c1 == 10 goto label2;

        $i6 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(c1);

        if $i6 == -1 goto label3;

     label2:
        $r6 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i5 = r0.<org.json.JSONTokener: int pos>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5);

        return $r7;

     label3:
        $i8 = r0.<org.json.JSONTokener: int pos>;

        $i7 = $i8 + 1;

        r0.<org.json.JSONTokener: int pos> = $i7;

        goto label1;

     label4:
        $r3 = r0.<org.json.JSONTokener: java.lang.String in>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>(i0);

        return $r4;
    }

    private org.json.JSONObject readObject() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        org.json.JSONObject r1, $r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10;
        java.lang.Object r2, $r6;
        boolean $z0;
        java.lang.String $r4, $r5, $r9, $r14, $r20, $r22;
        org.json.JSONException $r8, $r13, $r23, $r24;
        char $c7;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19;
        java.lang.Class $r21;

        r0 := @this: org.json.JSONTokener;

        $r3 = new org.json.JSONObject;

        specialinvoke $r3.<org.json.JSONObject: void <init>()>();

        r1 = $r3;

        i0 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        if i0 != 125 goto label1;

        return r1;

     label1:
        if i0 == -1 goto label2;

        $i9 = r0.<org.json.JSONTokener: int pos>;

        $i10 = $i9 - 1;

        r0.<org.json.JSONTokener: int pos> = $i10;

     label2:
        r2 = virtualinvoke r0.<org.json.JSONTokener: java.lang.Object nextValue()>();

        $z0 = r2 instanceof java.lang.String;

        if $z0 != 0 goto label4;

        if r2 != null goto label3;

        $r24 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Names cannot be null");

        throw $r24;

     label3:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Names must be strings, but ");

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is of type ");

        $r21 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($r20);

        throw $r23;

     label4:
        i1 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        if i1 == 58 goto label5;

        if i1 == 61 goto label5;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \':\' after ");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($r14);

        throw $r13;

     label5:
        $i2 = r0.<org.json.JSONTokener: int pos>;

        $r4 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i3 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 >= $i3 goto label6;

        $r9 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i5 = r0.<org.json.JSONTokener: int pos>;

        $c7 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i5);

        if $c7 != 62 goto label6;

        $i6 = r0.<org.json.JSONTokener: int pos>;

        $i8 = $i6 + 1;

        r0.<org.json.JSONTokener: int pos> = $i8;

     label6:
        $r5 = (java.lang.String) r2;

        $r6 = virtualinvoke r0.<org.json.JSONTokener: java.lang.Object nextValue()>();

        virtualinvoke r1.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r5, $r6);

        $i4 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        lookupswitch($i4)
        {
            case 44: goto label8;
            case 59: goto label8;
            case 125: goto label7;
            default: goto label9;
        };

     label7:
        return r1;

     label8:
        goto label2;

     label9:
        $r8 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated object");

        throw $r8;
    }

    private org.json.JSONArray readArray() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        org.json.JSONArray r1, $r2;
        boolean z0;
        int $i0, $i1, $i2, $i3;
        org.json.JSONException $r5, $r8;
        java.lang.Object $r6;

        r0 := @this: org.json.JSONTokener;

        $r2 = new org.json.JSONArray;

        specialinvoke $r2.<org.json.JSONArray: void <init>()>();

        r1 = $r2;

        z0 = 0;

     label1:
        $i0 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        lookupswitch($i0)
        {
            case -1: goto label2;
            case 44: goto label5;
            case 59: goto label5;
            case 93: goto label3;
            default: goto label6;
        };

     label2:
        $r5 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated array");

        throw $r5;

     label3:
        if z0 == 0 goto label4;

        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(null);

     label4:
        return r1;

     label5:
        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>(null);

        z0 = 1;

        goto label1;

     label6:
        $i1 = r0.<org.json.JSONTokener: int pos>;

        $i2 = $i1 - 1;

        r0.<org.json.JSONTokener: int pos> = $i2;

        $r6 = virtualinvoke r0.<org.json.JSONTokener: java.lang.Object nextValue()>();

        virtualinvoke r1.<org.json.JSONArray: org.json.JSONArray put(java.lang.Object)>($r6);

        $i3 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        lookupswitch($i3)
        {
            case 44: goto label8;
            case 59: goto label8;
            case 93: goto label7;
            default: goto label9;
        };

     label7:
        return r1;

     label8:
        z0 = 1;

        goto label1;

     label9:
        $r8 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated array");

        throw $r8;
    }

    public org.json.JSONException syntaxError(java.lang.String)
    {
        org.json.JSONTokener r0;
        java.lang.String r1, $r6;
        org.json.JSONException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r0 := @this: org.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>($r6);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.json.JSONTokener r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r6;
        int $i0;
        java.lang.String $r5, $r7;

        r0 := @this: org.json.JSONTokener;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at character ");

        $i0 = r0.<org.json.JSONTokener: int pos>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r5 = r0.<org.json.JSONTokener: java.lang.String in>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public boolean more()
    {
        org.json.JSONTokener r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.json.JSONTokener;

        $i0 = r0.<org.json.JSONTokener: int pos>;

        $r1 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public char next()
    {
        org.json.JSONTokener r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2, $i3;
        char $c4;

        r0 := @this: org.json.JSONTokener;

        $i0 = r0.<org.json.JSONTokener: int pos>;

        $r1 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label1;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i2 = r0.<org.json.JSONTokener: int pos>;

        $i3 = $i2 + 1;

        r0.<org.json.JSONTokener: int pos> = $i3;

        $c4 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i2);

        goto label2;

     label1:
        $c4 = 0;

     label2:
        return $c4;
    }

    public char next(char) throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        char c0, c1;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5;
        java.lang.String $r6;
        org.json.JSONException $r7;

        r0 := @this: org.json.JSONTokener;

        c0 := @parameter0: char;

        c1 = virtualinvoke r0.<org.json.JSONTokener: char next()>();

        if c1 == c0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($r6);

        throw $r7;

     label1:
        return c1;
    }

    public char nextClean() throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        int i0;
        char $c1;

        r0 := @this: org.json.JSONTokener;

        i0 = specialinvoke r0.<org.json.JSONTokener: int nextCleanInternal()>();

        if i0 != -1 goto label1;

        $c1 = 0;

        goto label2;

     label1:
        $c1 = (char) i0;

     label2:
        return $c1;
    }

    public java.lang.String next(int) throws org.json.JSONException
    {
        org.json.JSONTokener r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r1, $r2, $r3, $r6;
        java.lang.StringBuilder $r4, $r5, $r7;
        org.json.JSONException $r8;

        r0 := @this: org.json.JSONTokener;

        i0 := @parameter0: int;

        $i1 = r0.<org.json.JSONTokener: int pos>;

        $i2 = $i1 + i0;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= $i3 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of bounds");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($r6);

        throw $r8;

     label1:
        $r3 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i6 = r0.<org.json.JSONTokener: int pos>;

        $i4 = r0.<org.json.JSONTokener: int pos>;

        $i5 = $i4 + i0;

        r1 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i6, $i5);

        $i7 = r0.<org.json.JSONTokener: int pos>;

        $i8 = $i7 + i0;

        r0.<org.json.JSONTokener: int pos> = $i8;

        return r1;
    }

    public java.lang.String nextTo(java.lang.String)
    {
        org.json.JSONTokener r0;
        java.lang.String r1, $r2, $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: org.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("excluded == null");

        throw $r4;

     label1:
        $r2 = specialinvoke r0.<org.json.JSONTokener: java.lang.String nextToInternal(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    public java.lang.String nextTo(char)
    {
        org.json.JSONTokener r0;
        char c0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.json.JSONTokener;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(c0);

        $r2 = specialinvoke r0.<org.json.JSONTokener: java.lang.String nextToInternal(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r3;
    }

    public void skipPast(java.lang.String)
    {
        org.json.JSONTokener r0;
        java.lang.String r1, $r2, $r3;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.json.JSONTokener;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i1 = r0.<org.json.JSONTokener: int pos>;

        i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>(r1, $i1);

        if i0 != -1 goto label1;

        $r3 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = i0 + $i2;

     label2:
        r0.<org.json.JSONTokener: int pos> = $i3;

        return;
    }

    public char skipTo(char)
    {
        org.json.JSONTokener r0;
        char c0;
        int i1, $i2;
        java.lang.String $r1;

        r0 := @this: org.json.JSONTokener;

        c0 := @parameter0: char;

        $r1 = r0.<org.json.JSONTokener: java.lang.String in>;

        $i2 = r0.<org.json.JSONTokener: int pos>;

        i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int,int)>(c0, $i2);

        if i1 == -1 goto label1;

        r0.<org.json.JSONTokener: int pos> = i1;

        return c0;

     label1:
        return 0;
    }

    public void back()
    {
        org.json.JSONTokener r0;
        int $i0, $i1;

        r0 := @this: org.json.JSONTokener;

        $i0 = r0.<org.json.JSONTokener: int pos>;

        $i1 = $i0 - 1;

        r0.<org.json.JSONTokener: int pos> = $i1;

        if $i1 != -1 goto label1;

        r0.<org.json.JSONTokener: int pos> = 0;

     label1:
        return;
    }

    public static int dehexchar(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        $i5 = c0 - 48;

        return $i5;

     label1:
        if c0 < 65 goto label2;

        if c0 > 70 goto label2;

        $i3 = c0 - 65;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        if c0 < 97 goto label3;

        if c0 > 102 goto label3;

        $i1 = c0 - 97;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        return -1;
    }
}
