final class java.io.ObjectStreamClass$4 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        java.io.ObjectStreamClass$4 r0;

        r0 := @this: java.io.ObjectStreamClass$4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(java.lang.reflect.Method, java.lang.reflect.Method)
    {
        java.io.ObjectStreamClass$4 r0;
        java.lang.reflect.Method r1, r2;
        int i0, $i1;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @this: java.io.ObjectStreamClass$4;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: java.lang.reflect.Method;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        i0 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if i0 != 0 goto label1;

        $r5 = staticinvoke <java.io.ObjectStreamClass: java.lang.String getMethodSignature(java.lang.reflect.Method)>(r1);

        $r6 = staticinvoke <java.io.ObjectStreamClass: java.lang.String getMethodSignature(java.lang.reflect.Method)>(r2);

        $i1 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r6);

        return $i1;

     label1:
        return i0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        java.io.ObjectStreamClass$4 r0;
        java.lang.Object r1, r2;
        java.lang.reflect.Method $r3, $r4;
        int $i0;

        r0 := @this: java.io.ObjectStreamClass$4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.reflect.Method) r1;

        $r3 = (java.lang.reflect.Method) r2;

        $i0 = virtualinvoke r0.<java.io.ObjectStreamClass$4: int compare(java.lang.reflect.Method,java.lang.reflect.Method)>($r4, $r3);

        return $i0;
    }
}
