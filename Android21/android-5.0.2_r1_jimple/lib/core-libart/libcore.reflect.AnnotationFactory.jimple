public final class libcore.reflect.AnnotationFactory extends java.lang.Object implements java.lang.reflect.InvocationHandler, java.io.Serializable
{
    private static final transient java.util.Map cache;
    private final java.lang.Class klazz;
    private libcore.reflect.AnnotationMember[] elements;

    public static libcore.reflect.AnnotationMember[] getElementsDescription(java.lang.Class)
    {
        java.lang.Class r0, r6;
        java.util.Map r1, $r9, $r10, $r12, $r14, r29;
        libcore.reflect.AnnotationMember[] r2, r28;
        java.lang.Throwable r3, r7, r8, $r23, $r25, $r26;
        java.lang.reflect.Method r4;
        java.lang.String r5, $r21, $r22;
        java.lang.Object $r11, $r17;
        boolean $z0;
        int $i0, $i1, i2;
        libcore.reflect.AnnotationMember $r15, $r24;
        java.lang.IllegalArgumentException $r16;
        java.lang.StringBuilder $r18, $r19, $r20;
        java.lang.reflect.Method[] r27;

        r0 := @parameter0: java.lang.Class;

        $r9 = <libcore.reflect.AnnotationFactory: java.util.Map cache>;

        r1 = $r9;

        entermonitor $r9;

     label01:
        $r10 = <libcore.reflect.AnnotationFactory: java.util.Map cache>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (libcore.reflect.AnnotationMember[]) $r11;

        if r2 == null goto label03;

        exitmonitor r1;

     label02:
        return r2;

     label03:
        exitmonitor r1;

     label04:
        goto label07;

     label05:
        $r25 := @caughtexception;

        r3 = $r25;

        exitmonitor r1;

     label06:
        throw r3;

     label07:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAnnotation()>();

        if $z0 != 0 goto label08;

        $r16 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is not annotation: ");

        $r21 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22);

        throw $r16;

     label08:
        r27 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = lengthof r27;

        r28 = newarray (libcore.reflect.AnnotationMember)[$i0];

        i2 = 0;

     label09:
        $i1 = lengthof r27;

        if i2 >= $i1 goto label14;

        r4 = r27[i2];

        r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.String getName()>();

        r6 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

     label10:
        $r15 = new libcore.reflect.AnnotationMember;

        $r17 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Object getDefaultValue()>();

        specialinvoke $r15.<libcore.reflect.AnnotationMember: void <init>(java.lang.String,java.lang.Object,java.lang.Class,java.lang.reflect.Method)>(r5, $r17, r6, r4);

        r28[i2] = $r15;

     label11:
        goto label13;

     label12:
        $r23 := @caughtexception;

        r7 = $r23;

        $r24 = new libcore.reflect.AnnotationMember;

        specialinvoke $r24.<libcore.reflect.AnnotationMember: void <init>(java.lang.String,java.lang.Object,java.lang.Class,java.lang.reflect.Method)>(r5, r7, r6, r4);

        r28[i2] = $r24;

     label13:
        i2 = i2 + 1;

        goto label09;

     label14:
        $r12 = <libcore.reflect.AnnotationFactory: java.util.Map cache>;

        r29 = $r12;

        entermonitor $r12;

     label15:
        $r14 = <libcore.reflect.AnnotationFactory: java.util.Map cache>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r28);

        exitmonitor r29;

     label16:
        goto label19;

     label17:
        $r26 := @caughtexception;

        r8 = $r26;

        exitmonitor r29;

     label18:
        throw r8;

     label19:
        return r28;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public static java.lang.annotation.Annotation createAnnotation(java.lang.Class, libcore.reflect.AnnotationMember[])
    {
        java.lang.Class r0;
        libcore.reflect.AnnotationMember[] r1;
        libcore.reflect.AnnotationFactory r2, $r3;
        java.lang.ClassLoader $r4;
        java.lang.Class[] $r5;
        java.lang.Object $r6;
        java.lang.annotation.Annotation $r7;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: libcore.reflect.AnnotationMember[];

        $r3 = new libcore.reflect.AnnotationFactory;

        specialinvoke $r3.<libcore.reflect.AnnotationFactory: void <init>(java.lang.Class,libcore.reflect.AnnotationMember[])>(r0, r1);

        r2 = $r3;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = r0;

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r4, $r5, r2);

        $r7 = (java.lang.annotation.Annotation) $r6;

        return $r7;
    }

    private void <init>(java.lang.Class, libcore.reflect.AnnotationMember[])
    {
        libcore.reflect.AnnotationFactory r0;
        java.lang.Class r1, $r6;
        libcore.reflect.AnnotationMember[] r2, r3, r4, $r7, $r8, $r11, $r16;
        int i0, i1, i2, $i3, $i4;
        libcore.reflect.AnnotationMember r5, $r9, $r10, $r14, $r15;
        java.lang.String $r12, $r13;
        boolean $z0;

        r0 := @this: libcore.reflect.AnnotationFactory;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: libcore.reflect.AnnotationMember[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz> = r1;

        $r6 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        r3 = staticinvoke <libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] getElementsDescription(java.lang.Class)>($r6);

        if r2 != null goto label1;

        r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements> = r3;

        goto label7;

     label1:
        $i3 = lengthof r3;

        $r7 = newarray (libcore.reflect.AnnotationMember)[$i3];

        r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements> = $r7;

        $r8 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $i4 = lengthof $r8;

        i0 = $i4 - 1;

     label2:
        if i0 < 0 goto label7;

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        r5 = r4[i2];

        $r12 = r5.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $r10 = r3[i0];

        $r13 = $r10.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label4;

        $r16 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $r14 = r3[i0];

        $r15 = virtualinvoke r5.<libcore.reflect.AnnotationMember: libcore.reflect.AnnotationMember setDefinition(libcore.reflect.AnnotationMember)>($r14);

        $r16[i0] = $r15;

        goto label6;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        $r11 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $r9 = r3[i0];

        $r11[i0] = $r9;

     label6:
        i0 = i0 + -1;

        goto label2;

     label7:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        libcore.reflect.AnnotationFactory r0;
        java.io.ObjectInputStream r1;
        libcore.reflect.AnnotationMember[] r2, r3, r5, r7, $r12, $r13, r19, r21;
        java.util.ArrayList r4, $r10;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11;
        libcore.reflect.AnnotationMember r6, r8, $r16, r20, r22;
        java.lang.Class $r9;
        java.lang.Object[] $r11;
        java.lang.String $r14, $r15, $r17, $r18;
        boolean $z1, $z4;

        r0 := @this: libcore.reflect.AnnotationFactory;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r9 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        r2 = staticinvoke <libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] getElementsDescription(java.lang.Class)>($r9);

        r3 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $r10 = new java.util.ArrayList;

        $i4 = lengthof r2;

        $i5 = lengthof r3;

        $i7 = $i4 + $i5;

        specialinvoke $r10.<java.util.ArrayList: void <init>(int)>($i7);

        r4 = $r10;

        r5 = r3;

        i0 = lengthof r5;

        i1 = 0;

     label01:
        if i1 >= i0 goto label06;

        r6 = r5[i1];

        r7 = r2;

        i2 = lengthof r7;

        i3 = 0;

     label02:
        if i3 >= i2 goto label04;

        r8 = r7[i3];

        $r17 = r8.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $r18 = r6.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $z4 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z4 == 0 goto label03;

        goto label05;

     label03:
        i3 = i3 + 1;

        goto label02;

     label04:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r6);

     label05:
        i1 = i1 + 1;

        goto label01;

     label06:
        r19 = r2;

        i8 = lengthof r19;

        i9 = 0;

     label07:
        if i9 >= i8 goto label12;

        r20 = r19[i9];

        r21 = r3;

        i10 = lengthof r21;

        i11 = 0;

     label08:
        if i11 >= i10 goto label10;

        r22 = r21[i11];

        $r14 = r22.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $r15 = r20.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z1 == 0 goto label09;

        $r16 = virtualinvoke r22.<libcore.reflect.AnnotationMember: libcore.reflect.AnnotationMember setDefinition(libcore.reflect.AnnotationMember)>(r20);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label11;

     label09:
        i11 = i11 + 1;

        goto label08;

     label10:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r20);

     label11:
        i9 = i9 + 1;

        goto label07;

     label12:
        $i6 = interfaceinvoke r4.<java.util.List: int size()>();

        $r12 = newarray (libcore.reflect.AnnotationMember)[$i6];

        $r11 = interfaceinvoke r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r13 = (libcore.reflect.AnnotationMember[]) $r11;

        r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements> = $r13;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        libcore.reflect.AnnotationFactory r0, r2;
        java.lang.Object r1, $r12, $r13, $r14, r23;
        libcore.reflect.AnnotationMember[] r3, r5, $r17, $r18, r21;
        int i0, i1, i2, i3, $i6, $i7, i8, i9;
        libcore.reflect.AnnotationMember r4, r6, r22;
        java.lang.Class $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.reflect.Method $r9, $r11, $r16;
        char $c4, $c5;
        java.lang.Object[] $r10;
        java.lang.reflect.InvocationHandler $r15, r20;
        java.lang.Throwable $r19;

        r0 := @this: libcore.reflect.AnnotationFactory;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label01;

        return 1;

     label01:
        $r7 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isInstance(java.lang.Object)>(r1);

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r8);

        if $z1 == 0 goto label10;

        $r15 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r1);

        r20 = $r15;

        $z5 = $r15 instanceof libcore.reflect.AnnotationFactory;

        if $z5 == 0 goto label10;

        r2 = (libcore.reflect.AnnotationFactory) r20;

        $r17 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $i6 = lengthof $r17;

        $r18 = r2.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $i7 = lengthof $r18;

        if $i6 == $i7 goto label03;

        return 0;

     label03:
        r3 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        i0 = lengthof r3;

        i1 = 0;

     label04:
        if i1 >= i0 goto label09;

        r4 = r3[i1];

        r5 = r2.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        i2 = lengthof r5;

        i3 = 0;

     label05:
        if i3 >= i2 goto label07;

        r6 = r5[i3];

        $z6 = virtualinvoke r4.<libcore.reflect.AnnotationMember: boolean equals(java.lang.Object)>(r6);

        if $z6 == 0 goto label06;

        goto label08;

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        return 0;

     label08:
        i1 = i1 + 1;

        goto label04;

     label09:
        return 1;

     label10:
        r21 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        i8 = lengthof r21;

        i9 = 0;

     label11:
        if i9 >= i8 goto label22;

        r22 = r21[i9];

        $c4 = r22.<libcore.reflect.AnnotationMember: char tag>;

        if $c4 != 33 goto label12;

        return 0;

     label12:
        $r9 = r22.<libcore.reflect.AnnotationMember: java.lang.reflect.Method definingMethod>;

        $z2 = virtualinvoke $r9.<java.lang.reflect.Method: boolean isAccessible()>();

        if $z2 != 0 goto label13;

        $r16 = r22.<libcore.reflect.AnnotationMember: java.lang.reflect.Method definingMethod>;

        virtualinvoke $r16.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

     label13:
        $r11 = r22.<libcore.reflect.AnnotationMember: java.lang.reflect.Method definingMethod>;

        $r10 = newarray (java.lang.Object)[0];

        r23 = virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r10);

        if r23 == null goto label17;

        $c5 = r22.<libcore.reflect.AnnotationMember: char tag>;

        if $c5 != 91 goto label15;

        $z3 = virtualinvoke r22.<libcore.reflect.AnnotationMember: boolean equalArrayValue(java.lang.Object)>(r23);

        if $z3 != 0 goto label19;

     label14:
        return 0;

     label15:
        $r14 = r22.<libcore.reflect.AnnotationMember: java.lang.Object value>;

        $z4 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r23);

        if $z4 != 0 goto label19;

     label16:
        return 0;

     label17:
        $r12 = r22.<libcore.reflect.AnnotationMember: java.lang.Object value>;

        $r13 = <libcore.reflect.AnnotationMember: java.lang.Object NO_VALUE>;

        if $r12 == $r13 goto label19;

     label18:
        return 0;

     label19:
        goto label21;

     label20:
        $r19 := @caughtexception;

        return 0;

     label21:
        i9 = i9 + 1;

        goto label11;

     label22:
        return 1;

        catch java.lang.Throwable from label12 to label14 with label20;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch java.lang.Throwable from label17 to label18 with label20;
    }

    public int hashCode()
    {
        libcore.reflect.AnnotationFactory r0;
        int i0, i1, i2, $i3;
        libcore.reflect.AnnotationMember[] r1;
        libcore.reflect.AnnotationMember r2;

        r0 := @this: libcore.reflect.AnnotationFactory;

        i0 = 0;

        r1 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r1[i2];

        $i3 = virtualinvoke r2.<libcore.reflect.AnnotationMember: int hashCode()>();

        i0 = i0 + $i3;

        i2 = i2 + 1;

        goto label1;

     label2:
        return i0;
    }

    public java.lang.String toString()
    {
        libcore.reflect.AnnotationFactory r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1;
        java.lang.Class $r4;
        java.lang.String $r5, $r10;
        libcore.reflect.AnnotationMember[] $r8, $r11;
        libcore.reflect.AnnotationMember $r12;

        r0 := @this: libcore.reflect.AnnotationFactory;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r4 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i0 = 0;

     label1:
        $r8 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $i1 = lengthof $r8;

        if i0 >= $i1 goto label3;

        if i0 == 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r11 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        $r12 = $r11[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        i0 = i0 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        libcore.reflect.AnnotationFactory r0;
        java.lang.Object r1, $r16, r30;
        java.lang.reflect.Method r2, $r21;
        java.lang.Object[] r3;
        java.lang.String r4, $r12, $r14, $r18, $r19, $r20, $r23, $r25, $r28;
        java.lang.Class[] r5;
        libcore.reflect.AnnotationMember r6, r8;
        libcore.reflect.AnnotationMember[] r7;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r9, $r22;
        java.lang.StringBuilder $r10, $r11, $r13;
        java.lang.Class $r15, $r24, $r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Boolean $r17;
        java.lang.annotation.IncompleteAnnotationException $r26;
        java.lang.Integer $r27;

        r0 := @this: libcore.reflect.AnnotationFactory;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: java.lang.Object[];

        r4 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String getName()>();

        r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i2 = lengthof r5;

        if $i2 != 0 goto label10;

        $r18 = "annotationType";

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label01;

        $r29 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        return $r29;

     label01:
        $r19 = "toString";

        $z3 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label02;

        $r28 = virtualinvoke r0.<libcore.reflect.AnnotationFactory: java.lang.String toString()>();

        return $r28;

     label02:
        $r20 = "hashCode";

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z4 == 0 goto label03;

        $i4 = virtualinvoke r0.<libcore.reflect.AnnotationFactory: int hashCode()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        return $r27;

     label03:
        r6 = null;

        r7 = r0.<libcore.reflect.AnnotationFactory: libcore.reflect.AnnotationMember[] elements>;

        i0 = lengthof r7;

        i1 = 0;

     label04:
        if i1 >= i0 goto label06;

        r8 = r7[i1];

        $r25 = r8.<libcore.reflect.AnnotationMember: java.lang.String name>;

        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z6 == 0 goto label05;

        r6 = r8;

        goto label06;

     label05:
        i1 = i1 + 1;

        goto label04;

     label06:
        if r6 == null goto label07;

        $r21 = r6.<libcore.reflect.AnnotationMember: java.lang.reflect.Method definingMethod>;

        $z5 = virtualinvoke r2.<java.lang.reflect.Method: boolean equals(java.lang.Object)>($r21);

        if $z5 != 0 goto label08;

     label07:
        $r22 = new java.lang.IllegalArgumentException;

        $r23 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r22;

     label08:
        r30 = virtualinvoke r6.<libcore.reflect.AnnotationMember: java.lang.Object validateValue()>();

        if r30 != null goto label09;

        $r26 = new java.lang.annotation.IncompleteAnnotationException;

        $r24 = r0.<libcore.reflect.AnnotationFactory: java.lang.Class klazz>;

        specialinvoke $r26.<java.lang.annotation.IncompleteAnnotationException: void <init>(java.lang.Class,java.lang.String)>($r24, r4);

        throw $r26;

     label09:
        return r30;

     label10:
        $i3 = lengthof r5;

        if $i3 != 1 goto label11;

        $r15 = r5[0];

        if $r15 != class "java/lang/Object" goto label11;

        $r14 = "equals";

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label11;

        $r16 = r3[0];

        $z1 = virtualinvoke r0.<libcore.reflect.AnnotationFactory: boolean equals(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r17;

     label11:
        $r9 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid method for annotation type: ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r9;
    }

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        <libcore.reflect.AnnotationFactory: java.util.Map cache> = $r0;

        return;
    }
}
