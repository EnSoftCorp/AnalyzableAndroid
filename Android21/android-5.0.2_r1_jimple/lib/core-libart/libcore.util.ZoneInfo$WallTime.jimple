public class libcore.util.ZoneInfo$WallTime extends java.lang.Object
{
    private final java.util.GregorianCalendar calendar;
    private int year;
    private int month;
    private int monthDay;
    private int hour;
    private int minute;
    private int second;
    private int weekDay;
    private int yearDay;
    private int isDst;
    private int gmtOffsetSeconds;

    public void <init>()
    {
        libcore.util.ZoneInfo$WallTime r0;
        java.util.GregorianCalendar $r1, $r2;
        java.util.TimeZone $r3;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.GregorianCalendar;

        specialinvoke $r1.<java.util.GregorianCalendar: void <init>(boolean)>(0);

        r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar> = $r1;

        $r2 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        virtualinvoke $r2.<java.util.GregorianCalendar: void setTimeZone(java.util.TimeZone)>($r3);

        return;
    }

    public void localtime(int, libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0, i1, i3, $i5, $i6, $i7, i10;
        libcore.util.ZoneInfo r1;
        byte b2, b4;
        int[] $r2, $r4;
        byte[] $r3, $r5;
        long $l8, $l9;
        libcore.util.ZoneInfo$CheckedArithmeticException $r6;
        java.util.GregorianCalendar $r7;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r1 := @parameter1: libcore.util.ZoneInfo;

     label1:
        $i5 = staticinvoke <libcore.util.ZoneInfo: int access$000(libcore.util.ZoneInfo)>(r1);

        i1 = $i5 / 1000;

        $r2 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r1);

        $i6 = lengthof $r2;

        if $i6 != 0 goto label2;

        b2 = 0;

        goto label4;

     label2:
        i3 = staticinvoke <libcore.util.ZoneInfo$WallTime: int findTransitionIndex(libcore.util.ZoneInfo,int)>(r1, i0);

        if i3 >= 0 goto label3;

        b2 = 0;

        goto label4;

     label3:
        $r3 = staticinvoke <libcore.util.ZoneInfo: byte[] access$200(libcore.util.ZoneInfo)>(r1);

        b4 = $r3[i3];

        $r4 = staticinvoke <libcore.util.ZoneInfo: int[] access$300(libcore.util.ZoneInfo)>(r1);

        $i7 = $r4[b4];

        i1 = i1 + $i7;

        $r5 = staticinvoke <libcore.util.ZoneInfo: byte[] access$400(libcore.util.ZoneInfo)>(r1);

        b2 = $r5[b4];

     label4:
        i10 = staticinvoke <libcore.util.ZoneInfo: int access$500(int,int)>(i0, i1);

        $r7 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $l9 = (long) i10;

        $l8 = $l9 * 1000L;

        virtualinvoke $r7.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l8);

        specialinvoke r0.<libcore.util.ZoneInfo$WallTime: void copyFieldsFromCalendar()>();

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = b2;

        r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds> = i1;

     label5:
        goto label7;

     label6:
        $r6 := @caughtexception;

     label7:
        return;

        catch libcore.util.ZoneInfo$CheckedArithmeticException from label1 to label5 with label6;
    }

    public int mktime(libcore.util.ZoneInfo)
    {
        libcore.util.ZoneInfo$WallTime r0;
        libcore.util.ZoneInfo r1;
        long l0, $l7;
        int i1, i2, i3, i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.Integer r2, r6;
        java.util.GregorianCalendar $r3;
        byte $b8, $b9, $b17;
        int[] $r4;
        libcore.util.ZoneInfo$CheckedArithmeticException $r5;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        r1 := @parameter0: libcore.util.ZoneInfo;

        $i5 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i5 <= 0 goto label01;

        $b17 = 1;

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = 1;

        goto label03;

     label01:
        $i6 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i6 >= 0 goto label02;

        $b17 = -1;

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = -1;

        goto label03;

     label02:
        $b17 = 0;

     label03:
        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = $b17;

        specialinvoke r0.<libcore.util.ZoneInfo$WallTime: void copyFieldsToCalendar()>();

        $r3 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $l7 = virtualinvoke $r3.<java.util.GregorianCalendar: long getTimeInMillis()>();

        l0 = $l7 / 1000L;

        $b8 = -2147483648L cmp l0;

        if $b8 > 0 goto label04;

        $b9 = l0 cmp 2147483647L;

        if $b9 <= 0 goto label05;

     label04:
        return -1;

     label05:
        i1 = (int) l0;

        $i10 = staticinvoke <libcore.util.ZoneInfo: int access$000(libcore.util.ZoneInfo)>(r1);

        i2 = $i10 / 1000;

        i3 = staticinvoke <libcore.util.ZoneInfo: int access$600(int,int)>(i1, i2);

        $r4 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r1);

        $i11 = lengthof $r4;

        if $i11 != 0 goto label09;

        $i14 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i14 <= 0 goto label07;

     label06:
        return -1;

     label07:
        specialinvoke r0.<libcore.util.ZoneInfo$WallTime: void copyFieldsFromCalendar()>();

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = 0;

        r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds> = i2;

     label08:
        return i3;

     label09:
        i4 = staticinvoke <libcore.util.ZoneInfo$WallTime: int findTransitionIndex(libcore.util.ZoneInfo,int)>(r1, i3);

        $i12 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i12 >= 0 goto label12;

        r2 = specialinvoke r0.<libcore.util.ZoneInfo$WallTime: java.lang.Integer doWallTimeSearch(libcore.util.ZoneInfo,int,int,boolean)>(r1, i4, i1, 1);

        if r2 != null goto label10;

        $i15 = -1;

        goto label11;

     label10:
        $i15 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

     label11:
        return $i15;

     label12:
        r6 = specialinvoke r0.<libcore.util.ZoneInfo$WallTime: java.lang.Integer doWallTimeSearch(libcore.util.ZoneInfo,int,int,boolean)>(r1, i4, i1, 1);

        if r6 != null goto label13;

        r6 = specialinvoke r0.<libcore.util.ZoneInfo$WallTime: java.lang.Integer doWallTimeSearch(libcore.util.ZoneInfo,int,int,boolean)>(r1, i4, i1, 0);

     label13:
        if r6 != null goto label14;

        r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

     label14:
        $i13 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

     label15:
        return $i13;

     label16:
        $r5 := @caughtexception;

        return -1;

        catch libcore.util.ZoneInfo$CheckedArithmeticException from label05 to label06 with label16;
        catch libcore.util.ZoneInfo$CheckedArithmeticException from label07 to label08 with label16;
        catch libcore.util.ZoneInfo$CheckedArithmeticException from label09 to label11 with label16;
        catch libcore.util.ZoneInfo$CheckedArithmeticException from label12 to label15 with label16;
    }

    private java.lang.Integer tryOffsetAdjustments(libcore.util.ZoneInfo, int, libcore.util.ZoneInfo$OffsetInterval, int, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        libcore.util.ZoneInfo$WallTime r0;
        libcore.util.ZoneInfo r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i16;
        libcore.util.ZoneInfo$OffsetInterval r2;
        int[] r3;
        boolean $z0;
        long $l13, $l14, $l15;
        java.util.GregorianCalendar $r4;
        java.lang.Integer $r5;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        r1 := @parameter0: libcore.util.ZoneInfo;

        i0 := @parameter1: int;

        r2 := @parameter2: libcore.util.ZoneInfo$OffsetInterval;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 = staticinvoke <libcore.util.ZoneInfo$WallTime: int[] getOffsetsOfType(libcore.util.ZoneInfo,int,int)>(r1, i1, i2);

        i3 = 0;

     label1:
        $i10 = lengthof r3;

        if i3 >= $i10 goto label3;

        $i12 = staticinvoke <libcore.util.ZoneInfo: int access$000(libcore.util.ZoneInfo)>(r1);

        i4 = $i12 / 1000;

        $i11 = r3[i3];

        i5 = i4 + $i11;

        i6 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getTotalOffsetSeconds()>();

        i7 = i6 - i5;

        i8 = staticinvoke <libcore.util.ZoneInfo: int access$500(int,int)>(i0, i7);

        $l13 = (long) i8;

        $z0 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: boolean containsWallTime(long)>($l13);

        if $z0 == 0 goto label2;

        i9 = staticinvoke <libcore.util.ZoneInfo: int access$600(int,int)>(i8, i6);

        $r4 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $l14 = (long) i8;

        $l15 = $l14 * 1000L;

        virtualinvoke $r4.<java.util.GregorianCalendar: void setTimeInMillis(long)>($l15);

        specialinvoke r0.<libcore.util.ZoneInfo$WallTime: void copyFieldsFromCalendar()>();

        $i16 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getIsDst()>();

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = $i16;

        r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds> = i6;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        return $r5;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return null;
    }

    private static int[] getOffsetsOfType(libcore.util.ZoneInfo, int, int)
    {
        libcore.util.ZoneInfo r0;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i10, $i11, $i12, $i13;
        int[] r1, $r3, $r4, $r7, r9;
        boolean[] r2;
        boolean z0, z1, $z2;
        byte b5, $b9;
        byte[] $r5, $r6, $r8;

        r0 := @parameter0: libcore.util.ZoneInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r3 = staticinvoke <libcore.util.ZoneInfo: int[] access$300(libcore.util.ZoneInfo)>(r0);

        $i6 = lengthof $r3;

        $i7 = $i6 + 1;

        r1 = newarray (int)[$i7];

        $r4 = staticinvoke <libcore.util.ZoneInfo: int[] access$300(libcore.util.ZoneInfo)>(r0);

        $i8 = lengthof $r4;

        r2 = newarray (boolean)[$i8];

        i2 = 0;

        i3 = 0;

        z0 = 0;

        z1 = 0;

     label1:
        i3 = i3 * -1;

        if i3 < 0 goto label2;

        i3 = i3 + 1;

     label2:
        i4 = i0 + i3;

        if i3 >= 0 goto label3;

        if i4 >= -1 goto label3;

        z1 = 1;

        goto label7;

     label3:
        if i3 <= 0 goto label4;

        $r8 = staticinvoke <libcore.util.ZoneInfo: byte[] access$200(libcore.util.ZoneInfo)>(r0);

        $i13 = lengthof $r8;

        if i4 < $i13 goto label4;

        z0 = 1;

        goto label7;

     label4:
        if i4 != -1 goto label5;

        if i1 != 0 goto label7;

        $i11 = i2;

        i2 = i2 + 1;

        r1[$i11] = 0;

        goto label7;

     label5:
        $r5 = staticinvoke <libcore.util.ZoneInfo: byte[] access$200(libcore.util.ZoneInfo)>(r0);

        b5 = $r5[i4];

        $z2 = r2[b5];

        if $z2 != 0 goto label7;

        $r6 = staticinvoke <libcore.util.ZoneInfo: byte[] access$400(libcore.util.ZoneInfo)>(r0);

        $b9 = $r6[b5];

        if $b9 != i1 goto label6;

        $i10 = i2;

        i2 = i2 + 1;

        $r7 = staticinvoke <libcore.util.ZoneInfo: int[] access$300(libcore.util.ZoneInfo)>(r0);

        $i12 = $r7[b5];

        r1[$i10] = $i12;

     label6:
        r2[b5] = 1;

     label7:
        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        r9 = newarray (int)[i2];

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, 0, r9, 0, i2);

        return r9;
    }

    private java.lang.Integer doWallTimeSearch(libcore.util.ZoneInfo, int, int, boolean) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        libcore.util.ZoneInfo$WallTime r0;
        libcore.util.ZoneInfo r1;
        int i0, i1, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i12, $i21, $i22, $i23, $i24, i25;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        libcore.util.ZoneInfo$OffsetInterval r2;
        long $l11, $l13, $l14, $l16, $l17, $l19, $l20;
        byte $b15, $b18;
        java.lang.Integer $r3, r4;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        r1 := @parameter0: libcore.util.ZoneInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 = 0;

        z2 = 0;

        i3 = 0;

     label01:
        $i8 = i3 + 1;

        i4 = $i8 / 2;

        $i9 = i3 % 2;

        if $i9 != 1 goto label02;

        i4 = i4 * -1;

     label02:
        i3 = i3 + 1;

        if i4 <= 0 goto label03;

        if z1 != 0 goto label19;

     label03:
        if i4 >= 0 goto label04;

        if z2 == 0 goto label04;

        goto label19;

     label04:
        i5 = i0 + i4;

        r2 = staticinvoke <libcore.util.ZoneInfo$OffsetInterval: libcore.util.ZoneInfo$OffsetInterval create(libcore.util.ZoneInfo,int)>(r1, i5);

        if r2 != null goto label09;

        if i4 <= 0 goto label05;

        $z7 = 1;

        goto label06;

     label05:
        $z7 = 0;

     label06:
        z1 = z1 | $z7;

        if i4 >= 0 goto label07;

        $z6 = 1;

        goto label08;

     label07:
        $z6 = 0;

     label08:
        z2 = z2 | $z6;

        goto label19;

     label09:
        if z0 == 0 goto label11;

        $l20 = (long) i1;

        $z5 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: boolean containsWallTime(long)>($l20);

        if $z5 == 0 goto label12;

        $i22 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i22 == -1 goto label10;

        $i24 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getIsDst()>();

        $i23 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        if $i24 != $i23 goto label12;

     label10:
        i6 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getTotalOffsetSeconds()>();

        i7 = staticinvoke <libcore.util.ZoneInfo: int access$600(int,int)>(i1, i6);

        specialinvoke r0.<libcore.util.ZoneInfo$WallTime: void copyFieldsFromCalendar()>();

        $i21 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getIsDst()>();

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = $i21;

        r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds> = i6;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        return $r3;

     label11:
        $i10 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        $i12 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: int getIsDst()>();

        if $i10 == $i12 goto label12;

        i25 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        r4 = specialinvoke r0.<libcore.util.ZoneInfo$WallTime: java.lang.Integer tryOffsetAdjustments(libcore.util.ZoneInfo,int,libcore.util.ZoneInfo$OffsetInterval,int,int)>(r1, i1, r2, i5, i25);

        if r4 == null goto label12;

        return r4;

     label12:
        if i4 <= 0 goto label16;

        $l17 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: long getEndWallTimeSeconds()>();

        $l16 = (long) i1;

        $l19 = $l17 - $l16;

        $b18 = $l19 cmp 86400L;

        if $b18 <= 0 goto label13;

        $z4 = 1;

        goto label14;

     label13:
        $z4 = 0;

     label14:
        z8 = $z4;

        if z8 == 0 goto label15;

        z1 = 1;

     label15:
        goto label19;

     label16:
        if i4 >= 0 goto label19;

        $l11 = (long) i1;

        $l14 = virtualinvoke r2.<libcore.util.ZoneInfo$OffsetInterval: long getStartWallTimeSeconds()>();

        $l13 = $l11 - $l14;

        $b15 = $l13 cmp 86400L;

        if $b15 < 0 goto label17;

        $z3 = 1;

        goto label18;

     label17:
        $z3 = 0;

     label18:
        z9 = $z3;

        if z9 == 0 goto label19;

        z2 = 1;

     label19:
        if z1 == 0 goto label01;

        if z2 == 0 goto label01;

        return null;
    }

    public void setYear(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int year> = i0;

        return;
    }

    public void setMonth(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int month> = i0;

        return;
    }

    public void setMonthDay(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int monthDay> = i0;

        return;
    }

    public void setHour(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int hour> = i0;

        return;
    }

    public void setMinute(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int minute> = i0;

        return;
    }

    public void setSecond(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int second> = i0;

        return;
    }

    public void setWeekDay(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int weekDay> = i0;

        return;
    }

    public void setYearDay(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int yearDay> = i0;

        return;
    }

    public void setIsDst(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int isDst> = i0;

        return;
    }

    public void setGmtOffset(int)
    {
        libcore.util.ZoneInfo$WallTime r0;
        int i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        i0 := @parameter0: int;

        r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds> = i0;

        return;
    }

    public int getYear()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int year>;

        return $i0;
    }

    public int getMonth()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int month>;

        return $i0;
    }

    public int getMonthDay()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int monthDay>;

        return $i0;
    }

    public int getHour()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int hour>;

        return $i0;
    }

    public int getMinute()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int minute>;

        return $i0;
    }

    public int getSecond()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int second>;

        return $i0;
    }

    public int getWeekDay()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int weekDay>;

        return $i0;
    }

    public int getYearDay()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int yearDay>;

        return $i0;
    }

    public int getGmtOffset()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int gmtOffsetSeconds>;

        return $i0;
    }

    public int getIsDst()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int isDst>;

        return $i0;
    }

    private void copyFieldsToCalendar()
    {
        libcore.util.ZoneInfo$WallTime r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.GregorianCalendar $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $r1 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i0 = r0.<libcore.util.ZoneInfo$WallTime: int year>;

        virtualinvoke $r1.<java.util.GregorianCalendar: void set(int,int)>(1, $i0);

        $r2 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i1 = r0.<libcore.util.ZoneInfo$WallTime: int month>;

        virtualinvoke $r2.<java.util.GregorianCalendar: void set(int,int)>(2, $i1);

        $r3 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i2 = r0.<libcore.util.ZoneInfo$WallTime: int monthDay>;

        virtualinvoke $r3.<java.util.GregorianCalendar: void set(int,int)>(5, $i2);

        $r4 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i3 = r0.<libcore.util.ZoneInfo$WallTime: int hour>;

        virtualinvoke $r4.<java.util.GregorianCalendar: void set(int,int)>(11, $i3);

        $r5 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i4 = r0.<libcore.util.ZoneInfo$WallTime: int minute>;

        virtualinvoke $r5.<java.util.GregorianCalendar: void set(int,int)>(12, $i4);

        $r6 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i5 = r0.<libcore.util.ZoneInfo$WallTime: int second>;

        virtualinvoke $r6.<java.util.GregorianCalendar: void set(int,int)>(13, $i5);

        return;
    }

    private void copyFieldsFromCalendar()
    {
        libcore.util.ZoneInfo$WallTime r0;
        java.util.GregorianCalendar $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: libcore.util.ZoneInfo$WallTime;

        $r1 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i0 = virtualinvoke $r1.<java.util.GregorianCalendar: int get(int)>(1);

        r0.<libcore.util.ZoneInfo$WallTime: int year> = $i0;

        $r2 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i1 = virtualinvoke $r2.<java.util.GregorianCalendar: int get(int)>(2);

        r0.<libcore.util.ZoneInfo$WallTime: int month> = $i1;

        $r3 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i2 = virtualinvoke $r3.<java.util.GregorianCalendar: int get(int)>(5);

        r0.<libcore.util.ZoneInfo$WallTime: int monthDay> = $i2;

        $r4 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i3 = virtualinvoke $r4.<java.util.GregorianCalendar: int get(int)>(11);

        r0.<libcore.util.ZoneInfo$WallTime: int hour> = $i3;

        $r5 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i4 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(12);

        r0.<libcore.util.ZoneInfo$WallTime: int minute> = $i4;

        $r6 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i5 = virtualinvoke $r6.<java.util.GregorianCalendar: int get(int)>(13);

        r0.<libcore.util.ZoneInfo$WallTime: int second> = $i5;

        $r7 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i6 = virtualinvoke $r7.<java.util.GregorianCalendar: int get(int)>(7);

        $i7 = $i6 - 1;

        r0.<libcore.util.ZoneInfo$WallTime: int weekDay> = $i7;

        $r8 = r0.<libcore.util.ZoneInfo$WallTime: java.util.GregorianCalendar calendar>;

        $i8 = virtualinvoke $r8.<java.util.GregorianCalendar: int get(int)>(6);

        $i9 = $i8 - 1;

        r0.<libcore.util.ZoneInfo$WallTime: int yearDay> = $i9;

        return;
    }

    private static int findTransitionIndex(libcore.util.ZoneInfo, int)
    {
        libcore.util.ZoneInfo r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @parameter0: libcore.util.ZoneInfo;

        i0 := @parameter1: int;

        $r1 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, i0);

        if i1 >= 0 goto label1;

        $i2 = i1 ^ -1;

        i1 = $i2 - 1;

     label1:
        return i1;
    }
}
