public abstract class java.util.concurrent.ForkJoinTask extends java.lang.Object implements java.util.concurrent.Future, java.io.Serializable
{
    volatile int status;
    static final int DONE_MASK;
    static final int NORMAL;
    static final int CANCELLED;
    static final int EXCEPTIONAL;
    static final int SIGNAL;
    static final int SMASK;
    private static final java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable;
    private static final java.util.concurrent.locks.ReentrantLock exceptionTableLock;
    private static final java.lang.ref.ReferenceQueue exceptionTableRefQueue;
    private static final int EXCEPTION_MAP_CAPACITY;
    private static final long serialVersionUID;
    private static final sun.misc.Unsafe U;
    private static final long STATUS;

    public void <init>()
    {
        java.util.concurrent.ForkJoinTask r0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private int setCompletion(int)
    {
        java.util.concurrent.ForkJoinTask r0, r1;
        int i0, i1, $i2, $i3, $i5;
        java.lang.Throwable r2, $r5;
        long $l4;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        i0 := @parameter0: int;

     label1:
        $i2 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i1 = $i2;

        if $i2 >= 0 goto label2;

        return i1;

     label2:
        $r3 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l4 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i3 = i1 | i0;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l4, i1, $i3);

        if $z0 == 0 goto label1;

        $i5 = i1 >>> 16;

        if $i5 == 0 goto label7;

        r1 = r0;

        entermonitor r0;

     label3:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r1;

     label6:
        throw r2;

     label7:
        return i0;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    final int doExec()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2;
        boolean z0;
        java.lang.Throwable r1, $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i1;

        if $i1 < 0 goto label5;

     label1:
        z0 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: boolean exec()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $i2 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setExceptionalCompletion(java.lang.Throwable)>(r1);

        return $i2;

     label4:
        if z0 == 0 goto label5;

        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setCompletion(int)>(-268435456);

     label5:
        return i0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    final boolean trySetSignal()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1;
        long $l2;
        sun.misc.Unsafe $r1;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if i0 < 0 goto label1;

        $r1 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l2 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i1 = i0 | 65536;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l2, i0, $i1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private int externalAwaitDone()
    {
        java.util.concurrent.ForkJoinTask r0, r2;
        int i0, $i1, $i2, $i3, $i5, $i6;
        java.util.concurrent.ForkJoinPool r1;
        boolean z0, $z1, $z2, $z3;
        java.lang.Throwable r4, $r10;
        long $l4;
        sun.misc.Unsafe $r5;
        java.lang.Thread $r6;
        java.util.concurrent.CountedCompleter $r8;
        java.lang.InterruptedException $r9;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i1;

        if $i1 < 0 goto label14;

        if r1 == null goto label02;

        $z3 = r0 instanceof java.util.concurrent.CountedCompleter;

        if $z3 == 0 goto label01;

        $r8 = (java.util.concurrent.CountedCompleter) r0;

        i0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool: int externalHelpComplete(java.util.concurrent.CountedCompleter)>($r8);

        goto label02;

     label01:
        $z2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool: boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)>(r0);

        if $z2 == 0 goto label02;

        i0 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label02:
        if i0 < 0 goto label14;

        $i2 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i2;

        if $i2 < 0 goto label14;

        z0 = 0;

     label03:
        $r5 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l4 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i3 = i0 | 65536;

        $z1 = virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l4, i0, $i3);

        if $z1 == 0 goto label13;

        r2 = r0;

        entermonitor r0;

     label04:
        $i6 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i6 < 0 goto label08;

     label05:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label06:
        goto label09;

     label07:
        $r9 := @caughtexception;

        z0 = 1;

        goto label09;

     label08:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label09:
        exitmonitor r2;

     label10:
        goto label13;

     label11:
        $r10 := @caughtexception;

        r4 = $r10;

        exitmonitor r2;

     label12:
        throw r4;

     label13:
        $i5 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i5;

        if $i5 >= 0 goto label03;

        if z0 == 0 goto label14;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label14:
        return i0;

        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private int externalInterruptibleAwaitDone() throws java.lang.InterruptedException
    {
        java.util.concurrent.ForkJoinTask r0, r2;
        java.util.concurrent.ForkJoinPool r1;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2, $z3;
        int $i1, $i2, $i3, $i5, i8;
        long $l4;
        sun.misc.Unsafe $r4;
        java.util.concurrent.CountedCompleter $r6;
        java.lang.InterruptedException $r8;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label01;

        $r8 = new java.lang.InterruptedException;

        specialinvoke $r8.<java.lang.InterruptedException: void <init>()>();

        throw $r8;

     label01:
        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i1 < 0 goto label03;

        if r1 == null goto label03;

        $z2 = r0 instanceof java.util.concurrent.CountedCompleter;

        if $z2 == 0 goto label02;

        $r6 = (java.util.concurrent.CountedCompleter) r0;

        virtualinvoke r1.<java.util.concurrent.ForkJoinPool: int externalHelpComplete(java.util.concurrent.CountedCompleter)>($r6);

        goto label03;

     label02:
        $z3 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool: boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)>(r0);

        if $z3 == 0 goto label03;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label03:
        $i2 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i8 = $i2;

        if $i2 < 0 goto label11;

        $r4 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l4 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i3 = i8 | 65536;

        $z1 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l4, i8, $i3);

        if $z1 == 0 goto label03;

        r2 = r0;

        entermonitor r0;

     label04:
        $i5 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i5 < 0 goto label05;

        virtualinvoke r0.<java.lang.Object: void wait()>();

        goto label06;

     label05:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label06:
        exitmonitor r2;

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label09:
        throw r3;

     label10:
        goto label03;

     label11:
        return i8;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private int doJoin()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Thread r1, $r4;
        java.util.concurrent.ForkJoinWorkerThread r2, $r5;
        java.util.concurrent.ForkJoinPool$WorkQueue r3, $r6;
        boolean $z0, $z1;
        java.util.concurrent.ForkJoinPool $r7;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i1;

        if $i1 >= 0 goto label1;

        $i2 = i0;

        goto label4;

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = $r4;

        $z0 = $r4 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label3;

        $r5 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        r2 = $r5;

        $r6 = $r5.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        r3 = $r6;

        $z1 = virtualinvoke $r6.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryUnpush(java.util.concurrent.ForkJoinTask)>(r0);

        if $z1 == 0 goto label2;

        $i3 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

        i4 = $i3;

        if $i3 >= 0 goto label2;

        $i2 = i4;

        goto label4;

     label2:
        $r7 = r2.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $i2 = virtualinvoke $r7.<java.util.concurrent.ForkJoinPool: int awaitJoin(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r3, r0);

        goto label4;

     label3:
        $i2 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int externalAwaitDone()>();

     label4:
        return $i2;
    }

    private int doInvoke()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2;
        java.lang.Thread r1, $r3;
        java.util.concurrent.ForkJoinWorkerThread r2, $r4;
        boolean $z0;
        java.util.concurrent.ForkJoinPool$WorkQueue $r5;
        java.util.concurrent.ForkJoinPool $r6;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

        i0 = $i1;

        if $i1 >= 0 goto label1;

        $i2 = i0;

        goto label3;

     label1:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = $r3;

        $z0 = $r3 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label2;

        $r4 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        r2 = $r4;

        $r6 = $r4.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $r5 = r2.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $i2 = virtualinvoke $r6.<java.util.concurrent.ForkJoinPool: int awaitJoin(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>($r5, r0);

        goto label3;

     label2:
        $i2 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int externalAwaitDone()>();

     label3:
        return $i2;
    }

    final int recordExceptionalCompletion(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Throwable r1, r5, $r8;
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.ForkJoinTask$ExceptionNode[] r3;
        java.util.concurrent.ForkJoinTask$ExceptionNode r4, $r7, $r9;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.lang.Throwable;

        $i3 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i3;

        if $i3 < 0 goto label9;

        i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r2 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.locks.ReentrantLock exceptionTableLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        staticinvoke <java.util.concurrent.ForkJoinTask: void expungeStaleExceptions()>();

        r3 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable>;

        $i4 = lengthof r3;

        $i5 = $i4 - 1;

        i2 = i1 & $i5;

        r4 = r3[i2];

     label2:
        if r4 != null goto label3;

        $r7 = new java.util.concurrent.ForkJoinTask$ExceptionNode;

        $r9 = r3[i2];

        specialinvoke $r7.<java.util.concurrent.ForkJoinTask$ExceptionNode: void <init>(java.util.concurrent.ForkJoinTask,java.lang.Throwable,java.util.concurrent.ForkJoinTask$ExceptionNode)>(r0, r1, $r9);

        r3[i2] = $r7;

        goto label5;

     label3:
        $r6 = virtualinvoke r4.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Object get()>();

        if $r6 != r0 goto label4;

        goto label5;

     label4:
        r4 = r4.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next>;

        goto label2;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label8;

     label6:
        $r8 := @caughtexception;

        r5 = $r8;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

     label8:
        i0 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setCompletion(int)>(-2147483648);

     label9:
        return i0;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private int setExceptionalCompletion(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Throwable r1;
        int i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.lang.Throwable;

        i0 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int recordExceptionalCompletion(java.lang.Throwable)>(r1);

        $i1 = i0 & -268435456;

        if $i1 != -2147483648 goto label1;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: void internalPropagateException(java.lang.Throwable)>(r1);

     label1:
        return i0;
    }

    void internalPropagateException(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.lang.Throwable;

        return;
    }

    static final void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0;
        java.lang.Throwable $r2;

        r0 := @parameter0: java.util.concurrent.ForkJoinTask;

        if r0 == null goto label4;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i0 < 0 goto label4;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: boolean cancel(boolean)>(0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void clearExceptionalCompletion()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, i1, $i2, $i3;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.ForkJoinTask$ExceptionNode[] r2;
        java.util.concurrent.ForkJoinTask$ExceptionNode r3, r4, r5;
        java.lang.Throwable r6, $r8;
        java.lang.Object $r7;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r1 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.locks.ReentrantLock exceptionTableLock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        r2 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable>;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        i1 = i0 & $i3;

        r3 = r2[i1];

        r4 = null;

     label2:
        if r3 == null goto label5;

        r5 = r3.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next>;

        $r7 = virtualinvoke r3.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Object get()>();

        if $r7 != r0 goto label4;

        if r4 != null goto label3;

        r2[i1] = r5;

        goto label5;

     label3:
        r4.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next> = r5;

        goto label5;

     label4:
        r4 = r3;

        r3 = r5;

        goto label2;

     label5:
        staticinvoke <java.util.concurrent.ForkJoinTask: void expungeStaleExceptions()>();

        r0.<java.util.concurrent.ForkJoinTask: int status> = 0;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label9;

     label7:
        $r8 := @caughtexception;

        r6 = $r8;

     label8:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r6;

     label9:
        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    private java.lang.Throwable getThrowableException()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ForkJoinTask$ExceptionNode r1;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.ForkJoinTask$ExceptionNode[] r3;
        java.lang.Throwable r4, $r5, $r7, r8;
        java.lang.Object $r6;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        $i2 = $i1 & -268435456;

        if $i2 == -2147483648 goto label1;

        return null;

     label1:
        i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r2 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.locks.ReentrantLock exceptionTableLock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label2:
        staticinvoke <java.util.concurrent.ForkJoinTask: void expungeStaleExceptions()>();

        r3 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable>;

        $i3 = lengthof r3;

        $i4 = $i3 - 1;

        $i5 = i0 & $i4;

        r1 = r3[$i5];

     label3:
        if r1 == null goto label4;

        $r6 = virtualinvoke r1.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Object get()>();

        if $r6 == r0 goto label4;

        r1 = r1.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next>;

        goto label3;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label7;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label7:
        if r1 == null goto label8;

        $r5 = r1.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Throwable ex>;

        r8 = $r5;

        if $r5 != null goto label9;

     label8:
        return null;

     label9:
        return r8;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static void expungeStaleExceptions()
    {
        java.lang.ref.Reference r0, $r7;
        java.util.concurrent.ForkJoinTask r1;
        java.util.concurrent.ForkJoinTask$ExceptionNode[] r2;
        int i0, $i1, $i2, $i3;
        java.util.concurrent.ForkJoinTask$ExceptionNode r3, r4, r5, $r8;
        java.lang.ref.ReferenceQueue $r6;
        boolean $z0;
        java.lang.Object $r9;

     label1:
        $r6 = <java.util.concurrent.ForkJoinTask: java.lang.ref.ReferenceQueue exceptionTableRefQueue>;

        $r7 = virtualinvoke $r6.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r0 = $r7;

        if $r7 == null goto label6;

        $z0 = r0 instanceof java.util.concurrent.ForkJoinTask$ExceptionNode;

        if $z0 == 0 goto label1;

        $r8 = (java.util.concurrent.ForkJoinTask$ExceptionNode) r0;

        $r9 = virtualinvoke $r8.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.lang.Object get()>();

        r1 = (java.util.concurrent.ForkJoinTask) $r9;

        r2 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable>;

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r1);

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        i0 = $i1 & $i3;

        r3 = r2[i0];

        r4 = null;

     label2:
        if r3 == null goto label5;

        r5 = r3.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next>;

        if r3 != r0 goto label4;

        if r4 != null goto label3;

        r2[i0] = r5;

        goto label5;

     label3:
        r4.<java.util.concurrent.ForkJoinTask$ExceptionNode: java.util.concurrent.ForkJoinTask$ExceptionNode next> = r5;

        goto label5;

     label4:
        r4 = r3;

        r3 = r5;

        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    static final void helpExpungeStaleExceptions()
    {
        java.util.concurrent.locks.ReentrantLock r0;
        java.lang.Throwable r1, $r2;
        boolean $z0;

        r0 = <java.util.concurrent.ForkJoinTask: java.util.concurrent.locks.ReentrantLock exceptionTableLock>;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>();

        if $z0 == 0 goto label5;

     label1:
        staticinvoke <java.util.concurrent.ForkJoinTask: void expungeStaleExceptions()>();

     label2:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

     label4:
        virtualinvoke r0.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void rethrow(java.lang.Throwable)
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        if r0 == null goto label1;

        staticinvoke <java.util.concurrent.ForkJoinTask: void uncheckedThrow(java.lang.Throwable)>(r0);

     label1:
        return;
    }

    static void uncheckedThrow(java.lang.Throwable) throws java.lang.Throwable
    {
        java.lang.Throwable r0;

        r0 := @parameter0: java.lang.Throwable;

        throw r0;
    }

    private void reportException(int)
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0;
        java.lang.Throwable $r1;
        java.util.concurrent.CancellationException $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        i0 := @parameter0: int;

        if i0 != -1073741824 goto label1;

        $r2 = new java.util.concurrent.CancellationException;

        specialinvoke $r2.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r2;

     label1:
        if i0 != -2147483648 goto label2;

        $r1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>();

        staticinvoke <java.util.concurrent.ForkJoinTask: void rethrow(java.lang.Throwable)>($r1);

     label2:
        return;
    }

    public final java.util.concurrent.ForkJoinTask fork()
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Thread r1, $r2;
        boolean $z0;
        java.util.concurrent.ForkJoinPool $r3;
        java.util.concurrent.ForkJoinWorkerThread $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue $r5;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r4 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        $r5 = $r4.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke $r5.<java.util.concurrent.ForkJoinPool$WorkQueue: void push(java.util.concurrent.ForkJoinTask)>(r0);

        goto label2;

     label1:
        $r3 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        virtualinvoke $r3.<java.util.concurrent.ForkJoinPool: void externalPush(java.util.concurrent.ForkJoinTask)>(r0);

     label2:
        return r0;
    }

    public final java.lang.Object join()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        $i2 = $i1 & -268435456;

        i0 = $i2;

        if $i2 == -268435456 goto label1;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void reportException(int)>(i0);

     label1:
        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Object getRawResult()>();

        return $r1;
    }

    public final java.lang.Object invoke()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doInvoke()>();

        $i2 = $i1 & -268435456;

        i0 = $i2;

        if $i2 == -268435456 goto label1;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void reportException(int)>(i0);

     label1:
        $r1 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Object getRawResult()>();

        return $r1;
    }

    public static void invokeAll(java.util.concurrent.ForkJoinTask, java.util.concurrent.ForkJoinTask)
    {
        java.util.concurrent.ForkJoinTask r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.util.concurrent.ForkJoinTask;

        r1 := @parameter1: java.util.concurrent.ForkJoinTask;

        virtualinvoke r1.<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask fork()>();

        $i2 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doInvoke()>();

        $i3 = $i2 & -268435456;

        i0 = $i3;

        if $i3 == -268435456 goto label1;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void reportException(int)>(i0);

     label1:
        $i4 = specialinvoke r1.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        $i5 = $i4 & -268435456;

        i1 = $i5;

        if $i5 == -268435456 goto label2;

        specialinvoke r1.<java.util.concurrent.ForkJoinTask: void reportException(int)>(i1);

     label2:
        return;
    }

    public static transient void invokeAll(java.util.concurrent.ForkJoinTask[])
    {
        java.util.concurrent.ForkJoinTask[] r0;
        java.lang.Throwable r1;
        int i0, i1, $i2, $i3, $i4, i5;
        java.util.concurrent.ForkJoinTask r2, r5;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.util.concurrent.ForkJoinTask[];

        r1 = null;

        $i2 = lengthof r0;

        i0 = $i2 - 1;

        i1 = i0;

     label01:
        if i1 < 0 goto label05;

        r2 = r0[i1];

        if r2 != null goto label02;

        if r1 != null goto label04;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        r1 = $r4;

        goto label04;

     label02:
        if i1 == 0 goto label03;

        virtualinvoke r2.<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask fork()>();

        goto label04;

     label03:
        $i4 = specialinvoke r2.<java.util.concurrent.ForkJoinTask: int doInvoke()>();

        if $i4 >= -268435456 goto label04;

        if r1 != null goto label04;

        r1 = virtualinvoke r2.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>();

     label04:
        i1 = i1 + -1;

        goto label01;

     label05:
        i5 = 1;

     label06:
        if i5 > i0 goto label09;

        r5 = r0[i5];

        if r5 == null goto label08;

        if r1 == null goto label07;

        virtualinvoke r5.<java.util.concurrent.ForkJoinTask: boolean cancel(boolean)>(0);

        goto label08;

     label07:
        $i3 = specialinvoke r5.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        if $i3 >= -268435456 goto label08;

        r1 = virtualinvoke r5.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>();

     label08:
        i5 = i5 + 1;

        goto label06;

     label09:
        if r1 == null goto label10;

        staticinvoke <java.util.concurrent.ForkJoinTask: void rethrow(java.lang.Throwable)>(r1);

     label10:
        return;
    }

    public static java.util.Collection invokeAll(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.List r1;
        java.lang.Throwable r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.util.concurrent.ForkJoinTask r3, r11;
        boolean $z0, $z1;
        java.util.concurrent.ForkJoinTask[] $r4, $r6;
        java.lang.Object[] $r5;
        java.lang.Object $r7, $r8;
        java.lang.NullPointerException $r9;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 == 0 goto label01;

        $z1 = r0 instanceof java.util.List;

        if $z1 != 0 goto label02;

     label01:
        $i2 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r4 = newarray (java.util.concurrent.ForkJoinTask)[$i2];

        $r5 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.util.concurrent.ForkJoinTask[]) $r5;

        staticinvoke <java.util.concurrent.ForkJoinTask: void invokeAll(java.util.concurrent.ForkJoinTask[])>($r6);

        return r0;

     label02:
        r1 = (java.util.List) r0;

        r2 = null;

        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        i0 = $i3 - 1;

        i1 = i0;

     label03:
        if i1 < 0 goto label07;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        r3 = (java.util.concurrent.ForkJoinTask) $r8;

        if r3 != null goto label04;

        if r2 != null goto label06;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        r2 = $r9;

        goto label06;

     label04:
        if i1 == 0 goto label05;

        virtualinvoke r3.<java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask fork()>();

        goto label06;

     label05:
        $i5 = specialinvoke r3.<java.util.concurrent.ForkJoinTask: int doInvoke()>();

        if $i5 >= -268435456 goto label06;

        if r2 != null goto label06;

        r2 = virtualinvoke r3.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>();

     label06:
        i1 = i1 + -1;

        goto label03;

     label07:
        i6 = 1;

     label08:
        if i6 > i0 goto label11;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i6);

        r11 = (java.util.concurrent.ForkJoinTask) $r7;

        if r11 == null goto label10;

        if r2 == null goto label09;

        virtualinvoke r11.<java.util.concurrent.ForkJoinTask: boolean cancel(boolean)>(0);

        goto label10;

     label09:
        $i4 = specialinvoke r11.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        if $i4 >= -268435456 goto label10;

        r2 = virtualinvoke r11.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>();

     label10:
        i6 = i6 + 1;

        goto label08;

     label11:
        if r2 == null goto label12;

        staticinvoke <java.util.concurrent.ForkJoinTask: void rethrow(java.lang.Throwable)>(r2);

     label12:
        return r0;
    }

    public boolean cancel(boolean)
    {
        java.util.concurrent.ForkJoinTask r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setCompletion(int)>(-1073741824);

        $i1 = $i0 & -268435456;

        if $i1 != -1073741824 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final boolean isDone()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isCancelled()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        $i1 = $i0 & -268435456;

        if $i1 != -1073741824 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isCompletedAbnormally()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i0 >= -268435456 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean isCompletedNormally()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        $i1 = $i0 & -268435456;

        if $i1 != -268435456 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.Throwable getException()
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1;
        java.lang.Throwable $r1;
        java.util.concurrent.CancellationException r2;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i1 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i0 = $i1 & -268435456;

        if i0 < -268435456 goto label1;

        $r1 = null;

        goto label3;

     label1:
        if i0 != -1073741824 goto label2;

        r2 = new java.util.concurrent.CancellationException;

        $r1 = r2;

        specialinvoke r2.<java.util.concurrent.CancellationException: void <init>()>();

        goto label3;

     label2:
        $r1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>();

     label3:
        return $r1;
    }

    public void completeExceptionally(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Throwable r1, $r2;
        boolean $z0, $z1;
        java.lang.RuntimeException r3;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.lang.Throwable;

        $z0 = r1 instanceof java.lang.RuntimeException;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

     label1:
        $r2 = r1;

        goto label3;

     label2:
        r3 = new java.lang.RuntimeException;

        $r2 = r3;

        specialinvoke r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r1);

     label3:
        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setExceptionalCompletion(java.lang.Throwable)>($r2);

        return;
    }

    public void complete(java.lang.Object)
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.lang.Object;

     label1:
        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: void setRawResult(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setExceptionalCompletion(java.lang.Throwable)>(r2);

        return;

     label4:
        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setCompletion(int)>(-268435456);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void quietlyComplete()
    {
        java.util.concurrent.ForkJoinTask r0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setCompletion(int)>(-268435456);

        return;
    }

    public final java.lang.Object get() throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.ForkJoinTask r0;
        int i0, $i1, $i2, i3;
        java.lang.Throwable r1, $r4;
        java.lang.Thread $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.concurrent.ExecutionException $r5;
        java.util.concurrent.CancellationException $r6;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $i1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        goto label2;

     label1:
        $i1 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: int externalInterruptibleAwaitDone()>();

     label2:
        i0 = $i1;

        $i2 = i0 & -268435456;

        i3 = $i2;

        if $i2 != -1073741824 goto label3;

        $r6 = new java.util.concurrent.CancellationException;

        specialinvoke $r6.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r6;

     label3:
        if i3 != -2147483648 goto label4;

        $r4 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>();

        r1 = $r4;

        if $r4 == null goto label4;

        $r5 = new java.util.concurrent.ExecutionException;

        specialinvoke $r5.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r1);

        throw $r5;

     label4:
        $r3 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Object getRawResult()>();

        return $r3;
    }

    public final java.lang.Object get(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.ForkJoinTask r0, r7;
        long l0, l2, l3, l4, $l7, $l10, $l12, $l15, $l17, $l18;
        java.util.concurrent.TimeUnit r1, $r18;
        int i1, $i5, $i6, $i9, $i14, $i16, $i19, $i20, i23;
        java.util.concurrent.ForkJoinPool r2, r3, $r16;
        java.util.concurrent.ForkJoinPool$WorkQueue r4;
        java.lang.Thread r5;
        java.util.concurrent.ForkJoinWorkerThread r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.lang.Throwable r8, r10, $r13, $r23, $r25, r26;
        java.lang.Object $r11;
        java.util.concurrent.ExecutionException $r12;
        java.util.concurrent.CancellationException $r14;
        java.util.concurrent.TimeoutException $r15;
        byte $b8, $b11, $b13;
        java.lang.InterruptedException $r17, $r21, $r24;
        sun.misc.Unsafe $r19;
        java.util.concurrent.CountedCompleter $r22;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z1 == 0 goto label01;

        $r21 = new java.lang.InterruptedException;

        specialinvoke $r21.<java.lang.InterruptedException: void <init>()>();

        throw $r21;

     label01:
        l3 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $i5 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i1 = $i5;

        if $i5 < 0 goto label25;

        $b8 = l3 cmp 0L;

        if $b8 <= 0 goto label25;

        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        l4 = $l7 + l3;

        r3 = null;

        r4 = null;

        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z2 = r5 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z2 == 0 goto label02;

        r6 = (java.util.concurrent.ForkJoinWorkerThread) r5;

        r3 = r6.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        r4 = r6.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool: void helpJoinOnce(java.util.concurrent.ForkJoinPool$WorkQueue,java.util.concurrent.ForkJoinTask)>(r4, r0);

        goto label04;

     label02:
        $r16 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        r2 = $r16;

        if $r16 == null goto label04;

        $z5 = r0 instanceof java.util.concurrent.CountedCompleter;

        if $z5 == 0 goto label03;

        $r22 = (java.util.concurrent.CountedCompleter) r0;

        virtualinvoke r2.<java.util.concurrent.ForkJoinPool: int externalHelpComplete(java.util.concurrent.CountedCompleter)>($r22);

        goto label04;

     label03:
        $z4 = virtualinvoke r2.<java.util.concurrent.ForkJoinPool: boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)>(r0);

        if $z4 == 0 goto label04;

        virtualinvoke r0.<java.util.concurrent.ForkJoinTask: int doExec()>();

     label04:
        z7 = 0;

        z0 = 0;

     label05:
        $i9 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i1 = $i9;

        if $i9 < 0 goto label20;

        if r4 == null goto label06;

        $i20 = r4.<java.util.concurrent.ForkJoinPool$WorkQueue: int qlock>;

        if $i20 >= 0 goto label06;

        staticinvoke <java.util.concurrent.ForkJoinTask: void cancelIgnoringExceptions(java.util.concurrent.ForkJoinTask)>(r0);

        goto label05;

     label06:
        if z7 != 0 goto label08;

        if r3 == null goto label07;

        $l18 = r3.<java.util.concurrent.ForkJoinPool: long ctl>;

        $z6 = virtualinvoke r3.<java.util.concurrent.ForkJoinPool: boolean tryCompensate(long)>($l18);

        if $z6 == 0 goto label05;

     label07:
        z7 = 1;

        goto label05;

     label08:
        $r18 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l10 = virtualinvoke $r18.<java.util.concurrent.TimeUnit: long toMillis(long)>(l3);

        l2 = $l10;

        $b11 = $l10 cmp 0L;

        if $b11 <= 0 goto label19;

        $r19 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l17 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i16 = i1 | 65536;

        $z3 = virtualinvoke $r19.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l17, i1, $i16);

        if $z3 == 0 goto label19;

        r7 = r0;

        entermonitor r0;

     label09:
        $i19 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        if $i19 < 0 goto label14;

     label10:
        virtualinvoke r0.<java.lang.Object: void wait(long)>(l2);

     label11:
        goto label15;

     label12:
        $r24 := @caughtexception;

        if r3 != null goto label13;

        z0 = 1;

     label13:
        goto label15;

     label14:
        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label15:
        exitmonitor r7;

     label16:
        goto label19;

     label17:
        $r25 := @caughtexception;

        r8 = $r25;

        exitmonitor r7;

     label18:
        throw r8;

     label19:
        $i14 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i1 = $i14;

        if $i14 < 0 goto label20;

        if z0 != 0 goto label20;

        $l15 = staticinvoke <java.lang.System: long nanoTime()>();

        $l12 = l4 - $l15;

        l3 = $l12;

        $b13 = $l12 cmp 0L;

        if $b13 > 0 goto label05;

        goto label20;

     label20:
        if r3 == null goto label24;

        if z7 == 0 goto label24;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

        goto label24;

     label21:
        $r23 := @caughtexception;

        r10 = $r23;

     label22:
        if r3 == null goto label23;

        if z7 == 0 goto label23;

        virtualinvoke r3.<java.util.concurrent.ForkJoinPool: void incrementActiveCount()>();

     label23:
        throw r10;

     label24:
        if z0 == 0 goto label25;

        $r17 = new java.lang.InterruptedException;

        specialinvoke $r17.<java.lang.InterruptedException: void <init>()>();

        throw $r17;

     label25:
        $i6 = i1 & -268435456;

        i23 = $i6;

        if $i6 == -268435456 goto label28;

        if i23 != -1073741824 goto label26;

        $r14 = new java.util.concurrent.CancellationException;

        specialinvoke $r14.<java.util.concurrent.CancellationException: void <init>()>();

        throw $r14;

     label26:
        if i23 == -2147483648 goto label27;

        $r15 = new java.util.concurrent.TimeoutException;

        specialinvoke $r15.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r15;

     label27:
        $r13 = specialinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getThrowableException()>();

        r26 = $r13;

        if $r13 == null goto label28;

        $r12 = new java.util.concurrent.ExecutionException;

        specialinvoke $r12.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r26);

        throw $r12;

     label28:
        $r11 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Object getRawResult()>();

        return $r11;

        catch java.lang.InterruptedException from label10 to label11 with label12;
        catch java.lang.Throwable from label09 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label05 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    public final void quietlyJoin()
    {
        java.util.concurrent.ForkJoinTask r0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doJoin()>();

        return;
    }

    public final void quietlyInvoke()
    {
        java.util.concurrent.ForkJoinTask r0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int doInvoke()>();

        return;
    }

    public static void helpQuiesce()
    {
        java.lang.Thread r0, $r2;
        java.util.concurrent.ForkJoinWorkerThread r1;
        boolean $z0;
        java.util.concurrent.ForkJoinPool$WorkQueue $r3;
        java.util.concurrent.ForkJoinPool $r4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        r1 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        $r4 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $r3 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke $r4.<java.util.concurrent.ForkJoinPool: void helpQuiescePool(java.util.concurrent.ForkJoinPool$WorkQueue)>($r3);

        goto label2;

     label1:
        staticinvoke <java.util.concurrent.ForkJoinPool: void quiesceCommonPool()>();

     label2:
        return;
    }

    public void reinitialize()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        $i1 = $i0 & -268435456;

        if $i1 != -2147483648 goto label1;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: void clearExceptionalCompletion()>();

        goto label2;

     label1:
        r0.<java.util.concurrent.ForkJoinTask: int status> = 0;

     label2:
        return;
    }

    public static java.util.concurrent.ForkJoinPool getPool()
    {
        java.lang.Thread r0;
        boolean $z0;
        java.util.concurrent.ForkJoinWorkerThread $r1;
        java.util.concurrent.ForkJoinPool $r2;

        r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = r0 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r1 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        $r2 = $r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        goto label2;

     label1:
        $r2 = null;

     label2:
        return $r2;
    }

    public static boolean inForkJoinPool()
    {
        java.lang.Thread $r0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = $r0 instanceof java.util.concurrent.ForkJoinWorkerThread;

        return $z0;
    }

    public boolean tryUnfork()
    {
        java.util.concurrent.ForkJoinTask r0;
        java.lang.Thread r1, $r2;
        boolean $z0, $z1;
        java.util.concurrent.ForkJoinPool $r3;
        java.util.concurrent.ForkJoinWorkerThread $r4;
        java.util.concurrent.ForkJoinPool$WorkQueue $r5;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r4 = (java.util.concurrent.ForkJoinWorkerThread) r1;

        $r5 = $r4.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $z1 = virtualinvoke $r5.<java.util.concurrent.ForkJoinPool$WorkQueue: boolean tryUnpush(java.util.concurrent.ForkJoinTask)>(r0);

        goto label2;

     label1:
        $r3 = <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool common>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.ForkJoinPool: boolean tryExternalUnpush(java.util.concurrent.ForkJoinTask)>(r0);

     label2:
        return $z1;
    }

    public static int getQueuedTaskCount()
    {
        java.lang.Thread r0, $r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        boolean $z0;
        int $i0;
        java.util.concurrent.ForkJoinWorkerThread $r3;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r3 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        r1 = $r3.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        goto label2;

     label1:
        r1 = staticinvoke <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue commonSubmitterQueue()>();

     label2:
        if r1 != null goto label3;

        $i0 = 0;

        goto label4;

     label3:
        $i0 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: int queueSize()>();

     label4:
        return $i0;
    }

    public static int getSurplusQueuedTaskCount()
    {
        int $i0;

        $i0 = staticinvoke <java.util.concurrent.ForkJoinPool: int getSurplusQueuedTaskCount()>();

        return $i0;
    }

    public abstract java.lang.Object getRawResult();

    protected abstract void setRawResult(java.lang.Object);

    protected abstract boolean exec();

    protected static java.util.concurrent.ForkJoinTask peekNextLocalTask()
    {
        java.lang.Thread r0, $r2;
        java.util.concurrent.ForkJoinPool$WorkQueue r1;
        boolean $z0;
        java.util.concurrent.ForkJoinTask $r3;
        java.util.concurrent.ForkJoinWorkerThread $r4;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r4 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        r1 = $r4.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        goto label2;

     label1:
        r1 = staticinvoke <java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue commonSubmitterQueue()>();

     label2:
        if r1 != null goto label3;

        $r3 = null;

        goto label4;

     label3:
        $r3 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask peek()>();

     label4:
        return $r3;
    }

    protected static java.util.concurrent.ForkJoinTask pollNextLocalTask()
    {
        java.lang.Thread r0, $r1;
        boolean $z0;
        java.util.concurrent.ForkJoinWorkerThread $r2;
        java.util.concurrent.ForkJoinPool$WorkQueue $r3;
        java.util.concurrent.ForkJoinTask $r4;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r1;

        $z0 = $r1 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r2 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        $r3 = $r2.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ForkJoinPool$WorkQueue: java.util.concurrent.ForkJoinTask nextLocalTask()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    protected static java.util.concurrent.ForkJoinTask pollTask()
    {
        java.lang.Thread r0, $r2;
        java.util.concurrent.ForkJoinWorkerThread r1, $r3;
        boolean $z0;
        java.util.concurrent.ForkJoinPool$WorkQueue $r4;
        java.util.concurrent.ForkJoinPool $r5;
        java.util.concurrent.ForkJoinTask $r6;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = $r2;

        $z0 = $r2 instanceof java.util.concurrent.ForkJoinWorkerThread;

        if $z0 == 0 goto label1;

        $r3 = (java.util.concurrent.ForkJoinWorkerThread) r0;

        r1 = $r3;

        $r5 = $r3.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $r4 = r1.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinTask nextTaskFor(java.util.concurrent.ForkJoinPool$WorkQueue)>($r4);

        goto label2;

     label1:
        $r6 = null;

     label2:
        return $r6;
    }

    public final short getForkJoinTaskTag()
    {
        java.util.concurrent.ForkJoinTask r0;
        int $i0;
        short $s1;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        $i0 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        $s1 = (short) $i0;

        return $s1;
    }

    public final short setForkJoinTaskTag(short)
    {
        java.util.concurrent.ForkJoinTask r0;
        short s0, $s7;
        int i1, $i2, $i3, $i4, $i5;
        long $l6;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        s0 := @parameter0: short;

     label1:
        $r1 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i2 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i1 = $i2;

        $i4 = i1 & -65536;

        $i3 = s0 & 65535;

        $i5 = $i4 | $i3;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l6, $i2, $i5);

        if $z0 == 0 goto label1;

        $s7 = (short) i1;

        return $s7;
    }

    public final boolean compareAndSetForkJoinTaskTag(short, short)
    {
        java.util.concurrent.ForkJoinTask r0;
        short s0, s1, $s4;
        int i2, $i3, $i5, $i6, $i7;
        long $l8;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

     label1:
        $i3 = r0.<java.util.concurrent.ForkJoinTask: int status>;

        i2 = $i3;

        $s4 = (short) $i3;

        if $s4 == s0 goto label2;

        return 0;

     label2:
        $r1 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $l8 = <java.util.concurrent.ForkJoinTask: long STATUS>;

        $i6 = i2 & -65536;

        $i5 = s1 & 65535;

        $i7 = $i6 | $i5;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l8, i2, $i7);

        if $z0 == 0 goto label1;

        return 1;
    }

    public static java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable)
    {
        java.lang.Runnable r0;
        java.util.concurrent.ForkJoinTask$AdaptedRunnableAction $r1;

        r0 := @parameter0: java.lang.Runnable;

        $r1 = new java.util.concurrent.ForkJoinTask$AdaptedRunnableAction;

        specialinvoke $r1.<java.util.concurrent.ForkJoinTask$AdaptedRunnableAction: void <init>(java.lang.Runnable)>(r0);

        return $r1;
    }

    public static java.util.concurrent.ForkJoinTask adapt(java.lang.Runnable, java.lang.Object)
    {
        java.lang.Runnable r0;
        java.lang.Object r1;
        java.util.concurrent.ForkJoinTask$AdaptedRunnable $r2;

        r0 := @parameter0: java.lang.Runnable;

        r1 := @parameter1: java.lang.Object;

        $r2 = new java.util.concurrent.ForkJoinTask$AdaptedRunnable;

        specialinvoke $r2.<java.util.concurrent.ForkJoinTask$AdaptedRunnable: void <init>(java.lang.Runnable,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static java.util.concurrent.ForkJoinTask adapt(java.util.concurrent.Callable)
    {
        java.util.concurrent.Callable r0;
        java.util.concurrent.ForkJoinTask$AdaptedCallable $r1;

        r0 := @parameter0: java.util.concurrent.Callable;

        $r1 = new java.util.concurrent.ForkJoinTask$AdaptedCallable;

        specialinvoke $r1.<java.util.concurrent.ForkJoinTask$AdaptedCallable: void <init>(java.util.concurrent.Callable)>(r0);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.ForkJoinTask r0;
        java.io.ObjectOutputStream r1;
        java.lang.Throwable $r2;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = virtualinvoke r0.<java.util.concurrent.ForkJoinTask: java.lang.Throwable getException()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.ForkJoinTask r0;
        java.io.ObjectInputStream r1;
        java.lang.Object r2;
        java.lang.Throwable $r3;

        r0 := @this: java.util.concurrent.ForkJoinTask;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if r2 == null goto label1;

        $r3 = (java.lang.Throwable) r2;

        specialinvoke r0.<java.util.concurrent.ForkJoinTask: int setExceptionalCompletion(java.lang.Throwable)>($r3);

     label1:
        return;
    }

    static java.lang.ref.ReferenceQueue access$000()
    {
        java.lang.ref.ReferenceQueue $r0;

        $r0 = <java.util.concurrent.ForkJoinTask: java.lang.ref.ReferenceQueue exceptionTableRefQueue>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.util.concurrent.ForkJoinTask$ExceptionNode[] $r3;
        sun.misc.Unsafe $r4, $r5;
        java.lang.reflect.Field $r6;
        long $l0;
        java.lang.Exception $r7, r9;
        java.lang.Error $r8;

        <java.util.concurrent.ForkJoinTask: long serialVersionUID> = -7721805057305804111L;

        <java.util.concurrent.ForkJoinTask: int EXCEPTION_MAP_CAPACITY> = 32;

        <java.util.concurrent.ForkJoinTask: int SMASK> = 65535;

        <java.util.concurrent.ForkJoinTask: int SIGNAL> = 65536;

        <java.util.concurrent.ForkJoinTask: int EXCEPTIONAL> = -2147483648;

        <java.util.concurrent.ForkJoinTask: int CANCELLED> = -1073741824;

        <java.util.concurrent.ForkJoinTask: int NORMAL> = -268435456;

        <java.util.concurrent.ForkJoinTask: int DONE_MASK> = -268435456;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        <java.util.concurrent.ForkJoinTask: java.util.concurrent.locks.ReentrantLock exceptionTableLock> = $r1;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        <java.util.concurrent.ForkJoinTask: java.lang.ref.ReferenceQueue exceptionTableRefQueue> = $r2;

        $r3 = newarray (java.util.concurrent.ForkJoinTask$ExceptionNode)[32];

        <java.util.concurrent.ForkJoinTask: java.util.concurrent.ForkJoinTask$ExceptionNode[] exceptionTable> = $r3;

     label1:
        $r4 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U> = $r4;

        r0 = class "java/util/concurrent/ForkJoinTask";

        $r5 = <java.util.concurrent.ForkJoinTask: sun.misc.Unsafe U>;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("status");

        $l0 = virtualinvoke $r5.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r6);

        <java.util.concurrent.ForkJoinTask: long STATUS> = $l0;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.Error;

        specialinvoke $r8.<java.lang.Error: void <init>(java.lang.Throwable)>(r9);

        throw $r8;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
