final class javax.security.cert.X509Certificate$1 extends javax.security.cert.X509Certificate
{
    final java.security.cert.X509Certificate val$cert;

    void <init>(java.security.cert.X509Certificate)
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate r1;

        r0 := @this: javax.security.cert.X509Certificate$1;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert> = r1;

        specialinvoke r0.<javax.security.cert.X509Certificate: void <init>()>();

        return;
    }

    public byte[] getEncoded() throws javax.security.cert.CertificateEncodingException
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.CertificateEncodingException r1, $r4;
        java.security.cert.X509Certificate $r2;
        byte[] $r3;
        javax.security.cert.CertificateEncodingException $r5;
        java.lang.String $r6;

        r0 := @this: javax.security.cert.X509Certificate$1;

     label1:
        $r2 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: byte[] getEncoded()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new javax.security.cert.CertificateEncodingException;

        $r6 = virtualinvoke r1.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.security.cert.CertificateEncodingException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    public void verify(java.security.PublicKey) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.PublicKey r1;
        java.security.cert.CertificateException r2, $r4;
        java.security.cert.X509Certificate $r3;
        javax.security.cert.CertificateException $r5;
        java.lang.String $r6;

        r0 := @this: javax.security.cert.X509Certificate$1;

        r1 := @parameter0: java.security.PublicKey;

     label1:
        $r3 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        virtualinvoke $r3.<java.security.cert.X509Certificate: void verify(java.security.PublicKey)>(r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new javax.security.cert.CertificateException;

        $r6 = virtualinvoke r2.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.security.cert.CertificateException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        return;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws javax.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.PublicKey r1;
        java.lang.String r2, $r7;
        java.security.cert.CertificateException r3, $r5;
        java.security.cert.X509Certificate $r4;
        javax.security.cert.CertificateException $r6;

        r0 := @this: javax.security.cert.X509Certificate$1;

        r1 := @parameter0: java.security.PublicKey;

        r2 := @parameter1: java.lang.String;

     label1:
        $r4 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        virtualinvoke $r4.<java.security.cert.X509Certificate: void verify(java.security.PublicKey,java.lang.String)>(r1, r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        $r6 = new javax.security.cert.CertificateException;

        $r7 = virtualinvoke r3.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.security.cert.CertificateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label4:
        return;

        catch java.security.cert.CertificateException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String toString()>();

        return $r2;
    }

    public java.security.PublicKey getPublicKey()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.security.PublicKey $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        return $r2;
    }

    public void checkValidity() throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.CertificateNotYetValidException r1, $r6;
        java.security.cert.X509Certificate $r2;
        java.security.cert.CertificateExpiredException $r3, r9;
        javax.security.cert.CertificateExpiredException $r4;
        java.lang.String $r5, $r8;
        javax.security.cert.CertificateNotYetValidException $r7;

        r0 := @this: javax.security.cert.X509Certificate$1;

     label1:
        $r2 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        virtualinvoke $r2.<java.security.cert.X509Certificate: void checkValidity()>();

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new javax.security.cert.CertificateNotYetValidException;

        $r8 = virtualinvoke r1.<java.security.cert.CertificateNotYetValidException: java.lang.String getMessage()>();

        specialinvoke $r7.<javax.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $r3 := @caughtexception;

        r9 = $r3;

        $r4 = new javax.security.cert.CertificateExpiredException;

        $r5 = virtualinvoke r9.<java.security.cert.CertificateExpiredException: java.lang.String getMessage()>();

        specialinvoke $r4.<javax.security.cert.CertificateExpiredException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label5:
        return;

        catch java.security.cert.CertificateNotYetValidException from label1 to label2 with label3;
        catch java.security.cert.CertificateExpiredException from label1 to label2 with label4;
    }

    public void checkValidity(java.util.Date) throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException
    {
        javax.security.cert.X509Certificate$1 r0;
        java.util.Date r1;
        java.security.cert.CertificateNotYetValidException r2, $r4;
        java.security.cert.X509Certificate $r3;
        javax.security.cert.CertificateNotYetValidException $r5;
        java.lang.String $r6, $r9;
        java.security.cert.CertificateExpiredException $r7, r10;
        javax.security.cert.CertificateExpiredException $r8;

        r0 := @this: javax.security.cert.X509Certificate$1;

        r1 := @parameter0: java.util.Date;

     label1:
        $r3 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        virtualinvoke $r3.<java.security.cert.X509Certificate: void checkValidity(java.util.Date)>(r1);

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new javax.security.cert.CertificateNotYetValidException;

        $r6 = virtualinvoke r2.<java.security.cert.CertificateNotYetValidException: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label4:
        $r7 := @caughtexception;

        r10 = $r7;

        $r8 = new javax.security.cert.CertificateExpiredException;

        $r9 = virtualinvoke r10.<java.security.cert.CertificateExpiredException: java.lang.String getMessage()>();

        specialinvoke $r8.<javax.security.cert.CertificateExpiredException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label5:
        return;

        catch java.security.cert.CertificateNotYetValidException from label1 to label2 with label3;
        catch java.security.cert.CertificateExpiredException from label1 to label2 with label4;
    }

    public int getVersion()
    {
        javax.security.cert.X509Certificate$1 r0;

        r0 := @this: javax.security.cert.X509Certificate$1;

        return 2;
    }

    public java.math.BigInteger getSerialNumber()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.math.BigInteger $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        return $r2;
    }

    public java.security.Principal getIssuerDN()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.security.Principal $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()>();

        return $r2;
    }

    public java.security.Principal getSubjectDN()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.security.Principal $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()>();

        return $r2;
    }

    public java.util.Date getNotBefore()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.util.Date $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Date getNotBefore()>();

        return $r2;
    }

    public java.util.Date getNotAfter()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.util.Date $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.util.Date getNotAfter()>();

        return $r2;
    }

    public java.lang.String getSigAlgName()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String getSigAlgName()>();

        return $r2;
    }

    public java.lang.String getSigAlgOID()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        java.lang.String $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()>();

        return $r2;
    }

    public byte[] getSigAlgParams()
    {
        javax.security.cert.X509Certificate$1 r0;
        java.security.cert.X509Certificate $r1;
        byte[] $r2;

        r0 := @this: javax.security.cert.X509Certificate$1;

        $r1 = r0.<javax.security.cert.X509Certificate$1: java.security.cert.X509Certificate val$cert>;

        $r2 = virtualinvoke $r1.<java.security.cert.X509Certificate: byte[] getSigAlgParams()>();

        return $r2;
    }
}
