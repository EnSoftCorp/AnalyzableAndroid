public class org.json.JSONStringer extends java.lang.Object
{
    final java.lang.StringBuilder out;
    private final java.util.List stack;
    private final java.lang.String indent;

    public void <init>()
    {
        org.json.JSONStringer r0;
        java.lang.StringBuilder $r1;
        java.util.ArrayList $r2;

        r0 := @this: org.json.JSONStringer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        r0.<org.json.JSONStringer: java.lang.StringBuilder out> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.json.JSONStringer: java.util.List stack> = $r2;

        r0.<org.json.JSONStringer: java.lang.String indent> = null;

        return;
    }

    void <init>(int)
    {
        org.json.JSONStringer r0;
        int i0;
        char[] r1;
        java.lang.StringBuilder $r2;
        java.util.ArrayList $r3;
        java.lang.String $r4;

        r0 := @this: org.json.JSONStringer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        r0.<org.json.JSONStringer: java.lang.StringBuilder out> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.json.JSONStringer: java.util.List stack> = $r3;

        r1 = newarray (char)[i0];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r1, 32);

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[])>(r1);

        r0.<org.json.JSONStringer: java.lang.String indent> = $r4;

        return;
    }

    public org.json.JSONStringer array() throws org.json.JSONException
    {
        org.json.JSONStringer r0, $r2;
        org.json.JSONStringer$Scope $r1;

        r0 := @this: org.json.JSONStringer;

        $r1 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_ARRAY>;

        $r2 = virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer open(org.json.JSONStringer$Scope,java.lang.String)>($r1, "[");

        return $r2;
    }

    public org.json.JSONStringer endArray() throws org.json.JSONException
    {
        org.json.JSONStringer r0, $r3;
        org.json.JSONStringer$Scope $r1, $r2;

        r0 := @this: org.json.JSONStringer;

        $r2 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_ARRAY>;

        $r1 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_ARRAY>;

        $r3 = virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer close(org.json.JSONStringer$Scope,org.json.JSONStringer$Scope,java.lang.String)>($r2, $r1, "]");

        return $r3;
    }

    public org.json.JSONStringer object() throws org.json.JSONException
    {
        org.json.JSONStringer r0, $r2;
        org.json.JSONStringer$Scope $r1;

        r0 := @this: org.json.JSONStringer;

        $r1 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_OBJECT>;

        $r2 = virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer open(org.json.JSONStringer$Scope,java.lang.String)>($r1, "{");

        return $r2;
    }

    public org.json.JSONStringer endObject() throws org.json.JSONException
    {
        org.json.JSONStringer r0, $r3;
        org.json.JSONStringer$Scope $r1, $r2;

        r0 := @this: org.json.JSONStringer;

        $r2 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_OBJECT>;

        $r1 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_OBJECT>;

        $r3 = virtualinvoke r0.<org.json.JSONStringer: org.json.JSONStringer close(org.json.JSONStringer$Scope,org.json.JSONStringer$Scope,java.lang.String)>($r2, $r1, "}");

        return $r3;
    }

    org.json.JSONStringer open(org.json.JSONStringer$Scope, java.lang.String) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        org.json.JSONStringer$Scope r1;
        java.lang.String r2;
        java.util.List $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r7;
        int $i0;
        org.json.JSONException $r8;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: org.json.JSONStringer$Scope;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $i0 = virtualinvoke $r7.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label1;

        $r8 = new org.json.JSONException;

        specialinvoke $r8.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem: multiple top-level roots");

        throw $r8;

     label1:
        specialinvoke r0.<org.json.JSONStringer: void beforeValue()>();

        $r4 = r0.<org.json.JSONStringer: java.util.List stack>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        return r0;
    }

    org.json.JSONStringer close(org.json.JSONStringer$Scope, org.json.JSONStringer$Scope, java.lang.String) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        org.json.JSONStringer$Scope r1, r2, r4;
        java.lang.String r3;
        java.util.List $r5, $r6;
        int $i0, $i1;
        java.lang.StringBuilder $r8;
        org.json.JSONException $r10;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: org.json.JSONStringer$Scope;

        r2 := @parameter1: org.json.JSONStringer$Scope;

        r3 := @parameter2: java.lang.String;

        r4 = specialinvoke r0.<org.json.JSONStringer: org.json.JSONStringer$Scope peek()>();

        if r4 == r2 goto label1;

        if r4 == r1 goto label1;

        $r10 = new org.json.JSONException;

        specialinvoke $r10.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r10;

     label1:
        $r6 = r0.<org.json.JSONStringer: java.util.List stack>;

        $r5 = r0.<org.json.JSONStringer: java.util.List stack>;

        $i0 = interfaceinvoke $r5.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i1);

        if r4 != r2 goto label2;

        specialinvoke r0.<org.json.JSONStringer: void newline()>();

     label2:
        $r8 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        return r0;
    }

    private org.json.JSONStringer$Scope peek() throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        java.util.List $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r4;
        org.json.JSONStringer$Scope $r5;
        org.json.JSONException $r6;

        r0 := @this: org.json.JSONStringer;

        $r1 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = new org.json.JSONException;

        specialinvoke $r6.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r6;

     label1:
        $r3 = r0.<org.json.JSONStringer: java.util.List stack>;

        $r2 = r0.<org.json.JSONStringer: java.util.List stack>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.json.JSONStringer$Scope) $r4;

        return $r5;
    }

    private void replaceTop(org.json.JSONStringer$Scope)
    {
        org.json.JSONStringer r0;
        org.json.JSONStringer$Scope r1;
        java.util.List $r2, $r3;
        int $i0, $i1;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: org.json.JSONStringer$Scope;

        $r3 = r0.<org.json.JSONStringer: java.util.List stack>;

        $r2 = r0.<org.json.JSONStringer: java.util.List stack>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r3.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r1);

        return;
    }

    public org.json.JSONStringer value(java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        java.lang.Object r1, $r5;
        java.util.List $r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r6, $r9;
        java.lang.Number $r7;
        org.json.JSONArray $r11;
        org.json.JSONObject $r12;
        org.json.JSONException $r13;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r13 = new org.json.JSONException;

        specialinvoke $r13.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r13;

     label1:
        $z1 = r1 instanceof org.json.JSONArray;

        if $z1 == 0 goto label2;

        $r11 = (org.json.JSONArray) r1;

        virtualinvoke $r11.<org.json.JSONArray: void writeTo(org.json.JSONStringer)>(r0);

        return r0;

     label2:
        $z2 = r1 instanceof org.json.JSONObject;

        if $z2 == 0 goto label3;

        $r12 = (org.json.JSONObject) r1;

        virtualinvoke $r12.<org.json.JSONObject: void writeTo(org.json.JSONStringer)>(r0);

        return r0;

     label3:
        specialinvoke r0.<org.json.JSONStringer: void beforeValue()>();

        if r1 == null goto label4;

        $z3 = r1 instanceof java.lang.Boolean;

        if $z3 != 0 goto label4;

        $r5 = <org.json.JSONObject: java.lang.Object NULL>;

        if r1 != $r5 goto label5;

     label4:
        $r3 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        goto label7;

     label5:
        $z4 = r1 instanceof java.lang.Number;

        if $z4 == 0 goto label6;

        $r8 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r7 = (java.lang.Number) r1;

        $r9 = staticinvoke <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($r7);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        goto label7;

     label6:
        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        specialinvoke r0.<org.json.JSONStringer: void string(java.lang.String)>($r6);

     label7:
        return r0;
    }

    public org.json.JSONStringer value(boolean) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        boolean z0, $z1;
        java.util.List $r1;
        java.lang.StringBuilder $r2;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONStringer;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z1 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r4;

     label1:
        specialinvoke r0.<org.json.JSONStringer: void beforeValue()>();

        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        return r0;
    }

    public org.json.JSONStringer value(double) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        double d0;
        java.util.List $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Double $r3;
        java.lang.String $r4;
        org.json.JSONException $r6;

        r0 := @this: org.json.JSONStringer;

        d0 := @parameter0: double;

        $r1 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r6 = new org.json.JSONException;

        specialinvoke $r6.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r6;

     label1:
        specialinvoke r0.<org.json.JSONStringer: void beforeValue()>();

        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r4 = staticinvoke <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return r0;
    }

    public org.json.JSONStringer value(long) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        long l0;
        java.util.List $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        org.json.JSONException $r4;

        r0 := @this: org.json.JSONStringer;

        l0 := @parameter0: long;

        $r1 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r4;

     label1:
        specialinvoke r0.<org.json.JSONStringer: void beforeValue()>();

        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        return r0;
    }

    private void string(java.lang.String)
    {
        org.json.JSONStringer r0;
        java.lang.String r1, $r23;
        int i0, i1;
        char c2;
        java.lang.StringBuilder $r2, $r4, $r6, $r7, $r9, $r12, $r14, $r16, $r18, $r20, $r21;
        java.lang.Object[] $r22;
        java.lang.Integer $r24;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        i0 = 0;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label01:
        if i0 >= i1 goto label11;

        c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        lookupswitch(c2)
        {
            case 8: goto label04;
            case 9: goto label03;
            case 10: goto label05;
            case 12: goto label07;
            case 13: goto label06;
            case 34: goto label02;
            case 47: goto label02;
            case 92: goto label02;
            default: goto label08;
        };

     label02:
        $r6 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label10;

     label03:
        $r16 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\t");

        goto label10;

     label04:
        $r18 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\b");

        goto label10;

     label05:
        $r14 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\n");

        goto label10;

     label06:
        $r9 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\r");

        goto label10;

     label07:
        $r12 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\f");

        goto label10;

     label08:
        if c2 > 31 goto label09;

        $r21 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r22 = newarray (java.lang.Object)[1];

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(c2);

        $r22[0] = $r24;

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\\u%04x", $r22);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label10;

     label09:
        $r20 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label10:
        i0 = i0 + 1;

        goto label01;

     label11:
        $r4 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        return;
    }

    private void newline()
    {
        org.json.JSONStringer r0;
        int i0, $i1;
        java.lang.String $r1, $r5;
        java.lang.StringBuilder $r2, $r6;
        java.util.List $r4;

        r0 := @this: org.json.JSONStringer;

        $r1 = r0.<org.json.JSONStringer: java.lang.String indent>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i0 = 0;

     label2:
        $r4 = r0.<org.json.JSONStringer: java.util.List stack>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i0 >= $i1 goto label3;

        $r6 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r5 = r0.<org.json.JSONStringer: java.lang.String indent>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i0 = i0 + 1;

        goto label2;

     label3:
        return;
    }

    public org.json.JSONStringer key(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        java.lang.String r1;
        org.json.JSONException $r2;

        r0 := @this: org.json.JSONStringer;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Names must be non-null");

        throw $r2;

     label1:
        specialinvoke r0.<org.json.JSONStringer: void beforeKey()>();

        specialinvoke r0.<org.json.JSONStringer: void string(java.lang.String)>(r1);

        return r0;
    }

    private void beforeKey() throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        org.json.JSONStringer$Scope r1, $r2, $r3, $r4;
        org.json.JSONException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: org.json.JSONStringer;

        r1 = specialinvoke r0.<org.json.JSONStringer: org.json.JSONStringer$Scope peek()>();

        $r2 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_OBJECT>;

        if r1 != $r2 goto label1;

        $r6 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        goto label2;

     label1:
        $r3 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_OBJECT>;

        if r1 == $r3 goto label2;

        $r5 = new org.json.JSONException;

        specialinvoke $r5.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r5;

     label2:
        specialinvoke r0.<org.json.JSONStringer: void newline()>();

        $r4 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope DANGLING_KEY>;

        specialinvoke r0.<org.json.JSONStringer: void replaceTop(org.json.JSONStringer$Scope)>($r4);

        return;
    }

    private void beforeValue() throws org.json.JSONException
    {
        org.json.JSONStringer r0;
        org.json.JSONStringer$Scope r1, $r3, $r4, $r5, $r6, $r11, $r14;
        java.util.List $r2;
        boolean $z0;
        org.json.JSONException $r7;
        java.lang.String $r8, $r12;
        java.lang.StringBuilder $r9, $r13;

        r0 := @this: org.json.JSONStringer;

        $r2 = r0.<org.json.JSONStringer: java.util.List stack>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r1 = specialinvoke r0.<org.json.JSONStringer: org.json.JSONStringer$Scope peek()>();

        $r3 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope EMPTY_ARRAY>;

        if r1 != $r3 goto label2;

        $r14 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_ARRAY>;

        specialinvoke r0.<org.json.JSONStringer: void replaceTop(org.json.JSONStringer$Scope)>($r14);

        specialinvoke r0.<org.json.JSONStringer: void newline()>();

        goto label7;

     label2:
        $r4 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_ARRAY>;

        if r1 != $r4 goto label3;

        $r13 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        specialinvoke r0.<org.json.JSONStringer: void newline()>();

        goto label7;

     label3:
        $r5 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope DANGLING_KEY>;

        if r1 != $r5 goto label6;

        $r9 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r8 = r0.<org.json.JSONStringer: java.lang.String indent>;

        if $r8 != null goto label4;

        $r12 = ":";

        goto label5;

     label4:
        $r12 = ": ";

     label5:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NONEMPTY_OBJECT>;

        specialinvoke r0.<org.json.JSONStringer: void replaceTop(org.json.JSONStringer$Scope)>($r11);

        goto label7;

     label6:
        $r6 = <org.json.JSONStringer$Scope: org.json.JSONStringer$Scope NULL>;

        if r1 == $r6 goto label7;

        $r7 = new org.json.JSONException;

        specialinvoke $r7.<org.json.JSONException: void <init>(java.lang.String)>("Nesting problem");

        throw $r7;

     label7:
        return;
    }

    public java.lang.String toString()
    {
        org.json.JSONStringer r0;
        java.lang.StringBuilder $r1, $r2;
        int $i0;
        java.lang.String $r3;

        r0 := @this: org.json.JSONStringer;

        $r1 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.json.JSONStringer: java.lang.StringBuilder out>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r3;
    }
}
