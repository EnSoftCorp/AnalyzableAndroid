class java.nio.channels.Channels$InputStreamChannel extends java.nio.channels.spi.AbstractInterruptibleChannel implements java.nio.channels.ReadableByteChannel
{
    private final java.io.InputStream inputStream;

    void <init>(java.io.InputStream)
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.io.InputStream r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("inputStream == null");

        throw $r2;

     label1:
        r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream> = r1;

        return;
    }

    public synchronized int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.nio.ByteBuffer r1;
        int i0, i2;
        byte[] r2;
        byte b1;
        java.lang.Throwable r3, $r7;
        boolean $z0, $z1, $z2;
        java.io.InputStream $r4;
        java.nio.channels.ClosedChannelException $r6;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r6 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r6.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r6;

     label01:
        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r2 = newarray (byte)[i0];

        b1 = 0;

     label02:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void begin()>();

        $r4 = r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream>;

        i2 = virtualinvoke $r4.<java.io.InputStream: int read(byte[])>(r2);

     label03:
        if i2 < 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void end(boolean)>($z1);

        goto label10;

     label06:
        $r7 := @caughtexception;

        r3 = $r7;

     label07:
        if b1 < 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        virtualinvoke r0.<java.nio.channels.Channels$InputStreamChannel: void end(boolean)>($z2);

        throw r3;

     label10:
        if i2 <= 0 goto label11;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r2, 0, i2);

     label11:
        return i2;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    protected void implCloseChannel() throws java.io.IOException
    {
        java.nio.channels.Channels$InputStreamChannel r0;
        java.io.InputStream $r1;

        r0 := @this: java.nio.channels.Channels$InputStreamChannel;

        $r1 = r0.<java.nio.channels.Channels$InputStreamChannel: java.io.InputStream inputStream>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return;
    }
}
