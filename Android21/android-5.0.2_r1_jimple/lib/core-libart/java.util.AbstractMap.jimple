public abstract class java.util.AbstractMap extends java.lang.Object implements java.util.Map
{
    java.util.Set keySet;
    java.util.Collection valuesCollection;

    protected void <init>()
    {
        java.util.AbstractMap r0;

        r0 := @this: java.util.AbstractMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void clear()
    {
        java.util.AbstractMap r0;
        java.util.Set $r1;

        r0 := @this: java.util.AbstractMap;

        $r1 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        interfaceinvoke $r1.<java.util.Set: void clear()>();

        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r4, $r6, $r7, $r9;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry $r5, $r8;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label1;

        return 1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != null goto label2;

        return 1;

     label3:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r4, $r6, $r7, $r9;
        java.util.Iterator r2;
        java.util.Set $r3;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry $r5, $r8;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label1;

        return 1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r6 != null goto label2;

        return 1;

     label3:
        return 0;
    }

    public abstract java.util.Set entrySet();

    public boolean equals(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, r5, r6, r7, $r9;
        java.util.Map r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;
        java.util.Set $r8;
        java.lang.ClassCastException $r10;
        java.lang.NullPointerException $r11;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof java.util.Map;

        if $z0 == 0 goto label12;

        r2 = (java.util.Map) r1;

        $i0 = virtualinvoke r0.<java.util.AbstractMap: int size()>();

        $i1 = interfaceinvoke r2.<java.util.Map: int size()>();

        if $i0 == $i1 goto label02;

        return 0;

     label02:
        $r8 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r9;

        r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        if r6 != null goto label05;

        if r7 != null goto label04;

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z2 != 0 goto label07;

     label04:
        return 0;

     label05:
        $z3 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label07;

     label06:
        return 0;

     label07:
        goto label03;

     label08:
        goto label11;

     label09:
        $r11 := @caughtexception;

        return 0;

     label10:
        $r10 := @caughtexception;

        return 0;

     label11:
        return 1;

     label12:
        return 0;

        catch java.lang.NullPointerException from label02 to label04 with label09;
        catch java.lang.NullPointerException from label05 to label06 with label09;
        catch java.lang.NullPointerException from label07 to label08 with label09;
        catch java.lang.ClassCastException from label02 to label04 with label10;
        catch java.lang.ClassCastException from label05 to label06 with label10;
        catch java.lang.ClassCastException from label07 to label08 with label10;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r11;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        $r4 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        if r1 == null goto label3;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r10;

     label2:
        goto label1;

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != null goto label4;

        $r7 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r7;

     label4:
        goto label3;

     label5:
        return null;
    }

    public int hashCode()
    {
        java.util.AbstractMap r0;
        int i0, $i1;
        java.util.Iterator r1;
        java.util.Set $r2;
        boolean $z0;
        java.lang.Object $r3;
        java.util.Map$Entry $r4;

        r0 := @this: java.util.AbstractMap;

        i0 = 0;

        $r2 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (java.util.Map$Entry) $r3;

        $i1 = interfaceinvoke $r4.<java.util.Map$Entry: int hashCode()>();

        i0 = i0 + $i1;

        goto label1;

     label2:
        return i0;
    }

    public boolean isEmpty()
    {
        java.util.AbstractMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractMap;

        $i0 = virtualinvoke r0.<java.util.AbstractMap: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Set keySet()
    {
        java.util.AbstractMap r0;
        java.util.Set $r1, $r2;
        java.util.AbstractMap$1 $r3;

        r0 := @this: java.util.AbstractMap;

        $r1 = r0.<java.util.AbstractMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new java.util.AbstractMap$1;

        specialinvoke $r3.<java.util.AbstractMap$1: void <init>(java.util.AbstractMap)>(r0);

        r0.<java.util.AbstractMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<java.util.AbstractMap: java.util.Set keySet>;

        return $r2;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, r2;
        java.lang.UnsupportedOperationException $r3;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void putAll(java.util.Map)
    {
        java.util.AbstractMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r6, $r7;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.util.AbstractMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.AbstractMap r0;
        java.lang.Object r1, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Iterator r2;
        java.util.Map$Entry r3, r11;
        java.util.Set $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractMap;

        r1 := @parameter0: java.lang.Object;

        $r4 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        if r1 == null goto label3;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r8;

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r10;

     label2:
        goto label1;

     label3:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r6 != null goto label4;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        $r7 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>();

        return $r7;

     label4:
        goto label3;

     label5:
        return null;
    }

    public int size()
    {
        java.util.AbstractMap r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.AbstractMap;

        $r1 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r1.<java.util.Set: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.AbstractMap r0;
        java.lang.StringBuilder r1, $r6;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.lang.Object r4, r5, $r11;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.util.Set $r8;
        java.lang.String $r10;

        r0 := @this: java.util.AbstractMap;

        $z0 = virtualinvoke r0.<java.util.AbstractMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "{}";

     label1:
        $r6 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.util.AbstractMap: int size()>();

        $i1 = $i0 * 28;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>($i1);

        r1 = $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $r8 = virtualinvoke r0.<java.util.AbstractMap: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label8;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r11;

        r4 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        if r4 == r0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Map)");

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        r5 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        if r5 == r0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        goto label6;

     label5:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Map)");

     label6:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label7:
        goto label2;

     label8:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r10 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public java.util.Collection values()
    {
        java.util.AbstractMap r0;
        java.util.Collection $r1, $r2;
        java.util.AbstractMap$2 $r3;

        r0 := @this: java.util.AbstractMap;

        $r1 = r0.<java.util.AbstractMap: java.util.Collection valuesCollection>;

        if $r1 != null goto label1;

        $r3 = new java.util.AbstractMap$2;

        specialinvoke $r3.<java.util.AbstractMap$2: void <init>(java.util.AbstractMap)>(r0);

        r0.<java.util.AbstractMap: java.util.Collection valuesCollection> = $r3;

     label1:
        $r2 = r0.<java.util.AbstractMap: java.util.Collection valuesCollection>;

        return $r2;
    }

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.AbstractMap r0, r1;
        java.lang.Object $r2;

        r0 := @this: java.util.AbstractMap;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.AbstractMap) $r2;

        r1.<java.util.AbstractMap: java.util.Set keySet> = null;

        r1.<java.util.AbstractMap: java.util.Collection valuesCollection> = null;

        return r1;
    }
}
