class java.nio.DatagramChannelImpl extends java.nio.channels.DatagramChannel implements java.nio.FileDescriptorChannel
{
    private final java.io.FileDescriptor fd;
    private java.net.DatagramSocket socket;
    java.net.InetSocketAddress connectAddress;
    java.net.InetAddress localAddress;
    private int localPort;
    boolean connected;
    boolean isBound;
    private final java.lang.Object readLock;
    private final java.lang.Object writeLock;

    protected void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.lang.Object $r2, $r3;
        java.io.FileDescriptor $r4;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock> = $r3;

        $r4 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(0);

        r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd> = $r4;

        return;
    }

    private void <init>()
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.channels.spi.SelectorProvider $r1;
        java.lang.Object $r2, $r3;
        java.io.FileDescriptor $r4;
        java.net.InetSocketAddress $r5;

        r0 := @this: java.nio.DatagramChannelImpl;

        $r1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock> = $r3;

        $r4 = new java.io.FileDescriptor;

        specialinvoke $r4.<java.io.FileDescriptor: void <init>()>();

        r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd> = $r4;

        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(int)>(0);

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = $r5;

        return;
    }

    public synchronized java.net.DatagramSocket socket()
    {
        java.nio.DatagramChannelImpl r0;
        java.net.DatagramSocket $r1, $r2;
        java.nio.DatagramChannelImpl$DatagramSocketAdapter $r3;
        java.net.PlainDatagramSocketImpl $r4;
        int $i0;
        java.io.FileDescriptor $r5;

        r0 := @this: java.nio.DatagramChannelImpl;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r1 != null goto label1;

        $r3 = new java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r4 = new java.net.PlainDatagramSocketImpl;

        $r5 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i0 = r0.<java.nio.DatagramChannelImpl: int localPort>;

        specialinvoke $r4.<java.net.PlainDatagramSocketImpl: void <init>(java.io.FileDescriptor,int)>($r5, $i0);

        specialinvoke $r3.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void <init>(java.net.DatagramSocketImpl,java.nio.DatagramChannelImpl)>($r4, r0);

        r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket> = $r3;

     label1:
        $r2 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        return $r2;
    }

    void onBind(boolean)
    {
        java.nio.DatagramChannelImpl r0;
        boolean z0;
        java.net.SocketAddress r1;
        android.system.ErrnoException r2, $r9;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        java.net.InetAddress $r5, $r7;
        int $i0, $i1;
        java.net.DatagramSocket $r6, $r8;
        java.lang.AssertionError $r10;
        java.net.InetSocketAddress r11;

        r0 := @this: java.nio.DatagramChannelImpl;

        z0 := @parameter0: boolean;

     label1:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        r1 = interfaceinvoke $r4.<libcore.io.Os: java.net.SocketAddress getsockname(java.io.FileDescriptor)>($r3);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r2 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r10;

     label4:
        r0.<java.nio.DatagramChannelImpl: boolean isBound> = 1;

        r11 = (java.net.InetSocketAddress) r1;

        $r5 = virtualinvoke r11.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        r0.<java.nio.DatagramChannelImpl: java.net.InetAddress localAddress> = $r5;

        $i0 = virtualinvoke r11.<java.net.InetSocketAddress: int getPort()>();

        r0.<java.nio.DatagramChannelImpl: int localPort> = $i0;

        if z0 == 0 goto label5;

        $r6 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r6 == null goto label5;

        $r8 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        $r7 = r0.<java.nio.DatagramChannelImpl: java.net.InetAddress localAddress>;

        $i1 = r0.<java.nio.DatagramChannelImpl: int localPort>;

        virtualinvoke $r8.<java.net.DatagramSocket: void onBind(java.net.InetAddress,int)>($r7, $i1);

     label5:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public synchronized boolean isConnected()
    {
        java.nio.DatagramChannelImpl r0;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        $z0 = r0.<java.nio.DatagramChannelImpl: boolean connected>;

        return $z0;
    }

    public synchronized java.nio.channels.DatagramChannel connect(java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        java.net.InetAddress r3;
        int i0;
        java.lang.Throwable r5, $r9;
        boolean $z0, $z1;
        java.io.FileDescriptor $r6;
        java.lang.IllegalStateException $r7;
        java.net.ConnectException $r8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.net.SocketAddress;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z0 = r0.<java.nio.DatagramChannelImpl: boolean connected>;

        if $z0 == 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label1:
        r2 = staticinvoke <java.nio.SocketChannelImpl: java.net.InetSocketAddress validateAddress(java.net.SocketAddress)>(r1);

        r3 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

     label2:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r6, r3, i0);

     label3:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

        goto label8;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

        goto label8;

     label6:
        $r9 := @caughtexception;

        r5 = $r9;

     label7:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>(1);

        throw r5;

     label8:
        $z1 = r0.<java.nio.DatagramChannelImpl: boolean isBound>;

        if $z1 != 0 goto label9;

        virtualinvoke r0.<java.nio.DatagramChannelImpl: void onBind(boolean)>(1);

     label9:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void onConnect(java.net.InetAddress,int,boolean)>(r3, i0, 1);

        return r0;

        catch java.net.ConnectException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void onConnect(java.net.InetAddress, int, boolean)
    {
        java.nio.DatagramChannelImpl r0;
        java.net.InetAddress r1;
        int i0;
        boolean z0;
        java.net.InetSocketAddress $r2;
        java.net.DatagramSocket $r3, $r4;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 1;

        $r2 = new java.net.InetSocketAddress;

        specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = $r2;

        if z0 == 0 goto label1;

        $r3 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r3 == null goto label1;

        $r4 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r4.<java.net.DatagramSocket: void onConnect(java.net.InetAddress,int)>(r1, i0);

     label1:
        return;
    }

    public synchronized java.nio.channels.DatagramChannel disconnect() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        android.system.ErrnoException r1, $r5;
        boolean $z0, $z1;
        java.net.InetAddress $r2;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        java.io.IOException $r6;

        r0 := @this: java.nio.DatagramChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isOpen()>();

        if $z1 != 0 goto label2;

     label1:
        return r0;

     label2:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void onDisconnect(boolean)>(1);

     label3:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r2 = <java.net.InetAddress: java.net.InetAddress UNSPECIFIED>;

        interfaceinvoke $r4.<libcore.io.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r3, $r2, 0);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r1 = $r5;

        $r6 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r6;

     label6:
        return r0;

        catch android.system.ErrnoException from label3 to label4 with label5;
    }

    void onDisconnect(boolean)
    {
        java.nio.DatagramChannelImpl r0;
        boolean z0, $z1;
        java.net.DatagramSocket $r1, $r2, $r3;

        r0 := @this: java.nio.DatagramChannelImpl;

        z0 := @parameter0: boolean;

        r0.<java.nio.DatagramChannelImpl: boolean connected> = 0;

        r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        if z0 == 0 goto label1;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r1 == null goto label1;

        $r2 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        $z1 = virtualinvoke $r2.<java.net.DatagramSocket: boolean isConnected()>();

        if $z1 == 0 goto label1;

        $r3 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r3.<java.net.DatagramSocket: void onDisconnect()>();

     label1:
        return;
    }

    public java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.net.SocketAddress r2;
        java.lang.Object r3, $r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Throwable r4, r5, $r7, $r9;
        java.io.InterruptedIOException $r8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z1 = r0.<java.nio.DatagramChannelImpl: boolean isBound>;

        if $z1 != 0 goto label01;

        return null;

     label01:
        r2 = null;

     label02:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r6 = r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock>;

        r3 = $r6;

        entermonitor $r6;

     label03:
        z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z2 != 0 goto label04;

        r2 = specialinvoke r0.<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveImpl(java.nio.ByteBuffer,boolean)>(r1, z0);

        goto label05;

     label04:
        r2 = specialinvoke r0.<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer,boolean)>(r1, z0);

     label05:
        exitmonitor r3;

     label06:
        goto label09;

     label07:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label08:
        throw r4;

     label09:
        if r2 == null goto label10;

        $z3 = 1;

        goto label11;

     label10:
        $z3 = 0;

     label11:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z3);

        goto label20;

     label12:
        $r8 := @caughtexception;

     label13:
        if r2 == null goto label14;

        $z4 = 1;

        goto label15;

     label14:
        $z4 = 0;

     label15:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z4);

        return null;

     label16:
        $r9 := @caughtexception;

        r5 = $r9;

     label17:
        if r2 == null goto label18;

        $z5 = 1;

        goto label19;

     label18:
        $z5 = 0;

     label19:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z5);

        throw r5;

     label20:
        return r2;

        catch java.lang.Throwable from label03 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.io.InterruptedIOException from label02 to label09 with label12;
        catch java.lang.Throwable from label02 to label09 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    private java.net.SocketAddress receiveImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, $z1, $z2, $z3;
        java.net.SocketAddress r2;
        java.net.DatagramPacket r3, $r4, $r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] $r5, $r7, $r10, $r12;
        java.io.FileDescriptor $r6;
        java.net.InetAddress $r8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        r2 = null;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label1;

        $r13 = new java.net.DatagramPacket;

        $r12 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        $i8 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i9 = $i8 + $i7;

        $i10 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r13.<java.net.DatagramPacket: void <init>(byte[],int,int)>($r12, $i9, $i10);

        r3 = $r13;

        goto label2;

     label1:
        $r4 = new java.net.DatagramPacket;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r5 = newarray (byte)[$i2];

        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r4.<java.net.DatagramPacket: void <init>(byte[],int)>($r5, $i3);

        r3 = $r4;

     label2:
        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r7 = virtualinvoke r3.<java.net.DatagramPacket: byte[] getData()>();

        $i5 = virtualinvoke r3.<java.net.DatagramPacket: int getOffset()>();

        $i4 = virtualinvoke r3.<java.net.DatagramPacket: int getLength()>();

        $z2 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i1 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,byte[],int,int,int,java.net.DatagramPacket,boolean)>(0, $r6, $r7, $i5, $i4, 0, r3, $z2);

        $r8 = virtualinvoke r3.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r8 == null goto label5;

        if i1 <= 0 goto label4;

        $z3 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z3 == 0 goto label3;

        $i6 = i0 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i6);

        goto label4;

     label3:
        $r10 = virtualinvoke r3.<java.net.DatagramPacket: byte[] getData()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r10, 0, i1);

     label4:
        r2 = virtualinvoke r3.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        goto label6;

     label5:
        if z0 != 0 goto label2;

     label6:
        return r2;
    }

    private java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        boolean z0, $z1;
        java.net.SocketAddress r2;
        java.net.DatagramPacket r3, $r4;
        int i0, i1, $i2;
        byte[] $r5;
        java.io.FileDescriptor $r6;
        java.net.InetAddress $r7;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        z0 := @parameter1: boolean;

        r2 = null;

        $r4 = new java.net.DatagramPacket;

        $r5 = <libcore.util.EmptyArray: byte[] BYTE>;

        specialinvoke $r4.<java.net.DatagramPacket: void <init>(byte[],int)>($r5, 0);

        r3 = $r4;

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

     label1:
        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $z1 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i1 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.DatagramPacket,boolean)>(0, $r6, r1, 0, r3, $z1);

        $r7 = virtualinvoke r3.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r7 == null goto label3;

        if i1 <= 0 goto label2;

        $i2 = i0 + i1;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

     label2:
        r2 = virtualinvoke r3.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        goto label4;

     label3:
        if z0 != 0 goto label1;

     label4:
        return r2;
    }

    public int send(java.nio.ByteBuffer, java.net.SocketAddress) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.net.SocketAddress r2;
        java.net.InetSocketAddress r3, $r11, $r17;
        java.lang.Object r4, $r8;
        int i0, i1, $i2, $i3;
        java.lang.Throwable r5, r6, $r20, $r23;
        java.net.InetAddress $r7, $r10;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.FileDescriptor $r9;
        java.lang.IllegalArgumentException $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r18, $r19;
        java.lang.String $r21;
        java.io.IOException $r22;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        r2 := @parameter1: java.net.SocketAddress;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>(r1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        r3 = (java.net.InetSocketAddress) r2;

        $r7 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if $r7 != null goto label01;

        $r22 = new java.io.IOException;

        specialinvoke $r22.<java.io.IOException: void <init>()>();

        throw $r22;

     label01:
        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label02;

        $r11 = r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $z3 = virtualinvoke $r11.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>(r3);

        if $z3 != 0 goto label02;

        $r13 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connected to ");

        $r17 = r0.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not ");

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21);

        throw $r13;

     label02:
        $r8 = r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock>;

        r4 = $r8;

        entermonitor $r8;

     label03:
        i0 = 0;

     label04:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $r9 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r10 = virtualinvoke r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i2 = virtualinvoke r3.<java.net.InetSocketAddress: int getPort()>();

        i0 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>($r9, r1, 0, $r10, $i2);

        if i0 <= 0 goto label05;

        $i3 = i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

     label05:
        $z1 = r0.<java.nio.DatagramChannelImpl: boolean isBound>;

        if $z1 != 0 goto label06;

        virtualinvoke r0.<java.nio.DatagramChannelImpl: void onBind(boolean)>(1);

     label06:
        if i0 < 0 goto label07;

        $z2 = 1;

        goto label08;

     label07:
        $z2 = 0;

     label08:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z2);

        goto label13;

     label09:
        $r20 := @caughtexception;

        r5 = $r20;

     label10:
        if i0 < 0 goto label11;

        $z4 = 1;

        goto label12;

     label11:
        $z4 = 0;

     label12:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z4);

        throw r5;

     label13:
        exitmonitor r4;

     label14:
        return i0;

     label15:
        $r23 := @caughtexception;

        r6 = $r23;

        exitmonitor r4;

     label16:
        throw r6;

        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label03 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1, r3;
        int i0, $i1, $i2, $i3;
        byte[] r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke r1.<java.nio.ByteBuffer: void checkWritable()>();

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label3;

     label2:
        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>(r1);

        if i0 <= 0 goto label4;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        goto label4;

     label3:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        r2 = newarray (byte)[$i3];

        r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);

        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>(r3);

        if i0 <= 0 goto label4;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r2, 0, i0);

     label4:
        return i0;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i9, $i10;
        java.nio.ByteBuffer r2, $r4, $r5;
        byte[] r3;
        long $l8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i7, i0, i1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 1);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        i3 = specialinvoke r0.<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>(r2);

        i4 = i3;

        i5 = i0;

        r3 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>();

     label2:
        if i4 <= 0 goto label3;

        $r4 = r1[i5];

        $i9 = virtualinvoke $r4.<java.nio.ByteBuffer: int remaining()>();

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i4);

        $r5 = r1[i5];

        $i10 = i3 - i4;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r3, $i10, i6);

        i5 = i5 + 1;

        i4 = i4 - i6;

        goto label2;

     label3:
        $l8 = (long) i3;

        return $l8;
    }

    private int readImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r6;
        byte b0, b1;
        java.lang.Throwable r4, r5, $r9, $r10;
        java.io.FileDescriptor $r7;
        boolean $z0, $z1, $z2, $z3;
        java.io.InterruptedIOException $r8;
        int i2;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r6 = r0.<java.nio.DatagramChannelImpl: java.lang.Object readLock>;

        r2 = $r6;

        entermonitor $r6;

     label01:
        b0 = 0;

     label02:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r7 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        i2 = staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.DatagramPacket,boolean)>(0, $r7, r1, 0, null, $z0);

     label03:
        if i2 <= 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z1);

        goto label15;

     label06:
        $r8 := @caughtexception;

        b1 = 0;

     label07:
        if b0 <= 0 goto label08;

        $z2 = 1;

        goto label09;

     label08:
        $z2 = 0;

     label09:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z2);

        exitmonitor r2;

     label10:
        return b1;

     label11:
        $r10 := @caughtexception;

        r4 = $r10;

     label12:
        if b0 <= 0 goto label13;

        $z3 = 1;

        goto label14;

     label13:
        $z3 = 0;

     label14:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z3);

        throw r4;

     label15:
        exitmonitor r2;

     label16:
        return i2;

     label17:
        $r9 := @caughtexception;

        r5 = $r9;

        exitmonitor r2;

     label18:
        throw r5;

        catch java.io.InterruptedIOException from label02 to label03 with label06;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label01 to label10 with label17;
        catch java.lang.Throwable from label11 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        int i0, $i1, $i2;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>(r1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = specialinvoke r0.<java.nio.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r1);

        if i0 <= 0 goto label2;

        $i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

     label2:
        return i0;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer[] r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i9, $i10, $i11, i12, i13, i14;
        java.nio.ByteBuffer r2, r3, r4;
        long $l8;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i6 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i6, i0, i1);

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpenConnected()>();

        i2 = staticinvoke <java.nio.FileChannelImpl: int calculateTotalRemaining(java.nio.ByteBuffer[],int,int,boolean)>(r1, i0, i1, 0);

        if i2 != 0 goto label1;

        return 0L;

     label1:
        r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i2);

        i3 = i0;

     label2:
        $i7 = i1 + i0;

        if i3 >= $i7 goto label3;

        r3 = r1[i3];

        i4 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r3);

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i4);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        i12 = specialinvoke r0.<java.nio.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>(r2);

        i13 = i0;

        i14 = i12;

     label4:
        if i12 <= 0 goto label5;

        r4 = r1[i13];

        $i9 = virtualinvoke r4.<java.nio.ByteBuffer: int remaining()>();

        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i12, $i9);

        $i11 = virtualinvoke r4.<java.nio.ByteBuffer: int position()>();

        $i10 = $i11 + i5;

        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i10);

        i13 = i13 + 1;

        i12 = i12 - i5;

        goto label4;

     label5:
        $l8 = (long) i14;

        return $l8;
    }

    private int writeImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.Object r2, $r5;
        byte b0;
        java.lang.Throwable r3, r4, $r7, $r8;
        java.io.FileDescriptor $r6;
        boolean $z0, $z1;
        int i1;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r5 = r0.<java.nio.DatagramChannelImpl: java.lang.Object writeLock>;

        r2 = $r5;

        entermonitor $r5;

     label01:
        b0 = 0;

     label02:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void begin()>();

        $r6 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        i1 = staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)>($r6, r1, 0, null, 0);

     label03:
        if i1 <= 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z0);

        goto label10;

     label06:
        $r8 := @caughtexception;

        r3 = $r8;

     label07:
        if b0 <= 0 goto label08;

        $z1 = 1;

        goto label09;

     label08:
        $z1 = 0;

     label09:
        virtualinvoke r0.<java.nio.DatagramChannelImpl: void end(boolean)>($z1);

        throw r3;

     label10:
        exitmonitor r2;

     label11:
        return i1;

     label12:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r2;

     label13:
        throw r4;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    protected synchronized void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;
        java.net.DatagramSocket $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl;

        virtualinvoke r0.<java.nio.DatagramChannelImpl: void onDisconnect(boolean)>(1);

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r1);

        $r2 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r2 == null goto label1;

        $r3 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        $z0 = virtualinvoke $r3.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r4 = r0.<java.nio.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r4.<java.net.DatagramSocket: void onClose()>();

     label1:
        return;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        boolean z0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r1, z0);

        return;
    }

    private void checkOpen() throws java.nio.channels.ClosedChannelException
    {
        java.nio.DatagramChannelImpl r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkOpenConnected() throws java.io.IOException
    {
        java.nio.DatagramChannelImpl r0;
        boolean $z0;
        java.nio.channels.NotYetConnectedException $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        specialinvoke r0.<java.nio.DatagramChannelImpl: void checkOpen()>();

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.NotYetConnectedException;

        specialinvoke $r1.<java.nio.channels.NotYetConnectedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkNotNull(java.nio.ByteBuffer)
    {
        java.nio.DatagramChannelImpl r0;
        java.nio.ByteBuffer r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.nio.DatagramChannelImpl;

        r1 := @parameter0: java.nio.ByteBuffer;

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("source == null");

        throw $r2;

     label1:
        return;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.DatagramChannelImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.nio.DatagramChannelImpl;

        $r1 = r0.<java.nio.DatagramChannelImpl: java.io.FileDescriptor fd>;

        return $r1;
    }

    static int access$000(java.nio.DatagramChannelImpl)
    {
        java.nio.DatagramChannelImpl r0;
        int $i0;

        r0 := @parameter0: java.nio.DatagramChannelImpl;

        $i0 = r0.<java.nio.DatagramChannelImpl: int localPort>;

        return $i0;
    }
}
