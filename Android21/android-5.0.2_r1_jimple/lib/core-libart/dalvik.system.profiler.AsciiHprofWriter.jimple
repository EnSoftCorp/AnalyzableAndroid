public final class dalvik.system.profiler.AsciiHprofWriter extends java.lang.Object
{
    private final dalvik.system.profiler.HprofData data;
    private final java.io.PrintWriter out;
    private static final java.util.Comparator SAMPLE_COMPARATOR;

    public static void write(dalvik.system.profiler.HprofData, java.io.OutputStream) throws java.io.IOException
    {
        dalvik.system.profiler.HprofData r0;
        java.io.OutputStream r1;
        dalvik.system.profiler.AsciiHprofWriter $r2;

        r0 := @parameter0: dalvik.system.profiler.HprofData;

        r1 := @parameter1: java.io.OutputStream;

        $r2 = new dalvik.system.profiler.AsciiHprofWriter;

        specialinvoke $r2.<dalvik.system.profiler.AsciiHprofWriter: void <init>(dalvik.system.profiler.HprofData,java.io.OutputStream)>(r0, r1);

        specialinvoke $r2.<dalvik.system.profiler.AsciiHprofWriter: void write()>();

        return;
    }

    private void <init>(dalvik.system.profiler.HprofData, java.io.OutputStream)
    {
        dalvik.system.profiler.AsciiHprofWriter r0;
        dalvik.system.profiler.HprofData r1;
        java.io.OutputStream r2;
        java.io.PrintWriter $r3;

        r0 := @this: dalvik.system.profiler.AsciiHprofWriter;

        r1 := @parameter0: dalvik.system.profiler.HprofData;

        r2 := @parameter1: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data> = r1;

        $r3 = new java.io.PrintWriter;

        specialinvoke $r3.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(r2);

        r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out> = $r3;

        return;
    }

    private void write() throws java.io.IOException
    {
        dalvik.system.profiler.AsciiHprofWriter r0;
        java.util.Iterator r1, r3, r55;
        dalvik.system.profiler.HprofData$ThreadEvent r2;
        dalvik.system.profiler.HprofData$Sample r4, r56;
        dalvik.system.profiler.HprofData$StackTrace r5, r57;
        int i0, i1, i2, $i4, $i5, $i6, i7, i8, i9;
        java.lang.StackTraceElement[] r6, $r37, $r41;
        java.lang.StackTraceElement r7, $r36, $r42;
        double d0, $d1, $d2, $d3, $d4, d5;
        dalvik.system.profiler.HprofData $r8, $r12, $r15;
        java.util.List $r9;
        java.util.ArrayList $r10, r53;
        boolean $z0, $z1, $z2;
        java.util.Set $r11;
        java.util.Comparator $r13;
        java.util.Date $r14, r54;
        long $l3;
        java.io.PrintWriter $r16, $r22, $r23, $r26, $r29, $r46, $r48, $r49;
        java.lang.Object[] $r17, $r21, $r25, $r28, $r40, $r50;
        java.lang.Integer $r19, $r31, $r33, $r34, $r44, $r47;
        java.lang.Object $r27, $r39, $r51;
        java.lang.Double $r30, $r32;
        java.lang.String $r35, $r43;

        r0 := @this: dalvik.system.profiler.AsciiHprofWriter;

        $r8 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $r9 = virtualinvoke $r8.<dalvik.system.profiler.HprofData: java.util.List getThreadHistory()>();

        r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r51 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (dalvik.system.profiler.HprofData$ThreadEvent) $r51;

        $r48 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        virtualinvoke $r48.<java.io.PrintWriter: void println(java.lang.Object)>(r2);

        goto label1;

     label2:
        $r10 = new java.util.ArrayList;

        $r12 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $r11 = virtualinvoke $r12.<dalvik.system.profiler.HprofData: java.util.Set getSamples()>();

        specialinvoke $r10.<java.util.ArrayList: void <init>(java.util.Collection)>($r11);

        r53 = $r10;

        $r13 = <dalvik.system.profiler.AsciiHprofWriter: java.util.Comparator SAMPLE_COMPARATOR>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r53, $r13);

        i7 = 0;

        r3 = interfaceinvoke r53.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r39 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (dalvik.system.profiler.HprofData$Sample) $r39;

        r5 = r4.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        i0 = r4.<dalvik.system.profiler.HprofData$Sample: int count>;

        i7 = i7 + i0;

        $r46 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r40 = newarray (java.lang.Object)[2];

        $i5 = r5.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        $r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r40[0] = $r47;

        $i6 = r5.<dalvik.system.profiler.HprofData$StackTrace: int threadId>;

        $r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r40[1] = $r44;

        virtualinvoke $r46.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("TRACE %d: (thread=%d)\n", $r40);

        r6 = r5.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        i1 = lengthof r6;

        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        r7 = r6[i2];

        $r49 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r50 = newarray (java.lang.Object)[1];

        $r50[0] = r7;

        virtualinvoke $r49.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("\t%s\n", $r50);

        i2 = i2 + 1;

        goto label4;

     label5:
        goto label3;

     label6:
        $r14 = new java.util.Date;

        $r15 = r0.<dalvik.system.profiler.AsciiHprofWriter: dalvik.system.profiler.HprofData data>;

        $l3 = virtualinvoke $r15.<dalvik.system.profiler.HprofData: long getStartMillis()>();

        specialinvoke $r14.<java.util.Date: void <init>(long)>($l3);

        r54 = $r14;

        $r16 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r17 = newarray (java.lang.Object)[6];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7);

        $r17[0] = $r19;

        $r17[1] = r54;

        $r17[2] = r54;

        $r17[3] = r54;

        $r17[4] = r54;

        $r17[5] = r54;

        virtualinvoke $r16.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("CPU SAMPLES BEGIN (total = %d) %ta %tb %td %tT %tY\n", $r17);

        $r22 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r21 = newarray (java.lang.Object)[0];

        virtualinvoke $r22.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("rank   self  accum   count trace method\n", $r21);

        i8 = 0;

        d5 = 0.0;

        r55 = interfaceinvoke r53.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z2 = interfaceinvoke r55.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r27 = interfaceinvoke r55.<java.util.Iterator: java.lang.Object next()>();

        r56 = (dalvik.system.profiler.HprofData$Sample) $r27;

        i8 = i8 + 1;

        r57 = r56.<dalvik.system.profiler.HprofData$Sample: dalvik.system.profiler.HprofData$StackTrace stackTrace>;

        i9 = r56.<dalvik.system.profiler.HprofData$Sample: int count>;

        $d2 = (double) i9;

        $d1 = (double) i7;

        d0 = $d2 / $d1;

        d5 = d5 + d0;

        $r29 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r28 = newarray (java.lang.Object)[7];

        $r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r28[0] = $r31;

        $d3 = d0 * 100.0;

        $r30 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d3);

        $r28[1] = $r30;

        $d4 = d5 * 100.0;

        $r32 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d4);

        $r28[2] = $r32;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r28[3] = $r34;

        $i4 = r57.<dalvik.system.profiler.HprofData$StackTrace: int stackTraceId>;

        $r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r28[4] = $r33;

        $r37 = r57.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        $r36 = $r37[0];

        $r35 = virtualinvoke $r36.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r28[5] = $r35;

        $r41 = r57.<dalvik.system.profiler.HprofData$StackTrace: java.lang.StackTraceElement[] stackFrames>;

        $r42 = $r41[0];

        $r43 = virtualinvoke $r42.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r28[6] = $r43;

        virtualinvoke $r29.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("% 4d% 6.2f%%% 6.2f%% % 7d % 5d %s.%s\n", $r28);

        goto label7;

     label8:
        $r23 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        $r25 = newarray (java.lang.Object)[0];

        virtualinvoke $r23.<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])>("CPU SAMPLES END\n", $r25);

        $r26 = r0.<dalvik.system.profiler.AsciiHprofWriter: java.io.PrintWriter out>;

        virtualinvoke $r26.<java.io.PrintWriter: void flush()>();

        return;
    }

    static void <clinit>()
    {
        dalvik.system.profiler.AsciiHprofWriter$1 $r0;

        $r0 = new dalvik.system.profiler.AsciiHprofWriter$1;

        specialinvoke $r0.<dalvik.system.profiler.AsciiHprofWriter$1: void <init>()>();

        <dalvik.system.profiler.AsciiHprofWriter: java.util.Comparator SAMPLE_COMPARATOR> = $r0;

        return;
    }
}
