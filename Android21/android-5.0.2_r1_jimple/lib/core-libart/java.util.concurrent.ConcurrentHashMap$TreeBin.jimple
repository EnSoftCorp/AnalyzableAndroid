final class java.util.concurrent.ConcurrentHashMap$TreeBin extends java.util.concurrent.ConcurrentHashMap$Node
{
    java.util.concurrent.ConcurrentHashMap$TreeNode root;
    volatile java.util.concurrent.ConcurrentHashMap$TreeNode first;
    volatile java.lang.Thread waiter;
    volatile int lockState;
    static final int WRITER;
    static final int WAITER;
    static final int READER;
    private static final sun.misc.Unsafe U;
    private static final long LOCKSTATE;
    static final boolean $assertionsDisabled;

    void <init>(java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        java.util.concurrent.ConcurrentHashMap$TreeNode r1, r2, r3, r4, r7, r8, $r11;
        java.lang.Object r5, $r10;
        int i0, i1, i2, $i3;
        java.lang.Class r6, $r12;
        java.util.concurrent.ConcurrentHashMap$Node $r9;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$Node: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node)>(-2147483648, null, null, null);

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first> = r1;

        r2 = null;

        r3 = r1;

     label01:
        if r3 == null goto label15;

        $r9 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        r4 = (java.util.concurrent.ConcurrentHashMap$TreeNode) $r9;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = null;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = null;

        if r2 != null goto label02;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = null;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r2 = r3;

        goto label14;

     label02:
        r5 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        i0 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        r6 = null;

        r7 = r2;

     label03:
        $i3 = r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        i2 = $i3;

        if $i3 <= i0 goto label04;

        i1 = -1;

        goto label08;

     label04:
        if i2 >= i0 goto label05;

        i1 = 1;

        goto label08;

     label05:
        if r6 != null goto label06;

        $r12 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.lang.Class comparableClassFor(java.lang.Object)>(r5);

        r6 = $r12;

        if $r12 == null goto label07;

     label06:
        $r10 = r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        i1 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(r6, r5, $r10);

        goto label08;

     label07:
        i1 = 0;

     label08:
        r8 = r7;

        if i1 > 0 goto label09;

        $r11 = r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        goto label10;

     label09:
        $r11 = r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

     label10:
        r7 = $r11;

        if $r11 != null goto label13;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r8;

        if i1 > 0 goto label11;

        r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r3;

        goto label12;

     label11:
        r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r3;

     label12:
        r2 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode balanceInsertion(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r2, r3);

        goto label14;

     label13:
        goto label03;

     label14:
        r3 = r4;

        goto label01;

     label15:
        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = r2;

        return;
    }

    private final void lockRoot()
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        long $l0;
        sun.misc.Unsafe $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        $r1 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l0 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $z0 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l0, 0, 1);

        if $z0 != 0 goto label1;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void contendedLock()>();

     label1:
        return;
    }

    private final void unlockRoot()
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: int lockState> = 0;

        return;
    }

    private final void contendedLock()
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4;
        long $l5, $l6;
        sun.misc.Unsafe $r1, $r3;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        z0 = 0;

     label1:
        $i1 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: int lockState>;

        i0 = $i1;

        $i2 = $i1 & 1;

        if $i2 != 0 goto label3;

        $r3 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l6 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $z2 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l6, i0, 1);

        if $z2 == 0 goto label1;

        if z0 == 0 goto label2;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Thread waiter> = null;

     label2:
        return;

     label3:
        $i3 = i0 & 2;

        if $i3 != 0 goto label4;

        $r1 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l5 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $i4 = i0 | 2;

        $z1 = virtualinvoke $r1.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l5, i0, $i4);

        if $z1 == 0 goto label1;

        z0 = 1;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Thread waiter> = $r2;

        goto label1;

     label4:
        if z0 == 0 goto label1;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label1;
    }

    final java.util.concurrent.ConcurrentHashMap$Node find(int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i8, $i10, $i11, $i12, $i13;
        java.lang.Object r1, r3, $r14;
        java.util.concurrent.ConcurrentHashMap$Node r2;
        java.util.concurrent.ConcurrentHashMap$TreeNode r4, r5, $r10, $r11;
        java.lang.Thread r6, r8, $r13, $r17;
        java.lang.Throwable r7, $r15;
        sun.misc.Unsafe $r9, $r12, $r16;
        long $l7, $l9, $l14;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 == null goto label14;

        r2 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

     label01:
        if r2 == null goto label14;

        $i4 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: int lockState>;

        i1 = $i4;

        $i5 = $i4 & 3;

        if $i5 == 0 goto label03;

        $i11 = r2.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i11 != i0 goto label13;

        $r14 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r3 = $r14;

        if $r14 == r1 goto label02;

        if r3 == null goto label13;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z2 == 0 goto label13;

     label02:
        return r2;

     label03:
        $r9 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l7 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $i6 = i1 + 4;

        $z0 = virtualinvoke $r9.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l7, i1, $i6);

        if $z0 == 0 goto label13;

     label04:
        $r10 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        r4 = $r10;

        if $r10 != null goto label05;

        $r11 = null;

        goto label06;

     label05:
        $r11 = virtualinvoke r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(i0, r1, null);

     label06:
        r5 = $r11;

     label07:
        $r12 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l9 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $i8 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: int lockState>;

        i2 = $i8;

        $i10 = i2 - 4;

        $z1 = virtualinvoke $r12.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l9, $i8, $i10);

        if $z1 == 0 goto label07;

        if i2 != 6 goto label08;

        $r13 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Thread waiter>;

        r6 = $r13;

        if $r13 == null goto label08;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r6);

     label08:
        goto label12;

     label09:
        $r15 := @caughtexception;

        r7 = $r15;

     label10:
        $r16 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $l14 = <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE>;

        $i12 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: int lockState>;

        i3 = $i12;

        $i13 = i3 - 4;

        $z3 = virtualinvoke $r16.<sun.misc.Unsafe: boolean compareAndSwapInt(java.lang.Object,long,int,int)>(r0, $l14, $i12, $i13);

        if $z3 == 0 goto label10;

        if i3 != 6 goto label11;

        $r17 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.lang.Thread waiter>;

        r8 = $r17;

        if $r17 == null goto label11;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r8);

     label11:
        throw r7;

     label12:
        return r5;

     label13:
        r2 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        goto label01;

     label14:
        return null;

        catch java.lang.Throwable from label04 to label07 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    final java.util.concurrent.ConcurrentHashMap$TreeNode putTreeVal(int, java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object r1, r2, r5, $r12;
        java.lang.Class r3, $r21;
        java.util.concurrent.ConcurrentHashMap$TreeNode r4, r6, r7, r8, r9, r10, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r24;
        java.lang.Throwable r11, $r23;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AssertionError $r18;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 = null;

        r4 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

     label01:
        if r4 != null goto label02;

        $r24 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        specialinvoke $r24.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>(i0, r1, r2, null, null);

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = $r24;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first> = $r24;

        goto label25;

     label02:
        $i3 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        i2 = $i3;

        if $i3 <= i0 goto label03;

        i1 = -1;

        goto label12;

     label03:
        if i2 >= i0 goto label04;

        i1 = 1;

        goto label12;

     label04:
        $r12 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.lang.Object key>;

        r5 = $r12;

        if $r12 == r1 goto label05;

        if r5 == null goto label06;

        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label06;

     label05:
        return r4;

     label06:
        if r3 != null goto label07;

        $r21 = staticinvoke <java.util.concurrent.ConcurrentHashMap: java.lang.Class comparableClassFor(java.lang.Object)>(r1);

        r3 = $r21;

        if $r21 == null goto label08;

     label07:
        $i4 = staticinvoke <java.util.concurrent.ConcurrentHashMap: int compareComparables(java.lang.Class,java.lang.Object,java.lang.Object)>(r3, r1, r5);

        i1 = $i4;

        if $i4 != 0 goto label12;

     label08:
        $r20 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if $r20 != null goto label09;

        i1 = 1;

        goto label12;

     label09:
        $r19 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r7 = $r19;

        if $r19 == null goto label10;

        $r22 = virtualinvoke r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode findTreeNode(int,java.lang.Object,java.lang.Class)>(i0, r1, r3);

        r6 = $r22;

        if $r22 != null goto label11;

     label10:
        i1 = -1;

        goto label12;

     label11:
        return r6;

     label12:
        r8 = r4;

        if i1 >= 0 goto label13;

        $r14 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        goto label14;

     label13:
        $r14 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

     label14:
        r4 = $r14;

        if $r14 != null goto label24;

        r10 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        $r13 = new java.util.concurrent.ConcurrentHashMap$TreeNode;

        specialinvoke $r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$Node,java.util.concurrent.ConcurrentHashMap$TreeNode)>(i0, r1, r2, r10, r8);

        r9 = $r13;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first> = $r13;

        if r10 == null goto label15;

        r10.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r9;

     label15:
        if i1 >= 0 goto label16;

        r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r9;

        goto label17;

     label16:
        r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r9;

     label17:
        $z0 = r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 != 0 goto label18;

        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        goto label25;

     label18:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void lockRoot()>();

     label19:
        $r15 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        $r16 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode balanceInsertion(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>($r15, r9);

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = $r16;

     label20:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void unlockRoot()>();

        goto label23;

     label21:
        $r23 := @caughtexception;

        r11 = $r23;

     label22:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void unlockRoot()>();

        throw r11;

     label23:
        goto label25;

     label24:
        goto label01;

     label25:
        $z1 = <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean $assertionsDisabled>;

        if $z1 != 0 goto label26;

        $r17 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        $z2 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>($r17);

        if $z2 != 0 goto label26;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label26:
        return null;

        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
    }

    final boolean removeTreeNode(java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeBin r0;
        java.util.concurrent.ConcurrentHashMap$TreeNode r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r24, $r25, $r26, $r27, $r28, $r29, $r31, $r32, r33, r34;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Throwable r14, $r30;
        java.util.concurrent.ConcurrentHashMap$Node $r16;
        java.lang.AssertionError $r23;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$TreeBin;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        $r16 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        r2 = (java.util.concurrent.ConcurrentHashMap$TreeNode) $r16;

        r3 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev>;

        if r3 != null goto label01;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first> = r2;

        goto label02;

     label01:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next> = r2;

     label02:
        if r2 == null goto label03;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev> = r3;

     label03:
        $r15 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode first>;

        if $r15 != null goto label04;

        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = null;

        return 1;

     label04:
        $r18 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        r4 = $r18;

        if $r18 == null goto label05;

        $r17 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if $r17 == null goto label05;

        $r20 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r5 = $r20;

        if $r20 == null goto label05;

        $r19 = r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if $r19 != null goto label06;

     label05:
        return 1;

     label06:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void lockRoot()>();

     label07:
        r7 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r8 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r7 == null goto label21;

        if r8 == null goto label21;

        r9 = r8;

     label08:
        $r28 = r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r10 = $r28;

        if $r28 == null goto label09;

        r9 = r10;

        goto label08;

     label09:
        z0 = r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        $z4 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = $z4;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = z0;

        r11 = r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r12 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        if r9 != r8 goto label10;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r9;

        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r1;

        goto label13;

     label10:
        r13 = r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r13;

        if r13 == null goto label12;

        $r32 = r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r9 != $r32 goto label11;

        r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r1;

        goto label12;

     label11:
        r13.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r1;

     label12:
        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r8;

        if r8 == null goto label13;

        r8.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r9;

     label13:
        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = null;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r11;

        if r11 == null goto label14;

        r11.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r1;

     label14:
        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r7;

        if r7 == null goto label15;

        r7.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r9;

     label15:
        r9.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r12;

        if r12 != null goto label16;

        r4 = r9;

        goto label18;

     label16:
        $r31 = r12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r1 != $r31 goto label17;

        r12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r9;

        goto label18;

     label17:
        r12.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r9;

     label18:
        if r11 == null goto label19;

        r6 = r11;

        goto label20;

     label19:
        r6 = r1;

     label20:
        goto label24;

     label21:
        if r7 == null goto label22;

        r6 = r7;

        goto label24;

     label22:
        if r8 == null goto label23;

        r6 = r8;

        goto label24;

     label23:
        r6 = r1;

     label24:
        if r6 == r1 goto label28;

        $r26 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r6.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = $r26;

        r33 = $r26;

        if r33 != null goto label25;

        r4 = r6;

        goto label27;

     label25:
        $r29 = r33.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r1 != $r29 goto label26;

        r33.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r6;

        goto label27;

     label26:
        r33.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r6;

     label27:
        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = null;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = null;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = null;

     label28:
        $z1 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label29;

        $r21 = r4;

        goto label30;

     label29:
        $r21 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode balanceDeletion(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r4, r6);

     label30:
        r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root> = $r21;

        if r1 != r6 goto label33;

        $r25 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r34 = $r25;

        if $r25 == null goto label33;

        $r24 = r34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r1 != $r24 goto label31;

        r34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = null;

        goto label32;

     label31:
        $r27 = r34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r1 != $r27 goto label32;

        r34.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = null;

     label32:
        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = null;

     label33:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void unlockRoot()>();

        goto label36;

     label34:
        $r30 := @caughtexception;

        r14 = $r30;

     label35:
        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: void unlockRoot()>();

        throw r14;

     label36:
        $z2 = <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean $assertionsDisabled>;

        if $z2 != 0 goto label37;

        $r22 = r0.<java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode root>;

        $z3 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>($r22);

        if $z3 != 0 goto label37;

        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label37:
        return 0;

        catch java.lang.Throwable from label07 to label33 with label34;
        catch java.lang.Throwable from label34 to label35 with label34;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r1, r2, r3, r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        if r1 == null goto label5;

        $r5 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r2 = $r5;

        if $r5 == null goto label5;

        $r6 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = $r6;

        r4 = $r6;

        if $r6 == null goto label1;

        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r1;

     label1:
        $r7 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = $r7;

        r3 = $r7;

        if $r7 != null goto label2;

        r0 = r2;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if $r8 != r1 goto label3;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r2;

        goto label4;

     label3:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r2;

     label4:
        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r1;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r2;

     label5:
        return r0;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r1, r2, r3, r4, $r5, $r6, $r7, $r8;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        if r1 == null goto label5;

        $r5 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r2 = $r5;

        if $r5 == null goto label5;

        $r6 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = $r6;

        r4 = $r6;

        if $r6 == null goto label1;

        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r1;

     label1:
        $r7 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = $r7;

        r3 = $r7;

        if $r7 != null goto label2;

        r0 = r2;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        goto label4;

     label2:
        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if $r8 != r1 goto label3;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r2;

        goto label4;

     label3:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left> = r2;

     label4:
        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right> = r1;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent> = r2;

     label5:
        return r0;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode balanceInsertion(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r1, r2, r3, r4, r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

     label01:
        $r6 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r6;

        if $r6 != null goto label02;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        return r1;

     label02:
        $z0 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label03;

        $r7 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r3 = $r7;

        if $r7 != null goto label04;

     label03:
        return r0;

     label04:
        $r8 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r4 = $r8;

        if r2 != $r8 goto label09;

        $r13 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r5 = $r13;

        if $r13 == null goto label05;

        $z2 = r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z2 == 0 goto label05;

        r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r1 = r3;

        goto label01;

     label05:
        $r12 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r1 != $r12 goto label08;

        r1 = r2;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

        $r15 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r15;

        if $r15 != null goto label06;

        $r14 = null;

        goto label07;

     label06:
        $r14 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

     label07:
        r3 = $r14;

     label08:
        if r2 == null goto label01;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        if r3 == null goto label01;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r3);

        goto label01;

     label09:
        if r4 == null goto label10;

        $z1 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z1 == 0 goto label10;

        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r1 = r3;

        goto label01;

     label10:
        $r9 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r1 != $r9 goto label13;

        r1 = r2;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

        $r10 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r10;

        if $r10 != null goto label11;

        $r11 = null;

        goto label12;

     label11:
        $r11 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

     label12:
        r3 = $r11;

     label13:
        if r2 == null goto label01;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        if r3 == null goto label01;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r3);

        goto label01;
    }

    static java.util.concurrent.ConcurrentHashMap$TreeNode balanceDeletion(java.util.concurrent.ConcurrentHashMap$TreeNode, java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r1, r2, r3, r4, r5, r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20, r21, r22, r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1 := @parameter1: java.util.concurrent.ConcurrentHashMap$TreeNode;

     label01:
        if r1 == null goto label02;

        if r1 != r0 goto label03;

     label02:
        return r0;

     label03:
        $r7 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r7;

        if $r7 != null goto label04;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        return r1;

     label04:
        $z0 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label05;

        r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        return r0;

     label05:
        $r8 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r3 = $r8;

        if $r8 != r1 goto label23;

        $r13 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r4 = $r13;

        if $r13 == null goto label08;

        $z10 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z10 == 0 goto label08;

        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

        $r18 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r18;

        if $r18 != null goto label06;

        $r19 = null;

        goto label07;

     label06:
        $r19 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

     label07:
        r4 = $r19;

     label08:
        if r4 != null goto label09;

        r1 = r2;

        goto label01;

     label09:
        r5 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r6 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r6 == null goto label10;

        $z9 = r6.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z9 != 0 goto label12;

     label10:
        if r5 == null goto label11;

        $z6 = r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z6 != 0 goto label12;

     label11:
        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r1 = r2;

        goto label22;

     label12:
        if r6 == null goto label13;

        $z8 = r6.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z8 != 0 goto label17;

     label13:
        if r5 == null goto label14;

        r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

     label14:
        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r4);

        $r15 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r15;

        if $r15 != null goto label15;

        $r17 = null;

        goto label16;

     label15:
        $r17 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

     label16:
        r4 = $r17;

     label17:
        if r4 == null goto label20;

        if r2 != null goto label18;

        $z7 = 0;

        goto label19;

     label18:
        $z7 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

     label19:
        r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = $z7;

        $r16 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r20 = $r16;

        if $r16 == null goto label20;

        r20.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

     label20:
        if r2 == null goto label21;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

     label21:
        r1 = r0;

     label22:
        goto label01;

     label23:
        if r3 == null goto label26;

        $z4 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z4 == 0 goto label26;

        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

        $r12 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r12;

        if $r12 != null goto label24;

        $r14 = null;

        goto label25;

     label24:
        $r14 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

     label25:
        r3 = $r14;

     label26:
        if r3 != null goto label27;

        r1 = r2;

        goto label01;

     label27:
        r21 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r22 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r21 == null goto label28;

        $z5 = r21.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z5 != 0 goto label30;

     label28:
        if r22 == null goto label29;

        $z1 = r22.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z1 != 0 goto label30;

     label29:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r1 = r2;

        goto label40;

     label30:
        if r21 == null goto label31;

        $z3 = r21.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z3 != 0 goto label35;

     label31:
        if r22 == null goto label32;

        r22.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

     label32:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 1;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateLeft(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r3);

        $r9 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = $r9;

        if $r9 != null goto label33;

        $r11 = null;

        goto label34;

     label33:
        $r11 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

     label34:
        r3 = $r11;

     label35:
        if r3 == null goto label38;

        if r2 != null goto label36;

        $z2 = 0;

        goto label37;

     label36:
        $z2 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

     label37:
        r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = $z2;

        $r10 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r23 = $r10;

        if $r10 == null goto label38;

        r23.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

     label38:
        if r2 == null goto label39;

        r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red> = 0;

        r0 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: java.util.concurrent.ConcurrentHashMap$TreeNode rotateRight(java.util.concurrent.ConcurrentHashMap$TreeNode,java.util.concurrent.ConcurrentHashMap$TreeNode)>(r0, r2);

     label39:
        r1 = r0;

     label40:
        goto label01;
    }

    static boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)
    {
        java.util.concurrent.ConcurrentHashMap$TreeNode r0, r1, r2, r3, r4, r5, $r7, $r8, $r9, $r10, $r12;
        java.util.concurrent.ConcurrentHashMap$Node $r6, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: java.util.concurrent.ConcurrentHashMap$TreeNode;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        r2 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        r3 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        r4 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev>;

        $r6 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        r5 = (java.util.concurrent.ConcurrentHashMap$TreeNode) $r6;

        if r4 == null goto label01;

        $r11 = r4.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$Node next>;

        if $r11 == r0 goto label01;

        return 0;

     label01:
        if r5 == null goto label02;

        $r12 = r5.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode prev>;

        if $r12 == r0 goto label02;

        return 0;

     label02:
        if r1 == null goto label03;

        $r10 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode left>;

        if r0 == $r10 goto label03;

        $r9 = r1.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode right>;

        if r0 == $r9 goto label03;

        return 0;

     label03:
        if r2 == null goto label05;

        $r8 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        if $r8 != r0 goto label04;

        $i2 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        $i3 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        if $i2 <= $i3 goto label05;

     label04:
        return 0;

     label05:
        if r3 == null goto label07;

        $r7 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: java.util.concurrent.ConcurrentHashMap$TreeNode parent>;

        if $r7 != r0 goto label06;

        $i1 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        $i0 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: int hash>;

        if $i1 >= $i0 goto label07;

     label06:
        return 0;

     label07:
        $z0 = r0.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z0 == 0 goto label08;

        if r2 == null goto label08;

        $z3 = r2.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z3 == 0 goto label08;

        if r3 == null goto label08;

        $z4 = r3.<java.util.concurrent.ConcurrentHashMap$TreeNode: boolean red>;

        if $z4 == 0 goto label08;

        return 0;

     label08:
        if r2 == null goto label09;

        $z2 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r2);

        if $z2 != 0 goto label09;

        return 0;

     label09:
        if r3 == null goto label10;

        $z1 = staticinvoke <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean checkInvariants(java.util.concurrent.ConcurrentHashMap$TreeNode)>(r3);

        if $z1 != 0 goto label10;

        return 0;

     label10:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1;
        sun.misc.Unsafe $r2, $r3;
        java.lang.reflect.Field $r4;
        long $l0;
        java.lang.Exception $r5, r7;
        java.lang.Error $r6;

        <java.util.concurrent.ConcurrentHashMap$TreeBin: int READER> = 4;

        <java.util.concurrent.ConcurrentHashMap$TreeBin: int WAITER> = 2;

        <java.util.concurrent.ConcurrentHashMap$TreeBin: int WRITER> = 1;

        $r1 = class "java/util/concurrent/ConcurrentHashMap";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.concurrent.ConcurrentHashMap$TreeBin: boolean $assertionsDisabled> = $z1;

     label3:
        $r2 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U> = $r2;

        r0 = class "java/util/concurrent/ConcurrentHashMap$TreeBin";

        $r3 = <java.util.concurrent.ConcurrentHashMap$TreeBin: sun.misc.Unsafe U>;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("lockState");

        $l0 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.ConcurrentHashMap$TreeBin: long LOCKSTATE> = $l0;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r7);

        throw $r6;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }
}
