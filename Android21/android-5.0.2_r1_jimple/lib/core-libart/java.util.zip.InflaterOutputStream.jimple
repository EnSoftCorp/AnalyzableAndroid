public class java.util.zip.InflaterOutputStream extends java.io.FilterOutputStream
{
    private static final int DEFAULT_BUFFER_SIZE;
    protected final java.util.zip.Inflater inf;
    protected final byte[] buf;
    private boolean closed;

    public void <init>(java.io.OutputStream)
    {
        java.util.zip.InflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Inflater $r2;

        r0 := @this: java.util.zip.InflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new java.util.zip.Inflater;

        specialinvoke $r2.<java.util.zip.Inflater: void <init>()>();

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Inflater)>(r1, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Inflater)
    {
        java.util.zip.InflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Inflater r2;

        r0 := @this: java.util.zip.InflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Inflater;

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Inflater,int)>(r1, r2, 1024);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Inflater, int)
    {
        java.util.zip.InflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Inflater r2;
        int i0;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: java.util.zip.InflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Inflater;

        i0 := @parameter2: int;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<java.util.zip.InflaterOutputStream: boolean closed> = 0;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("out == null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("inf == null");

        throw $r9;

     label2:
        if i0 > 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferSize <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<java.util.zip.InflaterOutputStream: java.util.zip.Inflater inf> = r2;

        $r3 = newarray (byte)[i0];

        r0.<java.util.zip.InflaterOutputStream: byte[] buf> = $r3;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.InflaterOutputStream r0;
        boolean $z0;
        java.util.zip.Inflater $r1;
        java.io.OutputStream $r2;

        r0 := @this: java.util.zip.InflaterOutputStream;

        $z0 = r0.<java.util.zip.InflaterOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.util.zip.InflaterOutputStream: void finish()>();

        $r1 = r0.<java.util.zip.InflaterOutputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        $r2 = r0.<java.util.zip.InflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        r0.<java.util.zip.InflaterOutputStream: boolean closed> = 1;

     label1:
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.util.zip.InflaterOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: java.util.zip.InflaterOutputStream;

        virtualinvoke r0.<java.util.zip.InflaterOutputStream: void finish()>();

        $r1 = r0.<java.util.zip.InflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.util.zip.InflaterOutputStream r0;

        r0 := @this: java.util.zip.InflaterOutputStream;

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void checkClosed()>();

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void write()>();

        return;
    }

    public void write(int) throws java.io.IOException, java.util.zip.ZipException
    {
        java.util.zip.InflaterOutputStream r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: java.util.zip.InflaterOutputStream;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r1[0] = $b1;

        virtualinvoke r0.<java.util.zip.InflaterOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException, java.util.zip.ZipException
    {
        java.util.zip.InflaterOutputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        java.util.zip.Inflater $r2;

        r0 := @this: java.util.zip.InflaterOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void checkClosed()>();

        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = r0.<java.util.zip.InflaterOutputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r2.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r1, i0, i1);

        specialinvoke r0.<java.util.zip.InflaterOutputStream: void write()>();

        return;
    }

    private void write() throws java.io.IOException, java.util.zip.ZipException
    {
        java.util.zip.InflaterOutputStream r0;
        int i0, $i1;
        byte[] $r1, $r3;
        java.util.zip.Inflater $r2;
        java.io.OutputStream $r4;
        java.util.zip.DataFormatException $r5;
        java.util.zip.ZipException $r6;

        r0 := @this: java.util.zip.InflaterOutputStream;

     label1:
        $r2 = r0.<java.util.zip.InflaterOutputStream: java.util.zip.Inflater inf>;

        $r1 = r0.<java.util.zip.InflaterOutputStream: byte[] buf>;

        $i1 = virtualinvoke $r2.<java.util.zip.Inflater: int inflate(byte[])>($r1);

        i0 = $i1;

        if $i1 <= 0 goto label2;

        $r4 = r0.<java.util.zip.InflaterOutputStream: java.io.OutputStream out>;

        $r3 = r0.<java.util.zip.InflaterOutputStream: byte[] buf>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0);

        goto label1;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.util.zip.ZipException;

        specialinvoke $r6.<java.util.zip.ZipException: void <init>()>();

        throw $r6;

     label4:
        return;

        catch java.util.zip.DataFormatException from label1 to label2 with label3;
    }

    private void checkClosed() throws java.io.IOException
    {
        java.util.zip.InflaterOutputStream r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: java.util.zip.InflaterOutputStream;

        $z0 = r0.<java.util.zip.InflaterOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.InflaterOutputStream: int DEFAULT_BUFFER_SIZE> = 1024;

        return;
    }
}
