public abstract class java.util.concurrent.locks.AbstractOwnableSynchronizer extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.lang.Thread exclusiveOwnerThread;

    protected void <init>()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected final void setExclusiveOwnerThread(java.lang.Thread)
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;
        java.lang.Thread r1;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        r1 := @parameter0: java.lang.Thread;

        r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread> = r1;

        return;
    }

    protected final java.lang.Thread getExclusiveOwnerThread()
    {
        java.util.concurrent.locks.AbstractOwnableSynchronizer r0;
        java.lang.Thread $r1;

        r0 := @this: java.util.concurrent.locks.AbstractOwnableSynchronizer;

        $r1 = r0.<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread exclusiveOwnerThread>;

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.AbstractOwnableSynchronizer: long serialVersionUID> = 3737899427754241961L;

        return;
    }
}
