public class java.util.concurrent.Phaser extends java.lang.Object
{
    private volatile long state;
    private static final int MAX_PARTIES;
    private static final int MAX_PHASE;
    private static final int PARTIES_SHIFT;
    private static final int PHASE_SHIFT;
    private static final int UNARRIVED_MASK;
    private static final long PARTIES_MASK;
    private static final long COUNTS_MASK;
    private static final long TERMINATION_BIT;
    private static final int ONE_ARRIVAL;
    private static final int ONE_PARTY;
    private static final int ONE_DEREGISTER;
    private static final int EMPTY;
    private final java.util.concurrent.Phaser parent;
    private final java.util.concurrent.Phaser root;
    private final java.util.concurrent.atomic.AtomicReference evenQ;
    private final java.util.concurrent.atomic.AtomicReference oddQ;
    private static final int NCPU;
    static final int SPINS_PER_ARRIVAL;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long stateOffset;

    private static int unarrivedOf(long)
    {
        long l0;
        int i1, $i2;

        l0 := @parameter0: long;

        i1 = (int) l0;

        if i1 != 1 goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $i2 = i1 & 65535;

     label2:
        return $i2;
    }

    private static int partiesOf(long)
    {
        long l0;
        int $i1, $i2;

        l0 := @parameter0: long;

        $i1 = (int) l0;

        $i2 = $i1 >>> 16;

        return $i2;
    }

    private static int phaseOf(long)
    {
        long l0, $l1;
        int $i2;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $i2 = (int) $l1;

        return $i2;
    }

    private static int arrivedOf(long)
    {
        long l0;
        int i1, $i2, $i3, $i4;

        l0 := @parameter0: long;

        i1 = (int) l0;

        if i1 != 1 goto label1;

        $i4 = 0;

        goto label2;

     label1:
        $i3 = i1 >>> 16;

        $i2 = i1 & 65535;

        $i4 = $i3 - $i2;

     label2:
        return $i4;
    }

    private java.util.concurrent.atomic.AtomicReference queueFor(int)
    {
        java.util.concurrent.Phaser r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicReference $r1;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 != 0 goto label1;

        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ>;

        goto label2;

     label1:
        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ>;

     label2:
        return $r1;
    }

    private java.lang.String badArrive(long)
    {
        java.util.concurrent.Phaser r0;
        long l0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: java.util.concurrent.Phaser;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted arrival of unregistered party for ");

        $r3 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String stateToString(long)>(l0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String badRegister(long)
    {
        java.util.concurrent.Phaser r0;
        long l0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this: java.util.concurrent.Phaser;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to register more than 65535 parties for ");

        $r3 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String stateToString(long)>(l0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private int doArrive(int)
    {
        java.util.concurrent.Phaser r0, r1, $r3, $r4;
        int i0, i2, i3, i4, i6, i7, $i13, $i16, $i21;
        long l1, l5, $l8, $l9, $l10, $l11, $l12, $l14, $l15, $l17, $l18, $l19, $l20, l22, l23, l24;
        boolean $z0, $z1;
        sun.misc.Unsafe $r2, $r5, $r6;
        java.lang.String $r7;
        java.lang.IllegalStateException $r8;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

     label01:
        if r1 != r0 goto label02;

        $l8 = r0.<java.util.concurrent.Phaser: long state>;

        goto label03;

     label02:
        $l8 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label03:
        l1 = $l8;

        $l9 = l1 >>> 32;

        i2 = (int) $l9;

        if i2 >= 0 goto label04;

        return i2;

     label04:
        i3 = (int) l1;

        if i3 != 1 goto label05;

        $i21 = 0;

        goto label06;

     label05:
        $i21 = i3 & 65535;

     label06:
        i4 = $i21;

        if i4 > 0 goto label07;

        $r8 = new java.lang.IllegalStateException;

        $r7 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String badArrive(long)>(l1);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label07:
        $r2 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l12 = <java.util.concurrent.Phaser: long stateOffset>;

        $l10 = (long) i0;

        $l11 = l1 - $l10;

        l22 = $l11;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l12, l1, $l11);

        if $z0 == 0 goto label14;

        if i4 != 1 goto label13;

        l5 = l22 & 4294901760L;

        $i13 = (int) l5;

        i6 = $i13 >>> 16;

        if r1 != r0 goto label11;

        $z1 = virtualinvoke r0.<java.util.concurrent.Phaser: boolean onAdvance(int,int)>(i2, i6);

        if $z1 == 0 goto label08;

        l23 = l5 | -9223372036854775808L;

        goto label10;

     label08:
        if i6 != 0 goto label09;

        l23 = l5 | 1L;

        goto label10;

     label09:
        $l17 = (long) i6;

        l23 = l5 | $l17;

     label10:
        $i16 = i2 + 1;

        i7 = $i16 & 2147483647;

        $l19 = (long) i7;

        $l20 = $l19 << 32;

        l24 = l23 | $l20;

        $r6 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l18 = <java.util.concurrent.Phaser: long stateOffset>;

        virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l18, l22, l24);

        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>(i2);

        goto label13;

     label11:
        if i6 != 0 goto label12;

        $r4 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent>;

        i2 = specialinvoke $r4.<java.util.concurrent.Phaser: int doArrive(int)>(65537);

        $r5 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l15 = <java.util.concurrent.Phaser: long stateOffset>;

        $l14 = l22 | 1L;

        virtualinvoke $r5.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l15, l22, $l14);

        goto label13;

     label12:
        $r3 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent>;

        i2 = specialinvoke $r3.<java.util.concurrent.Phaser: int doArrive(int)>(1);

     label13:
        return i2;

     label14:
        goto label01;
    }

    private int doRegister(int)
    {
        java.util.concurrent.Phaser r0, r1, $r5, $r8, r12;
        int i0, i2, i4, i5, i6, $i13;
        long l1, l3, l7, $l8, $l9, $l10, $l11, $l12, $l14, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l28;
        java.lang.Throwable r2, $r9;
        byte $b15, $b29;
        sun.misc.Unsafe $r4, $r6, $r7;
        boolean $z0, $z1, $z2;
        java.lang.String $r10;
        java.lang.IllegalStateException $r11;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        $l8 = (long) i0;

        $l11 = $l8 << 16;

        $l9 = (long) i0;

        l1 = $l11 | $l9;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent>;

     label01:
        if r1 != null goto label02;

        $l10 = r0.<java.util.concurrent.Phaser: long state>;

        goto label03;

     label02:
        $l10 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label03:
        l3 = $l10;

        i4 = (int) l3;

        i5 = i4 >>> 16;

        i6 = i4 & 65535;

        $i13 = 65535 - i5;

        if i0 <= $i13 goto label04;

        $r11 = new java.lang.IllegalStateException;

        $r10 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String badRegister(long)>(l3);

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r11;

     label04:
        $l12 = l3 >>> 32;

        i2 = (int) $l12;

        if i2 >= 0 goto label05;

        goto label21;

     label05:
        if i4 == 1 goto label08;

        if r1 == null goto label06;

        $l28 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

        $b29 = $l28 cmp l3;

        if $b29 != 0 goto label20;

     label06:
        if i6 != 0 goto label07;

        $r8 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        specialinvoke $r8.<java.util.concurrent.Phaser: int internalAwaitAdvance(int,java.util.concurrent.Phaser$QNode)>(i2, null);

        goto label20;

     label07:
        $r7 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l25 = <java.util.concurrent.Phaser: long stateOffset>;

        $l26 = l3 + l1;

        $z2 = virtualinvoke $r7.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l25, l3, $l26);

        if $z2 == 0 goto label20;

        goto label21;

     label08:
        if r1 != null goto label10;

        $l23 = (long) i2;

        $l24 = $l23 << 32;

        l7 = $l24 | l1;

        $r6 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l22 = <java.util.concurrent.Phaser: long stateOffset>;

        $z1 = virtualinvoke $r6.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l22, l3, l7);

        if $z1 == 0 goto label09;

        goto label21;

     label09:
        goto label20;

     label10:
        r12 = r0;

        entermonitor r0;

     label11:
        $l14 = r0.<java.util.concurrent.Phaser: long state>;

        $b15 = $l14 cmp l3;

        if $b15 != 0 goto label16;

        i2 = specialinvoke r1.<java.util.concurrent.Phaser: int doRegister(int)>(1);

        if i2 >= 0 goto label13;

        exitmonitor r12;

     label12:
        goto label21;

     label13:
        $r4 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l19 = <java.util.concurrent.Phaser: long stateOffset>;

        $l16 = (long) i2;

        $l18 = $l16 << 32;

        $l17 = $l18 | l1;

        $z0 = virtualinvoke $r4.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l19, l3, $l17);

        if $z0 != 0 goto label14;

        l3 = r0.<java.util.concurrent.Phaser: long state>;

        $r5 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        $l21 = $r5.<java.util.concurrent.Phaser: long state>;

        $l20 = $l21 >>> 32;

        i2 = (int) $l20;

        goto label13;

     label14:
        exitmonitor r12;

     label15:
        goto label21;

     label16:
        exitmonitor r12;

     label17:
        goto label20;

     label18:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r12;

     label19:
        throw r2;

     label20:
        goto label01;

     label21:
        return i2;

        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label15 with label18;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label18 to label19 with label18;
    }

    private long reconcileState()
    {
        java.util.concurrent.Phaser r0, r1;
        long l0, $l3, $l4, $l6, $l8, $l11, $l12, $l13, $l14, $l15, $l16, $l17;
        int i1, i2, $i5, $i7, $i9, $i10;
        sun.misc.Unsafe $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        l0 = r0.<java.util.concurrent.Phaser: long state>;

        if r1 == r0 goto label5;

     label1:
        $l3 = r1.<java.util.concurrent.Phaser: long state>;

        $l4 = $l3 >>> 32;

        $i5 = (int) $l4;

        i1 = $i5;

        $l6 = l0 >>> 32;

        $i7 = (int) $l6;

        if $i5 == $i7 goto label5;

        $r2 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l17 = <java.util.concurrent.Phaser: long stateOffset>;

        $l15 = l0;

        $l8 = (long) i1;

        $l13 = $l8 << 32;

        if i1 >= 0 goto label2;

        $l14 = l0 & 4294967295L;

        goto label4;

     label2:
        $i9 = (int) l0;

        $i10 = $i9 >>> 16;

        i2 = $i10;

        if $i10 != 0 goto label3;

        $l14 = 1L;

        goto label4;

     label3:
        $l12 = l0 & 4294901760L;

        $l11 = (long) i2;

        $l14 = $l12 | $l11;

     label4:
        $l16 = $l13 | $l14;

        l0 = $l16;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l17, $l15, $l16);

        if $z0 != 0 goto label5;

        l0 = r0.<java.util.concurrent.Phaser: long state>;

        goto label1;

     label5:
        return l0;
    }

    public void <init>()
    {
        java.util.concurrent.Phaser r0;

        r0 := @this: java.util.concurrent.Phaser;

        specialinvoke r0.<java.util.concurrent.Phaser: void <init>(java.util.concurrent.Phaser,int)>(null, 0);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.Phaser r0;
        int i0;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.Phaser: void <init>(java.util.concurrent.Phaser,int)>(null, i0);

        return;
    }

    public void <init>(java.util.concurrent.Phaser)
    {
        java.util.concurrent.Phaser r0, r1;

        r0 := @this: java.util.concurrent.Phaser;

        r1 := @parameter0: java.util.concurrent.Phaser;

        specialinvoke r0.<java.util.concurrent.Phaser: void <init>(java.util.concurrent.Phaser,int)>(r1, 0);

        return;
    }

    public void <init>(java.util.concurrent.Phaser, int)
    {
        java.util.concurrent.Phaser r0, r1, r2;
        int i0, i1, $i2;
        java.util.concurrent.atomic.AtomicReference $r3, $r4, $r5, $r6;
        long $l3, $l4, $l5, $l6, $l7, $l8, $l9;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.util.concurrent.Phaser;

        r1 := @parameter0: java.util.concurrent.Phaser;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = i0 >>> 16;

        if $i2 == 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Illegal number of parties");

        throw $r7;

     label1:
        i1 = 0;

        r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent> = r1;

        if r1 == null goto label3;

        r2 = r1.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root> = r2;

        $r5 = r2.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ>;

        r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ> = $r5;

        $r6 = r2.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ>;

        r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ> = $r6;

        if i0 == 0 goto label2;

        i1 = specialinvoke r1.<java.util.concurrent.Phaser: int doRegister(int)>(1);

     label2:
        goto label4;

     label3:
        r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root> = r0;

        $r3 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ> = $r3;

        $r4 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ> = $r4;

     label4:
        if i0 != 0 goto label5;

        $l9 = 1L;

        goto label6;

     label5:
        $l3 = (long) i1;

        $l6 = $l3 << 32;

        $l4 = (long) i0;

        $l5 = $l4 << 16;

        $l8 = $l6 | $l5;

        $l7 = (long) i0;

        $l9 = $l8 | $l7;

     label6:
        r0.<java.util.concurrent.Phaser: long state> = $l9;

        return;
    }

    public int register()
    {
        java.util.concurrent.Phaser r0;
        int $i0;

        r0 := @this: java.util.concurrent.Phaser;

        $i0 = specialinvoke r0.<java.util.concurrent.Phaser: int doRegister(int)>(1);

        return $i0;
    }

    public int bulkRegister(int)
    {
        java.util.concurrent.Phaser r0;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        if i0 != 0 goto label2;

        $i2 = virtualinvoke r0.<java.util.concurrent.Phaser: int getPhase()>();

        return $i2;

     label2:
        $i1 = specialinvoke r0.<java.util.concurrent.Phaser: int doRegister(int)>(i0);

        return $i1;
    }

    public int arrive()
    {
        java.util.concurrent.Phaser r0;
        int $i0;

        r0 := @this: java.util.concurrent.Phaser;

        $i0 = specialinvoke r0.<java.util.concurrent.Phaser: int doArrive(int)>(1);

        return $i0;
    }

    public int arriveAndDeregister()
    {
        java.util.concurrent.Phaser r0;
        int $i0;

        r0 := @this: java.util.concurrent.Phaser;

        $i0 = specialinvoke r0.<java.util.concurrent.Phaser: int doArrive(int)>(65537);

        return $i0;
    }

    public int arriveAndAwaitAdvance()
    {
        java.util.concurrent.Phaser r0, r1, $r4;
        long l0, l4, $l7, $l8, $l9, $l10, $l13, $l14, $l15, $l16, $l17, $l19, l23, l24, l25;
        int i1, i2, i3, i5, i6, $i11, $i12, $i18, $i20, $i21, $i22;
        boolean $z0, $z1, $z2;
        sun.misc.Unsafe $r2, $r3;
        java.lang.String $r5;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.util.concurrent.Phaser;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

     label01:
        if r1 != r0 goto label02;

        $l7 = r0.<java.util.concurrent.Phaser: long state>;

        goto label03;

     label02:
        $l7 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label03:
        l0 = $l7;

        $l8 = l0 >>> 32;

        i1 = (int) $l8;

        if i1 >= 0 goto label04;

        return i1;

     label04:
        i2 = (int) l0;

        if i2 != 1 goto label05;

        $i21 = 0;

        goto label06;

     label05:
        $i21 = i2 & 65535;

     label06:
        i3 = $i21;

        if i3 > 0 goto label07;

        $r6 = new java.lang.IllegalStateException;

        $r5 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String badArrive(long)>(l0);

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label07:
        $r2 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l10 = <java.util.concurrent.Phaser: long stateOffset>;

        $l9 = l0 - 1L;

        l23 = $l9;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l10, l0, $l9);

        if $z0 == 0 goto label14;

        if i3 <= 1 goto label08;

        $i22 = specialinvoke r1.<java.util.concurrent.Phaser: int internalAwaitAdvance(int,java.util.concurrent.Phaser$QNode)>(i1, null);

        return $i22;

     label08:
        if r1 == r0 goto label09;

        $r4 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent>;

        $i20 = virtualinvoke $r4.<java.util.concurrent.Phaser: int arriveAndAwaitAdvance()>();

        return $i20;

     label09:
        l4 = l23 & 4294901760L;

        $i11 = (int) l4;

        i5 = $i11 >>> 16;

        $z1 = virtualinvoke r0.<java.util.concurrent.Phaser: boolean onAdvance(int,int)>(i1, i5);

        if $z1 == 0 goto label10;

        l24 = l4 | -9223372036854775808L;

        goto label12;

     label10:
        if i5 != 0 goto label11;

        l24 = l4 | 1L;

        goto label12;

     label11:
        $l13 = (long) i5;

        l24 = l4 | $l13;

     label12:
        $i12 = i1 + 1;

        i6 = $i12 & 2147483647;

        $l15 = (long) i6;

        $l14 = $l15 << 32;

        l25 = l24 | $l14;

        $r3 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l16 = <java.util.concurrent.Phaser: long stateOffset>;

        $z2 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r0, $l16, l23, l25);

        if $z2 != 0 goto label13;

        $l17 = r0.<java.util.concurrent.Phaser: long state>;

        $l19 = $l17 >>> 32;

        $i18 = (int) $l19;

        return $i18;

     label13:
        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>(i1);

        return i6;

     label14:
        goto label01;
    }

    public int awaitAdvance(int)
    {
        java.util.concurrent.Phaser r0, r1;
        int i0, i2, $i5;
        long l1, $l3, $l4;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        if r1 != r0 goto label1;

        $l3 = r0.<java.util.concurrent.Phaser: long state>;

        goto label2;

     label1:
        $l3 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label2:
        l1 = $l3;

        $l4 = l1 >>> 32;

        i2 = (int) $l4;

        if i0 >= 0 goto label3;

        return i0;

     label3:
        if i2 != i0 goto label4;

        $i5 = specialinvoke r1.<java.util.concurrent.Phaser: int internalAwaitAdvance(int,java.util.concurrent.Phaser$QNode)>(i0, null);

        return $i5;

     label4:
        return i2;
    }

    public int awaitAdvanceInterruptibly(int) throws java.lang.InterruptedException
    {
        java.util.concurrent.Phaser r0, r1;
        int i0, i2;
        long l1, $l3, $l4;
        java.util.concurrent.Phaser$QNode r2, $r3;
        boolean $z0;
        java.lang.InterruptedException $r4;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        if r1 != r0 goto label1;

        $l3 = r0.<java.util.concurrent.Phaser: long state>;

        goto label2;

     label1:
        $l3 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label2:
        l1 = $l3;

        $l4 = l1 >>> 32;

        i2 = (int) $l4;

        if i0 >= 0 goto label3;

        return i0;

     label3:
        if i2 != i0 goto label4;

        $r3 = new java.util.concurrent.Phaser$QNode;

        specialinvoke $r3.<java.util.concurrent.Phaser$QNode: void <init>(java.util.concurrent.Phaser,int,boolean,boolean,long)>(r0, i0, 1, 0, 0L);

        r2 = $r3;

        i2 = specialinvoke r1.<java.util.concurrent.Phaser: int internalAwaitAdvance(int,java.util.concurrent.Phaser$QNode)>(i0, r2);

        $z0 = r2.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted>;

        if $z0 == 0 goto label4;

        $r4 = new java.lang.InterruptedException;

        specialinvoke $r4.<java.lang.InterruptedException: void <init>()>();

        throw $r4;

     label4:
        return i2;
    }

    public int awaitAdvanceInterruptibly(int, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.Phaser r0, r2;
        int i0, i4;
        long l1, l2, l3, $l5, $l6;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.Phaser$QNode r3, $r4;
        boolean $z0;
        java.lang.InterruptedException $r5;
        java.util.concurrent.TimeoutException $r6;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        l2 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l1);

        r2 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        if r2 != r0 goto label1;

        $l5 = r0.<java.util.concurrent.Phaser: long state>;

        goto label2;

     label1:
        $l5 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

     label2:
        l3 = $l5;

        $l6 = l3 >>> 32;

        i4 = (int) $l6;

        if i0 >= 0 goto label3;

        return i0;

     label3:
        if i4 != i0 goto label5;

        $r4 = new java.util.concurrent.Phaser$QNode;

        specialinvoke $r4.<java.util.concurrent.Phaser$QNode: void <init>(java.util.concurrent.Phaser,int,boolean,boolean,long)>(r0, i0, 1, 1, l2);

        r3 = $r4;

        i4 = specialinvoke r2.<java.util.concurrent.Phaser: int internalAwaitAdvance(int,java.util.concurrent.Phaser$QNode)>(i0, r3);

        $z0 = r3.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted>;

        if $z0 == 0 goto label4;

        $r5 = new java.lang.InterruptedException;

        specialinvoke $r5.<java.lang.InterruptedException: void <init>()>();

        throw $r5;

     label4:
        if i4 != i0 goto label5;

        $r6 = new java.util.concurrent.TimeoutException;

        specialinvoke $r6.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r6;

     label5:
        return i4;
    }

    public void forceTermination()
    {
        java.util.concurrent.Phaser r0, r1;
        long l0, $l1, $l3, $l4;
        byte $b2;
        sun.misc.Unsafe $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

     label1:
        $l1 = r1.<java.util.concurrent.Phaser: long state>;

        l0 = $l1;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label2;

        $r2 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $l4 = <java.util.concurrent.Phaser: long stateOffset>;

        $l3 = l0 | -9223372036854775808L;

        $z0 = virtualinvoke $r2.<sun.misc.Unsafe: boolean compareAndSwapLong(java.lang.Object,long,long,long)>(r1, $l4, l0, $l3);

        if $z0 == 0 goto label1;

        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>(0);

        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>(1);

        return;

     label2:
        return;
    }

    public final int getPhase()
    {
        java.util.concurrent.Phaser r0, $r1;
        long $l0, $l1;
        int $i2;

        r0 := @this: java.util.concurrent.Phaser;

        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        $l0 = $r1.<java.util.concurrent.Phaser: long state>;

        $l1 = $l0 >>> 32;

        $i2 = (int) $l1;

        return $i2;
    }

    public int getRegisteredParties()
    {
        java.util.concurrent.Phaser r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.concurrent.Phaser;

        $l0 = r0.<java.util.concurrent.Phaser: long state>;

        $i1 = staticinvoke <java.util.concurrent.Phaser: int partiesOf(long)>($l0);

        return $i1;
    }

    public int getArrivedParties()
    {
        java.util.concurrent.Phaser r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.concurrent.Phaser;

        $l0 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

        $i1 = staticinvoke <java.util.concurrent.Phaser: int arrivedOf(long)>($l0);

        return $i1;
    }

    public int getUnarrivedParties()
    {
        java.util.concurrent.Phaser r0;
        long $l0;
        int $i1;

        r0 := @this: java.util.concurrent.Phaser;

        $l0 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

        $i1 = staticinvoke <java.util.concurrent.Phaser: int unarrivedOf(long)>($l0);

        return $i1;
    }

    public java.util.concurrent.Phaser getParent()
    {
        java.util.concurrent.Phaser r0, $r1;

        r0 := @this: java.util.concurrent.Phaser;

        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser parent>;

        return $r1;
    }

    public java.util.concurrent.Phaser getRoot()
    {
        java.util.concurrent.Phaser r0, $r1;

        r0 := @this: java.util.concurrent.Phaser;

        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        return $r1;
    }

    public boolean isTerminated()
    {
        java.util.concurrent.Phaser r0, $r1;
        long $l0;
        byte $b1;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        $r1 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        $l0 = $r1.<java.util.concurrent.Phaser: long state>;

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean onAdvance(int, int)
    {
        java.util.concurrent.Phaser r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.Phaser r0;
        long $l0;
        java.lang.String $r1;

        r0 := @this: java.util.concurrent.Phaser;

        $l0 = specialinvoke r0.<java.util.concurrent.Phaser: long reconcileState()>();

        $r1 = specialinvoke r0.<java.util.concurrent.Phaser: java.lang.String stateToString(long)>($l0);

        return $r1;
    }

    private java.lang.String stateToString(long)
    {
        java.util.concurrent.Phaser r0;
        long l0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r2, $r11;
        int $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.Phaser;

        l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[phase = ");

        $i1 = staticinvoke <java.util.concurrent.Phaser: int phaseOf(long)>(l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parties = ");

        $i2 = staticinvoke <java.util.concurrent.Phaser: int partiesOf(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" arrived = ");

        $i3 = staticinvoke <java.util.concurrent.Phaser: int arrivedOf(long)>(l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private void releaseWaiters(int)
    {
        java.util.concurrent.Phaser r0, $r6;
        int i0, $i1, $i4, $i5;
        java.util.concurrent.Phaser$QNode r1, $r5, $r7;
        java.lang.Thread r2, $r8;
        java.util.concurrent.atomic.AtomicReference r3, $r9;
        java.lang.Object $r4;
        long $l2, $l3;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        $i1 = i0 & 1;

        if $i1 != 0 goto label1;

        $r9 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ>;

        goto label2;

     label1:
        $r9 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ>;

     label2:
        r3 = $r9;

     label3:
        $r4 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.util.concurrent.Phaser$QNode) $r4;

        r1 = $r5;

        if $r5 == null goto label4;

        $i5 = r1.<java.util.concurrent.Phaser$QNode: int phase>;

        $r6 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        $l2 = $r6.<java.util.concurrent.Phaser: long state>;

        $l3 = $l2 >>> 32;

        $i4 = (int) $l3;

        if $i5 == $i4 goto label4;

        $r7 = r1.<java.util.concurrent.Phaser$QNode: java.util.concurrent.Phaser$QNode next>;

        $z0 = virtualinvoke r3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r1, $r7);

        if $z0 == 0 goto label3;

        $r8 = r1.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread>;

        r2 = $r8;

        if $r8 == null goto label3;

        r1.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r2);

        goto label3;

     label4:
        return;
    }

    private int abortWait(int)
    {
        java.util.concurrent.Phaser r0, $r5;
        int i0, i1, $i2, $i5;
        java.util.concurrent.atomic.AtomicReference r1, $r8;
        java.lang.Thread r2, $r6;
        java.util.concurrent.Phaser$QNode r3, $r7;
        java.lang.Object $r4;
        long $l3, $l4;
        boolean $z0;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        $i2 = i0 & 1;

        if $i2 != 0 goto label1;

        $r8 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ>;

        goto label2;

     label1:
        $r8 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ>;

     label2:
        r1 = $r8;

     label3:
        $r4 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (java.util.concurrent.Phaser$QNode) $r4;

        $r5 = r0.<java.util.concurrent.Phaser: java.util.concurrent.Phaser root>;

        $l3 = $r5.<java.util.concurrent.Phaser: long state>;

        $l4 = $l3 >>> 32;

        i1 = (int) $l4;

        if r3 == null goto label4;

        $r6 = r3.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread>;

        r2 = $r6;

        if $r6 == null goto label5;

        $i5 = r3.<java.util.concurrent.Phaser$QNode: int phase>;

        if $i5 != i1 goto label5;

     label4:
        return i1;

     label5:
        $r7 = r3.<java.util.concurrent.Phaser$QNode: java.util.concurrent.Phaser$QNode next>;

        $z0 = virtualinvoke r1.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r3, $r7);

        if $z0 == 0 goto label6;

        if r2 == null goto label6;

        r3.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

        staticinvoke <java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>(r2);

     label6:
        goto label3;
    }

    private int internalAwaitAdvance(int, java.util.concurrent.Phaser$QNode)
    {
        java.util.concurrent.Phaser r0;
        int i0, i1, i2, i4, i5, $i6, $i9, $i11, $i13, $i14, $i16, $i18, $i19, $i20, $i21;
        java.util.concurrent.Phaser$QNode r1, $r5, $r6, r10;
        boolean z0, z1, $z2, $z3, $z4;
        long l3, $l7, $l8, $l10, $l12, $l15, $l17;
        java.lang.Thread $r2, $r3;
        java.lang.Object $r4;
        java.util.concurrent.atomic.AtomicReference $r7, r9;
        java.lang.InterruptedException $r8;

        r0 := @this: java.util.concurrent.Phaser;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.concurrent.Phaser$QNode;

        $i6 = i0 - 1;

        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>($i6);

        z0 = 0;

        i1 = 0;

        i2 = <java.util.concurrent.Phaser: int SPINS_PER_ARRIVAL>;

     label01:
        $l7 = r0.<java.util.concurrent.Phaser: long state>;

        l3 = $l7;

        $l8 = $l7 >>> 32;

        $i9 = (int) $l8;

        i4 = $i9;

        if $i9 != i0 goto label14;

        if r1 != null goto label05;

        $i19 = (int) l3;

        i5 = $i19 & 65535;

        if i5 == i1 goto label02;

        i1 = i5;

        $i20 = <java.util.concurrent.Phaser: int NCPU>;

        if i5 >= $i20 goto label02;

        $i21 = <java.util.concurrent.Phaser: int SPINS_PER_ARRIVAL>;

        i2 = i2 + $i21;

     label02:
        z1 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if z1 != 0 goto label03;

        i2 = i2 + -1;

        if i2 >= 0 goto label04;

     label03:
        $r6 = new java.util.concurrent.Phaser$QNode;

        specialinvoke $r6.<java.util.concurrent.Phaser$QNode: void <init>(java.util.concurrent.Phaser,int,boolean,boolean,long)>(r0, i0, 0, 0, 0L);

        r1 = $r6;

        r1.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted> = z1;

     label04:
        goto label01;

     label05:
        $z4 = virtualinvoke r1.<java.util.concurrent.Phaser$QNode: boolean isReleasable()>();

        if $z4 == 0 goto label06;

        goto label14;

     label06:
        if z0 != 0 goto label11;

        $i14 = i0 & 1;

        if $i14 != 0 goto label07;

        $r7 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference evenQ>;

        goto label08;

     label07:
        $r7 = r0.<java.util.concurrent.Phaser: java.util.concurrent.atomic.AtomicReference oddQ>;

     label08:
        r9 = $r7;

        $r4 = virtualinvoke r9.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r5 = (java.util.concurrent.Phaser$QNode) $r4;

        r1.<java.util.concurrent.Phaser$QNode: java.util.concurrent.Phaser$QNode next> = $r5;

        r10 = $r5;

        if r10 == null goto label09;

        $i18 = r10.<java.util.concurrent.Phaser$QNode: int phase>;

        if $i18 != i0 goto label10;

     label09:
        $l15 = r0.<java.util.concurrent.Phaser: long state>;

        $l17 = $l15 >>> 32;

        $i16 = (int) $l17;

        if $i16 != i0 goto label10;

        z0 = virtualinvoke r9.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(r10, r1);

     label10:
        goto label01;

     label11:
        staticinvoke <java.util.concurrent.ForkJoinPool: void managedBlock(java.util.concurrent.ForkJoinPool$ManagedBlocker)>(r1);

     label12:
        goto label01;

     label13:
        $r8 := @caughtexception;

        r1.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted> = 1;

        goto label01;

     label14:
        if r1 == null goto label17;

        $r2 = r1.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread>;

        if $r2 == null goto label15;

        r1.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

     label15:
        $z2 = r1.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted>;

        if $z2 == 0 goto label16;

        $z3 = r1.<java.util.concurrent.Phaser$QNode: boolean interruptible>;

        if $z3 != 0 goto label16;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label16:
        if i4 != i0 goto label17;

        $l10 = r0.<java.util.concurrent.Phaser: long state>;

        $l12 = $l10 >>> 32;

        $i11 = (int) $l12;

        i4 = $i11;

        if $i11 != i0 goto label17;

        $i13 = specialinvoke r0.<java.util.concurrent.Phaser: int abortWait(int)>(i0);

        return $i13;

     label17:
        specialinvoke r0.<java.util.concurrent.Phaser: void releaseWaiters(int)>(i0);

        return i4;

        catch java.lang.InterruptedException from label11 to label12 with label13;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        java.lang.Runtime $r1;
        int $i0, $i1;
        sun.misc.Unsafe $r2, $r3;
        java.lang.reflect.Field $r4;
        long $l2;
        short $s3;
        java.lang.Exception $r5, r7;
        java.lang.Error $r6;

        <java.util.concurrent.Phaser: int EMPTY> = 1;

        <java.util.concurrent.Phaser: int ONE_DEREGISTER> = 65537;

        <java.util.concurrent.Phaser: int ONE_PARTY> = 65536;

        <java.util.concurrent.Phaser: int ONE_ARRIVAL> = 1;

        <java.util.concurrent.Phaser: long TERMINATION_BIT> = -9223372036854775808L;

        <java.util.concurrent.Phaser: long COUNTS_MASK> = 4294967295L;

        <java.util.concurrent.Phaser: long PARTIES_MASK> = 4294901760L;

        <java.util.concurrent.Phaser: int UNARRIVED_MASK> = 65535;

        <java.util.concurrent.Phaser: int PHASE_SHIFT> = 32;

        <java.util.concurrent.Phaser: int PARTIES_SHIFT> = 16;

        <java.util.concurrent.Phaser: int MAX_PHASE> = 2147483647;

        <java.util.concurrent.Phaser: int MAX_PARTIES> = 65535;

        $r1 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $i0 = virtualinvoke $r1.<java.lang.Runtime: int availableProcessors()>();

        <java.util.concurrent.Phaser: int NCPU> = $i0;

        $i1 = <java.util.concurrent.Phaser: int NCPU>;

        if $i1 >= 2 goto label1;

        $s3 = 1;

        goto label2;

     label1:
        $s3 = 256;

     label2:
        <java.util.concurrent.Phaser: int SPINS_PER_ARRIVAL> = $s3;

     label3:
        $r2 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE> = $r2;

        r0 = class "java/util/concurrent/Phaser";

        $r3 = <java.util.concurrent.Phaser: sun.misc.Unsafe UNSAFE>;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("state");

        $l2 = virtualinvoke $r3.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r4);

        <java.util.concurrent.Phaser: long stateOffset> = $l2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = new java.lang.Error;

        specialinvoke $r6.<java.lang.Error: void <init>(java.lang.Throwable)>(r7);

        throw $r6;

     label6:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }
}
