class java.nio.DirectByteBuffer extends java.nio.MappedByteBuffer
{
    protected final int offset;
    private final boolean isReadOnly;

    protected void <init>(java.nio.MemoryBlock, int, int, boolean, java.nio.channels.FileChannel$MapMode)
    {
        java.nio.DirectByteBuffer r0;
        java.nio.MemoryBlock r1;
        int i0, i1, $i7;
        boolean z0;
        java.nio.channels.FileChannel$MapMode r2;
        long l2, $l3, $l4, $l5, $l8;
        byte $b6, $b9;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: java.nio.MemoryBlock;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r2 := @parameter4: java.nio.channels.FileChannel$MapMode;

        $l3 = virtualinvoke r1.<java.nio.MemoryBlock: long toLong()>();

        $l4 = (long) i1;

        $l5 = $l3 + $l4;

        specialinvoke r0.<java.nio.MappedByteBuffer: void <init>(java.nio.MemoryBlock,int,java.nio.channels.FileChannel$MapMode,long)>(r1, i0, r2, $l5);

        l2 = virtualinvoke r1.<java.nio.MemoryBlock: long getSize()>();

        $b6 = l2 cmp 0L;

        if $b6 < 0 goto label1;

        $i7 = i0 + i1;

        $l8 = (long) $i7;

        $b9 = $l8 cmp l2;

        if $b9 <= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capacity + offset > baseSize");

        throw $r3;

     label1:
        r0.<java.nio.DirectByteBuffer: int offset> = i1;

        r0.<java.nio.DirectByteBuffer: boolean isReadOnly> = z0;

        return;
    }

    void <init>(long, int)
    {
        java.nio.DirectByteBuffer r0;
        long l0, $l2;
        int i1;
        java.nio.MemoryBlock $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = (long) i1;

        $r1 = staticinvoke <java.nio.MemoryBlock: java.nio.MemoryBlock wrapFromJni(long,long)>(l0, $l2);

        specialinvoke r0.<java.nio.DirectByteBuffer: void <init>(java.nio.MemoryBlock,int,int,boolean,java.nio.channels.FileChannel$MapMode)>($r1, i1, 0, 0, null);

        return;
    }

    private static java.nio.DirectByteBuffer copy(java.nio.DirectByteBuffer, int, boolean)
    {
        java.nio.DirectByteBuffer r0, r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;
        java.nio.MemoryBlock $r3;
        java.nio.channels.FileChannel$MapMode $r4;

        r0 := @parameter0: java.nio.DirectByteBuffer;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r2 = new java.nio.DirectByteBuffer;

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int capacity()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $r4 = r0.<java.nio.DirectByteBuffer: java.nio.channels.FileChannel$MapMode mapMode>;

        specialinvoke $r2.<java.nio.DirectByteBuffer: void <init>(java.nio.MemoryBlock,int,int,boolean,java.nio.channels.FileChannel$MapMode)>($r3, $i1, $i2, z0, $r4);

        r1 = $r2;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        r1.<java.nio.DirectByteBuffer: int limit> = $i3;

        $i4 = virtualinvoke r0.<java.nio.DirectByteBuffer: int position()>();

        r1.<java.nio.DirectByteBuffer: int position> = $i4;

        r1.<java.nio.DirectByteBuffer: int mark> = i0;

        return r1;
    }

    public java.nio.ByteBuffer asReadOnlyBuffer()
    {
        java.nio.DirectByteBuffer r0, $r1;
        int $i0;

        r0 := @this: java.nio.DirectByteBuffer;

        $i0 = r0.<java.nio.DirectByteBuffer: int mark>;

        $r1 = staticinvoke <java.nio.DirectByteBuffer: java.nio.DirectByteBuffer copy(java.nio.DirectByteBuffer,int,boolean)>(r0, $i0, 1);

        return $r1;
    }

    public java.nio.ByteBuffer compact()
    {
        java.nio.DirectByteBuffer r0;
        boolean $z0;
        int $i0, $i1, $i3, $i4, $i5, $i6;
        long $l2;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;

     label1:
        $i0 = r0.<java.nio.DirectByteBuffer: int position>;

        $i1 = virtualinvoke r0.<java.nio.DirectByteBuffer: int remaining()>();

        $l2 = (long) $i1;

        staticinvoke <libcore.io.Memory: void memmove(java.lang.Object,int,java.lang.Object,int,long)>(r0, 0, r0, $i0, $l2);

        $i4 = r0.<java.nio.DirectByteBuffer: int limit>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i5 = $i4 - $i3;

        r0.<java.nio.DirectByteBuffer: int position> = $i5;

        $i6 = r0.<java.nio.DirectByteBuffer: int capacity>;

        r0.<java.nio.DirectByteBuffer: int limit> = $i6;

        r0.<java.nio.DirectByteBuffer: int mark> = -1;

        return r0;
    }

    public java.nio.ByteBuffer duplicate()
    {
        java.nio.DirectByteBuffer r0, $r1;
        boolean $z0;
        int $i0;

        r0 := @this: java.nio.DirectByteBuffer;

        $i0 = r0.<java.nio.DirectByteBuffer: int mark>;

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        $r1 = staticinvoke <java.nio.DirectByteBuffer: java.nio.DirectByteBuffer copy(java.nio.DirectByteBuffer,int,boolean)>(r0, $i0, $z0);

        return $r1;
    }

    public java.nio.ByteBuffer slice()
    {
        java.nio.DirectByteBuffer r0, $r1;
        java.nio.MemoryBlock $r2;
        int $i0, $i1, $i2, $i3;
        java.nio.channels.FileChannel$MapMode $r3;
        boolean $z0;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = new java.nio.DirectByteBuffer;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i0 = virtualinvoke r0.<java.nio.DirectByteBuffer: int remaining()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        $i3 = $i2 + $i1;

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.channels.FileChannel$MapMode mapMode>;

        specialinvoke $r1.<java.nio.DirectByteBuffer: void <init>(java.nio.MemoryBlock,int,int,boolean,java.nio.channels.FileChannel$MapMode)>($r2, $i0, $i3, $z0, $r3);

        return $r1;
    }

    public boolean isReadOnly()
    {
        java.nio.DirectByteBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.DirectByteBuffer;

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        return $z0;
    }

    byte[] protectedArray()
    {
        java.nio.DirectByteBuffer r0;
        byte[] r1;
        boolean $z0;
        java.nio.MemoryBlock $r2;
        java.lang.UnsupportedOperationException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        r1 = virtualinvoke $r2.<java.nio.MemoryBlock: byte[] array()>();

        if r1 != null goto label2;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;

     label2:
        return r1;
    }

    int protectedArrayOffset()
    {
        java.nio.DirectByteBuffer r0;
        int $i0;

        r0 := @this: java.nio.DirectByteBuffer;

        virtualinvoke r0.<java.nio.DirectByteBuffer: byte[] protectedArray()>();

        $i0 = r0.<java.nio.DirectByteBuffer: int offset>;

        return $i0;
    }

    boolean protectedHasArray()
    {
        java.nio.DirectByteBuffer r0;
        boolean $z0, $z1;
        java.nio.MemoryBlock $r1;
        byte[] $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 != 0 goto label1;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $r2 = virtualinvoke $r1.<java.nio.MemoryBlock: byte[] array()>();

        if $r2 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final java.nio.ByteBuffer get(byte[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        byte[] r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.nio.MemoryBlock $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i2 = lengthof r1;

        virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(1, $i2, i0, i1);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        virtualinvoke $r2.<java.nio.MemoryBlock: void peekByteArray(int,byte[],int,int)>($i6, r1, i0, i1);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i1;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return r0;
    }

    final void get(char[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(2, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekCharArray(int,char[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void get(double[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        double[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(8, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekDoubleArray(int,double[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void get(float[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(4, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekFloatArray(int,float[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void get(int[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(4, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekIntArray(int,int[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void get(long[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        long[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(8, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekLongArray(int,long[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void get(short[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        short[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkGetBounds(int,int,int,int)>(2, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void peekShortArray(int,short[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    public final byte get()
    {
        java.nio.DirectByteBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.nio.MemoryBlock $r1;
        byte $b6;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        $i0 = r0.<java.nio.DirectByteBuffer: int limit>;

        if $i1 != $i0 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i4 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        $i3 = $i2 + 1;

        r0.<java.nio.DirectByteBuffer: int position> = $i3;

        $i5 = $i4 + $i2;

        $b6 = virtualinvoke $r1.<java.nio.MemoryBlock: byte peekByte(int)>($i5);

        return $b6;
    }

    public final byte get(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        java.nio.MemoryBlock $r1;
        byte $b3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $b3 = virtualinvoke $r1.<java.nio.MemoryBlock: byte peekByte(int)>($i2);

        return $b3;
    }

    public final char getChar()
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        char c1;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        short $s7;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i2 + 2;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i3 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $s7 = virtualinvoke $r2.<java.nio.MemoryBlock: short peekShort(int,java.nio.ByteOrder)>($i6, $r1);

        c1 = (char) $s7;

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return c1;
    }

    public final char getChar(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        short $s3;
        char $c4;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 2);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $s3 = virtualinvoke $r2.<java.nio.MemoryBlock: short peekShort(int,java.nio.ByteOrder)>($i2, $r1);

        $c4 = (char) $s3;

        return $c4;
    }

    public final double getDouble()
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        double d0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        long $l6;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i1 + 8;

        $i2 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i2 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i4 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i5 = $i4 + $i3;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $l6 = virtualinvoke $r2.<java.nio.MemoryBlock: long peekLong(int,java.nio.ByteOrder)>($i5, $r1);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l6);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return d0;
    }

    public final double getDouble(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        long $l3;
        double $d0;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 8);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $l3 = virtualinvoke $r2.<java.nio.MemoryBlock: long peekLong(int,java.nio.ByteOrder)>($i2, $r1);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l3);

        return $d0;
    }

    public final float getFloat()
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float f0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i1 + 4;

        $i2 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i2 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i4 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i5 = $i4 + $i3;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $i6 = virtualinvoke $r2.<java.nio.MemoryBlock: int peekInt(int,java.nio.ByteOrder)>($i5, $r1);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i6);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return f0;
    }

    public final float getFloat(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2, $i3;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        float $f0;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 4);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $i3 = virtualinvoke $r2.<java.nio.MemoryBlock: int peekInt(int,java.nio.ByteOrder)>($i2, $r1);

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>($i3);

        return $f0;
    }

    public final int getInt()
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i2 + 4;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i3 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        i1 = virtualinvoke $r2.<java.nio.MemoryBlock: int peekInt(int,java.nio.ByteOrder)>($i6, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return i1;
    }

    public final int getInt(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2, $i3;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 4);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $i3 = virtualinvoke $r2.<java.nio.MemoryBlock: int peekInt(int,java.nio.ByteOrder)>($i2, $r1);

        return $i3;
    }

    public final long getLong()
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        long l1;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i2 + 8;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i3 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        l1 = virtualinvoke $r2.<java.nio.MemoryBlock: long peekLong(int,java.nio.ByteOrder)>($i6, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return l1;
    }

    public final long getLong(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        long $l3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 8);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $l3 = virtualinvoke $r2.<java.nio.MemoryBlock: long peekLong(int,java.nio.ByteOrder)>($i2, $r1);

        return $l3;
    }

    public final short getShort()
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        short s1;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferUnderflowException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i2 + 2;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i3 goto label1;

        $r3 = new java.nio.BufferUnderflowException;

        specialinvoke $r3.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        s1 = virtualinvoke $r2.<java.nio.MemoryBlock: short peekShort(int,java.nio.ByteOrder)>($i6, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return s1;
    }

    public final short getShort(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        short $s3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 2);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $s3 = virtualinvoke $r2.<java.nio.MemoryBlock: short peekShort(int,java.nio.ByteOrder)>($i2, $r1);

        return $s3;
    }

    public final boolean isDirect()
    {
        java.nio.DirectByteBuffer r0;

        r0 := @this: java.nio.DirectByteBuffer;

        return 1;
    }

    public final boolean isAccessible()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.MemoryBlock $r1;
        boolean $z0;

        r0 := @this: java.nio.DirectByteBuffer;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $z0 = virtualinvoke $r1.<java.nio.MemoryBlock: boolean isAccessible()>();

        return $z0;
    }

    public void setAccessible(boolean)
    {
        java.nio.DirectByteBuffer r0;
        boolean z0;
        java.nio.MemoryBlock $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void setAccessible(boolean)>(z0);

        return;
    }

    public final void free()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.MemoryBlock $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void free()>();

        return;
    }

    public final java.nio.CharBuffer asCharBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsCharBuffer: java.nio.CharBuffer asCharBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public final java.nio.DoubleBuffer asDoubleBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.DoubleBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsDoubleBuffer: java.nio.DoubleBuffer asDoubleBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public final java.nio.FloatBuffer asFloatBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.FloatBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsFloatBuffer: java.nio.FloatBuffer asFloatBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public final java.nio.IntBuffer asIntBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.IntBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsIntBuffer: java.nio.IntBuffer asIntBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public final java.nio.LongBuffer asLongBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.LongBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsLongBuffer: java.nio.LongBuffer asLongBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public final java.nio.ShortBuffer asShortBuffer()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.ShortBuffer $r1;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = staticinvoke <java.nio.ByteBufferAsShortBuffer: java.nio.ShortBuffer asShortBuffer(java.nio.ByteBuffer)>(r0);

        return $r1;
    }

    public java.nio.ByteBuffer put(byte)
    {
        java.nio.DirectByteBuffer r0;
        byte b0;
        boolean $z0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        java.nio.MemoryBlock $r1;
        java.nio.BufferOverflowException $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        b0 := @parameter0: byte;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        $i1 = r0.<java.nio.DirectByteBuffer: int limit>;

        if $i2 != $i1 goto label2;

        $r2 = new java.nio.BufferOverflowException;

        specialinvoke $r2.<java.nio.BufferOverflowException: void <init>()>();

        throw $r2;

     label2:
        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i4 = $i3 + 1;

        r0.<java.nio.DirectByteBuffer: int position> = $i4;

        $i6 = $i5 + $i3;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeByte(int,byte)>($i6, b0);

        return r0;
    }

    public java.nio.ByteBuffer put(int, byte)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3;
        byte b1;
        boolean $z0;
        java.nio.MemoryBlock $r1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = $i2 + i0;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeByte(int,byte)>($i3, b1);

        return r0;
    }

    public java.nio.ByteBuffer put(byte[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        byte[] r1;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.nio.MemoryBlock $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        $i2 = lengthof r1;

        virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(1, $i2, i0, i1);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeByteArray(int,byte[],int,int)>($i6, r1, i0, i1);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i1;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return r0;
    }

    final void put(char[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(2, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeCharArray(int,char[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void put(double[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        double[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(8, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeDoubleArray(int,double[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void put(float[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        float[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(4, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeFloatArray(int,float[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void put(int[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(4, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeIntArray(int,int[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void put(long[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        long[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(8, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeLongArray(int,long[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    final void put(short[], int, int)
    {
        java.nio.DirectByteBuffer r0;
        short[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.nio.ByteOrder $r2;
        boolean $z0;
        java.nio.MemoryBlock $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        r1 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $i3 = lengthof r1;

        i2 = virtualinvoke r0.<java.nio.DirectByteBuffer: int checkPutBounds(int,int,int,int)>(2, $i3, i0, i1);

        $r3 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        $z0 = $r2.<java.nio.ByteOrder: boolean needsSwap>;

        virtualinvoke $r3.<java.nio.MemoryBlock: void pokeShortArray(int,short[],int,int,boolean)>($i6, r1, i0, i1, $z0);

        $i7 = r0.<java.nio.DirectByteBuffer: int position>;

        $i8 = $i7 + i2;

        r0.<java.nio.DirectByteBuffer: int position> = $i8;

        return;
    }

    public java.nio.ByteBuffer putChar(char)
    {
        java.nio.DirectByteBuffer r0;
        char c0;
        int i1, $i2, $i3, $i4, $i5, $i7;
        boolean $z0;
        java.nio.ByteOrder $r1;
        short $s6;
        java.nio.MemoryBlock $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        c0 := @parameter0: char;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i1 = $i2 + 2;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i1 <= $i3 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i7 = $i5 + $i4;

        $s6 = (short) c0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeShort(int,short,java.nio.ByteOrder)>($i7, $s6, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i1;

        return r0;
    }

    public java.nio.ByteBuffer putChar(int, char)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i4;
        char c1;
        boolean $z0;
        java.nio.ByteOrder $r1;
        short $s3;
        java.nio.MemoryBlock $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 2);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = $i2 + i0;

        $s3 = (short) c1;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeShort(int,short,java.nio.ByteOrder)>($i4, $s3, $r1);

        return r0;
    }

    public java.nio.ByteBuffer putDouble(double)
    {
        java.nio.DirectByteBuffer r0;
        double d0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.nio.MemoryBlock $r1;
        long $l6;
        java.nio.ByteOrder $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        d0 := @parameter0: double;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i1 + 8;

        $i2 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i2 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i4 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i5 = $i4 + $i3;

        $l6 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeLong(int,long,java.nio.ByteOrder)>($i5, $l6, $r2);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return r0;
    }

    public java.nio.ByteBuffer putDouble(int, double)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2;
        double d0;
        boolean $z0;
        java.nio.MemoryBlock $r1;
        long $l3;
        java.nio.ByteOrder $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 8);

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $l3 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeLong(int,long,java.nio.ByteOrder)>($i2, $l3, $r2);

        return r0;
    }

    public java.nio.ByteBuffer putFloat(float)
    {
        java.nio.DirectByteBuffer r0;
        float f0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.MemoryBlock $r1;
        java.nio.ByteOrder $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        f0 := @parameter0: float;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i1 = r0.<java.nio.DirectByteBuffer: int position>;

        i0 = $i1 + 4;

        $i2 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i0 <= $i2 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i4 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = r0.<java.nio.DirectByteBuffer: int position>;

        $i5 = $i4 + $i3;

        $i6 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeInt(int,int,java.nio.ByteOrder)>($i5, $i6, $r2);

        r0.<java.nio.DirectByteBuffer: int position> = i0;

        return r0;
    }

    public java.nio.ByteBuffer putFloat(int, float)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i1, $i2, $i3;
        float f0;
        boolean $z0;
        java.nio.MemoryBlock $r1;
        java.nio.ByteOrder $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 4);

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i1 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i2 = $i1 + i0;

        $i3 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r1.<java.nio.MemoryBlock: void pokeInt(int,int,java.nio.ByteOrder)>($i2, $i3, $r2);

        return r0;
    }

    public java.nio.ByteBuffer putInt(int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i1 = $i2 + 4;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i1 <= $i3 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeInt(int,int,java.nio.ByteOrder)>($i6, i0, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i1;

        return r0;
    }

    public java.nio.ByteBuffer putInt(int, int)
    {
        java.nio.DirectByteBuffer r0;
        int i0, i1, $i2, $i3;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 4);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = $i2 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeInt(int,int,java.nio.ByteOrder)>($i3, i1, $r1);

        return r0;
    }

    public java.nio.ByteBuffer putLong(long)
    {
        java.nio.DirectByteBuffer r0;
        long l0;
        int i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        l0 := @parameter0: long;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i1 = $i2 + 8;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i1 <= $i3 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeLong(int,long,java.nio.ByteOrder)>($i6, l0, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i1;

        return r0;
    }

    public java.nio.ByteBuffer putLong(int, long)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3;
        long l1;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 8);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = $i2 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeLong(int,long,java.nio.ByteOrder)>($i3, l1, $r1);

        return r0;
    }

    public java.nio.ByteBuffer putShort(short)
    {
        java.nio.DirectByteBuffer r0;
        short s0;
        int i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.BufferOverflowException $r3;
        java.nio.ReadOnlyBufferException $r4;

        r0 := @this: java.nio.DirectByteBuffer;

        s0 := @parameter0: short;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r4 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r4.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r4;

     label1:
        $i2 = r0.<java.nio.DirectByteBuffer: int position>;

        i1 = $i2 + 2;

        $i3 = r0.<java.nio.DirectByteBuffer: int limit>;

        if i1 <= $i3 goto label2;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label2:
        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i5 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i4 = r0.<java.nio.DirectByteBuffer: int position>;

        $i6 = $i5 + $i4;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeShort(int,short,java.nio.ByteOrder)>($i6, s0, $r1);

        r0.<java.nio.DirectByteBuffer: int position> = i1;

        return r0;
    }

    public java.nio.ByteBuffer putShort(int, short)
    {
        java.nio.DirectByteBuffer r0;
        int i0, $i2, $i3;
        short s1;
        boolean $z0;
        java.nio.ByteOrder $r1;
        java.nio.MemoryBlock $r2;
        java.nio.ReadOnlyBufferException $r3;

        r0 := @this: java.nio.DirectByteBuffer;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkIsAccessible()>();

        $z0 = r0.<java.nio.DirectByteBuffer: boolean isReadOnly>;

        if $z0 == 0 goto label1;

        $r3 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r3.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r3;

     label1:
        virtualinvoke r0.<java.nio.DirectByteBuffer: void checkIndex(int,int)>(i0, 2);

        $r2 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $i2 = r0.<java.nio.DirectByteBuffer: int offset>;

        $i3 = $i2 + i0;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.ByteOrder order>;

        virtualinvoke $r2.<java.nio.MemoryBlock: void pokeShort(int,short,java.nio.ByteOrder)>($i3, s1, $r1);

        return r0;
    }

    private void checkIsAccessible()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.MemoryBlock $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        specialinvoke r0.<java.nio.DirectByteBuffer: void checkNotFreed()>();

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $z0 = virtualinvoke $r1.<java.nio.MemoryBlock: boolean isAccessible()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("buffer is inaccessible");

        throw $r2;

     label1:
        return;
    }

    private void checkNotFreed()
    {
        java.nio.DirectByteBuffer r0;
        java.nio.MemoryBlock $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: java.nio.DirectByteBuffer;

        $r1 = r0.<java.nio.DirectByteBuffer: java.nio.MemoryBlock block>;

        $z0 = virtualinvoke $r1.<java.nio.MemoryBlock: boolean isFreed()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("buffer was freed");

        throw $r2;

     label1:
        return;
    }
}
