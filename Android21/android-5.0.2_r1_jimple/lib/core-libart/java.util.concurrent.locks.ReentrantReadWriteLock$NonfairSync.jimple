final class java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync extends java.util.concurrent.locks.ReentrantReadWriteLock$Sync
{
    private static final long serialVersionUID;

    void <init>()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync r0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync;

        specialinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void <init>()>();

        return;
    }

    final boolean writerShouldBlock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync r0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync;

        return 0;
    }

    final boolean readerShouldBlock()
    {
        java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync r0;
        boolean $z0;

        r0 := @this: java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync;

        $z0 = virtualinvoke r0.<java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync: boolean apparentlyFirstQueuedIsExclusive()>();

        return $z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync: long serialVersionUID> = -8159625535654395037L;

        return;
    }
}
