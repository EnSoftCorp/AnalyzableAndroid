class java.nio.MemoryBlock extends java.lang.Object
{
    protected long address;
    protected final long size;
    private boolean accessible;
    private boolean freed;

    public static java.nio.MemoryBlock mmap(java.io.FileDescriptor, long, long, java.nio.channels.FileChannel$MapMode) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        long l0, l1, l4;
        java.nio.channels.FileChannel$MapMode r1, $r9, $r10;
        int i2, i3, $i10, $i11, $i12, $i13;
        byte $b5, $b6, $b7, $b8, $b9;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        libcore.io.Os $r11;
        java.nio.MemoryBlock$MemoryMappedBlock $r12;
        java.nio.MemoryBlock $r13;
        android.system.ErrnoException $r14, r16;
        java.io.IOException $r15;

        r0 := @parameter0: java.io.FileDescriptor;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r1 := @parameter3: java.nio.channels.FileChannel$MapMode;

        $b5 = l1 cmp 0L;

        if $b5 != 0 goto label1;

        $r13 = new java.nio.MemoryBlock;

        specialinvoke $r13.<java.nio.MemoryBlock: void <init>(long,long)>(0L, 0L);

        return $r13;

     label1:
        $b6 = l0 cmp 0L;

        if $b6 < 0 goto label2;

        $b7 = l1 cmp 0L;

        if $b7 < 0 goto label2;

        $b9 = l0 cmp 2147483647L;

        if $b9 > 0 goto label2;

        $b8 = l1 cmp 2147483647L;

        if $b8 <= 0 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offset=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r2;

     label3:
        $r10 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode PRIVATE>;

        if r1 != $r10 goto label4;

        $i13 = <android.system.OsConstants: int PROT_READ>;

        $i12 = <android.system.OsConstants: int PROT_WRITE>;

        i2 = $i13 | $i12;

        i3 = <android.system.OsConstants: int MAP_PRIVATE>;

        goto label6;

     label4:
        $r9 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        if r1 != $r9 goto label5;

        i2 = <android.system.OsConstants: int PROT_READ>;

        i3 = <android.system.OsConstants: int MAP_SHARED>;

        goto label6;

     label5:
        $i10 = <android.system.OsConstants: int PROT_READ>;

        $i11 = <android.system.OsConstants: int PROT_WRITE>;

        i2 = $i10 | $i11;

        i3 = <android.system.OsConstants: int MAP_SHARED>;

     label6:
        $r11 = <libcore.io.Libcore: libcore.io.Os os>;

        l4 = interfaceinvoke $r11.<libcore.io.Os: long mmap(long,long,int,int,java.io.FileDescriptor,long)>(0L, l1, i2, i3, r0, l0);

        $r12 = new java.nio.MemoryBlock$MemoryMappedBlock;

        specialinvoke $r12.<java.nio.MemoryBlock$MemoryMappedBlock: void <init>(long,long,java.nio.MemoryBlock$1)>(l4, l1, null);

     label7:
        return $r12;

     label8:
        $r14 := @caughtexception;

        r16 = $r14;

        $r15 = virtualinvoke r16.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r15;

        catch android.system.ErrnoException from label6 to label7 with label8;
    }

    public static java.nio.MemoryBlock allocate(int)
    {
        int i0;
        dalvik.system.VMRuntime r0;
        byte[] r1, $r4;
        long l1, $l2;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.nio.MemoryBlock$NonMovableHeapBlock $r5;

        i0 := @parameter0: int;

        r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $r3 = virtualinvoke r0.<dalvik.system.VMRuntime: java.lang.Object newNonMovableArray(java.lang.Class,int)>($r2, i0);

        $r4 = (byte[]) $r3;

        r1 = (byte[]) $r4;

        l1 = virtualinvoke r0.<dalvik.system.VMRuntime: long addressOf(java.lang.Object)>(r1);

        $r5 = new java.nio.MemoryBlock$NonMovableHeapBlock;

        $l2 = (long) i0;

        specialinvoke $r5.<java.nio.MemoryBlock$NonMovableHeapBlock: void <init>(byte[],long,long,java.nio.MemoryBlock$1)>(r1, l1, $l2, null);

        return $r5;
    }

    public static java.nio.MemoryBlock wrapFromJni(long, long)
    {
        long l0, l1;
        java.nio.MemoryBlock$UnmanagedBlock $r0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r0 = new java.nio.MemoryBlock$UnmanagedBlock;

        specialinvoke $r0.<java.nio.MemoryBlock$UnmanagedBlock: void <init>(long,long,java.nio.MemoryBlock$1)>(l0, l1, null);

        return $r0;
    }

    private void <init>(long, long)
    {
        java.nio.MemoryBlock r0;
        long l0, l1;

        r0 := @this: java.nio.MemoryBlock;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.nio.MemoryBlock: long address> = l0;

        r0.<java.nio.MemoryBlock: long size> = l1;

        r0.<java.nio.MemoryBlock: boolean accessible> = 1;

        r0.<java.nio.MemoryBlock: boolean freed> = 0;

        return;
    }

    public byte[] array()
    {
        java.nio.MemoryBlock r0;

        r0 := @this: java.nio.MemoryBlock;

        return null;
    }

    public void free()
    {
        java.nio.MemoryBlock r0;

        r0 := @this: java.nio.MemoryBlock;

        r0.<java.nio.MemoryBlock: long address> = 0L;

        r0.<java.nio.MemoryBlock: boolean freed> = 1;

        return;
    }

    public boolean isFreed()
    {
        java.nio.MemoryBlock r0;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        $z0 = r0.<java.nio.MemoryBlock: boolean freed>;

        return $z0;
    }

    public boolean isAccessible()
    {
        java.nio.MemoryBlock r0;
        boolean $z0, $z1, $z2;

        r0 := @this: java.nio.MemoryBlock;

        $z0 = virtualinvoke r0.<java.nio.MemoryBlock: boolean isFreed()>();

        if $z0 != 0 goto label1;

        $z1 = r0.<java.nio.MemoryBlock: boolean accessible>;

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public final void setAccessible(boolean)
    {
        java.nio.MemoryBlock r0;
        boolean z0;

        r0 := @this: java.nio.MemoryBlock;

        z0 := @parameter0: boolean;

        r0.<java.nio.MemoryBlock: boolean accessible> = z0;

        return;
    }

    public final void pokeByte(int, byte)
    {
        java.nio.MemoryBlock r0;
        int i0;
        byte b1;
        long $l2, $l3, $l4;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        b1 := @parameter1: byte;

        $l3 = r0.<java.nio.MemoryBlock: long address>;

        $l2 = (long) i0;

        $l4 = $l3 + $l2;

        staticinvoke <libcore.io.Memory: void pokeByte(long,byte)>($l4, b1);

        return;
    }

    public final void pokeByteArray(int, byte[], int, int)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        byte[] r1;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeByteArray(long,byte[],int,int)>($l5, r1, i1, i2);

        return;
    }

    public final void pokeCharArray(int, char[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        char[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeCharArray(long,char[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeDoubleArray(int, double[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        double[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeDoubleArray(long,double[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeFloatArray(int, float[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        float[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeFloatArray(long,float[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeIntArray(int, int[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        int[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeIntArray(long,int[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeLongArray(int, long[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        long[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeLongArray(long,long[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeShortArray(int, short[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        short[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: short[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void pokeShortArray(long,short[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final byte peekByte(int)
    {
        java.nio.MemoryBlock r0;
        int i0;
        long $l1, $l2, $l3;
        byte $b4;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        $l2 = r0.<java.nio.MemoryBlock: long address>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        $b4 = staticinvoke <libcore.io.Memory: byte peekByte(long)>($l3);

        return $b4;
    }

    public final void peekByteArray(int, byte[], int, int)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        byte[] r1;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekByteArray(long,byte[],int,int)>($l5, r1, i1, i2);

        return;
    }

    public final void peekCharArray(int, char[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        char[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekCharArray(long,char[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void peekDoubleArray(int, double[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        double[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: double[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekDoubleArray(long,double[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void peekFloatArray(int, float[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        float[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: float[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekFloatArray(long,float[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void peekIntArray(int, int[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        int[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekIntArray(long,int[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void peekLongArray(int, long[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        long[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: long[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekLongArray(long,long[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void peekShortArray(int, short[], int, int, boolean)
    {
        java.nio.MemoryBlock r0;
        int i0, i1, i2;
        short[] r1;
        boolean z0;
        long $l3, $l4, $l5;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: short[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        $l4 = r0.<java.nio.MemoryBlock: long address>;

        $l3 = (long) i0;

        $l5 = $l4 + $l3;

        staticinvoke <libcore.io.Memory: void peekShortArray(long,short[],int,int,boolean)>($l5, r1, i1, i2, z0);

        return;
    }

    public final void pokeShort(int, short, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0;
        short s1;
        java.nio.ByteOrder r1;
        long $l2, $l3, $l4;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        s1 := @parameter1: short;

        r1 := @parameter2: java.nio.ByteOrder;

        $l3 = r0.<java.nio.MemoryBlock: long address>;

        $l2 = (long) i0;

        $l4 = $l3 + $l2;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        staticinvoke <libcore.io.Memory: void pokeShort(long,short,boolean)>($l4, s1, $z0);

        return;
    }

    public final short peekShort(int, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0;
        java.nio.ByteOrder r1;
        long $l1, $l2, $l3;
        boolean $z0;
        short $s4;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteOrder;

        $l2 = r0.<java.nio.MemoryBlock: long address>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        $s4 = staticinvoke <libcore.io.Memory: short peekShort(long,boolean)>($l3, $z0);

        return $s4;
    }

    public final void pokeInt(int, int, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0, i1;
        java.nio.ByteOrder r1;
        long $l2, $l3, $l4;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteOrder;

        $l3 = r0.<java.nio.MemoryBlock: long address>;

        $l2 = (long) i0;

        $l4 = $l3 + $l2;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        staticinvoke <libcore.io.Memory: void pokeInt(long,int,boolean)>($l4, i1, $z0);

        return;
    }

    public final int peekInt(int, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0, $i4;
        java.nio.ByteOrder r1;
        long $l1, $l2, $l3;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteOrder;

        $l2 = r0.<java.nio.MemoryBlock: long address>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        $i4 = staticinvoke <libcore.io.Memory: int peekInt(long,boolean)>($l3, $z0);

        return $i4;
    }

    public final void pokeLong(int, long, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0;
        long l1, $l2, $l3, $l4;
        java.nio.ByteOrder r1;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: java.nio.ByteOrder;

        $l3 = r0.<java.nio.MemoryBlock: long address>;

        $l2 = (long) i0;

        $l4 = $l3 + $l2;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        staticinvoke <libcore.io.Memory: void pokeLong(long,long,boolean)>($l4, l1, $z0);

        return;
    }

    public final long peekLong(int, java.nio.ByteOrder)
    {
        java.nio.MemoryBlock r0;
        int i0;
        java.nio.ByteOrder r1;
        long $l1, $l2, $l3, $l4;
        boolean $z0;

        r0 := @this: java.nio.MemoryBlock;

        i0 := @parameter0: int;

        r1 := @parameter1: java.nio.ByteOrder;

        $l2 = r0.<java.nio.MemoryBlock: long address>;

        $l1 = (long) i0;

        $l3 = $l2 + $l1;

        $z0 = r1.<java.nio.ByteOrder: boolean needsSwap>;

        $l4 = staticinvoke <libcore.io.Memory: long peekLong(long,boolean)>($l3, $z0);

        return $l4;
    }

    public final long toLong()
    {
        java.nio.MemoryBlock r0;
        long $l0;

        r0 := @this: java.nio.MemoryBlock;

        $l0 = r0.<java.nio.MemoryBlock: long address>;

        return $l0;
    }

    public final java.lang.String toString()
    {
        java.nio.MemoryBlock r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r6, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r8;
        long $l0;

        r0 := @this: java.nio.MemoryBlock;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $l0 = r0.<java.nio.MemoryBlock: long address>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public final long getSize()
    {
        java.nio.MemoryBlock r0;
        long $l0;

        r0 := @this: java.nio.MemoryBlock;

        $l0 = r0.<java.nio.MemoryBlock: long size>;

        return $l0;
    }

    void <init>(long, long, java.nio.MemoryBlock$1)
    {
        java.nio.MemoryBlock r0;
        long l0, l1;
        java.nio.MemoryBlock$1 r1;

        r0 := @this: java.nio.MemoryBlock;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r1 := @parameter2: java.nio.MemoryBlock$1;

        specialinvoke r0.<java.nio.MemoryBlock: void <init>(long,long)>(l0, l1);

        return;
    }
}
