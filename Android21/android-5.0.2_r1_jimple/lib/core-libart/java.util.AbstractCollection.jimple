public abstract class java.util.AbstractCollection extends java.lang.Object implements java.util.Collection
{

    protected void <init>()
    {
        java.util.AbstractCollection r0;

        r0 := @this: java.util.AbstractCollection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r0.<java.util.AbstractCollection: boolean add(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public void clear()
    {
        java.util.AbstractCollection r0;
        java.util.Iterator r1;
        boolean $z0;

        r0 := @this: java.util.AbstractCollection;

        r1 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        return 1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label2;

        return 1;

     label3:
        return 0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r0.<java.util.AbstractCollection: boolean contains(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public boolean isEmpty()
    {
        java.util.AbstractCollection r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractCollection;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public abstract java.util.Iterator iterator();

    public boolean remove(java.lang.Object)
    {
        java.util.AbstractCollection r0;
        java.lang.Object r1, $r3, $r4;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

        if r1 == null goto label2;

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if $r3 != null goto label2;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        return 1;

     label3:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.AbstractCollection r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public abstract int size();

    public java.lang.Object[] toArray()
    {
        java.util.AbstractCollection r0;
        java.util.ArrayList $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.AbstractCollection;

        $r1 = specialinvoke r0.<java.util.AbstractCollection: java.util.ArrayList toArrayList()>();

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.AbstractCollection r0;
        java.lang.Object[] r1, $r3;
        java.util.ArrayList $r2;

        r0 := @this: java.util.AbstractCollection;

        r1 := @parameter0: java.lang.Object[];

        $r2 = specialinvoke r0.<java.util.AbstractCollection: java.util.ArrayList toArrayList()>();

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    private java.util.ArrayList toArrayList()
    {
        java.util.AbstractCollection r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        java.lang.Object r3;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.AbstractCollection;

        $r4 = new java.util.ArrayList;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i0);

        r1 = $r4;

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label1;

     label2:
        return r1;
    }

    public java.lang.String toString()
    {
        java.util.AbstractCollection r0;
        java.lang.StringBuilder r1, $r4;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        java.lang.String $r7;

        r0 := @this: java.util.AbstractCollection;

        $z0 = virtualinvoke r0.<java.util.AbstractCollection: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "[]";

     label1:
        $r4 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r0.<java.util.AbstractCollection: int size()>();

        $i1 = $i0 * 16;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        r1 = $r4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r2 = virtualinvoke r0.<java.util.AbstractCollection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if r3 == r0 goto label3;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        goto label4;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Collection)");

     label4:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label5:
        goto label2;

     label6:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
