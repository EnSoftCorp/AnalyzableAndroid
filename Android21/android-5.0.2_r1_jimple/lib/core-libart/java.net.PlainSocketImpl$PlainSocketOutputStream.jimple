class java.net.PlainSocketImpl$PlainSocketOutputStream extends java.io.OutputStream
{
    private final java.net.PlainSocketImpl socketImpl;

    public void <init>(java.net.PlainSocketImpl)
    {
        java.net.PlainSocketImpl$PlainSocketOutputStream r0;
        java.net.PlainSocketImpl r1;

        r0 := @this: java.net.PlainSocketImpl$PlainSocketOutputStream;

        r1 := @parameter0: java.net.PlainSocketImpl;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        r0.<java.net.PlainSocketImpl$PlainSocketOutputStream: java.net.PlainSocketImpl socketImpl> = r1;

        return;
    }

    public void close() throws java.io.IOException
    {
        java.net.PlainSocketImpl$PlainSocketOutputStream r0;
        java.net.PlainSocketImpl $r1;

        r0 := @this: java.net.PlainSocketImpl$PlainSocketOutputStream;

        $r1 = r0.<java.net.PlainSocketImpl$PlainSocketOutputStream: java.net.PlainSocketImpl socketImpl>;

        virtualinvoke $r1.<java.net.PlainSocketImpl: void close()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.net.PlainSocketImpl$PlainSocketOutputStream r0;
        int i0;

        r0 := @this: java.net.PlainSocketImpl$PlainSocketOutputStream;

        i0 := @parameter0: int;

        staticinvoke <libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)>(r0, i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.net.PlainSocketImpl$PlainSocketOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.net.PlainSocketImpl $r2;

        r0 := @this: java.net.PlainSocketImpl$PlainSocketOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.net.PlainSocketImpl$PlainSocketOutputStream: java.net.PlainSocketImpl socketImpl>;

        staticinvoke <java.net.PlainSocketImpl: void access$100(java.net.PlainSocketImpl,byte[],int,int)>($r2, r1, i0, i1);

        return;
    }
}
