final class java.util.concurrent.ConcurrentSkipListMap$Node extends java.lang.Object
{
    final java.lang.Object key;
    volatile java.lang.Object value;
    volatile java.util.concurrent.ConcurrentSkipListMap$Node next;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long valueOffset;
    private static final long nextOffset;

    void <init>(java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0, r3;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key> = r1;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value> = r2;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next> = r3;

        return;
    }

    void <init>(java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0, r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key> = null;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value> = r0;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next> = r1;

        return;
    }

    boolean casValue(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0;
        java.lang.Object r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = <java.util.concurrent.ConcurrentSkipListMap$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentSkipListMap$Node: long valueOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node, java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Node;

        $r3 = <java.util.concurrent.ConcurrentSkipListMap$Node: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentSkipListMap$Node: long nextOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    boolean isMarker()
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r1 != r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean isBaseHeader()
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        $r2 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object access$000()>();

        if $r1 != $r2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    boolean appendMarker(java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0, r1, $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        $r2 = new java.util.concurrent.ConcurrentSkipListMap$Node;

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$Node: void <init>(java.util.concurrent.ConcurrentSkipListMap$Node)>(r1);

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r1, $r2);

        return $z0;
    }

    void helpDelete(java.util.concurrent.ConcurrentSkipListMap$Node, java.util.concurrent.ConcurrentSkipListMap$Node)
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0, r1, r2, $r3, $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Node;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r2 != $r3 goto label3;

        $r4 = r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        if r0 != $r4 goto label3;

        if r2 == null goto label1;

        $r5 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r5 == r2 goto label2;

     label1:
        virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean appendMarker(java.util.concurrent.ConcurrentSkipListMap$Node)>(r2);

        goto label3;

     label2:
        $r6 = r2.<java.util.concurrent.ConcurrentSkipListMap$Node: java.util.concurrent.ConcurrentSkipListMap$Node next>;

        virtualinvoke r1.<java.util.concurrent.ConcurrentSkipListMap$Node: boolean casNext(java.util.concurrent.ConcurrentSkipListMap$Node,java.util.concurrent.ConcurrentSkipListMap$Node)>(r0, $r6);

     label3:
        return;
    }

    java.lang.Object getValidValue()
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0;
        java.lang.Object r1, $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if r1 == r0 goto label1;

        $r2 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.lang.Object access$000()>();

        if r1 != $r2 goto label2;

     label1:
        return null;

     label2:
        return r1;
    }

    java.util.AbstractMap$SimpleImmutableEntry createSnapshot()
    {
        java.util.concurrent.ConcurrentSkipListMap$Node r0;
        java.lang.Object r1, $r3;
        java.util.AbstractMap$SimpleImmutableEntry $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Node;

        r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object getValidValue()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = new java.util.AbstractMap$SimpleImmutableEntry;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object key>;

        specialinvoke $r2.<java.util.AbstractMap$SimpleImmutableEntry: void <init>(java.lang.Object,java.lang.Object)>($r3, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2, $r4;
        java.lang.reflect.Field $r3, $r5;
        long $l0, $l1;
        java.lang.Exception $r6, r8;
        java.lang.Error $r7;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentSkipListMap$Node: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/ConcurrentSkipListMap$Node";

        $r2 = <java.util.concurrent.ConcurrentSkipListMap$Node: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("value");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.ConcurrentSkipListMap$Node: long valueOffset> = $l0;

        $r4 = <java.util.concurrent.ConcurrentSkipListMap$Node: sun.misc.Unsafe UNSAFE>;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("next");

        $l1 = virtualinvoke $r4.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

        <java.util.concurrent.ConcurrentSkipListMap$Node: long nextOffset> = $l1;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.Error;

        specialinvoke $r7.<java.lang.Error: void <init>(java.lang.Throwable)>(r8);

        throw $r7;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
