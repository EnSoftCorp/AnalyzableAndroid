final class java.nio.CharSequenceAdapter extends java.nio.CharBuffer
{
    final java.lang.CharSequence sequence;

    static java.nio.CharSequenceAdapter copy(java.nio.CharSequenceAdapter)
    {
        java.nio.CharSequenceAdapter r0, r1, $r2;
        java.lang.CharSequence $r3;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.nio.CharSequenceAdapter;

        $r2 = new java.nio.CharSequenceAdapter;

        $r3 = r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence>;

        specialinvoke $r2.<java.nio.CharSequenceAdapter: void <init>(java.lang.CharSequence)>($r3);

        r1 = $r2;

        $i0 = r0.<java.nio.CharSequenceAdapter: int limit>;

        r1.<java.nio.CharSequenceAdapter: int limit> = $i0;

        $i1 = r0.<java.nio.CharSequenceAdapter: int position>;

        r1.<java.nio.CharSequenceAdapter: int position> = $i1;

        $i2 = r0.<java.nio.CharSequenceAdapter: int mark>;

        r1.<java.nio.CharSequenceAdapter: int mark> = $i2;

        return r1;
    }

    void <init>(java.lang.CharSequence)
    {
        java.nio.CharSequenceAdapter r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: java.nio.CharSequenceAdapter;

        r1 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        specialinvoke r0.<java.nio.CharBuffer: void <init>(int,long)>($i0, 0L);

        r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence> = r1;

        return;
    }

    public java.nio.CharBuffer asReadOnlyBuffer()
    {
        java.nio.CharSequenceAdapter r0;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = virtualinvoke r0.<java.nio.CharSequenceAdapter: java.nio.CharBuffer duplicate()>();

        return $r1;
    }

    public java.nio.CharBuffer compact()
    {
        java.nio.CharSequenceAdapter r0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;
    }

    public java.nio.CharBuffer duplicate()
    {
        java.nio.CharSequenceAdapter r0, $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = staticinvoke <java.nio.CharSequenceAdapter: java.nio.CharSequenceAdapter copy(java.nio.CharSequenceAdapter)>(r0);

        return $r1;
    }

    public char get()
    {
        java.nio.CharSequenceAdapter r0;
        int $i0, $i1, $i2, $i3;
        java.lang.CharSequence $r1;
        char $c4;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.CharSequenceAdapter;

        $i1 = r0.<java.nio.CharSequenceAdapter: int position>;

        $i0 = r0.<java.nio.CharSequenceAdapter: int limit>;

        if $i1 != $i0 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        $r1 = r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence>;

        $i2 = r0.<java.nio.CharSequenceAdapter: int position>;

        $i3 = $i2 + 1;

        r0.<java.nio.CharSequenceAdapter: int position> = $i3;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i2);

        return $c4;
    }

    public char get(int)
    {
        java.nio.CharSequenceAdapter r0;
        int i0;
        java.lang.CharSequence $r1;
        char $c1;

        r0 := @this: java.nio.CharSequenceAdapter;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.nio.CharSequenceAdapter: void checkIndex(int)>(i0);

        $r1 = r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence>;

        $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(i0);

        return $c1;
    }

    public final java.nio.CharBuffer get(char[], int, int)
    {
        java.nio.CharSequenceAdapter r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.lang.CharSequence $r2;
        java.lang.String $r3;
        java.nio.BufferUnderflowException $r4;

        r0 := @this: java.nio.CharSequenceAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.CharSequenceAdapter: int remaining()>();

        if i1 <= $i4 goto label1;

        $r4 = new java.nio.BufferUnderflowException;

        specialinvoke $r4.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r4;

     label1:
        $i5 = r0.<java.nio.CharSequenceAdapter: int position>;

        i2 = $i5 + i1;

        $r2 = r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence>;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        $i6 = r0.<java.nio.CharSequenceAdapter: int position>;

        virtualinvoke $r3.<java.lang.String: void getChars(int,int,char[],int)>($i6, i2, r1, i0);

        r0.<java.nio.CharSequenceAdapter: int position> = i2;

        return r0;
    }

    public boolean isDirect()
    {
        java.nio.CharSequenceAdapter r0;

        r0 := @this: java.nio.CharSequenceAdapter;

        return 0;
    }

    public boolean isReadOnly()
    {
        java.nio.CharSequenceAdapter r0;

        r0 := @this: java.nio.CharSequenceAdapter;

        return 1;
    }

    public java.nio.ByteOrder order()
    {
        java.nio.CharSequenceAdapter r0;
        java.nio.ByteOrder $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        return $r1;
    }

    char[] protectedArray()
    {
        java.nio.CharSequenceAdapter r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    int protectedArrayOffset()
    {
        java.nio.CharSequenceAdapter r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    boolean protectedHasArray()
    {
        java.nio.CharSequenceAdapter r0;

        r0 := @this: java.nio.CharSequenceAdapter;

        return 0;
    }

    public java.nio.CharBuffer put(char)
    {
        java.nio.CharSequenceAdapter r0;
        char c0;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        c0 := @parameter0: char;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;
    }

    public java.nio.CharBuffer put(int, char)
    {
        java.nio.CharSequenceAdapter r0;
        int i0;
        char c1;
        java.nio.ReadOnlyBufferException $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        $r1 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r1.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r1;
    }

    public final java.nio.CharBuffer put(char[], int, int)
    {
        java.nio.CharSequenceAdapter r0;
        char[] r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.CharSequenceAdapter;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;
    }

    public java.nio.CharBuffer put(java.lang.String, int, int)
    {
        java.nio.CharSequenceAdapter r0;
        java.lang.String r1;
        int i0, i1;
        java.nio.ReadOnlyBufferException $r2;

        r0 := @this: java.nio.CharSequenceAdapter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r2.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r2;
    }

    public java.nio.CharBuffer slice()
    {
        java.nio.CharSequenceAdapter r0, $r1;
        int $i0, $i1;
        java.lang.CharSequence $r2, $r3;

        r0 := @this: java.nio.CharSequenceAdapter;

        $r1 = new java.nio.CharSequenceAdapter;

        $r2 = r0.<java.nio.CharSequenceAdapter: java.lang.CharSequence sequence>;

        $i1 = r0.<java.nio.CharSequenceAdapter: int position>;

        $i0 = r0.<java.nio.CharSequenceAdapter: int limit>;

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i0);

        specialinvoke $r1.<java.nio.CharSequenceAdapter: void <init>(java.lang.CharSequence)>($r3);

        return $r1;
    }

    public java.nio.CharBuffer subSequence(int, int)
    {
        java.nio.CharSequenceAdapter r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: java.nio.CharSequenceAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<java.nio.CharSequenceAdapter: void checkStartEndRemaining(int,int)>(i0, i1);

        r1 = staticinvoke <java.nio.CharSequenceAdapter: java.nio.CharSequenceAdapter copy(java.nio.CharSequenceAdapter)>(r0);

        $i2 = r0.<java.nio.CharSequenceAdapter: int position>;

        $i3 = $i2 + i0;

        r1.<java.nio.CharSequenceAdapter: int position> = $i3;

        $i4 = r0.<java.nio.CharSequenceAdapter: int position>;

        $i5 = $i4 + i1;

        r1.<java.nio.CharSequenceAdapter: int limit> = $i5;

        return r1;
    }

    public volatile java.lang.CharSequence subSequence(int, int)
    {
        java.nio.CharSequenceAdapter r0;
        int i0, i1;
        java.nio.CharBuffer $r1;

        r0 := @this: java.nio.CharSequenceAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<java.nio.CharSequenceAdapter: java.nio.CharBuffer subSequence(int,int)>(i0, i1);

        return $r1;
    }
}
