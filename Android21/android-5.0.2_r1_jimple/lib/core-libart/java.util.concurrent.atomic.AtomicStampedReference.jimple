public class java.util.concurrent.atomic.AtomicStampedReference extends java.lang.Object
{
    private volatile java.util.concurrent.atomic.AtomicStampedReference$Pair pair;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long pairOffset;

    public void <init>(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.lang.Object r1;
        int i0;
        java.util.concurrent.atomic.AtomicStampedReference$Pair $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.concurrent.atomic.AtomicStampedReference$Pair: java.util.concurrent.atomic.AtomicStampedReference$Pair of(java.lang.Object,int)>(r1, i0);

        r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair> = $r2;

        return;
    }

    public java.lang.Object getReference()
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.util.concurrent.atomic.AtomicStampedReference$Pair $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        $r1 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $r2 = $r1.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        return $r2;
    }

    public int getStamp()
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.util.concurrent.atomic.AtomicStampedReference$Pair $r1;
        int $i0;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        $r1 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $i0 = $r1.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        return $i0;
    }

    public java.lang.Object get(int[])
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        int[] r1;
        java.util.concurrent.atomic.AtomicStampedReference$Pair r2;
        int $i0;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: int[];

        r2 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $i0 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        r1[0] = $i0;

        $r3 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        return $r3;
    }

    public boolean weakCompareAndSet(java.lang.Object, java.lang.Object, int, int)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.lang.Object r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicStampedReference: boolean compareAndSet(java.lang.Object,java.lang.Object,int,int)>(r1, r2, i0, i1);

        return $z0;
    }

    public boolean compareAndSet(java.lang.Object, java.lang.Object, int, int)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.lang.Object r1, r2, $r4, $r5;
        int i0, i1, $i2, $i3;
        java.util.concurrent.atomic.AtomicStampedReference$Pair r3, $r6;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $r4 = r3.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        if r1 != $r4 goto label3;

        $i2 = r3.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        if i0 != $i2 goto label3;

        $r5 = r3.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        if r2 != $r5 goto label1;

        $i3 = r3.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        if i1 == $i3 goto label2;

     label1:
        $r6 = staticinvoke <java.util.concurrent.atomic.AtomicStampedReference$Pair: java.util.concurrent.atomic.AtomicStampedReference$Pair of(java.lang.Object,int)>(r2, i1);

        $z0 = specialinvoke r0.<java.util.concurrent.atomic.AtomicStampedReference: boolean casPair(java.util.concurrent.atomic.AtomicStampedReference$Pair,java.util.concurrent.atomic.AtomicStampedReference$Pair)>(r3, $r6);

        if $z0 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void set(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.lang.Object r1, $r3;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicStampedReference$Pair r2, $r4;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $r3 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        if r1 != $r3 goto label1;

        $i1 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        if i0 == $i1 goto label2;

     label1:
        $r4 = staticinvoke <java.util.concurrent.atomic.AtomicStampedReference$Pair: java.util.concurrent.atomic.AtomicStampedReference$Pair of(java.lang.Object,int)>(r1, i0);

        r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair> = $r4;

     label2:
        return;
    }

    public boolean attemptStamp(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.lang.Object r1, $r3;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicStampedReference$Pair r2, $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.atomic.AtomicStampedReference: java.util.concurrent.atomic.AtomicStampedReference$Pair pair>;

        $r3 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: java.lang.Object reference>;

        if r1 != $r3 goto label2;

        $i1 = r2.<java.util.concurrent.atomic.AtomicStampedReference$Pair: int stamp>;

        if i0 == $i1 goto label1;

        $r4 = staticinvoke <java.util.concurrent.atomic.AtomicStampedReference$Pair: java.util.concurrent.atomic.AtomicStampedReference$Pair of(java.lang.Object,int)>(r1, i0);

        $z1 = specialinvoke r0.<java.util.concurrent.atomic.AtomicStampedReference: boolean casPair(java.util.concurrent.atomic.AtomicStampedReference$Pair,java.util.concurrent.atomic.AtomicStampedReference$Pair)>(r2, $r4);

        if $z1 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private boolean casPair(java.util.concurrent.atomic.AtomicStampedReference$Pair, java.util.concurrent.atomic.AtomicStampedReference$Pair)
    {
        java.util.concurrent.atomic.AtomicStampedReference r0;
        java.util.concurrent.atomic.AtomicStampedReference$Pair r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicStampedReference;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicStampedReference$Pair;

        r2 := @parameter1: java.util.concurrent.atomic.AtomicStampedReference$Pair;

        $r3 = <java.util.concurrent.atomic.AtomicStampedReference: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.atomic.AtomicStampedReference: long pairOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    static long objectFieldOffset(sun.misc.Unsafe, java.lang.String, java.lang.Class)
    {
        sun.misc.Unsafe r0;
        java.lang.String r1;
        java.lang.Class r2;
        java.lang.NoSuchFieldException r3, $r6;
        java.lang.NoSuchFieldError r4, $r7;
        java.lang.reflect.Field $r5;
        long $l0;

        r0 := @parameter0: sun.misc.Unsafe;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

     label1:
        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1);

        $l0 = virtualinvoke r0.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r5);

     label2:
        return $l0;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.NoSuchFieldError;

        specialinvoke $r7.<java.lang.NoSuchFieldError: void <init>(java.lang.String)>(r1);

        r4 = $r7;

        virtualinvoke r4.<java.lang.NoSuchFieldError: java.lang.Throwable initCause(java.lang.Throwable)>(r3);

        throw r4;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        sun.misc.Unsafe $r0, $r1;
        long $l0;

        $r0 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.atomic.AtomicStampedReference: sun.misc.Unsafe UNSAFE> = $r0;

        $r1 = <java.util.concurrent.atomic.AtomicStampedReference: sun.misc.Unsafe UNSAFE>;

        $l0 = staticinvoke <java.util.concurrent.atomic.AtomicStampedReference: long objectFieldOffset(sun.misc.Unsafe,java.lang.String,java.lang.Class)>($r1, "pair", class "java/util/concurrent/atomic/AtomicStampedReference");

        <java.util.concurrent.atomic.AtomicStampedReference: long pairOffset> = $l0;

        return;
    }
}
