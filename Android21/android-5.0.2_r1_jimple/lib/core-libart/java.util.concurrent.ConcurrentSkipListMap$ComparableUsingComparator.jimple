final class java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator extends java.lang.Object implements java.lang.Comparable
{
    final java.lang.Object actualKey;
    final java.util.Comparator 'cmp';

    void <init>(java.lang.Object, java.util.Comparator)
    {
        java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator r0;
        java.lang.Object r1;
        java.util.Comparator r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.util.Comparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator: java.lang.Object actualKey> = r1;

        r0.<java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator: java.util.Comparator 'cmp'> = r2;

        return;
    }

    public int compareTo(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator r0;
        java.lang.Object r1, $r2;
        java.util.Comparator $r3;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator: java.util.Comparator 'cmp'>;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$ComparableUsingComparator: java.lang.Object actualKey>;

        $i0 = interfaceinvoke $r3.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, r1);

        return $i0;
    }
}
