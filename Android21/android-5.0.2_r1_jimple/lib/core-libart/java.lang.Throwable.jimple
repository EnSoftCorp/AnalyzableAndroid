public class java.lang.Throwable extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.String detailMessage;
    private java.lang.Throwable cause;
    private java.util.List suppressedExceptions;
    private transient volatile java.lang.Object stackState;
    private java.lang.StackTraceElement[] stackTrace;

    public void <init>()
    {
        java.lang.Throwable r0;
        java.util.List $r1;
        java.lang.StackTraceElement[] $r2;

        r0 := @this: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r1;

        $r2 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r2;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.String r1;
        java.util.List $r2;
        java.lang.StackTraceElement[] $r3;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r2;

        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;

        $r3 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public void <init>(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r0, r2;
        java.lang.String r1;
        java.util.List $r3;
        java.lang.StackTraceElement[] $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r3;

        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r2;

        $r4 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r4;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;
        java.util.List $r2;
        java.lang.String $r3;
        java.lang.StackTraceElement[] $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r2;

        if r1 != null goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<java.lang.Throwable: java.lang.String toString()>();

     label2:
        r0.<java.lang.Throwable: java.lang.String detailMessage> = $r3;

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r1;

        $r4 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r4;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        return;
    }

    protected void <init>(java.lang.String, java.lang.Throwable, boolean, boolean)
    {
        java.lang.Throwable r0, r2;
        java.lang.String r1;
        boolean z0, z1;
        java.util.List $r3;
        java.lang.StackTraceElement[] $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r0;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r3;

        r0.<java.lang.Throwable: java.lang.String detailMessage> = r1;

        r0.<java.lang.Throwable: java.lang.Throwable cause> = r2;

        if z0 != 0 goto label1;

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = null;

     label1:
        if z1 == 0 goto label2;

        $r4 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r4;

        virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        goto label3;

     label2:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = null;

     label3:
        return;
    }

    public java.lang.Throwable fillInStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.Throwable;

        $r1 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r1 != null goto label1;

        return r0;

     label1:
        $r2 = staticinvoke <java.lang.Throwable: java.lang.Object nativeFillInStackTrace()>();

        r0.<java.lang.Throwable: java.lang.Object stackState> = $r2;

        $r3 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r3;

        return r0;
    }

    public java.lang.String getMessage()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Throwable;

        $r1 = r0.<java.lang.Throwable: java.lang.String detailMessage>;

        return $r1;
    }

    public java.lang.String getLocalizedMessage()
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @this: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        return $r1;
    }

    public java.lang.StackTraceElement[] getStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.lang.Throwable;

        $r1 = specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getInternalStackTrace()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.StackTraceElement[]) $r2;

        return $r3;
    }

    public void setStackTrace(java.lang.StackTraceElement[])
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] r1, r2, $r3;
        int i0, $i1;
        java.lang.Object $r4;
        java.lang.StackTraceElement $r5;
        java.lang.NullPointerException $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.StackTraceElement[];

        $r3 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.lang.StackTraceElement[]) $r4;

        i0 = 0;

     label2:
        $i1 = lengthof r2;

        if i0 >= $i1 goto label4;

        $r5 = r2[i0];

        if $r5 != null goto label3;

        $r6 = new java.lang.NullPointerException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("trace[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] == null");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = r2;

        return;
    }

    public void printStackTrace()
    {
        java.lang.Throwable r0;
        java.io.PrintStream $r1;

        r0 := @this: java.lang.Throwable;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r0.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r1);

        return;
    }

    private static int countDuplicates(java.lang.StackTraceElement[], java.lang.StackTraceElement[])
    {
        java.lang.StackTraceElement[] r0, r1;
        int i0, i1, i2;
        java.lang.StackTraceElement r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.StackTraceElement[];

        r1 := @parameter1: java.lang.StackTraceElement[];

        i0 = 0;

        i1 = lengthof r1;

        i2 = lengthof r0;

     label1:
        i2 = i2 + -1;

        if i2 < 0 goto label2;

        i1 = i1 + -1;

        if i1 < 0 goto label2;

        r2 = r1[i1];

        $r3 = r0[i2];

        $z0 = virtualinvoke r2.<java.lang.StackTraceElement: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        i0 = i0 + 1;

        goto label1;

     label2:
        return i0;
    }

    private java.lang.StackTraceElement[] getInternalStackTrace()
    {
        java.lang.Throwable r0;
        java.lang.StackTraceElement[] $r1, $r2, $r3, $r4, $r5, $r7, $r8;
        java.lang.Object $r6;

        r0 := @this: java.lang.Throwable;

        $r2 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        $r1 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        if $r2 != $r1 goto label1;

        $r6 = r0.<java.lang.Throwable: java.lang.Object stackState>;

        $r7 = staticinvoke <java.lang.Throwable: java.lang.StackTraceElement[] nativeGetStackTrace(java.lang.Object)>($r6);

        r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $r7;

        r0.<java.lang.Throwable: java.lang.Object stackState> = null;

        $r8 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        return $r8;

     label1:
        $r3 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        if $r3 != null goto label2;

        $r5 = <libcore.util.EmptyArray: java.lang.StackTraceElement[] STACK_TRACE_ELEMENT>;

        return $r5;

     label2:
        $r4 = r0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>;

        return $r4;
    }

    public void printStackTrace(java.io.PrintStream)
    {
        java.lang.Throwable r0;
        java.io.PrintStream r1;
        java.io.IOException $r3;
        java.lang.AssertionError $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.io.PrintStream;

     label1:
        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.lang.Appendable,java.lang.String,java.lang.StackTraceElement[])>(r1, "", null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void printStackTrace(java.io.PrintWriter)
    {
        java.lang.Throwable r0;
        java.io.PrintWriter r1;
        java.io.IOException $r3;
        java.lang.AssertionError $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.io.PrintWriter;

     label1:
        specialinvoke r0.<java.lang.Throwable: void printStackTrace(java.lang.Appendable,java.lang.String,java.lang.StackTraceElement[])>(r1, "", null);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private void printStackTrace(java.lang.Appendable, java.lang.String, java.lang.StackTraceElement[]) throws java.io.IOException
    {
        java.lang.Throwable r0, r31, r32;
        java.lang.Appendable r1;
        java.lang.String r2, $r5, $r18, $r20, $r25;
        java.lang.StackTraceElement[] r3, r4;
        int i0, i1, $i2, $i3, $i4;
        java.util.List $r8, $r11;
        boolean $z0;
        java.lang.Object $r13;
        java.lang.StringBuilder $r14, $r16, $r17;
        java.lang.StackTraceElement $r24;
        java.util.Iterator r30;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.StackTraceElement[];

        $r5 = virtualinvoke r0.<java.lang.Throwable: java.lang.String toString()>();

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r5);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\n");

        r4 = specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getInternalStackTrace()>();

        if r4 == null goto label5;

        if r3 == null goto label1;

        $i4 = staticinvoke <java.lang.Throwable: int countDuplicates(java.lang.StackTraceElement[],java.lang.StackTraceElement[])>(r4, r3);

        goto label2;

     label1:
        $i4 = 0;

     label2:
        i0 = $i4;

        i1 = 0;

     label3:
        $i2 = lengthof r4;

        $i3 = $i2 - i0;

        if i1 >= $i3 goto label4;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\tat ");

        $r24 = r4[i1];

        $r25 = virtualinvoke $r24.<java.lang.StackTraceElement: java.lang.String toString()>();

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r25);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\n");

        i1 = i1 + 1;

        goto label3;

     label4:
        if i0 <= 0 goto label5;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\t... ");

        $r20 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>($r20);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(" more\n");

     label5:
        $r8 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r8 == null goto label7;

        $r11 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        r30 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r13 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>();

        r31 = (java.lang.Throwable) $r13;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("\tSuppressed: ");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t");

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r31.<java.lang.Throwable: void printStackTrace(java.lang.Appendable,java.lang.String,java.lang.StackTraceElement[])>(r1, $r18, r4);

        goto label6;

     label7:
        r32 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if r32 == null goto label8;

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r2);

        interfaceinvoke r1.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>("Caused by: ");

        specialinvoke r32.<java.lang.Throwable: void printStackTrace(java.lang.Appendable,java.lang.String,java.lang.StackTraceElement[])>(r1, r2, r4);

     label8:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Throwable r0;
        java.lang.String r1, r2, $r8;
        java.lang.Class $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;

        r0 := @this: java.lang.Throwable;

        r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        if r1 != null goto label1;

        return r2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.Throwable initCause(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.Throwable;

        $r2 = r0.<java.lang.Throwable: java.lang.Throwable cause>;

        if $r2 == r0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cause already initialized");

        throw $r4;

     label1:
        if r1 != r0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("throwable == this");

        throw $r3;

     label2:
        r0.<java.lang.Throwable: java.lang.Throwable cause> = r1;

        return r0;
    }

    public java.lang.Throwable getCause()
    {
        java.lang.Throwable r0, $r1, $r2;

        r0 := @this: java.lang.Throwable;

        $r1 = r0.<java.lang.Throwable: java.lang.Throwable cause>;

        if $r1 != r0 goto label1;

        return null;

     label1:
        $r2 = r0.<java.lang.Throwable: java.lang.Throwable cause>;

        return $r2;
    }

    public final void addSuppressed(java.lang.Throwable)
    {
        java.lang.Throwable r0, r1;
        java.util.List $r2, $r3, $r4;
        boolean $z0;
        java.util.ArrayList $r5;
        java.lang.NullPointerException $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.lang.Throwable;

        if r1 != r0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("throwable == this");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("throwable == null");

        throw $r6;

     label2:
        $r2 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r2 == null goto label4;

        $r3 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r5;

     label3:
        $r4 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

     label4:
        return;
    }

    public final java.lang.Throwable[] getSuppressed()
    {
        java.lang.Throwable r0;
        java.util.List $r1, $r3, $r4, $r5;
        java.lang.Throwable[] $r2, $r6;
        boolean $z0;
        int $i0;
        java.lang.Object[] $r7;

        r0 := @this: java.lang.Throwable;

        $r1 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r1 == null goto label1;

        $r3 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $r4 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $r6 = newarray (java.lang.Throwable)[$i0];

        $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r2 = (java.lang.Throwable[]) $r7;

        goto label2;

     label1:
        $r2 = <libcore.util.EmptyArray: java.lang.Throwable[] THROWABLE>;

     label2:
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.Throwable r0;
        java.io.ObjectOutputStream r1;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.io.ObjectOutputStream;

        specialinvoke r0.<java.lang.Throwable: java.lang.StackTraceElement[] getInternalStackTrace()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable r0;
        java.io.ObjectInputStream r1;
        java.util.List $r2, $r4;
        java.util.ArrayList $r3;

        r0 := @this: java.lang.Throwable;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        if $r2 == null goto label1;

        $r3 = new java.util.ArrayList;

        $r4 = r0.<java.lang.Throwable: java.util.List suppressedExceptions>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        r0.<java.lang.Throwable: java.util.List suppressedExceptions> = $r3;

     label1:
        return;
    }

    private static native java.lang.Object nativeFillInStackTrace();

    private static native java.lang.StackTraceElement[] nativeGetStackTrace(java.lang.Object);

    public static void <clinit>()
    {
        <java.lang.Throwable: long serialVersionUID> = -3042686055658047285L;

        return;
    }
}
