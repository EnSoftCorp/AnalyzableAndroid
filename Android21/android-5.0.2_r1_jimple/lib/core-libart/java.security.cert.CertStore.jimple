public class java.security.cert.CertStore extends java.lang.Object
{
    private static final java.lang.String SERVICE;
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String PROPERTY_NAME;
    private static final java.lang.String DEFAULT_PROPERTY;
    private final java.security.Provider provider;
    private final java.security.cert.CertStoreSpi spiImpl;
    private final java.lang.String type;
    private final java.security.cert.CertStoreParameters certStoreParams;

    protected void <init>(java.security.cert.CertStoreSpi, java.security.Provider, java.lang.String, java.security.cert.CertStoreParameters)
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertStoreSpi r1;
        java.security.Provider r2;
        java.lang.String r3;
        java.security.cert.CertStoreParameters r4;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CertStoreSpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.cert.CertStoreParameters;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.cert.CertStore: java.security.Provider provider> = r2;

        r0.<java.security.cert.CertStore: java.lang.String type> = r3;

        r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl> = r1;

        r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams> = r4;

        return;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters) throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException
    {
        java.lang.String r0, $r12;
        java.security.cert.CertStoreParameters r1;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r2;
        java.lang.Throwable r3;
        org.apache.harmony.security.fortress.Engine $r4;
        java.security.cert.CertStore $r5;
        java.lang.Object $r6;
        java.security.Provider $r7;
        java.security.cert.CertStoreSpi $r8;
        java.lang.NullPointerException $r9;
        java.security.NoSuchAlgorithmException $r10, r13;
        java.security.InvalidAlgorithmParameterException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        if r0 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r9;

     label1:
        $r4 = <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, r1);

        $r5 = new java.security.cert.CertStore;

        $r6 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r8 = (java.security.cert.CertStoreSpi) $r6;

        $r7 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r5.<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>($r8, $r7, r0, r1);

     label2:
        return $r5;

     label3:
        $r10 := @caughtexception;

        r13 = $r10;

        r3 = virtualinvoke r13.<java.security.NoSuchAlgorithmException: java.lang.Throwable getCause()>();

        if r3 != null goto label4;

        throw r13;

     label4:
        $r11 = new java.security.InvalidAlgorithmParameterException;

        $r12 = virtualinvoke r13.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r3);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.lang.String) throws java.security.InvalidAlgorithmParameterException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r2;
        java.security.cert.CertStoreParameters r1;
        java.security.Provider r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        java.security.cert.CertStore $r5;
        java.security.NoSuchProviderException $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        r2 := @parameter2: java.lang.String;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null || provider.isEmpty()");

        throw $r4;

     label2:
        r3 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r2);

        if r3 != null goto label3;

        $r6 = new java.security.NoSuchProviderException;

        specialinvoke $r6.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r2);

        throw $r6;

     label3:
        $r5 = staticinvoke <java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)>(r0, r1, r3);

        return $r5;
    }

    public static java.security.cert.CertStore getInstance(java.lang.String, java.security.cert.CertStoreParameters, java.security.Provider) throws java.security.NoSuchAlgorithmException, java.security.InvalidAlgorithmParameterException
    {
        java.lang.String r0, $r12;
        java.security.cert.CertStoreParameters r1;
        java.security.Provider r2;
        java.lang.Object r3;
        java.lang.Throwable r4;
        org.apache.harmony.security.fortress.Engine $r5;
        java.security.cert.CertStore $r6;
        java.security.cert.CertStoreSpi $r7;
        java.lang.NullPointerException $r8;
        java.lang.IllegalArgumentException $r9;
        java.security.NoSuchAlgorithmException $r10, r13;
        java.security.InvalidAlgorithmParameterException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.cert.CertStoreParameters;

        r2 := @parameter2: java.security.Provider;

        if r2 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r9;

     label1:
        if r0 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r8;

     label2:
        $r5 = <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE>;

        r3 = virtualinvoke $r5.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r2, r1);

        $r6 = new java.security.cert.CertStore;

        $r7 = (java.security.cert.CertStoreSpi) r3;

        specialinvoke $r6.<java.security.cert.CertStore: void <init>(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)>($r7, r2, r0, r1);

     label3:
        return $r6;

     label4:
        $r10 := @caughtexception;

        r13 = $r10;

        r4 = virtualinvoke r13.<java.security.NoSuchAlgorithmException: java.lang.Throwable getCause()>();

        if r4 != null goto label5;

        throw r13;

     label5:
        $r11 = new java.security.InvalidAlgorithmParameterException;

        $r12 = virtualinvoke r13.<java.security.NoSuchAlgorithmException: java.lang.String getMessage()>();

        specialinvoke $r11.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String,java.lang.Throwable)>($r12, r4);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    public final java.lang.String getType()
    {
        java.security.cert.CertStore r0;
        java.lang.String $r1;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.lang.String type>;

        return $r1;
    }

    public final java.security.Provider getProvider()
    {
        java.security.cert.CertStore r0;
        java.security.Provider $r1;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.security.Provider provider>;

        return $r1;
    }

    public final java.security.cert.CertStoreParameters getCertStoreParameters()
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertStoreParameters $r1, $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: java.security.cert.CertStore;

        $r1 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreParameters certStoreParams>;

        $r3 = interfaceinvoke $r2.<java.security.cert.CertStoreParameters: java.lang.Object clone()>();

        $r4 = (java.security.cert.CertStoreParameters) $r3;

        return $r4;
    }

    public final java.util.Collection getCertificates(java.security.cert.CertSelector) throws java.security.cert.CertStoreException
    {
        java.security.cert.CertStore r0;
        java.security.cert.CertSelector r1;
        java.security.cert.CertStoreSpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CertSelector;

        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertStoreSpi: java.util.Collection engineGetCertificates(java.security.cert.CertSelector)>(r1);

        return $r3;
    }

    public final java.util.Collection getCRLs(java.security.cert.CRLSelector) throws java.security.cert.CertStoreException
    {
        java.security.cert.CertStore r0;
        java.security.cert.CRLSelector r1;
        java.security.cert.CertStoreSpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertStore;

        r1 := @parameter0: java.security.cert.CRLSelector;

        $r2 = r0.<java.security.cert.CertStore: java.security.cert.CertStoreSpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertStoreSpi: java.util.Collection engineGetCRLs(java.security.cert.CRLSelector)>(r1);

        return $r3;
    }

    public static final java.lang.String getDefaultType()
    {
        java.lang.String r0, $r1;

        r0 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("certstore.type");

        if r0 != null goto label1;

        $r1 = "LDAP";

        goto label2;

     label1:
        $r1 = r0;

     label2:
        return $r1;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <java.security.cert.CertStore: java.lang.String DEFAULT_PROPERTY> = "LDAP";

        <java.security.cert.CertStore: java.lang.String PROPERTY_NAME> = "certstore.type";

        <java.security.cert.CertStore: java.lang.String SERVICE> = "CertStore";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("CertStore");

        <java.security.cert.CertStore: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }
}
