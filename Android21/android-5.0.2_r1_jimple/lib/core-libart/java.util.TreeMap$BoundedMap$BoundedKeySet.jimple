final class java.util.TreeMap$BoundedMap$BoundedKeySet extends java.util.AbstractSet implements java.util.NavigableSet
{
    final java.util.TreeMap$BoundedMap this$1;

    void <init>(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap r1;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.util.TreeMap$BoundedMap;

        r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        int $i0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $i0 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $z0 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap$BoundedKeySet$1 $r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.TreeMap$Node $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = new java.util.TreeMap$BoundedMap$BoundedKeySet$1;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Node access$700(java.util.TreeMap$BoundedMap,boolean)>($r2, 1);

        specialinvoke $r1.<java.util.TreeMap$BoundedMap$BoundedKeySet$1: void <init>(java.util.TreeMap$BoundedMap$BoundedKeySet,java.util.TreeMap$Node)>(r0, $r3);

        return $r1;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap$BoundedKeySet$2 $r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.TreeMap$Node $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = new java.util.TreeMap$BoundedMap$BoundedKeySet$2;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Node access$700(java.util.TreeMap$BoundedMap,boolean)>($r2, 0);

        specialinvoke $r1.<java.util.TreeMap$BoundedMap$BoundedKeySet$2: void <init>(java.util.TreeMap$BoundedMap$BoundedKeySet,java.util.TreeMap$Node)>(r0, $r3);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2, $r3;
        boolean $z0, $z1;
        java.util.TreeMap $r4;
        java.util.TreeMap$Node $r5;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $z0 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$900(java.util.TreeMap$BoundedMap,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = $r3.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Node findByObject(java.lang.Object)>(r1);

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2, $r3;
        boolean $z0, $z1;
        java.util.TreeMap $r4;
        java.util.TreeMap$Node $r5;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $z0 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$900(java.util.TreeMap$BoundedMap,java.lang.Object)>($r2, r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = $r3.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap: java.util.TreeMap$Node removeInternalByKey(java.lang.Object)>(r1);

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object first()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.lang.Object firstKey()>();

        return $r2;
    }

    public java.lang.Object pollFirst()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.Map$Entry r1;
        java.util.TreeMap$BoundedMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        r1 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.Map$Entry pollFirstEntry()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object last()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.lang.Object lastKey()>();

        return $r2;
    }

    public java.lang.Object pollLast()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.Map$Entry r1;
        java.util.TreeMap$BoundedMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        r1 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.Map$Entry pollLastEntry()>();

        if r1 == null goto label1;

        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$BoundedMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$BoundedMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.lang.Object floorKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$BoundedMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, $r3;
        java.util.TreeMap$BoundedMap $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.lang.Object higherKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.Comparator comparator()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r2 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.util.Comparator comparator()>();

        return $r2;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.TreeMap$BoundedMap $r3;
        java.util.NavigableMap $r4;
        java.util.NavigableSet $r5;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r5;
    }

    public java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1, r2;
        java.util.TreeMap$BoundedMap $r3;
        java.util.NavigableMap $r4;
        java.util.NavigableSet $r5;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = virtualinvoke $r3.<java.util.TreeMap$BoundedMap: java.util.NavigableMap subMap(java.lang.Object,java.lang.Object)>(r1, r2);

        $r5 = interfaceinvoke $r4.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r5;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$BoundedMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.NavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.NavigableMap headMap(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        boolean z0;
        java.util.TreeMap$BoundedMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.NavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.lang.Object r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.NavigableMap $r3;
        java.util.NavigableSet $r4;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap$BoundedMap: java.util.NavigableMap tailMap(java.lang.Object)>(r1);

        $r4 = interfaceinvoke $r3.<java.util.NavigableMap: java.util.NavigableSet navigableKeySet()>();

        return $r4;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.TreeMap$BoundedMap$BoundedKeySet r0;
        java.util.TreeMap$BoundedMap $r1, $r2, $r3, $r5, $r7, $r9, $r11;
        java.util.TreeMap $r4;
        boolean $z0, $z1;
        java.lang.Object $r6, $r10;
        java.util.TreeMap$Bound $r8, $r12;
        java.util.NavigableSet $r13;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedKeySet;

        $r1 = new java.util.TreeMap$BoundedMap;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = $r2.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $z0 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$800(java.util.TreeMap$BoundedMap)>($r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r5 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r6 = staticinvoke <java.util.TreeMap$BoundedMap: java.lang.Object access$1000(java.util.TreeMap$BoundedMap)>($r5);

        $r7 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r8 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound access$600(java.util.TreeMap$BoundedMap)>($r7);

        $r9 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r10 = staticinvoke <java.util.TreeMap$BoundedMap: java.lang.Object access$1100(java.util.TreeMap$BoundedMap)>($r9);

        $r11 = r0.<java.util.TreeMap$BoundedMap$BoundedKeySet: java.util.TreeMap$BoundedMap this$1>;

        $r12 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Bound access$400(java.util.TreeMap$BoundedMap)>($r11);

        specialinvoke $r1.<java.util.TreeMap$BoundedMap: void <init>(java.util.TreeMap,boolean,java.lang.Object,java.util.TreeMap$Bound,java.lang.Object,java.util.TreeMap$Bound)>($r4, $z1, $r6, $r8, $r10, $r12);

        $r13 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: java.util.NavigableSet navigableKeySet()>();

        return $r13;
    }
}
