final class java.util.concurrent.ConcurrentHashMap$ValuesView extends java.util.concurrent.ConcurrentHashMap$CollectionView implements java.util.Collection, java.io.Serializable
{
    private static final long serialVersionUID;

    void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.util.concurrent.ConcurrentHashMap r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: void <init>(java.util.concurrent.ConcurrentHashMap)>(r1);

        return;
    }

    public final boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: boolean containsValue(java.lang.Object)>(r1);

        return $z0;
    }

    public final boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.lang.Object r1, $r3;
        java.util.Iterator r2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label2;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        return 1;

     label2:
        return 0;
    }

    public final java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.util.concurrent.ConcurrentHashMap r1;
        java.util.concurrent.ConcurrentHashMap$Node[] r2, $r3;
        int i0, $i1;
        java.util.concurrent.ConcurrentHashMap$ValueIterator $r4;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 = r0.<java.util.concurrent.ConcurrentHashMap$ValuesView: java.util.concurrent.ConcurrentHashMap map>;

        $r3 = r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Node[] table>;

        r2 = $r3;

        if $r3 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r2;

     label2:
        i0 = $i1;

        $r4 = new java.util.concurrent.ConcurrentHashMap$ValueIterator;

        specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap$ValueIterator: void <init>(java.util.concurrent.ConcurrentHashMap$Node[],int,int,int,java.util.concurrent.ConcurrentHashMap)>(r2, i0, 0, i0, r1);

        return $r4;
    }

    public final boolean add(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean addAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$ValuesView r0;
        java.util.Collection r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$ValuesView;

        r1 := @parameter0: java.util.Collection;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ConcurrentHashMap$ValuesView: long serialVersionUID> = 2249069246763182397L;

        return;
    }
}
