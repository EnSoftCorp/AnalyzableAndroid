public final class java.util.Locale extends java.lang.Object implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    public static final java.util.Locale CANADA;
    public static final java.util.Locale CANADA_FRENCH;
    public static final java.util.Locale CHINA;
    public static final java.util.Locale CHINESE;
    public static final java.util.Locale ENGLISH;
    public static final java.util.Locale FRANCE;
    public static final java.util.Locale FRENCH;
    public static final java.util.Locale GERMAN;
    public static final java.util.Locale GERMANY;
    public static final java.util.Locale ITALIAN;
    public static final java.util.Locale ITALY;
    public static final java.util.Locale JAPAN;
    public static final java.util.Locale JAPANESE;
    public static final java.util.Locale KOREA;
    public static final java.util.Locale KOREAN;
    public static final java.util.Locale PRC;
    public static final java.util.Locale ROOT;
    public static final java.util.Locale SIMPLIFIED_CHINESE;
    public static final java.util.Locale TAIWAN;
    public static final java.util.Locale TRADITIONAL_CHINESE;
    public static final java.util.Locale UK;
    public static final java.util.Locale US;
    public static final char PRIVATE_USE_EXTENSION;
    public static final char UNICODE_LOCALE_EXTENSION;
    private static final java.lang.String UNDETERMINED_LANGUAGE;
    private static java.util.Locale defaultLocale;
    private transient java.lang.String countryCode;
    private transient java.lang.String languageCode;
    private transient java.lang.String variantCode;
    private transient java.lang.String scriptCode;
    private transient java.util.Set unicodeAttributes;
    private transient java.util.Map unicodeKeywords;
    private transient java.util.Map extensions;
    private final transient boolean hasValidatedFields;
    private transient java.lang.String cachedToStringResult;
    private transient java.lang.String cachedLanguageTag;
    private transient java.lang.String cachedIcuLocaleId;
    private static final java.io.ObjectStreamField[] serialPersistentFields;
    private static final java.util.TreeMap GRANDFATHERED_LOCALES;

    public static java.util.Locale forLanguageTag(java.lang.String)
    {
        java.lang.String r0;
        java.util.Locale $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("languageTag == null");

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String,boolean)>(r0, 0);

        return $r1;
    }

    private void <init>(boolean, java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        boolean z0;
        java.lang.String r1, r2;
        java.util.Set $r3;
        java.util.Map $r4, $r5;

        r0 := @this: java.util.Locale;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.Locale: java.lang.String languageCode> = r1;

        r0.<java.util.Locale: java.lang.String countryCode> = r2;

        r0.<java.util.Locale: java.lang.String variantCode> = "";

        r0.<java.util.Locale: java.lang.String scriptCode> = "";

        $r3 = <java.util.Collections: java.util.Set EMPTY_SET>;

        r0.<java.util.Locale: java.util.Set unicodeAttributes> = $r3;

        $r4 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<java.util.Locale: java.util.Map unicodeKeywords> = $r4;

        $r5 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<java.util.Locale: java.util.Map extensions> = $r5;

        r0.<java.util.Locale: boolean hasValidatedFields> = z0;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1;
        java.util.Map $r2, $r3;
        java.util.Set $r4;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        $r4 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $r3 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        $r2 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        specialinvoke r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>(r1, "", "", "", $r4, $r3, $r2, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, r2;
        java.util.Map $r3, $r4;
        java.util.Set $r5;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r5 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $r4 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        $r3 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        specialinvoke r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>(r1, r2, "", "", $r5, $r4, $r3, 0);

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Set, java.util.Map, java.util.Map, boolean)
    {
        java.util.Locale r0, $r20;
        java.lang.String r1, r2, r3, r4, $r19, $r21, $r23, $r29;
        java.util.Set r5, $r27;
        java.util.Map r6, r7, $r26, $r28;
        boolean z0, $z1, $z2;
        java.util.TreeSet r8, $r22;
        java.util.TreeMap r9, r10, $r24, $r25;
        java.lang.NullPointerException $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.Set;

        r6 := @parameter5: java.util.Map;

        r7 := @parameter6: java.util.Map;

        z0 := @parameter7: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 == null goto label1;

        if r2 == null goto label1;

        if r3 != null goto label2;

     label1:
        $r11 = new java.lang.NullPointerException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("language=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",country=");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",variant=");

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label2:
        if z0 == 0 goto label3;

        $r29 = staticinvoke <java.util.Locale: java.lang.String adjustLanguageCode(java.lang.String)>(r1);

        r0.<java.util.Locale: java.lang.String languageCode> = $r29;

        r0.<java.util.Locale: java.lang.String countryCode> = r2;

        r0.<java.util.Locale: java.lang.String variantCode> = r3;

        goto label5;

     label3:
        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        r0.<java.util.Locale: java.lang.String languageCode> = "";

        r0.<java.util.Locale: java.lang.String countryCode> = "";

        r0.<java.util.Locale: java.lang.String variantCode> = r3;

        goto label5;

     label4:
        $r21 = staticinvoke <java.util.Locale: java.lang.String adjustLanguageCode(java.lang.String)>(r1);

        r0.<java.util.Locale: java.lang.String languageCode> = $r21;

        $r20 = <java.util.Locale: java.util.Locale US>;

        $r23 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r20);

        r0.<java.util.Locale: java.lang.String countryCode> = $r23;

        r0.<java.util.Locale: java.lang.String variantCode> = r3;

     label5:
        r0.<java.util.Locale: java.lang.String scriptCode> = r4;

        if z0 == 0 goto label6;

        $r22 = new java.util.TreeSet;

        specialinvoke $r22.<java.util.TreeSet: void <init>(java.util.Collection)>(r5);

        r8 = $r22;

        $r25 = new java.util.TreeMap;

        specialinvoke $r25.<java.util.TreeMap: void <init>(java.util.Map)>(r6);

        r9 = $r25;

        $r24 = new java.util.TreeMap;

        specialinvoke $r24.<java.util.TreeMap: void <init>(java.util.Map)>(r7);

        r10 = $r24;

        staticinvoke <java.util.Locale: void addUnicodeExtensionToExtensionsMap(java.util.Set,java.util.Map,java.util.Map)>(r8, r9, r10);

        $r27 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r8);

        r0.<java.util.Locale: java.util.Set unicodeAttributes> = $r27;

        $r26 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r9);

        r0.<java.util.Locale: java.util.Map unicodeKeywords> = $r26;

        $r28 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r10);

        r0.<java.util.Locale: java.util.Map extensions> = $r28;

        goto label7;

     label6:
        r0.<java.util.Locale: java.util.Set unicodeAttributes> = r5;

        r0.<java.util.Locale: java.util.Map unicodeKeywords> = r6;

        r0.<java.util.Locale: java.util.Map extensions> = r7;

     label7:
        r0.<java.util.Locale: boolean hasValidatedFields> = z0;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, r2, r3;
        java.util.Map $r4, $r5;
        java.util.Set $r6;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r6 = <java.util.Collections: java.util.Set EMPTY_SET>;

        $r5 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        $r4 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        specialinvoke r0.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>(r1, r2, r3, "", $r6, $r5, $r4, 0);

        return;
    }

    public java.lang.Object clone()
    {
        java.util.Locale r0;
        java.lang.CloneNotSupportedException r1, $r3;
        java.lang.Object $r2;
        java.lang.AssertionError $r4;

        r0 := @this: java.util.Locale;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Locale r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Map $r11, $r12;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.Object;

        if r1 != r0 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Locale;

        if $z0 == 0 goto label4;

        r2 = (java.util.Locale) r1;

        $r4 = r0.<java.util.Locale: java.lang.String languageCode>;

        $r3 = r2.<java.util.Locale: java.lang.String languageCode>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r0.<java.util.Locale: java.lang.String countryCode>;

        $r5 = r2.<java.util.Locale: java.lang.String countryCode>;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $r8 = r0.<java.util.Locale: java.lang.String variantCode>;

        $r7 = r2.<java.util.Locale: java.lang.String variantCode>;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $r10 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $r9 = r2.<java.util.Locale: java.lang.String scriptCode>;

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z4 == 0 goto label2;

        $r11 = r0.<java.util.Locale: java.util.Map extensions>;

        $r12 = r2.<java.util.Locale: java.util.Map extensions>;

        $z6 = interfaceinvoke $r11.<java.util.Map: boolean equals(java.lang.Object)>($r12);

        if $z6 == 0 goto label2;

        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;

     label4:
        return 0;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableLocales()>();

        return $r0;
    }

    public java.lang.String getCountry()
    {
        java.util.Locale r0;
        java.lang.String $r1;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String countryCode>;

        return $r1;
    }

    public static java.util.Locale getDefault()
    {
        java.util.Locale $r0;

        $r0 = <java.util.Locale: java.util.Locale defaultLocale>;

        return $r0;
    }

    public final java.lang.String getDisplayCountry()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>($r1);

        return $r2;
    }

    public java.lang.String getDisplayCountry(java.util.Locale)
    {
        java.util.Locale r0, r1, $r6;
        java.lang.String r2, r3, $r4, $r5, $r7;
        boolean $z0, $z1;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.util.Locale;

        $r4 = r0.<java.util.Locale: java.lang.String countryCode>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r5 = r0.<java.util.Locale: java.lang.String countryCode>;

        r2 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1000(java.lang.String,boolean)>($r5, 0);

        $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r7 = r0.<java.util.Locale: java.lang.String countryCode>;

        return $r7;

     label2:
        r3 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayCountry(java.util.Locale,java.util.Locale)>(r0, r1);

        if r3 != null goto label3;

        $r6 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r3 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayCountry(java.util.Locale,java.util.Locale)>(r0, $r6);

     label3:
        return r3;
    }

    public final java.lang.String getDisplayLanguage()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>($r1);

        return $r2;
    }

    public java.lang.String getDisplayLanguage(java.util.Locale)
    {
        java.util.Locale r0, r1, $r7;
        java.lang.String r2, r3, $r4, $r5, $r6, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.util.Locale;

        $r4 = r0.<java.util.Locale: java.lang.String languageCode>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r5 = r0.<java.util.Locale: java.lang.String languageCode>;

        r2 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1100(java.lang.String,boolean)>($r5, 0);

        $r6 = "und";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        $r8 = r0.<java.util.Locale: java.lang.String languageCode>;

        return $r8;

     label2:
        r3 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayLanguage(java.util.Locale,java.util.Locale)>(r0, r1);

        if r3 != null goto label3;

        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r3 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayLanguage(java.util.Locale,java.util.Locale)>(r0, $r7);

     label3:
        return r3;
    }

    public final java.lang.String getDisplayName()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayName(java.util.Locale)>($r1);

        return $r2;
    }

    public java.lang.String getDisplayName(java.util.Locale)
    {
        java.util.Locale r0, r1;
        int i0;
        java.lang.StringBuilder r2, $r4;
        java.lang.String r3, $r5, $r6, $r7, $r8, $r9, $r14, $r15, $r19, $r23, r24, r25, r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.util.Locale;

        i0 = 0;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r2 = $r4;

        $r5 = r0.<java.util.Locale: java.lang.String languageCode>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label03;

        r3 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayLanguage(java.util.Locale)>(r1);

        $z7 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z7 == 0 goto label01;

        $r23 = r0.<java.util.Locale: java.lang.String languageCode>;

        goto label02;

     label01:
        $r23 = r3;

     label02:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        i0 = i0 + 1;

     label03:
        $r6 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label07;

        if i0 != 1 goto label04;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

     label04:
        r24 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>(r1);

        $z6 = virtualinvoke r24.<java.lang.String: boolean isEmpty()>();

        if $z6 == 0 goto label05;

        $r19 = r0.<java.util.Locale: java.lang.String scriptCode>;

        goto label06;

     label05:
        $r19 = r24;

     label06:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        i0 = i0 + 1;

     label07:
        $r7 = r0.<java.util.Locale: java.lang.String countryCode>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label12;

        if i0 != 1 goto label08;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        goto label09;

     label08:
        if i0 != 2 goto label09;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label09:
        r25 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r1);

        $z5 = virtualinvoke r25.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label10;

        $r15 = r0.<java.util.Locale: java.lang.String countryCode>;

        goto label11;

     label10:
        $r15 = r25;

     label11:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i0 = i0 + 1;

     label12:
        $r8 = r0.<java.util.Locale: java.lang.String variantCode>;

        $z3 = virtualinvoke $r8.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label18;

        if i0 != 1 goto label13;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        goto label15;

     label13:
        if i0 == 2 goto label14;

        if i0 != 3 goto label15;

     label14:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label15:
        r26 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>(r1);

        $z4 = virtualinvoke r26.<java.lang.String: boolean isEmpty()>();

        if $z4 == 0 goto label16;

        $r14 = r0.<java.util.Locale: java.lang.String variantCode>;

        goto label17;

     label16:
        $r14 = r26;

     label17:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        i0 = i0 + 1;

     label18:
        if i0 <= 1 goto label19;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label19:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public final java.lang.String getDisplayVariant()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayVariant(java.util.Locale)>($r1);

        return $r2;
    }

    public java.lang.String getDisplayVariant(java.util.Locale)
    {
        java.util.Locale r0, r1, $r7;
        java.lang.String $r3, $r4, $r6, $r9, r10;
        boolean $z0, $z1;
        java.util.IllformedLocaleException $r8;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.util.Locale;

        $r3 = r0.<java.util.Locale: java.lang.String variantCode>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r4 = r0.<java.util.Locale: java.lang.String variantCode>;

        staticinvoke <java.util.Locale$Builder: java.lang.String access$1200(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<java.util.Locale: java.lang.String variantCode>;

        return $r9;

     label4:
        r10 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayVariant(java.util.Locale,java.util.Locale)>(r0, r1);

        if r10 != null goto label5;

        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r10 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayVariant(java.util.Locale,java.util.Locale)>(r0, $r7);

     label5:
        $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label6;

        $r6 = r0.<java.util.Locale: java.lang.String variantCode>;

        return $r6;

     label6:
        return r10;

        catch java.util.IllformedLocaleException from label1 to label2 with label3;
    }

    public java.lang.String getISO3Country()
    {
        java.util.Locale r0;
        java.lang.String r1, $r4, $r6, $r7, $r12, $r15;
        java.lang.StringBuilder $r2, $r3, $r5, $r9, $r10, $r11, $r13, $r14, $r16;
        boolean $z0, $z1;
        java.util.MissingResourceException $r8;

        r0 := @this: java.util.Locale;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("en-");

        $r4 = r0.<java.util.Locale: java.lang.String countryCode>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r1 = staticinvoke <libcore.icu.ICU: java.lang.String getISO3Country(java.lang.String)>($r6);

        $r7 = r0.<java.util.Locale: java.lang.String countryCode>;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r8 = new java.util.MissingResourceException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No 3-letter country code for locale: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FormatData_");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r12, $r15, "ShortCountry");

        throw $r8;

     label1:
        return r1;
    }

    public java.lang.String getISO3Language()
    {
        java.util.Locale r0;
        java.lang.String r1, $r2, $r3, $r4, $r9, $r12;
        boolean $z0, $z1, $z2;
        java.util.MissingResourceException $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13;

        r0 := @this: java.util.Locale;

        $r2 = r0.<java.util.Locale: java.lang.String languageCode>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        $r3 = r0.<java.util.Locale: java.lang.String languageCode>;

        r1 = staticinvoke <libcore.icu.ICU: java.lang.String getISO3Language(java.lang.String)>($r3);

        $r4 = r0.<java.util.Locale: java.lang.String languageCode>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label2;

        $r5 = new java.util.MissingResourceException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No 3-letter language code for locale: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FormatData_");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r9, $r12, "ShortLanguage");

        throw $r5;

     label2:
        return r1;
    }

    public static java.lang.String[] getISOCountries()
    {
        java.lang.String[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOCountries()>();

        return $r0;
    }

    public static java.lang.String[] getISOLanguages()
    {
        java.lang.String[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.lang.String[] getISOLanguages()>();

        return $r0;
    }

    public java.lang.String getLanguage()
    {
        java.util.Locale r0;
        java.lang.String $r1;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String languageCode>;

        return $r1;
    }

    public java.lang.String getVariant()
    {
        java.util.Locale r0;
        java.lang.String $r1;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String variantCode>;

        return $r1;
    }

    public java.lang.String getScript()
    {
        java.util.Locale r0;
        java.lang.String $r1;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String scriptCode>;

        return $r1;
    }

    public java.lang.String getDisplayScript()
    {
        java.util.Locale r0, $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Locale;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r2 = virtualinvoke r0.<java.util.Locale: java.lang.String getDisplayScript(java.util.Locale)>($r1);

        return $r2;
    }

    public java.lang.String getDisplayScript(java.util.Locale)
    {
        java.util.Locale r0, r1, $r4;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.util.Locale;

        $r3 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return "";

     label1:
        r2 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayScript(java.util.Locale,java.util.Locale)>(r0, r1);

        if r2 != null goto label2;

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r2 = staticinvoke <libcore.icu.ICU: java.lang.String getDisplayScript(java.util.Locale,java.util.Locale)>(r0, $r4);

     label2:
        return r2;
    }

    public java.lang.String toLanguageTag()
    {
        java.util.Locale r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String cachedLanguageTag>;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.<java.util.Locale: java.lang.String makeLanguageTag()>();

        r0.<java.util.Locale: java.lang.String cachedLanguageTag> = $r3;

     label1:
        $r2 = r0.<java.util.Locale: java.lang.String cachedLanguageTag>;

        return $r2;
    }

    private java.lang.String makeLanguageTag()
    {
        java.util.Locale r0;
        java.lang.String r4, $r8, $r9, $r10, $r11, $r14, $r22, $r38, $r39, $r43, $r44, $r47, $r48, r49, r50, r51, r54;
        java.lang.String[] r6;
        java.util.Map$Entry r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.StringBuilder $r13, $r28, $r31, r52;
        java.util.Set $r15;
        java.util.Map $r16, $r18;
        java.lang.Character $r17, $r29, $r30;
        java.lang.Object $r19, $r24, $r25, $r32, $r33;
        java.util.IllformedLocaleException $r46;
        java.util.Iterator r53;

        r0 := @this: java.util.Locale;

        r4 = "";

        $z0 = r0.<java.util.Locale: boolean hasValidatedFields>;

        if $z0 == 0 goto label01;

        r49 = r0.<java.util.Locale: java.lang.String languageCode>;

        r50 = r0.<java.util.Locale: java.lang.String countryCode>;

        $r47 = r0.<java.util.Locale: java.lang.String variantCode>;

        r51 = virtualinvoke $r47.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        goto label05;

     label01:
        $r8 = r0.<java.util.Locale: java.lang.String languageCode>;

        r49 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1100(java.lang.String,boolean)>($r8, 0);

        $r9 = r0.<java.util.Locale: java.lang.String countryCode>;

        r50 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1000(java.lang.String,boolean)>($r9, 0);

     label02:
        $r10 = r0.<java.util.Locale: java.lang.String variantCode>;

        r51 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1200(java.lang.String)>($r10);

     label03:
        goto label05;

     label04:
        $r46 := @caughtexception;

        $r48 = r0.<java.util.Locale: java.lang.String variantCode>;

        r6 = staticinvoke <java.util.Locale: java.lang.String[] splitIllformedVariant(java.lang.String)>($r48);

        r51 = r6[0];

        r4 = r6[1];

     label05:
        $z1 = virtualinvoke r49.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        r49 = "und";

     label06:
        $r11 = "no";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r49);

        if $z2 == 0 goto label07;

        $r44 = "NO";

        $z9 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>(r50);

        if $z9 == 0 goto label07;

        $r43 = "NY";

        $z10 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>(r51);

        if $z10 == 0 goto label07;

        r49 = "nn";

        r50 = "NO";

        r51 = "";

     label07:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(int)>(16);

        r52 = $r13;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r49);

        $r14 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $z3 = virtualinvoke $r14.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label08;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r39 = r0.<java.util.Locale: java.lang.String scriptCode>;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

     label08:
        $z5 = virtualinvoke r50.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label09;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

     label09:
        $z4 = virtualinvoke r51.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label10;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r51);

     label10:
        $r16 = r0.<java.util.Locale: java.util.Map extensions>;

        $r15 = interfaceinvoke $r16.<java.util.Map: java.util.Set entrySet()>();

        r53 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z6 = interfaceinvoke r53.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label13;

        $r24 = interfaceinvoke r53.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r24;

        $r25 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r29 = (java.lang.Character) $r25;

        $r30 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(120);

        $z8 = virtualinvoke $r29.<java.lang.Character: boolean equals(java.lang.Object)>($r30);

        if $z8 != 0 goto label12;

        $r28 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r33 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r31 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r32 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r38 = (java.lang.String) $r32;

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

     label12:
        goto label11;

     label13:
        $r18 = r0.<java.util.Locale: java.util.Map extensions>;

        $r17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(120);

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r54 = (java.lang.String) $r19;

        if r54 == null goto label14;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-x-");

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

     label14:
        $z7 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z7 != 0 goto label17;

        if r54 != null goto label15;

        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-x-lvariant-");

        goto label16;

     label15:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label16:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

     label17:
        $r22 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;

        catch java.util.IllformedLocaleException from label02 to label03 with label04;
    }

    private static java.lang.String[] splitIllformedVariant(java.lang.String)
    {
        java.lang.String r0, r1, r4, $r6, $r7, $r8;
        java.lang.String[] r2, r3, $r5;
        int i0, i1, i2, $i4, $i5, $i6, $i7, i8;
        char c3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "";

        $r5[1] = "";

        r3 = $r5;

        i0 = lengthof r2;

        i1 = 0;

     label01:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label03;

        $r8 = r2[i1];

        $z2 = staticinvoke <java.util.Locale: boolean isValidBcp47Alphanum(java.lang.String,int,int)>($r8, 1, 8);

        if $z2 != 0 goto label02;

        i0 = i1;

        goto label03;

     label02:
        i1 = i1 + 1;

        goto label01;

     label03:
        if i0 != 0 goto label04;

        return r3;

     label04:
        i8 = i0;

        i2 = 0;

     label05:
        if i2 >= i0 goto label11;

        r4 = r2[i2];

        $i5 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i5 < 5 goto label06;

        $i7 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i7 > 8 goto label06;

        $z1 = staticinvoke <java.util.Locale: boolean isAsciiAlphaNum(java.lang.String)>(r4);

        if $z1 != 0 goto label10;

        i8 = i2;

        goto label10;

     label06:
        $i6 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i6 != 4 goto label09;

        c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        if c3 < 48 goto label07;

        if c3 > 57 goto label07;

        $z0 = staticinvoke <java.util.Locale: boolean isAsciiAlphaNum(java.lang.String)>(r4);

        if $z0 != 0 goto label08;

     label07:
        i8 = i2;

     label08:
        goto label10;

     label09:
        i8 = i2;

     label10:
        i2 = i2 + 1;

        goto label05;

     label11:
        $r6 = staticinvoke <java.util.Locale: java.lang.String concatenateRange(java.lang.String[],int,int)>(r2, 0, i8);

        r3[0] = $r6;

        $r7 = staticinvoke <java.util.Locale: java.lang.String concatenateRange(java.lang.String[],int,int)>(r2, i8, i0);

        r3[1] = $r7;

        return r3;
    }

    private static java.lang.String concatenateRange(java.lang.String[], int, int)
    {
        java.lang.String[] r0;
        int i0, i1, i2;
        java.lang.StringBuilder r1, $r2;
        java.lang.String $r3, $r4;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(32);

        r1 = $r2;

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        if i2 == i0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label2:
        $r4 = r0[i2];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public java.util.Set getExtensionKeys()
    {
        java.util.Locale r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Map extensions>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public java.lang.String getExtension(char)
    {
        java.util.Locale r0;
        char c0;
        java.util.Map $r1;
        java.lang.Character $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: java.util.Locale;

        c0 := @parameter0: char;

        $r1 = r0.<java.util.Locale: java.util.Map extensions>;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.lang.String getUnicodeLocaleType(java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, $r4;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.Locale: java.util.Map unicodeKeywords>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    public java.util.Set getUnicodeLocaleAttributes()
    {
        java.util.Locale r0;
        java.util.Set $r1;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Set unicodeAttributes>;

        return $r1;
    }

    public java.util.Set getUnicodeLocaleKeys()
    {
        java.util.Locale r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Map unicodeKeywords>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public synchronized int hashCode()
    {
        java.util.Locale r0;
        java.lang.String $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.Map $r5;

        r0 := @this: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.lang.String countryCode>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $r2 = r0.<java.util.Locale: java.lang.String languageCode>;

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        $r3 = r0.<java.util.Locale: java.lang.String variantCode>;

        $i3 = virtualinvoke $r3.<java.lang.String: int hashCode()>();

        $i4 = $i2 + $i3;

        $r4 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $i5 = virtualinvoke $r4.<java.lang.String: int hashCode()>();

        $i6 = $i4 + $i5;

        $r5 = r0.<java.util.Locale: java.util.Map extensions>;

        $i7 = interfaceinvoke $r5.<java.util.Map: int hashCode()>();

        $i8 = $i6 + $i7;

        return $i8;
    }

    public static synchronized void setDefault(java.util.Locale)
    {
        java.util.Locale r0;
        java.lang.String r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: java.util.Locale;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("locale == null");

        throw $r2;

     label1:
        r1 = virtualinvoke r0.<java.util.Locale: java.lang.String toLanguageTag()>();

        <java.util.Locale: java.util.Locale defaultLocale> = r0;

        staticinvoke <libcore.icu.ICU: void setDefaultLocale(java.lang.String)>(r1);

        return;
    }

    public final java.lang.String toString()
    {
        java.util.Locale r0;
        java.lang.String r1, $r3, $r4, $r5, $r6, $r7;
        java.util.Map $r2;

        r0 := @this: java.util.Locale;

        r1 = r0.<java.util.Locale: java.lang.String cachedToStringResult>;

        if r1 != null goto label1;

        $r6 = r0.<java.util.Locale: java.lang.String languageCode>;

        $r5 = r0.<java.util.Locale: java.lang.String countryCode>;

        $r4 = r0.<java.util.Locale: java.lang.String variantCode>;

        $r3 = r0.<java.util.Locale: java.lang.String scriptCode>;

        $r2 = r0.<java.util.Locale: java.util.Map extensions>;

        $r7 = staticinvoke <java.util.Locale: java.lang.String toNewString(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>($r6, $r5, $r4, $r3, $r2);

        r0.<java.util.Locale: java.lang.String cachedToStringResult> = $r7;

        r1 = $r7;

     label1:
        return r1;
    }

    private static java.lang.String toNewString(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.Map)
    {
        java.lang.String r0, r1, r2, r3, $r11, $r14;
        java.util.Map r4;
        java.lang.StringBuilder r5, $r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        int $i0, $i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.util.Map;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label01;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 != 0 goto label01;

        return "";

     label01:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(11);

        r5 = $r6;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $z1 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label02;

        $z8 = interfaceinvoke r4.<java.util.Map: boolean isEmpty()>();

        if $z8 != 0 goto label03;

     label02:
        $z10 = 1;

        goto label04;

     label03:
        $z10 = 0;

     label04:
        z0 = $z10;

        $z2 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        $z9 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z9 == 0 goto label05;

        if z0 == 0 goto label06;

     label05:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label06:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $z3 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label07;

        if z0 == 0 goto label08;

     label07:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label08:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        if z0 == 0 goto label12;

        $z4 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label09;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label09:
        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $z6 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z6 != 0 goto label10;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

     label10:
        $z5 = interfaceinvoke r4.<java.util.Map: boolean isEmpty()>();

        if $z5 != 0 goto label12;

        $z7 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z7 != 0 goto label11;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label11:
        $r14 = staticinvoke <java.util.Locale: java.lang.String serializeExtensions(java.util.Map)>(r4);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

     label12:
        $r11 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Locale r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.lang.String $r3, $r4, $r5, $r6, $r9;
        java.util.Map $r7, $r8;
        boolean $z0;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $r3 = r0.<java.util.Locale: java.lang.String countryCode>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("country", $r3);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("hashcode", -1);

        $r4 = r0.<java.util.Locale: java.lang.String languageCode>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("language", $r4);

        $r5 = r0.<java.util.Locale: java.lang.String variantCode>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("variant", $r5);

        $r6 = r0.<java.util.Locale: java.lang.String scriptCode>;

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("script", $r6);

        $r7 = r0.<java.util.Locale: java.util.Map extensions>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r8 = r0.<java.util.Locale: java.util.Map extensions>;

        $r9 = staticinvoke <java.util.Locale: java.lang.String serializeExtensions(java.util.Map)>($r8);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("extensions", $r9);

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Locale r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        java.lang.String r3, $r5, $r7, $r9, $r11;
        java.lang.Object $r4, $r6, $r8, $r10, $r15;
        java.util.Map $r12, $r14;
        java.util.Set $r13;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        $r4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("country", "");

        $r5 = (java.lang.String) $r4;

        r0.<java.util.Locale: java.lang.String countryCode> = $r5;

        $r6 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("language", "");

        $r7 = (java.lang.String) $r6;

        r0.<java.util.Locale: java.lang.String languageCode> = $r7;

        $r8 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("variant", "");

        $r9 = (java.lang.String) $r8;

        r0.<java.util.Locale: java.lang.String variantCode> = $r9;

        $r10 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("script", "");

        $r11 = (java.lang.String) $r10;

        r0.<java.util.Locale: java.lang.String scriptCode> = $r11;

        $r12 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<java.util.Locale: java.util.Map unicodeKeywords> = $r12;

        $r13 = <java.util.Collections: java.util.Set EMPTY_SET>;

        r0.<java.util.Locale: java.util.Set unicodeAttributes> = $r13;

        $r14 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        r0.<java.util.Locale: java.util.Map extensions> = $r14;

        $r15 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("extensions", null);

        r3 = (java.lang.String) $r15;

        if r3 == null goto label1;

        specialinvoke r0.<java.util.Locale: void readExtensions(java.lang.String)>(r3);

     label1:
        return;
    }

    private void readExtensions(java.lang.String)
    {
        java.util.Locale r0;
        java.lang.String r1, r3;
        java.util.TreeMap r2, r5, $r7, $r12;
        java.lang.String[] r4;
        java.util.TreeSet r6, $r13;
        java.util.Map $r8, $r15;
        java.lang.Character $r9, $r10;
        boolean $z0;
        java.lang.Object $r11;
        java.util.Set $r14;

        r0 := @this: java.util.Locale;

        r1 := @parameter0: java.lang.String;

        $r7 = new java.util.TreeMap;

        specialinvoke $r7.<java.util.TreeMap: void <init>()>();

        r2 = $r7;

        staticinvoke <java.util.Locale: void parseSerializedExtensions(java.lang.String,java.util.Map)>(r1, r2);

        $r8 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r2);

        r0.<java.util.Locale: java.util.Map extensions> = $r8;

        $r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);

        $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r9);

        if $z0 == 0 goto label1;

        $r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);

        $r11 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r3 = (java.lang.String) $r11;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $r12 = new java.util.TreeMap;

        specialinvoke $r12.<java.util.TreeMap: void <init>()>();

        r5 = $r12;

        $r13 = new java.util.TreeSet;

        specialinvoke $r13.<java.util.TreeSet: void <init>()>();

        r6 = $r13;

        staticinvoke <java.util.Locale: void parseUnicodeExtension(java.lang.String[],java.util.Map,java.util.Set)>(r4, r5, r6);

        $r15 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>(r5);

        r0.<java.util.Locale: java.util.Map unicodeKeywords> = $r15;

        $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r6);

        r0.<java.util.Locale: java.util.Set unicodeAttributes> = $r14;

     label1:
        return;
    }

    public static java.lang.String serializeExtensions(java.util.Map)
    {
        java.util.Map r0;
        java.util.Iterator r1;
        java.lang.StringBuilder r2, $r5;
        java.util.Map$Entry r3;
        java.util.Set $r4;
        java.lang.Object $r6, $r7, $r10;
        java.lang.String $r11, $r13;
        boolean $z0;

        r0 := @parameter0: java.util.Map;

        $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(64);

        r2 = $r5;

     label1:
        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label1;

     label2:
        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public static void parseSerializedExtensions(java.lang.String, java.util.Map)
    {
        java.lang.String r0, r5, $r8;
        java.util.Map r1;
        java.lang.String[] r2, r4;
        int[] r3;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20;
        java.lang.Character $r6;
        char $c11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Map;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $i4 = lengthof r2;

        $i5 = $i4 / 2;

        r3 = newarray (int)[$i5];

        i0 = 0;

        i1 = 0;

        r4 = r2;

        i2 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label4;

        r5 = r4[i3];

        $i12 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i12 <= 0 goto label2;

        $i17 = virtualinvoke r5.<java.lang.String: int length()>();

        $i16 = $i17 + 1;

        i0 = i0 + $i16;

     label2:
        $i15 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i15 != 1 goto label3;

        $i14 = i1;

        i1 = i1 + 1;

        r3[$i14] = i0;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        i18 = 0;

     label5:
        if i18 >= i1 goto label8;

        i19 = r3[i18];

        $i6 = i1 - 1;

        if i18 != $i6 goto label6;

        $i13 = virtualinvoke r0.<java.lang.String: int length()>();

        goto label7;

     label6:
        $i7 = i18 + 1;

        $i8 = r3[$i7];

        $i13 = $i8 - 3;

     label7:
        i20 = $i13;

        $i10 = r3[i18];

        $i9 = $i10 - 2;

        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c11);

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i19, i20);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        i18 = i18 + 1;

        goto label5;

     label8:
        return;
    }

    private static boolean isUnM49AreaCode(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.String;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 == 3 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        if i0 >= 3 goto label5;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 < 48 goto label3;

        if c1 <= 57 goto label4;

     label3:
        return 0;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        return 1;
    }

    private static boolean isAsciiAlphaNum(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2;
        char c1;

        r0 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i0 >= $i2 goto label6;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        if c1 < 97 goto label2;

        if c1 <= 122 goto label5;

     label2:
        if c1 < 65 goto label3;

        if c1 <= 90 goto label5;

     label3:
        if c1 < 48 goto label4;

        if c1 <= 57 goto label5;

     label4:
        return 0;

     label5:
        i0 = i0 + 1;

        goto label1;

     label6:
        return 1;
    }

    private static boolean isValidBcp47Alpha(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, i2, i3;
        char c4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if i2 < i0 goto label1;

        if i2 <= i1 goto label2;

     label1:
        return 0;

     label2:
        i3 = 0;

     label3:
        if i3 >= i2 goto label7;

        c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if c4 < 97 goto label4;

        if c4 <= 122 goto label6;

     label4:
        if c4 < 65 goto label5;

        if c4 <= 90 goto label6;

     label5:
        return 0;

     label6:
        i3 = i3 + 1;

        goto label3;

     label7:
        return 1;
    }

    private static boolean isValidBcp47Alphanum(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1, $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 < i0 goto label1;

        $i3 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i3 <= i1 goto label2;

     label1:
        return 0;

     label2:
        $z0 = staticinvoke <java.util.Locale: boolean isAsciiAlphaNum(java.lang.String)>(r0);

        return $z0;
    }

    private static java.lang.String titleCaseAsciiWord(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        byte[] r1;
        java.util.Locale $r2;
        java.nio.charset.Charset $r4, $r6;
        byte $b0, $b3;
        int $i1, $i2;
        java.lang.UnsupportedOperationException $r7, r9;
        java.lang.AssertionError $r8;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = <java.util.Locale: java.util.Locale ROOT>;

        $r3 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        r1 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r4);

        $b0 = r1[0];

        $i1 = $b0 + 65;

        $i2 = $i1 - 97;

        $b3 = (byte) $i2;

        r1[0] = $b3;

        $r5 = new java.lang.String;

        $r6 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset US_ASCII>;

        specialinvoke $r5.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>(r1, $r6);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        r9 = $r7;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>(r9);

        throw $r8;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    private static boolean isValidTypeList(java.lang.String)
    {
        java.lang.String r0, r3;
        java.lang.String[] r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = staticinvoke <java.util.Locale: boolean isValidBcp47Alphanum(java.lang.String,int,int)>(r3, 3, 8);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    private static void addUnicodeExtensionToExtensionsMap(java.util.Set, java.util.Map, java.util.Map)
    {
        java.util.Set r0, $r10;
        java.util.Map r1, r2;
        java.lang.StringBuilder r3, $r6;
        java.util.Iterator r4, r27;
        java.util.Map$Entry r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.Character $r7;
        java.lang.String $r8, $r14, $r15, $r19, $r25;
        java.lang.Object $r11, $r12, $r16, $r20, $r23;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Map;

        $z0 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z7 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z7 == 0 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(32);

        r3 = $r6;

        $z1 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        r4 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $r23 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r25 = (java.lang.String) $r23;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label3;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label2;

     label3:
        $z2 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        $z3 = interfaceinvoke r0.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label4:
        $r10 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r27 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $r12 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r12;

        $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r14 = (java.lang.String) $r11;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.String) $r16;

        $z5 = virtualinvoke $r15.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label6;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $r20 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (java.lang.String) $r20;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label6:
        $z4 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        goto label5;

     label7:
        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);

        $r8 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8);

        return;
    }

    public static void parseUnicodeExtension(java.lang.String[], java.util.Map, java.util.Set)
    {
        java.lang.String[] r0, r5;
        java.util.Map r1;
        java.util.Set r2;
        java.lang.String r3, r6, $r9, $r11;
        java.util.ArrayList r4, $r7;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.util.Map;

        r2 := @parameter2: java.util.Set;

        r3 = null;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r4 = $r7;

        r5 = r0;

        i0 = lengthof r5;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r6 = r5[i1];

        $i3 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i3 != 2 goto label3;

        $i5 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i5 <= 0 goto label2;

        $r11 = staticinvoke <java.util.Locale: java.lang.String joinBcp47Subtags(java.util.List)>(r4);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

        interfaceinvoke r4.<java.util.List: void clear()>();

     label2:
        r3 = r6;

        goto label5;

     label3:
        $i4 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i4 <= 2 goto label5;

        if r3 != null goto label4;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r6);

        goto label5;

     label4:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r6);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $i2 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i2 <= 0 goto label7;

        $r9 = staticinvoke <java.util.Locale: java.lang.String joinBcp47Subtags(java.util.List)>(r4);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r9);

        goto label8;

     label7:
        if r3 == null goto label8;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, "");

     label8:
        return;
    }

    private static java.lang.String joinBcp47Subtags(java.util.List)
    {
        java.util.List r0;
        int i0, i1, $i2, $i3;
        java.lang.StringBuilder r1, $r2;
        java.lang.Object $r3, $r6;
        java.lang.String $r4, $r5, $r7;

        r0 := @parameter0: java.util.List;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $r2 = new java.lang.StringBuilder;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (java.lang.String) $r3;

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        r1 = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (java.lang.String) $r6;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $i3 = i0 - 1;

        if i1 == $i3 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String adjustLanguageCode(java.lang.String)
    {
        java.lang.String r0, r1;
        java.util.Locale $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.Locale US>;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r2);

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("he");

        if $z0 == 0 goto label1;

        r1 = "iw";

        goto label3;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("id");

        if $z1 == 0 goto label2;

        r1 = "in";

        goto label3;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("yi");

        if $z2 == 0 goto label3;

        r1 = "ji";

     label3:
        return r1;
    }

    private static java.lang.String convertGrandfatheredTag(java.lang.String)
    {
        java.lang.String r0, r1, $r4;
        java.util.TreeMap $r2;
        java.lang.Object $r3;

        r0 := @parameter0: java.lang.String;

        $r2 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        $r3 = virtualinvoke $r2.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.String) $r3;

        if r1 == null goto label1;

        $r4 = r1;

        goto label2;

     label1:
        $r4 = r0;

     label2:
        return $r4;
    }

    private static void extractVariantSubtags(java.lang.String[], int, int, java.util.List)
    {
        java.lang.String[] r0;
        int i0, i1, i2;
        java.util.List r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        r2 = r0[i2];

        $z0 = staticinvoke <java.util.Locale$Builder: boolean access$1300(java.lang.String)>(r2);

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    private static int extractExtensions(java.lang.String[], int, int, java.util.Map)
    {
        java.lang.String[] r0;
        int i0, i1, i2, i3, i4, $i5, $i7, $i9, $i11, $i13;
        java.util.Map r1;
        java.lang.String r2, r3, r4, $r9, $r10, $r14, r16, r17;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        char $c6, $c8, $c12, $c14;
        java.lang.Character $r5, $r7, $r11, $r12;
        java.util.Locale $r6, $r13;
        byte $b10;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.Map;

        i2 = -1;

        i3 = -1;

        i4 = i0;

     label01:
        if i4 >= i1 goto label13;

        r2 = r0[i4];

        if i2 == -1 goto label02;

        if i3 != i2 goto label02;

        $z5 = 1;

        goto label03;

     label02:
        $z5 = 0;

     label03:
        z0 = $z5;

        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i9 != 1 goto label08;

        if z0 != 0 goto label08;

        if i3 == -1 goto label06;

        $i11 = i4 - 1;

        if $i11 != i3 goto label04;

        return i3;

     label04:
        r3 = r0[i3];

        $c12 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c12);

        $z4 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r11);

        if $z4 == 0 goto label05;

        return i3;

     label05:
        $i13 = i3 + 1;

        r4 = staticinvoke <java.util.Locale: java.lang.String concatenateRange(java.lang.String[],int,int)>(r0, $i13, i4);

        $c14 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        $r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c14);

        $r13 = <java.util.Locale: java.util.Locale ROOT>;

        $r14 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r13);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14);

     label06:
        i3 = i4;

        $r10 = "x";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label07;

        i2 = i4;

        goto label12;

     label07:
        if i2 == -1 goto label12;

        return i2;

     label08:
        if i3 == -1 goto label11;

        if z0 == 0 goto label09;

        $b10 = 1;

        goto label10;

     label09:
        $b10 = 2;

     label10:
        $z2 = staticinvoke <java.util.Locale: boolean isValidBcp47Alphanum(java.lang.String,int,int)>(r2, $b10, 8);

        if $z2 != 0 goto label12;

        return i4;

     label11:
        return i4;

     label12:
        i4 = i4 + 1;

        goto label01;

     label13:
        if i3 == -1 goto label16;

        $i5 = i4 - 1;

        if $i5 != i3 goto label14;

        return i3;

     label14:
        r16 = r0[i3];

        $c6 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c6);

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 == 0 goto label15;

        return i3;

     label15:
        $i7 = i3 + 1;

        r17 = staticinvoke <java.util.Locale: java.lang.String concatenateRange(java.lang.String[],int,int)>(r0, $i7, i4);

        $c8 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c8);

        $r6 = <java.util.Locale: java.util.Locale ROOT>;

        $r9 = virtualinvoke r17.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

     label16:
        return i4;
    }

    private static java.util.Locale forLanguageTag(java.lang.String, boolean)
    {
        java.lang.String r0, r1, r3, r4, r9, $r11, $r15, $r21, $r26, $r30, $r35, $r36, $r43, r44, r45;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String[] r2, $r22;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.ArrayList r5, $r33;
        java.util.Map r6, r8;
        java.util.Set r7;
        java.lang.StringBuilder r10, $r14, $r25, $r28, $r29, $r31, $r32, $r38, $r39, $r40, $r41, $r42;
        java.lang.Character $r12, $r23;
        java.util.Locale $r13;
        java.lang.Object $r16, $r24;
        java.util.TreeSet $r17;
        java.util.TreeMap $r18, $r34;
        java.util.IllformedLocaleException $r27, $r37;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 = staticinvoke <java.util.Locale: java.lang.String convertGrandfatheredTag(java.lang.String)>(r0);

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        i0 = lengthof r2;

        i1 = 0;

     label01:
        $i4 = lengthof r2;

        if i1 >= $i4 goto label05;

        r3 = r2[i1];

        $z4 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z4 != 0 goto label02;

        $i9 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i9 <= 8 goto label04;

     label02:
        if z0 == 0 goto label03;

        $r37 = new java.util.IllformedLocaleException;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid subtag at index: ");

        $r39 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r38 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in tag: ");

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r37.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r43);

        throw $r37;

     label03:
        i0 = i1 - 1;

        goto label05;

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        $r11 = r2[0];

        r44 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1100(java.lang.String,boolean)>($r11, z0);

        r45 = "";

        i2 = 1;

        if i0 <= i2 goto label06;

        $r35 = r2[i2];

        r45 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1400(java.lang.String,boolean)>($r35, 0);

        $z5 = virtualinvoke r45.<java.lang.String: boolean isEmpty()>();

        if $z5 != 0 goto label06;

        i2 = i2 + 1;

     label06:
        r4 = "";

        if i0 <= i2 goto label07;

        $r36 = r2[i2];

        r4 = staticinvoke <java.util.Locale$Builder: java.lang.String access$1000(java.lang.String,boolean)>($r36, 0);

        $z3 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label07;

        i2 = i2 + 1;

     label07:
        r5 = null;

        if i0 <= i2 goto label08;

        $r33 = new java.util.ArrayList;

        specialinvoke $r33.<java.util.ArrayList: void <init>()>();

        r5 = $r33;

        staticinvoke <java.util.Locale: void extractVariantSubtags(java.lang.String[],int,int,java.util.List)>(r2, i2, i0, r5);

        $i8 = interfaceinvoke r5.<java.util.List: int size()>();

        i2 = i2 + $i8;

     label08:
        r6 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        if i0 <= i2 goto label09;

        $r34 = new java.util.TreeMap;

        specialinvoke $r34.<java.util.TreeMap: void <init>()>();

        r6 = $r34;

        i2 = staticinvoke <java.util.Locale: int extractExtensions(java.lang.String[],int,int,java.util.Map)>(r2, i2, i0, r6);

     label09:
        if i2 == i0 goto label10;

        if z0 == 0 goto label10;

        $r27 = new java.util.IllformedLocaleException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unparseable subtag: ");

        $r26 = r2[i2];

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from language tag: ");

        $r29 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.util.IllformedLocaleException: void <init>(java.lang.String)>($r30);

        throw $r27;

     label10:
        r7 = <java.util.Collections: java.util.Set EMPTY_SET>;

        r8 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        $r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);

        $z1 = interfaceinvoke r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r12);

        if $z1 == 0 goto label11;

        $r17 = new java.util.TreeSet;

        specialinvoke $r17.<java.util.TreeSet: void <init>()>();

        r7 = $r17;

        $r18 = new java.util.TreeMap;

        specialinvoke $r18.<java.util.TreeMap: void <init>()>();

        r8 = $r18;

        $r23 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(117);

        $r24 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r23);

        $r21 = (java.lang.String) $r24;

        $r22 = virtualinvoke $r21.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        staticinvoke <java.util.Locale: void parseUnicodeExtension(java.lang.String[],java.util.Map,java.util.Set)>($r22, r8, r7);

     label11:
        r9 = "";

        if r5 == null goto label15;

        $z2 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label15;

        $r14 = new java.lang.StringBuilder;

        $i6 = interfaceinvoke r5.<java.util.List: int size()>();

        $i5 = $i6 * 8;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(int)>($i5);

        r10 = $r14;

        i3 = 0;

     label12:
        $i7 = interfaceinvoke r5.<java.util.List: int size()>();

        if i3 >= $i7 goto label14;

        if i3 == 0 goto label13;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

     label13:
        $r16 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i3);

        $r15 = (java.lang.String) $r16;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        i3 = i3 + 1;

        goto label12;

     label14:
        r9 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r13 = new java.util.Locale;

        specialinvoke $r13.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.Map,boolean)>(r44, r4, r9, r45, r7, r8, r6, 1);

        return $r13;
    }

    static boolean access$000(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <java.util.Locale: boolean isValidBcp47Alpha(java.lang.String,int,int)>(r0, i0, i1);

        return $z0;
    }

    static java.util.Locale access$100(java.lang.String, boolean)
    {
        java.lang.String r0;
        boolean z0;
        java.util.Locale $r1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String,boolean)>(r0, z0);

        return $r1;
    }

    static boolean access$200(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.util.Locale: boolean isUnM49AreaCode(java.lang.String)>(r0);

        return $z0;
    }

    static boolean access$300(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.util.Locale: boolean isAsciiAlphaNum(java.lang.String)>(r0);

        return $z0;
    }

    static java.lang.String access$400(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.util.Locale: java.lang.String titleCaseAsciiWord(java.lang.String)>(r0);

        return $r1;
    }

    static java.util.Map access$500(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.Map $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Map extensions>;

        return $r1;
    }

    static java.util.Map access$600(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.Map $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Map unicodeKeywords>;

        return $r1;
    }

    static java.util.Set access$700(java.util.Locale)
    {
        java.util.Locale r0;
        java.util.Set $r1;

        r0 := @parameter0: java.util.Locale;

        $r1 = r0.<java.util.Locale: java.util.Set unicodeAttributes>;

        return $r1;
    }

    static boolean access$800(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <java.util.Locale: boolean isValidBcp47Alphanum(java.lang.String,int,int)>(r0, i0, i1);

        return $z0;
    }

    static boolean access$900(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <java.util.Locale: boolean isValidTypeList(java.lang.String)>(r0);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.String r0, r1, r2;
        java.util.Locale $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        java.io.ObjectStreamField $r27, $r30, $r31, $r32, $r33, $r34;
        java.io.ObjectStreamField[] $r28;
        java.lang.Class $r29;
        java.util.TreeMap $r35, $r37, $r40, $r42, $r44, $r46, $r48, $r50, $r52, $r54, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r72, $r74, $r76, $r78, $r80, $r82, $r84, $r86, $r87;
        java.util.Comparator $r38;

        <java.util.Locale: java.lang.String UNDETERMINED_LANGUAGE> = "und";

        <java.util.Locale: char UNICODE_LOCALE_EXTENSION> = 117;

        <java.util.Locale: char PRIVATE_USE_EXTENSION> = 120;

        <java.util.Locale: long serialVersionUID> = 9149081749638150636L;

        $r3 = new java.util.Locale;

        specialinvoke $r3.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "en", "CA");

        <java.util.Locale: java.util.Locale CANADA> = $r3;

        $r4 = new java.util.Locale;

        specialinvoke $r4.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "fr", "CA");

        <java.util.Locale: java.util.Locale CANADA_FRENCH> = $r4;

        $r5 = new java.util.Locale;

        specialinvoke $r5.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "CN");

        <java.util.Locale: java.util.Locale CHINA> = $r5;

        $r6 = new java.util.Locale;

        specialinvoke $r6.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "");

        <java.util.Locale: java.util.Locale CHINESE> = $r6;

        $r7 = new java.util.Locale;

        specialinvoke $r7.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "en", "");

        <java.util.Locale: java.util.Locale ENGLISH> = $r7;

        $r8 = new java.util.Locale;

        specialinvoke $r8.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "fr", "FR");

        <java.util.Locale: java.util.Locale FRANCE> = $r8;

        $r9 = new java.util.Locale;

        specialinvoke $r9.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "fr", "");

        <java.util.Locale: java.util.Locale FRENCH> = $r9;

        $r10 = new java.util.Locale;

        specialinvoke $r10.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "de", "");

        <java.util.Locale: java.util.Locale GERMAN> = $r10;

        $r11 = new java.util.Locale;

        specialinvoke $r11.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "de", "DE");

        <java.util.Locale: java.util.Locale GERMANY> = $r11;

        $r12 = new java.util.Locale;

        specialinvoke $r12.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "it", "");

        <java.util.Locale: java.util.Locale ITALIAN> = $r12;

        $r13 = new java.util.Locale;

        specialinvoke $r13.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "it", "IT");

        <java.util.Locale: java.util.Locale ITALY> = $r13;

        $r14 = new java.util.Locale;

        specialinvoke $r14.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "ja", "JP");

        <java.util.Locale: java.util.Locale JAPAN> = $r14;

        $r15 = new java.util.Locale;

        specialinvoke $r15.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "ja", "");

        <java.util.Locale: java.util.Locale JAPANESE> = $r15;

        $r17 = new java.util.Locale;

        specialinvoke $r17.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "ko", "KR");

        <java.util.Locale: java.util.Locale KOREA> = $r17;

        $r16 = new java.util.Locale;

        specialinvoke $r16.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "ko", "");

        <java.util.Locale: java.util.Locale KOREAN> = $r16;

        $r19 = new java.util.Locale;

        specialinvoke $r19.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "CN");

        <java.util.Locale: java.util.Locale PRC> = $r19;

        $r18 = new java.util.Locale;

        specialinvoke $r18.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "", "");

        <java.util.Locale: java.util.Locale ROOT> = $r18;

        $r21 = new java.util.Locale;

        specialinvoke $r21.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "CN");

        <java.util.Locale: java.util.Locale SIMPLIFIED_CHINESE> = $r21;

        $r20 = new java.util.Locale;

        specialinvoke $r20.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "TW");

        <java.util.Locale: java.util.Locale TAIWAN> = $r20;

        $r23 = new java.util.Locale;

        specialinvoke $r23.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "zh", "TW");

        <java.util.Locale: java.util.Locale TRADITIONAL_CHINESE> = $r23;

        $r22 = new java.util.Locale;

        specialinvoke $r22.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "en", "GB");

        <java.util.Locale: java.util.Locale UK> = $r22;

        $r25 = new java.util.Locale;

        specialinvoke $r25.<java.util.Locale: void <init>(boolean,java.lang.String,java.lang.String)>(1, "en", "US");

        <java.util.Locale: java.util.Locale US> = $r25;

        $r24 = <java.util.Locale: java.util.Locale US>;

        <java.util.Locale: java.util.Locale defaultLocale> = $r24;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.language", "en");

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.region", "US");

        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("user.variant", "");

        $r26 = new java.util.Locale;

        specialinvoke $r26.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r0, r1, r2);

        <java.util.Locale: java.util.Locale defaultLocale> = $r26;

        $r28 = newarray (java.io.ObjectStreamField)[6];

        $r27 = new java.io.ObjectStreamField;

        specialinvoke $r27.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("country", class "java/lang/String");

        $r28[0] = $r27;

        $r30 = new java.io.ObjectStreamField;

        $r29 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r30.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("hashcode", $r29);

        $r28[1] = $r30;

        $r32 = new java.io.ObjectStreamField;

        specialinvoke $r32.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("language", class "java/lang/String");

        $r28[2] = $r32;

        $r31 = new java.io.ObjectStreamField;

        specialinvoke $r31.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("variant", class "java/lang/String");

        $r28[3] = $r31;

        $r34 = new java.io.ObjectStreamField;

        specialinvoke $r34.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("script", class "java/lang/String");

        $r28[4] = $r34;

        $r33 = new java.io.ObjectStreamField;

        specialinvoke $r33.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("extensions", class "java/lang/String");

        $r28[5] = $r33;

        <java.util.Locale: java.io.ObjectStreamField[] serialPersistentFields> = $r28;

        $r37 = new java.util.TreeMap;

        $r38 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r37.<java.util.TreeMap: void <init>(java.util.Comparator)>($r38);

        <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES> = $r37;

        $r35 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r35.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("en-GB-oed", "en-GB-x-oed");

        $r42 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r42.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-ami", "ami");

        $r40 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r40.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-bnn", "bnn");

        $r46 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r46.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-default", "en-x-i-default");

        $r44 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r44.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-enochian", "und-x-i-enochian");

        $r50 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r50.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-hak", "hak");

        $r48 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r48.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-klingon", "tlh");

        $r54 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r54.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-lux", "lb");

        $r52 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r52.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-mingo", "see-x-i-mingo");

        $r59 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r59.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-navajo", "nv");

        $r61 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r61.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-pwn", "pwn");

        $r55 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r55.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-tao", "tao");

        $r57 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r57.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-tay", "tay");

        $r67 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r67.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("i-tsu", "tsu");

        $r69 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r69.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sgn-BE-FR", "sfb");

        $r63 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r63.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sgn-BE-NL", "vgt");

        $r65 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r65.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("sgn-CH-DE", "sgg");

        $r76 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r76.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("art-lojban", "jbo");

        $r78 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r78.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("cel-gaulish", "xtg-x-cel-gaulish");

        $r72 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r72.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("no-bok", "nb");

        $r74 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r74.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("no-nyn", "nn");

        $r84 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r84.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh-guoyu", "cmn");

        $r86 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r86.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh-hakka", "hak");

        $r80 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r80.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh-min", "nan-x-zh-min");

        $r82 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r82.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh-min-nan", "nan");

        $r87 = <java.util.Locale: java.util.TreeMap GRANDFATHERED_LOCALES>;

        virtualinvoke $r87.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("zh-xiang", "hsn");

        return;
    }
}
