public final class libcore.reflect.TypeVariableImpl extends java.lang.Object implements java.lang.reflect.TypeVariable
{
    private libcore.reflect.TypeVariableImpl formalVar;
    private final java.lang.reflect.GenericDeclaration declOfVarUser;
    private final java.lang.String name;
    private java.lang.reflect.GenericDeclaration genericDeclaration;
    private libcore.reflect.ListOfTypes bounds;

    public boolean equals(java.lang.Object)
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.Object r1;
        java.lang.reflect.TypeVariable r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4;
        java.lang.reflect.GenericDeclaration $r5, $r6;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.reflect.TypeVariable;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.lang.reflect.TypeVariable) r1;

        $r3 = virtualinvoke r0.<libcore.reflect.TypeVariableImpl: java.lang.String getName()>();

        $r4 = interfaceinvoke r2.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $r6 = interfaceinvoke r2.<java.lang.reflect.TypeVariable: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $z2 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public int hashCode()
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.reflect.GenericDeclaration $r2;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        $r1 = virtualinvoke r0.<libcore.reflect.TypeVariableImpl: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        $i1 = 31 * $i0;

        $r2 = virtualinvoke r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration getGenericDeclaration()>();

        $i2 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    void <init>(java.lang.reflect.GenericDeclaration, java.lang.String, libcore.reflect.ListOfTypes)
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;
        libcore.reflect.ListOfTypes r3;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: libcore.reflect.ListOfTypes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration> = r1;

        r0.<libcore.reflect.TypeVariableImpl: java.lang.String name> = r2;

        r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.ListOfTypes bounds> = r3;

        r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.TypeVariableImpl formalVar> = r0;

        r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration declOfVarUser> = null;

        return;
    }

    void <init>(java.lang.reflect.GenericDeclaration, java.lang.String)
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration r1;
        java.lang.String r2;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        r1 := @parameter0: java.lang.reflect.GenericDeclaration;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.reflect.TypeVariableImpl: java.lang.String name> = r2;

        r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration declOfVarUser> = r1;

        return;
    }

    static java.lang.reflect.TypeVariable findFormalVar(java.lang.reflect.GenericDeclaration, java.lang.String)
    {
        java.lang.reflect.GenericDeclaration r0;
        java.lang.String r1, $r5;
        java.lang.reflect.TypeVariable[] r2, r3;
        int i0, i1;
        java.lang.reflect.TypeVariable r4;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.GenericDeclaration;

        r1 := @parameter1: java.lang.String;

        r2 = interfaceinvoke r0.<java.lang.reflect.GenericDeclaration: java.lang.reflect.TypeVariable[] getTypeParameters()>();

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $r5 = interfaceinvoke r4.<java.lang.reflect.TypeVariable: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private static java.lang.reflect.GenericDeclaration nextLayer(java.lang.reflect.GenericDeclaration)
    {
        java.lang.reflect.GenericDeclaration r0, r9;
        java.lang.Class r1, $r4, $r6, $r8;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.reflect.Method $r5;
        java.lang.reflect.AccessibleObject $r7;

        r0 := @parameter0: java.lang.reflect.GenericDeclaration;

        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        r1 = (java.lang.Class) r0;

        $r7 = staticinvoke <libcore.reflect.AnnotationAccess: java.lang.reflect.AccessibleObject getEnclosingMethodOrConstructor(java.lang.Class)>(r1);

        r9 = (java.lang.reflect.GenericDeclaration) $r7;

        if r9 == null goto label1;

        return r9;

     label1:
        $r8 = virtualinvoke r1.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        return $r8;

     label2:
        $z1 = r0 instanceof java.lang.reflect.Method;

        if $z1 == 0 goto label3;

        $r5 = (java.lang.reflect.Method) r0;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        return $r6;

     label3:
        $z2 = r0 instanceof java.lang.reflect.Constructor;

        if $z2 == 0 goto label4;

        $r3 = (java.lang.reflect.Constructor) r0;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        return $r4;

     label4:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;
    }

    void resolve()
    {
        libcore.reflect.TypeVariableImpl r0, $r3, $r6, $r7, $r9;
        java.lang.reflect.GenericDeclaration r1, $r8;
        java.lang.reflect.TypeVariable r2, $r5;
        java.lang.String $r4;
        libcore.reflect.ListOfTypes $r10;
        java.lang.AssertionError $r11;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        $r3 = r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.TypeVariableImpl formalVar>;

        if $r3 == null goto label1;

        return;

     label1:
        r1 = r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration declOfVarUser>;

     label2:
        $r4 = r0.<libcore.reflect.TypeVariableImpl: java.lang.String name>;

        $r5 = staticinvoke <libcore.reflect.TypeVariableImpl: java.lang.reflect.TypeVariable findFormalVar(java.lang.reflect.GenericDeclaration,java.lang.String)>(r1, $r4);

        r2 = $r5;

        if $r5 != null goto label3;

        r1 = staticinvoke <libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration nextLayer(java.lang.reflect.GenericDeclaration)>(r1);

        if r1 != null goto label2;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>("illegal type variable reference");

        throw $r11;

     label3:
        $r6 = (libcore.reflect.TypeVariableImpl) r2;

        r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.TypeVariableImpl formalVar> = $r6;

        $r7 = r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.TypeVariableImpl formalVar>;

        $r8 = $r7.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration> = $r8;

        $r9 = r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.TypeVariableImpl formalVar>;

        $r10 = $r9.<libcore.reflect.TypeVariableImpl: libcore.reflect.ListOfTypes bounds>;

        r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.ListOfTypes bounds> = $r10;

        return;
    }

    public java.lang.reflect.Type[] getBounds()
    {
        libcore.reflect.TypeVariableImpl r0;
        libcore.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        virtualinvoke r0.<libcore.reflect.TypeVariableImpl: void resolve()>();

        $r1 = r0.<libcore.reflect.TypeVariableImpl: libcore.reflect.ListOfTypes bounds>;

        $r2 = virtualinvoke $r1.<libcore.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (java.lang.reflect.Type[]) $r3;

        return $r4;
    }

    public java.lang.reflect.GenericDeclaration getGenericDeclaration()
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.reflect.GenericDeclaration $r1;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        virtualinvoke r0.<libcore.reflect.TypeVariableImpl: void resolve()>();

        $r1 = r0.<libcore.reflect.TypeVariableImpl: java.lang.reflect.GenericDeclaration genericDeclaration>;

        return $r1;
    }

    public java.lang.String getName()
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.String $r1;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        $r1 = r0.<libcore.reflect.TypeVariableImpl: java.lang.String name>;

        return $r1;
    }

    public java.lang.String toString()
    {
        libcore.reflect.TypeVariableImpl r0;
        java.lang.String $r1;

        r0 := @this: libcore.reflect.TypeVariableImpl;

        $r1 = r0.<libcore.reflect.TypeVariableImpl: java.lang.String name>;

        return $r1;
    }
}
