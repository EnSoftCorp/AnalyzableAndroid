public class javax.xml.transform.dom.DOMResult extends java.lang.Object implements javax.xml.transform.Result
{
    public static final java.lang.String FEATURE;
    private org.w3c.dom.Node node;
    private org.w3c.dom.Node nextSibling;
    private java.lang.String systemId;

    public void <init>()
    {
        javax.xml.transform.dom.DOMResult r0;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = null;

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = null;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = null;

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>(null);

        return;
    }

    public void <init>(org.w3c.dom.Node)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = null;

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = null;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = null;

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>(r1);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>(null);

        return;
    }

    public void <init>(org.w3c.dom.Node, java.lang.String)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1;
        java.lang.String r2;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = null;

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = null;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = null;

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>(r1);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>(null);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>(r2);

        return;
    }

    public void <init>(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1, r2;
        short $s0, $s1;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = null;

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = null;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = null;

        if r2 == null goto label2;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");

        throw $r4;

     label1:
        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)>(r2);

        $s1 = $s0 & 16;

        if $s1 != 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is not contained by the node.");

        throw $r3;

     label2:
        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>(r1);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>(r2);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>(null);

        return;
    }

    public void <init>(org.w3c.dom.Node, org.w3c.dom.Node, java.lang.String)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1, r2;
        java.lang.String r3;
        short $s0, $s1;
        java.lang.IllegalArgumentException $r4, $r5;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = null;

        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = null;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = null;

        if r2 == null goto label2;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");

        throw $r5;

     label1:
        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)>(r2);

        $s1 = $s0 & 16;

        if $s1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is not contained by the node.");

        throw $r4;

     label2:
        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNode(org.w3c.dom.Node)>(r1);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setNextSibling(org.w3c.dom.Node)>(r2);

        virtualinvoke r0.<javax.xml.transform.dom.DOMResult: void setSystemId(java.lang.String)>(r3);

        return;
    }

    public void setNode(org.w3c.dom.Node)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1, $r2, $r3;
        short $s0, $s1;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling>;

        if $r2 == null goto label2;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");

        throw $r5;

     label1:
        $r3 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling>;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)>($r3);

        $s1 = $s0 & 16;

        if $s1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is not contained by the node.");

        throw $r4;

     label2:
        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node> = r1;

        return;
    }

    public org.w3c.dom.Node getNode()
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node $r1;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        $r1 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node>;

        return $r1;
    }

    public void setNextSibling(org.w3c.dom.Node)
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node r1, $r2, $r3;
        short $s0, $s1;
        java.lang.IllegalArgumentException $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: org.w3c.dom.Node;

        if r1 == null goto label2;

        $r2 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node>;

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is contained by the \"null\" node.");

        throw $r5;

     label1:
        $r3 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node node>;

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short compareDocumentPosition(org.w3c.dom.Node)>(r1);

        $s1 = $s0 & 16;

        if $s1 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot create a DOMResult when the nextSibling is not contained by the node.");

        throw $r4;

     label2:
        r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling> = r1;

        return;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        javax.xml.transform.dom.DOMResult r0;
        org.w3c.dom.Node $r1;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        $r1 = r0.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node nextSibling>;

        return $r1;
    }

    public void setSystemId(java.lang.String)
    {
        javax.xml.transform.dom.DOMResult r0;
        java.lang.String r1;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        r1 := @parameter0: java.lang.String;

        r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId> = r1;

        return;
    }

    public java.lang.String getSystemId()
    {
        javax.xml.transform.dom.DOMResult r0;
        java.lang.String $r1;

        r0 := @this: javax.xml.transform.dom.DOMResult;

        $r1 = r0.<javax.xml.transform.dom.DOMResult: java.lang.String systemId>;

        return $r1;
    }

    public static void <clinit>()
    {
        <javax.xml.transform.dom.DOMResult: java.lang.String FEATURE> = "http://javax.xml.transform.dom.DOMResult/feature";

        return;
    }
}
