final class java.util.concurrent.Phaser$QNode extends java.lang.Object implements java.util.concurrent.ForkJoinPool$ManagedBlocker
{
    final java.util.concurrent.Phaser phaser;
    final int phase;
    final boolean interruptible;
    final boolean timed;
    boolean wasInterrupted;
    long nanos;
    final long deadline;
    volatile java.lang.Thread thread;
    java.util.concurrent.Phaser$QNode next;

    void <init>(java.util.concurrent.Phaser, int, boolean, boolean, long)
    {
        java.util.concurrent.Phaser$QNode r0;
        java.util.concurrent.Phaser r1;
        int i0;
        boolean z0, z1;
        long l1, $l2, $l3;
        java.lang.Thread $r2;

        r0 := @this: java.util.concurrent.Phaser$QNode;

        r1 := @parameter0: java.util.concurrent.Phaser;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        l1 := @parameter4: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.Phaser$QNode: java.util.concurrent.Phaser phaser> = r1;

        r0.<java.util.concurrent.Phaser$QNode: int phase> = i0;

        r0.<java.util.concurrent.Phaser$QNode: boolean interruptible> = z0;

        r0.<java.util.concurrent.Phaser$QNode: long nanos> = l1;

        r0.<java.util.concurrent.Phaser$QNode: boolean timed> = z1;

        if z1 == 0 goto label1;

        $l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $l3 = $l2 + l1;

        goto label2;

     label1:
        $l3 = 0L;

     label2:
        r0.<java.util.concurrent.Phaser$QNode: long deadline> = $l3;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = $r2;

        return;
    }

    public boolean isReleasable()
    {
        java.util.concurrent.Phaser$QNode r0;
        java.lang.Thread $r1;
        java.util.concurrent.Phaser $r2;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        long $l2, $l4, $l6, $l7, $l8;
        byte $b3, $b5;

        r0 := @this: java.util.concurrent.Phaser$QNode;

        $r1 = r0.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $r2 = r0.<java.util.concurrent.Phaser$QNode: java.util.concurrent.Phaser phaser>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.Phaser: int getPhase()>();

        $i1 = r0.<java.util.concurrent.Phaser$QNode: int phase>;

        if $i0 == $i1 goto label2;

        r0.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

        return 1;

     label2:
        $z0 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z0 == 0 goto label3;

        r0.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted> = 1;

     label3:
        $z1 = r0.<java.util.concurrent.Phaser$QNode: boolean wasInterrupted>;

        if $z1 == 0 goto label4;

        $z3 = r0.<java.util.concurrent.Phaser$QNode: boolean interruptible>;

        if $z3 == 0 goto label4;

        r0.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

        return 1;

     label4:
        $z2 = r0.<java.util.concurrent.Phaser$QNode: boolean timed>;

        if $z2 == 0 goto label6;

        $l2 = r0.<java.util.concurrent.Phaser$QNode: long nanos>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label5;

        $l6 = r0.<java.util.concurrent.Phaser$QNode: long deadline>;

        $l7 = staticinvoke <java.lang.System: long nanoTime()>();

        $l8 = $l6 - $l7;

        r0.<java.util.concurrent.Phaser$QNode: long nanos> = $l8;

     label5:
        $l4 = r0.<java.util.concurrent.Phaser$QNode: long nanos>;

        $b5 = $l4 cmp 0L;

        if $b5 > 0 goto label6;

        r0.<java.util.concurrent.Phaser$QNode: java.lang.Thread thread> = null;

        return 1;

     label6:
        return 0;
    }

    public boolean block()
    {
        java.util.concurrent.Phaser$QNode r0;
        boolean $z0, $z1, $z2;
        long $l0, $l2;
        byte $b1;

        r0 := @this: java.util.concurrent.Phaser$QNode;

        $z0 = virtualinvoke r0.<java.util.concurrent.Phaser$QNode: boolean isReleasable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0.<java.util.concurrent.Phaser$QNode: boolean timed>;

        if $z1 != 0 goto label2;

        staticinvoke <java.util.concurrent.locks.LockSupport: void park(java.lang.Object)>(r0);

        goto label3;

     label2:
        $l0 = r0.<java.util.concurrent.Phaser$QNode: long nanos>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

        $l2 = r0.<java.util.concurrent.Phaser$QNode: long nanos>;

        staticinvoke <java.util.concurrent.locks.LockSupport: void parkNanos(java.lang.Object,long)>(r0, $l2);

     label3:
        $z2 = virtualinvoke r0.<java.util.concurrent.Phaser$QNode: boolean isReleasable()>();

        return $z2;
    }
}
