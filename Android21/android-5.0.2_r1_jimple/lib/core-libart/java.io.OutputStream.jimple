public abstract class java.io.OutputStream extends java.lang.Object implements java.io.Closeable, java.io.Flushable
{

    public void <init>()
    {
        java.io.OutputStream r0;

        r0 := @this: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream r0;

        r0 := @this: java.io.OutputStream;

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream r0;

        r0 := @this: java.io.OutputStream;

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: java.io.OutputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] r1;
        int i0, i1, i2, $i3, $i4;
        byte $b5;

        r0 := @this: java.io.OutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        i2 = i0;

     label1:
        $i4 = i0 + i1;

        if i2 >= $i4 goto label2;

        $b5 = r1[i2];

        virtualinvoke r0.<java.io.OutputStream: void write(int)>($b5);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public abstract void write(int) throws java.io.IOException;

    boolean checkError()
    {
        java.io.OutputStream r0;

        r0 := @this: java.io.OutputStream;

        return 0;
    }
}
