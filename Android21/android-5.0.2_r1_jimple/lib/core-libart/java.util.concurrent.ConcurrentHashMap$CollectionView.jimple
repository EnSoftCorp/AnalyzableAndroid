abstract class java.util.concurrent.ConcurrentHashMap$CollectionView extends java.lang.Object implements java.util.Collection, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.util.concurrent.ConcurrentHashMap map;
    private static final java.lang.String oomeMsg;

    void <init>(java.util.concurrent.ConcurrentHashMap)
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.concurrent.ConcurrentHashMap r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        r1 := @parameter0: java.util.concurrent.ConcurrentHashMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map> = r1;

        return;
    }

    public java.util.concurrent.ConcurrentHashMap getMap()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        return $r1;
    }

    public final void clear()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.concurrent.ConcurrentHashMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void clear()>();

        return;
    }

    public final int size()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: int size()>();

        return $i0;
    }

    public final boolean isEmpty()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>();

        return $z0;
    }

    public abstract java.util.Iterator iterator();

    public abstract boolean contains(java.lang.Object);

    public abstract boolean remove(java.lang.Object);

    public final java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        long l0;
        int i1, i2, $i4, $i5, $i6;
        java.lang.Object[] r1, $r5;
        java.util.Iterator r2;
        java.lang.Object r3;
        java.util.concurrent.ConcurrentHashMap $r4;
        byte $b3;
        boolean $z0;
        java.lang.OutOfMemoryError $r6, $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r4 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        l0 = virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: long mappingCount()>();

        $b3 = l0 cmp 2147483639L;

        if $b3 <= 0 goto label1;

        $r7 = new java.lang.OutOfMemoryError;

        specialinvoke $r7.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r7;

     label1:
        i1 = (int) l0;

        r1 = newarray (java.lang.Object)[i1];

        i2 = 0;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if i2 != i1 goto label6;

        if i1 < 2147483639 goto label3;

        $r6 = new java.lang.OutOfMemoryError;

        specialinvoke $r6.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r6;

     label3:
        if i1 < 1073741819 goto label4;

        i1 = 2147483639;

        goto label5;

     label4:
        $i6 = i1 >>> 1;

        $i5 = $i6 + 1;

        i1 = i1 + $i5;

     label5:
        r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i1);

     label6:
        $i4 = i2;

        i2 = i2 + 1;

        r1[$i4] = r3;

        goto label2;

     label7:
        if i2 != i1 goto label8;

        $r5 = r1;

        goto label9;

     label8:
        $r5 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r1, i2);

     label9:
        return $r5;
    }

    public final java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.lang.Object[] r1, r2, $r8, $r10, $r11;
        long l0;
        int i1, i2, i3, $i5, $i6, $i7, $i8;
        java.util.Iterator r3;
        java.lang.Object r4, $r9;
        java.util.concurrent.ConcurrentHashMap $r5;
        byte $b4;
        java.lang.Class $r6, $r7;
        boolean $z0;
        java.lang.OutOfMemoryError $r12, $r13;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        r1 := @parameter0: java.lang.Object[];

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.concurrent.ConcurrentHashMap map>;

        l0 = virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: long mappingCount()>();

        $b4 = l0 cmp 2147483639L;

        if $b4 <= 0 goto label01;

        $r13 = new java.lang.OutOfMemoryError;

        specialinvoke $r13.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r13;

     label01:
        i1 = (int) l0;

        $i5 = lengthof r1;

        if $i5 < i1 goto label02;

        $r11 = r1;

        goto label03;

     label02:
        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Class getComponentType()>();

        $r9 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r7, i1);

        $r8 = (java.lang.Object[]) $r9;

        $r11 = (java.lang.Object[]) $r8;

     label03:
        r2 = $r11;

        i2 = lengthof r2;

        i3 = 0;

        r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if i3 != i2 goto label08;

        if i2 < 2147483639 goto label05;

        $r12 = new java.lang.OutOfMemoryError;

        specialinvoke $r12.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array size too large");

        throw $r12;

     label05:
        if i2 < 1073741819 goto label06;

        i2 = 2147483639;

        goto label07;

     label06:
        $i6 = i2 >>> 1;

        $i8 = $i6 + 1;

        i2 = i2 + $i8;

     label07:
        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i2);

     label08:
        $i7 = i3;

        i3 = i3 + 1;

        r2[$i7] = r4;

        goto label04;

     label09:
        if r1 != r2 goto label10;

        if i3 >= i2 goto label10;

        r2[i3] = null;

        return r2;

     label10:
        if i3 != i2 goto label11;

        $r10 = r2;

        goto label12;

     label11:
        $r10 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r2, i3);

     label12:
        return $r10;
    }

    public final java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.lang.StringBuilder r1, $r4, $r6, $r9;
        java.util.Iterator r2;
        java.lang.Object r3, $r11;
        boolean $z0, $z1;
        java.lang.String $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r1 = $r4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label1:
        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if r3 != r0 goto label2;

        $r11 = "(this Collection)";

        goto label3;

     label2:
        $r11 = r3;

     label3:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        goto label5;

     label4:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label1;

     label5:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.Collection r1;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        r1 := @parameter0: java.util.Collection;

        if r1 == r0 goto label4;

        r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        if r3 == null goto label2;

        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: boolean contains(java.lang.Object)>(r3);

        if $z1 != 0 goto label3;

     label2:
        return 0;

     label3:
        goto label1;

     label4:
        return 1;
    }

    public final boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z2 == 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public final boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.ConcurrentHashMap$CollectionView r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        java.util.Iterator r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$CollectionView;

        r1 := @parameter0: java.util.Collection;

        z0 = 0;

        r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentHashMap$CollectionView: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r3);

        if $z2 != 0 goto label1;

        interfaceinvoke r2.<java.util.Iterator: void remove()>();

        z0 = 1;

        goto label1;

     label2:
        return z0;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.ConcurrentHashMap$CollectionView: java.lang.String oomeMsg> = "Required array size too large";

        <java.util.concurrent.ConcurrentHashMap$CollectionView: long serialVersionUID> = 7249069246763182397L;

        return;
    }
}
