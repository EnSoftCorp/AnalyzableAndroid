class java.util.concurrent.ConcurrentHashMap$Node extends java.lang.Object implements java.util.Map$Entry
{
    final int hash;
    final java.lang.Object key;
    volatile java.lang.Object val;
    java.util.concurrent.ConcurrentHashMap$Node next;

    void <init>(int, java.lang.Object, java.lang.Object, java.util.concurrent.ConcurrentHashMap$Node)
    {
        java.util.concurrent.ConcurrentHashMap$Node r0, r3;
        int i0;
        java.lang.Object r1, r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.util.concurrent.ConcurrentHashMap$Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentHashMap$Node: int hash> = i0;

        r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key> = r1;

        r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val> = r2;

        r0.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next> = r3;

        return;
    }

    public final java.lang.Object getKey()
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        return $r1;
    }

    public final java.lang.Object getValue()
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.Object $r1;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        return $r1;
    }

    public final int hashCode()
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        $r1 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public final java.lang.String toString()
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.Object $r2, $r5;
        java.lang.String $r7;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public final java.lang.Object setValue(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.Object r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public final boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Node r0;
        java.lang.Object r1, r2, r3, r4, $r7, $r8, $r9, $r10, $r11;
        java.util.Map$Entry r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        $r6 = (java.util.Map$Entry) r1;

        r5 = $r6;

        $r7 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        r2 = $r7;

        if $r7 == null goto label3;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = $r8;

        if $r8 == null goto label3;

        $r9 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        if r2 == $r9 goto label1;

        $r11 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label3;

     label1:
        $r10 = r0.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object val>;

        r4 = $r10;

        if r3 == $r10 goto label2;

        $z2 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z2 == 0 goto label3;

     label2:
        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    java.util.concurrent.ConcurrentHashMap$Node find(int, java.lang.Object)
    {
        java.util.concurrent.ConcurrentHashMap$Node r0, r2, $r4;
        int i0, $i1;
        java.lang.Object r1, r3, $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentHashMap$Node;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = r0;

        if r1 == null goto label4;

     label1:
        $i1 = r2.<java.util.concurrent.ConcurrentHashMap$Node: int hash>;

        if $i1 != i0 goto label3;

        $r5 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.lang.Object key>;

        r3 = $r5;

        if $r5 == r1 goto label2;

        if r3 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 == 0 goto label3;

     label2:
        return r2;

     label3:
        $r4 = r2.<java.util.concurrent.ConcurrentHashMap$Node: java.util.concurrent.ConcurrentHashMap$Node next>;

        r2 = $r4;

        if $r4 != null goto label1;

     label4:
        return null;
    }
}
