class libcore.util.ZoneInfo$OffsetInterval extends java.lang.Object
{
    private final int startWallTimeSeconds;
    private final int endWallTimeSeconds;
    private final int isDst;
    private final int totalOffsetSeconds;

    public static libcore.util.ZoneInfo$OffsetInterval create(libcore.util.ZoneInfo, int) throws libcore.util.ZoneInfo$CheckedArithmeticException
    {
        libcore.util.ZoneInfo r0;
        int i0, i1, i2, i3, i4, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        byte b5, b16;
        int[] $r1, $r3, $r4, $r5, $r7, $r9;
        byte[] $r2, $r6;
        libcore.util.ZoneInfo$OffsetInterval $r8, $r10;

        r0 := @parameter0: libcore.util.ZoneInfo;

        i0 := @parameter1: int;

        if i0 < -1 goto label1;

        $r1 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        $i7 = lengthof $r1;

        if i0 < $i7 goto label2;

     label1:
        return null;

     label2:
        $i8 = staticinvoke <libcore.util.ZoneInfo: int access$000(libcore.util.ZoneInfo)>(r0);

        i1 = $i8 / 1000;

        if i0 != -1 goto label3;

        $r9 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        $i15 = $r9[0];

        i2 = staticinvoke <libcore.util.ZoneInfo: int access$500(int,int)>($i15, i1);

        $r10 = new libcore.util.ZoneInfo$OffsetInterval;

        specialinvoke $r10.<libcore.util.ZoneInfo$OffsetInterval: void <init>(int,int,int,int)>(-2147483648, i2, 0, i1);

        return $r10;

     label3:
        $r2 = staticinvoke <libcore.util.ZoneInfo: byte[] access$200(libcore.util.ZoneInfo)>(r0);

        b16 = $r2[i0];

        $r3 = staticinvoke <libcore.util.ZoneInfo: int[] access$300(libcore.util.ZoneInfo)>(r0);

        $i9 = $r3[b16];

        i3 = $i9 + i1;

        $r4 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        $i10 = lengthof $r4;

        $i11 = $i10 - 1;

        if i0 != $i11 goto label4;

        i4 = 2147483647;

        goto label5;

     label4:
        $r5 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        $i13 = i0 + 1;

        $i12 = $r5[$i13];

        i4 = staticinvoke <libcore.util.ZoneInfo: int access$500(int,int)>($i12, i3);

     label5:
        $r6 = staticinvoke <libcore.util.ZoneInfo: byte[] access$400(libcore.util.ZoneInfo)>(r0);

        b5 = $r6[b16];

        $r7 = staticinvoke <libcore.util.ZoneInfo: int[] access$100(libcore.util.ZoneInfo)>(r0);

        $i14 = $r7[i0];

        i6 = staticinvoke <libcore.util.ZoneInfo: int access$500(int,int)>($i14, i3);

        $r8 = new libcore.util.ZoneInfo$OffsetInterval;

        specialinvoke $r8.<libcore.util.ZoneInfo$OffsetInterval: void <init>(int,int,int,int)>(i6, i4, b5, i3);

        return $r8;
    }

    private void <init>(int, int, int, int)
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        int i0, i1, i2, i3;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<libcore.util.ZoneInfo$OffsetInterval: int startWallTimeSeconds> = i0;

        r0.<libcore.util.ZoneInfo$OffsetInterval: int endWallTimeSeconds> = i1;

        r0.<libcore.util.ZoneInfo$OffsetInterval: int isDst> = i2;

        r0.<libcore.util.ZoneInfo$OffsetInterval: int totalOffsetSeconds> = i3;

        return;
    }

    public boolean containsWallTime(long)
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        long l0, $l2, $l5;
        int $i1, $i4;
        byte $b3, $b6;
        boolean $z0;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        l0 := @parameter0: long;

        $i1 = r0.<libcore.util.ZoneInfo$OffsetInterval: int startWallTimeSeconds>;

        $l2 = (long) $i1;

        $b3 = l0 cmp $l2;

        if $b3 < 0 goto label1;

        $i4 = r0.<libcore.util.ZoneInfo$OffsetInterval: int endWallTimeSeconds>;

        $l5 = (long) $i4;

        $b6 = l0 cmp $l5;

        if $b6 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getIsDst()
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        $i0 = r0.<libcore.util.ZoneInfo$OffsetInterval: int isDst>;

        return $i0;
    }

    public int getTotalOffsetSeconds()
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        int $i0;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        $i0 = r0.<libcore.util.ZoneInfo$OffsetInterval: int totalOffsetSeconds>;

        return $i0;
    }

    public long getEndWallTimeSeconds()
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        int $i0;
        long $l1;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        $i0 = r0.<libcore.util.ZoneInfo$OffsetInterval: int endWallTimeSeconds>;

        $l1 = (long) $i0;

        return $l1;
    }

    public long getStartWallTimeSeconds()
    {
        libcore.util.ZoneInfo$OffsetInterval r0;
        int $i0;
        long $l1;

        r0 := @this: libcore.util.ZoneInfo$OffsetInterval;

        $i0 = r0.<libcore.util.ZoneInfo$OffsetInterval: int startWallTimeSeconds>;

        $l1 = (long) $i0;

        return $l1;
    }
}
