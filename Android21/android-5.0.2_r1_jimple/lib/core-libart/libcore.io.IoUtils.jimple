public final class libcore.io.IoUtils extends java.lang.Object
{
    private static final java.util.Random TEMPORARY_DIRECTORY_PRNG;

    private void <init>()
    {
        libcore.io.IoUtils r0;

        r0 := @this: libcore.io.IoUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void close(java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        android.system.ErrnoException r1, $r3;
        boolean $z0;
        libcore.io.Os $r2;
        java.io.IOException $r4;

        r0 := @parameter0: java.io.FileDescriptor;

     label1:
        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label2;

        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        interfaceinvoke $r2.<libcore.io.Os: void close(java.io.FileDescriptor)>(r0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = virtualinvoke r1.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r4;

     label4:
        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.lang.AutoCloseable)
    {
        java.lang.AutoCloseable r0;
        java.lang.RuntimeException r1, $r2;
        java.lang.Exception $r3;

        r0 := @parameter0: java.lang.AutoCloseable;

        if r0 == null goto label5;

     label1:
        interfaceinvoke r0.<java.lang.AutoCloseable: void close()>();

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        throw r1;

     label4:
        $r3 := @caughtexception;

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    public static void closeQuietly(java.io.FileDescriptor)
    {
        java.io.FileDescriptor r0;
        java.io.IOException $r2;

        r0 := @parameter0: java.io.FileDescriptor;

     label1:
        staticinvoke <libcore.io.IoUtils: void close(java.io.FileDescriptor)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void closeQuietly(java.net.Socket)
    {
        java.net.Socket r0;
        java.lang.Exception $r2;

        r0 := @parameter0: java.net.Socket;

        if r0 == null goto label4;

     label1:
        virtualinvoke r0.<java.net.Socket: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void setBlocking(java.io.FileDescriptor, boolean) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i5, $i7, i8;
        libcore.io.Os $r1, $r2;
        long $l4;
        android.system.ErrnoException $r3, r5;
        java.io.IOException $r4;

        r0 := @parameter0: java.io.FileDescriptor;

        z0 := @parameter1: boolean;

     label1:
        $r1 = <libcore.io.Libcore: libcore.io.Os os>;

        $i1 = <android.system.OsConstants: int F_GETFL>;

        i0 = interfaceinvoke $r1.<libcore.io.Os: int fcntlVoid(java.io.FileDescriptor,int)>(r0, $i1);

        if z0 != 0 goto label2;

        $i7 = <android.system.OsConstants: int O_NONBLOCK>;

        i8 = i0 | $i7;

        goto label3;

     label2:
        $i2 = <android.system.OsConstants: int O_NONBLOCK>;

        $i3 = $i2 ^ -1;

        i8 = i0 & $i3;

     label3:
        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $i5 = <android.system.OsConstants: int F_SETFL>;

        $l4 = (long) i8;

        interfaceinvoke $r2.<libcore.io.Os: int fcntlLong(java.io.FileDescriptor,int,long)>(r0, $i5, $l4);

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;

        r5 = $r3;

        $r4 = virtualinvoke r5.<android.system.ErrnoException: java.io.IOException rethrowAsIOException()>();

        throw $r4;

     label6:
        return;

        catch android.system.ErrnoException from label1 to label4 with label5;
    }

    public static byte[] readFileAsByteArray(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        libcore.io.IoUtils$FileReader $r1, $r2;
        byte[] $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = new libcore.io.IoUtils$FileReader;

        specialinvoke $r1.<libcore.io.IoUtils$FileReader: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<libcore.io.IoUtils$FileReader: libcore.io.IoUtils$FileReader readFully()>();

        $r3 = virtualinvoke $r2.<libcore.io.IoUtils$FileReader: byte[] toByteArray()>();

        return $r3;
    }

    public static java.lang.String readFileAsString(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r4;
        libcore.io.IoUtils$FileReader $r1, $r2;
        java.nio.charset.Charset $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = new libcore.io.IoUtils$FileReader;

        specialinvoke $r1.<libcore.io.IoUtils$FileReader: void <init>(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<libcore.io.IoUtils$FileReader: libcore.io.IoUtils$FileReader readFully()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r2.<libcore.io.IoUtils$FileReader: java.lang.String toString(java.nio.charset.Charset)>($r3);

        return $r4;
    }

    public static void deleteContents(java.io.File) throws java.io.IOException
    {
        java.io.File r0, r3;
        java.io.File[] r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 == null goto label3;

        r2 = r1;

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        staticinvoke <libcore.io.IoUtils: void deleteContents(java.io.File)>(r3);

     label2:
        virtualinvoke r3.<java.io.File: boolean delete()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static java.io.File createTemporaryDirectory(java.lang.String)
    {
        java.lang.String r0, r1, $r8;
        java.io.File r2, $r7;
        java.lang.StringBuilder $r3, $r4, $r6;
        java.util.Random $r5;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = <libcore.io.IoUtils: java.util.Random TEMPORARY_DIRECTORY_PRNG>;

        $i0 = virtualinvoke $r5.<java.util.Random: int nextInt()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.io.File;

        $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir");

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r8, r1);

        r2 = $r7;

        $z0 = virtualinvoke r2.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label2;

        return r2;

     label2:
        goto label1;
    }

    public static boolean canOpenReadOnly(java.lang.String)
    {
        java.lang.String r0;
        java.io.FileDescriptor r1;
        int $i0;
        libcore.io.Os $r2, $r3;
        android.system.ErrnoException $r4;

        r0 := @parameter0: java.lang.String;

     label1:
        $r2 = <libcore.io.Libcore: libcore.io.Os os>;

        $i0 = <android.system.OsConstants: int O_RDONLY>;

        r1 = interfaceinvoke $r2.<libcore.io.Os: java.io.FileDescriptor open(java.lang.String,int,int)>(r0, $i0, 0);

        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        interfaceinvoke $r3.<libcore.io.Os: void close(java.io.FileDescriptor)>(r1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static void throwInterruptedIoException() throws java.io.InterruptedIOException
    {
        java.lang.Thread $r0;
        java.io.InterruptedIOException $r1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r0.<java.lang.Thread: void interrupt()>();

        $r1 = new java.io.InterruptedIOException;

        specialinvoke $r1.<java.io.InterruptedIOException: void <init>()>();

        throw $r1;
    }

    static void <clinit>()
    {
        java.util.Random $r0;

        $r0 = new java.util.Random;

        specialinvoke $r0.<java.util.Random: void <init>()>();

        <libcore.io.IoUtils: java.util.Random TEMPORARY_DIRECTORY_PRNG> = $r0;

        return;
    }
}
