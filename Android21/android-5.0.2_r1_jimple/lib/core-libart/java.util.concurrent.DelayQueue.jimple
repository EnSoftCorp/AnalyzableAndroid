public class java.util.concurrent.DelayQueue extends java.util.AbstractQueue implements java.util.concurrent.BlockingQueue
{
    private final transient java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.PriorityQueue q;
    private java.lang.Thread leader;
    private final java.util.concurrent.locks.Condition available;

    public void <init>()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r3;
        java.util.PriorityQueue $r2;
        java.util.concurrent.locks.Condition $r4;

        r0 := @this: java.util.concurrent.DelayQueue;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock> = $r1;

        $r2 = new java.util.PriorityQueue;

        specialinvoke $r2.<java.util.PriorityQueue: void <init>()>();

        r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q> = $r2;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

        $r3 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available> = $r4;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r4;
        java.util.PriorityQueue $r3;
        java.util.concurrent.locks.Condition $r5;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.Collection;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = new java.util.PriorityQueue;

        specialinvoke $r3.<java.util.PriorityQueue: void <init>()>();

        r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q> = $r3;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        $r5 = virtualinvoke $r4.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available> = $r5;

        virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean addAll(java.util.Collection)>(r1);

        return;
    }

    public boolean add(java.util.concurrent.Delayed)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.concurrent.Delayed;

        $z0 = virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>(r1);

        return $z0;
    }

    public boolean offer(java.util.concurrent.Delayed)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0;
        java.lang.Throwable r3, $r8;
        java.util.PriorityQueue $r4, $r5;
        java.lang.Object $r6;
        java.util.concurrent.locks.Condition $r7;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.concurrent.Delayed;

        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        virtualinvoke $r4.<java.util.PriorityQueue: boolean offer(java.lang.Object)>(r1);

        $r5 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r6 = virtualinvoke $r5.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r6 != r1 goto label2;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

        $r7 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Condition: void signal()>();

     label2:
        z0 = 1;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label4:
        $r8 := @caughtexception;

        r3 = $r8;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void put(java.util.concurrent.Delayed)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed r1;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.concurrent.Delayed;

        virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>(r1);

        return;
    }

    public boolean offer(java.util.concurrent.Delayed, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.concurrent.Delayed;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $z0 = virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>(r1);

        return $z0;
    }

    public java.util.concurrent.Delayed poll()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.Delayed r2, r10;
        java.lang.Throwable r3, $r9;
        java.util.PriorityQueue $r4, $r7;
        java.lang.Object $r5, $r8;
        java.util.concurrent.TimeUnit $r6;
        long $l0;
        byte $b1;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r5 = virtualinvoke $r4.<java.util.PriorityQueue: java.lang.Object peek()>();

        r2 = (java.util.concurrent.Delayed) $r5;

        if r2 == null goto label2;

        $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = interfaceinvoke r2.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r6);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label3;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label3:
        $r7 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r8 = virtualinvoke $r7.<java.util.PriorityQueue: java.lang.Object poll()>();

        r10 = (java.util.concurrent.Delayed) $r8;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r10;

     label5:
        $r9 := @caughtexception;

        r3 = $r9;

     label6:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.util.concurrent.Delayed take() throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.Delayed r2, r3;
        long l0;
        java.lang.Throwable r4, r5, $r21, $r24;
        java.util.PriorityQueue $r6, $r12, $r17, $r23;
        java.lang.Object $r7, $r15, $r16, $r22;
        java.util.concurrent.TimeUnit $r8;
        byte $b1;
        java.lang.Thread $r9, $r11, $r14, $r20, $r26, r27;
        java.util.concurrent.locks.Condition $r10, $r13, $r18, $r19, $r25;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label01:
        $r6 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r7 = virtualinvoke $r6.<java.util.PriorityQueue: java.lang.Object peek()>();

        r2 = (java.util.concurrent.Delayed) $r7;

        if r2 != null goto label02;

        $r18 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r18.<java.util.concurrent.locks.Condition: void await()>();

        goto label12;

     label02:
        $r8 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l0 = interfaceinvoke r2.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r8);

        $b1 = l0 cmp 0L;

        if $b1 > 0 goto label05;

        $r12 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r15 = virtualinvoke $r12.<java.util.PriorityQueue: java.lang.Object poll()>();

        r3 = (java.util.concurrent.Delayed) $r15;

     label03:
        $r14 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r14 != null goto label04;

        $r17 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r16 = virtualinvoke $r17.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r16 == null goto label04;

        $r19 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r19.<java.util.concurrent.locks.Condition: void signal()>();

     label04:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label05:
        $r9 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r9 == null goto label06;

        $r13 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r13.<java.util.concurrent.locks.Condition: void await()>();

        goto label12;

     label06:
        r27 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = r27;

     label07:
        $r10 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r10.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l0);

     label08:
        $r11 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r11 != r27 goto label12;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

        goto label12;

     label09:
        $r24 := @caughtexception;

        r4 = $r24;

     label10:
        $r26 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r26 != r27 goto label11;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

     label11:
        throw r4;

     label12:
        goto label01;

     label13:
        $r21 := @caughtexception;

        r5 = $r21;

     label14:
        $r20 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r20 != null goto label15;

        $r23 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r22 = virtualinvoke $r23.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r22 == null goto label15;

        $r25 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r25.<java.util.concurrent.locks.Condition: void signal()>();

     label15:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label01 to label03 with label13;
        catch java.lang.Throwable from label05 to label14 with label13;
    }

    public java.util.concurrent.Delayed poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        long l0, l1, l2, $l6, l8;
        java.util.concurrent.TimeUnit r1, $r9;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.Delayed r3, r4;
        java.lang.Throwable r5, r6, $r32, $r34;
        java.lang.Object $r7, $r18, $r20, $r21, $r25, $r29;
        java.util.PriorityQueue $r8, $r16, $r17, $r19, $r28, $r30;
        byte $b3, $b4, $b5, $b7;
        java.util.concurrent.locks.Condition $r10, $r12, $r15, $r23, $r24, $r26, $r35;
        java.lang.Thread $r11, $r13, $r14, $r22, $r27, $r31, $r33, r36;

        r0 := @this: java.util.concurrent.DelayQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lockInterruptibly()>();

     label01:
        $r8 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r7 = virtualinvoke $r8.<java.util.PriorityQueue: java.lang.Object peek()>();

        r3 = (java.util.concurrent.Delayed) $r7;

        if r3 != null goto label05;

        $b7 = l1 cmp 0L;

        if $b7 > 0 goto label04;

     label02:
        $r27 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r27 != null goto label03;

        $r28 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r25 = virtualinvoke $r28.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r25 == null goto label03;

        $r26 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r26.<java.util.concurrent.locks.Condition: void signal()>();

     label03:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label04:
        $r23 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        l1 = interfaceinvoke $r23.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label19;

     label05:
        $r9 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        l8 = interfaceinvoke r3.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r9);

        $b4 = l8 cmp 0L;

        if $b4 > 0 goto label08;

        $r16 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r21 = virtualinvoke $r16.<java.util.PriorityQueue: java.lang.Object poll()>();

        r4 = (java.util.concurrent.Delayed) $r21;

     label06:
        $r22 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r22 != null goto label07;

        $r19 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r20 = virtualinvoke $r19.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r20 == null goto label07;

        $r24 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r24.<java.util.concurrent.locks.Condition: void signal()>();

     label07:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r4;

     label08:
        $b3 = l1 cmp 0L;

        if $b3 > 0 goto label11;

     label09:
        $r13 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r13 != null goto label10;

        $r17 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r18 = virtualinvoke $r17.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r18 == null goto label10;

        $r15 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r15.<java.util.concurrent.locks.Condition: void signal()>();

     label10:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label11:
        $b5 = l1 cmp l8;

        if $b5 < 0 goto label12;

        $r11 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r11 == null goto label13;

     label12:
        $r10 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        l1 = interfaceinvoke $r10.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l1);

        goto label19;

     label13:
        r36 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = r36;

     label14:
        $r12 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        l2 = interfaceinvoke $r12.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l8);

        $l6 = l8 - l2;

        l1 = l1 - $l6;

     label15:
        $r14 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r14 != r36 goto label19;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

        goto label19;

     label16:
        $r34 := @caughtexception;

        r5 = $r34;

     label17:
        $r33 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r33 != r36 goto label18;

        r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader> = null;

     label18:
        throw r5;

     label19:
        goto label01;

     label20:
        $r32 := @caughtexception;

        r6 = $r32;

     label21:
        $r31 = r0.<java.util.concurrent.DelayQueue: java.lang.Thread leader>;

        if $r31 != null goto label22;

        $r30 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r29 = virtualinvoke $r30.<java.util.PriorityQueue: java.lang.Object peek()>();

        if $r29 == null goto label22;

        $r35 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.Condition available>;

        interfaceinvoke $r35.<java.util.concurrent.locks.Condition: void signal()>();

     label22:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r6;

        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
        catch java.lang.Throwable from label01 to label02 with label20;
        catch java.lang.Throwable from label04 to label06 with label20;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label11 to label21 with label20;
    }

    public java.util.concurrent.Delayed peek()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.Delayed r2;
        java.lang.Throwable r3, $r6;
        java.util.PriorityQueue $r4;
        java.lang.Object $r5;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r5 = virtualinvoke $r4.<java.util.PriorityQueue: java.lang.Object peek()>();

        r2 = (java.util.concurrent.Delayed) $r5;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int size()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0;
        java.lang.Throwable r2, $r4;
        java.util.PriorityQueue $r3;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        i0 = virtualinvoke $r3.<java.util.PriorityQueue: int size()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.util.concurrent.Delayed peekExpired()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed r1, $r5;
        java.util.PriorityQueue $r2;
        java.lang.Object $r3;
        java.util.concurrent.TimeUnit $r4;
        long $l0;
        byte $b1;

        r0 := @this: java.util.concurrent.DelayQueue;

        $r2 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        $r3 = virtualinvoke $r2.<java.util.PriorityQueue: java.lang.Object peek()>();

        r1 = (java.util.concurrent.Delayed) $r3;

        if r1 == null goto label1;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        $l0 = interfaceinvoke r1.<java.util.concurrent.Delayed: long getDelay(java.util.concurrent.TimeUnit)>($r4);

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label2;

     label1:
        $r5 = null;

        goto label3;

     label2:
        $r5 = r1;

     label3:
        return $r5;
    }

    public int drainTo(java.util.Collection)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.Collection r1;
        java.util.concurrent.locks.ReentrantLock r2;
        int i0, i1;
        java.util.concurrent.Delayed r3, $r5;
        java.lang.Throwable r4, $r10;
        java.util.PriorityQueue $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.Collection;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        if r1 != r0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label3:
        i0 = 0;

     label4:
        $r5 = specialinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed peekExpired()>();

        r3 = $r5;

        if $r5 == null goto label5;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        $r6 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        virtualinvoke $r6.<java.util.PriorityQueue: java.lang.Object poll()>();

        i0 = i0 + 1;

        goto label4;

     label5:
        i1 = i0;

     label6:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i1;

     label7:
        $r10 := @caughtexception;

        r4 = $r10;

     label8:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public int drainTo(java.util.Collection, int)
    {
        java.util.concurrent.DelayQueue r0;
        java.util.Collection r1;
        int i0, i1, i2;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.concurrent.Delayed r3, $r5;
        java.lang.Throwable r4, $r10;
        java.util.PriorityQueue $r6;
        java.lang.IllegalArgumentException $r8;
        java.lang.NullPointerException $r9;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        if r1 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>()>();

        throw $r9;

     label1:
        if r1 != r0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label2:
        if i0 > 0 goto label3;

        return 0;

     label3:
        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label4:
        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r5 = specialinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed peekExpired()>();

        r3 = $r5;

        if $r5 == null goto label6;

        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r3);

        $r6 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        virtualinvoke $r6.<java.util.PriorityQueue: java.lang.Object poll()>();

        i1 = i1 + 1;

        goto label5;

     label6:
        i2 = i1;

     label7:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i2;

     label8:
        $r10 := @caughtexception;

        r4 = $r10;

     label9:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label4 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    public void clear()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r4;
        java.util.PriorityQueue $r3;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        virtualinvoke $r3.<java.util.PriorityQueue: void clear()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int remainingCapacity()
    {
        java.util.concurrent.DelayQueue r0;

        r0 := @this: java.util.concurrent.DelayQueue;

        return 2147483647;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Object[] r2;
        java.lang.Throwable r3, $r5;
        java.util.PriorityQueue $r4;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        r2 = virtualinvoke $r4.<java.util.PriorityQueue: java.lang.Object[] toArray()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object[] r1, r3;
        java.util.concurrent.locks.ReentrantLock r2;
        java.lang.Throwable r4, $r6;
        java.util.PriorityQueue $r5;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r5 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        r3 = virtualinvoke $r5.<java.util.PriorityQueue: java.lang.Object[] toArray(java.lang.Object[])>(r1);

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r3;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1;
        java.util.concurrent.locks.ReentrantLock r2;
        boolean z0;
        java.lang.Throwable r3, $r5;
        java.util.PriorityQueue $r4;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r4 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        z0 = virtualinvoke $r4.<java.util.PriorityQueue: boolean remove(java.lang.Object)>(r1);

     label2:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void removeEQ(java.lang.Object)
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1, $r6;
        java.util.concurrent.locks.ReentrantLock r2;
        java.util.Iterator r3;
        java.lang.Throwable r4, $r7;
        java.util.PriorityQueue $r5;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.DelayQueue: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r5 = r0.<java.util.concurrent.DelayQueue: java.util.PriorityQueue q>;

        r3 = virtualinvoke $r5.<java.util.PriorityQueue: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        if r1 != $r6 goto label2;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label3;

     label3:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label6;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

     label5:
        virtualinvoke r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r4;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.DelayQueue$Itr $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.DelayQueue;

        $r1 = new java.util.concurrent.DelayQueue$Itr;

        $r2 = virtualinvoke r0.<java.util.concurrent.DelayQueue: java.lang.Object[] toArray()>();

        specialinvoke $r1.<java.util.concurrent.DelayQueue$Itr: void <init>(java.util.concurrent.DelayQueue,java.lang.Object[])>(r0, $r2);

        return $r1;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean add(java.util.concurrent.Delayed)>($r2);

        return $z0;
    }

    public volatile java.lang.Object peek()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed $r1;

        r0 := @this: java.util.concurrent.DelayQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed peek()>();

        return $r1;
    }

    public volatile java.lang.Object poll()
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed $r1;

        r0 := @this: java.util.concurrent.DelayQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll()>();

        return $r1;
    }

    public volatile boolean offer(java.lang.Object)
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed)>($r2);

        return $z0;
    }

    public volatile java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        long l0;
        java.util.concurrent.TimeUnit r1;
        java.util.concurrent.Delayed $r2;

        r0 := @this: java.util.concurrent.DelayQueue;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed poll(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r2;
    }

    public volatile java.lang.Object take() throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        java.util.concurrent.Delayed $r1;

        r0 := @this: java.util.concurrent.DelayQueue;

        $r1 = virtualinvoke r0.<java.util.concurrent.DelayQueue: java.util.concurrent.Delayed take()>();

        return $r1;
    }

    public volatile boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1;
        long l0;
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.Delayed $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $r3 = (java.util.concurrent.Delayed) r1;

        $z0 = virtualinvoke r0.<java.util.concurrent.DelayQueue: boolean offer(java.util.concurrent.Delayed,long,java.util.concurrent.TimeUnit)>($r3, l0, r2);

        return $z0;
    }

    public volatile void put(java.lang.Object) throws java.lang.InterruptedException
    {
        java.util.concurrent.DelayQueue r0;
        java.lang.Object r1;
        java.util.concurrent.Delayed $r2;

        r0 := @this: java.util.concurrent.DelayQueue;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.util.concurrent.Delayed) r1;

        virtualinvoke r0.<java.util.concurrent.DelayQueue: void put(java.util.concurrent.Delayed)>($r2);

        return;
    }
}
