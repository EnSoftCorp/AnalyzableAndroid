class java.util.concurrent.ConcurrentSkipListMap$Index extends java.lang.Object
{
    final java.util.concurrent.ConcurrentSkipListMap$Node node;
    final java.util.concurrent.ConcurrentSkipListMap$Index down;
    volatile java.util.concurrent.ConcurrentSkipListMap$Index right;
    private static final sun.misc.Unsafe UNSAFE;
    private static final long rightOffset;

    void <init>(java.util.concurrent.ConcurrentSkipListMap$Node, java.util.concurrent.ConcurrentSkipListMap$Index, java.util.concurrent.ConcurrentSkipListMap$Index)
    {
        java.util.concurrent.ConcurrentSkipListMap$Index r0, r2, r3;
        java.util.concurrent.ConcurrentSkipListMap$Node r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Index;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Node;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Index;

        r3 := @parameter2: java.util.concurrent.ConcurrentSkipListMap$Index;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node> = r1;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index down> = r2;

        r0.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right> = r3;

        return;
    }

    final boolean casRight(java.util.concurrent.ConcurrentSkipListMap$Index, java.util.concurrent.ConcurrentSkipListMap$Index)
    {
        java.util.concurrent.ConcurrentSkipListMap$Index r0, r1, r2;
        long $l0;
        sun.misc.Unsafe $r3;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Index;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Index;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Index;

        $r3 = <java.util.concurrent.ConcurrentSkipListMap$Index: sun.misc.Unsafe UNSAFE>;

        $l0 = <java.util.concurrent.ConcurrentSkipListMap$Index: long rightOffset>;

        $z0 = virtualinvoke $r3.<sun.misc.Unsafe: boolean compareAndSwapObject(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r0, $l0, r1, r2);

        return $z0;
    }

    final boolean indexesDeletedNode()
    {
        java.util.concurrent.ConcurrentSkipListMap$Index r0;
        java.util.concurrent.ConcurrentSkipListMap$Node $r1;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Index;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        $r2 = $r1.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r2 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    final boolean link(java.util.concurrent.ConcurrentSkipListMap$Index, java.util.concurrent.ConcurrentSkipListMap$Index)
    {
        java.util.concurrent.ConcurrentSkipListMap$Index r0, r1, r2;
        java.util.concurrent.ConcurrentSkipListMap$Node r3;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Index;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Index;

        r2 := @parameter1: java.util.concurrent.ConcurrentSkipListMap$Index;

        r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Node node>;

        r2.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right> = r1;

        $r4 = r3.<java.util.concurrent.ConcurrentSkipListMap$Node: java.lang.Object value>;

        if $r4 == null goto label1;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean casRight(java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r1, r2);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    final boolean unlink(java.util.concurrent.ConcurrentSkipListMap$Index)
    {
        java.util.concurrent.ConcurrentSkipListMap$Index r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$Index;

        r1 := @parameter0: java.util.concurrent.ConcurrentSkipListMap$Index;

        $z0 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean indexesDeletedNode()>();

        if $z0 != 0 goto label1;

        $r2 = r1.<java.util.concurrent.ConcurrentSkipListMap$Index: java.util.concurrent.ConcurrentSkipListMap$Index right>;

        $z1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$Index: boolean casRight(java.util.concurrent.ConcurrentSkipListMap$Index,java.util.concurrent.ConcurrentSkipListMap$Index)>(r1, $r2);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        java.lang.Class r0;
        sun.misc.Unsafe $r1, $r2;
        java.lang.reflect.Field $r3;
        long $l0;
        java.lang.Exception $r4, r6;
        java.lang.Error $r5;

     label1:
        $r1 = staticinvoke <sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>();

        <java.util.concurrent.ConcurrentSkipListMap$Index: sun.misc.Unsafe UNSAFE> = $r1;

        r0 = class "java/util/concurrent/ConcurrentSkipListMap$Index";

        $r2 = <java.util.concurrent.ConcurrentSkipListMap$Index: sun.misc.Unsafe UNSAFE>;

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("right");

        $l0 = virtualinvoke $r2.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>($r3);

        <java.util.concurrent.ConcurrentSkipListMap$Index: long rightOffset> = $l0;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.Error;

        specialinvoke $r5.<java.lang.Error: void <init>(java.lang.Throwable)>(r6);

        throw $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
