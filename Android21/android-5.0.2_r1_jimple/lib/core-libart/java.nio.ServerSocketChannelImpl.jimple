final class java.nio.ServerSocketChannelImpl extends java.nio.channels.ServerSocketChannel implements java.nio.FileDescriptorChannel
{
    private final java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket;
    private final java.lang.Object acceptLock;

    public void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.lang.Object $r2;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r3;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.ServerSocketChannelImpl: java.lang.Object acceptLock> = $r2;

        $r3 = new java.nio.ServerSocketChannelImpl$ServerSocketAdapter;

        specialinvoke $r3.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void <init>(java.nio.ServerSocketChannelImpl)>(r0);

        r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket> = $r3;

        return;
    }

    public java.net.ServerSocket socket()
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r1;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        return $r1;
    }

    public java.nio.channels.SocketChannel accept() throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.SocketChannelImpl r1, $r7, $r12;
        java.lang.Object r2, $r9;
        java.net.SocketTimeoutException r3, $r15;
        java.lang.Throwable r4, r5, $r16, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r6, $r10;
        java.nio.channels.spi.SelectorProvider $r8;
        java.nio.channels.ClosedChannelException $r13;
        java.nio.channels.NotYetBoundException $r14;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r13 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r13.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r13;

     label01:
        $r6 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $z1 = virtualinvoke $r6.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: boolean isBound()>();

        if $z1 != 0 goto label02;

        $r14 = new java.nio.channels.NotYetBoundException;

        specialinvoke $r14.<java.nio.channels.NotYetBoundException: void <init>()>();

        throw $r14;

     label02:
        $r7 = new java.nio.SocketChannelImpl;

        $r8 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke $r7.<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,boolean)>($r8, 0);

        r1 = $r7;

     label03:
        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void begin()>();

        $r9 = r0.<java.nio.ServerSocketChannelImpl: java.lang.Object acceptLock>;

        r2 = $r9;

        entermonitor $r9;

     label04:
        $r10 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        virtualinvoke $r10.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket implAccept(java.nio.SocketChannelImpl)>(r1);

     label05:
        goto label07;

     label06:
        $r15 := @caughtexception;

        r3 = $r15;

        $z4 = specialinvoke r0.<java.nio.ServerSocketChannelImpl: boolean shouldThrowSocketTimeoutExceptionFromAccept(java.net.SocketTimeoutException)>(r3);

        if $z4 == 0 goto label07;

        throw r3;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r16 := @caughtexception;

        r4 = $r16;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        $z2 = virtualinvoke r1.<java.nio.SocketChannelImpl: boolean isConnected()>();

        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void end(boolean)>($z2);

        goto label14;

     label12:
        $r17 := @caughtexception;

        r5 = $r17;

     label13:
        $z5 = virtualinvoke r1.<java.nio.SocketChannelImpl: boolean isConnected()>();

        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void end(boolean)>($z5);

        throw r5;

     label14:
        $z3 = virtualinvoke r1.<java.nio.SocketChannelImpl: boolean isConnected()>();

        if $z3 == 0 goto label15;

        $r12 = r1;

        goto label16;

     label15:
        $r12 = null;

     label16:
        return $r12;

        catch java.net.SocketTimeoutException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.lang.Throwable from label03 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    private boolean shouldThrowSocketTimeoutExceptionFromAccept(java.net.SocketTimeoutException)
    {
        java.nio.ServerSocketChannelImpl r0;
        java.net.SocketTimeoutException r1;
        java.lang.Throwable r2;
        boolean $z0, $z1;
        android.system.ErrnoException $r3;
        int $i0, $i1;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        r1 := @parameter0: java.net.SocketTimeoutException;

        $z0 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: boolean isBlocking()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        r2 = virtualinvoke r1.<java.net.SocketTimeoutException: java.lang.Throwable getCause()>();

        $z1 = r2 instanceof android.system.ErrnoException;

        if $z1 == 0 goto label2;

        $r3 = (android.system.ErrnoException) r2;

        $i1 = $r3.<android.system.ErrnoException: int errno>;

        $i0 = <android.system.OsConstants: int EAGAIN>;

        if $i1 != $i0 goto label2;

        return 0;

     label2:
        return 1;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        boolean z0;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $r2 = staticinvoke <java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.io.FileDescriptor access$000(java.nio.ServerSocketChannelImpl$ServerSocketAdapter)>($r1);

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r2, z0);

        return;
    }

    protected synchronized void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r1, $r2;
        boolean $z0;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $z0 = virtualinvoke $r1.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: boolean isClosed()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        virtualinvoke $r2.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void close()>();

     label1:
        return;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $r2 = staticinvoke <java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.io.FileDescriptor access$000(java.nio.ServerSocketChannelImpl$ServerSocketAdapter)>($r1);

        return $r2;
    }
}
