public class javax.crypto.CipherOutputStream extends java.io.FilterOutputStream
{
    private final javax.crypto.Cipher cipher;

    public void <init>(java.io.OutputStream, javax.crypto.Cipher)
    {
        javax.crypto.CipherOutputStream r0;
        java.io.OutputStream r1;
        javax.crypto.Cipher r2;

        r0 := @this: javax.crypto.CipherOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: javax.crypto.Cipher;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<javax.crypto.CipherOutputStream: javax.crypto.Cipher cipher> = r2;

        return;
    }

    protected void <init>(java.io.OutputStream)
    {
        javax.crypto.CipherOutputStream r0;
        java.io.OutputStream r1;
        javax.crypto.NullCipher $r2;

        r0 := @this: javax.crypto.CipherOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new javax.crypto.NullCipher;

        specialinvoke $r2.<javax.crypto.NullCipher: void <init>()>();

        specialinvoke r0.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>(r1, $r2);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        javax.crypto.CipherOutputStream r0;
        int i0;

        r0 := @this: javax.crypto.CipherOutputStream;

        i0 := @parameter0: int;

        staticinvoke <libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)>(r0, i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        javax.crypto.CipherOutputStream r0;
        byte[] r1, r2;
        int i0, i1;
        javax.crypto.Cipher $r3;
        java.io.OutputStream $r4;

        r0 := @this: javax.crypto.CipherOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<javax.crypto.CipherOutputStream: javax.crypto.Cipher cipher>;

        r2 = virtualinvoke $r3.<javax.crypto.Cipher: byte[] update(byte[],int,int)>(r1, i0, i1);

        if r2 == null goto label2;

        $r4 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>(r2);

     label2:
        return;
    }

    public void flush() throws java.io.IOException
    {
        javax.crypto.CipherOutputStream r0;
        java.io.OutputStream $r1;

        r0 := @this: javax.crypto.CipherOutputStream;

        $r1 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        javax.crypto.CipherOutputStream r0;
        byte[] r1;
        javax.crypto.BadPaddingException r2, $r14;
        java.lang.Throwable r3, $r11;
        javax.crypto.Cipher $r4, $r9;
        java.io.OutputStream $r5, $r6, $r7, $r8, $r10, $r12, $r13;
        java.lang.String $r15, $r19;
        java.io.IOException $r16, $r17;
        javax.crypto.IllegalBlockSizeException $r18, r20;

        r0 := @this: javax.crypto.CipherOutputStream;

     label1:
        $r4 = r0.<javax.crypto.CipherOutputStream: javax.crypto.Cipher cipher>;

        if $r4 == null goto label2;

        $r9 = r0.<javax.crypto.CipherOutputStream: javax.crypto.Cipher cipher>;

        r1 = virtualinvoke $r9.<javax.crypto.Cipher: byte[] doFinal()>();

        if r1 == null goto label2;

        $r10 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r10.<java.io.OutputStream: void write(byte[])>(r1);

     label2:
        $r5 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        if $r5 == null goto label3;

        $r8 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r8.<java.io.OutputStream: void flush()>();

     label3:
        $r6 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        if $r6 == null goto label9;

        $r7 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r7.<java.io.OutputStream: void close()>();

        goto label9;

     label4:
        $r14 := @caughtexception;

        r2 = $r14;

        $r16 = new java.io.IOException;

        $r15 = virtualinvoke r2.<javax.crypto.BadPaddingException: java.lang.String getMessage()>();

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r16;

     label5:
        $r18 := @caughtexception;

        r20 = $r18;

        $r17 = new java.io.IOException;

        $r19 = virtualinvoke r20.<javax.crypto.IllegalBlockSizeException: java.lang.String getMessage()>();

        specialinvoke $r17.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r17;

     label6:
        $r11 := @caughtexception;

        r3 = $r11;

     label7:
        $r12 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        if $r12 == null goto label8;

        $r13 = r0.<javax.crypto.CipherOutputStream: java.io.OutputStream out>;

        virtualinvoke $r13.<java.io.OutputStream: void close()>();

     label8:
        throw r3;

     label9:
        return;

        catch javax.crypto.BadPaddingException from label1 to label3 with label4;
        catch javax.crypto.IllegalBlockSizeException from label1 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label7 with label6;
    }
}
