public abstract class java.text.BreakIterator extends java.lang.Object implements java.lang.Cloneable
{
    public static final int DONE;
    libcore.icu.NativeBreakIterator wrapped;

    protected void <init>()
    {
        java.text.BreakIterator r0;

        r0 := @this: java.text.BreakIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(libcore.icu.NativeBreakIterator)
    {
        java.text.BreakIterator r0;
        libcore.icu.NativeBreakIterator r1;

        r0 := @this: java.text.BreakIterator;

        r1 := @parameter0: libcore.icu.NativeBreakIterator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped> = r1;

        return;
    }

    public static java.util.Locale[] getAvailableLocales()
    {
        java.util.Locale[] $r0;

        $r0 = staticinvoke <libcore.icu.ICU: java.util.Locale[] getAvailableBreakIteratorLocales()>();

        return $r0;
    }

    public static java.text.BreakIterator getCharacterInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getCharacterInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.BreakIterator getCharacterInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.RuleBasedBreakIterator $r1;
        libcore.icu.NativeBreakIterator $r2;

        r0 := @parameter0: java.util.Locale;

        $r1 = new java.text.RuleBasedBreakIterator;

        $r2 = staticinvoke <libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getCharacterInstance(java.util.Locale)>(r0);

        specialinvoke $r1.<java.text.RuleBasedBreakIterator: void <init>(libcore.icu.NativeBreakIterator)>($r2);

        return $r1;
    }

    public static java.text.BreakIterator getLineInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.BreakIterator getLineInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.RuleBasedBreakIterator $r1;
        libcore.icu.NativeBreakIterator $r2;

        r0 := @parameter0: java.util.Locale;

        $r1 = new java.text.RuleBasedBreakIterator;

        $r2 = staticinvoke <libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getLineInstance(java.util.Locale)>(r0);

        specialinvoke $r1.<java.text.RuleBasedBreakIterator: void <init>(libcore.icu.NativeBreakIterator)>($r2);

        return $r1;
    }

    public static java.text.BreakIterator getSentenceInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getSentenceInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.BreakIterator getSentenceInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.RuleBasedBreakIterator $r1;
        libcore.icu.NativeBreakIterator $r2;

        r0 := @parameter0: java.util.Locale;

        $r1 = new java.text.RuleBasedBreakIterator;

        $r2 = staticinvoke <libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getSentenceInstance(java.util.Locale)>(r0);

        specialinvoke $r1.<java.text.RuleBasedBreakIterator: void <init>(libcore.icu.NativeBreakIterator)>($r2);

        return $r1;
    }

    public static java.text.BreakIterator getWordInstance()
    {
        java.util.Locale $r0;
        java.text.BreakIterator $r1;

        $r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r1 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>($r0);

        return $r1;
    }

    public static java.text.BreakIterator getWordInstance(java.util.Locale)
    {
        java.util.Locale r0;
        java.text.RuleBasedBreakIterator $r1;
        libcore.icu.NativeBreakIterator $r2;

        r0 := @parameter0: java.util.Locale;

        $r1 = new java.text.RuleBasedBreakIterator;

        $r2 = staticinvoke <libcore.icu.NativeBreakIterator: libcore.icu.NativeBreakIterator getWordInstance(java.util.Locale)>(r0);

        specialinvoke $r1.<java.text.RuleBasedBreakIterator: void <init>(libcore.icu.NativeBreakIterator)>($r2);

        return $r1;
    }

    public boolean isBoundary(int)
    {
        java.text.BreakIterator r0;
        int i0;
        libcore.icu.NativeBreakIterator $r1;
        boolean $z0;

        r0 := @this: java.text.BreakIterator;

        i0 := @parameter0: int;

        $r1 = r0.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: boolean isBoundary(int)>(i0);

        return $z0;
    }

    public int preceding(int)
    {
        java.text.BreakIterator r0;
        int i0, $i1;
        libcore.icu.NativeBreakIterator $r1;

        r0 := @this: java.text.BreakIterator;

        i0 := @parameter0: int;

        $r1 = r0.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i1 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int preceding(int)>(i0);

        return $i1;
    }

    public void setText(java.lang.String)
    {
        java.text.BreakIterator r0;
        java.lang.String r1;
        libcore.icu.NativeBreakIterator $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.text.BreakIterator;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("newText == null");

        throw $r3;

     label1:
        $r2 = r0.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        virtualinvoke $r2.<libcore.icu.NativeBreakIterator: void setText(java.lang.String)>(r1);

        return;
    }

    public abstract int current();

    public abstract int first();

    public abstract int following(int);

    public abstract java.text.CharacterIterator getText();

    public abstract int last();

    public abstract int next();

    public abstract int next(int);

    public abstract int previous();

    public abstract void setText(java.text.CharacterIterator);

    public java.lang.Object clone()
    {
        java.text.BreakIterator r0, r1;
        java.lang.Object $r2, $r4;
        libcore.icu.NativeBreakIterator $r3, $r5;
        java.lang.CloneNotSupportedException $r6, r8;
        java.lang.AssertionError $r7;

        r0 := @this: java.text.BreakIterator;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.text.BreakIterator) $r2;

        $r3 = r0.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $r4 = virtualinvoke $r3.<libcore.icu.NativeBreakIterator: java.lang.Object clone()>();

        $r5 = (libcore.icu.NativeBreakIterator) $r4;

        r1.<java.text.BreakIterator: libcore.icu.NativeBreakIterator wrapped> = $r5;

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <java.text.BreakIterator: int DONE> = -1;

        return;
    }
}
