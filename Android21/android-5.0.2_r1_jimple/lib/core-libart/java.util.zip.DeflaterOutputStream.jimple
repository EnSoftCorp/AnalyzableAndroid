public class java.util.zip.DeflaterOutputStream extends java.io.FilterOutputStream
{
    static final int BUF_SIZE;
    protected byte[] buf;
    protected java.util.zip.Deflater def;
    boolean done;
    private final boolean syncFlush;

    public void <init>(java.io.OutputStream)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater $r2;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = new java.util.zip.Deflater;

        specialinvoke $r2.<java.util.zip.Deflater: void <init>()>();

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(r1, $r2, 512, 0);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(r1, r2, 512, 0);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater, int)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;
        int i0;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        i0 := @parameter2: int;

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(java.io.OutputStream, boolean)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        boolean z0;
        java.util.zip.Deflater $r2;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

        $r2 = new java.util.zip.Deflater;

        specialinvoke $r2.<java.util.zip.Deflater: void <init>()>();

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(r1, $r2, 512, z0);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater, boolean)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;
        boolean z0;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,int,boolean)>(r1, r2, 512, z0);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.zip.Deflater, int, boolean)
    {
        java.util.zip.DeflaterOutputStream r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;
        int i0;
        boolean z0;
        byte[] $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;
        java.lang.NullPointerException $r9, $r10;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        r0.<java.util.zip.DeflaterOutputStream: boolean done> = 0;

        if r1 != null goto label1;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>(java.lang.String)>("os == null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("def == null");

        throw $r9;

     label2:
        if i0 > 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bufferSize <= 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label3:
        r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def> = r2;

        r0.<java.util.zip.DeflaterOutputStream: boolean syncFlush> = z0;

        $r3 = newarray (byte)[i0];

        r0.<java.util.zip.DeflaterOutputStream: byte[] buf> = $r3;

        return;
    }

    protected void deflate() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        int i0, $i1;
        byte[] $r1, $r3;
        java.util.zip.Deflater $r2;
        java.io.OutputStream $r4;

        r0 := @this: java.util.zip.DeflaterOutputStream;

     label1:
        $r2 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $r1 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        $i1 = virtualinvoke $r2.<java.util.zip.Deflater: int deflate(byte[])>($r1);

        i0 = $i1;

        if $i1 == 0 goto label2;

        $r4 = r0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        $r3 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0);

        goto label1;

     label2:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        java.util.zip.Deflater $r1, $r2;
        boolean $z0;
        java.io.OutputStream $r3;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        $r1 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<java.util.zip.DeflaterOutputStream: void finish()>();

     label1:
        $r2 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r2.<java.util.zip.Deflater: void end()>();

        $r3 = r0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        int i0;
        boolean $z0, $z1;
        java.util.zip.Deflater $r1, $r2, $r4;
        byte[] $r3, $r5;
        java.io.OutputStream $r6;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        $z0 = r0.<java.util.zip.DeflaterOutputStream: boolean done>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r1.<java.util.zip.Deflater: void finish()>();

     label2:
        $r2 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z1 = virtualinvoke $r2.<java.util.zip.Deflater: boolean finished()>();

        if $z1 != 0 goto label3;

        $r4 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $r3 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        i0 = virtualinvoke $r4.<java.util.zip.Deflater: int deflate(byte[])>($r3);

        $r6 = r0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        $r5 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, i0);

        goto label2;

     label3:
        r0.<java.util.zip.DeflaterOutputStream: boolean done> = 1;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        int i0;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        i0 := @parameter0: int;

        staticinvoke <libcore.io.Streams: void writeSingleByte(java.io.OutputStream,int)>(r0, i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        byte[] r1;
        int i0, i1, $i2;
        boolean $z0, $z1;
        java.util.zip.Deflater $r2, $r3;
        java.io.IOException $r4, $r5;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<java.util.zip.DeflaterOutputStream: boolean done>;

        if $z0 == 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("attempt to write after finish");

        throw $r5;

     label1:
        $i2 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $z1 = virtualinvoke $r2.<java.util.zip.Deflater: boolean needsInput()>();

        if $z1 != 0 goto label2;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>()>();

        throw $r4;

     label2:
        $r3 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        virtualinvoke $r3.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r1, i0, i1);

        virtualinvoke r0.<java.util.zip.DeflaterOutputStream: void deflate()>();

        return;
    }

    public void flush() throws java.io.IOException
    {
        java.util.zip.DeflaterOutputStream r0;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        java.io.OutputStream $r1, $r6;
        byte[] $r2, $r3, $r5;
        java.util.zip.Deflater $r4;

        r0 := @this: java.util.zip.DeflaterOutputStream;

        $z0 = r0.<java.util.zip.DeflaterOutputStream: boolean syncFlush>;

        if $z0 == 0 goto label2;

        $z1 = r0.<java.util.zip.DeflaterOutputStream: boolean done>;

        if $z1 != 0 goto label2;

     label1:
        $r4 = r0.<java.util.zip.DeflaterOutputStream: java.util.zip.Deflater def>;

        $r3 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        $r2 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        $i1 = lengthof $r2;

        $i2 = virtualinvoke $r4.<java.util.zip.Deflater: int deflate(byte[],int,int,int)>($r3, 0, $i1, 2);

        i0 = $i2;

        if $i2 == 0 goto label2;

        $r6 = r0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        $r5 = r0.<java.util.zip.DeflaterOutputStream: byte[] buf>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, i0);

        goto label1;

     label2:
        $r1 = r0.<java.util.zip.DeflaterOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    public static void <clinit>()
    {
        <java.util.zip.DeflaterOutputStream: int BUF_SIZE> = 512;

        return;
    }
}
