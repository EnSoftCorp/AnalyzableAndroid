final class java.util.HashMap$KeySet extends java.util.AbstractSet
{
    final java.util.HashMap this$0;

    private void <init>(java.util.HashMap)
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap r1;

        r0 := @this: java.util.HashMap$KeySet;

        r1 := @parameter0: java.util.HashMap;

        r0.<java.util.HashMap$KeySet: java.util.HashMap this$0> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.HashMap$KeySet;

        $r1 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Iterator newKeyIterator()>();

        return $r2;
    }

    public int size()
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap $r1;
        int $i0;

        r0 := @this: java.util.HashMap$KeySet;

        $r1 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        $i0 = $r1.<java.util.HashMap: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.HashMap$KeySet;

        $r1 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        $i0 = $r1.<java.util.HashMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.HashMap$KeySet r0;
        java.lang.Object r1;
        java.util.HashMap $r2;
        boolean $z0;

        r0 := @this: java.util.HashMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.HashMap$KeySet r0;
        java.lang.Object r1;
        int i0, $i1;
        java.util.HashMap $r2, $r3, $r5;
        boolean $z0;

        r0 := @this: java.util.HashMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        i0 = $r2.<java.util.HashMap: int size>;

        $r3 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        $r5 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        $i1 = $r5.<java.util.HashMap: int size>;

        if $i1 == i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clear()
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap $r1;

        r0 := @this: java.util.HashMap$KeySet;

        $r1 = r0.<java.util.HashMap$KeySet: java.util.HashMap this$0>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    void <init>(java.util.HashMap, java.util.HashMap$1)
    {
        java.util.HashMap$KeySet r0;
        java.util.HashMap r1;
        java.util.HashMap$1 r2;

        r0 := @this: java.util.HashMap$KeySet;

        r1 := @parameter0: java.util.HashMap;

        r2 := @parameter1: java.util.HashMap$1;

        specialinvoke r0.<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>(r1);

        return;
    }
}
