public abstract class java.security.SignatureSpi extends java.lang.Object
{
    protected java.security.SecureRandom appRandom;

    public void <init>()
    {
        java.security.SignatureSpi r0;

        r0 := @this: java.security.SignatureSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected abstract void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException;

    protected abstract void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException;

    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        java.security.SignatureSpi r0;
        java.security.PrivateKey r1;
        java.security.SecureRandom r2;

        r0 := @this: java.security.SignatureSpi;

        r1 := @parameter0: java.security.PrivateKey;

        r2 := @parameter1: java.security.SecureRandom;

        r0.<java.security.SignatureSpi: java.security.SecureRandom appRandom> = r2;

        virtualinvoke r0.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>(r1);

        return;
    }

    protected abstract void engineUpdate(byte) throws java.security.SignatureException;

    protected abstract void engineUpdate(byte[], int, int) throws java.security.SignatureException;

    protected void engineUpdate(java.nio.ByteBuffer)
    {
        java.security.SignatureSpi r0;
        java.nio.ByteBuffer r1;
        byte[] r2, r10;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.security.SignatureException r3, $r5, $r7, r11;
        boolean $z0, $z1;
        java.lang.RuntimeException $r8, $r9;

        r0 := @this: java.security.SignatureSpi;

        r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z1 = virtualinvoke r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label06;

        r2 = virtualinvoke r1.<java.nio.ByteBuffer: byte[] array()>();

        i0 = virtualinvoke r1.<java.nio.ByteBuffer: int arrayOffset()>();

        i1 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        i2 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

     label02:
        $i7 = i0 + i1;

        $i8 = i2 - i1;

        virtualinvoke r0.<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>(r2, $i7, $i8);

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

        r3 = $r5;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label05:
        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i2);

        goto label10;

     label06:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        $i4 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i5 = $i3 - $i4;

        r10 = newarray (byte)[$i5];

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r10);

     label07:
        $i6 = lengthof r10;

        virtualinvoke r0.<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>(r10, 0, $i6);

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        r11 = $r7;

        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r11);

        throw $r9;

     label10:
        return;

        catch java.security.SignatureException from label02 to label03 with label04;
        catch java.security.SignatureException from label07 to label08 with label09;
    }

    protected abstract byte[] engineSign() throws java.security.SignatureException;

    protected int engineSign(byte[], int, int) throws java.security.SignatureException
    {
        java.security.SignatureSpi r0;
        byte[] r1, r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.security.SignatureException $r3, $r4, $r5;

        r0 := @this: java.security.SignatureSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<java.security.SignatureSpi: byte[] engineSign()>();

        if r2 != null goto label1;

        return 0;

     label1:
        $i2 = lengthof r2;

        if i1 >= $i2 goto label2;

        $r5 = new java.security.SignatureException;

        specialinvoke $r5.<java.security.SignatureException: void <init>(java.lang.String)>("The value of len parameter is less than the actual signature length");

        throw $r5;

     label2:
        if i0 >= 0 goto label3;

        $r4 = new java.security.SignatureException;

        specialinvoke $r4.<java.security.SignatureException: void <init>(java.lang.String)>("offset < 0");

        throw $r4;

     label3:
        $i4 = i0 + i1;

        $i3 = lengthof r1;

        if $i4 <= $i3 goto label4;

        $r3 = new java.security.SignatureException;

        specialinvoke $r3.<java.security.SignatureException: void <init>(java.lang.String)>("offset + len > outbuf.length");

        throw $r3;

     label4:
        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, r1, i0, $i5);

        $i6 = lengthof r2;

        return $i6;
    }

    protected abstract boolean engineVerify(byte[]) throws java.security.SignatureException;

    protected boolean engineVerify(byte[], int, int) throws java.security.SignatureException
    {
        java.security.SignatureSpi r0;
        byte[] r1, r2;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.security.SignatureSpi;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = newarray (byte)[i1];

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r1, i0, r2, 0, i1);

        $z0 = virtualinvoke r0.<java.security.SignatureSpi: boolean engineVerify(byte[])>(r2);

        return $z0;
    }

    protected abstract void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException;

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.SignatureSpi r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.security.SignatureSpi;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        java.security.SignatureSpi r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.security.SignatureSpi;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected abstract java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException;

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.SignatureSpi r0;
        java.lang.Object $r1;

        r0 := @this: java.security.SignatureSpi;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }
}
