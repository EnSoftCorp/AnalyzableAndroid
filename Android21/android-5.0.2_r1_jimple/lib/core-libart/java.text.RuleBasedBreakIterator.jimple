class java.text.RuleBasedBreakIterator extends java.text.BreakIterator
{

    void <init>(libcore.icu.NativeBreakIterator)
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator r1;

        r0 := @this: java.text.RuleBasedBreakIterator;

        r1 := @parameter0: libcore.icu.NativeBreakIterator;

        specialinvoke r0.<java.text.BreakIterator: void <init>(libcore.icu.NativeBreakIterator)>(r1);

        return;
    }

    public int current()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int current()>();

        return $i0;
    }

    public int first()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int first()>();

        return $i0;
    }

    public int following(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i1;
        libcore.icu.NativeBreakIterator $r1;

        r0 := @this: java.text.RuleBasedBreakIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.RuleBasedBreakIterator: void checkOffset(int)>(i0);

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i1 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int following(int)>(i0);

        return $i1;
    }

    private void checkOffset(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i1, $i2, $i3, $i4;
        java.text.CharacterIterator r1;
        java.lang.String r2;
        libcore.icu.NativeBreakIterator $r3, $r4;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11, $r12;

        r0 := @this: java.text.RuleBasedBreakIterator;

        i0 := @parameter0: int;

        $r3 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $z0 = virtualinvoke $r3.<libcore.icu.NativeBreakIterator: boolean hasText()>();

        if $z0 != 0 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("BreakIterator has no text");

        throw $r12;

     label1:
        $r4 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        r1 = virtualinvoke $r4.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator getText()>();

        $i1 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();

        if i0 < $i1 goto label2;

        $i4 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();

        if i0 <= $i4 goto label3;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Valid range is [");

        $i2 = interfaceinvoke r1.<java.text.CharacterIterator: int getBeginIndex()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i3 = interfaceinvoke r1.<java.text.CharacterIterator: int getEndIndex()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r2);

        throw $r11;

     label3:
        return;
    }

    public java.text.CharacterIterator getText()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        java.text.CharacterIterator $r2;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $r2 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: java.text.CharacterIterator getText()>();

        return $r2;
    }

    public int last()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int last()>();

        return $i0;
    }

    public int next()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int next()>();

        return $i0;
    }

    public int next(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i1;
        libcore.icu.NativeBreakIterator $r1;

        r0 := @this: java.text.RuleBasedBreakIterator;

        i0 := @parameter0: int;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i1 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int next(int)>(i0);

        return $i1;
    }

    public int previous()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int previous()>();

        return $i0;
    }

    public void setText(java.text.CharacterIterator)
    {
        java.text.RuleBasedBreakIterator r0;
        java.text.CharacterIterator r1;
        libcore.icu.NativeBreakIterator $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.text.RuleBasedBreakIterator;

        r1 := @parameter0: java.text.CharacterIterator;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("newText == null");

        throw $r3;

     label1:
        interfaceinvoke r1.<java.text.CharacterIterator: char current()>();

        $r2 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        virtualinvoke $r2.<libcore.icu.NativeBreakIterator: void setText(java.text.CharacterIterator)>(r1);

        return;
    }

    public boolean isBoundary(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0;
        libcore.icu.NativeBreakIterator $r1;
        boolean $z0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.RuleBasedBreakIterator: void checkOffset(int)>(i0);

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $z0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: boolean isBoundary(int)>(i0);

        return $z0;
    }

    public int preceding(int)
    {
        java.text.RuleBasedBreakIterator r0;
        int i0, $i1;
        libcore.icu.NativeBreakIterator $r1;

        r0 := @this: java.text.RuleBasedBreakIterator;

        i0 := @parameter0: int;

        specialinvoke r0.<java.text.RuleBasedBreakIterator: void checkOffset(int)>(i0);

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i1 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int preceding(int)>(i0);

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        java.text.RuleBasedBreakIterator r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        libcore.icu.NativeBreakIterator $r3, $r4;

        r0 := @this: java.text.RuleBasedBreakIterator;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.text.RuleBasedBreakIterator;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $r2 = (java.text.RuleBasedBreakIterator) r1;

        $r3 = $r2.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $z1 = virtualinvoke $r4.<libcore.icu.NativeBreakIterator: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public java.lang.String toString()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        java.lang.String $r2;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        java.text.RuleBasedBreakIterator r0;
        libcore.icu.NativeBreakIterator $r1;
        int $i0;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r1 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $i0 = virtualinvoke $r1.<libcore.icu.NativeBreakIterator: int hashCode()>();

        return $i0;
    }

    public java.lang.Object clone()
    {
        java.text.RuleBasedBreakIterator r0, r1;
        java.lang.Object $r2, $r4;
        libcore.icu.NativeBreakIterator $r3, $r5;

        r0 := @this: java.text.RuleBasedBreakIterator;

        $r2 = specialinvoke r0.<java.text.BreakIterator: java.lang.Object clone()>();

        r1 = (java.text.RuleBasedBreakIterator) $r2;

        $r3 = r0.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped>;

        $r4 = virtualinvoke $r3.<libcore.icu.NativeBreakIterator: java.lang.Object clone()>();

        $r5 = (libcore.icu.NativeBreakIterator) $r4;

        r1.<java.text.RuleBasedBreakIterator: libcore.icu.NativeBreakIterator wrapped> = $r5;

        return r1;
    }
}
