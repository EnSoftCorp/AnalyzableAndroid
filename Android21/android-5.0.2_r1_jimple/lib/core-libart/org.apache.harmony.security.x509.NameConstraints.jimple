public final class org.apache.harmony.security.x509.NameConstraints extends org.apache.harmony.security.x509.ExtensionValue
{
    private final org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees;
    private final org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees;
    private byte[] encoding;
    private java.util.ArrayList[] permitted_names;
    private java.util.ArrayList[] excluded_names;
    public static final org.apache.harmony.security.asn1.ASN1Sequence ASN1;

    public void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        org.apache.harmony.security.x509.GeneralSubtrees r1, r2;
        java.util.List r3, r6;
        java.lang.IllegalArgumentException $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        specialinvoke r0.<org.apache.harmony.security.x509.ExtensionValue: void <init>()>();

        if r1 == null goto label2;

        r3 = virtualinvoke r1.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        if r3 == null goto label1;

        $z1 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permittedSubtrees are empty");

        throw $r5;

     label2:
        if r2 == null goto label4;

        r6 = virtualinvoke r2.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        if r6 == null goto label3;

        $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("excludedSubtrees are empty");

        throw $r4;

     label4:
        r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees> = r1;

        r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees> = r2;

        return;
    }

    private void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees, byte[])
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        org.apache.harmony.security.x509.GeneralSubtrees r1, r2;
        byte[] r3;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        r3 := @parameter2: byte[];

        specialinvoke r0.<org.apache.harmony.security.x509.NameConstraints: void <init>(org.apache.harmony.security.x509.GeneralSubtrees,org.apache.harmony.security.x509.GeneralSubtrees)>(r1, r2);

        r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding> = r3;

        return;
    }

    public static org.apache.harmony.security.x509.NameConstraints decode(byte[]) throws java.io.IOException
    {
        byte[] r0;
        org.apache.harmony.security.asn1.ASN1Sequence $r1;
        java.lang.Object $r2;
        org.apache.harmony.security.x509.NameConstraints $r3;

        r0 := @parameter0: byte[];

        $r1 = <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object decode(byte[])>(r0);

        $r3 = (org.apache.harmony.security.x509.NameConstraints) $r2;

        return $r3;
    }

    public byte[] getEncoded()
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        byte[] $r1, $r2, $r4;
        org.apache.harmony.security.asn1.ASN1Sequence $r3;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 = r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding>;

        if $r1 != null goto label1;

        $r3 = <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Sequence: byte[] encode(java.lang.Object)>(r0);

        r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding> = $r4;

     label1:
        $r2 = r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding>;

        return $r2;
    }

    private void prepareNames()
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        java.util.Iterator r1, r26;
        org.apache.harmony.security.x509.GeneralSubtree r2, r27;
        org.apache.harmony.security.x509.GeneralName r3, r28;
        int i0, i1;
        java.util.ArrayList[] $r4, $r6, $r12, $r14, $r17, $r21, $r23, $r25;
        org.apache.harmony.security.x509.GeneralSubtrees $r5, $r7, $r8, $r16;
        java.util.List $r9, $r18;
        boolean $z0, $z2;
        java.lang.Object $r10, $r19;
        java.util.ArrayList $r11, $r13, $r15, $r20, $r22, $r24;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r4 = newarray (java.util.ArrayList)[9];

        r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names> = $r4;

        $r5 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        if $r5 == null goto label3;

        $r16 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        $r18 = virtualinvoke $r16.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        r1 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r19 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (org.apache.harmony.security.x509.GeneralSubtree) $r19;

        r3 = virtualinvoke r2.<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()>();

        i0 = virtualinvoke r3.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r21 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r20 = $r21[i0];

        if $r20 != null goto label2;

        $r25 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>()>();

        $r25[i0] = $r22;

     label2:
        $r23 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r24 = $r23[i0];

        virtualinvoke $r24.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label1;

     label3:
        $r6 = newarray (java.util.ArrayList)[9];

        r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names> = $r6;

        $r7 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        if $r7 == null goto label6;

        $r8 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        $r9 = virtualinvoke $r8.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        r26 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r10 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>();

        r27 = (org.apache.harmony.security.x509.GeneralSubtree) $r10;

        r28 = virtualinvoke r27.<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()>();

        i1 = virtualinvoke r28.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r12 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r11 = $r12[i1];

        if $r11 != null goto label5;

        $r17 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r17[i1] = $r15;

     label5:
        $r14 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r13 = $r14[i1];

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r28);

        goto label4;

     label6:
        return;
    }

    private byte[] getExtensionValue(java.security.cert.X509Certificate, java.lang.String)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        java.security.cert.X509Certificate r1;
        java.lang.String r2;
        byte[] r3, $r6, $r7;
        org.apache.harmony.security.asn1.ASN1OctetString $r4;
        java.lang.Object $r5;
        java.io.IOException $r8;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: java.security.cert.X509Certificate;

        r2 := @parameter1: java.lang.String;

     label1:
        r3 = virtualinvoke r1.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>(r2);

        if r3 != null goto label3;

     label2:
        return null;

     label3:
        $r4 = staticinvoke <org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.asn1.ASN1OctetString: java.lang.Object decode(byte[])>(r3);

        $r6 = (byte[]) $r5;

        $r7 = (byte[]) $r6;

     label4:
        return $r7;

     label5:
        $r8 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    public boolean isAcceptable(java.security.cert.X509Certificate)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        java.security.cert.X509Certificate r1;
        byte[] r2;
        java.util.List r3, $r9;
        java.io.IOException r4, $r17, $r18;
        java.util.ArrayList[] $r5, $r10, $r15;
        org.apache.harmony.security.asn1.ASN1Type $r6;
        java.lang.Object $r7;
        org.apache.harmony.security.x509.GeneralNames $r8;
        java.util.ArrayList $r11, $r16, r20;
        javax.security.auth.x500.X500Principal $r13;
        java.lang.String $r14;
        boolean $z1;
        org.apache.harmony.security.x509.GeneralName r21;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: java.security.cert.X509Certificate;

        $r5 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        if $r5 != null goto label01;

        specialinvoke r0.<org.apache.harmony.security.x509.NameConstraints: void prepareNames()>();

     label01:
        r2 = specialinvoke r0.<org.apache.harmony.security.x509.NameConstraints: byte[] getExtensionValue(java.security.cert.X509Certificate,java.lang.String)>(r1, "2.5.29.17");

     label02:
        if r2 != null goto label03;

        r20 = new java.util.ArrayList;

        $r9 = r20;

        specialinvoke r20.<java.util.ArrayList: void <init>(int)>(1);

        goto label04;

     label03:
        $r6 = <org.apache.harmony.security.x509.GeneralNames: org.apache.harmony.security.asn1.ASN1Type ASN1>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>(r2);

        $r8 = (org.apache.harmony.security.x509.GeneralNames) $r7;

        $r9 = virtualinvoke $r8.<org.apache.harmony.security.x509.GeneralNames: java.util.List getNames()>();

     label04:
        r3 = $r9;

     label05:
        goto label07;

     label06:
        $r18 := @caughtexception;

        r4 = $r18;

        virtualinvoke r4.<java.io.IOException: void printStackTrace()>();

        return 0;

     label07:
        $r10 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r11 = $r10[4];

        if $r11 != null goto label08;

        $r15 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r16 = $r15[4];

        if $r16 == null goto label11;

     label08:
        r21 = new org.apache.harmony.security.x509.GeneralName;

        $r13 = virtualinvoke r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r14 = virtualinvoke $r13.<javax.security.auth.x500.X500Principal: java.lang.String getName()>();

        specialinvoke r21.<org.apache.harmony.security.x509.GeneralName: void <init>(int,java.lang.String)>(4, $r14);

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r21);

     label09:
        goto label11;

     label10:
        $r17 := @caughtexception;

     label11:
        $z1 = virtualinvoke r0.<org.apache.harmony.security.x509.NameConstraints: boolean isAcceptable(java.util.List)>(r3);

        return $z1;

        catch java.io.IOException from label02 to label05 with label06;
        catch java.io.IOException from label08 to label09 with label10;
    }

    public boolean isAcceptable(java.util.List)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        java.util.List r1;
        boolean[] r2, r3;
        java.util.Iterator r4;
        org.apache.harmony.security.x509.GeneralName r5, $r17, $r21;
        int i0, i1, $i2, $i3, i4, i5;
        java.util.ArrayList[] $r6, $r8, $r9, $r13, $r14, $r19, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r7, $r15, $r23;
        java.util.ArrayList $r10, $r11, $r12, $r16, $r18, $r22;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: java.util.List;

        $r6 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        if $r6 != null goto label01;

        specialinvoke r0.<org.apache.harmony.security.x509.NameConstraints: void prepareNames()>();

     label01:
        r2 = newarray (boolean)[9];

        r3 = newarray (boolean)[9];

        r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.harmony.security.x509.GeneralName) $r7;

        i0 = virtualinvoke r5.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r8 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r10 = $r8[i0];

        if $r10 == null goto label05;

        i1 = 0;

     label03:
        $r19 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r18 = $r19[i0];

        $i3 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        if i1 >= $i3 goto label05;

        $r20 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r22 = $r20[i0];

        $r23 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r21 = (org.apache.harmony.security.x509.GeneralName) $r23;

        $z5 = virtualinvoke $r21.<org.apache.harmony.security.x509.GeneralName: boolean isAcceptable(org.apache.harmony.security.x509.GeneralName)>(r5);

        if $z5 == 0 goto label04;

        return 0;

     label04:
        i1 = i1 + 1;

        goto label03;

     label05:
        $r9 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r11 = $r9[i0];

        if $r11 == null goto label08;

        $z3 = r3[i0];

        if $z3 != 0 goto label08;

        r2[i0] = 1;

        i4 = 0;

     label06:
        $r13 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r12 = $r13[i0];

        $i2 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        if i4 >= $i2 goto label08;

        $r14 = r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r16 = $r14[i0];

        $r15 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r17 = (org.apache.harmony.security.x509.GeneralName) $r15;

        $z4 = virtualinvoke $r17.<org.apache.harmony.security.x509.GeneralName: boolean isAcceptable(org.apache.harmony.security.x509.GeneralName)>(r5);

        if $z4 == 0 goto label07;

        r3[i0] = 1;

     label07:
        i4 = i4 + 1;

        goto label06;

     label08:
        goto label02;

     label09:
        i5 = 0;

     label10:
        if i5 >= 9 goto label12;

        $z1 = r2[i5];

        if $z1 == 0 goto label11;

        $z2 = r3[i5];

        if $z2 != 0 goto label11;

        return 0;

     label11:
        i5 = i5 + 1;

        goto label10;

     label12:
        return 1;
    }

    public void dumpValue(java.lang.StringBuilder, java.lang.String)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        java.lang.StringBuilder r1, $r5, $r9, $r10, $r12, $r17, $r18, $r20, $r21, $r22, $r27, $r28, $r29, $r32;
        java.lang.String r2, $r23, $r33;
        java.util.Iterator r3, r34;
        org.apache.harmony.security.x509.GeneralSubtree r4, r35;
        org.apache.harmony.security.x509.GeneralSubtrees $r7, $r8, $r14, $r24;
        java.util.List $r15, $r26;
        boolean $z0, $z1;
        java.lang.Object $r19, $r31;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.String;

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Name Constraints: [\n");

        $r7 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        if $r7 == null goto label3;

        $r22 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Permitted: [\n");

        $r24 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        $r26 = virtualinvoke $r24.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        r3 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r31 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.harmony.security.x509.GeneralSubtree) $r31;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<org.apache.harmony.security.x509.GeneralSubtree: void dumpValue(java.lang.StringBuilder,java.lang.String)>(r1, $r33);

        goto label1;

     label2:
        $r27 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ]\n");

     label3:
        $r8 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        if $r8 == null goto label6;

        $r12 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Excluded: [\n");

        $r14 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        $r15 = virtualinvoke $r14.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        r34 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r19 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>();

        r35 = (org.apache.harmony.security.x509.GeneralSubtree) $r19;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r35.<org.apache.harmony.security.x509.GeneralSubtree: void dumpValue(java.lang.StringBuilder,java.lang.String)>(r1, $r23);

        goto label4;

     label5:
        $r17 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ]\n");

     label6:
        $r9 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]\n");

        return;
    }

    void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees, byte[], org.apache.harmony.security.x509.NameConstraints$1)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        org.apache.harmony.security.x509.GeneralSubtrees r1, r2;
        byte[] r3;
        org.apache.harmony.security.x509.NameConstraints$1 r4;

        r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        r3 := @parameter2: byte[];

        r4 := @parameter3: org.apache.harmony.security.x509.NameConstraints$1;

        specialinvoke r0.<org.apache.harmony.security.x509.NameConstraints: void <init>(org.apache.harmony.security.x509.GeneralSubtrees,org.apache.harmony.security.x509.GeneralSubtrees,byte[])>(r1, r2, r3);

        return;
    }

    static org.apache.harmony.security.x509.GeneralSubtrees access$100(org.apache.harmony.security.x509.NameConstraints)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        org.apache.harmony.security.x509.GeneralSubtrees $r1;

        r0 := @parameter0: org.apache.harmony.security.x509.NameConstraints;

        $r1 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        return $r1;
    }

    static org.apache.harmony.security.x509.GeneralSubtrees access$200(org.apache.harmony.security.x509.NameConstraints)
    {
        org.apache.harmony.security.x509.NameConstraints r0;
        org.apache.harmony.security.x509.GeneralSubtrees $r1;

        r0 := @parameter0: org.apache.harmony.security.x509.NameConstraints;

        $r1 = r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        return $r1;
    }

    static void <clinit>()
    {
        org.apache.harmony.security.x509.NameConstraints$1 $r0;
        org.apache.harmony.security.asn1.ASN1Type[] $r1;
        org.apache.harmony.security.asn1.ASN1Implicit $r2, $r4;
        org.apache.harmony.security.asn1.ASN1Type $r3, $r5;

        $r0 = new org.apache.harmony.security.x509.NameConstraints$1;

        $r1 = newarray (org.apache.harmony.security.asn1.ASN1Type)[2];

        $r2 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r3 = <org.apache.harmony.security.x509.GeneralSubtrees: org.apache.harmony.security.asn1.ASN1Type ASN1>;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(0, $r3);

        $r1[0] = $r2;

        $r4 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r5 = <org.apache.harmony.security.x509.GeneralSubtrees: org.apache.harmony.security.asn1.ASN1Type ASN1>;

        specialinvoke $r4.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(1, $r5);

        $r1[1] = $r4;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints$1: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>($r1);

        <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1> = $r0;

        return;
    }
}
