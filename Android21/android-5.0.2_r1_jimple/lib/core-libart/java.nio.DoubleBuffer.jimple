public abstract class java.nio.DoubleBuffer extends java.nio.Buffer implements java.lang.Comparable
{

    public static java.nio.DoubleBuffer allocate(int)
    {
        int i0;
        java.nio.DoubleArrayBuffer $r0;
        double[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label1:
        $r0 = new java.nio.DoubleArrayBuffer;

        $r1 = newarray (double)[i0];

        specialinvoke $r0.<java.nio.DoubleArrayBuffer: void <init>(double[])>($r1);

        return $r0;
    }

    public static java.nio.DoubleBuffer wrap(double[])
    {
        double[] r0;
        int $i0;
        java.nio.DoubleBuffer $r1;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <java.nio.DoubleBuffer: java.nio.DoubleBuffer wrap(double[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.nio.DoubleBuffer wrap(double[], int, int)
    {
        double[] r0;
        int i0, i1, $i2, $i3;
        java.nio.DoubleArrayBuffer r1, $r2;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i2, i0, i1);

        $r2 = new java.nio.DoubleArrayBuffer;

        specialinvoke $r2.<java.nio.DoubleArrayBuffer: void <init>(double[])>(r0);

        r1 = $r2;

        r1.<java.nio.DoubleBuffer: int position> = i0;

        $i3 = i0 + i1;

        r1.<java.nio.DoubleBuffer: int limit> = $i3;

        return r1;
    }

    void <init>(int, long)
    {
        java.nio.DoubleBuffer r0;
        int i0;
        long l1;

        r0 := @this: java.nio.DoubleBuffer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        specialinvoke r0.<java.nio.Buffer: void <init>(int,int,long)>(3, i0, l1);

        return;
    }

    public final double[] array()
    {
        java.nio.DoubleBuffer r0;
        double[] $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = virtualinvoke r0.<java.nio.DoubleBuffer: double[] protectedArray()>();

        return $r1;
    }

    public final int arrayOffset()
    {
        java.nio.DoubleBuffer r0;
        int $i0;

        r0 := @this: java.nio.DoubleBuffer;

        $i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int protectedArrayOffset()>();

        return $i0;
    }

    public abstract java.nio.DoubleBuffer asReadOnlyBuffer();

    public abstract java.nio.DoubleBuffer compact();

    public int compareTo(java.nio.DoubleBuffer)
    {
        java.nio.DoubleBuffer r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        double d0, d1;
        byte $b9, $b10, $b11, $b12, $b13;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.nio.DoubleBuffer;

        $i3 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        $i4 = virtualinvoke r1.<java.nio.DoubleBuffer: int remaining()>();

        if $i3 >= $i4 goto label1;

        $i5 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        goto label2;

     label1:
        $i5 = virtualinvoke r1.<java.nio.DoubleBuffer: int remaining()>();

     label2:
        i0 = $i5;

        i1 = r0.<java.nio.DoubleBuffer: int position>;

        i2 = r1.<java.nio.DoubleBuffer: int position>;

     label3:
        if i0 <= 0 goto label8;

        d0 = virtualinvoke r0.<java.nio.DoubleBuffer: double get(int)>(i1);

        d1 = virtualinvoke r1.<java.nio.DoubleBuffer: double get(int)>(i2);

        $b9 = d0 cmpl d1;

        if $b9 == 0 goto label7;

        $b11 = d0 cmpl d0;

        if $b11 == 0 goto label4;

        $b12 = d1 cmpl d1;

        if $b12 != 0 goto label7;

     label4:
        $b10 = d0 cmpg d1;

        if $b10 >= 0 goto label5;

        $b13 = -1;

        goto label6;

     label5:
        $b13 = 1;

     label6:
        return $b13;

     label7:
        i1 = i1 + 1;

        i2 = i2 + 1;

        i0 = i0 + -1;

        goto label3;

     label8:
        $i6 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        $i7 = virtualinvoke r1.<java.nio.DoubleBuffer: int remaining()>();

        $i8 = $i6 - $i7;

        return $i8;
    }

    public abstract java.nio.DoubleBuffer duplicate();

    public boolean equals(java.lang.Object)
    {
        java.nio.DoubleBuffer r0, r2;
        java.lang.Object r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0, $z1, $z2;
        double d0, d1;
        byte $b7, $b8, $b9;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.lang.Object;

        $z1 = r1 instanceof java.nio.DoubleBuffer;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.nio.DoubleBuffer) r1;

        $i2 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        $i3 = virtualinvoke r2.<java.nio.DoubleBuffer: int remaining()>();

        if $i2 == $i3 goto label2;

        return 0;

     label2:
        i0 = r0.<java.nio.DoubleBuffer: int position>;

        i1 = r2.<java.nio.DoubleBuffer: int position>;

        z0 = 1;

     label3:
        if z0 == 0 goto label7;

        $i4 = r0.<java.nio.DoubleBuffer: int limit>;

        if i0 >= $i4 goto label7;

        $i5 = i0;

        i0 = i0 + 1;

        d0 = virtualinvoke r0.<java.nio.DoubleBuffer: double get(int)>($i5);

        $i6 = i1;

        i1 = i1 + 1;

        d1 = virtualinvoke r2.<java.nio.DoubleBuffer: double get(int)>($i6);

        $b8 = d0 cmpl d1;

        if $b8 == 0 goto label4;

        $b7 = d0 cmpl d0;

        if $b7 == 0 goto label5;

        $b9 = d1 cmpl d1;

        if $b9 == 0 goto label5;

     label4:
        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        z0 = $z2;

        goto label3;

     label7:
        return z0;
    }

    public abstract double get();

    public java.nio.DoubleBuffer get(double[])
    {
        java.nio.DoubleBuffer r0, $r2;
        double[] r1;
        int $i0;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.DoubleBuffer get(double[], int, int)
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        double $d0;
        java.nio.BufferUnderflowException $r2;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r2 = new java.nio.BufferUnderflowException;

        specialinvoke $r2.<java.nio.BufferUnderflowException: void <init>()>();

        throw $r2;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $d0 = virtualinvoke r0.<java.nio.DoubleBuffer: double get()>();

        r1[i2] = $d0;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public abstract double get(int);

    public final boolean hasArray()
    {
        java.nio.DoubleBuffer r0;
        boolean $z0;

        r0 := @this: java.nio.DoubleBuffer;

        $z0 = virtualinvoke r0.<java.nio.DoubleBuffer: boolean protectedHasArray()>();

        return $z0;
    }

    public int hashCode()
    {
        java.nio.DoubleBuffer r0;
        int i0, i1, $i3, $i4, $i5, $i7, $i8;
        long l2, $l6;
        double $d0;

        r0 := @this: java.nio.DoubleBuffer;

        i0 = r0.<java.nio.DoubleBuffer: int position>;

        i1 = 0;

     label1:
        $i3 = r0.<java.nio.DoubleBuffer: int limit>;

        if i0 >= $i3 goto label2;

        $i4 = i0;

        i0 = i0 + 1;

        $d0 = virtualinvoke r0.<java.nio.DoubleBuffer: double get(int)>($i4);

        l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i5 = (int) l2;

        $i8 = i1 + $i5;

        $l6 = l2 >> 32;

        $i7 = (int) $l6;

        i1 = $i8 ^ $i7;

        goto label1;

     label2:
        return i1;
    }

    public abstract boolean isDirect();

    public abstract java.nio.ByteOrder order();

    abstract double[] protectedArray();

    abstract int protectedArrayOffset();

    abstract boolean protectedHasArray();

    public abstract java.nio.DoubleBuffer put(double);

    public final java.nio.DoubleBuffer put(double[])
    {
        java.nio.DoubleBuffer r0, $r2;
        double[] r1;
        int $i0;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.nio.DoubleBuffer put(double[], int, int)
    {
        java.nio.DoubleBuffer r0;
        double[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        double $d0;
        java.nio.BufferOverflowException $r3;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i3 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i3, i0, i1);

        $i4 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        if i1 <= $i4 goto label1;

        $r3 = new java.nio.BufferOverflowException;

        specialinvoke $r3.<java.nio.BufferOverflowException: void <init>()>();

        throw $r3;

     label1:
        i2 = i0;

     label2:
        $i5 = i0 + i1;

        if i2 >= $i5 goto label3;

        $d0 = r1[i2];

        virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double)>($d0);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r0;
    }

    public java.nio.DoubleBuffer put(java.nio.DoubleBuffer)
    {
        java.nio.DoubleBuffer r0, r1;
        double[] r2;
        boolean $z0;
        int $i0, $i1, $i2;
        java.nio.BufferOverflowException $r5;
        java.lang.IllegalArgumentException $r6;
        java.nio.ReadOnlyBufferException $r7;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.nio.DoubleBuffer;

        $z0 = virtualinvoke r0.<java.nio.DoubleBuffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r7 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r7.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r7;

     label1:
        if r1 != r0 goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("src == this");

        throw $r6;

     label2:
        $i0 = virtualinvoke r1.<java.nio.DoubleBuffer: int remaining()>();

        $i1 = virtualinvoke r0.<java.nio.DoubleBuffer: int remaining()>();

        if $i0 <= $i1 goto label3;

        $r5 = new java.nio.BufferOverflowException;

        specialinvoke $r5.<java.nio.BufferOverflowException: void <init>()>();

        throw $r5;

     label3:
        $i2 = virtualinvoke r1.<java.nio.DoubleBuffer: int remaining()>();

        r2 = newarray (double)[$i2];

        virtualinvoke r1.<java.nio.DoubleBuffer: java.nio.DoubleBuffer get(double[])>(r2);

        virtualinvoke r0.<java.nio.DoubleBuffer: java.nio.DoubleBuffer put(double[])>(r2);

        return r0;
    }

    public abstract java.nio.DoubleBuffer put(int, double);

    public abstract java.nio.DoubleBuffer slice();

    public volatile java.lang.Object array()
    {
        java.nio.DoubleBuffer r0;
        double[] $r1;

        r0 := @this: java.nio.DoubleBuffer;

        $r1 = virtualinvoke r0.<java.nio.DoubleBuffer: double[] array()>();

        return $r1;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.nio.DoubleBuffer r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.nio.DoubleBuffer;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.nio.DoubleBuffer) r1;

        $i0 = virtualinvoke r0.<java.nio.DoubleBuffer: int compareTo(java.nio.DoubleBuffer)>($r2);

        return $i0;
    }
}
