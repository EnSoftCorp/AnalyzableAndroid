public final class java.lang.Float extends java.lang.Number implements java.lang.Comparable
{
    static final int EXPONENT_BIAS;
    static final int EXPONENT_BITS;
    static final int MANTISSA_BITS;
    static final int NON_MANTISSA_BITS;
    static final int SIGN_MASK;
    static final int EXPONENT_MASK;
    static final int MANTISSA_MASK;
    private static final long serialVersionUID;
    private final float value;
    public static final float MAX_VALUE;
    public static final float MIN_VALUE;
    public static final float NaN;
    public static final float POSITIVE_INFINITY;
    public static final float NEGATIVE_INFINITY;
    public static final float MIN_NORMAL;
    public static final int MAX_EXPONENT;
    public static final int MIN_EXPONENT;
    public static final java.lang.Class TYPE;
    public static final int SIZE;

    public void <init>(float)
    {
        java.lang.Float r0;
        float f0;

        r0 := @this: java.lang.Float;

        f0 := @parameter0: float;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        r0.<java.lang.Float: float value> = f0;

        return;
    }

    public void <init>(double)
    {
        java.lang.Float r0;
        double d0;
        float $f0;

        r0 := @this: java.lang.Float;

        d0 := @parameter0: double;

        specialinvoke r0.<java.lang.Number: void <init>()>();

        $f0 = (float) d0;

        r0.<java.lang.Float: float value> = $f0;

        return;
    }

    public void <init>(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.Float r0;
        java.lang.String r1;
        float $f0;

        r0 := @this: java.lang.Float;

        r1 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r1);

        specialinvoke r0.<java.lang.Float: void <init>(float)>($f0);

        return;
    }

    public int compareTo(java.lang.Float)
    {
        java.lang.Float r0, r1;
        float $f0, $f1;
        int $i0;

        r0 := @this: java.lang.Float;

        r1 := @parameter0: java.lang.Float;

        $f1 = r0.<java.lang.Float: float value>;

        $f0 = r1.<java.lang.Float: float value>;

        $i0 = staticinvoke <java.lang.Float: int compare(float,float)>($f1, $f0);

        return $i0;
    }

    public byte byteValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;
        byte $b1;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $i0 = (int) $f0;

        $b1 = (byte) $i0;

        return $b1;
    }

    public double doubleValue()
    {
        java.lang.Float r0;
        float $f0;
        double $d0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $d0 = (double) $f0;

        return $d0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Float r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: java.lang.Float;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.lang.Float;

        if $z0 == 0 goto label1;

        $f0 = r0.<java.lang.Float: float value>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $r2 = (java.lang.Float) r1;

        $f1 = $r2.<java.lang.Float: float value>;

        $i1 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        if $i0 != $i1 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static int floatToIntBits(float)
    {
        float f0;
        byte $b0;
        int $i1;

        f0 := @parameter0: float;

        $b0 = f0 cmpl f0;

        if $b0 == 0 goto label1;

        return 2143289344;

     label1:
        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        return $i1;
    }

    public static native int floatToRawIntBits(float);

    public float floatValue()
    {
        java.lang.Float r0;
        float $f0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        return $f0;
    }

    public int hashCode()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        return $i0;
    }

    public static native float intBitsToFloat(int);

    public int intValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $i0 = (int) $f0;

        return $i0;
    }

    public boolean isInfinite()
    {
        java.lang.Float r0;
        float $f0;
        boolean $z0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $z0 = staticinvoke <java.lang.Float: boolean isInfinite(float)>($f0);

        return $z0;
    }

    public static boolean isInfinite(float)
    {
        float f0;
        byte $b0, $b1;
        boolean $z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl #InfinityF;

        if $b0 == 0 goto label1;

        $b1 = f0 cmpl #-InfinityF;

        if $b1 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean isNaN()
    {
        java.lang.Float r0;
        float $f0;
        boolean $z0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f0);

        return $z0;
    }

    public static boolean isNaN(float)
    {
        float f0;
        byte $b0;
        boolean $z0;

        f0 := @parameter0: float;

        $b0 = f0 cmpl f0;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long longValue()
    {
        java.lang.Float r0;
        float $f0;
        long $l0;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $l0 = (long) $f0;

        return $l0;
    }

    public static float parseFloat(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        float $f0;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.StringToReal: float parseFloat(java.lang.String)>(r0);

        return $f0;
    }

    public short shortValue()
    {
        java.lang.Float r0;
        float $f0;
        int $i0;
        short $s1;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $i0 = (int) $f0;

        $s1 = (short) $i0;

        return $s1;
    }

    public java.lang.String toString()
    {
        java.lang.Float r0;
        float $f0;
        java.lang.String $r1;

        r0 := @this: java.lang.Float;

        $f0 = r0.<java.lang.Float: float value>;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        return $r1;
    }

    public static java.lang.String toString(float)
    {
        float f0;
        java.lang.RealToString $r0;
        java.lang.String $r1;

        f0 := @parameter0: float;

        $r0 = staticinvoke <java.lang.RealToString: java.lang.RealToString getInstance()>();

        $r1 = virtualinvoke $r0.<java.lang.RealToString: java.lang.String floatToString(float)>(f0);

        return $r1;
    }

    public static java.lang.Float valueOf(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        float $f0;
        java.lang.Float $r1;

        r0 := @parameter0: java.lang.String;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        return $r1;
    }

    public static int compare(float, float)
    {
        float f0, f1;
        int i0, i1, $i5, $i6, $i7;
        byte $b2, $b3, $b4, $b8;
        boolean $z0, $z1, $z2;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $b2 = f0 cmpl f1;

        if $b2 <= 0 goto label1;

        return 1;

     label1:
        $b3 = f1 cmpl f0;

        if $b3 <= 0 goto label2;

        return -1;

     label2:
        $b4 = f0 cmpl f1;

        if $b4 != 0 goto label3;

        $b8 = 0.0F cmpl f0;

        if $b8 == 0 goto label3;

        return 0;

     label3:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label5;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z2 == 0 goto label4;

        return 0;

     label4:
        return 1;

     label5:
        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 == 0 goto label6;

        return -1;

     label6:
        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $i6 = i0 >> 31;

        $i5 = i1 >> 31;

        $i7 = $i6 - $i5;

        return $i7;
    }

    public static java.lang.Float valueOf(float)
    {
        float f0;
        java.lang.Float $r0;

        f0 := @parameter0: float;

        $r0 = new java.lang.Float;

        specialinvoke $r0.<java.lang.Float: void <init>(float)>(f0);

        return $r0;
    }

    public static java.lang.String toHexString(float)
    {
        float f0;
        int i0, i1, i2, i3, i4, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21;
        boolean z0, $z1;
        java.lang.StringBuilder r0, $r3;
        java.lang.String r1, $r8, $r15, r16;
        byte $b5, $b6, $b7;

        f0 := @parameter0: float;

        $b5 = f0 cmpl f0;

        if $b5 == 0 goto label01;

        return "NaN";

     label01:
        $b6 = f0 cmpl #InfinityF;

        if $b6 != 0 goto label02;

        return "Infinity";

     label02:
        $b7 = f0 cmpl #-InfinityF;

        if $b7 != 0 goto label03;

        return "-Infinity";

     label03:
        i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $i8 = i0 & -2147483648;

        if $i8 == 0 goto label04;

        $z1 = 1;

        goto label05;

     label04:
        $z1 = 0;

     label05:
        z0 = $z1;

        $i9 = i0 & 2139095040;

        i1 = $i9 >>> 23;

        $i10 = i0 & 8388607;

        i2 = $i10 << 1;

        if i1 != 0 goto label08;

        if i2 != 0 goto label08;

        if z0 == 0 goto label06;

        $r15 = "-0x0.0p0";

        goto label07;

     label06:
        $r15 = "0x0.0p0";

     label07:
        return $r15;

     label08:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(10);

        r0 = $r3;

        if z0 == 0 goto label09;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-0x");

        goto label10;

     label09:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

     label10:
        if i1 != 0 goto label15;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0.");

        i3 = 6;

     label11:
        if i2 == 0 goto label12;

        $i18 = i2 & 15;

        if $i18 != 0 goto label12;

        i2 = i2 >>> 4;

        i3 = i3 + -1;

        goto label11;

     label12:
        r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        if i2 == 0 goto label14;

        $i16 = virtualinvoke r1.<java.lang.String: int length()>();

        if i3 <= $i16 goto label14;

        $i17 = virtualinvoke r1.<java.lang.String: int length()>();

        i4 = i3 - $i17;

     label13:
        $i19 = i4;

        i4 = i4 + -1;

        if $i19 == 0 goto label14;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        goto label13;

     label14:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("p-126");

        goto label20;

     label15:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("1.");

        i20 = 6;

     label16:
        if i2 == 0 goto label17;

        $i15 = i2 & 15;

        if $i15 != 0 goto label17;

        i2 = i2 >>> 4;

        i20 = i20 + -1;

        goto label16;

     label17:
        r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i2);

        if i2 == 0 goto label19;

        $i12 = virtualinvoke r16.<java.lang.String: int length()>();

        if i20 <= $i12 goto label19;

        $i14 = virtualinvoke r16.<java.lang.String: int length()>();

        i21 = i20 - $i14;

     label18:
        $i13 = i21;

        i21 = i21 + -1;

        if $i13 == 0 goto label19;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        goto label18;

     label19:
        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(112);

        $i11 = i1 - 127;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

     label20:
        $r8 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public volatile int compareTo(java.lang.Object)
    {
        java.lang.Float r0, $r2;
        java.lang.Object r1;
        int $i0;

        r0 := @this: java.lang.Float;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Float) r1;

        $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2);

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;

        <java.lang.Float: int SIZE> = 32;

        <java.lang.Float: int MIN_EXPONENT> = -126;

        <java.lang.Float: int MAX_EXPONENT> = 127;

        <java.lang.Float: float MIN_NORMAL> = 1.17549435E-38F;

        <java.lang.Float: float NEGATIVE_INFINITY> = #-InfinityF;

        <java.lang.Float: float POSITIVE_INFINITY> = #InfinityF;

        <java.lang.Float: float NaN> = #NaNF;

        <java.lang.Float: float MIN_VALUE> = 1.4E-45F;

        <java.lang.Float: float MAX_VALUE> = 3.4028235E38F;

        <java.lang.Float: long serialVersionUID> = -2671257302660747028L;

        <java.lang.Float: int MANTISSA_MASK> = 8388607;

        <java.lang.Float: int EXPONENT_MASK> = 2139095040;

        <java.lang.Float: int SIGN_MASK> = -2147483648;

        <java.lang.Float: int NON_MANTISSA_BITS> = 9;

        <java.lang.Float: int MANTISSA_BITS> = 23;

        <java.lang.Float: int EXPONENT_BITS> = 9;

        <java.lang.Float: int EXPONENT_BIAS> = 127;

        $r0 = class "[F";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Class getComponentType()>();

        <java.lang.Float: java.lang.Class TYPE> = $r1;

        return;
    }
}
