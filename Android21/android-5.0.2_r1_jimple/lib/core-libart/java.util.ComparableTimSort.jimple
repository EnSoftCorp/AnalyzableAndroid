class java.util.ComparableTimSort extends java.lang.Object
{
    private static final int MIN_MERGE;
    private final java.lang.Object[] a;
    private static final int MIN_GALLOP;
    private int minGallop;
    private static final int INITIAL_TMP_STORAGE_LENGTH;
    private java.lang.Object[] tmp;
    private int stackSize;
    private final int[] runBase;
    private final int[] runLen;
    private static final boolean DEBUG;

    private void <init>(java.lang.Object[])
    {
        java.util.ComparableTimSort r0;
        java.lang.Object[] r1, r2;
        int i0, $i3;
        byte b1, $b2;
        int[] $r3, $r4;

        r0 := @this: java.util.ComparableTimSort;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.ComparableTimSort: int minGallop> = 7;

        r0.<java.util.ComparableTimSort: int stackSize> = 0;

        r0.<java.util.ComparableTimSort: java.lang.Object[] a> = r1;

        i0 = lengthof r1;

        if i0 >= 512 goto label1;

        $i3 = i0 >>> 1;

        goto label2;

     label1:
        $i3 = 256;

     label2:
        r2 = newarray (java.lang.Object)[$i3];

        r0.<java.util.ComparableTimSort: java.lang.Object[] tmp> = r2;

        if i0 >= 120 goto label3;

        $b2 = 5;

        goto label6;

     label3:
        if i0 >= 1542 goto label4;

        $b2 = 10;

        goto label6;

     label4:
        if i0 >= 119151 goto label5;

        $b2 = 19;

        goto label6;

     label5:
        $b2 = 40;

     label6:
        b1 = $b2;

        $r3 = newarray (int)[b1];

        r0.<java.util.ComparableTimSort: int[] runBase> = $r3;

        $r4 = newarray (int)[b1];

        r0.<java.util.ComparableTimSort: int[] runLen> = $r4;

        return;
    }

    static void sort(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[],int,int)>(r0, 0, $i0);

        return;
    }

    static void sort(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11;
        java.util.ComparableTimSort $r1, r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i7, i0, i1);

        i2 = i1 - i0;

        if i2 >= 2 goto label1;

        return;

     label1:
        if i2 >= 32 goto label2;

        i3 = staticinvoke <java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>(r0, i0, i1);

        $i11 = i0 + i3;

        staticinvoke <java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>(r0, i0, i1, $i11);

        return;

     label2:
        $r1 = new java.util.ComparableTimSort;

        specialinvoke $r1.<java.util.ComparableTimSort: void <init>(java.lang.Object[])>(r0);

        r2 = $r1;

        i4 = staticinvoke <java.util.ComparableTimSort: int minRunLength(int)>(i2);

     label3:
        i5 = staticinvoke <java.util.ComparableTimSort: int countRunAndMakeAscending(java.lang.Object[],int,int)>(r0, i0, i1);

        if i5 >= i4 goto label6;

        if i2 > i4 goto label4;

        $i10 = i2;

        goto label5;

     label4:
        $i10 = i4;

     label5:
        i6 = $i10;

        $i9 = i0 + i6;

        $i8 = i0 + i5;

        staticinvoke <java.util.ComparableTimSort: void binarySort(java.lang.Object[],int,int,int)>(r0, i0, $i9, $i8);

        i5 = i6;

     label6:
        specialinvoke r2.<java.util.ComparableTimSort: void pushRun(int,int)>(i0, i5);

        specialinvoke r2.<java.util.ComparableTimSort: void mergeCollapse()>();

        i0 = i0 + i5;

        i2 = i2 - i5;

        if i2 != 0 goto label3;

        specialinvoke r2.<java.util.ComparableTimSort: void mergeForceCollapse()>();

        return;
    }

    private static void binarySort(java.lang.Object[], int, int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        java.lang.Comparable r1;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i2 != i0 goto label01;

        i2 = i2 + 1;

     label01:
        if i2 >= i1 goto label10;

        $r2 = r0[i2];

        r1 = (java.lang.Comparable) $r2;

        i3 = i0;

        i4 = i2;

     label02:
        if i3 >= i4 goto label05;

        $i10 = i3 + i4;

        i5 = $i10 >>> 1;

        $r5 = r0[i5];

        $i11 = interfaceinvoke r1.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i11 >= 0 goto label03;

        i4 = i5;

        goto label04;

     label03:
        i3 = i5 + 1;

     label04:
        goto label02;

     label05:
        i12 = i2 - i3;

        lookupswitch(i12)
        {
            case 1: goto label07;
            case 2: goto label06;
            default: goto label08;
        };

     label06:
        $i7 = i3 + 2;

        $i6 = i3 + 1;

        $r3 = r0[$i6];

        r0[$i7] = $r3;

     label07:
        $i8 = i3 + 1;

        $r4 = r0[i3];

        r0[$i8] = $r4;

        goto label09;

     label08:
        $i9 = i3 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i3, r0, $i9, i12);

     label09:
        r0[i3] = r1;

        i2 = i2 + 1;

        goto label01;

     label10:
        return;
    }

    private static int countRunAndMakeAscending(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.lang.Object $r1, $r2, $r4, $r5, $r7, $r8;
        java.lang.Comparable $r3, $r6, $r9;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + 1;

        if i2 != i1 goto label1;

        return 1;

     label1:
        i9 = i2 + 1;

        $r1 = r0[i2];

        $r3 = (java.lang.Comparable) $r1;

        $r2 = r0[i0];

        $i3 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i3 >= 0 goto label4;

     label2:
        if i9 >= i1 goto label3;

        $r7 = r0[i9];

        $r9 = (java.lang.Comparable) $r7;

        $i7 = i9 - 1;

        $r8 = r0[$i7];

        $i8 = interfaceinvoke $r9.<java.lang.Comparable: int compareTo(java.lang.Object)>($r8);

        if $i8 >= 0 goto label3;

        i9 = i9 + 1;

        goto label2;

     label3:
        staticinvoke <java.util.ComparableTimSort: void reverseRange(java.lang.Object[],int,int)>(r0, i0, i9);

        goto label5;

     label4:
        if i9 >= i1 goto label5;

        $r4 = r0[i9];

        $r6 = (java.lang.Comparable) $r4;

        $i5 = i9 - 1;

        $r5 = r0[$i5];

        $i6 = interfaceinvoke $r6.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i6 < 0 goto label5;

        i9 = i9 + 1;

        goto label4;

     label5:
        $i4 = i9 - i0;

        return $i4;
    }

    private static void reverseRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3, i4;
        java.lang.Object r1, $r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i4 = i1 + -1;

     label1:
        if i0 >= i4 goto label2;

        r1 = r0[i0];

        $i2 = i0;

        i0 = i0 + 1;

        $r2 = r0[i4];

        r0[$i2] = $r2;

        $i3 = i4;

        i4 = i4 + -1;

        r0[$i3] = r1;

        goto label1;

     label2:
        return;
    }

    private static int minRunLength(int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 = 0;

     label1:
        if i0 < 32 goto label2;

        $i3 = i0 & 1;

        i1 = i1 | $i3;

        i0 = i0 >> 1;

        goto label1;

     label2:
        $i2 = i0 + i1;

        return $i2;
    }

    private void pushRun(int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2;

        r0 := @this: java.util.ComparableTimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<java.util.ComparableTimSort: int[] runBase>;

        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;

        $r1[$i2] = i0;

        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i3 = r0.<java.util.ComparableTimSort: int stackSize>;

        $r2[$i3] = i1;

        $i4 = r0.<java.util.ComparableTimSort: int stackSize>;

        $i5 = $i4 + 1;

        r0.<java.util.ComparableTimSort: int stackSize> = $i5;

        return;
    }

    private void mergeCollapse()
    {
        java.util.ComparableTimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: java.util.ComparableTimSort;

     label1:
        $i1 = r0.<java.util.ComparableTimSort: int stackSize>;

        if $i1 <= 1 goto label5;

        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;

        i0 = $i2 - 2;

        if i0 <= 0 goto label3;

        $r3 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i6 = i0 - 1;

        $i10 = $r3[$i6];

        $r4 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i9 = $r4[i0];

        $r5 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i7 = i0 + 1;

        $i8 = $r5[$i7];

        $i11 = $i9 + $i8;

        if $i10 > $i11 goto label3;

        $r6 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i12 = i0 - 1;

        $i14 = $r6[$i12];

        $r7 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i13 = i0 + 1;

        $i15 = $r7[$i13];

        if $i14 >= $i15 goto label2;

        i0 = i0 + -1;

     label2:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);

        goto label4;

     label3:
        $r1 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i5 = $r1[i0];

        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i3 = i0 + 1;

        $i4 = $r2[$i3];

        if $i5 > $i4 goto label5;

        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);

     label4:
        goto label1;

     label5:
        return;
    }

    private void mergeForceCollapse()
    {
        java.util.ComparableTimSort r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        r0 := @this: java.util.ComparableTimSort;

     label1:
        $i1 = r0.<java.util.ComparableTimSort: int stackSize>;

        if $i1 <= 1 goto label3;

        $i2 = r0.<java.util.ComparableTimSort: int stackSize>;

        i0 = $i2 - 2;

        if i0 <= 0 goto label2;

        $r1 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i3 = i0 - 1;

        $i6 = $r1[$i3];

        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i4 = i0 + 1;

        $i5 = $r2[$i4];

        if $i6 >= $i5 goto label2;

        i0 = i0 + -1;

     label2:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeAt(int)>(i0);

        goto label1;

     label3:
        return;
    }

    private void mergeAt(int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24;
        int[] $r1, $r2, $r3, $r4, $r5, $r14, $r15, $r16, $r17;
        java.lang.Object[] $r6, $r7, $r11, $r12;
        java.lang.Object $r8, $r10;
        java.lang.Comparable $r9, $r13;

        r0 := @this: java.util.ComparableTimSort;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.ComparableTimSort: int[] runBase>;

        i1 = $r1[i0];

        $r2 = r0.<java.util.ComparableTimSort: int[] runLen>;

        i2 = $r2[i0];

        $r3 = r0.<java.util.ComparableTimSort: int[] runBase>;

        $i6 = i0 + 1;

        i3 = $r3[$i6];

        $r4 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i7 = i0 + 1;

        i4 = $r4[$i7];

        $r5 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i8 = i2 + i4;

        $r5[i0] = $i8;

        $i9 = r0.<java.util.ComparableTimSort: int stackSize>;

        $i11 = $i9 - 3;

        if i0 != $i11 goto label1;

        $r16 = r0.<java.util.ComparableTimSort: int[] runBase>;

        $i17 = i0 + 1;

        $r14 = r0.<java.util.ComparableTimSort: int[] runBase>;

        $i18 = i0 + 2;

        $i16 = $r14[$i18];

        $r16[$i17] = $i16;

        $r17 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i21 = i0 + 1;

        $r15 = r0.<java.util.ComparableTimSort: int[] runLen>;

        $i20 = i0 + 2;

        $i19 = $r15[$i20];

        $r17[$i21] = $i19;

     label1:
        $i10 = r0.<java.util.ComparableTimSort: int stackSize>;

        $i12 = $i10 - 1;

        r0.<java.util.ComparableTimSort: int stackSize> = $i12;

        $r6 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        $r8 = $r6[i3];

        $r9 = (java.lang.Comparable) $r8;

        $r7 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        i5 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r9, $r7, i1, i2, 0);

        i22 = i1 + i5;

        i23 = i2 - i5;

        if i23 != 0 goto label2;

        return;

     label2:
        $r11 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        $i14 = i22 + i23;

        $i13 = $i14 - 1;

        $r10 = $r11[$i13];

        $r13 = (java.lang.Comparable) $r10;

        $r12 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        $i15 = i4 - 1;

        i24 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r13, $r12, i3, i4, $i15);

        if i24 != 0 goto label3;

        return;

     label3:
        if i23 > i24 goto label4;

        specialinvoke r0.<java.util.ComparableTimSort: void mergeLo(int,int,int,int)>(i22, i23, i3, i24);

        goto label5;

     label4:
        specialinvoke r0.<java.util.ComparableTimSort: void mergeHi(int,int,int,int)>(i22, i23, i3, i24);

     label5:
        return;
    }

    private static int gallopLeft(java.lang.Comparable, java.lang.Object[], int, int, int)
    {
        java.lang.Comparable r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 = 0;

        i4 = 1;

        $i7 = i0 + i2;

        $r2 = r1[$i7];

        $i8 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i8 <= 0 goto label04;

        i5 = i1 - i2;

     label01:
        if i4 >= i5 goto label02;

        $i18 = i0 + i2;

        $i17 = $i18 + i4;

        $r5 = r1[$i17];

        $i19 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i19 <= 0 goto label02;

        i3 = i4;

        $i20 = i4 << 1;

        i4 = $i20 + 1;

        if i4 > 0 goto label01;

        i4 = i5;

        goto label01;

     label02:
        if i4 <= i5 goto label03;

        i4 = i5;

     label03:
        i21 = i3 + i2;

        i22 = i4 + i2;

        goto label08;

     label04:
        i23 = i2 + 1;

     label05:
        if i4 >= i23 goto label06;

        $i12 = i0 + i2;

        $i14 = $i12 - i4;

        $r4 = r1[$i14];

        $i16 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        if $i16 > 0 goto label06;

        i3 = i4;

        $i15 = i4 << 1;

        i4 = $i15 + 1;

        if i4 > 0 goto label05;

        i4 = i23;

        goto label05;

     label06:
        if i4 <= i23 goto label07;

        i4 = i23;

     label07:
        i6 = i3;

        i21 = i2 - i4;

        i22 = i2 - i6;

     label08:
        i24 = i21 + 1;

     label09:
        if i24 >= i22 goto label12;

        $i9 = i22 - i24;

        $i10 = $i9 >>> 1;

        i25 = i24 + $i10;

        $i11 = i0 + i25;

        $r3 = r1[$i11];

        $i13 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i13 <= 0 goto label10;

        i24 = i25 + 1;

        goto label11;

     label10:
        i22 = i25;

     label11:
        goto label09;

     label12:
        return i22;
    }

    private static int gallopRight(java.lang.Comparable, java.lang.Object[], int, int, int)
    {
        java.lang.Comparable r0;
        java.lang.Object[] r1;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        java.lang.Object $r2, $r3, $r4, $r5;

        r0 := @parameter0: java.lang.Comparable;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 = 1;

        i4 = 0;

        $i7 = i0 + i2;

        $r2 = r1[$i7];

        $i8 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r2);

        if $i8 >= 0 goto label04;

        i5 = i2 + 1;

     label01:
        if i3 >= i5 goto label02;

        $i18 = i0 + i2;

        $i17 = $i18 - i3;

        $r5 = r1[$i17];

        $i19 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r5);

        if $i19 >= 0 goto label02;

        i4 = i3;

        $i20 = i3 << 1;

        i3 = $i20 + 1;

        if i3 > 0 goto label01;

        i3 = i5;

        goto label01;

     label02:
        if i3 <= i5 goto label03;

        i3 = i5;

     label03:
        i6 = i4;

        i21 = i2 - i3;

        i22 = i2 - i6;

        goto label08;

     label04:
        i23 = i1 - i2;

     label05:
        if i3 >= i23 goto label06;

        $i12 = i0 + i2;

        $i14 = $i12 + i3;

        $r4 = r1[$i14];

        $i16 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4);

        if $i16 < 0 goto label06;

        i4 = i3;

        $i15 = i3 << 1;

        i3 = $i15 + 1;

        if i3 > 0 goto label05;

        i3 = i23;

        goto label05;

     label06:
        if i3 <= i23 goto label07;

        i3 = i23;

     label07:
        i21 = i4 + i2;

        i22 = i3 + i2;

     label08:
        i24 = i21 + 1;

     label09:
        if i24 >= i22 goto label12;

        $i9 = i22 - i24;

        $i10 = $i9 >>> 1;

        i25 = i24 + $i10;

        $i11 = i0 + i25;

        $r3 = r1[$i11];

        $i13 = interfaceinvoke r0.<java.lang.Comparable: int compareTo(java.lang.Object)>($r3);

        if $i13 >= 0 goto label10;

        i22 = i25;

        goto label11;

     label10:
        i24 = i25 + 1;

     label11:
        goto label09;

     label12:
        return i22;
    }

    private void mergeLo(int, int, int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i27;
        java.lang.Object[] r1, r2;
        java.lang.Object $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r13, $r15, $r16, $r17;
        java.lang.Comparable $r5, $r9, $r12;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: java.util.ComparableTimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        r2 = specialinvoke r0.<java.util.ComparableTimSort: java.lang.Object[] ensureCapacity(int)>(i1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, r2, 0, i1);

        i4 = 0;

        i5 = i2;

        i6 = i0;

        i23 = i6 + 1;

        i24 = i5 + 1;

        $r4 = r1[i5];

        r1[i6] = $r4;

        i25 = i3 + -1;

        if i25 != 0 goto label01;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i23, i1);

        return;

     label01:
        if i1 != 1 goto label02;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i24, r1, i23, i25);

        $i22 = i23 + i25;

        $r17 = r2[i4];

        r1[$i22] = $r17;

        return;

     label02:
        i7 = r0.<java.util.ComparableTimSort: int minGallop>;

     label03:
        i8 = 0;

        i9 = 0;

     label04:
        $r3 = r1[i24];

        $r5 = (java.lang.Comparable) $r3;

        $r6 = r2[i4];

        $i11 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r6);

        if $i11 >= 0 goto label05;

        $i20 = i23;

        i23 = i23 + 1;

        $i21 = i24;

        i24 = i24 + 1;

        $r16 = r1[$i21];

        r1[$i20] = $r16;

        i9 = i9 + 1;

        i8 = 0;

        i25 = i25 + -1;

        if i25 != 0 goto label06;

        goto label17;

     label05:
        $i10 = i23;

        i23 = i23 + 1;

        $i12 = i4;

        i4 = i4 + 1;

        $r7 = r2[$i12];

        r1[$i10] = $r7;

        i8 = i8 + 1;

        i9 = 0;

        i1 = i1 + -1;

        if i1 != 1 goto label06;

        goto label17;

     label06:
        $i13 = i8 | i9;

        if $i13 < i7 goto label04;

     label07:
        $r8 = r1[i24];

        $r9 = (java.lang.Comparable) $r8;

        i26 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r9, r2, i4, i1, 0);

        if i26 == 0 goto label08;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i23, i26);

        i23 = i23 + i26;

        i4 = i4 + i26;

        i1 = i1 - i26;

        if i1 > 1 goto label08;

        goto label17;

     label08:
        $i15 = i23;

        i23 = i23 + 1;

        $i14 = i24;

        i24 = i24 + 1;

        $r11 = r1[$i14];

        r1[$i15] = $r11;

        i25 = i25 + -1;

        if i25 != 0 goto label09;

        goto label17;

     label09:
        $r10 = r2[i4];

        $r12 = (java.lang.Comparable) $r10;

        i27 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r12, r1, i24, i25, 0);

        if i27 == 0 goto label10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i24, r1, i23, i27);

        i23 = i23 + i27;

        i24 = i24 + i27;

        i25 = i25 - i27;

        if i25 != 0 goto label10;

        goto label17;

     label10:
        $i16 = i23;

        i23 = i23 + 1;

        $i17 = i4;

        i4 = i4 + 1;

        $r13 = r2[$i17];

        r1[$i16] = $r13;

        i1 = i1 + -1;

        if i1 != 1 goto label11;

        goto label17;

     label11:
        i7 = i7 + -1;

        if i26 < 7 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        if i27 < 7 goto label14;

        $z0 = 1;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        $z2 = $z1 | $z0;

        if $z2 != 0 goto label07;

        if i7 >= 0 goto label16;

        i7 = 0;

     label16:
        i7 = i7 + 2;

        goto label03;

     label17:
        if i7 >= 1 goto label18;

        $i19 = 1;

        goto label19;

     label18:
        $i19 = i7;

     label19:
        r0.<java.util.ComparableTimSort: int minGallop> = $i19;

        if i1 != 1 goto label20;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i24, r1, i23, i25);

        $i18 = i23 + i25;

        $r15 = r2[i4];

        r1[$i18] = $r15;

        goto label22;

     label20:
        if i1 != 0 goto label21;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");

        throw $r14;

     label21:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i4, r1, i23, i1);

     label22:
        return;
    }

    private void mergeHi(int, int, int, int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, i41, i42, i43, i44, i45, i46, i47;
        java.lang.Object[] r1, r2;
        java.lang.Object $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r13, $r15, $r16, $r17;
        java.lang.Comparable $r5, $r9, $r12;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: java.util.ComparableTimSort;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        r2 = specialinvoke r0.<java.util.ComparableTimSort: java.lang.Object[] ensureCapacity(int)>(i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r2, 0, i3);

        $i10 = i0 + i1;

        i4 = $i10 - 1;

        i5 = i3 - 1;

        $i11 = i2 + i3;

        i6 = $i11 - 1;

        i39 = i6 + -1;

        i40 = i4 + -1;

        $r4 = r1[i4];

        r1[i6] = $r4;

        i41 = i1 + -1;

        if i41 != 0 goto label01;

        $i38 = i3 - 1;

        $i37 = i39 - $i38;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i37, i3);

        return;

     label01:
        if i3 != 1 goto label02;

        i42 = i39 - i41;

        i43 = i40 - i41;

        $i34 = i43 + 1;

        $i35 = i42 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i34, r1, $i35, i41);

        $r17 = r2[i5];

        r1[i42] = $r17;

        return;

     label02:
        i7 = r0.<java.util.ComparableTimSort: int minGallop>;

     label03:
        i8 = 0;

        i9 = 0;

     label04:
        $r3 = r2[i5];

        $r5 = (java.lang.Comparable) $r3;

        $r6 = r1[i40];

        $i13 = interfaceinvoke $r5.<java.lang.Comparable: int compareTo(java.lang.Object)>($r6);

        if $i13 >= 0 goto label05;

        $i30 = i39;

        i39 = i39 + -1;

        $i36 = i40;

        i40 = i40 + -1;

        $r16 = r1[$i36];

        r1[$i30] = $r16;

        i8 = i8 + 1;

        i9 = 0;

        i41 = i41 + -1;

        if i41 != 0 goto label06;

        goto label17;

     label05:
        $i12 = i39;

        i39 = i39 + -1;

        $i14 = i5;

        i5 = i5 + -1;

        $r7 = r2[$i14];

        r1[$i12] = $r7;

        i9 = i9 + 1;

        i8 = 0;

        i3 = i3 + -1;

        if i3 != 1 goto label06;

        goto label17;

     label06:
        $i15 = i8 | i9;

        if $i15 < i7 goto label04;

     label07:
        $r8 = r2[i5];

        $r9 = (java.lang.Comparable) $r8;

        $i16 = i41 - 1;

        $i18 = staticinvoke <java.util.ComparableTimSort: int gallopRight(java.lang.Comparable,java.lang.Object[],int,int,int)>($r9, r1, i0, i41, $i16);

        i44 = i41 - $i18;

        if i44 == 0 goto label08;

        i39 = i39 - i44;

        i40 = i40 - i44;

        i41 = i41 - i44;

        $i31 = i40 + 1;

        $i32 = i39 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i31, r1, $i32, i44);

        if i41 != 0 goto label08;

        goto label17;

     label08:
        $i17 = i39;

        i39 = i39 + -1;

        $i20 = i5;

        i5 = i5 + -1;

        $r11 = r2[$i20];

        r1[$i17] = $r11;

        i3 = i3 + -1;

        if i3 != 1 goto label09;

        goto label17;

     label09:
        $r10 = r1[i40];

        $r12 = (java.lang.Comparable) $r10;

        $i19 = i3 - 1;

        $i23 = staticinvoke <java.util.ComparableTimSort: int gallopLeft(java.lang.Comparable,java.lang.Object[],int,int,int)>($r12, r2, 0, i3, $i19);

        i45 = i3 - $i23;

        if i45 == 0 goto label10;

        i39 = i39 - i45;

        i5 = i5 - i45;

        i3 = i3 - i45;

        $i33 = i5 + 1;

        $i27 = i39 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i33, r1, $i27, i45);

        if i3 > 1 goto label10;

        goto label17;

     label10:
        $i21 = i39;

        i39 = i39 + -1;

        $i22 = i40;

        i40 = i40 + -1;

        $r13 = r1[$i22];

        r1[$i21] = $r13;

        i41 = i41 + -1;

        if i41 != 0 goto label11;

        goto label17;

     label11:
        i7 = i7 + -1;

        if i44 < 7 goto label12;

        $z1 = 1;

        goto label13;

     label12:
        $z1 = 0;

     label13:
        if i45 < 7 goto label14;

        $z0 = 1;

        goto label15;

     label14:
        $z0 = 0;

     label15:
        $z2 = $z1 | $z0;

        if $z2 != 0 goto label07;

        if i7 >= 0 goto label16;

        i7 = 0;

     label16:
        i7 = i7 + 2;

        goto label03;

     label17:
        if i7 >= 1 goto label18;

        $i28 = 1;

        goto label19;

     label18:
        $i28 = i7;

     label19:
        r0.<java.util.ComparableTimSort: int minGallop> = $i28;

        if i3 != 1 goto label20;

        i46 = i39 - i41;

        i47 = i40 - i41;

        $i29 = i47 + 1;

        $i24 = i46 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i29, r1, $i24, i41);

        $r15 = r2[i5];

        r1[i46] = $r15;

        goto label22;

     label20:
        if i3 != 0 goto label21;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Comparison method violates its general contract!");

        throw $r14;

     label21:
        $i25 = i3 - 1;

        $i26 = i39 - $i25;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, $i26, i3);

     label22:
        return;
    }

    private java.lang.Object[] ensureCapacity(int)
    {
        java.util.ComparableTimSort r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, i15, i16;
        java.lang.Object[] r1, $r2, $r3, $r4;

        r0 := @this: java.util.ComparableTimSort;

        i0 := @parameter0: int;

        $r2 = r0.<java.util.ComparableTimSort: java.lang.Object[] tmp>;

        $i2 = lengthof $r2;

        if $i2 >= i0 goto label3;

        i1 = i0;

        $i3 = i1 >> 1;

        i10 = i1 | $i3;

        $i4 = i10 >> 2;

        i11 = i10 | $i4;

        $i5 = i11 >> 4;

        i12 = i11 | $i5;

        $i6 = i12 >> 8;

        i13 = i12 | $i6;

        $i7 = i13 >> 16;

        i14 = i13 | $i7;

        i15 = i14 + 1;

        if i15 >= 0 goto label1;

        i16 = i0;

        goto label2;

     label1:
        $r4 = r0.<java.util.ComparableTimSort: java.lang.Object[] a>;

        $i8 = lengthof $r4;

        $i9 = $i8 >>> 1;

        i16 = staticinvoke <java.lang.Math: int min(int,int)>(i15, $i9);

     label2:
        r1 = newarray (java.lang.Object)[i16];

        r0.<java.util.ComparableTimSort: java.lang.Object[] tmp> = r1;

     label3:
        $r3 = r0.<java.util.ComparableTimSort: java.lang.Object[] tmp>;

        return $r3;
    }

    public static void <clinit>()
    {
        <java.util.ComparableTimSort: boolean DEBUG> = 0;

        <java.util.ComparableTimSort: int INITIAL_TMP_STORAGE_LENGTH> = 256;

        <java.util.ComparableTimSort: int MIN_GALLOP> = 7;

        <java.util.ComparableTimSort: int MIN_MERGE> = 32;

        return;
    }
}
