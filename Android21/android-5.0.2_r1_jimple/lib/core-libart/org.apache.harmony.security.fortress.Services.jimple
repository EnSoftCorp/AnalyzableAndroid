public class org.apache.harmony.security.fortress.Services extends java.lang.Object
{
    private static final java.util.HashMap services;
    private static java.security.Provider$Service cachedSecureRandomService;
    private static boolean needRefresh;
    private static int cacheVersion;
    private static final java.util.ArrayList providers;
    private static final java.util.HashMap providersNames;

    public void <init>()
    {
        org.apache.harmony.security.fortress.Services r0;

        r0 := @this: org.apache.harmony.security.fortress.Services;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static synchronized java.util.ArrayList getProviders()
    {
        java.util.ArrayList $r0;

        $r0 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        return $r0;
    }

    public static synchronized java.security.Provider getProvider(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.security.Provider $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = <org.apache.harmony.security.fortress.Services: java.util.HashMap providersNames>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.security.Provider) $r2;

        return $r3;
    }

    public static synchronized int insertProviderAt(java.security.Provider, int)
    {
        java.security.Provider r0;
        int i0, i1, $i2;
        java.util.ArrayList $r1, $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.security.Provider;

        i0 := @parameter1: int;

        $r1 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i0 < 1 goto label1;

        if i0 <= i1 goto label2;

     label1:
        i0 = i1 + 1;

     label2:
        $r2 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        $i2 = i0 - 1;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, r0);

        $r3 = <org.apache.harmony.security.fortress.Services: java.util.HashMap providersNames>;

        $r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r0);

        staticinvoke <org.apache.harmony.security.fortress.Services: void setNeedRefresh()>();

        return i0;
    }

    public static synchronized void removeProvider(int)
    {
        int i0, $i1;
        java.security.Provider r0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;
        java.lang.String $r4;

        i0 := @parameter0: int;

        $r1 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        $i1 = i0 - 1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        r0 = (java.security.Provider) $r2;

        $r3 = <org.apache.harmony.security.fortress.Services: java.util.HashMap providersNames>;

        $r4 = virtualinvoke r0.<java.security.Provider: java.lang.String getName()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        staticinvoke <org.apache.harmony.security.fortress.Services: void setNeedRefresh()>();

        return;
    }

    public static synchronized void initServiceInfo(java.security.Provider)
    {
        java.security.Provider r0;
        java.util.Iterator r1, r5;
        java.security.Provider$Service r2, $r9;
        java.lang.String r3, r4, r6, $r14, $r16, $r25, r26;
        java.util.Set $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8, $r19;
        java.lang.StringBuilder $r10, $r11, $r12, $r15, $r20, $r21, $r23, $r24;
        java.util.Locale $r13, $r22;
        org.apache.harmony.security.fortress.SecurityAccess $r17;
        java.util.List $r18;

        r0 := @parameter0: java.security.Provider;

        $r7 = virtualinvoke r0.<java.security.Provider: java.util.Set getServices()>();

        r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.security.Provider$Service) $r8;

        r3 = virtualinvoke r2.<java.security.Provider$Service: java.lang.String getType()>();

        $r9 = <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService>;

        if $r9 != null goto label2;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("SecureRandom");

        if $z2 == 0 goto label2;

        <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService> = r2;

     label2:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r14 = virtualinvoke r2.<java.security.Provider$Service: java.lang.String getAlgorithm()>();

        $r13 = <java.util.Locale: java.util.Locale US>;

        $r16 = virtualinvoke $r14.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.harmony.security.fortress.Services: void appendServiceLocked(java.lang.String,java.security.Provider$Service)>(r4, r2);

        $r17 = <org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.SecurityAccess door>;

        $r18 = interfaceinvoke $r17.<org.apache.harmony.security.fortress.SecurityAccess: java.util.List getAliases(java.security.Provider$Service)>(r2);

        r5 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r19;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r22 = <java.util.Locale: java.util.Locale US>;

        $r25 = virtualinvoke r6.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.harmony.security.fortress.Services: void appendServiceLocked(java.lang.String,java.security.Provider$Service)>(r26, r2);

        goto label3;

     label4:
        goto label1;

     label5:
        return;
    }

    private static void appendServiceLocked(java.lang.String, java.security.Provider$Service)
    {
        java.lang.String r0;
        java.security.Provider$Service r1;
        java.util.ArrayList r2, $r5;
        java.util.HashMap $r3, $r6;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider$Service;

        $r3 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (java.util.ArrayList) $r4;

        if r2 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(1);

        r2 = $r5;

        $r6 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label1:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public static synchronized boolean isEmpty()
    {
        java.util.HashMap $r0;
        boolean $z0;

        $r0 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        $z0 = virtualinvoke $r0.<java.util.HashMap: boolean isEmpty()>();

        return $z0;
    }

    public static synchronized java.util.ArrayList getServices(java.lang.String)
    {
        java.lang.String r0;
        java.util.HashMap $r1;
        java.lang.Object $r2;
        java.util.ArrayList $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.util.ArrayList) $r2;

        return $r3;
    }

    public static synchronized java.security.Provider$Service getSecureRandomService()
    {
        java.security.Provider$Service $r0;

        staticinvoke <org.apache.harmony.security.fortress.Services: int getCacheVersion()>();

        $r0 = <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService>;

        return $r0;
    }

    public static synchronized void setNeedRefresh()
    {
        <org.apache.harmony.security.fortress.Services: boolean needRefresh> = 1;

        return;
    }

    public static synchronized int getCacheVersion()
    {
        java.util.HashMap r0, $r2, $r3;
        java.lang.Throwable r1, $r6;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        java.util.Iterator r7;
        java.security.Provider r8;

        $z0 = <org.apache.harmony.security.fortress.Services: boolean needRefresh>;

        if $z0 == 0 goto label8;

        $i1 = <org.apache.harmony.security.fortress.Services: int cacheVersion>;

        $i2 = $i1 + 1;

        <org.apache.harmony.security.fortress.Services: int cacheVersion> = $i2;

        $r2 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        r0 = $r2;

        entermonitor $r2;

     label1:
        $r3 = <org.apache.harmony.security.fortress.Services: java.util.HashMap services>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        exitmonitor r0;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        exitmonitor r0;

     label4:
        throw r1;

     label5:
        <org.apache.harmony.security.fortress.Services: java.security.Provider$Service cachedSecureRandomService> = null;

        $r4 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        r7 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.security.Provider) $r5;

        staticinvoke <org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>(r8);

        goto label6;

     label7:
        <org.apache.harmony.security.fortress.Services: boolean needRefresh> = 0;

     label8:
        $i0 = <org.apache.harmony.security.fortress.Services: int cacheVersion>;

        return $i0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        int i0, $i1;
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        java.security.Provider r2;
        java.util.HashMap $r3, $r5, $r15;
        java.util.ArrayList $r4, $r13;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9, $r10, $r12, $r16, r20;
        org.apache.harmony.security.fortress.SecurityAccess $r11;
        java.lang.Object $r14;
        java.lang.InstantiationException $r17;
        java.lang.IllegalAccessException $r18;
        java.lang.ClassNotFoundException $r19;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(600);

        <org.apache.harmony.security.fortress.Services: java.util.HashMap services> = $r3;

        <org.apache.harmony.security.fortress.Services: int cacheVersion> = 1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(20);

        <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>(int)>(20);

        <org.apache.harmony.security.fortress.Services: java.util.HashMap providersNames> = $r5;

        i0 = 1;

        r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("security.provider.");

        $i1 = i0;

        i0 = i0 + 1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>($r9);

        r20 = $r10;

        if $r10 == null goto label7;

     label2:
        $r12 = virtualinvoke r20.<java.lang.String: java.lang.String trim()>();

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r12, 1, r0);

        $r14 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        r2 = (java.security.Provider) $r14;

        $r13 = <org.apache.harmony.security.fortress.Services: java.util.ArrayList providers>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r15 = <org.apache.harmony.security.fortress.Services: java.util.HashMap providersNames>;

        $r16 = virtualinvoke r2.<java.security.Provider: java.lang.String getName()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2);

        staticinvoke <org.apache.harmony.security.fortress.Services: void initServiceInfo(java.security.Provider)>(r2);

     label3:
        goto label1;

     label4:
        $r19 := @caughtexception;

        goto label1;

     label5:
        $r18 := @caughtexception;

        goto label1;

     label6:
        $r17 := @caughtexception;

        goto label1;

     label7:
        $r11 = <org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.SecurityAccess door>;

        interfaceinvoke $r11.<org.apache.harmony.security.fortress.SecurityAccess: void renumProviders()>();

        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
        catch java.lang.InstantiationException from label2 to label3 with label6;
    }
}
