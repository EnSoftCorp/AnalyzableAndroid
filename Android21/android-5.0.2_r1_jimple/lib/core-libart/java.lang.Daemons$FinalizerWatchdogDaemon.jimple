class java.lang.Daemons$FinalizerWatchdogDaemon extends java.lang.Daemons$Daemon
{
    private static final java.lang.Daemons$FinalizerWatchdogDaemon INSTANCE;

    private void <init>()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon r0;

        r0 := @this: java.lang.Daemons$FinalizerWatchdogDaemon;

        specialinvoke r0.<java.lang.Daemons$Daemon: void <init>(java.lang.Daemons$1)>(null);

        return;
    }

    public void run()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon r0;
        boolean z0, z1, $z2, $z3;
        java.lang.Object r1;
        dalvik.system.VMRuntime $r2;
        java.lang.Daemons$FinalizerDaemon $r3;

        r0 := @this: java.lang.Daemons$FinalizerWatchdogDaemon;

     label1:
        $z2 = virtualinvoke r0.<java.lang.Daemons$FinalizerWatchdogDaemon: boolean isRunning()>();

        if $z2 == 0 goto label4;

        z0 = specialinvoke r0.<java.lang.Daemons$FinalizerWatchdogDaemon: boolean waitForObject()>();

        if z0 != 0 goto label2;

        goto label1;

     label2:
        z1 = specialinvoke r0.<java.lang.Daemons$FinalizerWatchdogDaemon: boolean waitForFinalization()>();

        if z1 != 0 goto label3;

        $r2 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        $z3 = virtualinvoke $r2.<dalvik.system.VMRuntime: boolean isDebuggerActive()>();

        if $z3 != 0 goto label3;

        $r3 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        r1 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Object access$600(java.lang.Daemons$FinalizerDaemon)>($r3);

        if r1 == null goto label3;

        staticinvoke <java.lang.Daemons$FinalizerWatchdogDaemon: void finalizerTimedOut(java.lang.Object)>(r1);

        goto label4;

     label3:
        goto label1;

     label4:
        return;
    }

    private boolean waitForObject()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon r0, r2;
        java.lang.Object r1;
        java.lang.Throwable r4, $r8;
        java.lang.Daemons$FinalizerDaemon $r5;
        java.lang.InterruptedException $r7;

        r0 := @this: java.lang.Daemons$FinalizerWatchdogDaemon;

     label01:
        $r5 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        r1 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Object access$600(java.lang.Daemons$FinalizerDaemon)>($r5);

        if r1 == null goto label02;

        return 1;

     label02:
        r2 = r0;

        entermonitor r0;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

        exitmonitor r2;

     label06:
        return 0;

     label07:
        exitmonitor r2;

     label08:
        goto label11;

     label09:
        $r8 := @caughtexception;

        r4 = $r8;

        exitmonitor r2;

     label10:
        throw r4;

     label11:
        goto label01;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private void sleepFor(long, long)
    {
        java.lang.Daemons$FinalizerWatchdogDaemon r0;
        long l0, l1, l2, l3, l4, $l5;
        byte $b6;
        java.lang.InterruptedException $r2;
        boolean $z0;

        r0 := @this: java.lang.Daemons$FinalizerWatchdogDaemon;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

     label1:
        $l5 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l5 - l0;

        l3 = l1 - l2;

        l4 = l3 / 1000000L;

        $b6 = l4 cmp 0L;

        if $b6 > 0 goto label2;

        return;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(l4);

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        $z0 = virtualinvoke r0.<java.lang.Daemons$FinalizerWatchdogDaemon: boolean isRunning()>();

        if $z0 != 0 goto label5;

        return;

     label5:
        goto label1;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    private boolean waitForFinalization()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon r0;
        long l0, $l1;
        java.lang.Daemons$FinalizerDaemon $r1, $r2, $r4;
        java.lang.Object $r3;
        byte $b2;
        boolean $z0;

        r0 := @this: java.lang.Daemons$FinalizerWatchdogDaemon;

        $r1 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        l0 = staticinvoke <java.lang.Daemons$FinalizerDaemon: long access$700(java.lang.Daemons$FinalizerDaemon)>($r1);

        specialinvoke r0.<java.lang.Daemons$FinalizerWatchdogDaemon: void sleepFor(long,long)>(l0, 10000000000L);

        $r2 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        $r3 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Object access$600(java.lang.Daemons$FinalizerDaemon)>($r2);

        if $r3 == null goto label1;

        $r4 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        $l1 = staticinvoke <java.lang.Daemons$FinalizerDaemon: long access$700(java.lang.Daemons$FinalizerDaemon)>($r4);

        $b2 = $l1 cmp l0;

        if $b2 == 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static void finalizerTimedOut(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r1, $r6;
        java.util.concurrent.TimeoutException r2, $r11;
        java.lang.Thread$UncaughtExceptionHandler r3;
        java.lang.StringBuilder $r4, $r7, $r8, $r9, $r10;
        java.lang.Class $r5;
        java.lang.Daemons$FinalizerDaemon $r12;
        java.lang.StackTraceElement[] $r13;
        java.lang.Thread $r14;

        r0 := @parameter0: java.lang.Object;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".finalize() timed out after ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(10L);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seconds");

        r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.util.concurrent.TimeoutException;

        specialinvoke $r11.<java.util.concurrent.TimeoutException: void <init>(java.lang.String)>(r1);

        r2 = $r11;

        $r12 = staticinvoke <java.lang.Daemons$FinalizerDaemon: java.lang.Daemons$FinalizerDaemon access$100()>();

        $r13 = virtualinvoke $r12.<java.lang.Daemons$FinalizerDaemon: java.lang.StackTraceElement[] getStackTrace()>();

        virtualinvoke r2.<java.lang.Exception: void setStackTrace(java.lang.StackTraceElement[])>($r13);

        r3 = staticinvoke <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>();

        if r3 != null goto label1;

        staticinvoke <java.lang.System: void logE(java.lang.String,java.lang.Throwable)>(r1, r2);

        staticinvoke <java.lang.System: void exit(int)>(2);

     label1:
        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        interfaceinvoke r3.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>($r14, r2);

        return;
    }

    static java.lang.Daemons$FinalizerWatchdogDaemon access$200()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon $r0;

        $r0 = <java.lang.Daemons$FinalizerWatchdogDaemon: java.lang.Daemons$FinalizerWatchdogDaemon INSTANCE>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Daemons$FinalizerWatchdogDaemon $r0;

        $r0 = new java.lang.Daemons$FinalizerWatchdogDaemon;

        specialinvoke $r0.<java.lang.Daemons$FinalizerWatchdogDaemon: void <init>()>();

        <java.lang.Daemons$FinalizerWatchdogDaemon: java.lang.Daemons$FinalizerWatchdogDaemon INSTANCE> = $r0;

        return;
    }
}
