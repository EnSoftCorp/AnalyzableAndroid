public abstract class java.util.EnumSet extends java.util.AbstractSet implements java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    final java.lang.Class elementClass;

    void <init>(java.lang.Class)
    {
        java.util.EnumSet r0;
        java.lang.Class r1;

        r0 := @this: java.util.EnumSet;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.EnumSet: java.lang.Class elementClass> = r1;

        return;
    }

    public static java.util.EnumSet noneOf(java.lang.Class)
    {
        java.lang.Class r0, $r6;
        java.lang.Enum[] r1;
        boolean $z0;
        int $i0;
        java.util.HugeEnumSet $r2;
        java.util.MiniEnumSet $r3;
        java.lang.ClassCastException $r4;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.ClassCastException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not an Enum");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.ClassCastException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        r1 = staticinvoke <java.lang.Enum: java.lang.Enum[] getSharedConstants(java.lang.Class)>(r0);

        $i0 = lengthof r1;

        if $i0 > 64 goto label2;

        $r3 = new java.util.MiniEnumSet;

        specialinvoke $r3.<java.util.MiniEnumSet: void <init>(java.lang.Class,java.lang.Enum[])>(r0, r1);

        return $r3;

     label2:
        $r2 = new java.util.HugeEnumSet;

        specialinvoke $r2.<java.util.HugeEnumSet: void <init>(java.lang.Class,java.lang.Enum[])>(r0, r1);

        return $r2;
    }

    public static java.util.EnumSet allOf(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.EnumSet r1;

        r0 := @parameter0: java.lang.Class;

        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>(r0);

        virtualinvoke r1.<java.util.EnumSet: void complement()>();

        return r1;
    }

    public static java.util.EnumSet copyOf(java.util.EnumSet)
    {
        java.util.EnumSet r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.util.EnumSet;

        $r2 = r0.<java.util.EnumSet: java.lang.Class elementClass>;

        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r2);

        virtualinvoke r1.<java.util.EnumSet: boolean addAll(java.util.Collection)>(r0);

        return r1;
    }

    public static java.util.EnumSet copyOf(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.Iterator r1;
        java.lang.Enum r2;
        java.util.EnumSet r3, $r8, $r9;
        boolean $z0, $z1, $z3;
        java.lang.Object $r4, $r6;
        java.lang.Class $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof java.util.EnumSet;

        if $z0 == 0 goto label1;

        $r8 = (java.util.EnumSet) r0;

        $r9 = staticinvoke <java.util.EnumSet: java.util.EnumSet copyOf(java.util.EnumSet)>($r8);

        return $r9;

     label1:
        $z1 = interfaceinvoke r0.<java.util.Collection: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("empty collection");

        throw $r7;

     label2:
        r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.Enum) $r4;

        $r5 = virtualinvoke r2.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r5);

        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>(r2);

     label3:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>($r6);

        goto label3;

     label4:
        return r3;
    }

    public static java.util.EnumSet complementOf(java.util.EnumSet)
    {
        java.util.EnumSet r0, r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.util.EnumSet;

        $r2 = r0.<java.util.EnumSet: java.lang.Class elementClass>;

        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r2);

        virtualinvoke r1.<java.util.EnumSet: boolean addAll(java.util.Collection)>(r0);

        virtualinvoke r1.<java.util.EnumSet: void complement()>();

        return r1;
    }

    abstract void complement();

    public static java.util.EnumSet of(java.lang.Enum)
    {
        java.lang.Enum r0;
        java.util.EnumSet r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.Enum;

        $r2 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        r1 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r2);

        virtualinvoke r1.<java.util.EnumSet: boolean add(java.lang.Object)>(r0);

        return r1;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1;
        java.util.EnumSet r2;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum;

        r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(r0);

        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r1);

        return r2;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2;
        java.util.EnumSet r3;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum;

        r2 := @parameter2: java.lang.Enum;

        r3 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>(r0, r1);

        virtualinvoke r3.<java.util.EnumSet: boolean add(java.lang.Object)>(r2);

        return r3;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2, r3;
        java.util.EnumSet r4;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum;

        r2 := @parameter2: java.lang.Enum;

        r3 := @parameter3: java.lang.Enum;

        r4 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum)>(r0, r1, r2);

        virtualinvoke r4.<java.util.EnumSet: boolean add(java.lang.Object)>(r3);

        return r4;
    }

    public static java.util.EnumSet of(java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1, r2, r3, r4;
        java.util.EnumSet r5;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum;

        r2 := @parameter2: java.lang.Enum;

        r3 := @parameter3: java.lang.Enum;

        r4 := @parameter4: java.lang.Enum;

        r5 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)>(r0, r1, r2, r3);

        virtualinvoke r5.<java.util.EnumSet: boolean add(java.lang.Object)>(r4);

        return r5;
    }

    public static transient java.util.EnumSet of(java.lang.Enum, java.lang.Enum[])
    {
        java.lang.Enum r0, r4;
        java.lang.Enum[] r1, r3;
        java.util.EnumSet r2;
        int i0, i1;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum[];

        r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>(r0);

        r3 = r1;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        virtualinvoke r2.<java.util.EnumSet: boolean add(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r2;
    }

    public static java.util.EnumSet range(java.lang.Enum, java.lang.Enum)
    {
        java.lang.Enum r0, r1;
        java.util.EnumSet r2;
        int $i0;
        java.lang.Class $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @parameter0: java.lang.Enum;

        r1 := @parameter1: java.lang.Enum;

        $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>(r1);

        if $i0 <= 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("start is behind end");

        throw $r4;

     label1:
        $r3 = virtualinvoke r0.<java.lang.Enum: java.lang.Class getDeclaringClass()>();

        r2 = staticinvoke <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>($r3);

        virtualinvoke r2.<java.util.EnumSet: void setRange(java.lang.Enum,java.lang.Enum)>(r0, r1);

        return r2;
    }

    abstract void setRange(java.lang.Enum, java.lang.Enum);

    public java.util.EnumSet clone()
    {
        java.util.EnumSet r0, $r3;
        java.lang.CloneNotSupportedException r1, $r4;
        java.lang.Object $r2;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.EnumSet;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.util.EnumSet) $r2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    boolean isValidType(java.lang.Class)
    {
        java.util.EnumSet r0;
        java.lang.Class r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: java.util.EnumSet;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<java.util.EnumSet: java.lang.Class elementClass>;

        if r1 == $r2 goto label1;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r4 = r0.<java.util.EnumSet: java.lang.Class elementClass>;

        if $r3 != $r4 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    java.lang.Object writeReplace()
    {
        java.util.EnumSet r0;
        java.util.EnumSet$SerializationProxy r1, $r2;
        java.lang.Enum[] $r3, $r5;
        java.lang.Object[] $r4;
        java.lang.Class $r7;

        r0 := @this: java.util.EnumSet;

        $r2 = new java.util.EnumSet$SerializationProxy;

        specialinvoke $r2.<java.util.EnumSet$SerializationProxy: void <init>(java.util.EnumSet$1)>(null);

        r1 = $r2;

        $r3 = newarray (java.lang.Enum)[0];

        $r4 = virtualinvoke r0.<java.util.EnumSet: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.Enum[]) $r4;

        staticinvoke <java.util.EnumSet$SerializationProxy: java.lang.Enum[] access$102(java.util.EnumSet$SerializationProxy,java.lang.Enum[])>(r1, $r5);

        $r7 = r0.<java.util.EnumSet: java.lang.Class elementClass>;

        staticinvoke <java.util.EnumSet$SerializationProxy: java.lang.Class access$202(java.util.EnumSet$SerializationProxy,java.lang.Class)>(r1, $r7);

        return r1;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.util.EnumSet r0, $r1;

        r0 := @this: java.util.EnumSet;

        $r1 = virtualinvoke r0.<java.util.EnumSet: java.util.EnumSet clone()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <java.util.EnumSet: long serialVersionUID> = 1009687484059888093L;

        return;
    }
}
