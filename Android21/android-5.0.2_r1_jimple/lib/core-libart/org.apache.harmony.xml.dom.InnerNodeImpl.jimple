public abstract class org.apache.harmony.xml.dom.InnerNodeImpl extends org.apache.harmony.xml.dom.LeafNodeImpl
{
    java.util.List children;

    protected void <init>(org.apache.harmony.xml.dom.DocumentImpl)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.apache.harmony.xml.dom.DocumentImpl r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.DocumentImpl;

        specialinvoke r0.<org.apache.harmony.xml.dom.LeafNodeImpl: void <init>(org.apache.harmony.xml.dom.DocumentImpl)>(r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children> = $r2;

        return;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1, $r3;
        java.util.List $r2;
        int $i0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>(r1, $i0);

        return $r3;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.apache.harmony.xml.dom.NodeListImpl r1, $r4;
        java.util.Iterator r2;
        org.apache.harmony.xml.dom.NodeImpl r3;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        $r4 = new org.apache.harmony.xml.dom.NodeListImpl;

        specialinvoke $r4.<org.apache.harmony.xml.dom.NodeListImpl: void <init>()>();

        r1 = $r4;

        $r5 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.harmony.xml.dom.NodeImpl) $r6;

        virtualinvoke r1.<org.apache.harmony.xml.dom.NodeListImpl: void add(org.apache.harmony.xml.dom.NodeImpl)>(r3);

        goto label1;

     label2:
        return r1;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        java.util.List $r1, $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.harmony.xml.dom.LeafNodeImpl $r4;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.apache.harmony.xml.dom.LeafNodeImpl) $r3;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        java.util.List $r1, $r2, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.Object $r4;
        org.apache.harmony.xml.dom.LeafNodeImpl $r5;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $r2 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.apache.harmony.xml.dom.LeafNodeImpl) $r4;

        goto label2;

     label1:
        $r5 = null;

     label2:
        return $r5;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0, $r1, $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.List $r3, $r5;
        java.lang.Object $r6;
        org.w3c.dom.Node $r7;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        if $r1 == null goto label1;

        $i0 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: int index>;

        $i1 = $i0 + 1;

        $r2 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        $r3 = $r2.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i1 < $i2 goto label2;

     label1:
        return null;

     label2:
        $r4 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        $r5 = $r4.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i3 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: int index>;

        $i4 = $i3 + 1;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i4);

        $r7 = (org.w3c.dom.Node) $r6;

        return $r7;
    }

    public boolean hasChildNodes()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        java.util.List $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0, $r6;
        org.w3c.dom.Node r1, r2, $r7, $r10;
        org.apache.harmony.xml.dom.LeafNodeImpl r3;
        org.apache.harmony.xml.dom.DocumentImpl $r4, $r5;
        int $i0;
        org.w3c.dom.DOMException $r8, $r9;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        r3 = (org.apache.harmony.xml.dom.LeafNodeImpl) r2;

        if r3 != null goto label1;

        $r10 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r1);

        return $r10;

     label1:
        $r5 = r3.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r4 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r5 == $r4 goto label2;

        $r9 = new org.w3c.dom.DOMException;

        specialinvoke $r9.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(4, null);

        throw $r9;

     label2:
        $r6 = r3.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        if $r6 == r0 goto label3;

        $r8 = new org.w3c.dom.DOMException;

        specialinvoke $r8.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r8;

     label3:
        $i0 = r3.<org.apache.harmony.xml.dom.LeafNodeImpl: int index>;

        $r7 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>(r1, $i0);

        return $r7;
    }

    org.w3c.dom.Node insertChildAt(org.w3c.dom.Node, int) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0, $r4, $r6, $r9;
        org.w3c.dom.Node r1, $r15;
        int i0, i1, $i2, $i3, i4;
        org.w3c.dom.NodeList r2;
        boolean $z0, $z1;
        org.apache.harmony.xml.dom.DocumentImpl $r3, $r11, $r12, $r13;
        java.util.List $r5, $r7;
        org.w3c.dom.DOMException $r10, $r14;
        org.apache.harmony.xml.dom.LeafNodeImpl r17;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $z0 = r1 instanceof org.w3c.dom.DocumentFragment;

        if $z0 == 0 goto label3;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

     label1:
        $i2 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>();

        if i1 >= $i2 goto label2;

        $r15 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        $i3 = i0 + i1;

        virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>($r15, $i3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;

     label3:
        r17 = (org.apache.harmony.xml.dom.LeafNodeImpl) r1;

        $r3 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r3 == null goto label4;

        $r11 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r11 == null goto label4;

        $r12 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r13 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r12 == $r13 goto label4;

        $r14 = new org.w3c.dom.DOMException;

        specialinvoke $r14.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(4, null);

        throw $r14;

     label4:
        $z1 = virtualinvoke r17.<org.apache.harmony.xml.dom.LeafNodeImpl: boolean isParentOf(org.w3c.dom.Node)>(r0);

        if $z1 == 0 goto label5;

        $r10 = new org.w3c.dom.DOMException;

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r10;

     label5:
        $r4 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        if $r4 == null goto label6;

        i4 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: int index>;

        $r6 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        $r7 = $r6.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i4);

        $r9 = r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        specialinvoke $r9.<org.apache.harmony.xml.dom.InnerNodeImpl: void refreshIndices(int)>(i4);

     label6:
        $r5 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        interfaceinvoke $r5.<java.util.List: void add(int,java.lang.Object)>(i0, r17);

        r17.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent> = r0;

        specialinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: void refreshIndices(int)>(i0);

        return r1;
    }

    public boolean isParentOf(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1;
        org.apache.harmony.xml.dom.LeafNodeImpl r2;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = (org.apache.harmony.xml.dom.LeafNodeImpl) r1;

     label1:
        if r2 == null goto label3;

        if r2 != r0 goto label2;

        return 1;

     label2:
        r2 = r2.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        goto label1;

     label3:
        return 0;
    }

    public final void normalize()
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1, r2;
        short $s0;
        org.apache.harmony.xml.dom.TextImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r2 == null goto label3;

        r1 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        interfaceinvoke r2.<org.w3c.dom.Node: void normalize()>();

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 3 goto label2;

        $r3 = (org.apache.harmony.xml.dom.TextImpl) r2;

        virtualinvoke $r3.<org.apache.harmony.xml.dom.TextImpl: org.apache.harmony.xml.dom.TextImpl minimize()>();

     label2:
        r2 = r1;

        goto label1;

     label3:
        return;
    }

    private void refreshIndices(int)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        int i0, i1, $i2;
        java.util.List $r1, $r2;
        java.lang.Object $r3;
        org.apache.harmony.xml.dom.LeafNodeImpl $r4;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        i0 := @parameter0: int;

        i1 = i0;

     label1:
        $r1 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $i2 = interfaceinvoke $r1.<java.util.List: int size()>();

        if i1 >= $i2 goto label2;

        $r2 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (org.apache.harmony.xml.dom.LeafNodeImpl) $r3;

        $r4.<org.apache.harmony.xml.dom.LeafNodeImpl: int index> = i1;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0, $r5;
        org.w3c.dom.Node r1;
        org.apache.harmony.xml.dom.LeafNodeImpl r2;
        int i0;
        org.apache.harmony.xml.dom.DocumentImpl $r3, $r4;
        java.util.List $r6;
        org.w3c.dom.DOMException $r8, $r9;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = (org.apache.harmony.xml.dom.LeafNodeImpl) r1;

        $r4 = r2.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r3 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r4 == $r3 goto label1;

        $r9 = new org.w3c.dom.DOMException;

        specialinvoke $r9.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(4, null);

        throw $r9;

     label1:
        $r5 = r2.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent>;

        if $r5 == r0 goto label2;

        $r8 = new org.w3c.dom.DOMException;

        specialinvoke $r8.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r8;

     label2:
        i0 = r2.<org.apache.harmony.xml.dom.LeafNodeImpl: int index>;

        $r6 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i0);

        r2.<org.apache.harmony.xml.dom.LeafNodeImpl: org.apache.harmony.xml.dom.InnerNodeImpl parent> = null;

        specialinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: void refreshIndices(int)>(i0);

        return r1;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1, r2;
        int i0;
        org.apache.harmony.xml.dom.LeafNodeImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = (org.apache.harmony.xml.dom.LeafNodeImpl) r2;

        i0 = $r3.<org.apache.harmony.xml.dom.LeafNodeImpl: int index>;

        virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r2);

        virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node insertChildAt(org.w3c.dom.Node,int)>(r1, i0);

        return r2;
    }

    public java.lang.String getTextContent() throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1, r2;
        java.lang.StringBuilder r3, $r4;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>();

        if r1 != null goto label1;

        return "";

     label1:
        r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if r2 != null goto label4;

        $z0 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: boolean hasTextContent(org.w3c.dom.Node)>(r1);

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getTextContent()>();

        goto label3;

     label2:
        $r6 = "";

     label3:
        return $r6;

     label4:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        r3 = $r4;

        virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: void getTextContent(java.lang.StringBuilder)>(r3);

        $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    void getTextContent(java.lang.StringBuilder) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        java.lang.StringBuilder r1;
        org.w3c.dom.Node r2;
        boolean $z0;
        org.apache.harmony.xml.dom.NodeImpl $r3;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r2 == null goto label3;

        $z0 = virtualinvoke r0.<org.apache.harmony.xml.dom.InnerNodeImpl: boolean hasTextContent(org.w3c.dom.Node)>(r2);

        if $z0 == 0 goto label2;

        $r3 = (org.apache.harmony.xml.dom.NodeImpl) r2;

        virtualinvoke $r3.<org.apache.harmony.xml.dom.NodeImpl: void getTextContent(java.lang.StringBuilder)>(r1);

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label3:
        return;
    }

    final boolean hasTextContent(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.w3c.dom.Node r1;
        short $s0, $s1;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 8 goto label1;

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s1 == 7 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl, java.lang.String)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.apache.harmony.xml.dom.NodeListImpl r1;
        java.lang.String r2, $r8;
        java.util.Iterator r3;
        org.apache.harmony.xml.dom.NodeImpl r4;
        org.apache.harmony.xml.dom.ElementImpl r5;
        java.util.List $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        short $s0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.NodeListImpl;

        r2 := @parameter1: java.lang.String;

        $r6 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.harmony.xml.dom.NodeImpl) $r7;

        $s0 = virtualinvoke r4.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        if $s0 != 1 goto label3;

        r5 = (org.apache.harmony.xml.dom.ElementImpl) r4;

        $r8 = virtualinvoke r5.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNodeName()>();

        $z1 = staticinvoke <org.apache.harmony.xml.dom.InnerNodeImpl: boolean matchesNameOrWildcard(java.lang.String,java.lang.String)>(r2, $r8);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<org.apache.harmony.xml.dom.NodeListImpl: void add(org.apache.harmony.xml.dom.NodeImpl)>(r5);

     label2:
        virtualinvoke r5.<org.apache.harmony.xml.dom.ElementImpl: void getElementsByTagName(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String)>(r1, r2);

     label3:
        goto label1;

     label4:
        return;
    }

    void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl, java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.InnerNodeImpl r0;
        org.apache.harmony.xml.dom.NodeListImpl r1;
        java.lang.String r2, r3, $r9, $r10;
        java.util.Iterator r4;
        org.apache.harmony.xml.dom.NodeImpl r5;
        org.apache.harmony.xml.dom.ElementImpl r6;
        java.util.List $r7;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8;
        short $s0;

        r0 := @this: org.apache.harmony.xml.dom.InnerNodeImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.NodeListImpl;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r7 = r0.<org.apache.harmony.xml.dom.InnerNodeImpl: java.util.List children>;

        r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.harmony.xml.dom.NodeImpl) $r8;

        $s0 = virtualinvoke r5.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        if $s0 != 1 goto label3;

        r6 = (org.apache.harmony.xml.dom.ElementImpl) r5;

        $r9 = virtualinvoke r6.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getNamespaceURI()>();

        $z1 = staticinvoke <org.apache.harmony.xml.dom.InnerNodeImpl: boolean matchesNameOrWildcard(java.lang.String,java.lang.String)>(r2, $r9);

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r6.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String getLocalName()>();

        $z2 = staticinvoke <org.apache.harmony.xml.dom.InnerNodeImpl: boolean matchesNameOrWildcard(java.lang.String,java.lang.String)>(r3, $r10);

        if $z2 == 0 goto label2;

        virtualinvoke r1.<org.apache.harmony.xml.dom.NodeListImpl: void add(org.apache.harmony.xml.dom.NodeImpl)>(r6);

     label2:
        virtualinvoke r6.<org.apache.harmony.xml.dom.ElementImpl: void getElementsByTagNameNS(org.apache.harmony.xml.dom.NodeListImpl,java.lang.String,java.lang.String)>(r1, r2, r3);

     label3:
        goto label1;

     label4:
        return;
    }

    private static boolean matchesNameOrWildcard(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = "*";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
