class java.util.TreeMap$Node extends java.lang.Object implements java.util.Map$Entry
{
    java.util.TreeMap$Node parent;
    java.util.TreeMap$Node left;
    java.util.TreeMap$Node right;
    final java.lang.Object key;
    java.lang.Object value;
    int height;

    void <init>(java.util.TreeMap$Node, java.lang.Object)
    {
        java.util.TreeMap$Node r0, r1;
        java.lang.Object r2;

        r0 := @this: java.util.TreeMap$Node;

        r1 := @parameter0: java.util.TreeMap$Node;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.util.TreeMap$Node: java.util.TreeMap$Node parent> = r1;

        r0.<java.util.TreeMap$Node: java.lang.Object key> = r2;

        r0.<java.util.TreeMap$Node: int height> = 1;

        return;
    }

    java.util.TreeMap$Node copy(java.util.TreeMap$Node)
    {
        java.util.TreeMap$Node r0, r1, r2, $r3, $r5, $r6, $r8, $r9, $r10, $r11;
        java.lang.Object $r4, $r7;
        int $i0;

        r0 := @this: java.util.TreeMap$Node;

        r1 := @parameter0: java.util.TreeMap$Node;

        $r3 = new java.util.TreeMap$Node;

        $r4 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        specialinvoke $r3.<java.util.TreeMap$Node: void <init>(java.util.TreeMap$Node,java.lang.Object)>(r1, $r4);

        r2 = $r3;

        $r5 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        if $r5 == null goto label1;

        $r10 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        $r11 = virtualinvoke $r10.<java.util.TreeMap$Node: java.util.TreeMap$Node copy(java.util.TreeMap$Node)>(r2);

        r2.<java.util.TreeMap$Node: java.util.TreeMap$Node left> = $r11;

     label1:
        $r6 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if $r6 == null goto label2;

        $r8 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        $r9 = virtualinvoke $r8.<java.util.TreeMap$Node: java.util.TreeMap$Node copy(java.util.TreeMap$Node)>(r2);

        r2.<java.util.TreeMap$Node: java.util.TreeMap$Node right> = $r9;

     label2:
        $r7 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        r2.<java.util.TreeMap$Node: java.lang.Object value> = $r7;

        $i0 = r0.<java.util.TreeMap$Node: int height>;

        r2.<java.util.TreeMap$Node: int height> = $i0;

        return r2;
    }

    public java.lang.Object getKey()
    {
        java.util.TreeMap$Node r0;
        java.lang.Object $r1;

        r0 := @this: java.util.TreeMap$Node;

        $r1 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        return $r1;
    }

    public java.lang.Object getValue()
    {
        java.util.TreeMap$Node r0;
        java.lang.Object $r1;

        r0 := @this: java.util.TreeMap$Node;

        $r1 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        return $r1;
    }

    public java.lang.Object setValue(java.lang.Object)
    {
        java.util.TreeMap$Node r0;
        java.lang.Object r1, r2;

        r0 := @this: java.util.TreeMap$Node;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        r0.<java.util.TreeMap$Node: java.lang.Object value> = r1;

        return r2;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.TreeMap$Node r0;
        java.lang.Object r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Map$Entry r2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.TreeMap$Node;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label7;

        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        if $r3 != null goto label1;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        if $r10 != null goto label5;

        goto label2;

     label1:
        $r4 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label5;

     label2:
        $r6 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        if $r6 != null goto label3;

        $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r9 != null goto label5;

        goto label4;

     label3:
        $r7 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label5;

     label4:
        $z3 = 1;

        goto label6;

     label5:
        $z3 = 0;

     label6:
        return $z3;

     label7:
        return 0;
    }

    public int hashCode()
    {
        java.util.TreeMap$Node r0;
        java.lang.Object $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;

        r0 := @this: java.util.TreeMap$Node;

        $r1 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

     label2:
        $r3 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        if $r3 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $r4 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        $i1 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

     label4:
        $i2 = $i0 ^ $i1;

        return $i2;
    }

    public java.lang.String toString()
    {
        java.util.TreeMap$Node r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r6;
        java.lang.Object $r2, $r5;
        java.lang.String $r7;

        r0 := @this: java.util.TreeMap$Node;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<java.util.TreeMap$Node: java.lang.Object key>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = r0.<java.util.TreeMap$Node: java.lang.Object value>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    java.util.TreeMap$Node next()
    {
        java.util.TreeMap$Node r0, r1, r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.TreeMap$Node;

        $r3 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if $r3 == null goto label1;

        $r5 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap$Node: java.util.TreeMap$Node first()>();

        return $r6;

     label1:
        r1 = r0;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

     label2:
        if r2 == null goto label4;

        $r4 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        if $r4 != r1 goto label3;

        return r2;

     label3:
        r1 = r2;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

        goto label2;

     label4:
        return null;
    }

    public java.util.TreeMap$Node prev()
    {
        java.util.TreeMap$Node r0, r1, r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.TreeMap$Node;

        $r3 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        if $r3 == null goto label1;

        $r5 = r0.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        $r6 = virtualinvoke $r5.<java.util.TreeMap$Node: java.util.TreeMap$Node last()>();

        return $r6;

     label1:
        r1 = r0;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

     label2:
        if r2 == null goto label4;

        $r4 = r2.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        if $r4 != r1 goto label3;

        return r2;

     label3:
        r1 = r2;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node parent>;

        goto label2;

     label4:
        return null;
    }

    public java.util.TreeMap$Node first()
    {
        java.util.TreeMap$Node r0, r1, r2;

        r0 := @this: java.util.TreeMap$Node;

        r1 = r0;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

     label1:
        if r2 == null goto label2;

        r1 = r2;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node left>;

        goto label1;

     label2:
        return r1;
    }

    public java.util.TreeMap$Node last()
    {
        java.util.TreeMap$Node r0, r1, r2;

        r0 := @this: java.util.TreeMap$Node;

        r1 = r0;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

     label1:
        if r2 == null goto label2;

        r1 = r2;

        r2 = r1.<java.util.TreeMap$Node: java.util.TreeMap$Node right>;

        goto label1;

     label2:
        return r1;
    }
}
