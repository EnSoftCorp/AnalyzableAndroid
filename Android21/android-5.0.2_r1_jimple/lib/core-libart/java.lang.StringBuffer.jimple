public final class java.lang.StringBuffer extends java.lang.AbstractStringBuilder implements java.lang.Appendable, java.io.Serializable, java.lang.CharSequence
{
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    public void <init>()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(int)>(i0);

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(java.lang.String)>(r1);

        return;
    }

    public void <init>(java.lang.CharSequence)
    {
        java.lang.StringBuffer r0;
        java.lang.CharSequence r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>(java.lang.String)>($r2);

        return;
    }

    public java.lang.StringBuffer append(boolean)
    {
        java.lang.StringBuffer r0, $r1;
        boolean z0;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = "true";

        goto label2;

     label1:
        $r2 = "false";

     label2:
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        return $r1;
    }

    public synchronized java.lang.StringBuffer append(char)
    {
        java.lang.StringBuffer r0;
        char c0;

        r0 := @this: java.lang.StringBuffer;

        c0 := @parameter0: char;

        virtualinvoke r0.<java.lang.StringBuffer: void append0(char)>(c0);

        return r0;
    }

    public java.lang.StringBuffer append(double)
    {
        java.lang.StringBuffer r0;
        double d0;
        java.lang.RealToString $r1;

        r0 := @this: java.lang.StringBuffer;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.RealToString: java.lang.RealToString getInstance()>();

        virtualinvoke $r1.<java.lang.RealToString: void appendDouble(java.lang.AbstractStringBuilder,double)>(r0, d0);

        return r0;
    }

    public java.lang.StringBuffer append(float)
    {
        java.lang.StringBuffer r0;
        float f0;
        java.lang.RealToString $r1;

        r0 := @this: java.lang.StringBuffer;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.RealToString: java.lang.RealToString getInstance()>();

        virtualinvoke $r1.<java.lang.RealToString: void appendFloat(java.lang.AbstractStringBuilder,float)>(r0, f0);

        return r0;
    }

    public java.lang.StringBuffer append(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        staticinvoke <java.lang.IntegralToString: void appendInt(java.lang.AbstractStringBuilder,int)>(r0, i0);

        return r0;
    }

    public java.lang.StringBuffer append(long)
    {
        java.lang.StringBuffer r0;
        long l0;

        r0 := @this: java.lang.StringBuffer;

        l0 := @parameter0: long;

        staticinvoke <java.lang.IntegralToString: void appendLong(java.lang.AbstractStringBuilder,long)>(r0, l0);

        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.Object)
    {
        java.lang.StringBuffer r0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: void appendNull()>();

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke r0.<java.lang.StringBuffer: void append0(java.lang.String)>($r2);

     label2:
        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuffer: void append0(java.lang.String)>(r1);

        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.StringBuffer)
    {
        java.lang.StringBuffer r0, r1, r2;
        java.lang.Throwable r3, $r6;
        char[] $r5;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.StringBuffer;

        if r1 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: void appendNull()>();

        goto label6;

     label1:
        r2 = r1;

        entermonitor r1;

     label2:
        $r5 = virtualinvoke r1.<java.lang.StringBuffer: char[] getValue()>();

        $i0 = virtualinvoke r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke r0.<java.lang.StringBuffer: void append0(char[],int,int)>($r5, 0, $i0);

        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return r0;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public synchronized java.lang.StringBuffer append(char[])
    {
        java.lang.StringBuffer r0;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: char[];

        virtualinvoke r0.<java.lang.StringBuffer: void append0(char[])>(r1);

        return r0;
    }

    public synchronized java.lang.StringBuffer append(char[], int, int)
    {
        java.lang.StringBuffer r0;
        char[] r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<java.lang.StringBuffer: void append0(char[],int,int)>(r1, i0, i1);

        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.CharSequence)
    {
        java.lang.StringBuffer r0;
        java.lang.CharSequence r1;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        virtualinvoke r0.<java.lang.StringBuffer: void appendNull()>();

        goto label2;

     label1:
        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        virtualinvoke r0.<java.lang.StringBuffer: void append0(java.lang.CharSequence,int,int)>(r1, 0, $i0);

     label2:
        return r0;
    }

    public synchronized java.lang.StringBuffer append(java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        virtualinvoke r0.<java.lang.StringBuffer: void append0(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return r0;
    }

    public java.lang.StringBuffer appendCodePoint(int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        char[] $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Character: char[] toChars(int)>(i0);

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r1);

        return $r2;
    }

    public synchronized char charAt(int)
    {
        java.lang.StringBuffer r0;
        int i0;
        char $c1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        $c1 = specialinvoke r0.<java.lang.AbstractStringBuilder: char charAt(int)>(i0);

        return $c1;
    }

    public synchronized int codePointAt(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointAt(int)>(i0);

        return $i1;
    }

    public synchronized int codePointBefore(int)
    {
        java.lang.StringBuffer r0;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointBefore(int)>(i0);

        return $i1;
    }

    public synchronized int codePointCount(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int codePointCount(int,int)>(i0, i1);

        return $i2;
    }

    public synchronized java.lang.StringBuffer delete(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<java.lang.StringBuffer: void delete0(int,int)>(i0, i1);

        return r0;
    }

    public synchronized java.lang.StringBuffer deleteCharAt(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        virtualinvoke r0.<java.lang.StringBuffer: void deleteCharAt0(int)>(i0);

        return r0;
    }

    public synchronized void ensureCapacity(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void ensureCapacity(int)>(i0);

        return;
    }

    public synchronized void getChars(int, int, char[], int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>(i0, i1, r1, i2);

        return;
    }

    public synchronized int indexOf(java.lang.String, int)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public synchronized java.lang.StringBuffer insert(int, char)
    {
        java.lang.StringBuffer r0;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,char)>(i0, c1);

        return r0;
    }

    public java.lang.StringBuffer insert(int, boolean)
    {
        java.lang.StringBuffer r0, $r1;
        int i0;
        boolean z0;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r2 = "true";

        goto label2;

     label1:
        $r2 = "false";

     label2:
        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r2);

        return $r1;
    }

    public java.lang.StringBuffer insert(int, int)
    {
        java.lang.StringBuffer r0, $r2;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1);

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public java.lang.StringBuffer insert(int, long)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        long l1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1);

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public java.lang.StringBuffer insert(int, double)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        double d0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public java.lang.StringBuffer insert(int, float)
    {
        java.lang.StringBuffer r0, $r2;
        int i0;
        float f0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r1);

        return $r2;
    }

    public java.lang.StringBuffer insert(int, java.lang.Object)
    {
        java.lang.StringBuffer r0, $r3;
        int i0;
        java.lang.Object r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r2 = "null";

        goto label2;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

     label2:
        $r3 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i0, $r2);

        return $r3;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,java.lang.String)>(i0, r1);

        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, char[])
    {
        java.lang.StringBuffer r0;
        int i0;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,char[])>(i0, r1);

        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, char[], int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        char[] r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: char[];

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,char[],int,int)>(i0, r1, i1, i2);

        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.CharSequence)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.CharSequence r1;
        java.lang.String $r2;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        if r1 != null goto label1;

        $r2 = "null";

        goto label2;

     label1:
        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

     label2:
        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,java.lang.String)>(i0, $r2);

        return r0;
    }

    public synchronized java.lang.StringBuffer insert(int, java.lang.CharSequence, int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, i2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.CharSequence;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        virtualinvoke r0.<java.lang.StringBuffer: void insert0(int,java.lang.CharSequence,int,int)>(i0, r1, i1, i2);

        return r0;
    }

    public synchronized int lastIndexOf(java.lang.String, int)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int i0, $i1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String,int)>(r1, i0);

        return $i1;
    }

    public synchronized int offsetByCodePoints(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1, $i2;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = specialinvoke r0.<java.lang.AbstractStringBuilder: int offsetByCodePoints(int,int)>(i0, i1);

        return $i2;
    }

    public synchronized java.lang.StringBuffer replace(int, int, java.lang.String)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        virtualinvoke r0.<java.lang.StringBuffer: void replace0(int,int,java.lang.String)>(i0, i1, r1);

        return r0;
    }

    public synchronized java.lang.StringBuffer reverse()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;

        virtualinvoke r0.<java.lang.StringBuffer: void reverse0()>();

        return r0;
    }

    public synchronized void setCharAt(int, char)
    {
        java.lang.StringBuffer r0;
        int i0;
        char c1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        c1 := @parameter1: char;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void setCharAt(int,char)>(i0, c1);

        return;
    }

    public synchronized void setLength(int)
    {
        java.lang.StringBuffer r0;
        int i0;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void setLength(int)>(i0);

        return;
    }

    public synchronized java.lang.CharSequence subSequence(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);

        return $r1;
    }

    public synchronized java.lang.String substring(int)
    {
        java.lang.StringBuffer r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int)>(i0);

        return $r1;
    }

    public synchronized java.lang.String substring(int, int)
    {
        java.lang.StringBuffer r0;
        int i0, i1;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>(i0, i1);

        return $r1;
    }

    public synchronized java.lang.String toString()
    {
        java.lang.StringBuffer r0;
        java.lang.String $r1;

        r0 := @this: java.lang.StringBuffer;

        $r1 = specialinvoke r0.<java.lang.AbstractStringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public synchronized void trimToSize()
    {
        java.lang.StringBuffer r0;

        r0 := @this: java.lang.StringBuffer;

        specialinvoke r0.<java.lang.AbstractStringBuilder: void trimToSize()>();

        return;
    }

    private synchronized void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.lang.StringBuffer r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        int $i0;
        char[] $r3;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        $i0 = virtualinvoke r0.<java.lang.StringBuffer: int length()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,int)>("count", $i0);

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,boolean)>("shared", 0);

        $r3 = virtualinvoke r0.<java.lang.StringBuffer: char[] getValue()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,java.lang.Object)>("value", $r3);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.StringBuffer r0;
        java.io.ObjectInputStream r1;
        java.io.ObjectInputStream$GetField r2;
        int i0;
        char[] r3, $r5;
        java.lang.Object $r4;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.io.ObjectInputStream;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()>();

        i0 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: int get(java.lang.String,int)>("count", 0);

        $r4 = virtualinvoke r2.<java.io.ObjectInputStream$GetField: java.lang.Object get(java.lang.String,java.lang.Object)>("value", null);

        $r5 = (char[]) $r4;

        r3 = (char[]) $r5;

        virtualinvoke r0.<java.lang.StringBuffer: void set(char[],int)>(r3, i0);

        return;
    }

    public volatile int lastIndexOf(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1);

        return $i0;
    }

    public volatile int indexOf(java.lang.String)
    {
        java.lang.StringBuffer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.String;

        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1);

        return $i0;
    }

    public volatile int length()
    {
        java.lang.StringBuffer r0;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>();

        return $i0;
    }

    public volatile int capacity()
    {
        java.lang.StringBuffer r0;
        int $i0;

        r0 := @this: java.lang.StringBuffer;

        $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>();

        return $i0;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.lang.StringBuffer;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.lang.StringBuffer r0, $r1;
        char c0;

        r0 := @this: java.lang.StringBuffer;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0);

        return $r1;
    }

    static void <clinit>()
    {
        java.io.ObjectStreamField[] $r0;
        java.io.ObjectStreamField $r1, $r3, $r5;
        java.lang.Class $r2, $r4;

        <java.lang.StringBuffer: long serialVersionUID> = 3388685877147921107L;

        $r0 = newarray (java.io.ObjectStreamField)[3];

        $r1 = new java.io.ObjectStreamField;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        specialinvoke $r1.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("count", $r2);

        $r0[0] = $r1;

        $r3 = new java.io.ObjectStreamField;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        specialinvoke $r3.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("shared", $r4);

        $r0[1] = $r3;

        $r5 = new java.io.ObjectStreamField;

        specialinvoke $r5.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("value", class "[C");

        $r0[2] = $r5;

        <java.lang.StringBuffer: java.io.ObjectStreamField[] serialPersistentFields> = $r0;

        return;
    }
}
