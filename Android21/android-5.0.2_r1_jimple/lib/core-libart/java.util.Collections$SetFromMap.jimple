class java.util.Collections$SetFromMap extends java.util.AbstractSet implements java.io.Serializable
{
    private static final long serialVersionUID;
    private final java.util.Map m;
    private transient java.util.Set backingSet;

    void <init>(java.util.Map)
    {
        java.util.Collections$SetFromMap r0;
        java.util.Map r1;
        java.util.Set $r2;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.Collections$SetFromMap: java.util.Map m> = r1;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r0.<java.util.Collections$SetFromMap: java.util.Set backingSet> = $r2;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Collections$SetFromMap r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public int hashCode()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Set $r1;
        int $i0;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $i0 = interfaceinvoke $r1.<java.util.Set: int hashCode()>();

        return $i0;
    }

    public boolean add(java.lang.Object)
    {
        java.util.Collections$SetFromMap r0;
        java.lang.Object r1, $r4;
        java.lang.Boolean $r2;
        java.util.Map $r3;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r4 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clear()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Map $r1;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public java.lang.String toString()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Set $r1;
        java.lang.String $r2;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Collections$SetFromMap r0;
        java.lang.Object r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.Collections$SetFromMap r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean containsAll(java.util.Collection)>(r1);

        return $z0;
    }

    public boolean isEmpty()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Collections$SetFromMap r0;
        java.lang.Object r1, $r3;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.Collections$SetFromMap r0;
        java.util.Collection r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public java.lang.Object[] toArray()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Set $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.Collections$SetFromMap r0;
        java.lang.Object[] r1, $r3;
        java.util.Set $r2;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.lang.Object[];

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }

    public java.util.Iterator iterator()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Set $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Set backingSet>;

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    public int size()
    {
        java.util.Collections$SetFromMap r0;
        java.util.Map $r1;
        int $i0;

        r0 := @this: java.util.Collections$SetFromMap;

        $r1 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.Collections$SetFromMap r0;
        java.io.ObjectInputStream r1;
        java.util.Map $r2;
        java.util.Set $r3;

        r0 := @this: java.util.Collections$SetFromMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = r0.<java.util.Collections$SetFromMap: java.util.Map m>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r0.<java.util.Collections$SetFromMap: java.util.Set backingSet> = $r3;

        return;
    }

    public static void <clinit>()
    {
        <java.util.Collections$SetFromMap: long serialVersionUID> = 2454657854757543876L;

        return;
    }
}
