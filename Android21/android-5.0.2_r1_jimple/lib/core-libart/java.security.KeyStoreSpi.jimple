public abstract class java.security.KeyStoreSpi extends java.lang.Object
{

    public void <init>()
    {
        java.security.KeyStoreSpi r0;

        r0 := @this: java.security.KeyStoreSpi;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException;

    public abstract java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String);

    public abstract java.security.cert.Certificate engineGetCertificate(java.lang.String);

    public abstract java.util.Date engineGetCreationDate(java.lang.String);

    public abstract void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;

    public abstract void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException;

    public abstract void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException;

    public abstract void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException;

    public abstract java.util.Enumeration engineAliases();

    public abstract boolean engineContainsAlias(java.lang.String);

    public abstract int engineSize();

    public abstract boolean engineIsKeyEntry(java.lang.String);

    public abstract boolean engineIsCertificateEntry(java.lang.String);

    public abstract java.lang.String engineGetCertificateAlias(java.security.cert.Certificate);

    public abstract void engineStore(java.io.OutputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;

    public void engineStore(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        java.security.KeyStoreSpi r0;
        java.security.KeyStore$LoadStoreParameter r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: java.security.KeyStoreSpi;

        r1 := @parameter0: java.security.KeyStore$LoadStoreParameter;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public abstract void engineLoad(java.io.InputStream, char[]) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException;

    public void engineLoad(java.security.KeyStore$LoadStoreParameter) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.cert.CertificateException
    {
        java.security.KeyStoreSpi r0;
        java.security.KeyStore$LoadStoreParameter r1;
        char[] r2, r11;
        java.security.KeyStore$ProtectionParameter r3;
        java.lang.IllegalStateException r4, $r7;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r5;
        java.security.KeyStore$PasswordProtection $r6;
        java.lang.IllegalArgumentException $r8, $r10;
        java.security.UnrecoverableEntryException $r9, r12;

        r0 := @this: java.security.KeyStoreSpi;

        r1 := @parameter0: java.security.KeyStore$LoadStoreParameter;

        if r1 != null goto label1;

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>(null, null);

        return;

     label1:
        r3 = interfaceinvoke r1.<java.security.KeyStore$LoadStoreParameter: java.security.KeyStore$ProtectionParameter getProtectionParameter()>();

        $z0 = r3 instanceof java.security.KeyStore$PasswordProtection;

        if $z0 == 0 goto label5;

     label2:
        $r6 = (java.security.KeyStore$PasswordProtection) r3;

        r2 = virtualinvoke $r6.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>(null, r2);

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r4);

        throw $r8;

     label5:
        $z1 = r3 instanceof java.security.KeyStore$CallbackHandlerProtection;

        if $z1 == 0 goto label9;

     label6:
        r11 = staticinvoke <java.security.KeyStoreSpi: char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter)>(r3);

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])>(null, r11);

     label7:
        return;

     label8:
        $r9 := @caughtexception;

        r12 = $r9;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r12);

        throw $r10;

     label9:
        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("protectionParameter is neither PasswordProtection nor CallbackHandlerProtection instance");

        throw $r5;

        catch java.lang.IllegalStateException from label2 to label3 with label4;
        catch java.security.UnrecoverableEntryException from label6 to label7 with label8;
    }

    public java.security.KeyStore$Entry engineGetEntry(java.lang.String, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableEntryException
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1, $r14;
        java.security.KeyStore$ProtectionParameter r2;
        char[] r3;
        java.lang.IllegalStateException r4, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.security.NoSuchAlgorithmException $r5;
        java.security.KeyStore$SecretKeyEntry $r6;
        javax.crypto.SecretKey $r7;
        java.security.KeyStore$PrivateKeyEntry $r8;
        java.security.PrivateKey $r9;
        java.security.cert.Certificate[] $r10;
        java.security.UnrecoverableEntryException $r11;
        java.lang.StringBuilder $r12, $r13, $r15;
        java.security.KeyStore$PasswordProtection $r16;
        java.security.KeyStore$TrustedCertificateEntry $r17;
        java.security.cert.Certificate $r19;
        java.security.KeyStoreException $r20;
        java.security.Key r21;

        r0 := @this: java.security.KeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore$ProtectionParameter;

        $z0 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>(r1);

        if $z0 != 0 goto label01;

        return null;

     label01:
        $z1 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>(r1);

        if $z1 == 0 goto label02;

        $r17 = new java.security.KeyStore$TrustedCertificateEntry;

        $r19 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);

        specialinvoke $r17.<java.security.KeyStore$TrustedCertificateEntry: void <init>(java.security.cert.Certificate)>($r19);

        return $r17;

     label02:
        r3 = null;

        if r2 == null goto label08;

        $z5 = r2 instanceof java.security.KeyStore$PasswordProtection;

        if $z5 == 0 goto label06;

     label03:
        $r16 = (java.security.KeyStore$PasswordProtection) r2;

        r3 = virtualinvoke $r16.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();

     label04:
        goto label08;

     label05:
        $r18 := @caughtexception;

        r4 = $r18;

        $r20 = new java.security.KeyStoreException;

        specialinvoke $r20.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Password was destroyed", r4);

        throw $r20;

     label06:
        $z6 = r2 instanceof java.security.KeyStore$CallbackHandlerProtection;

        if $z6 == 0 goto label07;

        r3 = staticinvoke <java.security.KeyStoreSpi: char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter)>(r2);

        goto label08;

     label07:
        $r11 = new java.security.UnrecoverableEntryException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ProtectionParameter object is not PasswordProtection: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.security.UnrecoverableEntryException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label08:
        $z2 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>(r1);

        if $z2 == 0 goto label10;

        r21 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])>(r1, r3);

        $z3 = r21 instanceof java.security.PrivateKey;

        if $z3 == 0 goto label09;

        $r8 = new java.security.KeyStore$PrivateKeyEntry;

        $r9 = (java.security.PrivateKey) r21;

        $r10 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)>(r1);

        specialinvoke $r8.<java.security.KeyStore$PrivateKeyEntry: void <init>(java.security.PrivateKey,java.security.cert.Certificate[])>($r9, $r10);

        return $r8;

     label09:
        $z4 = r21 instanceof javax.crypto.SecretKey;

        if $z4 == 0 goto label10;

        $r6 = new java.security.KeyStore$SecretKeyEntry;

        $r7 = (javax.crypto.SecretKey) r21;

        specialinvoke $r6.<java.security.KeyStore$SecretKeyEntry: void <init>(javax.crypto.SecretKey)>($r7);

        return $r6;

     label10:
        $r5 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r5.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>("Unknown KeyStore.Entry object");

        throw $r5;

        catch java.lang.IllegalStateException from label03 to label04 with label05;
    }

    public void engineSetEntry(java.lang.String, java.security.KeyStore$Entry, java.security.KeyStore$ProtectionParameter) throws java.security.KeyStoreException
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1, $r10;
        java.security.KeyStore$Entry r2;
        java.security.KeyStore$ProtectionParameter r3;
        java.security.KeyStore$TrustedCertificateEntry r4;
        java.lang.IllegalStateException r5, $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.security.KeyStoreException $r6, $r14, $r16, $r18, $r20;
        java.lang.StringBuilder $r7, $r8, $r9;
        javax.crypto.SecretKey $r11;
        java.security.cert.Certificate[] $r12;
        java.security.PrivateKey $r13;
        java.security.KeyStore$PasswordProtection $r15;
        java.security.cert.Certificate $r17;
        java.lang.Exception $r21, r23;
        char[] r22;
        java.security.KeyStore$PrivateKeyEntry r24;
        java.security.KeyStore$SecretKeyEntry r25;

        r0 := @this: java.security.KeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore$Entry;

        r3 := @parameter2: java.security.KeyStore$ProtectionParameter;

        if r2 != null goto label01;

        $r16 = new java.security.KeyStoreException;

        specialinvoke $r16.<java.security.KeyStoreException: void <init>(java.lang.String)>("entry == null");

        throw $r16;

     label01:
        $z0 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>(r1);

        if $z0 == 0 goto label02;

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineDeleteEntry(java.lang.String)>(r1);

     label02:
        $z1 = r2 instanceof java.security.KeyStore$TrustedCertificateEntry;

        if $z1 == 0 goto label03;

        r4 = (java.security.KeyStore$TrustedCertificateEntry) r2;

        $r17 = virtualinvoke r4.<java.security.KeyStore$TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()>();

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)>(r1, $r17);

        return;

     label03:
        r22 = null;

        if r3 == null goto label12;

        $z5 = r3 instanceof java.security.KeyStore$PasswordProtection;

        if $z5 == 0 goto label07;

     label04:
        $r15 = (java.security.KeyStore$PasswordProtection) r3;

        r22 = virtualinvoke $r15.<java.security.KeyStore$PasswordProtection: char[] getPassword()>();

     label05:
        goto label12;

     label06:
        $r19 := @caughtexception;

        r5 = $r19;

        $r18 = new java.security.KeyStoreException;

        specialinvoke $r18.<java.security.KeyStoreException: void <init>(java.lang.String,java.lang.Throwable)>("Password was destroyed", r5);

        throw $r18;

     label07:
        $z4 = r3 instanceof java.security.KeyStore$CallbackHandlerProtection;

        if $z4 == 0 goto label11;

     label08:
        r22 = staticinvoke <java.security.KeyStoreSpi: char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter)>(r3);

     label09:
        goto label12;

     label10:
        $r21 := @caughtexception;

        r23 = $r21;

        $r20 = new java.security.KeyStoreException;

        specialinvoke $r20.<java.security.KeyStoreException: void <init>(java.lang.Throwable)>(r23);

        throw $r20;

     label11:
        $r14 = new java.security.KeyStoreException;

        specialinvoke $r14.<java.security.KeyStoreException: void <init>(java.lang.String)>("protParam should be PasswordProtection or CallbackHandlerProtection");

        throw $r14;

     label12:
        $z2 = r2 instanceof java.security.KeyStore$PrivateKeyEntry;

        if $z2 == 0 goto label13;

        r24 = (java.security.KeyStore$PrivateKeyEntry) r2;

        $r13 = virtualinvoke r24.<java.security.KeyStore$PrivateKeyEntry: java.security.PrivateKey getPrivateKey()>();

        $r12 = virtualinvoke r24.<java.security.KeyStore$PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()>();

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r1, $r13, r22, $r12);

        return;

     label13:
        $z3 = r2 instanceof java.security.KeyStore$SecretKeyEntry;

        if $z3 == 0 goto label14;

        r25 = (java.security.KeyStore$SecretKeyEntry) r2;

        $r11 = virtualinvoke r25.<java.security.KeyStore$SecretKeyEntry: javax.crypto.SecretKey getSecretKey()>();

        virtualinvoke r0.<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r1, $r11, r22, null);

        return;

     label14:
        $r6 = new java.security.KeyStoreException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Entry object is neither PrivateKeyObject nor SecretKeyEntry nor TrustedCertificateEntry: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r10);

        throw $r6;

        catch java.lang.IllegalStateException from label04 to label05 with label06;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    public boolean engineEntryInstanceOf(java.lang.String, java.lang.Class)
    {
        java.security.KeyStoreSpi r0;
        java.lang.String r1;
        java.lang.Class r2, $r4, $r5, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.security.cert.Certificate $r6, $r7;
        java.lang.ClassNotFoundException $r9;

        r0 := @this: java.security.KeyStoreSpi;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)>(r1);

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z1 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)>(r1);

        if $z1 == 0 goto label03;

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.security.KeyStore$TrustedCertificateEntry");

        $z7 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

     label02:
        return $z7;

     label03:
        $z2 = virtualinvoke r0.<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)>(r1);

        if $z2 == 0 goto label09;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.security.KeyStore$PrivateKeyEntry");

        $z3 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z3 == 0 goto label06;

        $r7 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);

        if $r7 == null goto label04;

        $z6 = 1;

        goto label05;

     label04:
        $z6 = 0;

     label05:
        return $z6;

     label06:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.security.KeyStore$SecretKeyEntry");

        $z4 = virtualinvoke r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z4 == 0 goto label09;

        $r6 = virtualinvoke r0.<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)>(r1);

        if $r6 != null goto label07;

        $z5 = 1;

        goto label08;

     label07:
        $z5 = 0;

     label08:
        return $z5;

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

     label11:
        return 0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label10;
        catch java.lang.ClassNotFoundException from label03 to label05 with label10;
        catch java.lang.ClassNotFoundException from label06 to label08 with label10;
    }

    static char[] getPasswordFromCallBack(java.security.KeyStore$ProtectionParameter) throws java.security.UnrecoverableEntryException
    {
        java.security.KeyStore$ProtectionParameter r0;
        java.lang.String r1, $r14;
        java.lang.Class r2;
        javax.security.auth.callback.CallbackHandler r3;
        javax.security.auth.callback.PasswordCallback[] r4, $r6;
        boolean $z0;
        java.lang.Object $r5;
        javax.security.auth.callback.PasswordCallback $r7, $r8;
        char[] $r9;
        java.security.UnrecoverableEntryException $r10, $r11, $r12;
        java.lang.Exception $r13, r15;

        r0 := @parameter0: java.security.KeyStore$ProtectionParameter;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof java.security.KeyStore$CallbackHandlerProtection;

        if $z0 != 0 goto label2;

        $r11 = new java.security.UnrecoverableEntryException;

        specialinvoke $r11.<java.security.UnrecoverableEntryException: void <init>(java.lang.String)>("Incorrect ProtectionParameter");

        throw $r11;

     label2:
        r1 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("auth.login.defaultCallbackHandler");

        if r1 != null goto label3;

        $r10 = new java.security.UnrecoverableEntryException;

        specialinvoke $r10.<java.security.UnrecoverableEntryException: void <init>(java.lang.String)>("Default CallbackHandler was not defined");

        throw $r10;

     label3:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (javax.security.auth.callback.CallbackHandler) $r5;

        $r6 = newarray (javax.security.auth.callback.PasswordCallback)[1];

        $r7 = new javax.security.auth.callback.PasswordCallback;

        specialinvoke $r7.<javax.security.auth.callback.PasswordCallback: void <init>(java.lang.String,boolean)>("password: ", 1);

        $r6[0] = $r7;

        r4 = $r6;

        interfaceinvoke r3.<javax.security.auth.callback.CallbackHandler: void handle(javax.security.auth.callback.Callback[])>(r4);

        $r8 = r4[0];

        $r9 = virtualinvoke $r8.<javax.security.auth.callback.PasswordCallback: char[] getPassword()>();

     label4:
        return $r9;

     label5:
        $r13 := @caughtexception;

        r15 = $r13;

        $r12 = new java.security.UnrecoverableEntryException;

        $r14 = virtualinvoke r15.<java.lang.Exception: java.lang.String toString()>();

        specialinvoke $r12.<java.security.UnrecoverableEntryException: void <init>(java.lang.String)>($r14);

        throw $r12;

        catch java.lang.Exception from label3 to label4 with label5;
    }
}
