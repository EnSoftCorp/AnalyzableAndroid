public class java.util.concurrent.CyclicBarrier extends java.lang.Object
{
    private final java.util.concurrent.locks.ReentrantLock lock;
    private final java.util.concurrent.locks.Condition trip;
    private final int parties;
    private final java.lang.Runnable barrierCommand;
    private java.util.concurrent.CyclicBarrier$Generation generation;
    private int count;

    private void nextGeneration()
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.locks.Condition $r1;
        int $i0;
        java.util.concurrent.CyclicBarrier$Generation $r2;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        $r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.Condition trip>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Condition: void signalAll()>();

        $i0 = r0.<java.util.concurrent.CyclicBarrier: int parties>;

        r0.<java.util.concurrent.CyclicBarrier: int count> = $i0;

        $r2 = new java.util.concurrent.CyclicBarrier$Generation;

        specialinvoke $r2.<java.util.concurrent.CyclicBarrier$Generation: void <init>(java.util.concurrent.CyclicBarrier$1)>(null);

        r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation> = $r2;

        return;
    }

    private void breakBarrier()
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.CyclicBarrier$Generation $r1;
        int $i0;
        java.util.concurrent.locks.Condition $r2;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        $r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation>;

        $r1.<java.util.concurrent.CyclicBarrier$Generation: boolean broken> = 1;

        $i0 = r0.<java.util.concurrent.CyclicBarrier: int parties>;

        r0.<java.util.concurrent.CyclicBarrier: int count> = $i0;

        $r2 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.Condition trip>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Condition: void signalAll()>();

        return;
    }

    private int dowait(boolean, long) throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.CyclicBarrier r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        long l0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.util.concurrent.CyclicBarrier$Generation r2, $r6, $r14;
        int i1, $i3, $i4, i7;
        java.lang.Runnable r3;
        byte b2, $b5, $b6;
        java.lang.Throwable r4, r5, $r12, $r17;
        java.util.concurrent.BrokenBarrierException $r7, $r13;
        java.util.concurrent.TimeoutException $r8;
        java.util.concurrent.locks.Condition $r9, $r11;
        java.lang.InterruptedException $r10, $r15, r18;
        java.lang.Thread $r16;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        r2 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation>;

        $z2 = r2.<java.util.concurrent.CyclicBarrier$Generation: boolean broken>;

        if $z2 == 0 goto label02;

        $r13 = new java.util.concurrent.BrokenBarrierException;

        specialinvoke $r13.<java.util.concurrent.BrokenBarrierException: void <init>()>();

        throw $r13;

     label02:
        $z3 = staticinvoke <java.lang.Thread: boolean interrupted()>();

        if $z3 == 0 goto label03;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

        $r10 = new java.lang.InterruptedException;

        specialinvoke $r10.<java.lang.InterruptedException: void <init>()>();

        throw $r10;

     label03:
        $i3 = r0.<java.util.concurrent.CyclicBarrier: int count>;

        $i4 = $i3 - 1;

        r0.<java.util.concurrent.CyclicBarrier: int count> = $i4;

        i1 = $i4;

        if i1 != 0 goto label11;

        z1 = 0;

     label04:
        r3 = r0.<java.util.concurrent.CyclicBarrier: java.lang.Runnable barrierCommand>;

        if r3 == null goto label05;

        interfaceinvoke r3.<java.lang.Runnable: void run()>();

     label05:
        z1 = 1;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void nextGeneration()>();

        b2 = 0;

     label06:
        if z1 != 0 goto label07;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

     label07:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return b2;

     label08:
        $r12 := @caughtexception;

        r4 = $r12;

     label09:
        if z1 != 0 goto label10;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

     label10:
        throw r4;

     label11:
        if z0 != 0 goto label12;

        $r11 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.Condition trip>;

        interfaceinvoke $r11.<java.util.concurrent.locks.Condition: void await()>();

        goto label13;

     label12:
        $b5 = l0 cmp 0L;

        if $b5 <= 0 goto label13;

        $r9 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.Condition trip>;

        l0 = interfaceinvoke $r9.<java.util.concurrent.locks.Condition: long awaitNanos(long)>(l0);

     label13:
        goto label16;

     label14:
        $r15 := @caughtexception;

        r18 = $r15;

        $r14 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation>;

        if r2 != $r14 goto label15;

        $z5 = r2.<java.util.concurrent.CyclicBarrier$Generation: boolean broken>;

        if $z5 != 0 goto label15;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

        throw r18;

     label15:
        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r16.<java.lang.Thread: void interrupt()>();

     label16:
        $z4 = r2.<java.util.concurrent.CyclicBarrier$Generation: boolean broken>;

        if $z4 == 0 goto label17;

        $r7 = new java.util.concurrent.BrokenBarrierException;

        specialinvoke $r7.<java.util.concurrent.BrokenBarrierException: void <init>()>();

        throw $r7;

     label17:
        $r6 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation>;

        if r2 == $r6 goto label19;

        i7 = i1;

     label18:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i7;

     label19:
        if z0 == 0 goto label11;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label11;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

        $r8 = new java.util.concurrent.TimeoutException;

        specialinvoke $r8.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r8;

     label20:
        $r17 := @caughtexception;

        r5 = $r17;

     label21:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r5;

        catch java.lang.Throwable from label04 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.InterruptedException from label11 to label13 with label14;
        catch java.lang.Throwable from label01 to label07 with label20;
        catch java.lang.Throwable from label08 to label18 with label20;
        catch java.lang.Throwable from label19 to label21 with label20;
    }

    public void <init>(int, java.lang.Runnable)
    {
        java.util.concurrent.CyclicBarrier r0;
        int i0;
        java.lang.Runnable r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r3;
        java.util.concurrent.locks.Condition $r4;
        java.util.concurrent.CyclicBarrier$Generation $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Runnable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock> = $r2;

        $r3 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock>;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>();

        r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.Condition trip> = $r4;

        $r5 = new java.util.concurrent.CyclicBarrier$Generation;

        specialinvoke $r5.<java.util.concurrent.CyclicBarrier$Generation: void <init>(java.util.concurrent.CyclicBarrier$1)>(null);

        r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation> = $r5;

        if i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        r0.<java.util.concurrent.CyclicBarrier: int parties> = i0;

        r0.<java.util.concurrent.CyclicBarrier: int count> = i0;

        r0.<java.util.concurrent.CyclicBarrier: java.lang.Runnable barrierCommand> = r1;

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.CyclicBarrier r0;
        int i0;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void <init>(int,java.lang.Runnable)>(i0, null);

        return;
    }

    public int getParties()
    {
        java.util.concurrent.CyclicBarrier r0;
        int $i0;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        $i0 = r0.<java.util.concurrent.CyclicBarrier: int parties>;

        return $i0;
    }

    public int await() throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.TimeoutException r1, $r2;
        int $i0;
        java.lang.Error $r3;

        r0 := @this: java.util.concurrent.CyclicBarrier;

     label1:
        $i0 = specialinvoke r0.<java.util.concurrent.CyclicBarrier: int dowait(boolean,long)>(0, 0L);

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        r1 = $r2;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.Throwable)>(r1);

        throw $r3;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public int await(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.BrokenBarrierException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.CyclicBarrier r0;
        long l0, $l1;
        java.util.concurrent.TimeUnit r1;
        int $i2;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $i2 = specialinvoke r0.<java.util.concurrent.CyclicBarrier: int dowait(boolean,long)>(1, $l1);

        return $i2;
    }

    public boolean isBroken()
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.locks.ReentrantLock r1;
        boolean z0;
        java.lang.Throwable r2, $r4;
        java.util.concurrent.CyclicBarrier$Generation $r3;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $r3 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.CyclicBarrier$Generation generation>;

        z0 = $r3.<java.util.concurrent.CyclicBarrier$Generation: boolean broken>;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void reset()
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.locks.ReentrantLock r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void breakBarrier()>();

        specialinvoke r0.<java.util.concurrent.CyclicBarrier: void nextGeneration()>();

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getNumberWaiting()
    {
        java.util.concurrent.CyclicBarrier r0;
        java.util.concurrent.locks.ReentrantLock r1;
        int i0, $i1, $i2;
        java.lang.Throwable r2, $r3;

        r0 := @this: java.util.concurrent.CyclicBarrier;

        r1 = r0.<java.util.concurrent.CyclicBarrier: java.util.concurrent.locks.ReentrantLock lock>;

        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label1:
        $i2 = r0.<java.util.concurrent.CyclicBarrier: int parties>;

        $i1 = r0.<java.util.concurrent.CyclicBarrier: int count>;

        i0 = $i2 - $i1;

     label2:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
