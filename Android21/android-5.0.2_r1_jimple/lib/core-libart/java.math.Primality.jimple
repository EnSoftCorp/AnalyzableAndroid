class java.math.Primality extends java.lang.Object
{
    private static final int[] primes;
    private static final java.math.BigInteger[] BIprimes;

    private void <init>()
    {
        java.math.Primality r0;

        r0 := @this: java.math.Primality;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.math.BigInteger nextProbablePrime(java.math.BigInteger)
    {
        java.math.BigInteger r0, $r9, $r17;
        int i0, i1, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26, i27, i28, i29;
        short s2;
        int[] r1, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        boolean[] r2;
        java.math.BigInt r3, r4, $r6, r19;
        boolean $z0, $z1;
        long $l24;
        java.math.BigInteger[] $r18;

        r0 := @parameter0: java.math.BigInteger;

        s2 = 1024;

        $r5 = <java.math.Primality: int[] primes>;

        $i4 = lengthof $r5;

        r1 = newarray (int)[$i4];

        r2 = newarray (boolean)[s2];

        r3 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInt getBigInt()>();

        $i5 = virtualinvoke r3.<java.math.BigInt: int bitLength()>();

        if $i5 > 10 goto label03;

        $l24 = virtualinvoke r3.<java.math.BigInt: long longInt()>();

        i3 = (int) $l24;

        $r16 = <java.math.Primality: int[] primes>;

        $r14 = <java.math.Primality: int[] primes>;

        $i22 = lengthof $r14;

        $i23 = $i22 - 1;

        $i26 = $r16[$i23];

        if i3 >= $i26 goto label03;

        i0 = 0;

     label01:
        $r15 = <java.math.Primality: int[] primes>;

        $i25 = $r15[i0];

        if i3 < $i25 goto label02;

        i0 = i0 + 1;

        goto label01;

     label02:
        $r18 = <java.math.Primality: java.math.BigInteger[] BIprimes>;

        $r17 = $r18[i0];

        return $r17;

     label03:
        r19 = virtualinvoke r3.<java.math.BigInt: java.math.BigInt copy()>();

        $r6 = new java.math.BigInt;

        specialinvoke $r6.<java.math.BigInt: void <init>()>();

        r4 = $r6;

        $i6 = staticinvoke <java.math.BigInt: int remainderByPositiveInt(java.math.BigInt,int)>(r3, 2);

        $i7 = $i6 + 1;

        virtualinvoke r19.<java.math.BigInt: void addPositiveInt(int)>($i7);

        i27 = 0;

     label04:
        $r7 = <java.math.Primality: int[] primes>;

        $i8 = lengthof $r7;

        if i27 >= $i8 goto label05;

        $r13 = <java.math.Primality: int[] primes>;

        $i21 = $r13[i27];

        $i19 = staticinvoke <java.math.BigInt: int remainderByPositiveInt(java.math.BigInt,int)>(r19, $i21);

        $i20 = $i19 - s2;

        r1[i27] = $i20;

        i27 = i27 + 1;

        goto label04;

     label05:
        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>(r2, 0);

        i28 = 0;

     label06:
        $r8 = <java.math.Primality: int[] primes>;

        $i9 = lengthof $r8;

        if i28 >= $i9 goto label11;

        $i10 = r1[i28];

        $i11 = $i10 + s2;

        $r10 = <java.math.Primality: int[] primes>;

        $i12 = $r10[i28];

        $i14 = $i11 % $i12;

        r1[i28] = $i14;

        $i13 = r1[i28];

        if $i13 != 0 goto label07;

        $i17 = 0;

        goto label08;

     label07:
        $r11 = <java.math.Primality: int[] primes>;

        $i18 = $r11[i28];

        $i15 = r1[i28];

        $i17 = $i18 - $i15;

     label08:
        i1 = $i17;

     label09:
        if i1 >= s2 goto label10;

        r2[i1] = 1;

        $r12 = <java.math.Primality: int[] primes>;

        $i16 = $r12[i28];

        i1 = i1 + $i16;

        goto label09;

     label10:
        i28 = i28 + 1;

        goto label06;

     label11:
        i29 = 0;

     label12:
        if i29 >= s2 goto label14;

        $z0 = r2[i29];

        if $z0 != 0 goto label13;

        virtualinvoke r4.<java.math.BigInt: void putCopy(java.math.BigInt)>(r19);

        virtualinvoke r4.<java.math.BigInt: void addPositiveInt(int)>(i29);

        $z1 = virtualinvoke r4.<java.math.BigInt: boolean isPrime(int)>(100);

        if $z1 == 0 goto label13;

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(java.math.BigInt)>(r4);

        return $r9;

     label13:
        i29 = i29 + 1;

        goto label12;

     label14:
        virtualinvoke r19.<java.math.BigInt: void addPositiveInt(int)>(s2);

        goto label05;
    }

    static void <clinit>()
    {
        int i0, $i1, $i2, $i3;
        int[] $r0, $r1, $r3, $r4;
        java.math.BigInteger[] $r2, $r5;
        long $l4;
        java.math.BigInteger $r6;

        $r0 = newarray (int)[172];

        $r0[0] = 2;

        $r0[1] = 3;

        $r0[2] = 5;

        $r0[3] = 7;

        $r0[4] = 11;

        $r0[5] = 13;

        $r0[6] = 17;

        $r0[7] = 19;

        $r0[8] = 23;

        $r0[9] = 29;

        $r0[10] = 31;

        $r0[11] = 37;

        $r0[12] = 41;

        $r0[13] = 43;

        $r0[14] = 47;

        $r0[15] = 53;

        $r0[16] = 59;

        $r0[17] = 61;

        $r0[18] = 67;

        $r0[19] = 71;

        $r0[20] = 73;

        $r0[21] = 79;

        $r0[22] = 83;

        $r0[23] = 89;

        $r0[24] = 97;

        $r0[25] = 101;

        $r0[26] = 103;

        $r0[27] = 107;

        $r0[28] = 109;

        $r0[29] = 113;

        $r0[30] = 127;

        $r0[31] = 131;

        $r0[32] = 137;

        $r0[33] = 139;

        $r0[34] = 149;

        $r0[35] = 151;

        $r0[36] = 157;

        $r0[37] = 163;

        $r0[38] = 167;

        $r0[39] = 173;

        $r0[40] = 179;

        $r0[41] = 181;

        $r0[42] = 191;

        $r0[43] = 193;

        $r0[44] = 197;

        $r0[45] = 199;

        $r0[46] = 211;

        $r0[47] = 223;

        $r0[48] = 227;

        $r0[49] = 229;

        $r0[50] = 233;

        $r0[51] = 239;

        $r0[52] = 241;

        $r0[53] = 251;

        $r0[54] = 257;

        $r0[55] = 263;

        $r0[56] = 269;

        $r0[57] = 271;

        $r0[58] = 277;

        $r0[59] = 281;

        $r0[60] = 283;

        $r0[61] = 293;

        $r0[62] = 307;

        $r0[63] = 311;

        $r0[64] = 313;

        $r0[65] = 317;

        $r0[66] = 331;

        $r0[67] = 337;

        $r0[68] = 347;

        $r0[69] = 349;

        $r0[70] = 353;

        $r0[71] = 359;

        $r0[72] = 367;

        $r0[73] = 373;

        $r0[74] = 379;

        $r0[75] = 383;

        $r0[76] = 389;

        $r0[77] = 397;

        $r0[78] = 401;

        $r0[79] = 409;

        $r0[80] = 419;

        $r0[81] = 421;

        $r0[82] = 431;

        $r0[83] = 433;

        $r0[84] = 439;

        $r0[85] = 443;

        $r0[86] = 449;

        $r0[87] = 457;

        $r0[88] = 461;

        $r0[89] = 463;

        $r0[90] = 467;

        $r0[91] = 479;

        $r0[92] = 487;

        $r0[93] = 491;

        $r0[94] = 499;

        $r0[95] = 503;

        $r0[96] = 509;

        $r0[97] = 521;

        $r0[98] = 523;

        $r0[99] = 541;

        $r0[100] = 547;

        $r0[101] = 557;

        $r0[102] = 563;

        $r0[103] = 569;

        $r0[104] = 571;

        $r0[105] = 577;

        $r0[106] = 587;

        $r0[107] = 593;

        $r0[108] = 599;

        $r0[109] = 601;

        $r0[110] = 607;

        $r0[111] = 613;

        $r0[112] = 617;

        $r0[113] = 619;

        $r0[114] = 631;

        $r0[115] = 641;

        $r0[116] = 643;

        $r0[117] = 647;

        $r0[118] = 653;

        $r0[119] = 659;

        $r0[120] = 661;

        $r0[121] = 673;

        $r0[122] = 677;

        $r0[123] = 683;

        $r0[124] = 691;

        $r0[125] = 701;

        $r0[126] = 709;

        $r0[127] = 719;

        $r0[128] = 727;

        $r0[129] = 733;

        $r0[130] = 739;

        $r0[131] = 743;

        $r0[132] = 751;

        $r0[133] = 757;

        $r0[134] = 761;

        $r0[135] = 769;

        $r0[136] = 773;

        $r0[137] = 787;

        $r0[138] = 797;

        $r0[139] = 809;

        $r0[140] = 811;

        $r0[141] = 821;

        $r0[142] = 823;

        $r0[143] = 827;

        $r0[144] = 829;

        $r0[145] = 839;

        $r0[146] = 853;

        $r0[147] = 857;

        $r0[148] = 859;

        $r0[149] = 863;

        $r0[150] = 877;

        $r0[151] = 881;

        $r0[152] = 883;

        $r0[153] = 887;

        $r0[154] = 907;

        $r0[155] = 911;

        $r0[156] = 919;

        $r0[157] = 929;

        $r0[158] = 937;

        $r0[159] = 941;

        $r0[160] = 947;

        $r0[161] = 953;

        $r0[162] = 967;

        $r0[163] = 971;

        $r0[164] = 977;

        $r0[165] = 983;

        $r0[166] = 991;

        $r0[167] = 997;

        $r0[168] = 1009;

        $r0[169] = 1013;

        $r0[170] = 1019;

        $r0[171] = 1021;

        <java.math.Primality: int[] primes> = $r0;

        $r1 = <java.math.Primality: int[] primes>;

        $i1 = lengthof $r1;

        $r2 = newarray (java.math.BigInteger)[$i1];

        <java.math.Primality: java.math.BigInteger[] BIprimes> = $r2;

        i0 = 0;

     label1:
        $r3 = <java.math.Primality: int[] primes>;

        $i2 = lengthof $r3;

        if i0 >= $i2 goto label2;

        $r5 = <java.math.Primality: java.math.BigInteger[] BIprimes>;

        $r4 = <java.math.Primality: int[] primes>;

        $i3 = $r4[i0];

        $l4 = (long) $i3;

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l4);

        $r5[i0] = $r6;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }
}
