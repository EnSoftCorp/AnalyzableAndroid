public abstract class javax.net.ssl.SSLServerSocketFactory extends javax.net.ServerSocketFactory
{
    private static javax.net.ServerSocketFactory defaultServerSocketFactory;
    private static java.lang.String defaultName;
    private static int lastCacheVersion;

    public static synchronized javax.net.ServerSocketFactory getDefault()
    {
        int i0, $i1;
        java.lang.ClassLoader r0;
        java.lang.Class r1;
        javax.net.ServerSocketFactory $r2, $r4, $r5, $r6, $r14, $r16;
        java.lang.String $r3, $r9, $r10, $r12;
        javax.net.ssl.DefaultSSLServerSocketFactory $r7;
        javax.net.ssl.SSLServerSocketFactory $r8;
        java.lang.Thread $r11;
        java.lang.Object $r13;
        java.security.NoSuchAlgorithmException $r15;
        java.lang.Exception $r17;
        javax.net.ssl.SSLContext r19;

        i0 = staticinvoke <org.apache.harmony.security.fortress.Services: int getCacheVersion()>();

        $i1 = <javax.net.ssl.SSLServerSocketFactory: int lastCacheVersion>;

        if $i1 == i0 goto label01;

        <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory> = null;

        <javax.net.ssl.SSLServerSocketFactory: java.lang.String defaultName> = null;

        <javax.net.ssl.SSLServerSocketFactory: int lastCacheVersion> = i0;

     label01:
        $r2 = <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory>;

        if $r2 == null goto label02;

        $r16 = <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory>;

        return $r16;

     label02:
        $r3 = <javax.net.ssl.SSLServerSocketFactory: java.lang.String defaultName>;

        if $r3 != null goto label06;

        $r9 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.ServerSocketFactory.provider");

        <javax.net.ssl.SSLServerSocketFactory: java.lang.String defaultName> = $r9;

        $r10 = <javax.net.ssl.SSLServerSocketFactory: java.lang.String defaultName>;

        if $r10 == null goto label06;

        $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0 = virtualinvoke $r11.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r0 != null goto label03;

        r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label03:
        $r12 = <javax.net.ssl.SSLServerSocketFactory: java.lang.String defaultName>;

        r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r12, 1, r0);

        $r13 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r14 = (javax.net.ServerSocketFactory) $r13;

        <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory> = $r14;

     label04:
        goto label06;

     label05:
        $r17 := @caughtexception;

     label06:
        $r4 = <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory>;

        if $r4 != null goto label11;

     label07:
        r19 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>();

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        r19 = null;

     label10:
        if r19 == null goto label11;

        $r8 = virtualinvoke r19.<javax.net.ssl.SSLContext: javax.net.ssl.SSLServerSocketFactory getServerSocketFactory()>();

        <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory> = $r8;

     label11:
        $r5 = <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory>;

        if $r5 != null goto label12;

        $r7 = new javax.net.ssl.DefaultSSLServerSocketFactory;

        specialinvoke $r7.<javax.net.ssl.DefaultSSLServerSocketFactory: void <init>(java.lang.String)>("No ServerSocketFactory installed");

        <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory> = $r7;

     label12:
        $r6 = <javax.net.ssl.SSLServerSocketFactory: javax.net.ServerSocketFactory defaultServerSocketFactory>;

        return $r6;

        catch java.lang.Exception from label03 to label04 with label05;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
    }

    protected void <init>()
    {
        javax.net.ssl.SSLServerSocketFactory r0;

        r0 := @this: javax.net.ssl.SSLServerSocketFactory;

        specialinvoke r0.<javax.net.ServerSocketFactory: void <init>()>();

        return;
    }

    public abstract java.lang.String[] getDefaultCipherSuites();

    public abstract java.lang.String[] getSupportedCipherSuites();

    static void <clinit>()
    {
        <javax.net.ssl.SSLServerSocketFactory: int lastCacheVersion> = -1;

        return;
    }
}
