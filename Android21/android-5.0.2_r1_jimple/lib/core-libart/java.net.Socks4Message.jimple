class java.net.Socks4Message extends java.lang.Object
{
    static final int COMMAND_CONNECT;
    static final int COMMAND_BIND;
    static final int RETURN_SUCCESS;
    static final int RETURN_FAILURE;
    static final int RETURN_CANNOT_CONNECT_TO_IDENTD;
    static final int RETURN_DIFFERENT_USER_IDS;
    static final int REPLY_LENGTH;
    static final int INDEX_VERSION;
    private static final int SOCKS_VERSION;
    private static final int INDEX_COMMAND;
    private static final int INDEX_PORT;
    private static final int INDEX_IP;
    private static final int INDEX_USER_ID;
    private static final int BUFFER_LENGTH;
    private static final int MAX_USER_ID_LENGTH;
    protected byte[] buffer;

    public void <init>()
    {
        java.net.Socks4Message r0;
        byte[] $r1;

        r0 := @this: java.net.Socks4Message;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[256];

        r0.<java.net.Socks4Message: byte[] buffer> = $r1;

        specialinvoke r0.<java.net.Socks4Message: void setVersionNumber(int)>(4);

        return;
    }

    public int getCommandOrResult()
    {
        java.net.Socks4Message r0;
        byte[] $r1;
        byte $b0;

        r0 := @this: java.net.Socks4Message;

        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b0 = $r1[1];

        return $b0;
    }

    public void setCommandOrResult(int)
    {
        java.net.Socks4Message r0;
        int i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b1 = (byte) i0;

        $r1[1] = $b1;

        return;
    }

    public int getPort()
    {
        java.net.Socks4Message r0;
        java.nio.ByteOrder $r1;
        byte[] $r2;
        short $s0;

        r0 := @this: java.net.Socks4Message;

        $r2 = r0.<java.net.Socks4Message: byte[] buffer>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        $s0 = staticinvoke <libcore.io.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>($r2, 2, $r1);

        return $s0;
    }

    public void setPort(int)
    {
        java.net.Socks4Message r0;
        int i0;
        java.nio.ByteOrder $r1;
        short $s1;
        byte[] $r2;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        $r2 = r0.<java.net.Socks4Message: byte[] buffer>;

        $s1 = (short) i0;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        staticinvoke <libcore.io.Memory: void pokeShort(byte[],int,short,java.nio.ByteOrder)>($r2, 2, $s1, $r1);

        return;
    }

    public int getIP()
    {
        java.net.Socks4Message r0;
        java.nio.ByteOrder $r1;
        byte[] $r2;
        int $i0;

        r0 := @this: java.net.Socks4Message;

        $r2 = r0.<java.net.Socks4Message: byte[] buffer>;

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        $i0 = staticinvoke <libcore.io.Memory: int peekInt(byte[],int,java.nio.ByteOrder)>($r2, 4, $r1);

        return $i0;
    }

    public void setIP(byte[])
    {
        java.net.Socks4Message r0;
        byte[] r1, $r2, $r3, $r4, $r5;
        byte $b0, $b1, $b2, $b3;

        r0 := @this: java.net.Socks4Message;

        r1 := @parameter0: byte[];

        $r2 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b0 = r1[0];

        $r2[4] = $b0;

        $r3 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b1 = r1[1];

        $r3[5] = $b1;

        $r4 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b2 = r1[2];

        $r4[6] = $b2;

        $r5 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b3 = r1[3];

        $r5[7] = $b3;

        return;
    }

    public java.lang.String getUserId()
    {
        java.net.Socks4Message r0;
        java.lang.String $r1;

        r0 := @this: java.net.Socks4Message;

        $r1 = specialinvoke r0.<java.net.Socks4Message: java.lang.String getString(int,int)>(8, 248);

        return $r1;
    }

    public void setUserId(java.lang.String)
    {
        java.net.Socks4Message r0;
        java.lang.String r1;

        r0 := @this: java.net.Socks4Message;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.net.Socks4Message: void setString(int,int,java.lang.String)>(8, 248, r1);

        return;
    }

    public java.lang.String toString()
    {
        java.net.Socks4Message r0;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r7, $r13, $r14, $r16;

        r0 := @this: java.net.Socks4Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(50);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Version: ");

        $i0 = specialinvoke r0.<java.net.Socks4Message: int getVersionNumber()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Command: ");

        $i1 = virtualinvoke r0.<java.net.Socks4Message: int getCommandOrResult()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Port: ");

        $i2 = virtualinvoke r0.<java.net.Socks4Message: int getPort()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IP: ");

        $i3 = virtualinvoke r0.<java.net.Socks4Message: int getIP()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" User ID: ");

        $r14 = virtualinvoke r0.<java.net.Socks4Message: java.lang.String getUserId()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;
    }

    public int getLength()
    {
        java.net.Socks4Message r0;
        byte[] $r1;
        byte $b0;
        int i1, i2;

        r0 := @this: java.net.Socks4Message;

        i1 = 8;

     label1:
        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b0 = $r1[i1];

        if $b0 == 0 goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        i2 = i1 + 1;

        return i2;
    }

    public java.lang.String getErrorString(int)
    {
        java.net.Socks4Message r0;
        int i0;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 91: goto label1;
            case 92: goto label2;
            case 93: goto label3;
            default: goto label4;
        };

     label1:
        return "Failure to connect to SOCKS server";

     label2:
        return "Unable to connect to identd to verify user";

     label3:
        return "Failure - user ids do not match";

     label4:
        return "Success";
    }

    public byte[] getBytes()
    {
        java.net.Socks4Message r0;
        byte[] $r1;

        r0 := @this: java.net.Socks4Message;

        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        return $r1;
    }

    private java.lang.String getString(int, int)
    {
        java.net.Socks4Message r0;
        int i0, i1, i2, i3, $i4;
        java.lang.String $r1;
        java.nio.charset.Charset $r2;
        byte[] $r3, $r4;
        byte $b5;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

        i3 = i2 + i1;

     label1:
        if i2 >= i3 goto label2;

        $r4 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b5 = $r4[i2];

        if $b5 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.String;

        $r3 = r0.<java.net.Socks4Message: byte[] buffer>;

        $i4 = i2 - i0;

        $r2 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>($r3, i0, $i4, $r2);

        return $r1;
    }

    private int getVersionNumber()
    {
        java.net.Socks4Message r0;
        byte[] $r1;
        byte $b0;

        r0 := @this: java.net.Socks4Message;

        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b0 = $r1[0];

        return $b0;
    }

    private void setString(int, int, java.lang.String)
    {
        java.net.Socks4Message r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1;
        byte[] r2, $r4, $r5;
        java.nio.charset.Charset $r3;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset ISO_8859_1>;

        r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3);

        $i3 = lengthof r2;

        i2 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i1);

        $r4 = r0.<java.net.Socks4Message: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>(r2, 0, $r4, i0, i2);

        $r5 = r0.<java.net.Socks4Message: byte[] buffer>;

        $i4 = i0 + i2;

        $r5[$i4] = 0;

        return;
    }

    private void setVersionNumber(int)
    {
        java.net.Socks4Message r0;
        int i0;
        byte $b1;
        byte[] $r1;

        r0 := @this: java.net.Socks4Message;

        i0 := @parameter0: int;

        $r1 = r0.<java.net.Socks4Message: byte[] buffer>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        return;
    }

    public static void <clinit>()
    {
        <java.net.Socks4Message: int MAX_USER_ID_LENGTH> = 248;

        <java.net.Socks4Message: int BUFFER_LENGTH> = 256;

        <java.net.Socks4Message: int INDEX_USER_ID> = 8;

        <java.net.Socks4Message: int INDEX_IP> = 4;

        <java.net.Socks4Message: int INDEX_PORT> = 2;

        <java.net.Socks4Message: int INDEX_COMMAND> = 1;

        <java.net.Socks4Message: int SOCKS_VERSION> = 4;

        <java.net.Socks4Message: int INDEX_VERSION> = 0;

        <java.net.Socks4Message: int REPLY_LENGTH> = 8;

        <java.net.Socks4Message: int RETURN_DIFFERENT_USER_IDS> = 93;

        <java.net.Socks4Message: int RETURN_CANNOT_CONNECT_TO_IDENTD> = 92;

        <java.net.Socks4Message: int RETURN_FAILURE> = 91;

        <java.net.Socks4Message: int RETURN_SUCCESS> = 90;

        <java.net.Socks4Message: int COMMAND_BIND> = 2;

        <java.net.Socks4Message: int COMMAND_CONNECT> = 1;

        return;
    }
}
