public class org.apache.harmony.security.asn1.BerInputStream extends java.lang.Object
{
    private final java.io.InputStream in;
    protected byte[] buffer;
    protected int offset;
    private static final int BUF_INCREASE_SIZE;
    protected static final int INDEFINIT_LENGTH;
    public int tag;
    protected int length;
    public java.lang.Object content;
    protected int tagOffset;
    protected int contentOffset;
    public int choiceIndex;
    public int[] times;
    public int oidElement;
    protected boolean isVerify;
    protected boolean isIndefinedLength;
    private java.lang.Object[][] pool;

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] r1;
        int $i0;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void <init>(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    public void <init>(byte[], int, int) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7;
        org.apache.harmony.security.asn1.ASN1Exception $r2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = 0;

        r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in> = null;

        r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer> = r1;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = i0;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i3 == -1 goto label1;

        $i7 = i0 + i1;

        $i5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i6 = $i5 + $i4;

        if $i7 == $i6 goto label1;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Wrong content length");

        throw $r2;

     label1:
        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void <init>(java.io.InputStream,int)>(r1, 16384);

        return;
    }

    public void <init>(java.io.InputStream, int) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        java.io.InputStream r1;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        byte[] r2, $r3, $r5, $r6;
        org.apache.harmony.security.asn1.ASN1Exception $r4;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: java.io.InputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = 0;

        r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in> = r1;

        $r3 = newarray (byte)[i0];

        r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer> = $r3;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i2 == -1 goto label1;

        $r5 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i6 = lengthof $r5;

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i5 = $i4 + $i3;

        if $i6 >= $i5 goto label2;

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i9 = $i8 + $i7;

        r2 = newarray (byte)[$i9];

        $r6 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r6, 0, r2, 0, $i10);

        r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer> = r2;

        goto label2;

     label1:
        r0.<org.apache.harmony.security.asn1.BerInputStream: boolean isIndefinedLength> = 1;

        $r4 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r4.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding indefinite length encoding is not supported");

        throw $r4;

     label2:
        return;
    }

    public final void reset(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] r1;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: byte[];

        r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer> = r1;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        return;
    }

    public int next() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r8;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r9, $r10, $r11;
        java.lang.String $r5, $r12;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset> = $i3;

        $i4 = virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int read()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: int tag> = $i4;

        $i5 = virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int read()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: int length> = $i5;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i6 == 128 goto label5;

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i10 = $i9 & 128;

        if $i10 == 0 goto label6;

        $i11 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        i0 = $i11 & 127;

        if i0 <= 5 goto label1;

        $r8 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too long encoding at [");

        $i18 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r12);

        throw $r8;

     label1:
        $i12 = virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int read()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: int length> = $i12;

        i1 = 1;

     label2:
        if i1 >= i0 goto label3;

        i2 = virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int read()>();

        $i15 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i17 = $i15 << 8;

        $i16 = $i17 + i2;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int length> = $i16;

        i1 = i1 + 1;

        goto label2;

     label3:
        $i13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i13 <= 16777215 goto label4;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Too long encoding at [");

        $i14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r5);

        throw $r1;

     label4:
        goto label6;

     label5:
        r0.<org.apache.harmony.security.asn1.BerInputStream: int length> = -1;

     label6:
        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset> = $i7;

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        return $i8;
    }

    public static int getLength(byte[])
    {
        byte[] r0;
        int i0, i1, i2, $i4, $i5, $i6, $i8, $i11;
        byte $b3, $b7, $b9;
        short $s10;

        r0 := @parameter0: byte[];

        $b3 = r0[1];

        i0 = $b3 & 255;

        i1 = 0;

        $i4 = i0 & 128;

        if $i4 == 0 goto label2;

        i1 = i0 & 127;

        $b7 = r0[2];

        i0 = $b7 & 255;

        i2 = 3;

     label1:
        $i8 = i1 + 2;

        if i2 >= $i8 goto label2;

        $i11 = i0 << 8;

        $b9 = r0[i2];

        $s10 = $b9 & 255;

        i0 = $i11 + $s10;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i5 = 2 + i1;

        $i6 = $i5 + i0;

        return $i6;
    }

    public void readBitString() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r2, $r5, $r12, $r16;
        byte[] $r3, $r4;
        byte $b4, $b7;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15, $r18, $r19, $r20, $r21;
        java.lang.String $r9, $r17, $r22;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 != 3 goto label3;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i2 != 0 goto label1;

        $r16 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Bitstring: wrong length. Tag at [");

        $i10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r22);

        throw $r16;

     label1:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $b4 = $r3[$i3];

        if $b4 <= 7 goto label2;

        $r12 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Bitstring: wrong content at [");

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. A number of unused bits MUST be in range 0 to 7");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r17);

        throw $r12;

     label2:
        $i5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i5 != 1 goto label5;

        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $b7 = $r4[$i6];

        if $b7 == 0 goto label5;

        $r5 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Bitstring: wrong content at [");

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. For empty string unused bits MUST be 0");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 != 35 goto label4;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding constructed ASN.1 bitstring  type is not provided");

        throw $r2;

     label4:
        $r1 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("bitstring");

        throw $r1;

     label5:
        return;
    }

    public void readEnumerated() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i9, $i10;
        byte[] $r1, $r2;
        byte $b5, $b8;
        org.apache.harmony.security.asn1.ASN1Exception $r3, $r8, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r14;
        java.lang.String $r9, $r13;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 == 10 goto label1;

        $r15 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("enumerated");

        throw $r15;

     label1:
        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i2 != 0 goto label2;

        $r8 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 enumerated: wrong length for identifier at [");

        $i10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i3 <= 1 goto label5;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $b5 = $r1[$i4];

        i0 = $b5 & 255;

        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i7 = $i6 + 1;

        $b8 = $r2[$i7];

        if $b8 >= 0 goto label3;

        i0 = i0 + 256;

     label3:
        if i0 == 0 goto label4;

        if i0 != 511 goto label5;

     label4:
        $r3 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 enumerated: wrong content at [");

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. An integer MUST be encoded in minimum number of octets");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r9);

        throw $r3;

     label5:
        return;
    }

    public void readBoolean() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0, $i1, $i2;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r7;
        java.lang.StringBuilder $r2, $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 == 1 goto label1;

        $r7 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("boolean");

        throw $r7;

     label1:
        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i1 == 1 goto label2;

        $r1 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong length for ASN.1 boolean at [");

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r6);

        throw $r1;

     label2:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        return;
    }

    public void readGeneralizedTime() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte b0, $b5;
        int $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r2, $r21, $r27, $r30;
        byte[] $r3, $r16;
        int[] $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17;
        java.lang.StringBuilder $r18, $r19, $r22, $r23, $r24, $r25, $r28, $r29;
        java.lang.String $r20, $r26;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 != 24 goto label7;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i4 = $i3 - 1;

        $b5 = $r3[$i4];

        if $b5 == 90 goto label1;

        $r30 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r30.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("ASN.1 GeneralizedTime: encoded format is not implemented");

        throw $r30;

     label1:
        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i6 == 15 goto label3;

        $i39 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i39 < 17 goto label2;

        $i41 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i41 <= 19 goto label3;

     label2:
        $r27 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 GeneralizedTime wrongly encoded at [");

        $i42 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r24 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i42);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r26);

        throw $r27;

     label3:
        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i7 <= 16 goto label4;

        $r16 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i38 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i37 = $i38 + 14;

        b0 = $r16[$i37];

        if b0 == 46 goto label4;

        if b0 == 44 goto label4;

        $r21 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 GeneralizedTime wrongly encoded at [");

        $i40 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r18 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i40);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r20);

        throw $r21;

     label4:
        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        if $r4 != null goto label5;

        $r17 = newarray (int)[7];

        r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times> = $r17;

     label5:
        $r5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i10 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i8, 4);

        $r5[0] = $i10;

        $r6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i11 = $i9 + 4;

        $i12 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i11, 2);

        $r6[1] = $i12;

        $r7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i13 = $i14 + 6;

        $i16 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i13, 2);

        $r7[2] = $i16;

        $r8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i15 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i17 = $i15 + 8;

        $i18 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i17, 2);

        $r8[3] = $i18;

        $r9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i19 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i20 = $i19 + 10;

        $i22 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i20, 2);

        $r9[4] = $i22;

        $r10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i23 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i21 = $i23 + 12;

        $i26 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i21, 2);

        $r10[5] = $i26;

        $i24 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i24 <= 16 goto label9;

        $r11 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i25 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i27 = $i25 + 15;

        $i28 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i29 = $i28 - 16;

        $i32 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i27, $i29);

        $r11[6] = $i32;

        $i31 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i31 != 17 goto label6;

        $r14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $r15 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i36 = $r15[6];

        $i35 = $i36 * 100;

        $r14[6] = $i35;

        goto label9;

     label6:
        $i30 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i30 != 18 goto label9;

        $r12 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $r13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i34 = $r13[6];

        $i33 = $i34 * 10;

        $r12[6] = $i33;

        goto label9;

     label7:
        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i2 != 56 goto label8;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding constructed ASN.1 GeneralizedTime type is not supported");

        throw $r2;

     label8:
        $r1 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("GeneralizedTime");

        throw $r1;

     label9:
        return;
    }

    public void readUTCTime() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r2, $r15, $r21, $r22;
        byte[] $r3;
        byte $b5;
        int[] $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r16;
        java.lang.StringBuilder $r14, $r17, $r18, $r19, $r20, $r25, $r26;
        java.lang.String $r23, $r24;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 != 23 goto label09;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        tableswitch($i2)
        {
            case 11: goto label01;
            case 12: goto label03;
            case 13: goto label01;
            case 14: goto label03;
            case 15: goto label02;
            case 16: goto label03;
            case 17: goto label02;
            default: goto label03;
        };

     label01:
        goto label04;

     label02:
        $r22 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r22.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("ASN.1 UTCTime: local time format is not supported");

        throw $r22;

     label03:
        $r21 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 UTCTime: wrong length, identifier at ");

        $i30 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r24);

        throw $r21;

     label04:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i4 = $i3 - 1;

        $b5 = $r3[$i4];

        if $b5 == 90 goto label05;

        $r15 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 UTCTime wrongly encoded at [");

        $i29 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r23);

        throw $r15;

     label05:
        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        if $r4 != null goto label06;

        $r16 = newarray (int)[7];

        r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times> = $r16;

     label06:
        $r5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i7 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i6, 2);

        $r5[0] = $i7;

        $r6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i8 = $r6[0];

        if $i8 <= 49 goto label07;

        $r13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i26 = $r13[0];

        $i28 = $i26 + 1900;

        $r13[0] = $i28;

        goto label08;

     label07:
        $r7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i10 = $r7[0];

        $i9 = $i10 + 2000;

        $r7[0] = $i9;

     label08:
        $r8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i12 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i11 = $i12 + 2;

        $i14 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i11, 2);

        $r8[1] = $i14;

        $r9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i15 = $i13 + 4;

        $i16 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i15, 2);

        $r9[2] = $i16;

        $r10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i18 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i17 = $i18 + 6;

        $i19 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i17, 2);

        $r10[3] = $i19;

        $r11 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i20 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i22 = $i20 + 8;

        $i21 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i22, 2);

        $r11[4] = $i21;

        $i24 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i24 != 13 goto label11;

        $r12 = r0.<org.apache.harmony.security.asn1.BerInputStream: int[] times>;

        $i25 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i23 = $i25 + 10;

        $i27 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int strToInt(int,int)>($i23, 2);

        $r12[5] = $i27;

        goto label11;

     label09:
        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 != 55 goto label10;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding constructed ASN.1 UTCTime type is not supported");

        throw $r2;

     label10:
        $r1 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("UTCTime");

        throw $r1;

     label11:
        return;
    }

    private int strToInt(int, int) throws org.apache.harmony.security.asn1.ASN1Exception
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, i1, i2, i3, i4, i5, $i7;
        byte[] $r1;
        byte $b6;
        org.apache.harmony.security.asn1.ASN1Exception $r2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = 0;

        i3 = i0;

        i4 = i0 + i1;

     label1:
        if i3 >= i4 goto label4;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $b6 = $r1[i3];

        i5 = $b6 - 48;

        if i5 < 0 goto label2;

        if i5 <= 9 goto label3;

     label2:
        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Time encoding has invalid char");

        throw $r2;

     label3:
        $i7 = i2 * 10;

        i2 = $i7 + i5;

        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    public void readInteger() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte b0, b1, $b12;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i14, $i15, $i16, $i17;
        byte[] $r1, $r2;
        org.apache.harmony.security.asn1.ASN1Exception $r3, $r10, $r15;
        short $s13;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r11, $r12, $r13;
        java.lang.String $r7, $r14;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i2 == 2 goto label1;

        $r15 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("integer");

        throw $r15;

     label1:
        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i3 >= 1 goto label2;

        $r10 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong length for ASN.1 integer at [");

        $i17 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r14);

        throw $r10;

     label2:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i4 <= 1 goto label5;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i7 = $i6 - $i5;

        b0 = $r1[$i7];

        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i10 = $i9 - $i8;

        $i11 = $i10 + 1;

        $b12 = $r2[$i11];

        $s13 = $b12 & 128;

        b1 = (byte) $s13;

        if b0 != 0 goto label3;

        if b1 == 0 goto label4;

     label3:
        if b0 != -1 goto label5;

        if b1 != -128 goto label5;

     label4:
        $r3 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong content for ASN.1 integer at [");

        $i14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i15 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i16 = $i14 - $i15;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. An integer MUST be encoded in minimum number of octets");

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r7);

        throw $r3;

     label5:
        return;
    }

    public void readOctetString() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Exception $r1, $r2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 != 4 goto label1;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        goto label3;

     label1:
        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 != 36 goto label2;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding constructed ASN.1 octet string type is not supported");

        throw $r2;

     label2:
        $r1 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("octetstring");

        throw $r1;

     label3:
        return;
    }

    private org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String) throws org.apache.harmony.security.asn1.ASN1Exception
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        java.lang.String r1, $r9, $r11;
        org.apache.harmony.security.asn1.ASN1Exception $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int $i0, $i1;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" identifier expected at [");

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], got ");

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r11);

        throw $r2;
    }

    public void readOID() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i7, $i8, $i9, $i12, $i13, $i14, $i15, $i16;
        byte[] $r1, $r2;
        byte $b5, $b10;
        short $s6, $s11;
        org.apache.harmony.security.asn1.ASN1Exception $r3, $r8, $r15;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r14;
        java.lang.String $r9, $r13;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i1 == 6 goto label1;

        $r15 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("OID");

        throw $r15;

     label1:
        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if $i2 >= 1 goto label2;

        $r8 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong length for ASN.1 object identifier at [");

        $i16 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r13);

        throw $r8;

     label2:
        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i4 = $i3 - 1;

        $b5 = $r1[$i4];

        $s6 = $b5 & 128;

        if $s6 == 0 goto label3;

        $r3 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong encoding at [");

        $i15 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i14 = $i15 - 1;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r9);

        throw $r3;

     label3:
        r0.<org.apache.harmony.security.asn1.BerInputStream: int oidElement> = 1;

        i0 = 0;

     label4:
        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if i0 >= $i7 goto label7;

     label5:
        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int contentOffset>;

        $i9 = $i8 + i0;

        $b10 = $r2[$i9];

        $s11 = $b10 & 128;

        if $s11 != 128 goto label6;

        i0 = i0 + 1;

        goto label5;

     label6:
        i0 = i0 + 1;

        $i12 = r0.<org.apache.harmony.security.asn1.BerInputStream: int oidElement>;

        $i13 = $i12 + 1;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int oidElement> = $i13;

        goto label4;

     label7:
        return;
    }

    public void readSequence(org.apache.harmony.security.asn1.ASN1Sequence) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1Sequence r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i24, $i25;
        org.apache.harmony.security.asn1.ASN1Type[] r2;
        java.lang.Object[] r3, $r11, $r12, $r32, $r34;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.harmony.security.asn1.ASN1Exception $r4, $r14, $r23, $r38, $r43, $r49;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r16, $r17, $r18, $r19, $r26, $r27, $r28, $r30, $r36, $r37, $r40, $r41, $r44, $r45, $r50, $r51;
        boolean[] $r9, $r25, $r35, $r48;
        java.lang.String $r10, $r20, $r29, $r42, $r52;
        java.lang.Object $r13, $r15, $r24, $r31, $r33;
        org.apache.harmony.security.asn1.ASN1Type $r21, $r22, $r39, $r46;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Sequence;

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i4 == 48 goto label01;

        $r49 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("sequence");

        throw $r49;

     label01:
        i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        i1 = i0 + $i5;

        r2 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: org.apache.harmony.security.asn1.ASN1Type[] type>;

        i2 = 0;

        $z0 = r0.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label09;

     label02:
        $i18 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if $i18 >= i1 goto label07;

        $i22 = lengthof r2;

        if i2 >= $i22 goto label07;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

     label03:
        $r39 = r2[i2];

        $i21 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $z5 = virtualinvoke $r39.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i21);

        if $z5 != 0 goto label06;

        $r48 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: boolean[] OPTIONAL>;

        $z6 = $r48[i2];

        if $z6 == 0 goto label04;

        $i25 = lengthof r2;

        $i24 = $i25 - 1;

        if i2 != $i24 goto label05;

     label04:
        $r43 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Sequence: mandatory value is missing at [");

        $i23 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r51 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i23);

        $r50 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r52);

        throw $r43;

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        $r46 = r2[i2];

        virtualinvoke $r46.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r0);

        i2 = i2 + 1;

        goto label02;

     label07:
        $i17 = lengthof r2;

        if i2 >= $i17 goto label20;

        $r35 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: boolean[] OPTIONAL>;

        $z4 = $r35[i2];

        if $z4 != 0 goto label08;

        $r38 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Sequence: mandatory value is missing at [");

        $i19 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r40 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r42);

        throw $r38;

     label08:
        i2 = i2 + 1;

        goto label07;

     label09:
        i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $i6 = lengthof r2;

        r3 = newarray (java.lang.Object)[$i6];

     label10:
        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if $i7 >= i1 goto label16;

        $i11 = lengthof r2;

        if i2 >= $i11 goto label16;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

     label11:
        $r22 = r2[i2];

        $i13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $z2 = virtualinvoke $r22.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i13);

        if $z2 != 0 goto label15;

        $r25 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: boolean[] OPTIONAL>;

        $z3 = $r25[i2];

        if $z3 == 0 goto label12;

        $i16 = lengthof r2;

        $i15 = $i16 - 1;

        if i2 != $i15 goto label13;

     label12:
        $r23 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Sequence: mandatory value is missing at [");

        $i14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r26 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r29 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r29);

        throw $r23;

     label13:
        $r34 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object[] DEFAULT>;

        $r33 = $r34[i2];

        if $r33 == null goto label14;

        $r32 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object[] DEFAULT>;

        $r31 = $r32[i2];

        r3[i2] = $r31;

     label14:
        i2 = i2 + 1;

        goto label11;

     label15:
        $r21 = r2[i2];

        $r24 = virtualinvoke $r21.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r0);

        r3[i2] = $r24;

        i2 = i2 + 1;

        goto label10;

     label16:
        $i8 = lengthof r2;

        if i2 >= $i8 goto label19;

        $r9 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: boolean[] OPTIONAL>;

        $z1 = $r9[i2];

        if $z1 != 0 goto label17;

        $r14 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ASN.1 Sequence: mandatory value is missing at [");

        $i10 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r20);

        throw $r14;

     label17:
        $r11 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object[] DEFAULT>;

        $r13 = $r11[i2];

        if $r13 == null goto label18;

        $r12 = r1.<org.apache.harmony.security.asn1.ASN1Sequence: java.lang.Object[] DEFAULT>;

        $r15 = $r12[i2];

        r3[i2] = $r15;

     label18:
        i2 = i2 + 1;

        goto label16;

     label19:
        r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = r3;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset> = i3;

     label20:
        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if $i9 == i1 goto label21;

        $r4 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong encoding at [");

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Content\'s length and encoded length are not the same");

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r10);

        throw $r4;

     label21:
        return;
    }

    public void readSequenceOf(org.apache.harmony.security.asn1.ASN1SequenceOf) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1SequenceOf r1;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Exception $r2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1SequenceOf;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 == 48 goto label1;

        $r2 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("sequenceOf");

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void decodeValueCollection(org.apache.harmony.security.asn1.ASN1ValueCollection)>(r1);

        return;
    }

    public void readSet(org.apache.harmony.security.asn1.ASN1Set) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1Set r1;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Exception $r2, $r3;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Set;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 == 49 goto label1;

        $r3 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("set");

        throw $r3;

     label1:
        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding ASN.1 Set type is not supported");

        throw $r2;
    }

    public void readSetOf(org.apache.harmony.security.asn1.ASN1SetOf) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1SetOf r1;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Exception $r2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1SetOf;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 == 49 goto label1;

        $r2 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("setOf");

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void decodeValueCollection(org.apache.harmony.security.asn1.ASN1ValueCollection)>(r1);

        return;
    }

    private void decodeValueCollection(org.apache.harmony.security.asn1.ASN1ValueCollection) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1ValueCollection r1;
        int i0, i1, i2, $i3, $i4, $i5, $i7;
        org.apache.harmony.security.asn1.ASN1Type r2;
        java.util.ArrayList r3, $r4;
        boolean $z0;
        org.apache.harmony.security.asn1.ASN1Exception $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r10;
        java.lang.String $r9;
        java.lang.Object $r11;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1ValueCollection;

        i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        i1 = i0 + $i3;

        r2 = r1.<org.apache.harmony.security.asn1.ASN1ValueCollection: org.apache.harmony.security.asn1.ASN1Type type>;

        $z0 = r0.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label2;

     label1:
        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if i1 <= $i7 goto label5;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        virtualinvoke r2.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r0);

        goto label1;

     label2:
        i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3 = $r4;

     label3:
        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if i1 <= $i4 goto label4;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        $r11 = virtualinvoke r2.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>(r0);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

        goto label3;

     label4:
        virtualinvoke r3.<java.util.ArrayList: void trimToSize()>();

        r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = r3;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset> = i2;

     label5:
        $i5 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        if $i5 == i1 goto label6;

        $r5 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong encoding at [");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Content\'s length and encoded length are not the same");

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r9);

        throw $r5;

     label6:
        return;
    }

    public void readString(org.apache.harmony.security.asn1.ASN1StringType) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        org.apache.harmony.security.asn1.ASN1StringType r1;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.security.asn1.ASN1Exception $r2, $r3;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: org.apache.harmony.security.asn1.ASN1StringType;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $i0 = r1.<org.apache.harmony.security.asn1.ASN1StringType: int id>;

        if $i1 != $i0 goto label1;

        virtualinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: void readContent()>();

        goto label3;

     label1:
        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $i2 = r1.<org.apache.harmony.security.asn1.ASN1StringType: int constrId>;

        if $i3 != $i2 goto label2;

        $r3 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r3.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Decoding constructed ASN.1 string type is not provided");

        throw $r3;

     label2:
        $r2 = specialinvoke r0.<org.apache.harmony.security.asn1.BerInputStream: org.apache.harmony.security.asn1.ASN1Exception expected(java.lang.String)>("string");

        throw $r2;

     label3:
        return;
    }

    public byte[] getEncoded()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $i2 = $i1 - $i0;

        r1 = newarray (byte)[$i2];

        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i4 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r2, $i4, r1, 0, $i3);

        return r1;
    }

    public final byte[] getBuffer()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] $r1;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        return $r1;
    }

    public final int getLength()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        return $i0;
    }

    public final int getOffset()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        return $i0;
    }

    public final int getEndOffset()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public final int getTagOffset()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int $i0;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = r0.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        return $i0;
    }

    public final void setVerify()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r0.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify> = 1;

        return;
    }

    protected int read() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7;
        byte[] $r1, $r4, $r6;
        java.io.InputStream $r2, $r3;
        byte $b5, $b9;
        org.apache.harmony.security.asn1.ASN1Exception $r5, $r7;
        short $s8;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $r7 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r7.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Unexpected end of encoding");

        throw $r7;

     label1:
        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in>;

        if $r2 != null goto label2;

        $r6 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i7 = $i6 + 1;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = $i7;

        $b9 = $r6[$i6];

        $s8 = $b9 & 255;

        return $s8;

     label2:
        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in>;

        i0 = virtualinvoke $r3.<java.io.InputStream: int read()>();

        if i0 != -1 goto label3;

        $r5 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r5.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Unexpected end of encoding");

        throw $r5;

     label3:
        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i4 = $i3 + 1;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = $i4;

        $b5 = (byte) i0;

        $r4[$i3] = $b5;

        return i0;
    }

    public void readContent() throws java.io.IOException
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        byte[] $r1, $r3, $r7;
        java.io.InputStream $r2, $r4, $r6;
        org.apache.harmony.security.asn1.ASN1Exception $r5, $r8;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i5 = $i3 + $i2;

        $r1 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i4 = lengthof $r1;

        if $i5 <= $i4 goto label1;

        $r8 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r8.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Unexpected end of encoding");

        throw $r8;

     label1:
        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in>;

        if $r2 != null goto label2;

        $i18 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i19 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i20 = $i18 + $i19;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = $i20;

        goto label7;

     label2:
        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in>;

        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i7 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i6 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        i0 = virtualinvoke $r4.<java.io.InputStream: int read(byte[],int,int)>($r3, $i7, $i6);

        $i8 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if i0 == $i8 goto label6;

        i1 = i0;

     label3:
        if i1 < 1 goto label4;

        $i12 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if i0 <= $i12 goto label5;

     label4:
        $r5 = new org.apache.harmony.security.asn1.ASN1Exception;

        specialinvoke $r5.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>("Failed to read encoded content");

        throw $r5;

     label5:
        $r6 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.io.InputStream in>;

        $r7 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i14 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i15 = $i14 + i0;

        $i13 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i16 = $i13 - i0;

        i1 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, $i15, $i16);

        i0 = i0 + i1;

        $i17 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        if i0 != $i17 goto label3;

     label6:
        $i11 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $i9 = r0.<org.apache.harmony.security.asn1.BerInputStream: int length>;

        $i10 = $i11 + $i9;

        r0.<org.apache.harmony.security.asn1.BerInputStream: int offset> = $i10;

     label7:
        return;
    }

    public void compactBuffer()
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        byte[] r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        $i1 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label1;

        $i2 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        r1 = newarray (byte)[$i2];

        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer>;

        $i3 = r0.<org.apache.harmony.security.asn1.BerInputStream: int offset>;

        staticinvoke <java.lang.System: void arraycopy(byte[],int,byte[],int,int)>($r3, 0, r1, 0, $i3);

        r0.<org.apache.harmony.security.asn1.BerInputStream: byte[] buffer> = r1;

     label1:
        return;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        java.lang.Object r1, r2, $r25, $r32;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[][] r3, $r4, $r5, $r7, $r9, $r11, $r14, $r15, $r16, $r20, $r21, $r26, $r27, $r29, $r33;
        java.lang.Object[] $r6, $r8, $r10, $r12, $r13, $r17, $r18, $r19, $r22, $r23, $r24, $r28, $r30, $r31;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        if $r4 != null goto label1;

        $r33 = newmultiarray (java.lang.Object)[2][10];

        r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool> = $r33;

     label1:
        i0 = 0;

     label2:
        $r5 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r6 = $r5[0];

        $i1 = lengthof $r6;

        if i0 >= $i1 goto label4;

        $r27 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r28 = $r27[0];

        $r25 = $r28[i0];

        if $r25 == null goto label4;

        $r26 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r31 = $r26[0];

        $r32 = $r31[i0];

        if $r32 != r1 goto label3;

        $r29 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r30 = $r29[1];

        $r30[i0] = r2;

        return;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        $r7 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r8 = $r7[0];

        $i2 = lengthof $r8;

        if i0 != $i2 goto label5;

        $r14 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r13 = $r14[0];

        $i4 = lengthof $r13;

        $i3 = $i4 * 2;

        r3 = newmultiarray (java.lang.Object)[$i3][2];

        $r16 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r18 = $r16[0];

        $r19 = r3[0];

        $r15 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r17 = $r15[0];

        $i5 = lengthof $r17;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r18, 0, $r19, 0, $i5);

        $r21 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r23 = $r21[1];

        $r24 = r3[1];

        $r20 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r22 = $r20[0];

        $i6 = lengthof $r22;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, 0, $r24, 0, $i6);

        r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool> = r3;

        goto label6;

     label5:
        $r9 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r10 = $r9[0];

        $r10[i0] = r1;

        $r11 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r12 = $r11[1];

        $r12[i0] = r2;

     label6:
        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.harmony.security.asn1.BerInputStream r0;
        java.lang.Object r1, $r7, $r10;
        int i0, $i1;
        java.lang.Object[][] $r2, $r3, $r5, $r8;
        java.lang.Object[] $r4, $r6, $r9;

        r0 := @this: org.apache.harmony.security.asn1.BerInputStream;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        if $r2 != null goto label1;

        return null;

     label1:
        i0 = 0;

     label2:
        $r3 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r4 = $r3[0];

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label4;

        $r5 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r6 = $r5[0];

        $r7 = $r6[i0];

        if $r7 != r1 goto label3;

        $r8 = r0.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object[][] pool>;

        $r9 = $r8[1];

        $r10 = $r9[i0];

        return $r10;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.asn1.BerInputStream: int INDEFINIT_LENGTH> = -1;

        <org.apache.harmony.security.asn1.BerInputStream: int BUF_INCREASE_SIZE> = 16384;

        return;
    }
}
