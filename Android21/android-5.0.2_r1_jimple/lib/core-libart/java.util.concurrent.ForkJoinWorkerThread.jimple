public class java.util.concurrent.ForkJoinWorkerThread extends java.lang.Thread
{
    final java.util.concurrent.ForkJoinPool pool;
    final java.util.concurrent.ForkJoinPool$WorkQueue workQueue;

    protected void <init>(java.util.concurrent.ForkJoinPool)
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool r1;
        java.util.concurrent.ForkJoinPool$WorkQueue $r2;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 := @parameter0: java.util.concurrent.ForkJoinPool;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>("aForkJoinWorkerThread");

        r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool> = r1;

        $r2 = virtualinvoke r1.<java.util.concurrent.ForkJoinPool: java.util.concurrent.ForkJoinPool$WorkQueue registerWorker(java.util.concurrent.ForkJoinWorkerThread)>(r0);

        r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue> = $r2;

        return;
    }

    public java.util.concurrent.ForkJoinPool getPool()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool $r1;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        $r1 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        return $r1;
    }

    public int getPoolIndex()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.util.concurrent.ForkJoinPool$WorkQueue $r1;
        short $s0, $s1;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        $r1 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        $s0 = $r1.<java.util.concurrent.ForkJoinPool$WorkQueue: short poolIndex>;

        $s1 = $s0 >>> 1;

        return $s1;
    }

    protected void onStart()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        return;
    }

    protected void onTermination(java.lang.Throwable)
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.lang.Throwable r1;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 := @parameter0: java.lang.Throwable;

        return;
    }

    public void run()
    {
        java.util.concurrent.ForkJoinWorkerThread r0;
        java.lang.Throwable r1, r2, r3, r4, r5, r6, r7, $r11, $r13, $r15, $r16, $r18, $r20, $r22, $r24, r27, r28, r29;
        java.util.concurrent.ForkJoinPool$WorkQueue $r8;
        java.util.concurrent.ForkJoinPool $r9, $r10, $r12, $r14, $r17, $r19, $r21, $r23, $r25, $r26;

        r0 := @this: java.util.concurrent.ForkJoinWorkerThread;

        r1 = null;

     label01:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onStart()>();

        $r9 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        $r8 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool$WorkQueue workQueue>;

        virtualinvoke $r9.<java.util.concurrent.ForkJoinPool: void runWorker(java.util.concurrent.ForkJoinPool$WorkQueue)>($r8);

     label02:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>(r1);

     label03:
        $r10 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r10.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        goto label08;

     label04:
        $r20 := @caughtexception;

        r2 = $r20;

        if r1 != null goto label05;

        r1 = r2;

     label05:
        $r23 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r23.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        goto label08;

     label06:
        $r13 := @caughtexception;

        r3 = $r13;

     label07:
        $r14 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r14.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        throw r3;

     label08:
        goto label25;

     label09:
        $r11 := @caughtexception;

        r27 = $r11;

        r28 = r27;

     label10:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>(r28);

     label11:
        $r12 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r12.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r28);

        goto label16;

     label12:
        $r16 := @caughtexception;

        r29 = $r16;

        if r28 != null goto label13;

        r28 = r29;

     label13:
        $r19 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r19.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r28);

        goto label16;

     label14:
        $r18 := @caughtexception;

        r4 = $r18;

     label15:
        $r21 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r21.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r28);

        throw r4;

     label16:
        goto label25;

     label17:
        $r24 := @caughtexception;

        r5 = $r24;

     label18:
        virtualinvoke r0.<java.util.concurrent.ForkJoinWorkerThread: void onTermination(java.lang.Throwable)>(r1);

     label19:
        $r26 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r26.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        goto label24;

     label20:
        $r15 := @caughtexception;

        r6 = $r15;

        if r1 != null goto label21;

        r1 = r6;

     label21:
        $r17 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r17.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        goto label24;

     label22:
        $r22 := @caughtexception;

        r7 = $r22;

     label23:
        $r25 = r0.<java.util.concurrent.ForkJoinWorkerThread: java.util.concurrent.ForkJoinPool pool>;

        virtualinvoke $r25.<java.util.concurrent.ForkJoinPool: void deregisterWorker(java.util.concurrent.ForkJoinWorkerThread,java.lang.Throwable)>(r0, r1);

        throw r7;

     label24:
        throw r5;

     label25:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label14 to label15 with label14;
        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label22 to label23 with label22;
        catch java.lang.Throwable from label17 to label18 with label17;
    }
}
