public abstract class java.util.concurrent.AbstractExecutorService extends java.lang.Object implements java.util.concurrent.ExecutorService
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        java.util.concurrent.AbstractExecutorService r0;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.FutureTask $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        $r3 = new java.util.concurrent.FutureTask;

        specialinvoke $r3.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>(r1, r2);

        return $r3;
    }

    protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.FutureTask $r2;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.concurrent.Callable;

        $r2 = new java.util.concurrent.FutureTask;

        specialinvoke $r2.<java.util.concurrent.FutureTask: void <init>(java.util.concurrent.Callable)>(r1);

        return $r2;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.util.concurrent.RunnableFuture r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.lang.Runnable;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>(r1, null);

        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r2);

        return r2;
    }

    public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.lang.Runnable r1;
        java.lang.Object r2;
        java.util.concurrent.RunnableFuture r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>()>();

        throw $r4;

     label1:
        r3 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable,java.lang.Object)>(r1, r2);

        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r3);

        return r3;
    }

    public java.util.concurrent.Future submit(java.util.concurrent.Callable)
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.concurrent.Callable r1;
        java.util.concurrent.RunnableFuture r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.concurrent.Callable;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        r2 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r1);

        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r2);

        return r2;
    }

    private java.lang.Object doInvokeAny(java.util.Collection, boolean, long) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        boolean z0;
        long l0, l2, $l8, $l9, $l10;
        int i1, i3, i4, i5, i6, i7, i11;
        java.util.ArrayList r2, $r9;
        java.util.concurrent.ExecutorCompletionService r3, $r10;
        java.util.concurrent.ExecutionException r4, $r18, $r25, $r26, r30;
        java.util.Iterator r5;
        java.util.concurrent.Future r6, $r13, $r16, $r19, $r28;
        java.lang.Object r7, $r12, $r14, $r20, $r29;
        java.lang.Throwable r8, $r24;
        java.util.concurrent.Callable $r11, $r21;
        java.util.concurrent.TimeUnit $r15;
        java.util.concurrent.TimeoutException $r17;
        java.lang.IllegalArgumentException $r22;
        java.lang.NullPointerException $r23;
        java.lang.RuntimeException $r27, r31;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.Collection;

        z0 := @parameter1: boolean;

        l0 := @parameter2: long;

        if r1 != null goto label01;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>()>();

        throw $r23;

     label01:
        i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if i1 != 0 goto label02;

        $r22 = new java.lang.IllegalArgumentException;

        specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r22;

     label02:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(i1);

        r2 = $r9;

        $r10 = new java.util.concurrent.ExecutorCompletionService;

        specialinvoke $r10.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>(r0);

        r3 = $r10;

     label03:
        r4 = null;

        if z0 == 0 goto label04;

        $l9 = staticinvoke <java.lang.System: long nanoTime()>();

        $l10 = $l9 + l0;

        goto label05;

     label04:
        $l10 = 0L;

     label05:
        l2 = $l10;

        r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.concurrent.Callable) $r12;

        $r13 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r11);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        i11 = i1 + -1;

        i3 = 1;

     label06:
        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll()>();

        if r6 != null goto label11;

        if i11 <= 0 goto label07;

        i11 = i11 + -1;

        $r20 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (java.util.concurrent.Callable) $r20;

        $r19 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r21);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        i3 = i3 + 1;

        goto label11;

     label07:
        if i3 != 0 goto label08;

        goto label19;

     label08:
        if z0 == 0 goto label10;

        $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>(l0, $r15);

        if r6 != null goto label09;

        $r17 = new java.util.concurrent.TimeoutException;

        specialinvoke $r17.<java.util.concurrent.TimeoutException: void <init>()>();

        throw $r17;

     label09:
        $l8 = staticinvoke <java.lang.System: long nanoTime()>();

        l0 = l2 - $l8;

        goto label11;

     label10:
        r6 = virtualinvoke r3.<java.util.concurrent.ExecutorCompletionService: java.util.concurrent.Future take()>();

     label11:
        if r6 == null goto label18;

        i3 = i3 + -1;

     label12:
        r7 = interfaceinvoke r6.<java.util.concurrent.Future: java.lang.Object get()>();

     label13:
        i4 = 0;

        i5 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label14:
        if i4 >= i5 goto label15;

        $r14 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r16 = (java.util.concurrent.Future) $r14;

        interfaceinvoke $r16.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i4 = i4 + 1;

        goto label14;

     label15:
        return r7;

     label16:
        $r25 := @caughtexception;

        r30 = $r25;

        r4 = r30;

        goto label18;

     label17:
        $r27 := @caughtexception;

        r31 = $r27;

        $r26 = new java.util.concurrent.ExecutionException;

        specialinvoke $r26.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r31);

        r4 = $r26;

     label18:
        goto label06;

     label19:
        if r4 != null goto label20;

        $r18 = new java.util.concurrent.ExecutionException;

        specialinvoke $r18.<java.util.concurrent.ExecutionException: void <init>()>();

        r4 = $r18;

     label20:
        throw r4;

     label21:
        $r24 := @caughtexception;

        r8 = $r24;

     label22:
        i7 = 0;

        i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label23:
        if i7 >= i6 goto label24;

        $r29 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        $r28 = (java.util.concurrent.Future) $r29;

        interfaceinvoke $r28.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i7 = i7 + 1;

        goto label23;

     label24:
        throw r8;

        catch java.util.concurrent.ExecutionException from label12 to label13 with label16;
        catch java.lang.RuntimeException from label12 to label13 with label17;
        catch java.lang.Throwable from label03 to label13 with label21;
        catch java.lang.Throwable from label16 to label22 with label21;
    }

    public java.lang.Object invokeAny(java.util.Collection) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        java.lang.Object $r3;
        java.util.concurrent.TimeoutException $r4;
        boolean $z0;
        java.lang.AssertionError $r5;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r3 = specialinvoke r0.<java.util.concurrent.AbstractExecutorService: java.lang.Object doInvokeAny(java.util.Collection,boolean,long)>(r1, 0, 0L);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $z0 = <java.util.concurrent.AbstractExecutorService: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label4:
        return null;

        catch java.util.concurrent.TimeoutException from label1 to label2 with label3;
    }

    public java.lang.Object invokeAny(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        long l0, $l1;
        java.util.concurrent.TimeUnit r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.Collection;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        $l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r3 = specialinvoke r0.<java.util.concurrent.AbstractExecutorService: java.lang.Object doInvokeAny(java.util.Collection,boolean,long)>(r1, 1, $l1);

        return $r3;
    }

    public java.util.List invokeAll(java.util.Collection) throws java.lang.InterruptedException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        java.util.ArrayList r2, $r8, r22;
        boolean z0, $z1, $z3;
        java.util.Iterator r3;
        java.util.concurrent.Callable r4;
        java.util.concurrent.RunnableFuture r5;
        java.lang.Throwable r7, $r16;
        int i0, i1, $i2, i3, i4, i5, i6;
        java.lang.Object $r9, $r11, $r12, $r18;
        java.util.concurrent.Future $r10, $r19, r20;
        java.util.concurrent.CancellationException $r14;
        java.lang.NullPointerException $r15;
        java.util.concurrent.ExecutionException $r17;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.Collection;

        if r1 != null goto label01;

        $r15 = new java.lang.NullPointerException;

        specialinvoke $r15.<java.lang.NullPointerException: void <init>()>();

        throw $r15;

     label01:
        $r8 = new java.util.ArrayList;

        $i2 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i2);

        r2 = $r8;

        z0 = 0;

     label02:
        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.concurrent.Callable) $r12;

        r5 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r4);

        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r5);

        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>(r5);

        goto label03;

     label04:
        i3 = 0;

        i4 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label05:
        if i3 >= i4 goto label11;

        $r11 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r20 = (java.util.concurrent.Future) $r11;

        $z3 = interfaceinvoke r20.<java.util.concurrent.Future: boolean isDone()>();

        if $z3 != 0 goto label10;

     label06:
        interfaceinvoke r20.<java.util.concurrent.Future: java.lang.Object get()>();

     label07:
        goto label10;

     label08:
        $r14 := @caughtexception;

        goto label10;

     label09:
        $r17 := @caughtexception;

     label10:
        i3 = i3 + 1;

        goto label05;

     label11:
        z0 = 1;

        r22 = r2;

     label12:
        if z0 != 0 goto label14;

        i5 = 0;

        i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label13:
        if i5 >= i6 goto label14;

        $r9 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r10 = (java.util.concurrent.Future) $r9;

        interfaceinvoke $r10.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i5 = i5 + 1;

        goto label13;

     label14:
        return r22;

     label15:
        $r16 := @caughtexception;

        r7 = $r16;

     label16:
        if z0 != 0 goto label18;

        i0 = 0;

        i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

     label17:
        if i0 >= i1 goto label18;

        $r18 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r19 = (java.util.concurrent.Future) $r18;

        interfaceinvoke $r19.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i0 = i0 + 1;

        goto label17;

     label18:
        throw r7;

        catch java.util.concurrent.CancellationException from label06 to label07 with label08;
        catch java.util.concurrent.ExecutionException from label06 to label07 with label09;
        catch java.lang.Throwable from label02 to label12 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    public java.util.List invokeAll(java.util.Collection, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException
    {
        java.util.concurrent.AbstractExecutorService r0;
        java.util.Collection r1;
        long l0, l1, $l11, $l13, $l14, l16;
        java.util.concurrent.TimeUnit r2, $r11;
        java.util.ArrayList r3, r6, $r8, r32, r36, r37;
        boolean z0, $z1, $z3;
        java.util.Iterator r4;
        java.util.concurrent.Callable r5;
        int i2, i3, i4, i5, i6, i7, i8, i9, $i10, i17, i18, i19, i20, i21;
        java.lang.Throwable r7, $r24;
        java.lang.Object $r9, $r12, $r13, $r15, $r18, $r20, $r26, $r28;
        java.util.concurrent.Future $r10, $r17, $r21, $r25, $r27, r31;
        byte $b12, $b15;
        java.lang.Runnable $r16;
        java.util.concurrent.RunnableFuture $r19;
        java.util.concurrent.TimeoutException $r22;
        java.lang.NullPointerException $r23;
        java.util.concurrent.ExecutionException $r29;
        java.util.concurrent.CancellationException $r30;

        r0 := @this: java.util.concurrent.AbstractExecutorService;

        r1 := @parameter0: java.util.Collection;

        l0 := @parameter1: long;

        r2 := @parameter2: java.util.concurrent.TimeUnit;

        if r1 != null goto label01;

        $r23 = new java.lang.NullPointerException;

        specialinvoke $r23.<java.lang.NullPointerException: void <init>()>();

        throw $r23;

     label01:
        l1 = virtualinvoke r2.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $r8 = new java.util.ArrayList;

        $i10 = interfaceinvoke r1.<java.util.Collection: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i10);

        r3 = $r8;

        z0 = 0;

     label02:
        r4 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        $r20 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.concurrent.Callable) $r20;

        $r19 = virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable)>(r5);

        virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        goto label03;

     label04:
        $l11 = staticinvoke <java.lang.System: long nanoTime()>();

        l16 = $l11 + l1;

        i2 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i3 = 0;

     label05:
        if i3 >= i2 goto label10;

        $r15 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r16 = (java.lang.Runnable) $r15;

        virtualinvoke r0.<java.util.concurrent.AbstractExecutorService: void execute(java.lang.Runnable)>($r16);

        $l14 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l16 - $l14;

        $b15 = l1 cmp 0L;

        if $b15 > 0 goto label09;

        r6 = r3;

     label06:
        if z0 != 0 goto label08;

        i4 = 0;

        i5 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label07:
        if i4 >= i5 goto label08;

        $r18 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r21 = (java.util.concurrent.Future) $r18;

        interfaceinvoke $r21.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i4 = i4 + 1;

        goto label07;

     label08:
        return r6;

     label09:
        i3 = i3 + 1;

        goto label05;

     label10:
        i17 = 0;

     label11:
        if i17 >= i2 goto label25;

        $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i17);

        r31 = (java.util.concurrent.Future) $r12;

        $z3 = interfaceinvoke r31.<java.util.concurrent.Future: boolean isDone()>();

        if $z3 != 0 goto label24;

        $b12 = l1 cmp 0L;

        if $b12 > 0 goto label15;

        r32 = r3;

     label12:
        if z0 != 0 goto label14;

        i18 = 0;

        i7 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label13:
        if i18 >= i7 goto label14;

        $r13 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i18);

        $r17 = (java.util.concurrent.Future) $r13;

        interfaceinvoke $r17.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i18 = i18 + 1;

        goto label13;

     label14:
        return r32;

     label15:
        $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        interfaceinvoke r31.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l1, $r11);

     label16:
        goto label23;

     label17:
        $r30 := @caughtexception;

        goto label23;

     label18:
        $r29 := @caughtexception;

        goto label23;

     label19:
        $r22 := @caughtexception;

        r36 = r3;

     label20:
        if z0 != 0 goto label22;

        i19 = 0;

        i6 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label21:
        if i19 >= i6 goto label22;

        $r26 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i19);

        $r25 = (java.util.concurrent.Future) $r26;

        interfaceinvoke $r25.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i19 = i19 + 1;

        goto label21;

     label22:
        return r36;

     label23:
        $l13 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l16 - $l13;

     label24:
        i17 = i17 + 1;

        goto label11;

     label25:
        z0 = 1;

        r37 = r3;

     label26:
        if z0 != 0 goto label28;

        i20 = 0;

        i21 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label27:
        if i20 >= i21 goto label28;

        $r9 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i20);

        $r10 = (java.util.concurrent.Future) $r9;

        interfaceinvoke $r10.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i20 = i20 + 1;

        goto label27;

     label28:
        return r37;

     label29:
        $r24 := @caughtexception;

        r7 = $r24;

     label30:
        if z0 != 0 goto label32;

        i8 = 0;

        i9 = virtualinvoke r3.<java.util.ArrayList: int size()>();

     label31:
        if i8 >= i9 goto label32;

        $r28 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r27 = (java.util.concurrent.Future) $r28;

        interfaceinvoke $r27.<java.util.concurrent.Future: boolean cancel(boolean)>(1);

        i8 = i8 + 1;

        goto label31;

     label32:
        throw r7;

        catch java.util.concurrent.CancellationException from label15 to label16 with label17;
        catch java.util.concurrent.ExecutionException from label15 to label16 with label18;
        catch java.util.concurrent.TimeoutException from label15 to label16 with label19;
        catch java.lang.Throwable from label02 to label06 with label29;
        catch java.lang.Throwable from label09 to label12 with label29;
        catch java.lang.Throwable from label15 to label20 with label29;
        catch java.lang.Throwable from label23 to label26 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "java/util/concurrent/AbstractExecutorService";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <java.util.concurrent.AbstractExecutorService: boolean $assertionsDisabled> = $z1;

        return;
    }
}
