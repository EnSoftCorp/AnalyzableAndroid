abstract class java.util.TreeMap$MapIterator extends java.lang.Object implements java.util.Iterator
{
    protected java.util.TreeMap$Node next;
    protected java.util.TreeMap$Node last;
    protected int expectedModCount;
    final java.util.TreeMap this$0;

    void <init>(java.util.TreeMap, java.util.TreeMap$Node)
    {
        java.util.TreeMap$MapIterator r0;
        java.util.TreeMap r1, $r3;
        java.util.TreeMap$Node r2;
        int $i0;

        r0 := @this: java.util.TreeMap$MapIterator;

        r1 := @parameter0: java.util.TreeMap;

        r2 := @parameter1: java.util.TreeMap$Node;

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0>;

        $i0 = $r3.<java.util.TreeMap: int modCount>;

        r0.<java.util.TreeMap$MapIterator: int expectedModCount> = $i0;

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next> = r2;

        return;
    }

    public boolean hasNext()
    {
        java.util.TreeMap$MapIterator r0;
        java.util.TreeMap$Node $r1;
        boolean $z0;

        r0 := @this: java.util.TreeMap$MapIterator;

        $r1 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.util.TreeMap$Node stepForward()
    {
        java.util.TreeMap$MapIterator r0;
        java.util.TreeMap$Node $r1, $r3, $r4, $r5, $r6;
        java.util.TreeMap $r2;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r7;
        java.util.NoSuchElementException $r8;

        r0 := @this: java.util.TreeMap$MapIterator;

        $r1 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        if $r1 != null goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0>;

        $i1 = $r2.<java.util.TreeMap: int modCount>;

        $i0 = r0.<java.util.TreeMap$MapIterator: int expectedModCount>;

        if $i1 == $i0 goto label2;

        $r7 = new java.util.ConcurrentModificationException;

        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r7;

     label2:
        $r3 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last> = $r3;

        $r4 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap$Node: java.util.TreeMap$Node next()>();

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next> = $r5;

        $r6 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last>;

        return $r6;
    }

    protected java.util.TreeMap$Node stepBackward()
    {
        java.util.TreeMap$MapIterator r0;
        java.util.TreeMap$Node $r1, $r3, $r4, $r5, $r6;
        java.util.TreeMap $r2;
        int $i0, $i1;
        java.util.ConcurrentModificationException $r7;
        java.util.NoSuchElementException $r8;

        r0 := @this: java.util.TreeMap$MapIterator;

        $r1 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        if $r1 != null goto label1;

        $r8 = new java.util.NoSuchElementException;

        specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0>;

        $i1 = $r2.<java.util.TreeMap: int modCount>;

        $i0 = r0.<java.util.TreeMap$MapIterator: int expectedModCount>;

        if $i1 == $i0 goto label2;

        $r7 = new java.util.ConcurrentModificationException;

        specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>();

        throw $r7;

     label2:
        $r3 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last> = $r3;

        $r4 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next>;

        $r5 = virtualinvoke $r4.<java.util.TreeMap$Node: java.util.TreeMap$Node prev()>();

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node next> = $r5;

        $r6 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last>;

        return $r6;
    }

    public void remove()
    {
        java.util.TreeMap$MapIterator r0;
        java.util.TreeMap$Node $r1, $r2;
        java.util.TreeMap $r3, $r4;
        int $i0;
        java.lang.IllegalStateException $r5;

        r0 := @this: java.util.TreeMap$MapIterator;

        $r1 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last>;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0>;

        $r2 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last>;

        virtualinvoke $r3.<java.util.TreeMap: void removeInternal(java.util.TreeMap$Node)>($r2);

        $r4 = r0.<java.util.TreeMap$MapIterator: java.util.TreeMap this$0>;

        $i0 = $r4.<java.util.TreeMap: int modCount>;

        r0.<java.util.TreeMap$MapIterator: int expectedModCount> = $i0;

        r0.<java.util.TreeMap$MapIterator: java.util.TreeMap$Node last> = null;

        return;
    }
}
