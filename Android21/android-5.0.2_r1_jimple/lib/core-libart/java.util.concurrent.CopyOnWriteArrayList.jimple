public class java.util.concurrent.CopyOnWriteArrayList extends java.lang.Object implements java.util.List, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable
{
    private static final long serialVersionUID;
    private transient volatile java.lang.Object[] elements;

    public void <init>()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r1;

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2, $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r3 = (java.lang.Object[]) $r2;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void <init>(java.lang.Object[])>($r3);

        return;
    }

    public void <init>(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = lengthof r1;

        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r1, $i0, class "[Ljava/lang/Object;");

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r2;

        return;
    }

    public java.lang.Object clone()
    {
        java.util.concurrent.CopyOnWriteArrayList r0, r1;
        java.lang.Object $r2, $r4;
        java.lang.Object[] $r3, $r5;
        java.lang.CloneNotSupportedException $r6, r8;
        java.lang.AssertionError $r7;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (java.util.concurrent.CopyOnWriteArrayList) $r2;

        $r3 = r1.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        r1.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r5;

     label2:
        return r1;

     label3:
        $r6 := @caughtexception;

        r8 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r8);

        throw $r7;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public int size()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public java.lang.Object get(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0;
        java.lang.Object[] $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = $r1[i0];

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>(r1);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean containsAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $z0 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: boolean containsAll(java.util.Collection,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $z0;
    }

    static boolean containsAll(java.util.Collection, java.lang.Object[], int, int)
    {
        java.util.Collection r0;
        java.lang.Object[] r1;
        int i0, i1, $i2;
        java.util.Iterator r2;
        java.lang.Object r3;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r3, r1, i0, i1);

        if $i2 != -1 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public int indexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1, $i2;
        java.lang.Object[] r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof r2;

        $i2 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, i0, $i1);

        return $i2;
    }

    public int indexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $i1;
    }

    public int lastIndexOf(java.lang.Object, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0, $i1;
        java.lang.Object[] r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, i0);

        return $i1;
    }

    public int lastIndexOf(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2;
        int $i0, $i1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof r2;

        $i1 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int lastIndexOf(java.lang.Object,java.lang.Object[],int,int)>(r1, r2, 0, $i0);

        return $i1;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i0 = lengthof r1;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.util.ListIterator listIterator(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator r2, $r10;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        if i0 < 0 goto label1;

        $i2 = lengthof r1;

        if i0 <= $i2 goto label2;

     label1:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", length=");

        $i1 = lengthof r1;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label2:
        $r10 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i3 = lengthof r1;

        specialinvoke $r10.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i3);

        r2 = $r10;

        staticinvoke <java.util.concurrent.CopyOnWriteArrayList$CowIterator: int access$002(java.util.concurrent.CopyOnWriteArrayList$CowIterator,int)>(r2, i0);

        return r2;
    }

    public java.util.ListIterator listIterator()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1;
        java.util.concurrent.CopyOnWriteArrayList$CowIterator $r2;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = new java.util.concurrent.CopyOnWriteArrayList$CowIterator;

        $i0 = lengthof r1;

        specialinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList$CowIterator: void <init>(java.lang.Object[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public java.util.List subList(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, $i3;
        java.lang.Object[] r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.util.concurrent.CopyOnWriteArrayList$CowSubList $r11;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        $i3 = lengthof r1;

        if i1 <= $i3 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("from=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", to=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", list size=");

        $i2 = lengthof r1;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r2;

     label2:
        $r11 = new java.util.concurrent.CopyOnWriteArrayList$CowSubList;

        specialinvoke $r11.<java.util.concurrent.CopyOnWriteArrayList$CowSubList: void <init>(java.util.concurrent.CopyOnWriteArrayList,java.lang.Object[],int,int)>(r0, r1, i0, i1);

        return $r11;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.Object[]) $r2;

        return $r3;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] r1, r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Class $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object[];

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof r2;

        $i0 = lengthof r1;

        if $i1 <= $i0 goto label1;

        $i6 = lengthof r2;

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>(r2, $i6, $r3);

        $r5 = (java.lang.Object[]) $r4;

        return $r5;

     label1:
        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r1, 0, $i2);

        $i4 = lengthof r2;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label2;

        $i5 = lengthof r2;

        r1[$i5] = null;

     label2:
        return r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0, $r8;
        java.lang.Object r1, r5, $r7;
        java.lang.Object[] r2, r4, $r9, $r10;
        java.util.Iterator r3;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r6;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.concurrent.CopyOnWriteArrayList;

        if $z0 == 0 goto label04;

        if r0 == r1 goto label01;

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r8 = (java.util.concurrent.CopyOnWriteArrayList) r1;

        $r10 = $r8.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $z7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r9, $r10);

        if $z7 == 0 goto label02;

     label01:
        $z6 = 1;

        goto label03;

     label02:
        $z6 = 0;

     label03:
        return $z6;

     label04:
        $z1 = r1 instanceof java.util.List;

        if $z1 == 0 goto label11;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r6 = (java.util.List) r1;

        r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        r4 = r2;

        i0 = lengthof r4;

        i1 = 0;

     label05:
        if i1 >= i0 goto label08;

        r5 = r4[i1];

        $z4 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label06;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $z5 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r5, $r7);

        if $z5 != 0 goto label07;

     label06:
        return 0;

     label07:
        i1 = i1 + 1;

        goto label05;

     label08:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label09;

        $z3 = 1;

        goto label10;

     label09:
        $z3 = 0;

     label10:
        return $z3;

     label11:
        return 0;
    }

    public int hashCode()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        int $i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        return $r2;
    }

    public synchronized boolean add(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r3;

        $i1 = $i0 + 1;

        r2 = newarray (java.lang.Object)[$i1];

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i2 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i2);

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r6;

        r2[$i3] = r1;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

        return 1;
    }

    public synchronized void add(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3, $r4, $r5, $r6;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i1 = lengthof $r3;

        $i2 = $i1 + 1;

        r2 = newarray (java.lang.Object)[$i2];

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, i0);

        r2[i0] = r1;

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = i0 + 1;

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r5;

        $i4 = $i3 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, r2, $i5, $i4);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

        return;
    }

    public synchronized boolean addAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r2;

        $z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }

    public synchronized boolean addAll(int, java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.Collection r1;
        java.lang.Object[] r2, r3, $r4, $r5, $r6, $r7;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i2 = lengthof $r4;

        $i1 = lengthof r2;

        $i3 = $i2 + $i1;

        r3 = newarray (java.lang.Object)[$i3];

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, i0);

        $i4 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, i0, $i4);

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = lengthof r2;

        $i8 = i0 + $i5;

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i6 = lengthof $r6;

        $i7 = $i6 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, i0, r3, $i8, $i7);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

        $i9 = lengthof r2;

        if $i9 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized int addAllAbsent(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] r2, r3, r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.Object r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        r2 = interfaceinvoke r1.<java.util.Collection: java.lang.Object[] toArray()>();

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i4 = lengthof $r6;

        $i3 = lengthof r2;

        $i5 = $i4 + $i3;

        r3 = newarray (java.lang.Object)[$i5];

        $r8 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i6 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r3, 0, $i6);

        i0 = 0;

        r4 = r2;

        i1 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i1 goto label3;

        r5 = r4[i2];

        $r10 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i10 = lengthof $r10;

        $i12 = $i10 + i0;

        $i11 = staticinvoke <java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object,java.lang.Object[],int,int)>(r5, r3, 0, $i12);

        if $i11 != -1 goto label2;

        $r11 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i15 = lengthof $r11;

        $i13 = i0;

        i0 = i0 + 1;

        $i14 = $i15 + $i13;

        r3[$i14] = r5;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i7 = lengthof r2;

        if i0 >= $i7 goto label4;

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i8 = lengthof $r9;

        $i9 = $i8 + i0;

        r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r3, 0, $i9);

     label4:
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r3;

        return i0;
    }

    public synchronized boolean addIfAbsent(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return 1;
    }

    public synchronized void clear()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = <libcore.util.EmptyArray: java.lang.Object[] OBJECT>;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = $r1;

        return;
    }

    public synchronized java.lang.Object remove(int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        r1 = $r2[i0];

        $i1 = i0 + 1;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void removeRange(int,int)>(i0, $i1);

        return r1;
    }

    public synchronized boolean remove(java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object r1;
        int i0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int indexOf(java.lang.Object)>(r1);

        if i0 != -1 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>(i0);

        return 1;
    }

    public synchronized boolean removeAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r2;

        $i1 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, 0, 0, $i0);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public synchronized boolean retainAll(java.util.Collection)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        java.lang.Object[] $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i0 = lengthof $r2;

        $i1 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, 1, 0, $i0);

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private int removeOrRetain(java.util.Collection, boolean, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        boolean z0, $z1, $z2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        java.lang.Object[] r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13;
        java.lang.Object $r4, $r11, $r14;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.util.Collection;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 = i0;

     label1:
        if i2 >= i1 goto label8;

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = $r3[i2];

        $z1 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r4);

        if $z1 != z0 goto label2;

        goto label7;

     label2:
        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = lengthof $r5;

        $i6 = $i5 - 1;

        r2 = newarray (java.lang.Object)[$i6];

        $r6 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, i2);

        i3 = i2;

        i4 = i2 + 1;

     label3:
        if i4 >= i1 goto label5;

        $r12 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r11 = $r12[i4];

        $z2 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r11);

        if $z2 != z0 goto label4;

        $i14 = i3;

        i3 = i3 + 1;

        $r13 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r14 = $r13[i4];

        r2[$i14] = $r14;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $r8 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r7 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i7 = lengthof $r7;

        $i8 = $i7 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, i1, r2, i3, $i8);

        $r9 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i9 = lengthof $r9;

        $i11 = $i9 - i1;

        i15 = i3 + $i11;

        $i10 = lengthof r2;

        if i15 >= $i10 goto label6;

        r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r2, 0, i15);

     label6:
        $r10 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i13 = lengthof $r10;

        $i12 = lengthof r2;

        i16 = $i13 - $i12;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

        return i16;

     label7:
        i2 = i2 + 1;

        goto label1;

     label8:
        return 0;
    }

    public synchronized java.lang.Object set(int, java.lang.Object)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0;
        java.lang.Object r1, r3, $r5;
        java.lang.Object[] r2, $r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        r2 = (java.lang.Object[]) $r5;

        r3 = r2[i0];

        r2[i0] = r1;

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

        return r3;
    }

    private void removeRange(int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object[] r1, $r2, $r3, $r4, $r5;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i3 = lengthof $r2;

        $i2 = i1 - i0;

        $i4 = $i3 - $i2;

        r1 = newarray (java.lang.Object)[$i4];

        $r3 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, i0);

        $r5 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $r4 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        $i5 = lengthof $r4;

        $i6 = $i5 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i1, r1, i0, $i6);

        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r1;

        return;
    }

    static int lastIndexOf(java.lang.Object, java.lang.Object[], int, int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label4;

        i2 = i1 - 1;

     label1:
        if i2 < i0 goto label3;

        $r3 = r1[i2];

        if $r3 != null goto label2;

        return i2;

     label2:
        i2 = i2 + -1;

        goto label1;

     label3:
        goto label7;

     label4:
        i3 = i1 - 1;

     label5:
        if i3 < i0 goto label7;

        $r2 = r1[i3];

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label6;

        return i3;

     label6:
        i3 = i3 + -1;

        goto label5;

     label7:
        return -1;
    }

    static int indexOf(java.lang.Object, java.lang.Object[], int, int)
    {
        java.lang.Object r0, $r2, $r3;
        java.lang.Object[] r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label4;

        i2 = i0;

     label1:
        if i2 >= i1 goto label3;

        $r3 = r1[i2];

        if $r3 != null goto label2;

        return i2;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        goto label7;

     label4:
        i3 = i0;

     label5:
        if i3 >= i1 goto label7;

        $r2 = r1[i3];

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label6;

        return i3;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return -1;
    }

    final java.lang.Object[] getArray()
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectOutputStream r1;
        java.lang.Object[] r2, r3;
        int i0, i1, $i2;
        java.lang.Object r4;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $i2 = lengthof r2;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i2);

        r3 = r2;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r4 = r3[i1];

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private synchronized void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.io.ObjectInputStream r1;
        java.lang.Object[] r2;
        int i0, $i1, $i2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        r2 = newarray (java.lang.Object)[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r2;

        if i0 >= $i2 goto label2;

        $r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2[i0] = $r3;

        i0 = i0 + 1;

        goto label1;

     label2:
        r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements> = r2;

        return;
    }

    static java.lang.Object[] access$300(java.util.concurrent.CopyOnWriteArrayList)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.lang.Object[] $r1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        $r1 = r0.<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] elements>;

        return $r1;
    }

    static void access$500(java.util.concurrent.CopyOnWriteArrayList, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        int i0, i1;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: void removeRange(int,int)>(i0, i1);

        return;
    }

    static int access$600(java.util.concurrent.CopyOnWriteArrayList, java.util.Collection, boolean, int, int)
    {
        java.util.concurrent.CopyOnWriteArrayList r0;
        java.util.Collection r1;
        boolean z0;
        int i0, i1, $i2;

        r0 := @parameter0: java.util.concurrent.CopyOnWriteArrayList;

        r1 := @parameter1: java.util.Collection;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $i2 = specialinvoke r0.<java.util.concurrent.CopyOnWriteArrayList: int removeOrRetain(java.util.Collection,boolean,int,int)>(r1, z0, i0, i1);

        return $i2;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID> = 8673264195747942595L;

        return;
    }
}
