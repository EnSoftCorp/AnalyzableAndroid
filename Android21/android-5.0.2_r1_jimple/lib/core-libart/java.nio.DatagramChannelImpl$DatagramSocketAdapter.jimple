class java.nio.DatagramChannelImpl$DatagramSocketAdapter extends java.net.DatagramSocket
{
    private final java.nio.DatagramChannelImpl channelImpl;

    void <init>(java.net.DatagramSocketImpl, java.nio.DatagramChannelImpl)
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramSocketImpl r1;
        java.nio.DatagramChannelImpl r2;
        boolean $z0, $z1, $z2;
        java.net.InetSocketAddress $r3, $r5;
        java.net.InetAddress $r4, $r6;
        int $i0, $i1;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramSocketImpl;

        r2 := @parameter1: java.nio.DatagramChannelImpl;

        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>(r1);

        r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl> = r2;

        $z0 = r2.<java.nio.DatagramChannelImpl: boolean isBound>;

        if $z0 == 0 goto label1;

        $r6 = r2.<java.nio.DatagramChannelImpl: java.net.InetAddress localAddress>;

        $i1 = staticinvoke <java.nio.DatagramChannelImpl: int access$000(java.nio.DatagramChannelImpl)>(r2);

        virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void onBind(java.net.InetAddress,int)>($r6, $i1);

     label1:
        $z1 = r2.<java.nio.DatagramChannelImpl: boolean connected>;

        if $z1 == 0 goto label2;

        $r3 = r2.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r5 = r2.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $i0 = virtualinvoke $r5.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void onConnect(java.net.InetAddress,int)>($r4, $i0);

        goto label3;

     label2:
        virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void onDisconnect()>();

     label3:
        $z2 = virtualinvoke r2.<java.nio.DatagramChannelImpl: boolean isOpen()>();

        if $z2 != 0 goto label4;

        virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void onClose()>();

     label4:
        return;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        return $r1;
    }

    public void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.SocketAddress r1;
        java.nio.DatagramChannelImpl $r2, $r3;
        boolean $z0;
        java.nio.channels.AlreadyConnectedException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r4 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r4.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>(r1);

        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r3.<java.nio.DatagramChannelImpl: void onBind(boolean)>(0);

        return;
    }

    public void connect(java.net.SocketAddress) throws java.net.SocketException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.SocketAddress r1;
        java.net.InetSocketAddress r2;
        boolean $z0;
        java.nio.DatagramChannelImpl $r3, $r4;
        java.net.InetAddress $r5;
        int $i0;
        java.lang.IllegalStateException $r6;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.SocketAddress;

        $z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Socket is already connected.");

        throw $r6;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void connect(java.net.SocketAddress)>(r1);

        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r3.<java.nio.DatagramChannelImpl: void onBind(boolean)>(0);

        r2 = (java.net.InetSocketAddress) r1;

        $r4 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r5 = virtualinvoke r2.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = virtualinvoke r2.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r4.<java.nio.DatagramChannelImpl: void onConnect(java.net.InetAddress,int,boolean)>($r5, $i0, 0);

        return;
    }

    public void connect(java.net.InetAddress, int)
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.InetAddress r1;
        int i0;
        java.net.InetSocketAddress $r3;
        java.net.SocketException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

     label1:
        $r3 = new java.net.InetSocketAddress;

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r1, i0);

        virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void connect(java.net.SocketAddress)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramPacket r1;
        boolean z0, $z1;
        java.nio.DatagramChannelImpl $r2, $r3;
        java.nio.channels.IllegalBlockingModeException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramPacket;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z1 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        if $z1 != 0 goto label1;

        $r4 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r4.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r4;

     label1:
        z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: boolean isBound()>();

        specialinvoke r0.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r1);

        if z0 != 0 goto label2;

        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r3.<java.nio.DatagramChannelImpl: void onBind(boolean)>(0);

     label2:
        return;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramPacket r1;
        boolean z0, $z1;
        java.nio.DatagramChannelImpl $r2, $r3;
        java.nio.channels.IllegalBlockingModeException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramPacket;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z1 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        if $z1 != 0 goto label1;

        $r4 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r4.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r4;

     label1:
        z0 = virtualinvoke r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: boolean isBound()>();

        specialinvoke r0.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r1);

        if z0 != 0 goto label2;

        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r3.<java.nio.DatagramChannelImpl: void onBind(boolean)>(0);

     label2:
        return;
    }

    public void close()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl r1, $r4, $r5, $r6;
        java.lang.Throwable r3, $r7;
        boolean $z0;
        java.io.IOException $r8;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r4 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void close()>();

        $r5 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r5.<java.nio.DatagramChannelImpl: boolean isOpen()>();

        if $z0 == 0 goto label5;

     label2:
        $r6 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r6.<java.nio.DatagramChannelImpl: void close()>();

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        goto label9;

     label7:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r1;

     label8:
        throw r3;

     label9:
        return;

        catch java.io.IOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void disconnect()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        specialinvoke r0.<java.net.DatagramSocket: void disconnect()>();

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r1.<java.nio.DatagramChannelImpl: void onDisconnect(boolean)>(0);

        return;
    }
}
