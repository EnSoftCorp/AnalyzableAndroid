public abstract class java.util.AbstractSequentialList extends java.util.AbstractList
{

    protected void <init>()
    {
        java.util.AbstractSequentialList r0;

        r0 := @this: java.util.AbstractSequentialList;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.util.AbstractSequentialList r0;
        int i0;
        java.lang.Object r1;
        java.util.ListIterator $r2;

        r0 := @this: java.util.AbstractSequentialList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(i0);

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>(r1);

        return;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.util.AbstractSequentialList r0;
        int i0, i1, $i2;
        java.util.Collection r1;
        java.util.ListIterator r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @this: java.util.AbstractSequentialList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.Collection;

        r2 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(i0);

        r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

        i1 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.ListIterator: void add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $i2 = interfaceinvoke r2.<java.util.ListIterator: int nextIndex()>();

        if i1 == $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public java.lang.Object get(int)
    {
        java.util.AbstractSequentialList r0;
        int i0;
        java.util.ListIterator $r2;
        java.lang.Object $r3;
        java.util.NoSuchElementException $r4;
        java.lang.IndexOutOfBoundsException $r5;

        r0 := @this: java.util.AbstractSequentialList;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(i0);

        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r5;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public java.util.Iterator iterator()
    {
        java.util.AbstractSequentialList r0;
        java.util.ListIterator $r1;

        r0 := @this: java.util.AbstractSequentialList;

        $r1 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(0);

        return $r1;
    }

    public abstract java.util.ListIterator listIterator(int);

    public java.lang.Object remove(int)
    {
        java.util.AbstractSequentialList r0;
        int i0;
        java.util.ListIterator r1;
        java.lang.Object r2;
        java.util.NoSuchElementException $r3;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractSequentialList;

        i0 := @parameter0: int;

     label1:
        r1 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(i0);

        r2 = interfaceinvoke r1.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r1.<java.util.ListIterator: void remove()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.util.AbstractSequentialList r0;
        int i0;
        java.lang.Object r1, r3;
        java.util.ListIterator r2;
        boolean $z0;
        java.lang.IndexOutOfBoundsException $r4;

        r0 := @this: java.util.AbstractSequentialList;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        r2 = virtualinvoke r0.<java.util.AbstractSequentialList: java.util.ListIterator listIterator(int)>(i0);

        $z0 = interfaceinvoke r2.<java.util.ListIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        r3 = interfaceinvoke r2.<java.util.ListIterator: java.lang.Object next()>();

        interfaceinvoke r2.<java.util.ListIterator: void set(java.lang.Object)>(r1);

        return r3;
    }
}
