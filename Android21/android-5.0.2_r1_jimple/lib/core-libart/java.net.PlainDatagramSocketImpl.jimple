public class java.net.PlainDatagramSocketImpl extends java.net.DatagramSocketImpl
{
    private volatile boolean isNativeConnected;
    private final dalvik.system.CloseGuard guard;
    private java.net.InetAddress connectedAddress;
    private int connectedPort;

    public void <init>(java.io.FileDescriptor, int)
    {
        java.net.PlainDatagramSocketImpl r0;
        java.io.FileDescriptor r1;
        int i0;
        dalvik.system.CloseGuard $r2, $r3;
        boolean $z0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.io.FileDescriptor;

        i0 := @parameter1: int;

        specialinvoke r0.<java.net.DatagramSocketImpl: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard> = $r2;

        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = -1;

        r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd> = r1;

        r0.<java.net.PlainDatagramSocketImpl: int localPort> = i0;

        $z0 = virtualinvoke r1.<java.io.FileDescriptor: boolean valid()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

     label1:
        return;
    }

    public void <init>()
    {
        java.net.PlainDatagramSocketImpl r0;
        dalvik.system.CloseGuard $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        specialinvoke r0.<java.net.DatagramSocketImpl: void <init>()>();

        $r1 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard> = $r1;

        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = -1;

        $r2 = new java.io.FileDescriptor;

        specialinvoke $r2.<java.io.FileDescriptor: void <init>()>();

        r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd> = $r2;

        return;
    }

    public void bind(int, java.net.InetAddress) throws java.net.SocketException
    {
        java.net.PlainDatagramSocketImpl r0;
        int i0, $i1;
        java.net.InetAddress r1;
        java.io.FileDescriptor $r3, $r4;
        java.lang.Boolean $r5;
        java.io.IOException $r6;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.net.InetAddress;

        $r3 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void bind(java.io.FileDescriptor,java.net.InetAddress,int)>($r3, r1, i0);

        if i0 == 0 goto label1;

        r0.<java.net.PlainDatagramSocketImpl: int localPort> = i0;

        goto label2;

     label1:
        $r4 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        $i1 = staticinvoke <libcore.io.IoBridge: int getSocketLocalPort(java.io.FileDescriptor)>($r4);

        r0.<java.net.PlainDatagramSocketImpl: int localPort> = $i1;

     label2:
        $r5 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(32, $r5);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected void onBind(java.net.InetAddress, int)
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.PlainDatagramSocketImpl: int localPort> = i0;

        return;
    }

    public synchronized void close()
    {
        java.net.PlainDatagramSocketImpl r0;
        dalvik.system.CloseGuard $r2;
        java.io.FileDescriptor $r3;
        java.io.IOException $r4;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        $r2 = r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

     label1:
        $r3 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void onClose()
    {
        java.net.PlainDatagramSocketImpl r0;
        dalvik.system.CloseGuard $r1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        $r1 = r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    public void create() throws java.net.SocketException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        $r1 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor socket(boolean)>(0);

        r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd> = $r1;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        java.net.PlainDatagramSocketImpl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: java.net.PlainDatagramSocketImpl;

     label1:
        $r2 = r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<java.net.PlainDatagramSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void close()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        goto label6;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

     label5:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public java.lang.Object getOption(int) throws java.net.SocketException
    {
        java.net.PlainDatagramSocketImpl r0;
        int i0;
        java.io.FileDescriptor $r1;
        java.lang.Object $r2;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        i0 := @parameter0: int;

        $r1 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        $r2 = staticinvoke <libcore.io.IoBridge: java.lang.Object getSocketOption(java.io.FileDescriptor,int)>($r1, i0);

        return $r2;
    }

    public int getTimeToLive() throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.lang.Object $r1;
        java.lang.Integer $r2;
        int $i0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        $r1 = virtualinvoke r0.<java.net.PlainDatagramSocketImpl: java.lang.Object getOption(int)>(17);

        $r2 = (java.lang.Integer) $r1;

        $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public byte getTTL() throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        int $i0;
        byte $b1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        $i0 = virtualinvoke r0.<java.net.PlainDatagramSocketImpl: int getTimeToLive()>();

        $b1 = (byte) $i0;

        return $b1;
    }

    private static android.system.StructGroupReq makeGroupReq(java.net.InetAddress, java.net.NetworkInterface)
    {
        java.net.InetAddress r0;
        java.net.NetworkInterface r1;
        int i0, $i1;
        android.system.StructGroupReq $r2;

        r0 := @parameter0: java.net.InetAddress;

        r1 := @parameter1: java.net.NetworkInterface;

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<java.net.NetworkInterface: int getIndex()>();

        goto label2;

     label1:
        $i1 = 0;

     label2:
        i0 = $i1;

        $r2 = new android.system.StructGroupReq;

        specialinvoke $r2.<android.system.StructGroupReq: void <init>(int,java.net.InetAddress)>(i0, r0);

        return $r2;
    }

    public void join(java.net.InetAddress) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1;
        android.system.StructGroupReq $r2;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        $r2 = staticinvoke <java.net.PlainDatagramSocketImpl: android.system.StructGroupReq makeGroupReq(java.net.InetAddress,java.net.NetworkInterface)>(r1, null);

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(19, $r2);

        return;
    }

    public void joinGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.net.InetAddress r3;
        boolean $z0;
        java.net.InetSocketAddress $r4;
        android.system.StructGroupReq $r5;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.SocketAddress;

        r2 := @parameter1: java.net.NetworkInterface;

        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 == 0 goto label1;

        $r4 = (java.net.InetSocketAddress) r1;

        r3 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r5 = staticinvoke <java.net.PlainDatagramSocketImpl: android.system.StructGroupReq makeGroupReq(java.net.InetAddress,java.net.NetworkInterface)>(r3, r2);

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(19, $r5);

     label1:
        return;
    }

    public void leave(java.net.InetAddress) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1;
        android.system.StructGroupReq $r2;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        $r2 = staticinvoke <java.net.PlainDatagramSocketImpl: android.system.StructGroupReq makeGroupReq(java.net.InetAddress,java.net.NetworkInterface)>(r1, null);

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(20, $r2);

        return;
    }

    public void leaveGroup(java.net.SocketAddress, java.net.NetworkInterface) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.SocketAddress r1;
        java.net.NetworkInterface r2;
        java.net.InetAddress r3;
        boolean $z0;
        java.net.InetSocketAddress $r4;
        android.system.StructGroupReq $r5;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.SocketAddress;

        r2 := @parameter1: java.net.NetworkInterface;

        $z0 = r1 instanceof java.net.InetSocketAddress;

        if $z0 == 0 goto label1;

        $r4 = (java.net.InetSocketAddress) r1;

        r3 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r5 = staticinvoke <java.net.PlainDatagramSocketImpl: android.system.StructGroupReq makeGroupReq(java.net.InetAddress,java.net.NetworkInterface)>(r3, r2);

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(20, $r5);

     label1:
        return;
    }

    protected int peek(java.net.InetAddress) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1, $r5;
        java.net.DatagramPacket r2, $r3;
        int i0;
        byte[] $r4, $r6;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        $r3 = new java.net.DatagramPacket;

        $r4 = <libcore.util.EmptyArray: byte[] BYTE>;

        specialinvoke $r3.<java.net.DatagramPacket: void <init>(byte[],int)>($r4, 0);

        r2 = $r3;

        i0 = virtualinvoke r0.<java.net.PlainDatagramSocketImpl: int peekData(java.net.DatagramPacket)>(r2);

        $r5 = virtualinvoke r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r6 = virtualinvoke $r5.<java.net.InetAddress: byte[] getAddress()>();

        r1.<java.net.InetAddress: byte[] ipaddress> = $r6;

        return i0;
    }

    private void doRecv(java.net.DatagramPacket, int) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;
        int i0, $i1, $i2;
        java.io.FileDescriptor $r2;
        byte[] $r3;
        boolean $z0, $z1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.DatagramPacket;

        i0 := @parameter1: int;

        $r2 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        $r3 = virtualinvoke r1.<java.net.DatagramPacket: byte[] getData()>();

        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getOffset()>();

        $i2 = virtualinvoke r1.<java.net.DatagramPacket: int getLength()>();

        $z0 = r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected>;

        staticinvoke <libcore.io.IoBridge: int recvfrom(boolean,java.io.FileDescriptor,byte[],int,int,int,java.net.DatagramPacket,boolean)>(0, $r2, $r3, $i1, $i2, i0, r1, $z0);

        $z1 = r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<java.net.PlainDatagramSocketImpl: void updatePacketRecvAddress(java.net.DatagramPacket)>(r1);

     label1:
        return;
    }

    public void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.DatagramPacket;

        specialinvoke r0.<java.net.PlainDatagramSocketImpl: void doRecv(java.net.DatagramPacket,int)>(r1, 0);

        return;
    }

    public int peekData(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;
        int $i0, $i1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.DatagramPacket;

        $i0 = <android.system.OsConstants: int MSG_PEEK>;

        specialinvoke r0.<java.net.PlainDatagramSocketImpl: void doRecv(java.net.DatagramPacket,int)>(r1, $i0);

        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();

        return $i1;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;
        int i0, $i1, $i2, $i3;
        java.net.InetAddress r2, $r3;
        boolean $z0, $z1;
        java.io.FileDescriptor $r4;
        byte[] $r5;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.DatagramPacket;

        $z0 = r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected>;

        if $z0 == 0 goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<java.net.DatagramPacket: int getPort()>();

     label2:
        i0 = $i1;

        $z1 = r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected>;

        if $z1 == 0 goto label3;

        $r3 = null;

        goto label4;

     label3:
        $r3 = virtualinvoke r1.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

     label4:
        r2 = $r3;

        $r4 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        $r5 = virtualinvoke r1.<java.net.DatagramPacket: byte[] getData()>();

        $i2 = virtualinvoke r1.<java.net.DatagramPacket: int getOffset()>();

        $i3 = virtualinvoke r1.<java.net.DatagramPacket: int getLength()>();

        staticinvoke <libcore.io.IoBridge: int sendto(java.io.FileDescriptor,byte[],int,int,int,java.net.InetAddress,int)>($r4, $r5, $i2, $i3, 0, r2, i0);

        return;
    }

    public void setOption(int, java.lang.Object) throws java.net.SocketException
    {
        java.net.PlainDatagramSocketImpl r0;
        int i0;
        java.lang.Object r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void setSocketOption(java.io.FileDescriptor,int,java.lang.Object)>($r2, i0, r1);

        return;
    }

    public void setTimeToLive(int) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setOption(int,java.lang.Object)>(17, $r1);

        return;
    }

    public void setTTL(byte) throws java.io.IOException
    {
        java.net.PlainDatagramSocketImpl r0;
        byte b0;
        short $s1;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        b0 := @parameter0: byte;

        $s1 = b0 & 255;

        virtualinvoke r0.<java.net.PlainDatagramSocketImpl: void setTimeToLive(int)>($s1);

        return;
    }

    public void connect(java.net.InetAddress, int) throws java.net.SocketException
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1, $r5;
        int i0;
        java.io.FileDescriptor $r3;
        byte[] $r4;
        java.net.UnknownHostException $r6;
        java.net.SocketException $r7;
        java.lang.StringBuilder $r8, $r9, $r11;
        java.lang.String $r10, $r12;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        $r3 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r3, r1, i0);

     label1:
        $r4 = virtualinvoke r1.<java.net.InetAddress: byte[] getAddress()>();

        $r5 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r4);

        r0.<java.net.PlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = $r5;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.net.SocketException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host is unresolved: ");

        $r10 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.net.SocketException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = i0;

        r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected> = 1;

        return;

        catch java.net.UnknownHostException from label1 to label2 with label3;
    }

    protected void onConnect(java.net.InetAddress, int)
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.InetAddress r1;
        int i0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected> = 1;

        r0.<java.net.PlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = r1;

        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = i0;

        return;
    }

    public void disconnect()
    {
        java.net.PlainDatagramSocketImpl r0;
        android.system.ErrnoException r1, $r6;
        java.net.InetAddress $r2;
        java.io.FileDescriptor $r3;
        libcore.io.Os $r4;
        java.net.SocketException $r5;
        java.lang.AssertionError $r7;

        r0 := @this: java.net.PlainDatagramSocketImpl;

     label1:
        $r4 = <libcore.io.Libcore: libcore.io.Os os>;

        $r3 = r0.<java.net.PlainDatagramSocketImpl: java.io.FileDescriptor fd>;

        $r2 = <java.net.InetAddress: java.net.InetAddress UNSPECIFIED>;

        interfaceinvoke $r4.<libcore.io.Os: void connect(java.io.FileDescriptor,java.net.InetAddress,int)>($r3, $r2, 0);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r7;

     label4:
        $r5 := @caughtexception;

     label5:
        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = -1;

        r0.<java.net.PlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = null;

        r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected> = 0;

        return;

        catch android.system.ErrnoException from label1 to label2 with label3;
        catch java.net.SocketException from label1 to label2 with label4;
    }

    protected void onDisconnect()
    {
        java.net.PlainDatagramSocketImpl r0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r0.<java.net.PlainDatagramSocketImpl: int connectedPort> = -1;

        r0.<java.net.PlainDatagramSocketImpl: java.net.InetAddress connectedAddress> = null;

        r0.<java.net.PlainDatagramSocketImpl: boolean isNativeConnected> = 0;

        return;
    }

    private void updatePacketRecvAddress(java.net.DatagramPacket)
    {
        java.net.PlainDatagramSocketImpl r0;
        java.net.DatagramPacket r1;
        java.net.InetAddress $r2;
        int $i0;

        r0 := @this: java.net.PlainDatagramSocketImpl;

        r1 := @parameter0: java.net.DatagramPacket;

        $r2 = r0.<java.net.PlainDatagramSocketImpl: java.net.InetAddress connectedAddress>;

        virtualinvoke r1.<java.net.DatagramPacket: void setAddress(java.net.InetAddress)>($r2);

        $i0 = r0.<java.net.PlainDatagramSocketImpl: int connectedPort>;

        virtualinvoke r1.<java.net.DatagramPacket: void setPort(int)>($i0);

        return;
    }
}
