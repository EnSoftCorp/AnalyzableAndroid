public final class java.lang.Void extends java.lang.Object
{
    public static final java.lang.Class TYPE;

    private static java.lang.Class lookupType()
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r3;
        java.lang.Exception $r4, r6;
        java.lang.AssertionError $r5;

     label1:
        $r2 = class "java/lang/Runnable";

        $r1 = <libcore.util.EmptyArray: java.lang.Class[] CLASS>;

        r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("run", $r1);

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r6 = $r4;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>(r6);

        throw $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void <init>()
    {
        java.lang.Void r0;

        r0 := @this: java.lang.Void;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <java.lang.Void: java.lang.Class lookupType()>();

        <java.lang.Void: java.lang.Class TYPE> = $r0;

        return;
    }
}
