final class java.util.TreeMap$BoundedMap$BoundedEntrySet extends java.util.AbstractSet
{
    final java.util.TreeMap$BoundedMap this$1;

    void <init>(java.util.TreeMap$BoundedMap)
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.util.TreeMap$BoundedMap r1;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        r1 := @parameter0: java.util.TreeMap$BoundedMap;

        r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1> = r1;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    public int size()
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.util.TreeMap$BoundedMap $r1;
        int $i0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $i0 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.util.TreeMap$BoundedMap $r1;
        boolean $z0;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        $r1 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $z0 = virtualinvoke $r1.<java.util.TreeMap$BoundedMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.util.TreeMap$BoundedMap$BoundedEntrySet$1 $r1;
        java.util.TreeMap$BoundedMap $r2;
        java.util.TreeMap$Node $r3;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        $r1 = new java.util.TreeMap$BoundedMap$BoundedEntrySet$1;

        $r2 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $r3 = staticinvoke <java.util.TreeMap$BoundedMap: java.util.TreeMap$Node access$700(java.util.TreeMap$BoundedMap,boolean)>($r2, 1);

        specialinvoke $r1.<java.util.TreeMap$BoundedMap$BoundedEntrySet$1: void <init>(java.util.TreeMap$BoundedMap$BoundedEntrySet,java.util.TreeMap$Node)>(r0, $r3);

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        boolean $z0, $z1, $z2;
        java.util.TreeMap$BoundedMap $r3, $r5;
        java.util.TreeMap $r6;
        java.util.TreeMap$Node $r7;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$900(java.util.TreeMap$BoundedMap,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label2;

        $r5 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $r6 = $r5.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r7 = virtualinvoke $r6.<java.util.TreeMap: java.util.TreeMap$Node findByEntry(java.util.Map$Entry)>(r2);

        if $r7 == null goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.TreeMap$BoundedMap$BoundedEntrySet r0;
        java.lang.Object r1, $r4;
        java.util.Map$Entry r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.TreeMap$BoundedMap $r3, $r5;
        java.util.TreeMap $r6;
        java.util.Set $r7;

        r0 := @this: java.util.TreeMap$BoundedMap$BoundedEntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $r4 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = staticinvoke <java.util.TreeMap$BoundedMap: boolean access$900(java.util.TreeMap$BoundedMap,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label2;

        $r5 = r0.<java.util.TreeMap$BoundedMap$BoundedEntrySet: java.util.TreeMap$BoundedMap this$1>;

        $r6 = $r5.<java.util.TreeMap$BoundedMap: java.util.TreeMap this$0>;

        $r7 = virtualinvoke $r6.<java.util.TreeMap: java.util.Set entrySet()>();

        $z2 = interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }
}
