abstract enum class java.util.TreeMap$Bound extends java.lang.Enum
{
    public static final enum java.util.TreeMap$Bound INCLUSIVE;
    public static final enum java.util.TreeMap$Bound EXCLUSIVE;
    public static final enum java.util.TreeMap$Bound NO_BOUND;
    private static final java.util.TreeMap$Bound[] $VALUES;

    public static java.util.TreeMap$Bound[] values()
    {
        java.util.TreeMap$Bound[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.util.TreeMap$Bound[]) $r1;

        return $r2;
    }

    public static java.util.TreeMap$Bound valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.util.TreeMap$Bound $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/util/TreeMap$Bound", r0);

        $r2 = (java.util.TreeMap$Bound) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        java.util.TreeMap$Bound r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.util.TreeMap$Bound;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    public abstract java.lang.String leftCap(java.lang.Object);

    public abstract java.lang.String rightCap(java.lang.Object);

    void <init>(java.lang.String, int, java.util.TreeMap$1)
    {
        java.util.TreeMap$Bound r0;
        java.lang.String r1;
        int i0;
        java.util.TreeMap$1 r2;

        r0 := @this: java.util.TreeMap$Bound;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.util.TreeMap$1;

        specialinvoke r0.<java.util.TreeMap$Bound: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    static void <clinit>()
    {
        java.util.TreeMap$Bound$1 $r0;
        java.util.TreeMap$Bound$2 $r1;
        java.util.TreeMap$Bound$3 $r2;
        java.util.TreeMap$Bound[] $r3;
        java.util.TreeMap$Bound $r4, $r5, $r6;

        $r0 = new java.util.TreeMap$Bound$1;

        specialinvoke $r0.<java.util.TreeMap$Bound$1: void <init>(java.lang.String,int)>("INCLUSIVE", 0);

        <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE> = $r0;

        $r1 = new java.util.TreeMap$Bound$2;

        specialinvoke $r1.<java.util.TreeMap$Bound$2: void <init>(java.lang.String,int)>("EXCLUSIVE", 1);

        <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE> = $r1;

        $r2 = new java.util.TreeMap$Bound$3;

        specialinvoke $r2.<java.util.TreeMap$Bound$3: void <init>(java.lang.String,int)>("NO_BOUND", 2);

        <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND> = $r2;

        $r3 = newarray (java.util.TreeMap$Bound)[3];

        $r4 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound INCLUSIVE>;

        $r3[0] = $r4;

        $r5 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound EXCLUSIVE>;

        $r3[1] = $r5;

        $r6 = <java.util.TreeMap$Bound: java.util.TreeMap$Bound NO_BOUND>;

        $r3[2] = $r6;

        <java.util.TreeMap$Bound: java.util.TreeMap$Bound[] $VALUES> = $r3;

        return;
    }
}
