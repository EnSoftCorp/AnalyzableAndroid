public final enum class dalvik.system.profiler.BinaryHprof$Tag extends java.lang.Enum
{
    public static final enum dalvik.system.profiler.BinaryHprof$Tag STRING_IN_UTF8;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag LOAD_CLASS;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag UNLOAD_CLASS;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag STACK_FRAME;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag STACK_TRACE;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag ALLOC_SITES;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag HEAP_SUMMARY;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag START_THREAD;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag END_THREAD;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_SEGMENT;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_END;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag CPU_SAMPLES;
    public static final enum dalvik.system.profiler.BinaryHprof$Tag CONTROL_SETTINGS;
    public final byte tag;
    public final int minimumSize;
    public final int maximumSize;
    private static final java.util.Map BYTE_TO_TAG;
    private static final dalvik.system.profiler.BinaryHprof$Tag[] $VALUES;

    public static dalvik.system.profiler.BinaryHprof$Tag[] values()
    {
        dalvik.system.profiler.BinaryHprof$Tag[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (dalvik.system.profiler.BinaryHprof$Tag[]) $r1;

        return $r2;
    }

    public static dalvik.system.profiler.BinaryHprof$Tag valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        dalvik.system.profiler.BinaryHprof$Tag $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "dalvik/system/profiler/BinaryHprof$Tag", r0);

        $r2 = (dalvik.system.profiler.BinaryHprof$Tag) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int, int, int)
    {
        dalvik.system.profiler.BinaryHprof$Tag r0;
        java.lang.String r1;
        int i0, i1, i2, $i4;
        byte $b3;

        r0 := @this: dalvik.system.profiler.BinaryHprof$Tag;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        $b3 = (byte) i1;

        r0.<dalvik.system.profiler.BinaryHprof$Tag: byte tag> = $b3;

        if i2 <= 0 goto label1;

        r0.<dalvik.system.profiler.BinaryHprof$Tag: int minimumSize> = i2;

        r0.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize> = i2;

        goto label2;

     label1:
        $i4 = neg i2;

        r0.<dalvik.system.profiler.BinaryHprof$Tag: int minimumSize> = $i4;

        r0.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize> = 0;

     label2:
        return;
    }

    public static dalvik.system.profiler.BinaryHprof$Tag get(byte)
    {
        byte b0;
        java.util.Map $r0;
        java.lang.Byte $r1;
        java.lang.Object $r2;
        dalvik.system.profiler.BinaryHprof$Tag $r3;

        b0 := @parameter0: byte;

        $r0 = <dalvik.system.profiler.BinaryHprof$Tag: java.util.Map BYTE_TO_TAG>;

        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(b0);

        $r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (dalvik.system.profiler.BinaryHprof$Tag) $r2;

        return $r3;
    }

    public java.lang.String checkSize(int)
    {
        dalvik.system.profiler.BinaryHprof$Tag r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.String $r8, $r16;

        r0 := @this: dalvik.system.profiler.BinaryHprof$Tag;

        i0 := @parameter0: int;

        $i1 = r0.<dalvik.system.profiler.BinaryHprof$Tag: int minimumSize>;

        if i0 >= $i1 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected a minimial record size of ");

        $i5 = r0.<dalvik.system.profiler.BinaryHprof$Tag: int minimumSize>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but received ");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r16;

     label1:
        $i2 = r0.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        if $i2 != 0 goto label2;

        return null;

     label2:
        $i3 = r0.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        if i0 <= $i3 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected a maximum record size of ");

        $i4 = r0.<dalvik.system.profiler.BinaryHprof$Tag: int maximumSize>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but received ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label3:
        return null;
    }

    static void <clinit>()
    {
        dalvik.system.profiler.BinaryHprof$Tag[] r0, $r17;
        int i0, i1;
        dalvik.system.profiler.BinaryHprof$Tag r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30;
        byte $b2;
        java.util.HashMap $r31;
        java.util.Map $r33;
        java.lang.Byte $r34;

        $r2 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r2.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("STRING_IN_UTF8", 0, 1, -4);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STRING_IN_UTF8> = $r2;

        $r3 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r3.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("LOAD_CLASS", 1, 2, 16);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag LOAD_CLASS> = $r3;

        $r4 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r4.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("UNLOAD_CLASS", 2, 3, 4);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag UNLOAD_CLASS> = $r4;

        $r5 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r5.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("STACK_FRAME", 3, 4, 24);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_FRAME> = $r5;

        $r6 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r6.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("STACK_TRACE", 4, 5, -12);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_TRACE> = $r6;

        $r7 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r7.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("ALLOC_SITES", 5, 6, -34);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag ALLOC_SITES> = $r7;

        $r8 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r8.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("HEAP_SUMMARY", 6, 7, 24);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_SUMMARY> = $r8;

        $r9 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r9.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("START_THREAD", 7, 10, 24);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag START_THREAD> = $r9;

        $r10 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r10.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("END_THREAD", 8, 11, 4);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag END_THREAD> = $r10;

        $r11 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r11.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("HEAP_DUMP", 9, 12, 0);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP> = $r11;

        $r12 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r12.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("HEAP_DUMP_SEGMENT", 10, 28, 0);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_SEGMENT> = $r12;

        $r13 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r13.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("HEAP_DUMP_END", 11, 44, 0);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_END> = $r13;

        $r15 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r15.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("CPU_SAMPLES", 12, 13, -8);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CPU_SAMPLES> = $r15;

        $r14 = new dalvik.system.profiler.BinaryHprof$Tag;

        specialinvoke $r14.<dalvik.system.profiler.BinaryHprof$Tag: void <init>(java.lang.String,int,int,int)>("CONTROL_SETTINGS", 13, 14, 6);

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CONTROL_SETTINGS> = $r14;

        $r17 = newarray (dalvik.system.profiler.BinaryHprof$Tag)[14];

        $r16 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STRING_IN_UTF8>;

        $r17[0] = $r16;

        $r19 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag LOAD_CLASS>;

        $r17[1] = $r19;

        $r18 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag UNLOAD_CLASS>;

        $r17[2] = $r18;

        $r21 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_FRAME>;

        $r17[3] = $r21;

        $r20 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag STACK_TRACE>;

        $r17[4] = $r20;

        $r23 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag ALLOC_SITES>;

        $r17[5] = $r23;

        $r22 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_SUMMARY>;

        $r17[6] = $r22;

        $r25 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag START_THREAD>;

        $r17[7] = $r25;

        $r24 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag END_THREAD>;

        $r17[8] = $r24;

        $r27 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP>;

        $r17[9] = $r27;

        $r26 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_SEGMENT>;

        $r17[10] = $r26;

        $r29 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag HEAP_DUMP_END>;

        $r17[11] = $r29;

        $r28 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CPU_SAMPLES>;

        $r17[12] = $r28;

        $r30 = <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag CONTROL_SETTINGS>;

        $r17[13] = $r30;

        <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag[] $VALUES> = $r17;

        $r31 = new java.util.HashMap;

        specialinvoke $r31.<java.util.HashMap: void <init>()>();

        <dalvik.system.profiler.BinaryHprof$Tag: java.util.Map BYTE_TO_TAG> = $r31;

        r0 = staticinvoke <dalvik.system.profiler.BinaryHprof$Tag: dalvik.system.profiler.BinaryHprof$Tag[] values()>();

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r0[i1];

        $r33 = <dalvik.system.profiler.BinaryHprof$Tag: java.util.Map BYTE_TO_TAG>;

        $b2 = r1.<dalvik.system.profiler.BinaryHprof$Tag: byte tag>;

        $r34 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
