final enum class java.util.TreeMap$Relation extends java.lang.Enum
{
    public static final enum java.util.TreeMap$Relation LOWER;
    public static final enum java.util.TreeMap$Relation FLOOR;
    public static final enum java.util.TreeMap$Relation EQUAL;
    public static final enum java.util.TreeMap$Relation CREATE;
    public static final enum java.util.TreeMap$Relation CEILING;
    public static final enum java.util.TreeMap$Relation HIGHER;
    private static final java.util.TreeMap$Relation[] $VALUES;

    public static java.util.TreeMap$Relation[] values()
    {
        java.util.TreeMap$Relation[] $r0, $r2;
        java.lang.Object $r1;

        $r0 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation[] $VALUES>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.util.TreeMap$Relation[]) $r1;

        return $r2;
    }

    public static java.util.TreeMap$Relation valueOf(java.lang.String)
    {
        java.lang.String r0;
        java.lang.Enum $r1;
        java.util.TreeMap$Relation $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "java/util/TreeMap$Relation", r0);

        $r2 = (java.util.TreeMap$Relation) $r1;

        return $r2;
    }

    private void <init>(java.lang.String, int)
    {
        java.util.TreeMap$Relation r0;
        java.lang.String r1;
        int i0;

        r0 := @this: java.util.TreeMap$Relation;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0);

        return;
    }

    java.util.TreeMap$Relation forOrder(boolean)
    {
        java.util.TreeMap$Relation r0, $r2, $r3, $r4, $r5, $r6;
        boolean z0;
        int[] $r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r7;

        r0 := @this: java.util.TreeMap$Relation;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = <java.util.TreeMap$2: int[] $SwitchMap$java$util$TreeMap$Relation>;

        $i0 = virtualinvoke r0.<java.util.TreeMap$Relation: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label2:
        $r2 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        return $r2;

     label3:
        $r6 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        return $r6;

     label4:
        $r5 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation EQUAL>;

        return $r5;

     label5:
        $r4 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        return $r4;

     label6:
        $r3 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        return $r3;

     label7:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;
    }

    static void <clinit>()
    {
        java.util.TreeMap$Relation $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.TreeMap$Relation[] $r6;

        $r0 = new java.util.TreeMap$Relation;

        specialinvoke $r0.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("LOWER", 0);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER> = $r0;

        $r1 = new java.util.TreeMap$Relation;

        specialinvoke $r1.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("FLOOR", 1);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR> = $r1;

        $r2 = new java.util.TreeMap$Relation;

        specialinvoke $r2.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("EQUAL", 2);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation EQUAL> = $r2;

        $r3 = new java.util.TreeMap$Relation;

        specialinvoke $r3.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("CREATE", 3);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation CREATE> = $r3;

        $r4 = new java.util.TreeMap$Relation;

        specialinvoke $r4.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("CEILING", 4);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING> = $r4;

        $r5 = new java.util.TreeMap$Relation;

        specialinvoke $r5.<java.util.TreeMap$Relation: void <init>(java.lang.String,int)>("HIGHER", 5);

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER> = $r5;

        $r6 = newarray (java.util.TreeMap$Relation)[6];

        $r7 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation LOWER>;

        $r6[0] = $r7;

        $r8 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation FLOOR>;

        $r6[1] = $r8;

        $r9 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation EQUAL>;

        $r6[2] = $r9;

        $r10 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CREATE>;

        $r6[3] = $r10;

        $r11 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation CEILING>;

        $r6[4] = $r11;

        $r12 = <java.util.TreeMap$Relation: java.util.TreeMap$Relation HIGHER>;

        $r6[5] = $r12;

        <java.util.TreeMap$Relation: java.util.TreeMap$Relation[] $VALUES> = $r6;

        return;
    }
}
