public class java.util.Stack extends java.util.Vector
{
    private static final long serialVersionUID;

    public void <init>()
    {
        java.util.Stack r0;

        r0 := @this: java.util.Stack;

        specialinvoke r0.<java.util.Vector: void <init>()>();

        return;
    }

    public boolean empty()
    {
        java.util.Stack r0;
        boolean $z0;

        r0 := @this: java.util.Stack;

        $z0 = virtualinvoke r0.<java.util.Stack: boolean isEmpty()>();

        return $z0;
    }

    public synchronized java.lang.Object peek()
    {
        java.util.Stack r0;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.IndexOutOfBoundsException $r4;
        java.util.EmptyStackException $r5;

        r0 := @this: java.util.Stack;

     label1:
        $r2 = r0.<java.util.Stack: java.lang.Object[] elementData>;

        $i0 = r0.<java.util.Stack: int elementCount>;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.util.EmptyStackException;

        specialinvoke $r5.<java.util.EmptyStackException: void <init>()>();

        throw $r5;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public synchronized java.lang.Object pop()
    {
        java.util.Stack r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r1;
        java.lang.Object[] $r2, $r3;
        java.util.EmptyStackException $r4;

        r0 := @this: java.util.Stack;

        $i1 = r0.<java.util.Stack: int elementCount>;

        if $i1 != 0 goto label1;

        $r4 = new java.util.EmptyStackException;

        specialinvoke $r4.<java.util.EmptyStackException: void <init>()>();

        throw $r4;

     label1:
        $i2 = r0.<java.util.Stack: int elementCount>;

        $i3 = $i2 - 1;

        r0.<java.util.Stack: int elementCount> = $i3;

        i0 = $i3;

        $r2 = r0.<java.util.Stack: java.lang.Object[] elementData>;

        r1 = $r2[i0];

        $r3 = r0.<java.util.Stack: java.lang.Object[] elementData>;

        $r3[i0] = null;

        $i4 = r0.<java.util.Stack: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.Stack: int modCount> = $i5;

        return r1;
    }

    public java.lang.Object push(java.lang.Object)
    {
        java.util.Stack r0;
        java.lang.Object r1;

        r0 := @this: java.util.Stack;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.Stack: void addElement(java.lang.Object)>(r1);

        return r1;
    }

    public synchronized int search(java.lang.Object)
    {
        java.util.Stack r0;
        java.lang.Object r1, $r3, $r4;
        java.lang.Object[] r2;
        int i0, i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this: java.util.Stack;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.Stack: java.lang.Object[] elementData>;

        i0 = r0.<java.util.Stack: int elementCount>;

        if r1 == null goto label4;

        i1 = i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r4 = r2[i1];

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $i3 = i0 - i1;

        return $i3;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        goto label7;

     label4:
        i4 = i0 - 1;

     label5:
        if i4 < 0 goto label7;

        $r3 = r2[i4];

        if $r3 != null goto label6;

        $i2 = i0 - i4;

        return $i2;

     label6:
        i4 = i4 + -1;

        goto label5;

     label7:
        return -1;
    }

    public static void <clinit>()
    {
        <java.util.Stack: long serialVersionUID> = 1224463164541339165L;

        return;
    }
}
