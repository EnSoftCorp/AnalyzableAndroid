public abstract class javax.net.ssl.SSLSocketFactory extends javax.net.SocketFactory
{
    private static javax.net.SocketFactory defaultSocketFactory;
    private static int lastCacheVersion;

    public static synchronized javax.net.SocketFactory getDefault()
    {
        int i0, $i1;
        java.lang.String r0, $r15, $r24, $r25, $r29;
        java.lang.ClassLoader r1;
        java.lang.Class r2, $r13;
        javax.net.SocketFactory $r3, $r4, $r5, $r6, $r9, $r12, $r14, $r16, $r18;
        javax.net.ssl.DefaultSSLSocketFactory $r7;
        javax.net.ssl.SSLSocketFactory $r8;
        java.lang.Thread $r10;
        java.lang.Object $r11;
        boolean $z0;
        java.lang.Exception $r17, r30;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r26, $r28;
        java.security.NoSuchAlgorithmException $r27;
        javax.net.ssl.SSLContext r31;

        i0 = staticinvoke <org.apache.harmony.security.fortress.Services: int getCacheVersion()>();

        $r3 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        if $r3 == null goto label01;

        $i1 = <javax.net.ssl.SSLSocketFactory: int lastCacheVersion>;

        if $i1 != i0 goto label01;

        $r18 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        return $r18;

     label01:
        <javax.net.ssl.SSLSocketFactory: int lastCacheVersion> = i0;

        r0 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("ssl.SocketFactory.provider");

        if r0 == null goto label08;

        $r9 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        if $r9 == null goto label03;

        $r14 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        $r13 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z0 == 0 goto label02;

        $r16 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        return $r16;

     label02:
        <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory> = null;

     label03:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r1 = virtualinvoke $r10.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r1 != null goto label04;

        r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label04:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, r1);

        $r11 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r12 = (javax.net.SocketFactory) $r11;

        <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory> = $r12;

     label05:
        goto label07;

     label06:
        $r17 := @caughtexception;

        r30 = $r17;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create ");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ClassLoader ");

        $r25 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r24 = virtualinvoke r30.<java.lang.Exception: java.lang.String getMessage()>();

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <java.lang.System: void logW(java.lang.String)>($r29);

     label07:
        goto label09;

     label08:
        <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory> = null;

     label09:
        $r4 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        if $r4 != null goto label14;

     label10:
        r31 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getDefault()>();

     label11:
        goto label13;

     label12:
        $r27 := @caughtexception;

        r31 = null;

     label13:
        if r31 == null goto label14;

        $r8 = virtualinvoke r31.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory> = $r8;

     label14:
        $r5 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        if $r5 != null goto label15;

        $r7 = new javax.net.ssl.DefaultSSLSocketFactory;

        specialinvoke $r7.<javax.net.ssl.DefaultSSLSocketFactory: void <init>(java.lang.String)>("No SSLSocketFactory installed");

        <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory> = $r7;

     label15:
        $r6 = <javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory defaultSocketFactory>;

        return $r6;

        catch java.lang.Exception from label04 to label05 with label06;
        catch java.security.NoSuchAlgorithmException from label10 to label11 with label12;
    }

    public void <init>()
    {
        javax.net.ssl.SSLSocketFactory r0;

        r0 := @this: javax.net.ssl.SSLSocketFactory;

        specialinvoke r0.<javax.net.SocketFactory: void <init>()>();

        return;
    }

    public abstract java.lang.String[] getDefaultCipherSuites();

    public abstract java.lang.String[] getSupportedCipherSuites();

    public abstract java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException;

    static void <clinit>()
    {
        <javax.net.ssl.SSLSocketFactory: int lastCacheVersion> = -1;

        return;
    }
}
