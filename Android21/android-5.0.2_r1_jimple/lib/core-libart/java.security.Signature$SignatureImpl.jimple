class java.security.Signature$SignatureImpl extends java.security.Signature
{
    private final java.lang.Object initLock;
    private final java.security.Provider specifiedProvider;
    private java.security.SignatureSpi spiImpl;

    public void <init>(java.lang.String, java.security.Provider)
    {
        java.security.Signature$SignatureImpl r0;
        java.lang.String r1;
        java.security.Provider r2;
        java.lang.Object $r3;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.Provider;

        specialinvoke r0.<java.security.Signature: void <init>(java.lang.String)>(r1);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<java.security.Signature$SignatureImpl: java.lang.Object initLock> = $r3;

        r0.<java.security.Signature$SignatureImpl: java.security.Provider specifiedProvider> = r2;

        return;
    }

    private void <init>(java.lang.String, java.security.Provider, java.security.SignatureSpi)
    {
        java.security.Signature$SignatureImpl r0;
        java.lang.String r1;
        java.security.Provider r2;
        java.security.SignatureSpi r3;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.security.SignatureSpi;

        specialinvoke r0.<java.security.Signature$SignatureImpl: void <init>(java.lang.String,java.security.Provider)>(r1, r2);

        r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl> = r3;

        return;
    }

    void ensureProviderChosen()
    {
        java.security.Signature$SignatureImpl r0;

        r0 := @this: java.security.Signature$SignatureImpl;

        specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi(java.security.Key)>(null);

        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        java.security.Signature$SignatureImpl r0;
        java.security.SignatureSpi $r1;
        byte[] $r2;

        r0 := @this: java.security.Signature$SignatureImpl;

        $r1 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        $r2 = virtualinvoke $r1.<java.security.SignatureSpi: byte[] engineSign()>();

        return $r2;
    }

    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        java.security.Signature$SignatureImpl r0;
        byte b0;
        java.security.SignatureSpi $r1;

        r0 := @this: java.security.Signature$SignatureImpl;

        b0 := @parameter0: byte;

        $r1 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        virtualinvoke $r1.<java.security.SignatureSpi: void engineUpdate(byte)>(b0);

        return;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        java.security.Signature$SignatureImpl r0;
        byte[] r1;
        java.security.SignatureSpi $r2;
        boolean $z0;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: byte[];

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        $z0 = virtualinvoke $r2.<java.security.SignatureSpi: boolean engineVerify(byte[])>(r1);

        return $z0;
    }

    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        java.security.Signature$SignatureImpl r0;
        byte[] r1;
        int i0, i1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        virtualinvoke $r2.<java.security.SignatureSpi: void engineUpdate(byte[],int,int)>(r1, i0, i1);

        return;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        java.security.Signature$SignatureImpl r0;
        java.security.PrivateKey r1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.security.PrivateKey;

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r2.<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)>(r1);

        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        java.security.Signature$SignatureImpl r0;
        java.security.PublicKey r1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.security.PublicKey;

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi(java.security.Key)>(r1);

        virtualinvoke $r2.<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)>(r1);

        return;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        java.security.Signature$SignatureImpl r0;
        java.lang.String r1;
        java.security.SignatureSpi $r2;
        java.lang.Object $r3;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        $r3 = virtualinvoke $r2.<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)>(r1);

        return $r3;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        java.security.Signature$SignatureImpl r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.security.SignatureSpi $r3;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        virtualinvoke $r3.<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.Signature$SignatureImpl r0;
        java.security.spec.AlgorithmParameterSpec r1;
        java.security.SignatureSpi $r2;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi()>();

        virtualinvoke $r2.<java.security.SignatureSpi: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)>(r1);

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        java.security.Signature$SignatureImpl r0, $r3;
        java.security.SignatureSpi r1, $r2, $r6, $r8;
        java.lang.String $r4;
        java.security.Provider $r5;
        java.lang.Object $r7;

        r0 := @this: java.security.Signature$SignatureImpl;

        $r2 = r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl>;

        if $r2 == null goto label1;

        $r6 = r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl>;

        $r7 = virtualinvoke $r6.<java.security.SignatureSpi: java.lang.Object clone()>();

        $r8 = (java.security.SignatureSpi) $r7;

        goto label2;

     label1:
        $r8 = null;

     label2:
        r1 = $r8;

        $r3 = new java.security.Signature$SignatureImpl;

        $r4 = virtualinvoke r0.<java.security.Signature$SignatureImpl: java.lang.String getAlgorithm()>();

        $r5 = virtualinvoke r0.<java.security.Signature$SignatureImpl: java.security.Provider getProvider()>();

        specialinvoke $r3.<java.security.Signature$SignatureImpl: void <init>(java.lang.String,java.security.Provider,java.security.SignatureSpi)>($r4, $r5, r1);

        return $r3;
    }

    private java.security.SignatureSpi getSpi(java.security.Key)
    {
        java.security.Signature$SignatureImpl r0;
        java.security.Key r1;
        java.lang.Object r2, $r5, $r9;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r3;
        java.lang.Throwable r4, $r19;
        java.security.SignatureSpi $r6, $r10, $r12, $r20;
        java.lang.String $r7, $r17, $r18;
        java.security.Provider $r8, $r11;
        java.security.ProviderException $r13;
        java.lang.StringBuilder $r14, $r15, $r16;

        r0 := @this: java.security.Signature$SignatureImpl;

        r1 := @parameter0: java.security.Key;

        $r5 = r0.<java.security.Signature$SignatureImpl: java.lang.Object initLock>;

        r2 = $r5;

        entermonitor $r5;

     label1:
        $r6 = r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl>;

        if $r6 == null goto label3;

        if r1 != null goto label3;

        $r20 = r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl>;

        exitmonitor r2;

     label2:
        return $r20;

     label3:
        $r8 = r0.<java.security.Signature$SignatureImpl: java.security.Provider specifiedProvider>;

        $r7 = r0.<java.security.Signature$SignatureImpl: java.lang.String algorithm>;

        r3 = staticinvoke <java.security.Signature: org.apache.harmony.security.fortress.Engine$SpiAndProvider access$000(java.security.Key,java.security.Provider,java.lang.String)>(r1, $r8, $r7);

        if r3 != null goto label4;

        $r13 = new java.security.ProviderException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No provider for ");

        $r17 = virtualinvoke r0.<java.security.Signature$SignatureImpl: java.lang.String getAlgorithm()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.security.ProviderException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label4:
        $r9 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r10 = (java.security.SignatureSpi) $r9;

        r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl> = $r10;

        $r11 = r3.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        r0.<java.security.Signature$SignatureImpl: java.security.Provider provider> = $r11;

        $r12 = r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi spiImpl>;

        exitmonitor r2;

     label5:
        return $r12;

     label6:
        $r19 := @caughtexception;

        r4 = $r19;

        exitmonitor r2;

     label7:
        throw r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private java.security.SignatureSpi getSpi()
    {
        java.security.Signature$SignatureImpl r0;
        java.security.SignatureSpi $r1;

        r0 := @this: java.security.Signature$SignatureImpl;

        $r1 = specialinvoke r0.<java.security.Signature$SignatureImpl: java.security.SignatureSpi getSpi(java.security.Key)>(null);

        return $r1;
    }
}
