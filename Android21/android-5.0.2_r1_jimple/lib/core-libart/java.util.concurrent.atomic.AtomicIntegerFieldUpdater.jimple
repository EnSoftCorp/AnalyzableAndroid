public abstract class java.util.concurrent.atomic.AtomicIntegerFieldUpdater extends java.lang.Object
{

    public static java.util.concurrent.atomic.AtomicIntegerFieldUpdater newUpdater(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.String r1;
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl: void <init>(java.lang.Class,java.lang.String)>(r0, r1);

        return $r2;
    }

    protected void <init>()
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract boolean compareAndSet(java.lang.Object, int, int);

    public abstract boolean weakCompareAndSet(java.lang.Object, int, int);

    public abstract void set(java.lang.Object, int);

    public abstract void lazySet(java.lang.Object, int);

    public abstract int get(java.lang.Object);

    public int getAndSet(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i1, i0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        goto label1;
    }

    public int getAndIncrement(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i1 = i0 + 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        goto label1;
    }

    public int getAndDecrement(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i1 = i0 - 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        goto label1;
    }

    public int getAndAdd(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i2 = i1 + i0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i1, i2);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        goto label1;
    }

    public int incrementAndGet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i1 = i0 + 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        goto label1;
    }

    public int decrementAndGet(java.lang.Object)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

     label1:
        i0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i1 = i0 - 1;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i0, i1);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        goto label1;
    }

    public int addAndGet(java.lang.Object, int)
    {
        java.util.concurrent.atomic.AtomicIntegerFieldUpdater r0;
        java.lang.Object r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: java.util.concurrent.atomic.AtomicIntegerFieldUpdater;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        i1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: int get(java.lang.Object)>(r1);

        i2 = i1 + i0;

        $z0 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicIntegerFieldUpdater: boolean compareAndSet(java.lang.Object,int,int)>(r1, i1, i2);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        goto label1;
    }
}
