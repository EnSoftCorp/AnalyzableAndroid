final class java.util.concurrent.Semaphore$FairSync extends java.util.concurrent.Semaphore$Sync
{
    private static final long serialVersionUID;

    void <init>(int)
    {
        java.util.concurrent.Semaphore$FairSync r0;
        int i0;

        r0 := @this: java.util.concurrent.Semaphore$FairSync;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.concurrent.Semaphore$Sync: void <init>(int)>(i0);

        return;
    }

    protected int tryAcquireShared(int)
    {
        java.util.concurrent.Semaphore$FairSync r0;
        int i0, i1, i2;
        boolean $z0, $z1;

        r0 := @this: java.util.concurrent.Semaphore$FairSync;

        i0 := @parameter0: int;

     label1:
        $z0 = virtualinvoke r0.<java.util.concurrent.Semaphore$FairSync: boolean hasQueuedPredecessors()>();

        if $z0 == 0 goto label2;

        return -1;

     label2:
        i1 = virtualinvoke r0.<java.util.concurrent.Semaphore$FairSync: int getState()>();

        i2 = i1 - i0;

        if i2 < 0 goto label3;

        $z1 = virtualinvoke r0.<java.util.concurrent.Semaphore$FairSync: boolean compareAndSetState(int,int)>(i1, i2);

        if $z1 == 0 goto label4;

     label3:
        return i2;

     label4:
        goto label1;
    }

    public static void <clinit>()
    {
        <java.util.concurrent.Semaphore$FairSync: long serialVersionUID> = 2014338818796000944L;

        return;
    }
}
