public class java.io.FileOutputStream extends java.io.OutputStream
{
    private java.io.FileDescriptor fd;
    private final boolean shouldClose;
    private java.nio.channels.FileChannel channel;
    private final int mode;
    private final dalvik.system.CloseGuard guard;

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.io.File r1;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.File, boolean) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.io.File r1;
        boolean z0;
        dalvik.system.CloseGuard $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3;
        java.io.FileDescriptor $r4;
        java.lang.NullPointerException $r6;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard> = $r2;

        if r1 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("file == null");

        throw $r6;

     label1:
        $i1 = <android.system.OsConstants: int O_WRONLY>;

        $i0 = <android.system.OsConstants: int O_CREAT>;

        $i3 = $i1 | $i0;

        if z0 == 0 goto label2;

        $i2 = <android.system.OsConstants: int O_APPEND>;

        goto label3;

     label2:
        $i2 = <android.system.OsConstants: int O_TRUNC>;

     label3:
        $i4 = $i3 | $i2;

        r0.<java.io.FileOutputStream: int mode> = $i4;

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $i5 = r0.<java.io.FileOutputStream: int mode>;

        $r4 = staticinvoke <libcore.io.IoBridge: java.io.FileDescriptor open(java.lang.String,int)>($r3, $i5);

        r0.<java.io.FileOutputStream: java.io.FileDescriptor fd> = $r4;

        r0.<java.io.FileOutputStream: boolean shouldClose> = 1;

        $r5 = r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    public void <init>(java.io.FileDescriptor)
    {
        java.io.FileOutputStream r0;
        java.io.FileDescriptor r1;
        dalvik.system.CloseGuard $r2;
        int $i0, $i1;
        java.nio.channels.FileChannel $r3;
        java.lang.NullPointerException $r4;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: java.io.FileDescriptor;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        $r2 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard> = $r2;

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("fd == null");

        throw $r4;

     label1:
        r0.<java.io.FileOutputStream: java.io.FileDescriptor fd> = r1;

        r0.<java.io.FileOutputStream: boolean shouldClose> = 0;

        $i0 = <android.system.OsConstants: int O_WRONLY>;

        r0.<java.io.FileOutputStream: int mode> = $i0;

        $i1 = r0.<java.io.FileOutputStream: int mode>;

        $r3 = staticinvoke <java.nio.NioUtils: java.nio.channels.FileChannel newFileChannel(java.io.Closeable,java.io.FileDescriptor,int)>(r0, r1, $i1);

        r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel> = $r3;

        return;
    }

    public void <init>(java.lang.String) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.lang.String r1;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.lang.String, boolean) throws java.io.FileNotFoundException
    {
        java.io.FileOutputStream r0;
        java.lang.String r1;
        boolean z0;
        java.io.File $r2;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r2, z0);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.FileOutputStream r0, r1;
        java.lang.Throwable r2, $r9;
        dalvik.system.CloseGuard $r3;
        java.nio.channels.FileChannel $r5, $r8;
        boolean $z0;
        java.io.FileDescriptor $r6, $r7;

        r0 := @this: java.io.FileOutputStream;

        $r3 = r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void close()>();

        r1 = r0;

        entermonitor r0;

     label1:
        $r5 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;

        if $r5 == null goto label2;

        $r8 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;

        virtualinvoke $r8.<java.nio.channels.FileChannel: void close()>();

     label2:
        $z0 = r0.<java.io.FileOutputStream: boolean shouldClose>;

        if $z0 == 0 goto label3;

        $r7 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void closeAndSignalBlockedThreads(java.io.FileDescriptor)>($r7);

        goto label4;

     label3:
        $r6 = new java.io.FileDescriptor;

        specialinvoke $r6.<java.io.FileDescriptor: void <init>()>();

        r0.<java.io.FileOutputStream: java.io.FileDescriptor fd> = $r6;

     label4:
        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r9 := @caughtexception;

        r2 = $r9;

        exitmonitor r1;

     label7:
        throw r2;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected void finalize() throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        java.lang.Throwable r1, r2, r3, $r6, $r8, $r9;
        dalvik.system.CloseGuard $r4, $r5;
        java.lang.AssertionError $r7, $r10;

        r0 := @this: java.io.FileOutputStream;

     label01:
        $r4 = r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard>;

        if $r4 == null goto label02;

        $r5 = r0.<java.io.FileOutputStream: dalvik.system.CloseGuard guard>;

        virtualinvoke $r5.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label02:
        virtualinvoke r0.<java.io.FileOutputStream: void close()>();

     label03:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label04:
        goto label11;

     label05:
        $r6 := @caughtexception;

        r1 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r1);

        throw $r7;

     label06:
        $r8 := @caughtexception;

        r2 = $r8;

     label07:
        specialinvoke r0.<java.lang.Object: void finalize()>();

     label08:
        goto label10;

     label09:
        $r9 := @caughtexception;

        r3 = $r9;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>(r3);

        throw $r10;

     label10:
        throw r2;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public java.nio.channels.FileChannel getChannel()
    {
        java.io.FileOutputStream r0, r1;
        java.lang.Throwable r2, $r8;
        java.nio.channels.FileChannel $r4, $r5, $r7;
        int $i0;
        java.io.FileDescriptor $r6;

        r0 := @this: java.io.FileOutputStream;

        r1 = r0;

        entermonitor r0;

     label1:
        $r4 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;

        if $r4 != null goto label2;

        $r6 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;

        $i0 = r0.<java.io.FileOutputStream: int mode>;

        $r7 = staticinvoke <java.nio.NioUtils: java.nio.channels.FileChannel newFileChannel(java.io.Closeable,java.io.FileDescriptor,int)>(r0, $r6, $i0);

        r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel> = $r7;

     label2:
        $r5 = r0.<java.io.FileOutputStream: java.nio.channels.FileChannel channel>;

        exitmonitor r1;

     label3:
        return $r5;

     label4:
        $r8 := @caughtexception;

        r2 = $r8;

        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final java.io.FileDescriptor getFD() throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        java.io.FileDescriptor $r1;

        r0 := @this: java.io.FileOutputStream;

        $r1 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;

        return $r1;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        byte[] r1;
        int i0, i1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.io.FileOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<java.io.FileOutputStream: java.io.FileDescriptor fd>;

        staticinvoke <libcore.io.IoBridge: void write(java.io.FileDescriptor,byte[],int,int)>($r2, r1, i0, i1);

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.FileOutputStream r0;
        int i0;
        byte[] $r1;
        byte $b1;

        r0 := @this: java.io.FileOutputStream;

        i0 := @parameter0: int;

        $r1 = newarray (byte)[1];

        $b1 = (byte) i0;

        $r1[0] = $b1;

        virtualinvoke r0.<java.io.FileOutputStream: void write(byte[],int,int)>($r1, 0, 1);

        return;
    }
}
