public abstract class java.io.Writer extends java.lang.Object implements java.lang.Appendable, java.io.Closeable, java.io.Flushable
{
    protected java.lang.Object lock;

    protected void <init>()
    {
        java.io.Writer r0;

        r0 := @this: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.io.Writer: java.lang.Object lock> = r0;

        return;
    }

    protected void <init>(java.lang.Object)
    {
        java.io.Writer r0;
        java.lang.Object r1;
        java.lang.NullPointerException $r2;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("lock == null");

        throw $r2;

     label1:
        r0.<java.io.Writer: java.lang.Object lock> = r1;

        return;
    }

    public abstract void close() throws java.io.IOException;

    public abstract void flush() throws java.io.IOException;

    public void write(char[]) throws java.io.IOException
    {
        java.io.Writer r0;
        char[] r1;
        int $i0;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.Writer: void write(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public abstract void write(char[], int, int) throws java.io.IOException;

    public void write(int) throws java.io.IOException
    {
        java.io.Writer r0;
        int i0;
        java.lang.Object r1, $r4;
        char[] r2;
        java.lang.Throwable r3, $r5;
        char $c1;

        r0 := @this: java.io.Writer;

        i0 := @parameter0: int;

        $r4 = r0.<java.io.Writer: java.lang.Object lock>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        r2 = newarray (char)[1];

        $c1 = (char) i0;

        r2[0] = $c1;

        virtualinvoke r0.<java.io.Writer: void write(char[])>(r2);

        exitmonitor r1;

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

        exitmonitor r1;

     label4:
        throw r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void write(java.lang.String) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String,int,int)>(r1, 0, $i0);

        return;
    }

    public void write(java.lang.String, int, int) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.String r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        char[] r2;
        java.lang.Object r3, $r6;
        java.lang.Throwable r4, $r7;
        java.lang.StringIndexOutOfBoundsException $r5;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = i0 | i1;

        if $i2 < 0 goto label1;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        $i4 = $i3 - i1;

        if i0 <= $i4 goto label2;

     label1:
        $r5 = new java.lang.StringIndexOutOfBoundsException;

        specialinvoke $r5.<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String,int,int)>(r1, i0, i1);

        throw $r5;

     label2:
        r2 = newarray (char)[i1];

        $i5 = i0 + i1;

        virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(i0, $i5, r2, 0);

        $r6 = r0.<java.io.Writer: java.lang.Object lock>;

        r3 = $r6;

        entermonitor $r6;

     label3:
        $i6 = lengthof r2;

        virtualinvoke r0.<java.io.Writer: void write(char[],int,int)>(r2, 0, $i6);

        exitmonitor r3;

     label4:
        goto label7;

     label5:
        $r7 := @caughtexception;

        r4 = $r7;

        exitmonitor r3;

     label6:
        throw r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.io.Writer append(char) throws java.io.IOException
    {
        java.io.Writer r0;
        char c0;

        r0 := @this: java.io.Writer;

        c0 := @parameter0: char;

        virtualinvoke r0.<java.io.Writer: void write(int)>(c0);

        return r0;
    }

    public java.io.Writer append(java.lang.CharSequence) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.CharSequence r1;
        java.lang.String $r2;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.CharSequence;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r2);

        return r0;
    }

    public java.io.Writer append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.io.Writer r0;
        java.lang.CharSequence r1, $r2;
        int i0, i1;
        java.lang.String $r3;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        r1 = "null";

     label1:
        $r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i0, i1);

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r3);

        return r0;
    }

    boolean checkError()
    {
        java.io.Writer r0;

        r0 := @this: java.io.Writer;

        return 0;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int) throws java.io.IOException
    {
        java.io.Writer r0, $r2;
        java.lang.CharSequence r1;
        int i0, i1;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)>(r1, i0, i1);

        return $r2;
    }

    public volatile java.lang.Appendable append(java.lang.CharSequence) throws java.io.IOException
    {
        java.io.Writer r0, $r2;
        java.lang.CharSequence r1;

        r0 := @this: java.io.Writer;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile java.lang.Appendable append(char) throws java.io.IOException
    {
        java.io.Writer r0, $r1;
        char c0;

        r0 := @this: java.io.Writer;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<java.io.Writer: java.io.Writer append(char)>(c0);

        return $r1;
    }
}
