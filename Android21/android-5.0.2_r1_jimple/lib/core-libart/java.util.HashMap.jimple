public class java.util.HashMap extends java.util.AbstractMap implements java.lang.Cloneable, java.io.Serializable
{
    private static final int MINIMUM_CAPACITY;
    private static final int MAXIMUM_CAPACITY;
    private static final java.util.Map$Entry[] EMPTY_TABLE;
    static final float DEFAULT_LOAD_FACTOR;
    transient java.util.HashMap$HashMapEntry[] table;
    transient java.util.HashMap$HashMapEntry entryForNullKey;
    transient int size;
    transient int modCount;
    private transient int threshold;
    private transient java.util.Set keySet;
    private transient java.util.Set entrySet;
    private transient java.util.Collection values;
    private static final long serialVersionUID;
    private static final java.io.ObjectStreamField[] serialPersistentFields;

    public void <init>()
    {
        java.util.HashMap r0;
        java.util.Map$Entry[] $r1;
        java.util.HashMap$HashMapEntry[] $r2, $r3;

        r0 := @this: java.util.HashMap;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r1 = <java.util.HashMap: java.util.Map$Entry[] EMPTY_TABLE>;

        $r2 = (java.util.HashMap$HashMapEntry[]) $r1;

        $r3 = (java.util.HashMap$HashMapEntry[]) $r2;

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table> = $r3;

        r0.<java.util.HashMap: int threshold> = -1;

        return;
    }

    public void <init>(int)
    {
        java.util.HashMap r0;
        int i0, i1;
        java.util.HashMap$HashMapEntry[] r1, $r4;
        java.util.Map$Entry[] $r3;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this: java.util.HashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if i0 >= 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        if i0 != 0 goto label2;

        $r3 = <java.util.HashMap: java.util.Map$Entry[] EMPTY_TABLE>;

        $r4 = (java.util.HashMap$HashMapEntry[]) $r3;

        r1 = (java.util.HashMap$HashMapEntry[]) $r4;

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table> = r1;

        r0.<java.util.HashMap: int threshold> = -1;

        return;

     label2:
        if i0 >= 4 goto label3;

        i1 = 4;

        goto label5;

     label3:
        if i0 <= 1073741824 goto label4;

        i1 = 1073741824;

        goto label5;

     label4:
        i1 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>(i0);

     label5:
        specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>(i1);

        return;
    }

    public void <init>(int, float)
    {
        java.util.HashMap r0;
        int i0;
        float f0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.HashMap: void <init>(int)>(i0);

        $b1 = f0 cmpg 0.0F;

        if $b1 <= 0 goto label1;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Load factor: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        int $i0, $i1;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $i1 = staticinvoke <java.util.HashMap: int capacityForInitSize(int)>($i0);

        specialinvoke r0.<java.util.HashMap: void <init>(int)>($i1);

        virtualinvoke r0.<java.util.HashMap: void constructorPutAll(java.util.Map)>(r1);

        return;
    }

    final void constructorPutAll(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        java.util.Iterator r2;
        java.util.Map$Entry r3;
        java.util.Map$Entry[] $r4;
        java.util.HashMap$HashMapEntry[] $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.util.Map;

        $r5 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $r4 = <java.util.HashMap: java.util.Map$Entry[] EMPTY_TABLE>;

        if $r5 != $r4 goto label1;

        specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] doubleCapacity()>();

     label1:
        $r6 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        specialinvoke r0.<java.util.HashMap: void constructorPut(java.lang.Object,java.lang.Object)>($r8, $r9);

        goto label2;

     label3:
        return;
    }

    static int capacityForInitSize(int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        $i2 = i0 >> 1;

        i1 = $i2 + i0;

        $i3 = i1 & -1073741824;

        if $i3 != 0 goto label1;

        $i4 = i1;

        goto label2;

     label1:
        $i4 = 1073741824;

     label2:
        return $i4;
    }

    public java.lang.Object clone()
    {
        java.util.HashMap r0, r1;
        java.lang.CloneNotSupportedException r2, $r6;
        java.lang.Object $r3;
        java.util.HashMap$HashMapEntry[] $r4;
        int $i0;
        java.lang.AssertionError $r7;

        r0 := @this: java.util.HashMap;

     label1:
        $r3 = specialinvoke r0.<java.util.AbstractMap: java.lang.Object clone()>();

        r1 = (java.util.HashMap) $r3;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>(r2);

        throw $r7;

     label4:
        $r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i0 = lengthof $r4;

        specialinvoke r1.<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>($i0);

        r1.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = null;

        r1.<java.util.HashMap: int size> = 0;

        r1.<java.util.HashMap: java.util.Set keySet> = null;

        r1.<java.util.HashMap: java.util.Set entrySet> = null;

        r1.<java.util.HashMap: java.util.Collection values> = null;

        virtualinvoke r1.<java.util.HashMap: void init()>();

        virtualinvoke r1.<java.util.HashMap: void constructorPutAll(java.util.Map)>(r0);

        return r1;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    void init()
    {
        java.util.HashMap r0;

        r0 := @this: java.util.HashMap;

        return;
    }

    public boolean isEmpty()
    {
        java.util.HashMap r0;
        int $i0;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        $i0 = r0.<java.util.HashMap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        java.util.HashMap r0;
        int $i0;

        r0 := @this: java.util.HashMap;

        $i0 = r0.<java.util.HashMap: int size>;

        return $i0;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r5, $r6, $r7;
        java.util.HashMap$HashMapEntry r2, r4;
        java.util.HashMap$HashMapEntry[] r3;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label3;

        r2 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r2 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r7 = r2.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

     label2:
        return $r7;

     label3:
        i4 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i0 = lengthof r3;

        $i1 = $i0 - 1;

        $i2 = i4 & $i1;

        r4 = r3[$i2];

     label4:
        if r4 == null goto label7;

        r5 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        if r5 == r1 goto label5;

        $i3 = r4.<java.util.HashMap$HashMapEntry: int hash>;

        if $i3 != i4 goto label6;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z0 == 0 goto label6;

     label5:
        $r6 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        return $r6;

     label6:
        r4 = r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label7:
        return null;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r4;
        int i0, $i1, $i2, $i3, $i4;
        java.util.HashMap$HashMapEntry[] r2;
        java.util.HashMap$HashMapEntry r3, $r5;
        boolean $z0, $z1;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label3;

        $r5 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if $r5 == null goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r2 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        $i3 = i0 & $i2;

        r3 = r2[$i3];

     label4:
        if r3 == null goto label7;

        r4 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        if r4 == r1 goto label5;

        $i4 = r3.<java.util.HashMap$HashMapEntry: int hash>;

        if $i4 != i0 goto label6;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label6;

     label5:
        return 1;

     label6:
        r3 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label7:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, $r6, $r7, $r10, $r11;
        java.util.HashMap$HashMapEntry[] r2;
        int i0, i1, i2;
        java.util.HashMap$HashMapEntry r3, $r4, $r5, $r8, $r9, r12;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        i0 = lengthof r2;

        if r1 != null goto label08;

        i1 = 0;

     label01:
        if i1 >= i0 goto label05;

        r3 = r2[i1];

     label02:
        if r3 == null goto label04;

        $r11 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        if $r11 != null goto label03;

        return 1;

     label03:
        r3 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label02;

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        $r8 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if $r8 == null goto label06;

        $r9 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        $r10 = $r9.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        if $r10 != null goto label06;

        $z3 = 1;

        goto label07;

     label06:
        $z3 = 0;

     label07:
        return $z3;

     label08:
        i2 = 0;

     label09:
        if i2 >= i0 goto label13;

        r12 = r2[i2];

     label10:
        if r12 == null goto label12;

        $r7 = r12.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label11;

        return 1;

     label11:
        r12 = r12.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label10;

     label12:
        i2 = i2 + 1;

        goto label09;

     label13:
        $r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if $r4 == null goto label14;

        $r5 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        $r6 = $r5.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label14;

        $z1 = 1;

        goto label15;

     label14:
        $z1 = 0;

     label15:
        return $z1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, r5, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.util.HashMap$HashMapEntry[] r3, r8;
        java.util.HashMap$HashMapEntry r4;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label1;

        $r7 = specialinvoke r0.<java.util.HashMap: java.lang.Object putValueForNullKey(java.lang.Object)>(r2);

        return $r7;

     label1:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r3 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i2 = lengthof r3;

        $i3 = $i2 - 1;

        i1 = i0 & $i3;

        r4 = r3[i1];

     label2:
        if r4 == null goto label4;

        $i10 = r4.<java.util.HashMap$HashMapEntry: int hash>;

        if $i10 != i0 goto label3;

        $r6 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<java.util.HashMap: void preModify(java.util.HashMap$HashMapEntry)>(r4);

        r5 = r4.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        r4.<java.util.HashMap$HashMapEntry: java.lang.Object value> = r2;

        return r5;

     label3:
        r4 = r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label2;

     label4:
        $i4 = r0.<java.util.HashMap: int modCount>;

        $i5 = $i4 + 1;

        r0.<java.util.HashMap: int modCount> = $i5;

        $i6 = r0.<java.util.HashMap: int size>;

        $i7 = $i6 + 1;

        r0.<java.util.HashMap: int size> = $i7;

        $i8 = r0.<java.util.HashMap: int threshold>;

        if $i6 <= $i8 goto label5;

        r8 = specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] doubleCapacity()>();

        $i9 = lengthof r8;

        $i11 = $i9 - 1;

        i1 = i0 & $i11;

     label5:
        virtualinvoke r0.<java.util.HashMap: void addNewEntry(java.lang.Object,java.lang.Object,int,int)>(r1, r2, i0, i1);

        return null;
    }

    private java.lang.Object putValueForNullKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r3;
        java.util.HashMap$HashMapEntry r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r2 != null goto label1;

        virtualinvoke r0.<java.util.HashMap: void addNewEntryForNullKey(java.lang.Object)>(r1);

        $i0 = r0.<java.util.HashMap: int size>;

        $i1 = $i0 + 1;

        r0.<java.util.HashMap: int size> = $i1;

        $i2 = r0.<java.util.HashMap: int modCount>;

        $i3 = $i2 + 1;

        r0.<java.util.HashMap: int modCount> = $i3;

        return null;

     label1:
        virtualinvoke r0.<java.util.HashMap: void preModify(java.util.HashMap$HashMapEntry)>(r2);

        r3 = r2.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        r2.<java.util.HashMap$HashMapEntry: java.lang.Object value> = r1;

        return r3;
    }

    void preModify(java.util.HashMap$HashMapEntry)
    {
        java.util.HashMap r0;
        java.util.HashMap$HashMapEntry r1;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.util.HashMap$HashMapEntry;

        return;
    }

    private void constructorPut(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, $r8;
        java.util.HashMap$HashMapEntry r3, r5, r6, $r7, $r9;
        java.util.HashMap$HashMapEntry[] r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label3;

        r3 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r3 != null goto label1;

        $r9 = virtualinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry constructorNewEntry(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>(null, r2, 0, null);

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = $r9;

        $i7 = r0.<java.util.HashMap: int size>;

        $i6 = $i7 + 1;

        r0.<java.util.HashMap: int size> = $i6;

        goto label2;

     label1:
        r3.<java.util.HashMap$HashMapEntry: java.lang.Object value> = r2;

     label2:
        return;

     label3:
        i8 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i1 = lengthof r4;

        $i2 = $i1 - 1;

        i0 = i8 & $i2;

        r5 = r4[i0];

        r6 = r5;

     label4:
        if r6 == null goto label6;

        $i5 = r6.<java.util.HashMap$HashMapEntry: int hash>;

        if $i5 != i8 goto label5;

        $r8 = r6.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label5;

        r6.<java.util.HashMap$HashMapEntry: java.lang.Object value> = r2;

        return;

     label5:
        r6 = r6.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label6:
        $r7 = virtualinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry constructorNewEntry(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>(r1, r2, i8, r5);

        r4[i0] = $r7;

        $i3 = r0.<java.util.HashMap: int size>;

        $i4 = $i3 + 1;

        r0.<java.util.HashMap: int size> = $i4;

        return;
    }

    void addNewEntry(java.lang.Object, java.lang.Object, int, int)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2;
        int i0, i1;
        java.util.HashMap$HashMapEntry $r3, $r5;
        java.util.HashMap$HashMapEntry[] $r4, $r6;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r6 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $r3 = new java.util.HashMap$HashMapEntry;

        $r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $r5 = $r4[i1];

        specialinvoke $r3.<java.util.HashMap$HashMapEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>(r1, r2, i0, $r5);

        $r6[i1] = $r3;

        return;
    }

    void addNewEntryForNullKey(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1;
        java.util.HashMap$HashMapEntry $r2;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = new java.util.HashMap$HashMapEntry;

        specialinvoke $r2.<java.util.HashMap$HashMapEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>(null, r1, 0, null);

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = $r2;

        return;
    }

    java.util.HashMap$HashMapEntry constructorNewEntry(java.lang.Object, java.lang.Object, int, java.util.HashMap$HashMapEntry)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2;
        int i0;
        java.util.HashMap$HashMapEntry r3, $r4;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        r3 := @parameter3: java.util.HashMap$HashMapEntry;

        $r4 = new java.util.HashMap$HashMapEntry;

        specialinvoke $r4.<java.util.HashMap$HashMapEntry: void <init>(java.lang.Object,java.lang.Object,int,java.util.HashMap$HashMapEntry)>(r1, r2, i0, r3);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.HashMap r0;
        java.util.Map r1;
        int $i0;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.util.Map;

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke r0.<java.util.HashMap: void ensureCapacity(int)>($i0);

        specialinvoke r0.<java.util.AbstractMap: void putAll(java.util.Map)>(r1);

        return;
    }

    private void ensureCapacity(int)
    {
        java.util.HashMap r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        java.util.HashMap$HashMapEntry[] r1, r2;
        java.util.HashMap$HashMapEntry r3, r4, r5;

        r0 := @this: java.util.HashMap;

        i0 := @parameter0: int;

        $i6 = staticinvoke <java.util.HashMap: int capacityForInitSize(int)>(i0);

        i1 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>($i6);

        r1 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        i2 = lengthof r1;

        if i1 > i2 goto label1;

        return;

     label1:
        $i7 = i2 * 2;

        if i1 != $i7 goto label2;

        specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] doubleCapacity()>();

        return;

     label2:
        r2 = specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>(i1);

        $i9 = r0.<java.util.HashMap: int size>;

        if $i9 == 0 goto label6;

        i3 = i1 - 1;

        i4 = 0;

     label3:
        if i4 >= i2 goto label6;

        r3 = r1[i4];

     label4:
        if r3 == null goto label5;

        r4 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        $i8 = r3.<java.util.HashMap$HashMapEntry: int hash>;

        i5 = $i8 & i3;

        r5 = r2[i5];

        r2[i5] = r3;

        r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next> = r5;

        r3 = r4;

        goto label4;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        return;
    }

    private java.util.HashMap$HashMapEntry[] makeTable(int)
    {
        java.util.HashMap r0;
        int i0, $i1, $i2, $i3;
        java.util.HashMap$HashMapEntry[] r1, $r2;

        r0 := @this: java.util.HashMap;

        i0 := @parameter0: int;

        $r2 = newarray (java.util.HashMap$HashMapEntry)[i0];

        r1 = (java.util.HashMap$HashMapEntry[]) $r2;

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table> = r1;

        $i2 = i0 >> 1;

        $i1 = i0 >> 2;

        $i3 = $i2 + $i1;

        r0.<java.util.HashMap: int threshold> = $i3;

        return r1;
    }

    private java.util.HashMap$HashMapEntry[] doubleCapacity()
    {
        java.util.HashMap r0;
        java.util.HashMap$HashMapEntry[] r1, r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9;
        java.util.HashMap$HashMapEntry r3, r4, r5;

        r0 := @this: java.util.HashMap;

        r1 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        i0 = lengthof r1;

        if i0 != 1073741824 goto label01;

        return r1;

     label01:
        i1 = i0 * 2;

        r2 = specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>(i1);

        $i5 = r0.<java.util.HashMap: int size>;

        if $i5 != 0 goto label02;

        return r2;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label11;

        r3 = r1[i2];

        if r3 != null goto label04;

        goto label10;

     label04:
        $i6 = r3.<java.util.HashMap$HashMapEntry: int hash>;

        i3 = $i6 & i0;

        r4 = null;

        $i7 = i2 | i3;

        r2[$i7] = r3;

        r5 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

     label05:
        if r5 == null goto label09;

        $i8 = r5.<java.util.HashMap$HashMapEntry: int hash>;

        i4 = $i8 & i0;

        if i4 == i3 goto label08;

        if r4 != null goto label06;

        $i9 = i2 | i4;

        r2[$i9] = r5;

        goto label07;

     label06:
        r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next> = r5;

     label07:
        r4 = r3;

        i3 = i4;

     label08:
        r3 = r5;

        r5 = r5.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label05;

     label09:
        if r4 == null goto label10;

        r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next> = null;

     label10:
        i2 = i2 + 1;

        goto label03;

     label11:
        return r2;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, $r5, $r8, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.util.HashMap$HashMapEntry[] r2;
        java.util.HashMap$HashMapEntry r3, r4, $r6, $r7;
        boolean $z0;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        $r9 = specialinvoke r0.<java.util.HashMap: java.lang.Object removeNullKey()>();

        return $r9;

     label1:
        i0 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r2 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        i1 = i0 & $i3;

        r3 = r2[i1];

        r4 = null;

     label2:
        if r3 == null goto label6;

        $i4 = r3.<java.util.HashMap$HashMapEntry: int hash>;

        if $i4 != i0 goto label5;

        $r5 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label5;

        if r4 != null goto label3;

        $r7 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        r2[i1] = $r7;

        goto label4;

     label3:
        $r6 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        r4.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next> = $r6;

     label4:
        $i5 = r0.<java.util.HashMap: int modCount>;

        $i6 = $i5 + 1;

        r0.<java.util.HashMap: int modCount> = $i6;

        $i8 = r0.<java.util.HashMap: int size>;

        $i7 = $i8 - 1;

        r0.<java.util.HashMap: int size> = $i7;

        virtualinvoke r0.<java.util.HashMap: void postRemove(java.util.HashMap$HashMapEntry)>(r3);

        $r8 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        return $r8;

     label5:
        r4 = r3;

        r3 = r3.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label2;

     label6:
        return null;
    }

    private java.lang.Object removeNullKey()
    {
        java.util.HashMap r0;
        java.util.HashMap$HashMapEntry r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;

        r0 := @this: java.util.HashMap;

        r1 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r1 != null goto label1;

        return null;

     label1:
        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = null;

        $i0 = r0.<java.util.HashMap: int modCount>;

        $i1 = $i0 + 1;

        r0.<java.util.HashMap: int modCount> = $i1;

        $i2 = r0.<java.util.HashMap: int size>;

        $i3 = $i2 - 1;

        r0.<java.util.HashMap: int size> = $i3;

        virtualinvoke r0.<java.util.HashMap: void postRemove(java.util.HashMap$HashMapEntry)>(r1);

        $r2 = r1.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        return $r2;
    }

    void postRemove(java.util.HashMap$HashMapEntry)
    {
        java.util.HashMap r0;
        java.util.HashMap$HashMapEntry r1;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.util.HashMap$HashMapEntry;

        return;
    }

    public void clear()
    {
        java.util.HashMap r0;
        int $i0, $i1, $i2;
        java.util.HashMap$HashMapEntry[] $r1;

        r0 := @this: java.util.HashMap;

        $i0 = r0.<java.util.HashMap: int size>;

        if $i0 == 0 goto label1;

        $r1 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = null;

        $i1 = r0.<java.util.HashMap: int modCount>;

        $i2 = $i1 + 1;

        r0.<java.util.HashMap: int modCount> = $i2;

        r0.<java.util.HashMap: int size> = 0;

     label1:
        return;
    }

    public java.util.Set keySet()
    {
        java.util.HashMap r0;
        java.util.Set r1, $r2;
        java.util.HashMap$KeySet r3;

        r0 := @this: java.util.HashMap;

        r1 = r0.<java.util.HashMap: java.util.Set keySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        r3 = new java.util.HashMap$KeySet;

        $r2 = r3;

        specialinvoke r3.<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        r0.<java.util.HashMap: java.util.Set keySet> = r3;

     label2:
        return $r2;
    }

    public java.util.Collection values()
    {
        java.util.HashMap r0;
        java.util.Collection r1, $r2;
        java.util.HashMap$Values r3;

        r0 := @this: java.util.HashMap;

        r1 = r0.<java.util.HashMap: java.util.Collection values>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        r3 = new java.util.HashMap$Values;

        $r2 = r3;

        specialinvoke r3.<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        r0.<java.util.HashMap: java.util.Collection values> = r3;

     label2:
        return $r2;
    }

    public java.util.Set entrySet()
    {
        java.util.HashMap r0;
        java.util.Set r1, $r2;
        java.util.HashMap$EntrySet r3;

        r0 := @this: java.util.HashMap;

        r1 = r0.<java.util.HashMap: java.util.Set entrySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        r3 = new java.util.HashMap$EntrySet;

        $r2 = r3;

        specialinvoke r3.<java.util.HashMap$EntrySet: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        r0.<java.util.HashMap: java.util.Set entrySet> = r3;

     label2:
        return $r2;
    }

    private boolean containsMapping(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, $r6, $r7, $r8;
        java.util.HashMap$HashMapEntry r3, r5;
        java.util.HashMap$HashMapEntry[] r4;
        int i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label3;

        r3 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r3 == null goto label1;

        $r8 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z3 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r8);

        if $z3 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        i4 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i1 = lengthof r4;

        $i2 = $i1 - 1;

        i0 = i4 & $i2;

        r5 = r4[i0];

     label4:
        if r5 == null goto label6;

        $i3 = r5.<java.util.HashMap$HashMapEntry: int hash>;

        if $i3 != i4 goto label5;

        $r6 = r5.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label5;

        $r7 = r5.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r7);

        return $z1;

     label5:
        r5 = r5.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label6:
        return 0;
    }

    private boolean removeMapping(java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2, $r7, $r8, $r11;
        java.util.HashMap$HashMapEntry r3, r5, r6, $r9, $r10;
        java.util.HashMap$HashMapEntry[] r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        if r1 != null goto label3;

        r3 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey>;

        if r3 == null goto label1;

        $r11 = r3.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z2 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r11);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        r0.<java.util.HashMap: java.util.HashMap$HashMapEntry entryForNullKey> = null;

        $i9 = r0.<java.util.HashMap: int modCount>;

        $i8 = $i9 + 1;

        r0.<java.util.HashMap: int modCount> = $i8;

        $i11 = r0.<java.util.HashMap: int size>;

        $i10 = $i11 - 1;

        r0.<java.util.HashMap: int size> = $i10;

        virtualinvoke r0.<java.util.HashMap: void postRemove(java.util.HashMap$HashMapEntry)>(r3);

        return 1;

     label3:
        i12 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        r4 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i1 = lengthof r4;

        $i2 = $i1 - 1;

        i0 = i12 & $i2;

        r5 = r4[i0];

        r6 = null;

     label4:
        if r5 == null goto label9;

        $i3 = r5.<java.util.HashMap$HashMapEntry: int hash>;

        if $i3 != i12 goto label8;

        $r7 = r5.<java.util.HashMap$HashMapEntry: java.lang.Object key>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label8;

        $r8 = r5.<java.util.HashMap$HashMapEntry: java.lang.Object value>;

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>(r2, $r8);

        if $z1 != 0 goto label5;

        return 0;

     label5:
        if r6 != null goto label6;

        $r10 = r5.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        r4[i0] = $r10;

        goto label7;

     label6:
        $r9 = r5.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        r6.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next> = $r9;

     label7:
        $i4 = r0.<java.util.HashMap: int modCount>;

        $i6 = $i4 + 1;

        r0.<java.util.HashMap: int modCount> = $i6;

        $i5 = r0.<java.util.HashMap: int size>;

        $i7 = $i5 - 1;

        r0.<java.util.HashMap: int size> = $i7;

        virtualinvoke r0.<java.util.HashMap: void postRemove(java.util.HashMap$HashMapEntry)>(r5);

        return 1;

     label8:
        r6 = r5;

        r5 = r5.<java.util.HashMap$HashMapEntry: java.util.HashMap$HashMapEntry next>;

        goto label4;

     label9:
        return 0;
    }

    java.util.Iterator newKeyIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$KeyIterator $r1;

        r0 := @this: java.util.HashMap;

        $r1 = new java.util.HashMap$KeyIterator;

        specialinvoke $r1.<java.util.HashMap$KeyIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        return $r1;
    }

    java.util.Iterator newValueIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$ValueIterator $r1;

        r0 := @this: java.util.HashMap;

        $r1 = new java.util.HashMap$ValueIterator;

        specialinvoke $r1.<java.util.HashMap$ValueIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        return $r1;
    }

    java.util.Iterator newEntryIterator()
    {
        java.util.HashMap r0;
        java.util.HashMap$EntryIterator $r1;

        r0 := @this: java.util.HashMap;

        $r1 = new java.util.HashMap$EntryIterator;

        specialinvoke $r1.<java.util.HashMap$EntryIterator: void <init>(java.util.HashMap,java.util.HashMap$1)>(r0, null);

        return $r1;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.HashMap r0;
        java.io.ObjectOutputStream r1;
        java.io.ObjectOutputStream$PutField r2;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        java.util.HashMap$HashMapEntry[] $r5;
        int $i0, $i1;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7, $r8, $r9;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r2 = virtualinvoke r1.<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()>();

        virtualinvoke r2.<java.io.ObjectOutputStream$PutField: void put(java.lang.String,float)>("loadFactor", 0.75F);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeFields()>();

        $r5 = r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] table>;

        $i0 = lengthof $r5;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $i1 = r0.<java.util.HashMap: int size>;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r6 = virtualinvoke r0.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r7;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.util.HashMap r0;
        java.io.ObjectInputStream r1;
        int i0, i1, i2, i3;
        java.lang.Object r2, r3;
        java.io.InvalidObjectException $r5, $r11;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r12, $r13;
        java.lang.String $r8, $r14;

        r0 := @this: java.util.HashMap;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i0 >= 0 goto label1;

        $r11 = new java.io.InvalidObjectException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity: ");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r14);

        throw $r11;

     label1:
        if i0 >= 4 goto label2;

        i3 = 4;

        goto label4;

     label2:
        if i0 <= 1073741824 goto label3;

        i3 = 1073741824;

        goto label4;

     label3:
        i3 = staticinvoke <java.util.Collections: int roundUpToPowerOfTwo(int)>(i0);

     label4:
        specialinvoke r0.<java.util.HashMap: java.util.HashMap$HashMapEntry[] makeTable(int)>(i3);

        i1 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        if i1 >= 0 goto label5;

        $r5 = new java.io.InvalidObjectException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size: ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.InvalidObjectException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label5:
        virtualinvoke r0.<java.util.HashMap: void init()>();

        i2 = 0;

     label6:
        if i2 >= i1 goto label7;

        r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r3 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        specialinvoke r0.<java.util.HashMap: void constructorPut(java.lang.Object,java.lang.Object)>(r2, r3);

        i2 = i2 + 1;

        goto label6;

     label7:
        return;
    }

    static boolean access$600(java.util.HashMap, java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.HashMap: boolean containsMapping(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    static boolean access$700(java.util.HashMap, java.lang.Object, java.lang.Object)
    {
        java.util.HashMap r0;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        $z0 = specialinvoke r0.<java.util.HashMap: boolean removeMapping(java.lang.Object,java.lang.Object)>(r1, r2);

        return $z0;
    }

    static void <clinit>()
    {
        java.util.HashMap$HashMapEntry[] $r0;
        java.io.ObjectStreamField[] $r1;
        java.io.ObjectStreamField $r2;
        java.lang.Class $r3;

        <java.util.HashMap: long serialVersionUID> = 362498820763181265L;

        <java.util.HashMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <java.util.HashMap: int MAXIMUM_CAPACITY> = 1073741824;

        <java.util.HashMap: int MINIMUM_CAPACITY> = 4;

        $r0 = newarray (java.util.HashMap$HashMapEntry)[2];

        <java.util.HashMap: java.util.Map$Entry[] EMPTY_TABLE> = $r0;

        $r1 = newarray (java.io.ObjectStreamField)[1];

        $r2 = new java.io.ObjectStreamField;

        $r3 = <java.lang.Float: java.lang.Class TYPE>;

        specialinvoke $r2.<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>("loadFactor", $r3);

        $r1[0] = $r2;

        <java.util.HashMap: java.io.ObjectStreamField[] serialPersistentFields> = $r1;

        return;
    }
}
