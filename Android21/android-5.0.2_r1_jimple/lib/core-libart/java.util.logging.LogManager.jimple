public class java.util.logging.LogManager extends java.lang.Object
{
    private static final java.util.logging.LoggingPermission perm;
    static java.util.logging.LogManager manager;
    public static final java.lang.String LOGGING_MXBEAN_NAME;
    private java.util.Hashtable loggers;
    private java.util.Properties props;
    private java.beans.PropertyChangeSupport listeners;

    public static java.util.logging.LoggingMXBean getLoggingMXBean()
    {
        java.lang.UnsupportedOperationException $r0;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    protected void <init>()
    {
        java.util.logging.LogManager r0;
        java.util.Hashtable $r1;
        java.util.Properties $r2;
        java.beans.PropertyChangeSupport $r3;
        java.lang.Runtime $r4;
        java.util.logging.LogManager$1 $r5;

        r0 := @this: java.util.logging.LogManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Hashtable loggers> = $r1;

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Properties props> = $r2;

        $r3 = new java.beans.PropertyChangeSupport;

        specialinvoke $r3.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r0);

        r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners> = $r3;

        $r4 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $r5 = new java.util.logging.LogManager$1;

        specialinvoke $r5.<java.util.logging.LogManager$1: void <init>(java.util.logging.LogManager)>(r0);

        virtualinvoke $r4.<java.lang.Runtime: void addShutdownHook(java.lang.Thread)>($r5);

        return;
    }

    public void checkAccess()
    {
        java.util.logging.LogManager r0;

        r0 := @this: java.util.logging.LogManager;

        return;
    }

    public synchronized boolean addLogger(java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1;
        java.lang.String r2;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 = virtualinvoke r1.<java.util.logging.Logger: java.lang.String getName()>();

        $r3 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        if $r4 == null goto label1;

        return 0;

     label1:
        specialinvoke r0.<java.util.logging.LogManager: void addToFamilyTree(java.util.logging.Logger,java.lang.String)>(r1, r2);

        $r5 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1);

        virtualinvoke r1.<java.util.logging.Logger: void setManager(java.util.logging.LogManager)>(r0);

        return 1;
    }

    private void addToFamilyTree(java.util.logging.Logger, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r3, r8, r9, r10, $r20;
        java.lang.String r2, r4, r5, $r17, $r25, $r27, $r29, $r32;
        int i0, $i1, $i2;
        java.util.Collection r6;
        java.util.Iterator r7;
        java.lang.StringBuilder $r11, $r12, $r13, $r21, $r22, $r26, $r28, $r30, $r31;
        java.util.Hashtable $r14, $r19, $r23;
        java.lang.Object $r15, $r18, $r24;
        boolean $z0, $z2;
        java.util.List $r16;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.lang.String;

        r3 = null;

        r4 = r2;

     label1:
        $i1 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);

        i0 = $i1;

        if $i1 == -1 goto label4;

        r4 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r23 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r24 = virtualinvoke $r23.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4);

        r3 = (java.util.logging.Logger) $r24;

        if r3 == null goto label2;

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

        goto label4;

     label2:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r27);

        if $r25 != null goto label3;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r28 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".handlers");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32 = virtualinvoke r0.<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>($r29);

        if $r32 == null goto label1;

     label3:
        r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>(r4);

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

        goto label4;

     label4:
        if r3 != null goto label5;

        $r19 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r18 = virtualinvoke $r19.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        $r20 = (java.util.logging.Logger) $r18;

        r3 = $r20;

        if $r20 == null goto label5;

        virtualinvoke r0.<java.util.logging.LogManager: void setParent(java.util.logging.Logger,java.util.logging.Logger)>(r1, r3);

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        r6 = virtualinvoke $r14.<java.util.Hashtable: java.util.Collection values()>();

        r7 = interfaceinvoke r6.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r15 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.util.logging.Logger) $r15;

        r9 = virtualinvoke r8.<java.util.logging.Logger: java.util.logging.Logger getParent()>();

        if r3 != r9 goto label8;

        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i2 == 0 goto label7;

        $r17 = virtualinvoke r8.<java.util.logging.Logger: java.lang.String getName()>();

        $z2 = virtualinvoke $r17.<java.lang.String: boolean startsWith(java.lang.String)>(r5);

        if $z2 == 0 goto label8;

     label7:
        r10 = r1;

        virtualinvoke r8.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>(r10);

        if r9 == null goto label8;

        $r16 = r9.<java.util.logging.Logger: java.util.List children>;

        interfaceinvoke $r16.<java.util.List: boolean remove(java.lang.Object)>(r8);

     label8:
        goto label6;

     label9:
        return;
    }

    public synchronized java.util.logging.Logger getLogger(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        java.util.logging.Logger $r4;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.logging.Logger) $r3;

        return $r4;
    }

    public synchronized java.util.Enumeration getLoggerNames()
    {
        java.util.logging.LogManager r0;
        java.util.Hashtable $r1;
        java.util.Enumeration $r2;

        r0 := @this: java.util.logging.LogManager;

        $r1 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration keys()>();

        return $r2;
    }

    public static java.util.logging.LogManager getLogManager()
    {
        java.util.logging.LogManager $r0;

        $r0 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        return $r0;
    }

    public java.lang.String getProperty(java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, $r3;
        java.util.Properties $r2;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        $r3 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public void readConfiguration() throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2, $r9, $r11, $r15;
        java.io.InputStream r3;
        java.io.IOException r4, $r20;
        java.lang.Throwable r5, $r17;
        java.io.FileInputStream $r6;
        java.io.BufferedInputStream $r7;
        java.lang.StringBuilder $r8, $r10, $r12, $r13, $r14, $r16;
        java.lang.Object $r18;
        java.lang.Class $r19;

        r0 := @this: java.util.logging.LogManager;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.class");

        if r1 == null goto label01;

        $r18 = staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r1);

        if $r18 != null goto label10;

     label01:
        r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file");

        if r2 != null goto label02;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = <java.io.File: java.lang.String separator>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lib");

        $r15 = <java.io.File: java.lang.String separator>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("logging.properties");

        r2 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        r3 = null;

     label03:
        $r6 = new java.io.FileInputStream;

        specialinvoke $r6.<java.io.FileInputStream: void <init>(java.lang.String)>(r2);

        r3 = $r6;

     label04:
        goto label06;

     label05:
        $r20 := @caughtexception;

        r4 = $r20;

        $r19 = class "java/util/logging/LogManager";

        r3 = virtualinvoke $r19.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("logging.properties");

        if r3 != null goto label06;

        throw r4;

     label06:
        $r7 = new java.io.BufferedInputStream;

        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r3);

        virtualinvoke r0.<java.util.logging.LogManager: void readConfiguration(java.io.InputStream)>($r7);

     label07:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        goto label10;

     label08:
        $r17 := @caughtexception;

        r5 = $r17;

     label09:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r3);

        throw r5;

     label10:
        return;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static java.lang.Object getInstanceByClass(java.lang.String)
    {
        java.lang.String r0, $r14;
        java.lang.Class r1, r2;
        java.lang.ClassLoader $r3, $r7;
        java.lang.Object $r4, $r8;
        java.lang.Exception $r5, $r9, r18;
        java.lang.Thread $r6;
        java.lang.StringBuilder $r10, $r12, $r13, $r15;
        java.io.PrintStream $r11, $r16;

        r0 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        r1 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        r2 = virtualinvoke $r7.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

        $r8 = virtualinvoke r2.<java.lang.Class: java.lang.Object newInstance()>();

     label5:
        return $r8;

     label6:
        $r9 := @caughtexception;

        r18 = $r9;

        $r11 = <java.lang.System: java.io.PrintStream err>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading class \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' failed");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.Object)>(r18);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label5 with label6;
    }

    private synchronized void readConfigurationImpl(java.io.InputStream) throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.io.InputStream r1;
        java.util.logging.Logger r2, r6;
        java.lang.String r3, r5, r7, $r16, $r20;
        java.util.StringTokenizer r4, $r21;
        java.util.Properties $r8, $r11, $r17;
        java.util.Hashtable $r9, $r12;
        java.lang.Object $r10, $r15;
        java.beans.PropertyChangeSupport $r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r14, $r18, $r19;
        java.util.logging.Level $r22;
        java.util.Collection r24;
        java.util.Iterator r25;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.util.logging.LogManager: void reset()>();

        $r8 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        virtualinvoke $r8.<java.util.Properties: void load(java.io.InputStream)>(r1);

        $r9 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r10 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        r2 = (java.util.logging.Logger) $r10;

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.logging.Logger: void setManager(java.util.logging.LogManager)>(r0);

     label1:
        $r11 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        r3 = virtualinvoke $r11.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("config");

        if r3 == null goto label3;

        $r21 = new java.util.StringTokenizer;

        specialinvoke $r21.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, " ");

        r4 = $r21;

     label2:
        $z1 = virtualinvoke r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z1 == 0 goto label3;

        r5 = virtualinvoke r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r5);

        goto label2;

     label3:
        $r12 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        r24 = virtualinvoke $r12.<java.util.Hashtable: java.util.Collection values()>();

        r25 = interfaceinvoke r24.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r15 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.logging.Logger) $r15;

        $r17 = r0.<java.util.logging.LogManager: java.util.Properties props>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke r6.<java.util.logging.Logger: java.lang.String getName()>();

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".level");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = virtualinvoke $r17.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r20);

        if r7 == null goto label5;

        $r22 = staticinvoke <java.util.logging.Level: java.util.logging.Level parse(java.lang.String)>(r7);

        virtualinvoke r6.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r22);

     label5:
        goto label4;

     label6:
        $r13 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r13.<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>(null, null, null);

        return;
    }

    public void readConfiguration(java.io.InputStream) throws java.io.IOException
    {
        java.util.logging.LogManager r0;
        java.io.InputStream r1;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.io.InputStream;

        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        specialinvoke r0.<java.util.logging.LogManager: void readConfigurationImpl(java.io.InputStream)>(r1);

        return;
    }

    public synchronized void reset()
    {
        java.util.logging.LogManager r0;
        java.util.Enumeration r1;
        java.lang.String r2;
        java.util.logging.Logger r3, r9;
        java.util.Properties $r4;
        boolean $z0;
        java.util.Hashtable $r5;
        java.lang.Object $r6, $r8;
        java.util.logging.Level $r7;

        r0 := @this: java.util.logging.LogManager;

        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r4 = new java.util.Properties;

        specialinvoke $r4.<java.util.Properties: void <init>()>();

        r0.<java.util.logging.LogManager: java.util.Properties props> = $r4;

        r1 = virtualinvoke r0.<java.util.logging.LogManager: java.util.Enumeration getLoggerNames()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r2 = (java.lang.String) $r8;

        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r2);

        if r3 == null goto label2;

        virtualinvoke r3.<java.util.logging.Logger: void reset()>();

     label2:
        goto label1;

     label3:
        $r5 = r0.<java.util.logging.LogManager: java.util.Hashtable loggers>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("");

        r9 = (java.util.logging.Logger) $r6;

        if r9 == null goto label4;

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r9.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r7);

     label4:
        return;
    }

    public void addPropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;
        java.lang.NullPointerException $r3;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        if r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("l == null");

        throw $r3;

     label1:
        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    public void removePropertyChangeListener(java.beans.PropertyChangeListener)
    {
        java.util.logging.LogManager r0;
        java.beans.PropertyChangeListener r1;
        java.beans.PropertyChangeSupport $r2;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.beans.PropertyChangeListener;

        virtualinvoke r0.<java.util.logging.LogManager: void checkAccess()>();

        $r2 = r0.<java.util.logging.LogManager: java.beans.PropertyChangeSupport listeners>;

        virtualinvoke $r2.<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>(r1);

        return;
    }

    synchronized java.util.logging.Logger getOrCreate(java.lang.String, java.lang.String)
    {
        java.util.logging.LogManager r0;
        java.lang.String r1, r2;
        java.util.logging.Logger r3, $r4;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 = virtualinvoke r0.<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>(r1);

        if r3 != null goto label1;

        $r4 = new java.util.logging.Logger;

        specialinvoke $r4.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>(r1, r2);

        r3 = $r4;

        virtualinvoke r0.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r3);

     label1:
        return r3;
    }

    synchronized void setParent(java.util.logging.Logger, java.util.logging.Logger)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r2;
        java.util.logging.Level $r3;
        java.util.List $r4;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.util.logging.Logger;

        r1.<java.util.logging.Logger: java.util.logging.Logger parent> = r2;

        $r3 = r1.<java.util.logging.Logger: java.util.logging.Level levelObjVal>;

        if $r3 != null goto label1;

        virtualinvoke r0.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r1, null);

     label1:
        $r4 = r2.<java.util.logging.Logger: java.util.List children>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r1.<java.util.logging.Logger: void updateDalvikLogHandler()>();

        return;
    }

    synchronized void setLevelRecursively(java.util.logging.Logger, java.util.logging.Level)
    {
        java.util.logging.LogManager r0;
        java.util.logging.Logger r1, r4, $r8, $r10;
        java.util.logging.Level r2, $r7, $r9;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r3;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this: java.util.logging.LogManager;

        r1 := @parameter0: java.util.logging.Logger;

        r2 := @parameter1: java.util.logging.Level;

        i0 = r1.<java.util.logging.Logger: int levelIntVal>;

        r1.<java.util.logging.Logger: java.util.logging.Level levelObjVal> = r2;

        if r2 != null goto label3;

        $r8 = r1.<java.util.logging.Logger: java.util.logging.Logger parent>;

        if $r8 == null goto label1;

        $r10 = r1.<java.util.logging.Logger: java.util.logging.Logger parent>;

        $i3 = $r10.<java.util.logging.Logger: int levelIntVal>;

        goto label2;

     label1:
        $r9 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $i3 = virtualinvoke $r9.<java.util.logging.Level: int intValue()>();

     label2:
        r1.<java.util.logging.Logger: int levelIntVal> = $i3;

        goto label4;

     label3:
        $i1 = virtualinvoke r2.<java.util.logging.Level: int intValue()>();

        r1.<java.util.logging.Logger: int levelIntVal> = $i1;

     label4:
        $i2 = r1.<java.util.logging.Logger: int levelIntVal>;

        if i0 == $i2 goto label7;

        $r5 = r1.<java.util.logging.Logger: java.util.List children>;

        r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.logging.Logger) $r6;

        $r7 = r4.<java.util.logging.Logger: java.util.logging.Level levelObjVal>;

        if $r7 != null goto label6;

        virtualinvoke r0.<java.util.logging.LogManager: void setLevelRecursively(java.util.logging.Logger,java.util.logging.Level)>(r4, null);

     label6:
        goto label5;

     label7:
        return;
    }

    static void <clinit>()
    {
        java.lang.String r0;
        java.lang.Exception r1, $r13;
        java.util.logging.LoggingPermission $r2;
        java.util.logging.LogManager $r3, $r4, $r8, $r10, $r11, $r14;
        java.util.logging.Logger $r5, $r7, $r9, r15;
        java.util.logging.Level $r6;
        java.lang.Object $r12;

        <java.util.logging.LogManager: java.lang.String LOGGING_MXBEAN_NAME> = "java.util.logging:type=Logging";

        $r2 = new java.util.logging.LoggingPermission;

        specialinvoke $r2.<java.util.logging.LoggingPermission: void <init>(java.lang.String,java.lang.String)>("control", null);

        <java.util.logging.LogManager: java.util.logging.LoggingPermission perm> = $r2;

        r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.manager");

        if r0 == null goto label1;

        $r12 = staticinvoke <java.util.logging.LogManager: java.lang.Object getInstanceByClass(java.lang.String)>(r0);

        $r14 = (java.util.logging.LogManager) $r12;

        <java.util.logging.LogManager: java.util.logging.LogManager manager> = $r14;

     label1:
        $r3 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        if $r3 != null goto label2;

        $r11 = new java.util.logging.LogManager;

        specialinvoke $r11.<java.util.logging.LogManager: void <init>()>();

        <java.util.logging.LogManager: java.util.logging.LogManager manager> = $r11;

     label2:
        $r4 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        virtualinvoke $r4.<java.util.logging.LogManager: void readConfiguration()>();

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        r1 = $r13;

        virtualinvoke r1.<java.lang.Exception: void printStackTrace()>();

     label5:
        $r5 = new java.util.logging.Logger;

        specialinvoke $r5.<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String)>("", null);

        r15 = $r5;

        $r6 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r15.<java.util.logging.Logger: void setLevel(java.util.logging.Level)>($r6);

        $r7 = <java.util.logging.Logger: java.util.logging.Logger global>;

        virtualinvoke $r7.<java.util.logging.Logger: void setParent(java.util.logging.Logger)>(r15);

        $r8 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        virtualinvoke $r8.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>(r15);

        $r10 = <java.util.logging.LogManager: java.util.logging.LogManager manager>;

        $r9 = <java.util.logging.Logger: java.util.logging.Logger global>;

        virtualinvoke $r10.<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>($r9);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }
}
