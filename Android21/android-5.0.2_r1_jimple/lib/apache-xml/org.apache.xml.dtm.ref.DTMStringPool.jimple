public class org.apache.xml.dtm.ref.DTMStringPool extends java.lang.Object
{
    java.util.Vector m_intToString;
    static final int HASHPRIME;
    int[] m_hashStart;
    org.apache.xml.utils.IntVector m_hashChain;
    public static final int NULL;

    public void <init>(int)
    {
        org.apache.xml.dtm.ref.DTMStringPool r0;
        int i0;
        int[] $r1;
        java.util.Vector $r2;
        org.apache.xml.utils.IntVector $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMStringPool;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (int)[101];

        r0.<org.apache.xml.dtm.ref.DTMStringPool: int[] m_hashStart> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString> = $r2;

        $r3 = new org.apache.xml.utils.IntVector;

        specialinvoke $r3.<org.apache.xml.utils.IntVector: void <init>(int)>(i0);

        r0.<org.apache.xml.dtm.ref.DTMStringPool: org.apache.xml.utils.IntVector m_hashChain> = $r3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMStringPool: void removeAllElements()>();

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>("");

        return;
    }

    public void <init>()
    {
        org.apache.xml.dtm.ref.DTMStringPool r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMStringPool: void <init>(int)>(512);

        return;
    }

    public void removeAllElements()
    {
        org.apache.xml.dtm.ref.DTMStringPool r0;
        int i0;
        java.util.Vector $r1;
        org.apache.xml.utils.IntVector $r2;
        int[] $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMStringPool;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        i0 = 0;

     label1:
        if i0 >= 101 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMStringPool: int[] m_hashStart>;

        $r3[i0] = -1;

        i0 = i0 + 1;

        goto label1;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMStringPool: org.apache.xml.utils.IntVector m_hashChain>;

        virtualinvoke $r2.<org.apache.xml.utils.IntVector: void removeAllElements()>();

        return;
    }

    public java.lang.String indexToString(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.DTMStringPool r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMStringPool;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public int stringToIndex(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMStringPool r0;
        java.lang.String r1;
        int i0, i1, i2, i3, $i4;
        int[] $r2, $r7;
        java.util.Vector $r3, $r4, $r8;
        org.apache.xml.utils.IntVector $r5, $r6, $r10;
        java.lang.Object $r9;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMStringPool;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        return -1;

     label1:
        $i4 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        i0 = $i4 % 101;

        if i0 >= 0 goto label2;

        i0 = neg i0;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMStringPool: int[] m_hashStart>;

        i1 = $r2[i0];

        i2 = i1;

     label3:
        if i2 == -1 goto label5;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        $z0 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label4;

        return i2;

     label4:
        i1 = i2;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMStringPool: org.apache.xml.utils.IntVector m_hashChain>;

        i2 = virtualinvoke $r10.<org.apache.xml.utils.IntVector: int elementAt(int)>(i2);

        goto label3;

     label5:
        $r3 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        i3 = virtualinvoke $r3.<java.util.Vector: int size()>();

        $r4 = r0.<org.apache.xml.dtm.ref.DTMStringPool: java.util.Vector m_intToString>;

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMStringPool: org.apache.xml.utils.IntVector m_hashChain>;

        virtualinvoke $r5.<org.apache.xml.utils.IntVector: void addElement(int)>(-1);

        if i1 != -1 goto label6;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMStringPool: int[] m_hashStart>;

        $r7[i0] = i3;

        goto label7;

     label6:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMStringPool: org.apache.xml.utils.IntVector m_hashChain>;

        virtualinvoke $r6.<org.apache.xml.utils.IntVector: void setElementAt(int,int)>(i3, i1);

     label7:
        return i3;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0, r1, $r3;
        org.apache.xml.dtm.ref.DTMStringPool r2, $r4;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.io.PrintStream $r5, $r7, $r15, $r21, $r32;
        java.lang.StringBuilder $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r17, $r19, $r22, $r23, $r24, $r25, $r26, $r27, $r30, $r31, $r33, $r34;
        java.lang.String $r10, $r12, $r18, $r20, $r28, $r29, $r35, r36;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        $r3 = newarray (java.lang.String)[40];

        $r3[0] = "Zero";

        $r3[1] = "One";

        $r3[2] = "Two";

        $r3[3] = "Three";

        $r3[4] = "Four";

        $r3[5] = "Five";

        $r3[6] = "Six";

        $r3[7] = "Seven";

        $r3[8] = "Eight";

        $r3[9] = "Nine";

        $r3[10] = "Ten";

        $r3[11] = "Eleven";

        $r3[12] = "Twelve";

        $r3[13] = "Thirteen";

        $r3[14] = "Fourteen";

        $r3[15] = "Fifteen";

        $r3[16] = "Sixteen";

        $r3[17] = "Seventeen";

        $r3[18] = "Eighteen";

        $r3[19] = "Nineteen";

        $r3[20] = "Twenty";

        $r3[21] = "Twenty-One";

        $r3[22] = "Twenty-Two";

        $r3[23] = "Twenty-Three";

        $r3[24] = "Twenty-Four";

        $r3[25] = "Twenty-Five";

        $r3[26] = "Twenty-Six";

        $r3[27] = "Twenty-Seven";

        $r3[28] = "Twenty-Eight";

        $r3[29] = "Twenty-Nine";

        $r3[30] = "Thirty";

        $r3[31] = "Thirty-One";

        $r3[32] = "Thirty-Two";

        $r3[33] = "Thirty-Three";

        $r3[34] = "Thirty-Four";

        $r3[35] = "Thirty-Five";

        $r3[36] = "Thirty-Six";

        $r3[37] = "Thirty-Seven";

        $r3[38] = "Thirty-Eight";

        $r3[39] = "Thirty-Nine";

        r1 = $r3;

        $r4 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        r2 = $r4;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("If no complaints are printed below, we passed initial test.");

        i0 = 0;

     label01:
        if i0 > 1 goto label11;

        i1 = 0;

     label02:
        $i3 = lengthof r1;

        if i1 >= $i3 goto label04;

        $r29 = r1[i1];

        i2 = virtualinvoke r2.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r29);

        if i2 == i1 goto label03;

        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tMismatch populating pool: assigned ");

        $r30 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for create ");

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r35);

     label03:
        i1 = i1 + 1;

        goto label02;

     label04:
        i6 = 0;

     label05:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label07;

        $r20 = r1[i6];

        i7 = virtualinvoke r2.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r20);

        if i7 == i6 goto label06;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tMismatch in stringToIndex: returned ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r23 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for lookup ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        i8 = 0;

     label08:
        $i5 = lengthof r1;

        if i8 >= $i5 goto label10;

        r36 = virtualinvoke r2.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i8);

        $r12 = r1[i8];

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z0 != 0 goto label09;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tMismatch in indexToString: returned");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r16 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for lookup ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r18);

     label09:
        i8 = i8 + 1;

        goto label08;

     label10:
        virtualinvoke r2.<org.apache.xml.dtm.ref.DTMStringPool: void removeAllElements()>();

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nPass ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" complete\n");

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10);

        i0 = i0 + 1;

        goto label01;

     label11:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.DTMStringPool: int NULL> = -1;

        <org.apache.xml.dtm.ref.DTMStringPool: int HASHPRIME> = 101;

        return;
    }
}
