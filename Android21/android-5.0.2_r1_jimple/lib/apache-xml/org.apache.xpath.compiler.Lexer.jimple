class org.apache.xpath.compiler.Lexer extends java.lang.Object
{
    private org.apache.xpath.compiler.Compiler m_compiler;
    org.apache.xml.utils.PrefixResolver m_namespaceContext;
    org.apache.xpath.compiler.XPathParser m_processor;
    static final int TARGETEXTRA;
    private int[] m_patternMap;
    private int m_patternMapSize;

    void <init>(org.apache.xpath.compiler.Compiler, org.apache.xml.utils.PrefixResolver, org.apache.xpath.compiler.XPathParser)
    {
        org.apache.xpath.compiler.Lexer r0;
        org.apache.xpath.compiler.Compiler r1;
        org.apache.xml.utils.PrefixResolver r2;
        org.apache.xpath.compiler.XPathParser r3;
        int[] $r4;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        r2 := @parameter1: org.apache.xml.utils.PrefixResolver;

        r3 := @parameter2: org.apache.xpath.compiler.XPathParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = newarray (int)[100];

        r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap> = $r4;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler> = r1;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext> = r2;

        r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor> = r3;

        return;
    }

    void tokenize(java.lang.String) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.xpath.compiler.Lexer: void tokenize(java.lang.String,java.util.Vector)>(r1, null);

        return;
    }

    void tokenize(java.lang.String, java.util.Vector) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r22;
        java.util.Vector r2;
        int i0, i1, i2, i3, i4, i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17, $i19;
        boolean z0, z1, z2, $z3;
        char c6, $c16, $c18;
        org.apache.xpath.compiler.Compiler $r3, $r5, $r6;
        org.apache.xpath.compiler.OpMapVector $r4;
        org.apache.xpath.compiler.XPathParser $r7, $r8, $r15, $r20;
        org.apache.xml.utils.PrefixResolver $r9, $r10;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r3.<org.apache.xpath.compiler.Compiler: java.lang.String m_currentPattern> = r1;

        r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize> = 0;

        $i7 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i7 >= 500 goto label01;

        $i19 = virtualinvoke r1.<java.lang.String: int length()>();

        goto label02;

     label01:
        $i19 = 500;

     label02:
        i0 = $i19 * 5;

        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r4 = new org.apache.xpath.compiler.OpMapVector;

        specialinvoke $r4.<org.apache.xpath.compiler.OpMapVector: void <init>(int,int,int)>(i0, 2500, 1);

        $r5.<org.apache.xpath.compiler.Compiler: org.apache.xpath.compiler.OpMapVector m_opMap> = $r4;

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

        i2 = -1;

        i3 = -1;

        z0 = 1;

        z1 = 0;

        z2 = 0;

        i4 = 0;

        i5 = 0;

     label03:
        if i5 >= i1 goto label40;

        c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        lookupswitch(c6)
        {
            case 9: goto label16;
            case 10: goto label16;
            case 13: goto label16;
            case 32: goto label16;
            case 33: goto label22;
            case 34: goto label04;
            case 36: goto label22;
            case 39: goto label10;
            case 40: goto label22;
            case 41: goto label22;
            case 42: goto label22;
            case 43: goto label22;
            case 44: goto label22;
            case 45: goto label20;
            case 47: goto label22;
            case 58: goto label34;
            case 60: goto label22;
            case 61: goto label22;
            case 62: goto label22;
            case 64: goto label19;
            case 91: goto label22;
            case 92: goto label22;
            case 93: goto label22;
            case 94: goto label22;
            case 124: goto label22;
            default: goto label37;
        };

     label04:
        if i2 == -1 goto label06;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        z1 = 0;

        if -1 == i3 goto label05;

        i3 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i2, i3, i5);

        goto label06;

     label05:
        $r21 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i5);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r21);

     label06:
        i2 = i5;

        i5 = i5 + 1;

     label07:
        if i5 >= i1 goto label08;

        $c18 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        c6 = $c18;

        if $c18 == 34 goto label08;

        i5 = i5 + 1;

        goto label07;

     label08:
        if c6 != 34 goto label09;

        if i5 >= i1 goto label09;

        $i17 = i5 + 1;

        $r19 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i17);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r19);

        i2 = -1;

        goto label39;

     label09:
        $r20 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r20.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_DOUBLE_QUOTE", null);

        goto label39;

     label10:
        if i2 == -1 goto label12;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        z1 = 0;

        if -1 == i3 goto label11;

        i3 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i2, i3, i5);

        goto label12;

     label11:
        $r17 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i5);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r17);

     label12:
        i2 = i5;

        i5 = i5 + 1;

     label13:
        if i5 >= i1 goto label14;

        $c16 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        c6 = $c16;

        if $c16 == 39 goto label14;

        i5 = i5 + 1;

        goto label13;

     label14:
        if c6 != 39 goto label15;

        if i5 >= i1 goto label15;

        $i14 = i5 + 1;

        $r18 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i14);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r18);

        i2 = -1;

        goto label39;

     label15:
        $r15 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r15.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EXPECTED_SINGLE_QUOTE", null);

        goto label39;

     label16:
        if i2 == -1 goto label39;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        z1 = 0;

        if -1 == i3 goto label17;

        i3 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i2, i3, i5);

        goto label18;

     label17:
        $r22 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i5);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r22);

     label18:
        i2 = -1;

        goto label39;

     label19:
        z1 = 1;

     label20:
        if 45 != c6 goto label22;

        if z2 != 0 goto label21;

        if i2 == -1 goto label21;

        goto label39;

     label21:
        z2 = 0;

     label22:
        if i2 == -1 goto label25;

        z2 = 0;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        z1 = 0;

        if -1 == i3 goto label23;

        i3 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i2, i3, i5);

        goto label24;

     label23:
        $r13 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i5);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r13);

     label24:
        i2 = -1;

        goto label27;

     label25:
        if 47 != c6 goto label26;

        if z0 == 0 goto label26;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        goto label27;

     label26:
        if 42 != c6 goto label27;

        z0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        z1 = 0;

     label27:
        if 0 != i4 goto label29;

        if 124 != c6 goto label29;

        if null == r2 goto label28;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void recordTokenString(java.util.Vector)>(r2);

     label28:
        z0 = 1;

     label29:
        if 41 == c6 goto label30;

        if 93 != c6 goto label31;

     label30:
        i4 = i4 + -1;

        goto label33;

     label31:
        if 40 == c6 goto label32;

        if 91 != c6 goto label33;

     label32:
        i4 = i4 + 1;

     label33:
        $i9 = i5 + 1;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i5, $i9);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r12);

        goto label39;

     label34:
        if i5 <= 0 goto label37;

        $i10 = i5 - 1;

        if i3 != $i10 goto label36;

        if i2 == -1 goto label35;

        $i11 = i5 - 1;

        if i2 >= $i11 goto label35;

        $i15 = i5 - 1;

        $r16 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, $i15);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r16);

     label35:
        z2 = 0;

        z1 = 0;

        i2 = -1;

        i3 = -1;

        $i13 = i5 - 1;

        $i12 = i5 + 1;

        $r14 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i13, $i12);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r14);

        goto label39;

     label36:
        i3 = i5;

     label37:
        if -1 != i2 goto label38;

        i2 = i5;

        z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c6);

        goto label39;

     label38:
        if z2 == 0 goto label39;

        z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c6);

     label39:
        i5 = i5 + 1;

        goto label03;

     label40:
        if i2 == -1 goto label43;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: boolean mapPatternElemPos(int,boolean,boolean)>(i4, z0, z1);

        if -1 != i3 goto label41;

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        if $r9 == null goto label42;

        $r10 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        $z3 = interfaceinvoke $r10.<org.apache.xml.utils.PrefixResolver: boolean handlesNullPrefixes()>();

        if $z3 == 0 goto label42;

     label41:
        specialinvoke r0.<org.apache.xpath.compiler.Lexer: int mapNSTokens(java.lang.String,int,int,int)>(r1, i2, i3, i1);

        goto label43;

     label42:
        $r11 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i2, i1);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>($r11);

     label43:
        $r6 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $i8 = virtualinvoke $r6.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        if 0 != $i8 goto label44;

        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        virtualinvoke $r8.<org.apache.xpath.compiler.XPathParser: void error(java.lang.String,java.lang.Object[])>("ER_EMPTY_EXPRESSION", null);

        goto label45;

     label44:
        if null == r2 goto label45;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void recordTokenString(java.util.Vector)>(r2);

     label45:
        $r7 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r7.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = 0;

        return;
    }

    private boolean mapPatternElemPos(int, boolean, boolean)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        boolean z0, z1;
        int[] r1, $r2, $r4, $r5, $r6, $r7, $r8;
        org.apache.xpath.compiler.Compiler $r3;
        byte $b9;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if 0 != i0 goto label5;

        $i3 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $r2 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $i2 = lengthof $r2;

        if $i3 < $i2 goto label1;

        r1 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $r6 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        i1 = lengthof $r6;

        $i16 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i15 = $i16 + 100;

        $r8 = newarray (int)[$i15];

        r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap> = $r8;

        $r7 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, 0, $r7, 0, i1);

     label1:
        if z0 != 0 goto label2;

        $r5 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $i12 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i11 = $i12 - 1;

        $i13 = $r5[$i11];

        $i14 = $i13 - 10000;

        $r5[$i11] = $i14;

     label2:
        $r4 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        $i4 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $i5 = virtualinvoke $r3.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        if z1 == 0 goto label3;

        $b9 = 1;

        goto label4;

     label3:
        $b9 = 0;

     label4:
        $i6 = $i5 - $b9;

        $i7 = $i6 + 10000;

        $r4[$i4] = $i7;

        $i8 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i10 = $i8 + 1;

        r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize> = $i10;

        z0 = 0;

     label5:
        return z0;
    }

    private int getTokenQueuePosFromMap(int)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1, $i2;
        int[] $r1;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.Lexer: int[] m_patternMap>;

        i1 = $r1[i0];

        if i1 < 10000 goto label1;

        $i2 = i1 - 10000;

        goto label2;

     label1:
        $i2 = i1;

     label2:
        return $i2;
    }

    private final void resetTokenMark(int)
    {
        org.apache.xpath.compiler.Lexer r0;
        int i0, i1, $i2, $i3, $i4, $i6;
        org.apache.xpath.compiler.Compiler $r1, $r6;
        org.apache.xpath.compiler.XPathParser $r2, $r3, $r4, $r5, $r7, $r9, $r13, $r14;
        org.apache.xml.utils.ObjectVector $r8;
        java.lang.String $r10, $r12;
        java.lang.Object $r11;
        char $c5;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        i1 = virtualinvoke $r1.<org.apache.xpath.compiler.Compiler: int getTokenQueueSize()>();

        $r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        if i0 <= 0 goto label2;

        if i0 > i1 goto label1;

        $i6 = i0 - 1;

        goto label3;

     label1:
        $i6 = i0;

        goto label3;

     label2:
        $i6 = 0;

     label3:
        $r2.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i6;

        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $i2 = $r3.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        if $i2 >= i1 goto label4;

        $r7 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r6 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r8 = virtualinvoke $r6.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $i3 = $r9.<org.apache.xpath.compiler.XPathParser: int m_queueMark>;

        $i4 = $i3 + 1;

        $r9.<org.apache.xpath.compiler.XPathParser: int m_queueMark> = $i4;

        $r11 = virtualinvoke $r8.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>($i3);

        $r10 = (java.lang.String) $r11;

        $r7.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = $r10;

        $r14 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r13 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r12 = $r13.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        $c5 = virtualinvoke $r12.<java.lang.String: char charAt(int)>(0);

        $r14.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = $c5;

        goto label5;

     label4:
        $r4 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r4.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token> = null;

        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r5.<org.apache.xpath.compiler.XPathParser: char m_tokenChar> = 0;

     label5:
        return;
    }

    final int getKeywordToken(java.lang.String)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;
        int i0, $i1;
        java.lang.Integer r2;
        java.lang.Object $r3;
        java.lang.NullPointerException $r4;
        java.lang.ClassCastException $r5;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

     label1:
        $r3 = staticinvoke <org.apache.xpath.compiler.Keywords: java.lang.Object getKeyWord(java.lang.String)>(r1);

        r2 = (java.lang.Integer) $r3;

        if null == r2 goto label2;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        goto label3;

     label2:
        $i1 = 0;

     label3:
        i0 = $i1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        i0 = 0;

        goto label7;

     label6:
        $r5 := @caughtexception;

        i0 = 0;

     label7:
        return i0;

        catch java.lang.NullPointerException from label1 to label4 with label5;
        catch java.lang.ClassCastException from label1 to label4 with label6;
    }

    private void recordTokenString(java.util.Vector)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.util.Vector r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.apache.xpath.compiler.XPathParser $r2, $r3, $r4, $r9;
        boolean $z0, $z1, $z2;
        org.apache.xpath.compiler.Compiler $r5;
        org.apache.xml.utils.ObjectVector $r6;
        java.lang.Object $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.util.Vector;

        $i2 = r0.<org.apache.xpath.compiler.Lexer: int m_patternMapSize>;

        $i3 = $i2 - 1;

        i0 = specialinvoke r0.<org.apache.xpath.compiler.Lexer: int getTokenQueuePosFromMap(int)>($i3);

        $i4 = i0 + 1;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void resetTokenMark(int)>($i4);

        $r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z0 = virtualinvoke $r2.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(40, 1);

        if $z0 == 0 goto label09;

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r8 = $r9.<org.apache.xpath.compiler.XPathParser: java.lang.String m_token>;

        i1 = virtualinvoke r0.<org.apache.xpath.compiler.Lexer: int getKeywordToken(java.lang.String)>($r8);

        lookupswitch(i1)
        {
            case 35: goto label04;
            case 36: goto label05;
            case 1030: goto label01;
            case 1031: goto label02;
            case 1032: goto label06;
            case 1033: goto label03;
            default: goto label07;
        };

     label01:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("#comment");

        goto label08;

     label02:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("#text");

        goto label08;

     label03:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        goto label08;

     label04:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("/");

        goto label08;

     label05:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        goto label08;

     label06:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

        goto label08;

     label07:
        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>("*");

     label08:
        goto label12;

     label09:
        $r3 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z1 = virtualinvoke $r3.<org.apache.xpath.compiler.XPathParser: boolean tokenIs(char)>(64);

        if $z1 == 0 goto label10;

        i0 = i0 + 1;

        $i5 = i0 + 1;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void resetTokenMark(int)>($i5);

     label10:
        $r4 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $z2 = virtualinvoke $r4.<org.apache.xpath.compiler.XPathParser: boolean lookahead(char,int)>(58, 1);

        if $z2 == 0 goto label11;

        i0 = i0 + 2;

     label11:
        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r6 = virtualinvoke $r5.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        $r7 = virtualinvoke $r6.<org.apache.xml.utils.ObjectVector: java.lang.Object elementAt(int)>(i0);

        virtualinvoke r1.<java.util.Vector: void addElement(java.lang.Object)>($r7);

     label12:
        return;
    }

    private final void addToTokenQueue(java.lang.String)
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1;
        org.apache.xpath.compiler.Compiler $r2;
        org.apache.xml.utils.ObjectVector $r3;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.Compiler m_compiler>;

        $r3 = virtualinvoke $r2.<org.apache.xpath.compiler.Compiler: org.apache.xml.utils.ObjectVector getTokenQueue()>();

        virtualinvoke $r3.<org.apache.xml.utils.ObjectVector: void addElement(java.lang.Object)>(r1);

        return;
    }

    private int mapNSTokens(java.lang.String, int, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Lexer r0;
        java.lang.String r1, r2, r3, r12;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.xml.utils.PrefixResolver $r5, $r8, $r9, $r11;
        java.lang.String[] $r6;
        org.apache.xpath.compiler.XPathParser $r7;
        boolean $z0, $z1;
        java.lang.ClassCastException $r10;

        r0 := @this: org.apache.xpath.compiler.Lexer;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 = "";

        if i0 < 0 goto label01;

        if i1 < 0 goto label01;

        r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label01:
        $r5 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        if null == $r5 goto label06;

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 != 0 goto label06;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 != 0 goto label06;

     label02:
        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i6 <= 0 goto label03;

        $r9 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r3 = interfaceinvoke $r9.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

        goto label04;

     label03:
        $r8 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r3 = interfaceinvoke $r8.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

     label04:
        goto label07;

     label05:
        $r10 := @caughtexception;

        $r11 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xml.utils.PrefixResolver m_namespaceContext>;

        r3 = interfaceinvoke $r11.<org.apache.xml.utils.PrefixResolver: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

        goto label07;

     label06:
        r3 = r2;

     label07:
        if null == r3 goto label09;

        $i3 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i3 <= 0 goto label09;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(r3);

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(":");

        $i4 = i1 + 1;

        r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>($i4, i2);

        $i5 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i5 <= 0 goto label08;

        specialinvoke r0.<org.apache.xpath.compiler.Lexer: void addToTokenQueue(java.lang.String)>(r12);

     label08:
        goto label10;

     label09:
        $r7 = r0.<org.apache.xpath.compiler.Lexer: org.apache.xpath.compiler.XPathParser m_processor>;

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = r2;

        virtualinvoke $r7.<org.apache.xpath.compiler.XPathParser: void errorForDOM3(java.lang.String,java.lang.Object[])>("ER_PREFIX_MUST_RESOLVE", $r6);

     label10:
        return -1;

        catch java.lang.ClassCastException from label02 to label04 with label05;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.compiler.Lexer: int TARGETEXTRA> = 10000;

        return;
    }
}
