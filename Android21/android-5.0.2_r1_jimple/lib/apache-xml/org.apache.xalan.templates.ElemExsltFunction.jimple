public class org.apache.xalan.templates.ElemExsltFunction extends org.apache.xalan.templates.ElemTemplate
{
    static final long serialVersionUID;

    public void <init>()
    {
        org.apache.xalan.templates.ElemExsltFunction r0;

        r0 := @this: org.apache.xalan.templates.ElemExsltFunction;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplate: void <init>()>();

        return;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemExsltFunction r0;

        r0 := @this: org.apache.xalan.templates.ElemExsltFunction;

        return 88;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemExsltFunction r0;

        r0 := @this: org.apache.xalan.templates.ElemExsltFunction;

        return "function";
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl, org.apache.xpath.objects.XObject[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExsltFunction r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        org.apache.xpath.objects.XObject[] r2;
        org.apache.xpath.XPathContext r3;
        org.apache.xpath.VariableStack r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.w3c.dom.NodeList r5;
        org.apache.xalan.templates.ElemParam r7;
        boolean $z0;
        org.w3c.dom.Node $r8, $r9;
        javax.xml.transform.TransformerException $r10;
        org.apache.xpath.objects.XObject $r11;

        r0 := @this: org.apache.xalan.templates.ElemExsltFunction;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r2 := @parameter1: org.apache.xpath.objects.XObject[];

        r3 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        r4 = virtualinvoke r3.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        i0 = virtualinvoke r4.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i3 = r0.<org.apache.xalan.templates.ElemExsltFunction: int m_frameSize>;

        i1 = virtualinvoke r4.<org.apache.xpath.VariableStack: int link(int)>($i3);

        $i4 = r0.<org.apache.xalan.templates.ElemExsltFunction: int m_inArgsSize>;

        $i5 = lengthof r2;

        if $i4 >= $i5 goto label1;

        $r10 = new javax.xml.transform.TransformerException;

        specialinvoke $r10.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>("function called with too many args");

        throw $r10;

     label1:
        $i7 = r0.<org.apache.xalan.templates.ElemExsltFunction: int m_inArgsSize>;

        if $i7 <= 0 goto label5;

        $i6 = r0.<org.apache.xalan.templates.ElemExsltFunction: int m_inArgsSize>;

        virtualinvoke r4.<org.apache.xpath.VariableStack: void clearLocalSlots(int,int)>(0, $i6);

        $i8 = lengthof r2;

        if $i8 <= 0 goto label5;

        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i0);

        r5 = virtualinvoke r0.<org.apache.xalan.templates.ElemExsltFunction: org.w3c.dom.NodeList getChildNodes()>();

        i2 = 0;

     label2:
        $i9 = lengthof r2;

        if i2 >= $i9 goto label4;

        interfaceinvoke r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $r8 = interfaceinvoke r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        $z0 = $r8 instanceof org.apache.xalan.templates.ElemParam;

        if $z0 == 0 goto label3;

        $r9 = interfaceinvoke r5.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        r7 = (org.apache.xalan.templates.ElemParam) $r9;

        $i10 = virtualinvoke r7.<org.apache.xalan.templates.ElemParam: int getIndex()>();

        $r11 = r2[i2];

        virtualinvoke r4.<org.apache.xpath.VariableStack: void setLocalVariable(int,org.apache.xpath.objects.XObject,int)>($i10, $r11, i1);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label5:
        virtualinvoke r4.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement,boolean)>(r0, 1);

        virtualinvoke r4.<org.apache.xpath.VariableStack: void unlink(int)>(i0);

        return;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExsltFunction r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.lang.String r2, r3, r13;
        java.lang.Object[] r4, $r7, $r10, r14;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r5, $r8, $r11, r15;
        org.apache.xml.utils.QName $r6;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r9, $r12;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemExsltFunction;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplate: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r6 = virtualinvoke r0.<org.apache.xalan.templates.ElemExsltFunction: org.apache.xml.utils.QName getName()>();

        r2 = virtualinvoke $r6.<org.apache.xml.utils.QName: java.lang.String getNamespace()>();

        r3 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: java.lang.String getExtensionHandlerClass()>();

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r2;

        $r7[1] = r1;

        r4 = $r7;

        $r8 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        specialinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r2, r3, r4);

        r5 = $r8;

        $r9 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r9.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(org.apache.xalan.extensions.ExtensionNamespaceSupport)>(r5);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("http://exslt.org/functions");

        if $z0 != 0 goto label1;

        r13 = "http://exslt.org/functions";

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = r13;

        $r10[1] = r1;

        r14 = $r10;

        $r11 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        specialinvoke $r11.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r13, r3, r14);

        r15 = $r11;

        $r12 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r12.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(org.apache.xalan.extensions.ExtensionNamespaceSupport)>(r15);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemExsltFunction: long serialVersionUID> = 272154954793534771L;

        return;
    }
}
