public class org.apache.xalan.extensions.ExtensionNamespaceSupport extends java.lang.Object
{
    java.lang.String m_namespace;
    java.lang.String m_handlerClass;
    java.lang.Class[] m_sig;
    java.lang.Object[] m_args;

    public void <init>(java.lang.String, java.lang.String, java.lang.Object[])
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.String r1, r2;
        java.lang.Object[] r3, $r4, $r6, $r7, $r9;
        int i0, $i1, $i2;
        java.lang.Class[] $r5, $r11;
        java.lang.Object $r8, $r10;
        java.lang.Class $r12;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = null;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace> = r1;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass> = r2;

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args> = r3;

        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i1 = lengthof $r4;

        $r5 = newarray (java.lang.Class)[$i1];

        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = $r5;

        i0 = 0;

     label1:
        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i2 = lengthof $r6;

        if i0 >= $i2 goto label4;

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r8 = $r7[i0];

        if $r8 == null goto label2;

        $r11 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        $r9 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r10 = $r9[i0];

        $r12 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r11[i0] = $r12;

        goto label3;

     label2:
        r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig> = null;

        goto label4;

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        return;
    }

    public java.lang.String getNamespace()
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r1 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_namespace>;

        return $r1;
    }

    public org.apache.xalan.extensions.ExtensionHandler launch() throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.extensions.ExtensionNamespaceSupport r0;
        java.lang.Class r1;
        java.lang.reflect.Constructor r2, $r9;
        java.lang.reflect.Constructor[] r3;
        int i0, $i1, $i2, $i3;
        java.lang.String $r4;
        java.lang.Class[] $r5, $r10, $r12;
        javax.xml.transform.TransformerException $r6, $r14;
        java.lang.Object[] $r7, $r11;
        java.lang.Object $r8;
        java.lang.Exception $r13, r16;
        org.apache.xalan.extensions.ExtensionHandler r15;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespaceSupport;

     label1:
        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String m_handlerClass>;

        r1 = staticinvoke <org.apache.xalan.extensions.ExtensionHandler: java.lang.Class getClassForName(java.lang.String)>($r4);

        r2 = null;

        $r5 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        if $r5 == null goto label2;

        $r12 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Class[] m_sig>;

        r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r12);

        goto label5;

     label2:
        r3 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i0 = 0;

     label3:
        $i1 = lengthof r3;

        if i0 >= $i1 goto label5;

        $r9 = r3[i0];

        $r10 = virtualinvoke $r9.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r10;

        $r11 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $i2 = lengthof $r11;

        if $i3 != $i2 goto label4;

        r2 = r3[i0];

        goto label5;

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        if r2 == null goto label6;

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.Object[] m_args>;

        $r8 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        r15 = (org.apache.xalan.extensions.ExtensionHandler) $r8;

        goto label7;

     label6:
        $r6 = new javax.xml.transform.TransformerException;

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>("ExtensionHandler constructor not found");

        throw $r6;

     label7:
        goto label9;

     label8:
        $r13 := @caughtexception;

        r16 = $r13;

        $r14 = new javax.xml.transform.TransformerException;

        specialinvoke $r14.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r16);

        throw $r14;

     label9:
        return r15;

        catch java.lang.Exception from label1 to label7 with label8;
    }
}
