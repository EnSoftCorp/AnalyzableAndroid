public class org.apache.xalan.processor.ProcessorExsltFunction extends org.apache.xalan.processor.ProcessorTemplateElem
{
    static final long serialVersionUID;

    public void <init>()
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void <init>()>();

        return;
    }

    public void startElement(org.apache.xalan.processor.StylesheetHandler, java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.processor.StylesheetHandler r1;
        java.lang.String r2, r3, r4, r7, r11, r12;
        org.xml.sax.Attributes r5;
        int i0;
        org.apache.xalan.templates.ElemTemplateElement $r8;
        boolean $z0;
        org.xml.sax.SAXException $r9, $r10;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: org.xml.sax.Attributes;

        $r8 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.ElemTemplateElement getElemTemplateElement()>();

        $z0 = $r8 instanceof org.apache.xalan.templates.Stylesheet;

        if $z0 != 0 goto label1;

        r11 = "func:function element must be top level.";

        $r10 = new org.xml.sax.SAXException;

        specialinvoke $r10.<org.xml.sax.SAXException: void <init>(java.lang.String)>(r11);

        virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>(r11, $r10);

     label1:
        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void startElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>(r1, r2, r3, r4, r5);

        r7 = interfaceinvoke r5.<org.xml.sax.Attributes: java.lang.String getValue(java.lang.String)>("name");

        i0 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String)>(":");

        if i0 <= 0 goto label2;

        goto label3;

     label2:
        r12 = "func:function name must have namespace";

        $r9 = new org.xml.sax.SAXException;

        specialinvoke $r9.<org.xml.sax.SAXException: void <init>(java.lang.String)>(r12);

        virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>(r12, $r9);

     label3:
        return;
    }

    protected void appendAndPush(org.apache.xalan.processor.StylesheetHandler, org.apache.xalan.templates.ElemTemplateElement) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.processor.StylesheetHandler r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        org.w3c.dom.Node $r3;
        org.apache.xalan.templates.Stylesheet $r4;
        org.apache.xalan.templates.ElemTemplate $r5;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void appendAndPush(org.apache.xalan.processor.StylesheetHandler,org.apache.xalan.templates.ElemTemplateElement)>(r1, r2);

        $r3 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.w3c.dom.Node getOriginatingNode()>();

        virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: void setDOMBackPointer(org.w3c.dom.Node)>($r3);

        $r4 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.Stylesheet getStylesheet()>();

        $r5 = (org.apache.xalan.templates.ElemTemplate) r2;

        virtualinvoke $r4.<org.apache.xalan.templates.Stylesheet: void setTemplate(org.apache.xalan.templates.ElemTemplate)>($r5);

        return;
    }

    public void endElement(org.apache.xalan.processor.StylesheetHandler, java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.processor.StylesheetHandler r1;
        java.lang.String r2, r3, r4;
        org.apache.xalan.templates.ElemTemplateElement r5;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.processor.StylesheetHandler;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 = virtualinvoke r1.<org.apache.xalan.processor.StylesheetHandler: org.apache.xalan.templates.ElemTemplateElement getElemTemplateElement()>();

        virtualinvoke r0.<org.apache.xalan.processor.ProcessorExsltFunction: void validate(org.apache.xalan.templates.ElemTemplateElement,org.apache.xalan.processor.StylesheetHandler)>(r5, r1);

        specialinvoke r0.<org.apache.xalan.processor.ProcessorTemplateElem: void endElement(org.apache.xalan.processor.StylesheetHandler,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public void validate(org.apache.xalan.templates.ElemTemplateElement, org.apache.xalan.processor.StylesheetHandler) throws org.xml.sax.SAXException
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.templates.ElemTemplateElement r1, r4, $r6, $r7;
        org.apache.xalan.processor.StylesheetHandler r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        org.xml.sax.SAXException $r5, $r8;
        java.lang.String r9, r10;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: org.apache.xalan.processor.StylesheetHandler;

     label1:
        if r1 == null goto label9;

        $z0 = r1 instanceof org.apache.xalan.templates.ElemExsltFuncResult;

        if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        if $r7 == null goto label2;

        $r6 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        $z17 = $r6 instanceof org.apache.xalan.templates.ElemFallback;

        if $z17 != 0 goto label2;

        r9 = "func:result has an illegal following sibling (only xsl:fallback allowed)";

        $r8 = new org.xml.sax.SAXException;

        specialinvoke $r8.<org.xml.sax.SAXException: void <init>(java.lang.String)>(r9);

        virtualinvoke r2.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>(r9, $r8);

     label2:
        $z1 = r1 instanceof org.apache.xalan.templates.ElemApplyImport;

        if $z1 != 0 goto label3;

        $z4 = r1 instanceof org.apache.xalan.templates.ElemApplyTemplates;

        if $z4 != 0 goto label3;

        $z5 = r1 instanceof org.apache.xalan.templates.ElemAttribute;

        if $z5 != 0 goto label3;

        $z6 = r1 instanceof org.apache.xalan.templates.ElemCallTemplate;

        if $z6 != 0 goto label3;

        $z8 = r1 instanceof org.apache.xalan.templates.ElemComment;

        if $z8 != 0 goto label3;

        $z7 = r1 instanceof org.apache.xalan.templates.ElemCopy;

        if $z7 != 0 goto label3;

        $z10 = r1 instanceof org.apache.xalan.templates.ElemCopyOf;

        if $z10 != 0 goto label3;

        $z9 = r1 instanceof org.apache.xalan.templates.ElemElement;

        if $z9 != 0 goto label3;

        $z12 = r1 instanceof org.apache.xalan.templates.ElemLiteralResult;

        if $z12 != 0 goto label3;

        $z11 = r1 instanceof org.apache.xalan.templates.ElemNumber;

        if $z11 != 0 goto label3;

        $z14 = r1 instanceof org.apache.xalan.templates.ElemPI;

        if $z14 != 0 goto label3;

        $z13 = r1 instanceof org.apache.xalan.templates.ElemText;

        if $z13 != 0 goto label3;

        $z16 = r1 instanceof org.apache.xalan.templates.ElemTextLiteral;

        if $z16 != 0 goto label3;

        $z15 = r1 instanceof org.apache.xalan.templates.ElemValueOf;

        if $z15 == 0 goto label4;

     label3:
        $z2 = virtualinvoke r0.<org.apache.xalan.processor.ProcessorExsltFunction: boolean ancestorIsOk(org.apache.xalan.templates.ElemTemplateElement)>(r1);

        if $z2 != 0 goto label4;

        r10 = "misplaced literal result in a func:function container.";

        $r5 = new org.xml.sax.SAXException;

        specialinvoke $r5.<org.xml.sax.SAXException: void <init>(java.lang.String)>(r10);

        virtualinvoke r2.<org.apache.xalan.processor.StylesheetHandler: void error(java.lang.String,java.lang.Exception)>(r10, $r5);

     label4:
        r4 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

     label5:
        if r4 != null goto label8;

        r4 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        if r4 != null goto label6;

        r1 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label6:
        if r1 == null goto label7;

        $z3 = r1 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z3 == 0 goto label5;

     label7:
        return;

     label8:
        r1 = r4;

        goto label1;

     label9:
        return;
    }

    boolean ancestorIsOk(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.processor.ProcessorExsltFunction r0;
        org.apache.xalan.templates.ElemTemplateElement r1, r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: org.apache.xalan.processor.ProcessorExsltFunction;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

     label1:
        $r3 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z0 = $r4 instanceof org.apache.xalan.templates.ElemExsltFunction;

        if $z0 != 0 goto label4;

        r2 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        $z1 = r2 instanceof org.apache.xalan.templates.ElemExsltFuncResult;

        if $z1 != 0 goto label2;

        $z2 = r2 instanceof org.apache.xalan.templates.ElemVariable;

        if $z2 != 0 goto label2;

        $z3 = r2 instanceof org.apache.xalan.templates.ElemParam;

        if $z3 != 0 goto label2;

        $z4 = r2 instanceof org.apache.xalan.templates.ElemMessage;

        if $z4 == 0 goto label3;

     label2:
        return 1;

     label3:
        r1 = r2;

        goto label1;

     label4:
        return 0;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.processor.ProcessorExsltFunction: long serialVersionUID> = 2411427965578315332L;

        return;
    }
}
