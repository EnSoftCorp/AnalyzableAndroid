public abstract class org.apache.xpath.Expression extends java.lang.Object implements java.io.Serializable, org.apache.xpath.ExpressionNode, org.apache.xpath.XPathVisitable
{
    static final long serialVersionUID;
    private org.apache.xpath.ExpressionNode m_parent;

    public void <init>()
    {
        org.apache.xpath.Expression r0;

        r0 := @this: org.apache.xpath.Expression;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean canTraverseOutsideSubtree()
    {
        org.apache.xpath.Expression r0;

        r0 := @this: org.apache.xpath.Expression;

        return 0;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xpath.objects.XObject $r2;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        return $r2;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        int i0, i1;
        org.apache.xml.dtm.DTM r2;
        org.apache.xpath.objects.XObject $r3;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xml.dtm.DTM;

        i1 := @parameter3: int;

        $r3 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        return $r3;
    }

    public abstract org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException;

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        boolean z0;
        org.apache.xpath.objects.XObject $r2;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        z0 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        return $r2;
    }

    public double num(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.objects.XObject $r2;
        double $d0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $r2 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        $d0 = virtualinvoke $r2.<org.apache.xpath.objects.XObject: double num()>();

        return $d0;
    }

    public boolean bool(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.objects.XObject $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $r2 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        $z0 = virtualinvoke $r2.<org.apache.xpath.objects.XObject: boolean bool()>();

        return $z0;
    }

    public org.apache.xml.utils.XMLString xstr(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.objects.XObject $r2;
        org.apache.xml.utils.XMLString $r3;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $r2 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        return $r3;
    }

    public boolean isNodesetExpr()
    {
        org.apache.xpath.Expression r0;

        r0 := @this: org.apache.xpath.Expression;

        return 0;
    }

    public int asNode(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        org.apache.xml.dtm.DTMIterator r2;
        org.apache.xpath.objects.XObject $r3;
        int $i0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $r3 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        r2 = virtualinvoke $r3.<org.apache.xpath.objects.XObject: org.apache.xml.dtm.DTMIterator iter()>();

        $i0 = interfaceinvoke r2.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        return $i0;
    }

    public org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xml.dtm.DTMIterator r2;
        java.lang.Throwable r3, $r5;
        org.apache.xpath.objects.XObject $r4;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

     label1:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNodeAndExpression(int,int)>(i0, i0);

        $r4 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        r2 = virtualinvoke $r4.<org.apache.xpath.objects.XObject: org.apache.xml.dtm.DTMIterator iter()>();

     label2:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        return r2;

     label3:
        $r5 := @caughtexception;

        r3 = $r5;

     label4:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        throw r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.xml.dtm.DTMIterator asIteratorRaw(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xpath.objects.XNodeSet r2;
        org.apache.xml.dtm.DTMIterator r3;
        java.lang.Throwable r4, $r6;
        org.apache.xpath.objects.XObject $r5;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

     label1:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNodeAndExpression(int,int)>(i0, i0);

        $r5 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        r2 = (org.apache.xpath.objects.XNodeSet) $r5;

        r3 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

     label2:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        return r3;

     label3:
        $r6 := @caughtexception;

        r4 = $r6;

     label4:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNodeAndExpression()>();

        throw r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void executeCharsToContentHandler(org.apache.xpath.XPathContext, org.xml.sax.ContentHandler) throws javax.xml.transform.TransformerException, org.xml.sax.SAXException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        org.xml.sax.ContentHandler r2;
        org.apache.xpath.objects.XObject r3;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: org.xml.sax.ContentHandler;

        r3 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        virtualinvoke r3.<org.apache.xpath.objects.XObject: void dispatchCharactersEvents(org.xml.sax.ContentHandler)>(r2);

        virtualinvoke r3.<org.apache.xpath.objects.XObject: void detach()>();

        return;
    }

    public boolean isStableNumber()
    {
        org.apache.xpath.Expression r0;

        r0 := @this: org.apache.xpath.Expression;

        return 0;
    }

    public abstract void fixupVariables(java.util.Vector, int);

    public abstract boolean deepEquals(org.apache.xpath.Expression);

    protected final boolean isSameClass(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r0, r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.Expression;

        if null != r1 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public void warn(org.apache.xpath.XPathContext, java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        java.lang.String r2, r4;
        java.lang.Object[] r3;
        javax.xml.transform.ErrorListener r5;
        javax.xml.transform.TransformerException $r6;
        javax.xml.transform.SourceLocator $r7;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHWarning(java.lang.String,java.lang.Object[])>(r2, r3);

        if null == r1 goto label1;

        r5 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        $r6 = new javax.xml.transform.TransformerException;

        $r7 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.SourceLocator getSAXLocator()>();

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r4, $r7);

        interfaceinvoke r5.<javax.xml.transform.ErrorListener: void warning(javax.xml.transform.TransformerException)>($r6);

     label1:
        return;
    }

    public void assertion(boolean, java.lang.String)
    {
        org.apache.xpath.Expression r0;
        boolean z0;
        java.lang.String r1, r2;
        java.lang.Object[] $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: org.apache.xpath.Expression;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r1;

        r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_INCORRECT_PROGRAMMER_ASSERTION", $r3);

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>(r2);

        throw $r4;

     label1:
        return;
    }

    public void error(org.apache.xpath.XPathContext, java.lang.String, java.lang.Object[]) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.XPathContext r1;
        java.lang.String r2, r4;
        java.lang.Object[] r3;
        javax.xml.transform.ErrorListener r5;
        javax.xml.transform.TransformerException r6, $r7;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>(r2, r3);

        if null == r1 goto label1;

        r5 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        $r7 = new javax.xml.transform.TransformerException;

        specialinvoke $r7.<javax.xml.transform.TransformerException: void <init>(java.lang.String,javax.xml.transform.SourceLocator)>(r4, r0);

        r6 = $r7;

        interfaceinvoke r5.<javax.xml.transform.ErrorListener: void fatalError(javax.xml.transform.TransformerException)>(r6);

     label1:
        return;
    }

    public org.apache.xpath.ExpressionNode getExpressionOwner()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.Expression;

        r1 = virtualinvoke r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

     label1:
        if null == r1 goto label2;

        $z0 = r1 instanceof org.apache.xpath.Expression;

        if $z0 == 0 goto label2;

        r1 = interfaceinvoke r1.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

        goto label1;

     label2:
        return r1;
    }

    public void exprSetParent(org.apache.xpath.ExpressionNode)
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.ExpressionNode;

        if r1 == r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>($z0, "Can not parent an expression to itself!");

        r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent> = r1;

        return;
    }

    public org.apache.xpath.ExpressionNode exprGetParent()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode $r1;

        r0 := @this: org.apache.xpath.Expression;

        $r1 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        return $r1;
    }

    public void exprAddChild(org.apache.xpath.ExpressionNode, int)
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode r1;
        int i0;

        r0 := @this: org.apache.xpath.Expression;

        r1 := @parameter0: org.apache.xpath.ExpressionNode;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.xpath.Expression: void assertion(boolean,java.lang.String)>(0, "exprAddChild method not implemented!");

        return;
    }

    public org.apache.xpath.ExpressionNode exprGetChild(int)
    {
        org.apache.xpath.Expression r0;
        int i0;

        r0 := @this: org.apache.xpath.Expression;

        i0 := @parameter0: int;

        return null;
    }

    public int exprGetNumChildren()
    {
        org.apache.xpath.Expression r0;

        r0 := @this: org.apache.xpath.Expression;

        return 0;
    }

    public java.lang.String getPublicId()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.Expression;

        $r1 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        if null != $r1 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        $r3 = interfaceinvoke $r2.<org.apache.xpath.ExpressionNode: java.lang.String getPublicId()>();

        return $r3;
    }

    public java.lang.String getSystemId()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.Expression;

        $r1 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        if null != $r1 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        $r3 = interfaceinvoke $r2.<org.apache.xpath.ExpressionNode: java.lang.String getSystemId()>();

        return $r3;
    }

    public int getLineNumber()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xpath.Expression;

        $r1 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        if null != $r1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        $i0 = interfaceinvoke $r2.<org.apache.xpath.ExpressionNode: int getLineNumber()>();

        return $i0;
    }

    public int getColumnNumber()
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.ExpressionNode $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xpath.Expression;

        $r1 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        if null != $r1 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode m_parent>;

        $i0 = interfaceinvoke $r2.<org.apache.xpath.ExpressionNode: int getColumnNumber()>();

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.Expression: long serialVersionUID> = 565665869777906902L;

        return;
    }
}
