public class org.apache.xml.utils.DOMHelper extends java.lang.Object
{
    java.util.Hashtable m_NSInfos;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS;
    protected static final org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS;
    protected java.util.Vector m_candidateNoAncestorXMLNS;
    protected org.w3c.dom.Document m_DOMFactory;

    public void <init>()
    {
        org.apache.xml.utils.DOMHelper r0;
        java.util.Hashtable $r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS> = $r2;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = null;

        return;
    }

    public static org.w3c.dom.Document createDocument(boolean)
    {
        boolean z0;
        javax.xml.parsers.DocumentBuilderFactory r0;
        javax.xml.parsers.DocumentBuilder r1;
        org.w3c.dom.Document r2;
        javax.xml.parsers.ParserConfigurationException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        z0 := @parameter0: boolean;

     label1:
        r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        r1 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        r2 = virtualinvoke r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

     label2:
        return r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CREATEDOCUMENT_NOT_SUPPORTED", null);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }

    public static org.w3c.dom.Document createDocument()
    {
        org.w3c.dom.Document $r0;

        $r0 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Document createDocument(boolean)>(0);

        return $r0;
    }

    public boolean shouldStripSourceNode(org.w3c.dom.Node) throws javax.xml.transform.TransformerException
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        return 0;
    }

    public java.lang.String getUniqueID(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        java.lang.StringBuilder $r2, $r3, $r6;
        int $i0;
        java.lang.String $r4, $r5, $r7;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N");

        $i0 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static boolean isNodeAfter(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, r2, r3, r4, r5, r6, r7;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, i3, i4, i5;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        if r0 == r1 goto label01;

        $z1 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r0, r1);

        if $z1 == 0 goto label02;

     label01:
        return 1;

     label02:
        z0 = 1;

        r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r0);

        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        if r2 == r3 goto label03;

        $z2 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r3);

        if $z2 == 0 goto label04;

     label03:
        if null == r2 goto label19;

        z0 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r0, r1);

        goto label19;

     label04:
        i0 = 2;

        i1 = 2;

     label05:
        if r2 == null goto label06;

        i0 = i0 + 1;

        r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r2);

        goto label05;

     label06:
        if r3 == null goto label07;

        i1 = i1 + 1;

        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r3);

        goto label06;

     label07:
        r4 = r0;

        r5 = r1;

        if i0 >= i1 goto label10;

        i2 = i1 - i0;

        i3 = 0;

     label08:
        if i3 >= i2 goto label09;

        r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r5);

        i3 = i3 + 1;

        goto label08;

     label09:
        goto label12;

     label10:
        if i0 <= i1 goto label12;

        i4 = i0 - i1;

        i5 = 0;

     label11:
        if i5 >= i4 goto label12;

        r4 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r4);

        i5 = i5 + 1;

        goto label11;

     label12:
        r6 = null;

        r7 = null;

     label13:
        if null == r4 goto label19;

        if r4 == r5 goto label14;

        $z4 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r4, r5);

        if $z4 == 0 goto label18;

     label14:
        if null != r6 goto label17;

        if i0 >= i1 goto label15;

        $z3 = 1;

        goto label16;

     label15:
        $z3 = 0;

     label16:
        z0 = $z3;

        goto label19;

     label17:
        z0 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeAfterSibling(org.w3c.dom.Node,org.w3c.dom.Node,org.w3c.dom.Node)>(r4, r6, r7);

        goto label19;

     label18:
        r6 = r4;

        r4 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r4);

        r7 = r5;

        r5 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r5);

        goto label13;

     label19:
        return z0;
    }

    public static boolean isNodeTheSame(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1;
        boolean $z0, $z1, $z2, $z3;
        org.apache.xml.dtm.ref.DTMNodeProxy $r2, $r3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        $z0 = r0 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z0 == 0 goto label1;

        $z2 = r1 instanceof org.apache.xml.dtm.ref.DTMNodeProxy;

        if $z2 == 0 goto label1;

        $r3 = (org.apache.xml.dtm.ref.DTMNodeProxy) r0;

        $r2 = (org.apache.xml.dtm.ref.DTMNodeProxy) r1;

        $z3 = virtualinvoke $r3.<org.apache.xml.dtm.ref.DTMNodeProxy: boolean equals(org.w3c.dom.Node)>($r2);

        return $z3;

     label1:
        if r0 != r1 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    private static boolean isNodeAfterSibling(org.w3c.dom.Node, org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r1, r2, r4, r5;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, z7, z8;
        short s0, s1;
        org.w3c.dom.NamedNodeMap r3;
        int i2, i3;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: org.w3c.dom.Node;

        z0 = 0;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        s1 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if 2 == s0 goto label01;

        if 2 != s1 goto label01;

        z0 = 0;

        goto label19;

     label01:
        if 2 != s0 goto label02;

        if 2 == s1 goto label02;

        z0 = 1;

        goto label19;

     label02:
        if 2 != s0 goto label11;

        r3 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i2 = interfaceinvoke r3.<org.w3c.dom.NamedNodeMap: int getLength()>();

        z1 = 0;

        z2 = 0;

        i3 = 0;

     label03:
        if i3 >= i2 goto label10;

        r4 = interfaceinvoke r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        if r1 == r4 goto label04;

        $z5 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r4);

        if $z5 == 0 goto label06;

     label04:
        if z2 == 0 goto label05;

        z0 = 0;

        goto label10;

     label05:
        z1 = 1;

        goto label09;

     label06:
        if r2 == r4 goto label07;

        $z6 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r4);

        if $z6 == 0 goto label09;

     label07:
        if z1 == 0 goto label08;

        z0 = 1;

        goto label10;

     label08:
        z2 = 1;

     label09:
        i3 = i3 + 1;

        goto label03;

     label10:
        goto label19;

     label11:
        r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        z7 = 0;

        z8 = 0;

     label12:
        if null == r5 goto label19;

        if r1 == r5 goto label13;

        $z4 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r5);

        if $z4 == 0 goto label15;

     label13:
        if z8 == 0 goto label14;

        z0 = 0;

        goto label19;

     label14:
        z7 = 1;

        goto label18;

     label15:
        if r2 == r5 goto label16;

        $z3 = staticinvoke <org.apache.xml.utils.DOMHelper: boolean isNodeTheSame(org.w3c.dom.Node,org.w3c.dom.Node)>(r2, r5);

        if $z3 == 0 goto label18;

     label16:
        if z7 == 0 goto label17;

        z0 = 1;

        goto label19;

     label17:
        z8 = 1;

     label18:
        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label12;

     label19:
        return z0;
    }

    public short getLevel(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, $r2;
        short s0;
        int $i1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = 1;

     label1:
        $r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        r1 = $r2;

        if null == $r2 goto label2;

        $i1 = s0 + 1;

        s0 = (short) $i1;

        goto label1;

     label2:
        return s0;
    }

    public java.lang.String getNamespaceForPrefix(java.lang.String, org.w3c.dom.Element)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1, r4, r5, $r10;
        org.w3c.dom.Element r2, $r11;
        short s0, $s1;
        org.w3c.dom.Node r3;
        org.w3c.dom.Attr r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 = r2;

        r4 = null;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z0 == 0 goto label1;

        r4 = "http://www.w3.org/XML/1998/namespace";

        goto label8;

     label1:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label2;

        r4 = "http://www.w3.org/2000/xmlns/";

        goto label8;

     label2:
        if r1 != "" goto label3;

        $r10 = "xmlns";

        goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        r5 = $r10;

     label5:
        if null == r3 goto label8;

        if null != r4 goto label8;

        $s1 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        s0 = $s1;

        if $s1 == 1 goto label6;

        if s0 != 5 goto label8;

     label6:
        if s0 != 1 goto label7;

        $r11 = (org.w3c.dom.Element) r3;

        r6 = interfaceinvoke $r11.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r5);

        if r6 == null goto label7;

        r4 = interfaceinvoke r6.<org.w3c.dom.Attr: java.lang.String getNodeValue()>();

        goto label8;

     label7:
        r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r3);

        goto label5;

     label8:
        return r4;
    }

    public java.lang.String getNamespaceOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, r6, r9;
        java.lang.String r2, r5, r8, r10, $r45, $r47, r49;
        boolean z0, z1, z2, z3, z4, $z5, $z6, $z7, $z8, $z9;
        org.apache.xml.utils.NSInfo r3, $r13, $r14, $r19, $r20, $r25, $r26, $r29, $r38, $r43, $r44, $r48;
        short s0, s2;
        java.lang.Object r4, $r28, $r32, r50, r51;
        int i1, i3, $i4, $i6, $i7, i8, i9;
        org.w3c.dom.NamedNodeMap r7;
        java.util.Vector $r11, $r22, $r27, $r30, $r34, $r36, $r40;
        java.util.Hashtable $r12, $r17, $r21, $r23, $r31, $r33, $r39, $r42, $r46;
        char $c5;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 2 == s0 goto label05;

        $r46 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        r4 = virtualinvoke $r46.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1);

        if r4 != null goto label01;

        $r48 = null;

        goto label02;

     label01:
        $r48 = (org.apache.xml.utils.NSInfo) r4;

     label02:
        r3 = $r48;

        if r3 != null goto label03;

        $z9 = 0;

        goto label04;

     label03:
        $z9 = r3.<org.apache.xml.utils.NSInfo: boolean m_hasProcessedNS>;

     label04:
        z0 = $z9;

        goto label06;

     label05:
        z0 = 0;

        r3 = null;

     label06:
        if z0 == 0 goto label07;

        r2 = r3.<org.apache.xml.utils.NSInfo: java.lang.String m_namespace>;

        goto label40;

     label07:
        r2 = null;

        r49 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i1 = virtualinvoke r49.<java.lang.String: int indexOf(int)>(58);

        if 2 != s0 goto label09;

        if i1 <= 0 goto label08;

        r5 = virtualinvoke r49.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label12;

     label08:
        return r2;

     label09:
        if i1 < 0 goto label10;

        $r45 = virtualinvoke r49.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label11;

     label10:
        $r45 = "";

     label11:
        r5 = $r45;

     label12:
        z1 = 0;

        z2 = 0;

        $z5 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("xml");

        if $z5 == 0 goto label13;

        r2 = "http://www.w3.org/XML/1998/namespace";

        goto label36;

     label13:
        r6 = r1;

     label14:
        if null == r6 goto label31;

        if null != r2 goto label31;

        if null == r3 goto label15;

        $i7 = r3.<org.apache.xml.utils.NSInfo: int m_ancestorHasXMLNSAttrs>;

        if $i7 != 2 goto label15;

        goto label31;

     label15:
        s2 = interfaceinvoke r6.<org.w3c.dom.Node: short getNodeType()>();

        if null == r3 goto label16;

        $z8 = r3.<org.apache.xml.utils.NSInfo: boolean m_hasXMLNSAttrs>;

        if $z8 == 0 goto label26;

     label16:
        z3 = 0;

        if s2 != 1 goto label23;

        r7 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        i3 = 0;

     label17:
        $i6 = interfaceinvoke r7.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i3 >= $i6 goto label23;

        r9 = interfaceinvoke r7.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i3);

        r8 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $c5 = virtualinvoke r8.<java.lang.String: char charAt(int)>(0);

        if $c5 != 120 goto label22;

        z4 = virtualinvoke r8.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        $z6 = virtualinvoke r8.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z6 != 0 goto label18;

        if z4 == 0 goto label22;

     label18:
        if r1 != r6 goto label19;

        z2 = 1;

     label19:
        z3 = 1;

        z1 = 1;

        if z4 == 0 goto label20;

        $r47 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int)>(6);

        goto label21;

     label20:
        $r47 = "";

     label21:
        r10 = $r47;

        $z7 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z7 == 0 goto label22;

        r2 = interfaceinvoke r9.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        goto label23;

     label22:
        i3 = i3 + 1;

        goto label17;

     label23:
        if 2 == s2 goto label26;

        if null != r3 goto label26;

        if r1 == r6 goto label26;

        if z3 == 0 goto label24;

        $r44 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS>;

        goto label25;

     label24:
        $r44 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

     label25:
        r3 = $r44;

        $r42 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        virtualinvoke $r42.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r3);

     label26:
        if 2 != s2 goto label27;

        r6 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r6);

        goto label28;

     label27:
        $r36 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r36.<java.util.Vector: void addElement(java.lang.Object)>(r6);

        $r40 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r40.<java.util.Vector: void addElement(java.lang.Object)>(r3);

        r6 = interfaceinvoke r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label28:
        if null == r6 goto label14;

        $r39 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        r50 = virtualinvoke $r39.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r6);

        if r50 != null goto label29;

        $r43 = null;

        goto label30;

     label29:
        $r43 = (org.apache.xml.utils.NSInfo) r50;

     label30:
        r3 = $r43;

        goto label14;

     label31:
        $r11 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        i8 = virtualinvoke $r11.<java.util.Vector: int size()>();

        if i8 <= 0 goto label36;

        if 0 != z1 goto label35;

        if null != r6 goto label35;

        i9 = 0;

     label32:
        if i9 >= i8 goto label35;

        $r27 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $i4 = i9 + 1;

        r51 = virtualinvoke $r27.<java.util.Vector: java.lang.Object elementAt(int)>($i4);

        $r25 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS>;

        if r51 != $r25 goto label33;

        $r33 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r34 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r32 = virtualinvoke $r34.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r38 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS>;

        virtualinvoke $r33.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r38);

        goto label34;

     label33:
        $r26 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        if r51 != $r26 goto label34;

        $r31 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r30 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        $r28 = virtualinvoke $r30.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r29 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r31.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, $r29);

     label34:
        i9 = i9 + 2;

        goto label32;

     label35:
        $r22 = r0.<org.apache.xml.utils.DOMHelper: java.util.Vector m_candidateNoAncestorXMLNS>;

        virtualinvoke $r22.<java.util.Vector: void removeAllElements()>();

     label36:
        if 2 == s0 goto label40;

        if null != r2 goto label39;

        if z1 == 0 goto label38;

        if z2 == 0 goto label37;

        $r23 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r19 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS>;

        virtualinvoke $r23.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r19);

        goto label40;

     label37:
        $r21 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r20 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS>;

        virtualinvoke $r21.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r20);

        goto label40;

     label38:
        $r17 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r14 = <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS>;

        virtualinvoke $r17.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r14);

        goto label40;

     label39:
        $r12 = r0.<org.apache.xml.utils.DOMHelper: java.util.Hashtable m_NSInfos>;

        $r13 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r13.<org.apache.xml.utils.NSInfo: void <init>(java.lang.String,boolean)>(r2, z2);

        virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

     label40:
        return r2;
    }

    public java.lang.String getLocalNameOfNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        java.lang.String r2, $r3;
        int i0, $i1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if i0 >= 0 goto label1;

        $r3 = r2;

        goto label2;

     label1:
        $i1 = i0 + 1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r3;
    }

    public java.lang.String getExpandedElementName(org.w3c.dom.Element)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Element r1;
        java.lang.String r2, $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if null == r2 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

     label2:
        return $r3;
    }

    public java.lang.String getExpandedAttributeName(org.w3c.dom.Attr)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Attr r1;
        java.lang.String r2, $r3, $r7;
        java.lang.StringBuilder $r4, $r5, $r6, $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getNamespaceOfNode(org.w3c.dom.Node)>(r1);

        if null == r2 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r3 = virtualinvoke r0.<org.apache.xml.utils.DOMHelper: java.lang.String getLocalNameOfNode(org.w3c.dom.Node)>(r1);

     label2:
        return $r3;
    }

    public boolean isIgnorableWhitespace(org.w3c.dom.Text)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Text r1;
        boolean z0;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Text;

        z0 = 0;

        return z0;
    }

    public org.w3c.dom.Node getRoot(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 = null;

     label1:
        if r1 == null goto label2;

        r2 = r1;

        r1 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node)>(r1);

        goto label1;

     label2:
        return r2;
    }

    public org.w3c.dom.Node getRootNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1, $r2;
        short s0;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 9 == s0 goto label1;

        if 11 != s0 goto label2;

     label1:
        $r2 = r1;

        goto label3;

     label2:
        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label3:
        return $r2;
    }

    public boolean isNamespaceNode(org.w3c.dom.Node)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Node r1;
        java.lang.String r2;
        short $s0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if 2 != $s0 goto label4;

        r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        return 0;
    }

    public static org.w3c.dom.Node getParentOfNode(org.w3c.dom.Node) throws java.lang.RuntimeException
    {
        org.w3c.dom.Node r0, r8;
        org.w3c.dom.Element r1, r4;
        short s0;
        org.w3c.dom.Document r2;
        org.w3c.dom.DOMImplementation r3;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;
        boolean $z0;
        org.w3c.dom.Attr $r7;

        r0 := @parameter0: org.w3c.dom.Node;

        s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if 2 != s0 goto label3;

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r3 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.DOMImplementation getImplementation()>();

        if r3 == null goto label1;

        $z0 = interfaceinvoke r3.<org.w3c.dom.DOMImplementation: boolean hasFeature(java.lang.String,java.lang.String)>("Core", "2.0");

        if $z0 == 0 goto label1;

        $r7 = (org.w3c.dom.Attr) r0;

        r1 = interfaceinvoke $r7.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        return r1;

     label1:
        r4 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        if null != r4 goto label2;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHILD_HAS_NO_OWNER_DOCUMENT_ELEMENT", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        r8 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>(r4, r0);

        goto label4;

     label3:
        r8 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label4:
        return r8;
    }

    public org.w3c.dom.Element getElementByID(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1;
        org.w3c.dom.Document r2;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Document;

        return null;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String, org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        java.lang.String r1, r3, r7;
        org.w3c.dom.Document r2;
        org.w3c.dom.DocumentType r4;
        org.w3c.dom.NamedNodeMap r5;
        org.w3c.dom.Entity r6;
        org.w3c.dom.Node $r8;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.w3c.dom.Document;

        r3 = "";

        r4 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.DocumentType getDoctype()>();

        if null == r4 goto label3;

        r5 = interfaceinvoke r4.<org.w3c.dom.DocumentType: org.w3c.dom.NamedNodeMap getEntities()>();

        if null != r5 goto label1;

        return r3;

     label1:
        $r8 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r1);

        r6 = (org.w3c.dom.Entity) $r8;

        if null != r6 goto label2;

        return r3;

     label2:
        r7 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getNotationName()>();

        if null == r7 goto label3;

        r3 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getSystemId()>();

        if null != r3 goto label3;

        r3 = interfaceinvoke r6.<org.w3c.dom.Entity: java.lang.String getPublicId()>();

     label3:
        return r3;
    }

    private static org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element, org.w3c.dom.Node)
    {
        org.w3c.dom.Element r0, $r6;
        org.w3c.dom.Node r1, r2, r4;
        org.w3c.dom.Attr r3;
        java.lang.String $r5;
        short $s0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.w3c.dom.Node;

        r2 = null;

        $r5 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r3 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>($r5);

        if r3 != r1 goto label1;

        r2 = r0;

     label1:
        if null != r2 goto label4;

        r4 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label2:
        if null == r4 goto label4;

        $s0 = interfaceinvoke r4.<org.w3c.dom.Node: short getNodeType()>();

        if 1 != $s0 goto label3;

        $r6 = (org.w3c.dom.Element) r4;

        r2 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Node locateAttrParent(org.w3c.dom.Element,org.w3c.dom.Node)>($r6, r1);

        if null == r2 goto label3;

        goto label4;

     label3:
        r4 = interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label2;

     label4:
        return r2;
    }

    public void setDOMFactory(org.w3c.dom.Document)
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document r1;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        r1 := @parameter0: org.w3c.dom.Document;

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = r1;

        return;
    }

    public org.w3c.dom.Document getDOMFactory()
    {
        org.apache.xml.utils.DOMHelper r0;
        org.w3c.dom.Document $r1, $r2, $r3;

        r0 := @this: org.apache.xml.utils.DOMHelper;

        $r1 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        if null != $r1 goto label1;

        $r3 = staticinvoke <org.apache.xml.utils.DOMHelper: org.w3c.dom.Document createDocument()>();

        r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory> = $r3;

     label1:
        $r2 = r0.<org.apache.xml.utils.DOMHelper: org.w3c.dom.Document m_DOMFactory>;

        return $r2;
    }

    public static java.lang.String getNodeData(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0;
        org.apache.xml.utils.FastStringBuffer r1;
        java.lang.String r2, $r4;
        java.lang.Throwable r3, $r5;
        int $i0;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label1:
        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r0, r1);

        $i0 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: int length()>();

        if $i0 <= 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        goto label3;

     label2:
        $r4 = "";

     label3:
        r2 = $r4;

     label4:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r1);

        goto label7;

     label5:
        $r5 := @caughtexception;

        r3 = $r5;

     label6:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r1);

        throw r3;

     label7:
        return r2;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void getNodeData(org.w3c.dom.Node, org.apache.xml.utils.FastStringBuffer)
    {
        org.w3c.dom.Node r0, r2;
        org.apache.xml.utils.FastStringBuffer r1;
        short $s0;
        java.lang.String $r3, $r4;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: org.apache.xml.utils.FastStringBuffer;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label4;
            case 4: goto label4;
            case 5: goto label7;
            case 6: goto label7;
            case 7: goto label6;
            case 8: goto label7;
            case 9: goto label1;
            case 10: goto label7;
            case 11: goto label1;
            default: goto label7;
        };

     label1:
        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label2:
        if null == r2 goto label3;

        staticinvoke <org.apache.xml.utils.DOMHelper: void getNodeData(org.w3c.dom.Node,org.apache.xml.utils.FastStringBuffer)>(r2, r1);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label2;

     label3:
        goto label7;

     label4:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r3);

        goto label7;

     label5:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r4);

        goto label7;

     label6:
        goto label7;

     label7:
        return;
    }

    static void <clinit>()
    {
        org.apache.xml.utils.NSInfo $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r0.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithXMLNS> = $r0;

        $r1 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r1.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(0, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcWithoutXMLNS> = $r1;

        $r2 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r2.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(0, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoUnProcNoAncestorXMLNS> = $r2;

        $r3 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r3.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 1);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithXMLNS> = $r3;

        $r4 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r4.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean)>(1, 0);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullWithoutXMLNS> = $r4;

        $r5 = new org.apache.xml.utils.NSInfo;

        specialinvoke $r5.<org.apache.xml.utils.NSInfo: void <init>(boolean,boolean,int)>(1, 0, 2);

        <org.apache.xml.utils.DOMHelper: org.apache.xml.utils.NSInfo m_NSInfoNullNoAncestorXMLNS> = $r5;

        return;
    }
}
