class org.apache.xpath.objects.NotEqualComparator extends org.apache.xpath.objects.Comparator
{

    void <init>()
    {
        org.apache.xpath.objects.NotEqualComparator r0;

        r0 := @this: org.apache.xpath.objects.NotEqualComparator;

        specialinvoke r0.<org.apache.xpath.objects.Comparator: void <init>()>();

        return;
    }

    boolean compareStrings(org.apache.xml.utils.XMLString, org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.NotEqualComparator r0;
        org.apache.xml.utils.XMLString r1, r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.objects.NotEqualComparator;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        r2 := @parameter1: org.apache.xml.utils.XMLString;

        $z0 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: boolean equals(org.apache.xml.utils.XMLString)>(r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    boolean compareNumbers(double, double)
    {
        org.apache.xpath.objects.NotEqualComparator r0;
        double d0, d1;
        byte $b0;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.NotEqualComparator;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
