public class org.apache.xalan.templates.ElemExtensionDecl extends org.apache.xalan.templates.ElemTemplateElement
{
    static final long serialVersionUID;
    private java.lang.String m_prefix;
    private org.apache.xml.utils.StringVector m_functions;
    private org.apache.xml.utils.StringVector m_elements;

    public void <init>()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix> = null;

        $r1 = new org.apache.xml.utils.StringVector;

        specialinvoke $r1.<org.apache.xml.utils.StringVector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions> = $r1;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements> = null;

        return;
    }

    public void setPrefix(java.lang.String)
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        java.lang.String r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix> = r1;

        return;
    }

    public java.lang.String getPrefix()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix>;

        return $r1;
    }

    public void setFunctions(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions> = r1;

        return;
    }

    public org.apache.xml.utils.StringVector getFunctions()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        return $r1;
    }

    public java.lang.String getFunction(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int i0;
        org.apache.xml.utils.StringVector $r1, $r2;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        if null != $r1 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getFunctionCount()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void setElements(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements> = r1;

        return;
    }

    public org.apache.xml.utils.StringVector getElements()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        return $r1;
    }

    public java.lang.String getElement(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int i0;
        org.apache.xml.utils.StringVector $r1, $r2;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        if null != $r1 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getElementCount()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        return 85;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.lang.String r2, r3, r4, r5, r6, $r17, $r21, $r22, $r23, $r25, r29;
        org.apache.xalan.templates.ElemTemplateElement r7, r9;
        org.apache.xalan.templates.ElemExtensionScript r8;
        org.apache.xalan.templates.ElemTextLiteral r10;
        char[] r11;
        boolean $z0, $z1;
        java.util.Vector $r12, $r18;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xml.utils.StringVector $r13, $r15;
        java.lang.Object[] $r14, $r19, $r24, r30;
        org.apache.xalan.extensions.ExtensionNamespaceSupport $r16, r27;
        javax.xml.transform.TransformerException $r20, $r26;
        org.apache.xalan.extensions.ExtensionNamespacesManager r28;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String getPrefix()>();

        r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String getNamespaceForPrefix(java.lang.String)>(r2);

        r4 = null;

        r5 = null;

        r6 = null;

        if null != r3 goto label01;

        $r26 = new javax.xml.transform.TransformerException;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r2;

        $r25 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_NAMESPACE_DECL", $r24);

        specialinvoke $r26.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r25);

        throw $r26;

     label01:
        r7 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

     label02:
        if r7 == null goto label04;

        $i2 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 86 != $i2 goto label03;

        r8 = (org.apache.xalan.templates.ElemExtensionScript) r7;

        r4 = virtualinvoke r8.<org.apache.xalan.templates.ElemExtensionScript: java.lang.String getLang()>();

        r5 = virtualinvoke r8.<org.apache.xalan.templates.ElemExtensionScript: java.lang.String getSrc()>();

        r9 = virtualinvoke r8.<org.apache.xalan.templates.ElemExtensionScript: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        if null == r9 goto label03;

        $i3 = virtualinvoke r9.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 78 != $i3 goto label03;

        r10 = (org.apache.xalan.templates.ElemTextLiteral) r9;

        r11 = virtualinvoke r10.<org.apache.xalan.templates.ElemTextLiteral: char[] getChars()>();

        $r22 = new java.lang.String;

        specialinvoke $r22.<java.lang.String: void <init>(char[])>(r11);

        r6 = $r22;

        $r23 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>();

        $i4 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i4 != 0 goto label03;

        r6 = null;

     label03:
        r7 = virtualinvoke r7.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        goto label02;

     label04:
        if null != r4 goto label05;

        r4 = "javaclass";

     label05:
        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("javaclass");

        if $z0 == 0 goto label06;

        if r6 == null goto label06;

        $r20 = new javax.xml.transform.TransformerException;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r6;

        $r21 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ELEM_CONTENT_NOT_ALLOWED", $r19);

        specialinvoke $r20.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label06:
        r27 = null;

        r28 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        $r12 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector getExtensions()>();

        $i0 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r3, $r12);

        if $i0 != -1 goto label09;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("javaclass");

        if $z1 == 0 goto label08;

        if null != r5 goto label07;

        r27 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String)>(r3);

        goto label09;

     label07:
        $r18 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector getExtensions()>();

        $i1 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r5, $r18);

        if $i1 != -1 goto label09;

        r27 = virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String,java.lang.String)>(r3, r5);

        goto label09;

     label08:
        r29 = "org.apache.xalan.extensions.ExtensionHandlerGeneral";

        $r14 = newarray (java.lang.Object)[7];

        $r14[0] = r3;

        $r13 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $r14[1] = $r13;

        $r15 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $r14[2] = $r15;

        $r14[3] = r4;

        $r14[4] = r5;

        $r14[5] = r6;

        $r17 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String getSystemId()>();

        $r14[6] = $r17;

        r30 = $r14;

        $r16 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        specialinvoke $r16.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r3, r29, r30);

        r27 = $r16;

     label09:
        if r27 == null goto label10;

        virtualinvoke r28.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(org.apache.xalan.extensions.ExtensionNamespaceSupport)>(r27);

     label10:
        return;
    }

    public void runtimeInit(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xalan.transformer.TransformerImpl r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemExtensionDecl: long serialVersionUID> = -4692738885172766789L;

        return;
    }
}
