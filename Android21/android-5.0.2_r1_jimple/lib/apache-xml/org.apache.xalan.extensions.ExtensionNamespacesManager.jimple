public class org.apache.xalan.extensions.ExtensionNamespacesManager extends java.lang.Object
{
    private java.util.Vector m_extensions;
    private java.util.Vector m_predefExtensions;
    private java.util.Vector m_unregisteredExtensions;

    public void <init>()
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.util.Vector $r1, $r2, $r3;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(7);

        r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions> = $r3;

        specialinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: void setPredefinedNamespaces()>();

        return;
    }

    public void registerExtension(java.lang.String)
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.lang.String r1;
        int i0, $i1;
        java.util.Vector $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        java.lang.Object $r8;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        $i1 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r1, $r2);

        if $i1 != -1 goto label2;

        $r3 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        i0 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r1, $r3);

        if i0 == -1 goto label1;

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r8 = virtualinvoke $r6.<java.util.Vector: java.lang.Object get(int)>(i0);

        virtualinvoke $r7.<java.util.Vector: boolean add(java.lang.Object)>($r8);

        goto label2;

     label1:
        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        $z0 = virtualinvoke $r4.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r5 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void registerExtension(org.apache.xalan.extensions.ExtensionNamespaceSupport)
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r1;
        java.lang.String r2;
        java.util.Vector $r3, $r4, $r5, $r6;
        int $i0;
        boolean $z1;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 := @parameter0: org.apache.xalan.extensions.ExtensionNamespaceSupport;

        r2 = virtualinvoke r1.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String getNamespace()>();

        $r3 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        $i0 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r2, $r3);

        if $i0 != -1 goto label1;

        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        virtualinvoke $r4.<java.util.Vector: boolean add(java.lang.Object)>(r1);

        $r5 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        $z1 = virtualinvoke $r5.<java.util.Vector: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        virtualinvoke $r6.<java.util.Vector: boolean remove(java.lang.Object)>(r2);

     label1:
        return;
    }

    public int namespaceIndex(java.lang.String, java.util.Vector)
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.lang.String r1, $r5;
        java.util.Vector r2;
        int i0, $i1;
        java.lang.Object $r3;
        org.apache.xalan.extensions.ExtensionNamespaceSupport $r4;
        boolean $z0;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Vector;

        i0 = 0;

     label1:
        $i1 = virtualinvoke r2.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label3;

        $r3 = virtualinvoke r2.<java.util.Vector: java.lang.Object get(int)>(i0);

        $r4 = (org.apache.xalan.extensions.ExtensionNamespaceSupport) $r3;

        $r5 = virtualinvoke $r4.<org.apache.xalan.extensions.ExtensionNamespaceSupport: java.lang.String getNamespace()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public java.util.Vector getExtensions()
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.util.Vector $r1;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        $r1 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        return $r1;
    }

    public void registerUnregisteredNamespaces()
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        int i0, $i1;
        java.lang.String r1;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r2;
        java.util.Vector $r3, $r4, $r6;
        java.lang.Object $r5;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        i0 = 0;

     label1:
        $r3 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        $i1 = virtualinvoke $r3.<java.util.Vector: int size()>();

        if i0 >= $i1 goto label3;

        $r4 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_unregisteredExtensions>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>(i0);

        r1 = (java.lang.String) $r5;

        r2 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String)>(r1);

        if r2 == null goto label2;

        $r6 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_extensions>;

        virtualinvoke $r6.<java.util.Vector: boolean add(java.lang.Object)>(r2);

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return;
    }

    public org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String)
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.lang.String r1;
        org.apache.xalan.extensions.ExtensionNamespaceSupport $r2;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String,java.lang.String)>(r1, r1);

        return $r2;
    }

    public org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String, java.lang.String)
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.lang.String r1, r2, r3, $r5, $r6, $r16;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        org.apache.xalan.extensions.ExtensionNamespaceSupport $r8, $r10;
        java.lang.Object[] $r9, $r13;
        java.lang.ClassNotFoundException $r11;
        java.lang.StringBuilder $r12, $r14, $r15;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if null == r1 goto label1;

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

     label1:
        return null;

     label2:
        r3 = r2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("class:");

        if $z0 == 0 goto label3;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(6);

     label3:
        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if -1 == i0 goto label4;

        $i3 = i0 + 1;

        r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i3);

     label4:
        if null == r3 goto label5;

        $r6 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i2 != 0 goto label6;

     label5:
        return null;

     label6:
        staticinvoke <org.apache.xalan.extensions.ExtensionHandler: java.lang.Class getClassForName(java.lang.String)>(r3);

        $r8 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r1;

        $r9[1] = "javaclass";

        $r9[2] = r3;

        specialinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r1, "org.apache.xalan.extensions.ExtensionHandlerJavaClass", $r9);

     label7:
        return $r8;

     label8:
        $r11 := @caughtexception;

        $r10 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r1;

        $r13[1] = "javapackage";

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[2] = $r16;

        specialinvoke $r10.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r1, "org.apache.xalan.extensions.ExtensionHandlerJavaPackage", $r13);

        return $r10;

        catch java.lang.ClassNotFoundException from label6 to label7 with label8;
    }

    private void setPredefinedNamespaces()
    {
        org.apache.xalan.extensions.ExtensionNamespacesManager r0;
        java.lang.String r1, r2, r3, r4, r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71;
        org.apache.xalan.extensions.ExtensionNamespaceSupport $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r28, $r31, $r34, $r37, $r40, $r43, $r46;
        java.lang.Object[] $r6, $r9, $r12, $r16, $r19, $r22, $r25, $r26, $r29, $r32, $r35, $r39, $r42, $r45;
        java.util.Vector $r7, $r10, $r13, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r38, $r41, $r44;

        r0 := @this: org.apache.xalan.extensions.ExtensionNamespacesManager;

        r1 = "http://xml.apache.org/xalan/java";

        r2 = "org.apache.xalan.extensions.ExtensionHandlerJavaPackage";

        r3 = "javapackage";

        r4 = "";

        $r7 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r5 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = r1;

        $r6[1] = r3;

        $r6[2] = r4;

        specialinvoke $r5.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r1, r2, $r6);

        virtualinvoke $r7.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        r47 = "http://xml.apache.org/xslt/java";

        $r10 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r8 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r47;

        $r9[1] = r3;

        $r9[2] = r4;

        specialinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r47, r2, $r9);

        virtualinvoke $r10.<java.util.Vector: boolean add(java.lang.Object)>($r8);

        r48 = "http://xsl.lotus.com/java";

        $r13 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r11 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r12 = newarray (java.lang.Object)[3];

        $r12[0] = r48;

        $r12[1] = r3;

        $r12[2] = r4;

        specialinvoke $r11.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r48, r2, $r12);

        virtualinvoke $r13.<java.util.Vector: boolean add(java.lang.Object)>($r11);

        r49 = "http://xml.apache.org/xalan";

        r50 = "org.apache.xalan.extensions.ExtensionHandlerJavaClass";

        r51 = "javaclass";

        r52 = "org.apache.xalan.lib.Extensions";

        $r15 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r14 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r16 = newarray (java.lang.Object)[3];

        $r16[0] = r49;

        $r16[1] = r51;

        $r16[2] = r52;

        specialinvoke $r14.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r49, r50, $r16);

        virtualinvoke $r15.<java.util.Vector: boolean add(java.lang.Object)>($r14);

        r53 = "http://xml.apache.org/xslt";

        $r18 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r17 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r19 = newarray (java.lang.Object)[3];

        $r19[0] = r53;

        $r19[1] = r51;

        $r19[2] = r52;

        specialinvoke $r17.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r53, r50, $r19);

        virtualinvoke $r18.<java.util.Vector: boolean add(java.lang.Object)>($r17);

        r54 = "http://xml.apache.org/xalan/redirect";

        r55 = "org.apache.xalan.lib.Redirect";

        $r21 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r20 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r22 = newarray (java.lang.Object)[3];

        $r22[0] = r54;

        $r22[1] = r51;

        $r22[2] = r55;

        specialinvoke $r20.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r54, r50, $r22);

        virtualinvoke $r21.<java.util.Vector: boolean add(java.lang.Object)>($r20);

        r56 = "http://xml.apache.org/xalan/PipeDocument";

        r57 = "org.apache.xalan.lib.PipeDocument";

        $r24 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r23 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r25 = newarray (java.lang.Object)[3];

        $r25[0] = r56;

        $r25[1] = r51;

        $r25[2] = r57;

        specialinvoke $r23.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r56, r50, $r25);

        virtualinvoke $r24.<java.util.Vector: boolean add(java.lang.Object)>($r23);

        r58 = "http://xml.apache.org/xalan/sql";

        r59 = "org.apache.xalan.lib.sql.XConnection";

        $r27 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r28 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r26 = newarray (java.lang.Object)[3];

        $r26[0] = r58;

        $r26[1] = r51;

        $r26[2] = r59;

        specialinvoke $r28.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r58, r50, $r26);

        virtualinvoke $r27.<java.util.Vector: boolean add(java.lang.Object)>($r28);

        r60 = "http://exslt.org/common";

        r61 = "org.apache.xalan.lib.ExsltCommon";

        $r30 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r31 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r29 = newarray (java.lang.Object)[3];

        $r29[0] = r60;

        $r29[1] = r51;

        $r29[2] = r61;

        specialinvoke $r31.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r60, r50, $r29);

        virtualinvoke $r30.<java.util.Vector: boolean add(java.lang.Object)>($r31);

        r62 = "http://exslt.org/math";

        r63 = "org.apache.xalan.lib.ExsltMath";

        $r33 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r34 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r32 = newarray (java.lang.Object)[3];

        $r32[0] = r62;

        $r32[1] = r51;

        $r32[2] = r63;

        specialinvoke $r34.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r62, r50, $r32);

        virtualinvoke $r33.<java.util.Vector: boolean add(java.lang.Object)>($r34);

        r64 = "http://exslt.org/sets";

        r65 = "org.apache.xalan.lib.ExsltSets";

        $r36 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r37 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r35 = newarray (java.lang.Object)[3];

        $r35[0] = r64;

        $r35[1] = r51;

        $r35[2] = r65;

        specialinvoke $r37.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r64, r50, $r35);

        virtualinvoke $r36.<java.util.Vector: boolean add(java.lang.Object)>($r37);

        r66 = "http://exslt.org/dates-and-times";

        r67 = "org.apache.xalan.lib.ExsltDatetime";

        $r38 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r40 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r39 = newarray (java.lang.Object)[3];

        $r39[0] = r66;

        $r39[1] = r51;

        $r39[2] = r67;

        specialinvoke $r40.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r66, r50, $r39);

        virtualinvoke $r38.<java.util.Vector: boolean add(java.lang.Object)>($r40);

        r68 = "http://exslt.org/dynamic";

        r69 = "org.apache.xalan.lib.ExsltDynamic";

        $r41 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r43 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r42 = newarray (java.lang.Object)[3];

        $r42[0] = r68;

        $r42[1] = r51;

        $r42[2] = r69;

        specialinvoke $r43.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r68, r50, $r42);

        virtualinvoke $r41.<java.util.Vector: boolean add(java.lang.Object)>($r43);

        r70 = "http://exslt.org/strings";

        r71 = "org.apache.xalan.lib.ExsltStrings";

        $r44 = r0.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector m_predefExtensions>;

        $r46 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        $r45 = newarray (java.lang.Object)[3];

        $r45[0] = r70;

        $r45[1] = r51;

        $r45[2] = r71;

        specialinvoke $r46.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>(r70, r50, $r45);

        virtualinvoke $r44.<java.util.Vector: boolean add(java.lang.Object)>($r46);

        return;
    }
}
