public class org.apache.xpath.NodeSetDTM extends org.apache.xml.utils.NodeVector implements org.apache.xml.dtm.DTMIterator, java.lang.Cloneable
{
    static final long serialVersionUID;
    org.apache.xml.dtm.DTMManager m_manager;
    protected transient int m_next;
    protected transient boolean m_mutable;
    protected transient boolean m_cacheNodes;
    protected int m_root;
    private transient int m_last;

    public void <init>(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = r1;

        return;
    }

    public void <init>(int, int, org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.dtm.DTMManager;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>(int)>(i0);

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = r1;

        return;
    }

    public void <init>(org.apache.xpath.NodeSetDTM)
    {
        org.apache.xpath.NodeSetDTM r0, r1;
        org.apache.xml.dtm.DTMManager $r2;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xpath.NodeSetDTM;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        $r2 = virtualinvoke r1.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = $r2;

        $i0 = virtualinvoke r1.<org.apache.xpath.NodeSetDTM: int getRoot()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = $i0;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addNodes(org.apache.xml.dtm.DTMIterator)>(r1);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.dtm.DTMIterator r1;
        org.apache.xml.dtm.DTMManager $r2;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        $r2 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = $r2;

        $i0 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: int getRoot()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = $i0;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addNodes(org.apache.xml.dtm.DTMIterator)>(r1);

        return;
    }

    public void <init>(org.w3c.dom.traversal.NodeIterator, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.w3c.dom.traversal.NodeIterator r1;
        org.apache.xpath.XPathContext r2;
        org.w3c.dom.Node r3, $r5;
        int i0;
        org.apache.xml.dtm.DTMManager $r4;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        $r4 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = $r4;

     label1:
        $r5 = interfaceinvoke r1.<org.w3c.dom.traversal.NodeIterator: org.w3c.dom.Node nextNode()>();

        r3 = $r5;

        if null == $r5 goto label2;

        i0 = virtualinvoke r2.<org.apache.xpath.XPathContext: int getDTMHandleFromNode(org.w3c.dom.Node)>(r3);

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int addNodeInDocOrder(int,org.apache.xpath.XPathContext)>(i0, r2);

        goto label1;

     label2:
        return;
    }

    public void <init>(org.w3c.dom.NodeList, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.w3c.dom.NodeList r1;
        org.apache.xpath.XPathContext r2;
        int i0, i1, i2;
        org.w3c.dom.Node r3;
        org.apache.xml.dtm.DTMManager $r4;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.w3c.dom.NodeList;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        $r4 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = $r4;

        i0 = interfaceinvoke r1.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r3 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        i2 = virtualinvoke r2.<org.apache.xpath.XPathContext: int getDTMHandleFromNode(org.w3c.dom.Node)>(r3);

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addNode(int)>(i2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(int, org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.dtm.DTMManager;

        specialinvoke r0.<org.apache.xml.utils.NodeVector: void <init>()>();

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_root> = -1;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = 0;

        r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager> = r1;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addNode(int)>(i0);

        return;
    }

    public void setEnvironment(java.lang.Object)
    {
        org.apache.xpath.NodeSetDTM r0;
        java.lang.Object r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    public int getRoot()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i0 = r0.<org.apache.xpath.NodeSetDTM: int m_root>;

        if -1 != $i0 goto label2;

        $i2 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int size()>();

        if $i2 <= 0 goto label1;

        $i3 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int item(int)>(0);

        return $i3;

     label1:
        return -1;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSetDTM: int m_root>;

        return $i1;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.NodeSetDTM r0, r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $r2 = specialinvoke r0.<org.apache.xml.utils.NodeVector: java.lang.Object clone()>();

        r1 = (org.apache.xpath.NodeSetDTM) $r2;

        return r1;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.NodeSetDTM r0, r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $r2 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: java.lang.Object clone()>();

        r1 = (org.apache.xpath.NodeSetDTM) $r2;

        virtualinvoke r1.<org.apache.xpath.NodeSetDTM: void reset()>();

        return r1;
    }

    public void reset()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = 0;

        return;
    }

    public int getWhatToShow()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return -17;
    }

    public org.apache.xml.dtm.DTMFilter getFilter()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return null;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return 1;
    }

    public org.apache.xml.dtm.DTM getDTM(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        org.apache.xml.dtm.DTMManager $r1;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        return $r2;
    }

    public org.apache.xml.dtm.DTMManager getDTMManager()
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.dtm.DTMManager $r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $r1 = r0.<org.apache.xpath.NodeSetDTM: org.apache.xml.dtm.DTMManager m_manager>;

        return $r1;
    }

    public int nextNode()
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i1 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i2 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int size()>();

        if $i1 >= $i2 goto label1;

        $i3 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        i0 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int elementAt(int)>($i3);

        $i4 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i5 = $i4 + 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = $i5;

        return i0;

     label1:
        return -1;
    }

    public int previousNode()
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_CANNOT_ITERATE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $i0 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i1 = $i0 - 1;

        if $i1 <= 0 goto label2;

        $i2 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i3 = $i2 - 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = $i3;

        $i4 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i5 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int elementAt(int)>($i4);

        return $i5;

     label2:
        return -1;
    }

    public void detach()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return;
    }

    public void allowDetachToRelease(boolean)
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean z0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean isFresh()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i0 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void runTo(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_CANNOT_INDEX", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        if i0 < 0 goto label2;

        $i4 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i3 = r0.<org.apache.xpath.NodeSetDTM: int m_firstFree>;

        if $i4 >= $i3 goto label2;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = i0;

        goto label3;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSetDTM: int m_firstFree>;

        $i2 = $i1 - 1;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = $i2;

     label3:
        return;
    }

    public int item(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(i0);

        $i1 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int elementAt(int)>(i0);

        return $i1;
    }

    public int getLength()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(-1);

        $i0 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int size()>();

        return $i0;
    }

    public void addNode(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addElement(int)>(i0);

        return;
    }

    public void insertNode(int, int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void insertElementAt(int,int)>(i0, i1);

        return;
    }

    public void removeNode(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: boolean removeElement(int)>(i0);

        return;
    }

    public void addNodes(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.dtm.DTMIterator r1;
        int i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        if null == r1 goto label3;

     label2:
        $i1 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i0 = $i1;

        if -1 == $i1 goto label3;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addElement(int)>(i0);

        goto label2;

     label3:
        return;
    }

    public void addNodesInDocOrder(org.apache.xml.dtm.DTMIterator, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.dtm.DTMIterator r1;
        org.apache.xpath.XPathContext r2;
        int i0, $i1;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $i1 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i0 = $i1;

        if -1 == $i1 goto label2;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int addNodeInDocOrder(int,org.apache.xpath.XPathContext)>(i0, r2);

        goto label1;

     label2:
        return;
    }

    public int addNodeInDocOrder(int, boolean, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1, i2, i3, i4, i5;
        boolean z0, $z1, $z2, z3;
        org.apache.xpath.XPathContext r1;
        org.apache.xml.dtm.DTM r2;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.apache.xpath.XPathContext;

        $z1 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z1 != 0 goto label01;

        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label01:
        i1 = -1;

        if z0 == 0 goto label07;

        i2 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int size()>();

        i3 = i2 - 1;

     label02:
        if i3 < 0 goto label05;

        i4 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int elementAt(int)>(i3);

        if i4 != i0 goto label03;

        i3 = -2;

        goto label05;

     label03:
        r2 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $z2 = interfaceinvoke r2.<org.apache.xml.dtm.DTM: boolean isNodeAfter(int,int)>(i0, i4);

        if $z2 != 0 goto label04;

        goto label05;

     label04:
        i3 = i3 + -1;

        goto label02;

     label05:
        if i3 == -2 goto label06;

        i1 = i3 + 1;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void insertElementAt(int,int)>(i0, i1);

     label06:
        goto label11;

     label07:
        i1 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int size()>();

        z3 = 0;

        i5 = 0;

     label08:
        if i5 >= i1 goto label10;

        if i5 != i0 goto label09;

        z3 = 1;

        goto label10;

     label09:
        i5 = i5 + 1;

        goto label08;

     label10:
        if z3 != 0 goto label11;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void addElement(int)>(i0);

     label11:
        return i1;
    }

    public int addNodeInDocOrder(int, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1;
        org.apache.xpath.XPathContext r1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xpath.XPathContext;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $i1 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int addNodeInDocOrder(int,boolean,org.apache.xpath.XPathContext)>(i0, 1, r1);

        return $i1;
    }

    public int size()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i0 = specialinvoke r0.<org.apache.xml.utils.NodeVector: int size()>();

        return $i0;
    }

    public void addElement(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void addElement(int)>(i0);

        return;
    }

    public void insertElementAt(int, int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void insertElementAt(int,int)>(i0, i1);

        return;
    }

    public void appendNodes(org.apache.xml.utils.NodeVector)
    {
        org.apache.xpath.NodeSetDTM r0;
        org.apache.xml.utils.NodeVector r1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        r1 := @parameter0: org.apache.xml.utils.NodeVector;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void appendNodes(org.apache.xml.utils.NodeVector)>(r1);

        return;
    }

    public void removeAllElements()
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void removeAllElements()>();

        return;
    }

    public boolean removeElement(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0, $z1;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $z1 = specialinvoke r0.<org.apache.xml.utils.NodeVector: boolean removeElement(int)>(i0);

        return $z1;
    }

    public void removeElementAt(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void removeElementAt(int)>(i0);

        return;
    }

    public void setElementAt(int, int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void setElementAt(int,int)>(i0, i1);

        return;
    }

    public void setItem(int, int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_NOT_MUTABLE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        specialinvoke r0.<org.apache.xml.utils.NodeVector: void setElementAt(int,int)>(i0, i1);

        return;
    }

    public int elementAt(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(i0);

        $i1 = specialinvoke r0.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i0);

        return $i1;
    }

    public boolean contains(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(-1);

        $z0 = specialinvoke r0.<org.apache.xml.utils.NodeVector: boolean contains(int)>(i0);

        return $z0;
    }

    public int indexOf(int, int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(-1);

        $i2 = specialinvoke r0.<org.apache.xml.utils.NodeVector: int indexOf(int,int)>(i0, i1);

        return $i2;
    }

    public int indexOf(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, $i1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.NodeSetDTM: void runTo(int)>(-1);

        $i1 = specialinvoke r0.<org.apache.xml.utils.NodeVector: int indexOf(int)>(i0);

        return $i1;
    }

    public int getCurrentPos()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i0 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        return $i0;
    }

    public void setCurrentPos(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESETDTM_CANNOT_INDEX", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.xpath.NodeSetDTM: int m_next> = i0;

        return;
    }

    public int getCurrentNode()
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.lang.RuntimeException $r1;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("This NodeSetDTM can not do indexing or counting functions!");

        throw $r1;

     label1:
        i0 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i3 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        if $i3 <= 0 goto label2;

        $i6 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

        $i7 = $i6 - 1;

        goto label3;

     label2:
        $i7 = r0.<org.apache.xpath.NodeSetDTM: int m_next>;

     label3:
        i1 = $i7;

        $i4 = r0.<org.apache.xpath.NodeSetDTM: int m_firstFree>;

        if i1 >= $i4 goto label4;

        $i5 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: int elementAt(int)>(i1);

        goto label5;

     label4:
        $i5 = -1;

     label5:
        i2 = $i5;

        r0.<org.apache.xpath.NodeSetDTM: int m_next> = i0;

        return i2;
    }

    public boolean getShouldCacheNodes()
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes>;

        return $z0;
    }

    public void setShouldCacheNodes(boolean)
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean z0, $z1;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.apache.xpath.NodeSetDTM: boolean isFresh()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_CANNOT_CALL_SETSHOULDCACHENODE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.xpath.NodeSetDTM: boolean m_cacheNodes> = z0;

        r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable> = 1;

        return;
    }

    public boolean isMutable()
    {
        org.apache.xpath.NodeSetDTM r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $z0 = r0.<org.apache.xpath.NodeSetDTM: boolean m_mutable>;

        return $z0;
    }

    public int getLast()
    {
        org.apache.xpath.NodeSetDTM r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        $i0 = r0.<org.apache.xpath.NodeSetDTM: int m_last>;

        return $i0;
    }

    public void setLast(int)
    {
        org.apache.xpath.NodeSetDTM r0;
        int i0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        i0 := @parameter0: int;

        r0.<org.apache.xpath.NodeSetDTM: int m_last> = i0;

        return;
    }

    public boolean isDocOrdered()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return 1;
    }

    public int getAxis()
    {
        org.apache.xpath.NodeSetDTM r0;

        r0 := @this: org.apache.xpath.NodeSetDTM;

        return -1;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.NodeSetDTM: long serialVersionUID> = 7686480133331317070L;

        return;
    }
}
