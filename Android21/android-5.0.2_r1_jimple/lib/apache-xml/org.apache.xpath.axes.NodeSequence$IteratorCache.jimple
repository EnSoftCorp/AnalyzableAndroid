final class org.apache.xpath.axes.NodeSequence$IteratorCache extends java.lang.Object
{
    private org.apache.xml.utils.NodeVector m_vec2;
    private boolean m_isComplete2;
    private int m_useCount2;

    void <init>()
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector m_vec2> = null;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: boolean m_isComplete2> = 0;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int m_useCount2> = 1;

        return;
    }

    private int useCount()
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int m_useCount2>;

        return $i0;
    }

    private void increaseUseCount()
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        org.apache.xml.utils.NodeVector $r1;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector m_vec2>;

        if $r1 == null goto label1;

        $i0 = r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int m_useCount2>;

        $i1 = $i0 + 1;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int m_useCount2> = $i1;

     label1:
        return;
    }

    private void setVector(org.apache.xml.utils.NodeVector)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        org.apache.xml.utils.NodeVector r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        r1 := @parameter0: org.apache.xml.utils.NodeVector;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector m_vec2> = r1;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int m_useCount2> = 1;

        return;
    }

    private org.apache.xml.utils.NodeVector getVector()
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        org.apache.xml.utils.NodeVector $r1;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $r1 = r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector m_vec2>;

        return $r1;
    }

    private void setCacheComplete(boolean)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        z0 := @parameter0: boolean;

        r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: boolean m_isComplete2> = z0;

        return;
    }

    private boolean isComplete()
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $z0 = r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: boolean m_isComplete2>;

        return $z0;
    }

    static org.apache.xml.utils.NodeVector access$000(org.apache.xpath.axes.NodeSequence$IteratorCache)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        org.apache.xml.utils.NodeVector $r1;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: org.apache.xml.utils.NodeVector getVector()>();

        return $r1;
    }

    static boolean access$100(org.apache.xpath.axes.NodeSequence$IteratorCache)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        boolean $z0;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: boolean isComplete()>();

        return $z0;
    }

    static void access$200(org.apache.xpath.axes.NodeSequence$IteratorCache, boolean)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        boolean z0;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: void setCacheComplete(boolean)>(z0);

        return;
    }

    static int access$300(org.apache.xpath.axes.NodeSequence$IteratorCache)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        int $i0;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        $i0 = specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: int useCount()>();

        return $i0;
    }

    static void access$400(org.apache.xpath.axes.NodeSequence$IteratorCache, org.apache.xml.utils.NodeVector)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;
        org.apache.xml.utils.NodeVector r1;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        r1 := @parameter1: org.apache.xml.utils.NodeVector;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: void setVector(org.apache.xml.utils.NodeVector)>(r1);

        return;
    }

    static void access$500(org.apache.xpath.axes.NodeSequence$IteratorCache)
    {
        org.apache.xpath.axes.NodeSequence$IteratorCache r0;

        r0 := @parameter0: org.apache.xpath.axes.NodeSequence$IteratorCache;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence$IteratorCache: void increaseUseCount()>();

        return;
    }
}
