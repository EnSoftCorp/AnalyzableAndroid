public class org.apache.xpath.axes.MatchPatternIterator extends org.apache.xpath.axes.LocPathIterator
{
    static final long serialVersionUID;
    protected org.apache.xpath.patterns.StepPattern m_pattern;
    protected int m_superAxis;
    protected org.apache.xml.dtm.DTMAxisTraverser m_traverser;
    private static final boolean DEBUG;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0, z1, z2, z3;
        org.apache.xpath.patterns.StepPattern $r2;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 0);

        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = -1;

        i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $r2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: org.apache.xpath.patterns.StepPattern loadSteps(org.apache.xpath.axes.MatchPatternIterator,org.apache.xpath.compiler.Compiler,int,int)>(r0, r1, i2, 0);

        r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xpath.patterns.StepPattern m_pattern> = $r2;

        z0 = 0;

        z1 = 0;

        z2 = 0;

        z3 = 0;

        $i3 = i1 & 671088640;

        if 0 == $i3 goto label01;

        z0 = 1;

     label01:
        $i4 = i1 & 98066432;

        if 0 == $i4 goto label02;

        z1 = 1;

     label02:
        $i5 = i1 & 458752;

        if 0 == $i5 goto label03;

        z2 = 1;

     label03:
        $i6 = i1 & 2129920;

        if 0 == $i6 goto label04;

        z3 = 1;

     label04:
        if z0 != 0 goto label05;

        if z1 == 0 goto label07;

     label05:
        if z3 == 0 goto label06;

        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = 16;

        goto label10;

     label06:
        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = 17;

        goto label10;

     label07:
        if z2 == 0 goto label09;

        if z3 == 0 goto label08;

        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = 14;

        goto label10;

     label08:
        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = 5;

        goto label10;

     label09:
        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis> = 16;

     label10:
        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        int i0, $i1;
        java.lang.Object r1;
        org.apache.xml.dtm.DTM $r2;
        org.apache.xml.dtm.DTMAxisTraverser $r3;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i1 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_superAxis>;

        $r3 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)>($i1);

        r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = $r3;

        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        $z0 = r0.<org.apache.xpath.axes.MatchPatternIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label1;

        r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser> = null;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void detach()>();

     label1:
        return;
    }

    protected int getNextNode()
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xml.dtm.DTMAxisTraverser $r1, $r2;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        $i0 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_lastFetched>;

        if -1 != $i0 goto label1;

        $r2 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i5 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_context>;

        $i3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMAxisTraverser: int first(int)>($i5);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xml.dtm.DTMAxisTraverser m_traverser>;

        $i2 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_context>;

        $i1 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_lastFetched>;

        $i3 = virtualinvoke $r1.<org.apache.xml.dtm.DTMAxisTraverser: int next(int,int)>($i2, $i1);

     label2:
        r0.<org.apache.xpath.axes.MatchPatternIterator: int m_lastFetched> = $i3;

        $i4 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_lastFetched>;

        return $i4;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        int i0, i1, i2, $i3, $i4, $i5, $i7, $i8;
        org.apache.xpath.VariableStack r1;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        org.apache.xpath.XPathContext $r3, $r4;
        short $s6;
        byte b9;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        $z0 = r0.<org.apache.xpath.axes.MatchPatternIterator: boolean m_foundLast>;

        if $z0 == 0 goto label01;

        return -1;

     label01:
        $i3 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_stackFrame>;

        if -1 == $i3 goto label02;

        $r4 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xpath.XPathContext m_execContext>;

        r1 = virtualinvoke $r4.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        i1 = virtualinvoke r1.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i7 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_stackFrame>;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i7);

        goto label03;

     label02:
        r1 = null;

        i1 = 0;

     label03:
        i0 = virtualinvoke r0.<org.apache.xpath.axes.MatchPatternIterator: int getNextNode()>();

        if -1 == i0 goto label05;

        $r3 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xpath.XPathContext m_execContext>;

        $s6 = virtualinvoke r0.<org.apache.xpath.axes.MatchPatternIterator: short acceptNode(int,org.apache.xpath.XPathContext)>(i0, $r3);

        if 1 != $s6 goto label04;

        goto label05;

     label04:
        if i0 != -1 goto label03;

     label05:
        if -1 == i0 goto label08;

        virtualinvoke r0.<org.apache.xpath.axes.MatchPatternIterator: void incrementCurrentPos()>();

        i2 = i0;

     label06:
        $i5 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_stackFrame>;

        if -1 == $i5 goto label07;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label07:
        return i2;

     label08:
        r0.<org.apache.xpath.axes.MatchPatternIterator: boolean m_foundLast> = 1;

        b9 = -1;

     label09:
        $i4 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_stackFrame>;

        if -1 == $i4 goto label10;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label10:
        return b9;

     label11:
        $r5 := @caughtexception;

        r2 = $r5;

     label12:
        $i8 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_stackFrame>;

        if -1 == $i8 goto label13;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label13:
        throw r2;

        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public short acceptNode(int, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.axes.MatchPatternIterator r0;
        int i0, $i2;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.objects.XObject r2;
        byte b1, $b3;
        java.lang.Throwable r3, $r9;
        org.apache.xpath.patterns.StepPattern $r4;
        org.apache.xpath.objects.XNumber $r5;
        javax.xml.transform.TransformerException $r6, r10;
        java.lang.RuntimeException $r7;
        java.lang.String $r8;

        r0 := @this: org.apache.xpath.axes.MatchPatternIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xpath.XPathContext;

     label1:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>(i0);

        $i2 = r0.<org.apache.xpath.axes.MatchPatternIterator: int m_context>;

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushIteratorRoot(int)>($i2);

        $r4 = r0.<org.apache.xpath.axes.MatchPatternIterator: org.apache.xpath.patterns.StepPattern m_pattern>;

        r2 = virtualinvoke $r4.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext)>(r1);

        $r5 = <org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber SCORE_NONE>;

        if r2 != $r5 goto label2;

        $b3 = 3;

        goto label3;

     label2:
        $b3 = 1;

     label3:
        b1 = $b3;

     label4:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popIteratorRoot()>();

        return b1;

     label5:
        $r6 := @caughtexception;

        r10 = $r6;

        $r7 = new java.lang.RuntimeException;

        $r8 = virtualinvoke r10.<javax.xml.transform.TransformerException: java.lang.String getMessage()>();

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

     label7:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void popIteratorRoot()>();

        throw r3;

        catch javax.xml.transform.TransformerException from label1 to label4 with label5;
        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.MatchPatternIterator: boolean DEBUG> = 0;

        <org.apache.xpath.axes.MatchPatternIterator: long serialVersionUID> = -5201153767396296474L;

        return;
    }
}
