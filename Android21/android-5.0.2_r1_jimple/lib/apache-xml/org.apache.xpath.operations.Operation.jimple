public class org.apache.xpath.operations.Operation extends org.apache.xpath.Expression implements org.apache.xpath.ExpressionOwner
{
    static final long serialVersionUID;
    protected org.apache.xpath.Expression m_left;
    protected org.apache.xpath.Expression m_right;

    public void <init>()
    {
        org.apache.xpath.operations.Operation r0;

        r0 := @this: org.apache.xpath.operations.Operation;

        specialinvoke r0.<org.apache.xpath.Expression: void <init>()>();

        return;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        org.apache.xpath.operations.Operation r0;
        java.util.Vector r1;
        int i0;
        org.apache.xpath.Expression $r2, $r3;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        virtualinvoke $r2.<org.apache.xpath.Expression: void fixupVariables(java.util.Vector,int)>(r1, i0);

        $r3 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        virtualinvoke $r3.<org.apache.xpath.Expression: void fixupVariables(java.util.Vector,int)>(r1, i0);

        return;
    }

    public boolean canTraverseOutsideSubtree()
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression $r1, $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.operations.Operation;

        $r1 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        if null == $r1 goto label1;

        $r4 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        $z1 = virtualinvoke $r4.<org.apache.xpath.Expression: boolean canTraverseOutsideSubtree()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        if null == $r2 goto label2;

        $r3 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        $z0 = virtualinvoke $r3.<org.apache.xpath.Expression: boolean canTraverseOutsideSubtree()>();

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void setLeftRight(org.apache.xpath.Expression, org.apache.xpath.Expression)
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression r1, r2;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.Expression;

        r2 := @parameter1: org.apache.xpath.Expression;

        r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left> = r1;

        r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right> = r2;

        virtualinvoke r1.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r0);

        virtualinvoke r2.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r0);

        return;
    }

    public org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.objects.XObject r2, r3, r4;
        org.apache.xpath.Expression $r5, $r6;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        $r5 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        r2 = virtualinvoke $r5.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,boolean)>(r1, 1);

        $r6 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        r3 = virtualinvoke $r6.<org.apache.xpath.Expression: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,boolean)>(r1, 1);

        r4 = virtualinvoke r0.<org.apache.xpath.operations.Operation: org.apache.xpath.objects.XObject operate(org.apache.xpath.objects.XObject,org.apache.xpath.objects.XObject)>(r2, r3);

        virtualinvoke r2.<org.apache.xpath.objects.XObject: void detach()>();

        virtualinvoke r3.<org.apache.xpath.objects.XObject: void detach()>();

        return r4;
    }

    public org.apache.xpath.objects.XObject operate(org.apache.xpath.objects.XObject, org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.objects.XObject r1, r2;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        r2 := @parameter1: org.apache.xpath.objects.XObject;

        return null;
    }

    public org.apache.xpath.Expression getLeftOperand()
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression $r1;

        r0 := @this: org.apache.xpath.operations.Operation;

        $r1 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        return $r1;
    }

    public org.apache.xpath.Expression getRightOperand()
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression $r1;

        r0 := @this: org.apache.xpath.operations.Operation;

        $r1 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        return $r1;
    }

    public void callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.XPathVisitor r2;
        boolean $z0;
        org.apache.xpath.operations.Operation$LeftExprOwner $r3;
        org.apache.xpath.Expression $r4, $r5;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.XPathVisitor;

        $z0 = virtualinvoke r2.<org.apache.xpath.XPathVisitor: boolean visitBinaryOperation(org.apache.xpath.ExpressionOwner,org.apache.xpath.operations.Operation)>(r1, r0);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        $r3 = new org.apache.xpath.operations.Operation$LeftExprOwner;

        specialinvoke $r3.<org.apache.xpath.operations.Operation$LeftExprOwner: void <init>(org.apache.xpath.operations.Operation)>(r0);

        virtualinvoke $r4.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r3, r2);

        $r5 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        virtualinvoke $r5.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r0, r2);

     label1:
        return;
    }

    public org.apache.xpath.Expression getExpression()
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression $r1;

        r0 := @this: org.apache.xpath.operations.Operation;

        $r1 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        return $r1;
    }

    public void setExpression(org.apache.xpath.Expression)
    {
        org.apache.xpath.operations.Operation r0;
        org.apache.xpath.Expression r1;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.Expression;

        virtualinvoke r1.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r0);

        r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right> = r1;

        return;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.operations.Operation r0, $r2, $r5;
        org.apache.xpath.Expression r1, $r3, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.xpath.operations.Operation;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = virtualinvoke r0.<org.apache.xpath.operations.Operation: boolean isSameClass(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        $r2 = (org.apache.xpath.operations.Operation) r1;

        $r3 = $r2.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_left>;

        $z1 = virtualinvoke $r4.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>($r3);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r7 = r0.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        $r5 = (org.apache.xpath.operations.Operation) r1;

        $r6 = $r5.<org.apache.xpath.operations.Operation: org.apache.xpath.Expression m_right>;

        $z2 = virtualinvoke $r7.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>($r6);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.operations.Operation: long serialVersionUID> = -3037139537171050430L;

        return;
    }
}
