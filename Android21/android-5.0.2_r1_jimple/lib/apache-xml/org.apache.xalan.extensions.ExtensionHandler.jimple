public abstract class org.apache.xalan.extensions.ExtensionHandler extends java.lang.Object
{
    protected java.lang.String m_namespaceUri;
    protected java.lang.String m_scriptLang;

    static java.lang.Class getClassForName(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.String r0;
        boolean $z0;
        java.lang.ClassLoader $r1;
        java.lang.Class $r2;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("org.apache.xalan.xslt.extensions.Redirect");

        if $z0 == 0 goto label1;

        r0 = "org.apache.xalan.lib.Redirect";

     label1:
        $r1 = staticinvoke <org.apache.xalan.extensions.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r2 = staticinvoke <org.apache.xalan.extensions.ObjectFactory: java.lang.Class findProviderClass(java.lang.String,java.lang.ClassLoader,boolean)>(r0, $r1, 1);

        return $r2;
    }

    protected void <init>(java.lang.String, java.lang.String)
    {
        org.apache.xalan.extensions.ExtensionHandler r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xalan.extensions.ExtensionHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xalan.extensions.ExtensionHandler: java.lang.String m_namespaceUri> = r1;

        r0.<org.apache.xalan.extensions.ExtensionHandler: java.lang.String m_scriptLang> = r2;

        return;
    }

    public abstract boolean isFunctionAvailable(java.lang.String);

    public abstract boolean isElementAvailable(java.lang.String);

    public abstract java.lang.Object callFunction(java.lang.String, java.util.Vector, java.lang.Object, org.apache.xalan.extensions.ExpressionContext) throws javax.xml.transform.TransformerException;

    public abstract java.lang.Object callFunction(org.apache.xpath.functions.FuncExtFunction, java.util.Vector, org.apache.xalan.extensions.ExpressionContext) throws javax.xml.transform.TransformerException;

    public abstract void processElement(java.lang.String, org.apache.xalan.templates.ElemTemplateElement, org.apache.xalan.transformer.TransformerImpl, org.apache.xalan.templates.Stylesheet, java.lang.Object) throws javax.xml.transform.TransformerException, java.io.IOException;
}
