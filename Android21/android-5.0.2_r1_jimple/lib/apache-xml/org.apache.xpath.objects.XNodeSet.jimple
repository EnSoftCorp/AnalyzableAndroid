public class org.apache.xpath.objects.XNodeSet extends org.apache.xpath.axes.NodeSequence
{
    static final long serialVersionUID;
    static final org.apache.xpath.objects.LessThanComparator S_LT;
    static final org.apache.xpath.objects.LessThanOrEqualComparator S_LTE;
    static final org.apache.xpath.objects.GreaterThanComparator S_GT;
    static final org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE;
    static final org.apache.xpath.objects.EqualComparator S_EQ;
    static final org.apache.xpath.objects.NotEqualComparator S_NEQ;

    protected void <init>()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.objects.XNodeSet r0, r2;
        org.apache.xml.dtm.DTMIterator r1, $r3;
        boolean $z0, $z1;
        org.apache.xml.dtm.DTMManager $r4;
        int $i0;
        org.apache.xpath.axes.NodeSequence$IteratorCache $r5;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        $z0 = r1 instanceof org.apache.xpath.objects.XNodeSet;

        if $z0 == 0 goto label2;

        r2 = (org.apache.xpath.objects.XNodeSet) r1;

        $r3 = r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator m_iter>;

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setIter(org.apache.xml.dtm.DTMIterator)>($r3);

        $r4 = r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r4;

        $i0 = r2.<org.apache.xpath.objects.XNodeSet: int m_last>;

        r0.<org.apache.xpath.objects.XNodeSet: int m_last> = $i0;

        $z1 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: boolean hasCache()>();

        if $z1 != 0 goto label1;

        virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r5 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xpath.axes.NodeSequence$IteratorCache getIteratorCache()>();

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setObject(java.lang.Object)>($r5);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setIter(org.apache.xml.dtm.DTMIterator)>(r1);

     label3:
        return;
    }

    public void <init>(org.apache.xpath.objects.XNodeSet)
    {
        org.apache.xpath.objects.XNodeSet r0, r1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xml.dtm.DTMManager $r3;
        int $i0;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XNodeSet;

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>()>();

        $r2 = r1.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator m_iter>;

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setIter(org.apache.xml.dtm.DTMIterator)>($r2);

        $r3 = r1.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr> = $r3;

        $i0 = r1.<org.apache.xpath.objects.XNodeSet: int m_last>;

        r0.<org.apache.xpath.objects.XNodeSet: int m_last> = $i0;

        $z0 = virtualinvoke r1.<org.apache.xpath.objects.XNodeSet: boolean hasCache()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<org.apache.xpath.objects.XNodeSet: void setShouldCacheNodes(boolean)>(1);

     label1:
        $r4 = r1.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setObject(java.lang.Object)>($r4);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        specialinvoke r0.<org.apache.xpath.objects.XNodeSet: void <init>(int,org.apache.xml.dtm.DTMManager)>(-1, r1);

        return;
    }

    public void <init>(int, org.apache.xml.dtm.DTMManager)
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        org.apache.xml.dtm.DTMManager r1;
        org.apache.xpath.NodeSetDTM $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.dtm.DTMManager;

        $r2 = new org.apache.xpath.NodeSetDTM;

        specialinvoke $r2.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMManager)>(r1);

        specialinvoke r0.<org.apache.xpath.axes.NodeSequence: void <init>(java.lang.Object)>($r2);

        r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr> = r1;

        if -1 == i0 goto label1;

        $r3 = r0.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        $r4 = (org.apache.xpath.NodeSetDTM) $r3;

        virtualinvoke $r4.<org.apache.xpath.NodeSetDTM: void addNode(int)>(i0);

        r0.<org.apache.xpath.objects.XNodeSet: int m_last> = 1;

        goto label2;

     label1:
        r0.<org.apache.xpath.objects.XNodeSet: int m_last> = 0;

     label2:
        return;
    }

    public int getType()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return 4;
    }

    public java.lang.String getTypeString()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return "#NODESET";
    }

    public double getNumberFromNode(int)
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        org.apache.xml.utils.XMLString r1;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xml.dtm.DTM $r3;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        r1 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        $d0 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: double toDouble()>();

        return $d0;
    }

    public double num()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int item(int)>(0);

        if i0 == -1 goto label1;

        $d0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>(i0);

        goto label2;

     label1:
        $d0 = #NaN;

     label2:
        return $d0;
    }

    public double numWithSideEffects()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        double $d0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int nextNode()>();

        if i0 == -1 goto label1;

        $d0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>(i0);

        goto label2;

     label1:
        $d0 = #NaN;

     label2:
        return $d0;
    }

    public boolean bool()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int item(int)>(0);

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean boolWithSideEffects()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int nextNode()>();

        if $i0 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.apache.xml.utils.XMLString getStringFromNode(int)
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        org.apache.xpath.objects.XString $r1;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xml.dtm.DTM $r3;
        org.apache.xml.utils.XMLString $r4;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 := @parameter0: int;

        if -1 == i0 goto label1;

        $r2 = r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTM: org.apache.xml.utils.XMLString getStringValue(int)>(i0);

        return $r4;

     label1:
        $r1 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r1;
    }

    public void dispatchCharactersEvents(org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.xml.sax.ContentHandler r1;
        int i0;
        org.apache.xml.dtm.DTMManager $r2;
        org.apache.xml.dtm.DTM $r3;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int item(int)>(0);

        if i0 == -1 goto label1;

        $r2 = r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMManager m_dtmMgr>;

        $r3 = virtualinvoke $r2.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        interfaceinvoke $r3.<org.apache.xml.dtm.DTM: void dispatchCharactersEvents(int,org.xml.sax.ContentHandler,boolean)>(i0, r1, 0);

     label1:
        return;
    }

    public org.apache.xml.utils.XMLString xstr()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        org.apache.xml.utils.XMLString $r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int item(int)>(0);

        if i0 == -1 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i0);

        goto label2;

     label1:
        $r1 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

     label2:
        return $r1;
    }

    public void appendToFsb(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.utils.FastStringBuffer r1;
        org.apache.xpath.objects.XString r2;
        org.apache.xml.utils.XMLString $r3;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString xstr()>();

        r2 = (org.apache.xpath.objects.XString) $r3;

        virtualinvoke r2.<org.apache.xpath.objects.XString: void appendToFsb(org.apache.xml.utils.FastStringBuffer)>(r1);

        return;
    }

    public java.lang.String str()
    {
        org.apache.xpath.objects.XNodeSet r0;
        int i0;
        org.apache.xml.utils.XMLString $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        i0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: int item(int)>(0);

        if i0 == -1 goto label1;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.apache.xml.utils.XMLString: java.lang.String toString()>();

        goto label2;

     label1:
        $r2 = "";

     label2:
        return $r2;
    }

    public java.lang.Object object()
    {
        org.apache.xpath.objects.XNodeSet r0;
        java.lang.Object $r1, $r2;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r1 = r0.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        if null != $r1 goto label1;

        return r0;

     label1:
        $r2 = r0.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        return $r2;
    }

    public org.w3c.dom.traversal.NodeIterator nodeset() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.ref.DTMNodeIterator $r1;
        org.apache.xml.dtm.DTMIterator $r2;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r1 = new org.apache.xml.dtm.ref.DTMNodeIterator;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iter()>();

        specialinvoke $r1.<org.apache.xml.dtm.ref.DTMNodeIterator: void <init>(org.apache.xml.dtm.DTMIterator)>($r2);

        return $r1;
    }

    public org.w3c.dom.NodeList nodelist() throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0, r2;
        org.apache.xml.dtm.ref.DTMNodeList r1, $r3;
        org.apache.xml.dtm.DTMIterator $r4;
        org.apache.xml.utils.NodeVector $r5;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r3 = new org.apache.xml.dtm.ref.DTMNodeList;

        specialinvoke $r3.<org.apache.xml.dtm.ref.DTMNodeList: void <init>(org.apache.xml.dtm.DTMIterator)>(r0);

        r1 = $r3;

        $r4 = virtualinvoke r1.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator getDTMIterator()>();

        r2 = (org.apache.xpath.objects.XNodeSet) $r4;

        $r5 = virtualinvoke r2.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.NodeVector getVector()>();

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void SetVector(org.apache.xml.utils.NodeVector)>($r5);

        return r1;
    }

    public org.apache.xml.dtm.DTMIterator iterRaw()
    {
        org.apache.xpath.objects.XNodeSet r0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        return r0;
    }

    public void release(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xml.dtm.DTMIterator r1;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        return;
    }

    public org.apache.xml.dtm.DTMIterator iter()
    {
        org.apache.xpath.objects.XNodeSet r0;
        java.lang.CloneNotSupportedException r1, $r3;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r2;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean hasCache()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

     label2:
        return $r2;

     label3:
        return r0;

     label4:
        $r3 := @caughtexception;

        r1 = $r3;

        $r4 = new java.lang.RuntimeException;

        $r5 = virtualinvoke r1.<java.lang.CloneNotSupportedException: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label4;
    }

    public org.apache.xpath.objects.XObject getFresh()
    {
        org.apache.xpath.objects.XNodeSet r0;
        java.lang.CloneNotSupportedException r1, $r4;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xpath.objects.XObject $r3;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

     label1:
        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean hasCache()>();

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        $r3 = (org.apache.xpath.objects.XObject) $r2;

     label2:
        return $r3;

     label3:
        return r0;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke r1.<java.lang.CloneNotSupportedException: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label4;
    }

    public org.apache.xpath.NodeSetDTM mutableNodeset()
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.NodeSetDTM r1, $r3;
        java.lang.Object $r2, $r5;
        boolean $z0;
        org.apache.xml.dtm.DTMIterator $r4;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        $r2 = r0.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        $z0 = $r2 instanceof org.apache.xpath.NodeSetDTM;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.xpath.objects.XNodeSet: java.lang.Object m_obj>;

        r1 = (org.apache.xpath.NodeSetDTM) $r5;

        goto label2;

     label1:
        $r3 = new org.apache.xpath.NodeSetDTM;

        $r4 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iter()>();

        specialinvoke $r3.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMIterator)>($r4);

        r1 = $r3;

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setObject(java.lang.Object)>(r1);

        virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: void setCurrentPos(int)>(0);

     label2:
        return r1;
    }

    public boolean compare(org.apache.xpath.objects.XObject, org.apache.xpath.objects.Comparator) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0, $r8;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.Comparator r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12;
        org.apache.xml.dtm.DTMIterator r3, r4, r12, r14, r17;
        java.util.Vector r5, $r11;
        org.apache.xml.utils.XMLString r6, r7, $r9, r13, r15, r16, r18;
        double $d0, $d1, $d2, d3, d4, d5, d6;
        java.lang.Object $r10;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        r2 := @parameter1: org.apache.xpath.objects.Comparator;

        z0 = 0;

        i0 = virtualinvoke r1.<org.apache.xpath.objects.XObject: int getType()>();

        if 4 != i0 goto label11;

        r3 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        $r8 = (org.apache.xpath.objects.XNodeSet) r1;

        r4 = virtualinvoke $r8.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        r5 = null;

     label01:
        $i6 = interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i1 = $i6;

        if -1 == $i6 goto label10;

        r6 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i1);

        if null != r5 goto label06;

     label02:
        $i7 = interfaceinvoke r4.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i2 = $i7;

        if -1 == $i7 goto label05;

        r7 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i2);

        $z6 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>(r6, r7);

        if $z6 == 0 goto label03;

        z0 = 1;

        goto label05;

     label03:
        if null != r5 goto label04;

        $r11 = new java.util.Vector;

        specialinvoke $r11.<java.util.Vector: void <init>()>();

        r5 = $r11;

     label04:
        virtualinvoke r5.<java.util.Vector: void addElement(java.lang.Object)>(r7);

        goto label02;

     label05:
        goto label09;

     label06:
        i8 = virtualinvoke r5.<java.util.Vector: int size()>();

        i9 = 0;

     label07:
        if i9 >= i8 goto label09;

        $r10 = virtualinvoke r5.<java.util.Vector: java.lang.Object elementAt(int)>(i9);

        $r9 = (org.apache.xml.utils.XMLString) $r10;

        $z5 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>(r6, $r9);

        if $z5 == 0 goto label08;

        z0 = 1;

        goto label09;

     label08:
        i9 = i9 + 1;

        goto label07;

     label09:
        goto label01;

     label10:
        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void reset()>();

        interfaceinvoke r4.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label27;

     label11:
        if 1 != i0 goto label14;

        $z3 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean bool()>();

        if $z3 == 0 goto label12;

        $d2 = 1.0;

        goto label13;

     label12:
        $d2 = 0.0;

     label13:
        d3 = $d2;

        d4 = virtualinvoke r1.<org.apache.xpath.objects.XObject: double num()>();

        z0 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>(d3, d4);

        goto label27;

     label14:
        if 2 != i0 goto label18;

        r12 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

        d5 = virtualinvoke r1.<org.apache.xpath.objects.XObject: double num()>();

     label15:
        $i5 = interfaceinvoke r12.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i10 = $i5;

        if -1 == $i5 goto label17;

        d6 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double getNumberFromNode(int)>(i10);

        $z4 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>(d6, d5);

        if $z4 == 0 goto label16;

        z0 = 1;

        goto label17;

     label16:
        goto label15;

     label17:
        interfaceinvoke r12.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label27;

     label18:
        if 5 != i0 goto label22;

        r13 = virtualinvoke r1.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        r14 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

     label19:
        $i4 = interfaceinvoke r14.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i11 = $i4;

        if -1 == $i4 goto label21;

        r15 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i11);

        $z2 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>(r15, r13);

        if $z2 == 0 goto label20;

        z0 = 1;

        goto label21;

     label20:
        goto label19;

     label21:
        interfaceinvoke r14.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label27;

     label22:
        if 3 != i0 goto label26;

        r16 = virtualinvoke r1.<org.apache.xpath.objects.XObject: org.apache.xml.utils.XMLString xstr()>();

        r17 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.dtm.DTMIterator iterRaw()>();

     label23:
        $i3 = interfaceinvoke r17.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i12 = $i3;

        if -1 == $i3 goto label25;

        r18 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: org.apache.xml.utils.XMLString getStringFromNode(int)>(i12);

        $z1 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareStrings(org.apache.xml.utils.XMLString,org.apache.xml.utils.XMLString)>(r18, r16);

        if $z1 == 0 goto label24;

        z0 = 1;

        goto label25;

     label24:
        goto label23;

     label25:
        interfaceinvoke r17.<org.apache.xml.dtm.DTMIterator: void reset()>();

        goto label27;

     label26:
        $d0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: double num()>();

        $d1 = virtualinvoke r1.<org.apache.xpath.objects.XObject: double num()>();

        z0 = virtualinvoke r2.<org.apache.xpath.objects.Comparator: boolean compareNumbers(double,double)>($d0, $d1);

     label27:
        return z0;
    }

    public boolean lessThan(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.LessThanComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanComparator S_LT>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean lessThanOrEqual(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.LessThanOrEqualComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanOrEqualComparator S_LTE>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean greaterThan(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.GreaterThanComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanComparator S_GT>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean greaterThanOrEqual(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.GreaterThanOrEqualComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    public boolean equals(org.apache.xpath.objects.XObject)
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        javax.xml.transform.TransformerException r2, $r4;
        org.apache.xpath.objects.EqualComparator $r3;
        boolean $z0;
        org.apache.xml.utils.WrappedRuntimeException $r5;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

     label1:
        $r3 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.EqualComparator S_EQ>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

        $r5 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r5.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r2);

        throw $r5;

        catch javax.xml.transform.TransformerException from label1 to label2 with label3;
    }

    public boolean notEquals(org.apache.xpath.objects.XObject) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.objects.XNodeSet r0;
        org.apache.xpath.objects.XObject r1;
        org.apache.xpath.objects.NotEqualComparator $r2;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XNodeSet;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        $r2 = <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.NotEqualComparator S_NEQ>;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XNodeSet: boolean compare(org.apache.xpath.objects.XObject,org.apache.xpath.objects.Comparator)>(r1, $r2);

        return $z0;
    }

    static void <clinit>()
    {
        org.apache.xpath.objects.LessThanComparator $r0;
        org.apache.xpath.objects.LessThanOrEqualComparator $r1;
        org.apache.xpath.objects.GreaterThanComparator $r2;
        org.apache.xpath.objects.GreaterThanOrEqualComparator $r3;
        org.apache.xpath.objects.EqualComparator $r4;
        org.apache.xpath.objects.NotEqualComparator $r5;

        <org.apache.xpath.objects.XNodeSet: long serialVersionUID> = 1916026368035639667L;

        $r0 = new org.apache.xpath.objects.LessThanComparator;

        specialinvoke $r0.<org.apache.xpath.objects.LessThanComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanComparator S_LT> = $r0;

        $r1 = new org.apache.xpath.objects.LessThanOrEqualComparator;

        specialinvoke $r1.<org.apache.xpath.objects.LessThanOrEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.LessThanOrEqualComparator S_LTE> = $r1;

        $r2 = new org.apache.xpath.objects.GreaterThanComparator;

        specialinvoke $r2.<org.apache.xpath.objects.GreaterThanComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanComparator S_GT> = $r2;

        $r3 = new org.apache.xpath.objects.GreaterThanOrEqualComparator;

        specialinvoke $r3.<org.apache.xpath.objects.GreaterThanOrEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.GreaterThanOrEqualComparator S_GTE> = $r3;

        $r4 = new org.apache.xpath.objects.EqualComparator;

        specialinvoke $r4.<org.apache.xpath.objects.EqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.EqualComparator S_EQ> = $r4;

        $r5 = new org.apache.xpath.objects.NotEqualComparator;

        specialinvoke $r5.<org.apache.xpath.objects.NotEqualComparator: void <init>()>();

        <org.apache.xpath.objects.XNodeSet: org.apache.xpath.objects.NotEqualComparator S_NEQ> = $r5;

        return;
    }
}
