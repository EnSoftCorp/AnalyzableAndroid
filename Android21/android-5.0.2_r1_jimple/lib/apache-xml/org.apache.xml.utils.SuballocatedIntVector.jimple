public class org.apache.xml.utils.SuballocatedIntVector extends java.lang.Object
{
    protected int m_blocksize;
    protected int m_SHIFT;
    protected int m_MASK;
    protected static final int NUMBLOCKS_DEFAULT;
    protected int m_numblocks;
    protected int[][] m_map;
    protected int m_firstFree;
    protected int[] m_map0;
    protected int[] m_buildCache;
    protected int m_buildCacheStartIndex;

    public void <init>()
    {
        org.apache.xml.utils.SuballocatedIntVector r0;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(2048);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] $r1, $r3, $r5;
        int[][] $r2, $r4;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks> = 32;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = 0;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT> = 0;

     label1:
        $i2 = i0 >>> 1;

        i0 = $i2;

        if 0 == $i2 goto label2;

        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        $i9 = $i8 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT> = $i9;

        goto label1;

     label2:
        $i3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        $i4 = 1 << $i3;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize> = $i4;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i6 = $i5 - 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK> = $i6;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks> = i1;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r1 = newarray (int)[$i7];

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0> = $r1;

        $r2 = newarray (int[])[i1];

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map> = $r2;

        $r4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        $r4[0] = $r3;

        $r5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_buildCache> = $r5;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_buildCacheStartIndex> = 0;

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i0, 32);

        return;
    }

    public int size()
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int $i0;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        $i0 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        return $i0;
    }

    public void setSize(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if $i1 <= i0 goto label1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = i0;

     label1:
        return;
    }

    public void addElement(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        int[][] r1, $r2, $r3, $r5, $r6, $r7;
        int[] $r4, $r8, r9;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_buildCacheStartIndex>;

        i1 = $i6 - $i5;

        if i1 < 0 goto label1;

        $i19 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if i1 >= $i19 goto label1;

        $r8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_buildCache>;

        $r8[i1] = i0;

        $i20 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i21 = $i20 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i21;

        goto label4;

     label1:
        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = $i8 >>> $i7;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i3 = $i10 & $i9;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i11 = lengthof $r2;

        if i2 < $i11 goto label2;

        $i17 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks>;

        i4 = i2 + $i17;

        r1 = newarray (int[])[i4];

        $r7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $r6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i18 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, 0, $i18);

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map> = r1;

     label2:
        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r9 = $r3[i2];

        if null != r9 goto label3;

        $r5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i16 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r4 = newarray (int)[$i16];

        $r5[i2] = $r4;

        r9 = $r4;

     label3:
        r9[i3] = i0;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_buildCache> = r9;

        $i13 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i12 = $i13 - i3;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_buildCacheStartIndex> = $i12;

        $i15 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i14 = $i15 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i14;

     label4:
        return;
    }

    private void addElements(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27;
        int[][] r1, $r2, $r3, $r4, $r6, $r7;
        int[] $r5, $r8, r9;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i7 = $i5 + i1;

        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if $i7 >= $i6 goto label03;

        i2 = 0;

     label01:
        if i2 >= i1 goto label02;

        $r8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        $i24 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i25 = $i24 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i25;

        $r8[$i24] = i0;

        i2 = i2 + 1;

        goto label01;

     label02:
        goto label11;

     label03:
        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i26 = $i9 >>> $i8;

        $i11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i3 = $i11 & $i10;

        $i12 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i13 = $i12 + i1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i13;

     label04:
        if i1 <= 0 goto label11;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i14 = lengthof $r2;

        if i26 < $i14 goto label05;

        $i22 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks>;

        i4 = i26 + $i22;

        r1 = newarray (int[])[i4];

        $r7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $r6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i23 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, 0, $i23);

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map> = r1;

     label05:
        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r9 = $r3[i26];

        if null != r9 goto label06;

        $r4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i20 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r5 = newarray (int)[$i20];

        $r4[i26] = $r5;

        r9 = $r5;

     label06:
        $i15 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i17 = $i15 - i3;

        if $i17 >= i1 goto label07;

        $i18 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i21 = $i18 - i3;

        goto label08;

     label07:
        $i21 = i1;

     label08:
        i27 = $i21;

        i1 = i1 - i27;

     label09:
        $i16 = i27;

        i27 = i27 + -1;

        if $i16 <= 0 goto label10;

        $i19 = i3;

        i3 = i3 + 1;

        r9[$i19] = i0;

        goto label09;

     label10:
        i26 = i26 + 1;

        i3 = 0;

        goto label04;

     label11:
        return;
    }

    private void addElements(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] $r1;
        int[][] $r2;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        i1 = $i5 + i0;

        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if i1 <= $i6 goto label2;

        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = $i8 >>> $i7;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i11 = $i9 + i0;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i3 = $i11 >>> $i10;

        i4 = i2 + 1;

     label1:
        if i4 > i3 goto label2;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i12 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r1 = newarray (int)[$i12];

        $r2[i4] = $r1;

        i4 = i4 + 1;

        goto label1;

     label2:
        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = i1;

        return;
    }

    private void insertElementAt(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30;
        int[][] r1, $r3, $r4, $r6, $r7, $r8, $r10, $r11;
        int[] r2, $r5, $r9, r12;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if i1 != $i6 goto label1;

        virtualinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        goto label8;

     label1:
        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if i1 <= $i7 goto label4;

        $i20 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = i1 >>> $i20;

        $r6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i21 = lengthof $r6;

        if i2 < $i21 goto label2;

        $i24 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks>;

        i3 = i2 + $i24;

        r1 = newarray (int[])[i3];

        $r10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $r11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i26 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, r1, 0, $i26);

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map> = r1;

     label2:
        $r7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r12 = $r7[i2];

        if null != r12 goto label3;

        $r8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i25 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r9 = newarray (int)[$i25];

        $r8[i2] = $r9;

        r12 = $r9;

     label3:
        $i23 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i27 = i1 & $i23;

        r12[i27] = i0;

        $i22 = i27 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i22;

        goto label8;

     label4:
        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i28 = i1 >>> $i8;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i29 = $i10 >>> $i9;

        $i11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i12 = $i11 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i12;

        $i14 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i30 = i1 & $i14;

     label5:
        if i28 > i29 goto label8;

        $i13 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i15 = $i13 - i30;

        i5 = $i15 - 1;

        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r2 = $r3[i28];

        if null != r2 goto label6;

        i4 = 0;

        $r4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i18 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r5 = newarray (int)[$i18];

        $r4[i28] = $r5;

        r2 = $r5;

        goto label7;

     label6:
        $i17 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i16 = $i17 - 1;

        i4 = r2[$i16];

        $i19 = i30 + 1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r2, i30, r2, $i19, i5);

     label7:
        r2[i30] = i0;

        i0 = i4;

        i30 = 0;

        i28 = i28 + 1;

        goto label5;

     label8:
        return;
    }

    public void removeAllElements()
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = 0;

        $r1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_buildCache> = $r1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_buildCacheStartIndex> = 0;

        return;
    }

    private boolean removeElement(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int,int)>(i0, 0);

        if i1 >= 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: void removeElementAt(int)>(i1);

        return 1;
    }

    private void removeElementAt(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        int[] r1, r2, $r5;
        int[][] $r3, $r4, $r6;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if i0 >= $i5 goto label9;

        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i1 = i0 >>> $i8;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = $i10 >>> $i9;

        $i11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i3 = i0 & $i11;

     label1:
        if i1 > i2 goto label9;

        $i12 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i13 = $i12 - i3;

        i4 = $i13 - 1;

        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r1 = $r3[i1];

        if null != r1 goto label2;

        $r6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i21 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r5 = newarray (int)[$i21];

        $r6[i1] = $r5;

        r1 = $r5;

        goto label3;

     label2:
        $i15 = i3 + 1;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r1, $i15, r1, i3, i4);

     label3:
        if i1 >= i2 goto label7;

        $r4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i16 = i1 + 1;

        r2 = $r4[$i16];

        if r2 == null goto label6;

        $i18 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i20 = $i18 - 1;

        if r2 == null goto label4;

        $i19 = r2[0];

        goto label5;

     label4:
        $i19 = 0;

     label5:
        r1[$i20] = $i19;

     label6:
        goto label8;

     label7:
        $i14 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i17 = $i14 - 1;

        r1[$i17] = 0;

     label8:
        i3 = 0;

        i1 = i1 + 1;

        goto label1;

     label9:
        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i7 = $i6 - 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i7;

        return;
    }

    public void setElementAt(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[][] r1, $r2, $r3, $r4, $r6, $r7;
        int[] $r5, $r8, r9;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if i1 >= $i5 goto label1;

        $r8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        $r8[i1] = i0;

        goto label4;

     label1:
        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = i1 >>> $i6;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i3 = i1 & $i7;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i8 = lengthof $r2;

        if i2 < $i8 goto label2;

        $i12 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_numblocks>;

        i4 = i2 + $i12;

        r1 = newarray (int[])[i4];

        $r7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $r6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i13 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r1, 0, $i13);

        r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map> = r1;

     label2:
        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r9 = $r3[i2];

        if null != r9 goto label3;

        $r4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $r5 = newarray (int)[$i11];

        $r4[i2] = $r5;

        r9 = $r5;

     label3:
        r9[i3] = i0;

     label4:
        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if i1 < $i9 goto label5;

        $i10 = i1 + 1;

        r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree> = $i10;

     label5:
        return;
    }

    public int elementAt(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        $i2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    private boolean contains(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int,int)>(i0, 0);

        if $i1 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int indexOf(int, int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23;
        int[] r1, r4;
        int[][] $r2, $r3;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        if i1 < $i7 goto label1;

        return -1;

     label1:
        $i8 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = i1 >>> $i8;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i3 = i1 & $i9;

        $i11 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i10 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i4 = $i11 >>> $i10;

     label2:
        if i2 >= i4 goto label6;

        $r3 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r1 = $r3[i2];

        if r1 == null goto label5;

        i5 = i3;

     label3:
        $i19 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        if i5 >= $i19 goto label5;

        $i18 = r1[i5];

        if $i18 != i0 goto label4;

        $i21 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i20 = i2 * $i21;

        $i22 = i5 + $i20;

        return $i22;

     label4:
        i5 = i5 + 1;

        goto label3;

     label5:
        i3 = 0;

        i2 = i2 + 1;

        goto label2;

     label6:
        $i13 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i12 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i23 = $i13 & $i12;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r4 = $r2[i4];

        i6 = i3;

     label7:
        if i6 >= i23 goto label9;

        $i14 = r4[i6];

        if $i14 != i0 goto label8;

        $i16 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i15 = i4 * $i16;

        $i17 = i6 + $i15;

        return $i17;

     label8:
        i6 = i6 + 1;

        goto label7;

     label9:
        return -1;
    }

    public int indexOf(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int,int)>(i0, 0);

        return $i1;
    }

    private int lastIndexOf(int)
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] r1;
        int[][] $r2;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter0: int;

        $i5 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i4 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_MASK>;

        i1 = $i5 & $i4;

        $i7 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_firstFree>;

        $i6 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_SHIFT>;

        i2 = $i7 >>> $i6;

     label1:
        if i2 < 0 goto label5;

        $r2 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        r1 = $r2[i2];

        if r1 == null goto label4;

        i3 = i1;

     label2:
        if i3 < 0 goto label4;

        $i8 = r1[i3];

        if $i8 != i0 goto label3;

        $i9 = r0.<org.apache.xml.utils.SuballocatedIntVector: int m_blocksize>;

        $i10 = i2 * $i9;

        $i11 = i3 + $i10;

        return $i11;

     label3:
        i3 = i3 + -1;

        goto label2;

     label4:
        i1 = 0;

        i2 = i2 + -1;

        goto label1;

     label5:
        return -1;
    }

    public final int[] getMap0()
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int[] $r1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        $r1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[] m_map0>;

        return $r1;
    }

    public final int[][] getMap()
    {
        org.apache.xml.utils.SuballocatedIntVector r0;
        int[][] $r1;

        r0 := @this: org.apache.xml.utils.SuballocatedIntVector;

        $r1 = r0.<org.apache.xml.utils.SuballocatedIntVector: int[][] m_map>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.xml.utils.SuballocatedIntVector: int NUMBLOCKS_DEFAULT> = 32;

        return;
    }
}
