public class org.apache.xalan.templates.ElemNumber extends org.apache.xalan.templates.ElemTemplateElement
{
    static final long serialVersionUID;
    private org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable;
    private org.apache.xpath.XPath m_countMatchPattern;
    private org.apache.xpath.XPath m_fromMatchPattern;
    private int m_level;
    private org.apache.xpath.XPath m_valueExpr;
    private org.apache.xalan.templates.AVT m_format_avt;
    private org.apache.xalan.templates.AVT m_lang_avt;
    private org.apache.xalan.templates.AVT m_lettervalue_avt;
    private org.apache.xalan.templates.AVT m_groupingSeparator_avt;
    private org.apache.xalan.templates.AVT m_groupingSize_avt;
    private static final org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable;

    public void <init>()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern> = null;

        r0.<org.apache.xalan.templates.ElemNumber: int m_level> = 1;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt> = null;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt> = null;

        return;
    }

    public void setCount(org.apache.xpath.XPath)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern> = r1;

        return;
    }

    public org.apache.xpath.XPath getCount()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        return $r1;
    }

    public void setFrom(org.apache.xpath.XPath)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern> = r1;

        return;
    }

    public org.apache.xpath.XPath getFrom()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        return $r1;
    }

    public void setLevel(int)
    {
        org.apache.xalan.templates.ElemNumber r0;
        int i0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        i0 := @parameter0: int;

        r0.<org.apache.xalan.templates.ElemNumber: int m_level> = i0;

        return;
    }

    public int getLevel()
    {
        org.apache.xalan.templates.ElemNumber r0;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $i0 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        return $i0;
    }

    public void setValue(org.apache.xpath.XPath)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPath;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr> = r1;

        return;
    }

    public org.apache.xpath.XPath getValue()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPath $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        return $r1;
    }

    public void setFormat(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getFormat()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        return $r1;
    }

    public void setLang(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getLang()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        return $r1;
    }

    public void setLetterValue(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getLetterValue()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        return $r1;
    }

    public void setGroupingSeparator(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getGroupingSeparator()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        return $r1;
    }

    public void setGroupingSize(org.apache.xalan.templates.AVT)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.AVT;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt> = r1;

        return;
    }

    public org.apache.xalan.templates.AVT getGroupingSize()
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.AVT $r1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        $r1 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        return $r1;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.templates.StylesheetRoot$ComposeState r2;
        java.util.Vector r3;
        org.apache.xpath.XPath $r4, $r6, $r11, $r12, $r17, $r19;
        org.apache.xalan.templates.AVT $r5, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        r2 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        r3 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        if null == $r4 goto label1;

        $r19 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        $i7 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r19.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>(r3, $i7);

     label1:
        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r5 goto label2;

        $r18 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        $i6 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r18.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i6);

     label2:
        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r6 goto label3;

        $r17 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $i5 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r17.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>(r3, $i5);

     label3:
        $r7 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r7 goto label4;

        $r16 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $i4 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r16.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i4);

     label4:
        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r8 goto label5;

        $r15 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        $i3 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r15.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i3);

     label5:
        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r9 goto label6;

        $r14 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        $i2 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r14.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i2);

     label6:
        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if null == $r10 goto label7;

        $r13 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        $i1 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r13.<org.apache.xalan.templates.AVT: void fixupVariables(java.util.Vector,int)>(r3, $i1);

     label7:
        $r11 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r11 goto label8;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        $i0 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r12.<org.apache.xpath.XPath: void fixupVariables(java.util.Vector,int)>(r3, $i0);

     label8:
        return;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return 35;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return "number";
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        int i0, $i1;
        java.lang.String r2;
        org.xml.sax.SAXException r3, $r7;
        org.apache.xpath.XPathContext $r4;
        org.apache.xml.serializer.SerializationHandler $r5;
        char[] $r6;
        javax.xml.transform.TransformerException $r8;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        $r4 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        i0 = virtualinvoke $r4.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String getCountString(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

     label1:
        $r5 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getResultTreeHandler()>();

        $r6 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        interfaceinvoke $r5.<org.apache.xml.serializer.SerializationHandler: void characters(char[],int,int)>($r6, 0, $i1);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r3 = $r7;

        $r8 = new javax.xml.transform.TransformerException;

        specialinvoke $r8.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label4:
        return;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    public org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        java.lang.Object[] $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNodeName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String getNodeName()>();

        $r2[1] = $r4;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void error(java.lang.String,java.lang.Object[])>("ER_CANNOT_ADD", $r2);

        return null;
    }

    int findAncestor(org.apache.xpath.XPathContext, org.apache.xpath.XPath, org.apache.xpath.XPath, int, org.apache.xalan.templates.ElemNumber) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0, r4;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.XPath r2, r3;
        int i0;
        org.apache.xml.dtm.DTM r5;
        double $d0, $d1;
        byte $b1, $b2;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: org.apache.xpath.XPath;

        r3 := @parameter2: org.apache.xpath.XPath;

        i0 := @parameter3: int;

        r4 := @parameter4: org.apache.xalan.templates.ElemNumber;

        r5 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

     label1:
        if -1 == i0 goto label4;

        if null == r2 goto label2;

        $d1 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b2 = $d1 cmpl #-Infinity;

        if $b2 == 0 goto label2;

        goto label4;

     label2:
        if null == r3 goto label3;

        $d0 = virtualinvoke r3.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b1 = $d0 cmpl #-Infinity;

        if $b1 == 0 goto label3;

        goto label4;

     label3:
        i0 = interfaceinvoke r5.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        goto label1;

     label4:
        return i0;
    }

    private int findPrecedingOrAncestorOrSelf(org.apache.xpath.XPathContext, org.apache.xpath.XPath, org.apache.xpath.XPath, int, org.apache.xalan.templates.ElemNumber) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0, r4;
        org.apache.xpath.XPathContext r1;
        org.apache.xpath.XPath r2, r3;
        int i0, i1;
        org.apache.xml.dtm.DTM r5;
        double $d0, $d1;
        byte $b2, $b3;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: org.apache.xpath.XPath;

        r3 := @parameter2: org.apache.xpath.XPath;

        i0 := @parameter3: int;

        r4 := @parameter4: org.apache.xalan.templates.ElemNumber;

        r5 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

     label1:
        if -1 == i0 goto label6;

        if null == r2 goto label2;

        $d1 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b3 = $d1 cmpl #-Infinity;

        if $b3 == 0 goto label2;

        i0 = -1;

        goto label6;

     label2:
        if null == r3 goto label3;

        $d0 = virtualinvoke r3.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b2 = $d0 cmpl #-Infinity;

        if $b2 == 0 goto label3;

        goto label6;

     label3:
        i1 = interfaceinvoke r5.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i0);

        if -1 != i1 goto label4;

        i0 = interfaceinvoke r5.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        goto label5;

     label4:
        i0 = interfaceinvoke r5.<org.apache.xml.dtm.DTM: int getLastChild(int)>(i1);

        if i0 != -1 goto label5;

        i0 = i1;

     label5:
        goto label1;

     label6:
        return i0;
    }

    org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        org.apache.xpath.XPath r2, $r8, $r12, $r14, $r16, $r24, $r26;
        org.apache.xml.dtm.DTM r3;
        org.apache.xalan.templates.ElemNumber$MyPrefixResolver r4, $r6, $r11;
        short $s1;
        java.lang.String $r5, $r9, $r21, $r22, $r30, $r32;
        org.w3c.dom.Node $r7, $r13;
        javax.xml.transform.ErrorListener $r10, $r15, $r17, $r25, $r28, $r33;
        java.lang.StringBuilder $r18, $r19, $r20, $r23, $r27, $r29, $r31;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        r3 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        if null != r2 goto label10;

        $s1 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i0);

        tableswitch($s1)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label05;
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label08;
            case 8: goto label06;
            case 9: goto label07;
            default: goto label09;
        };

     label01:
        $r5 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNamespaceURI(int)>(i0);

        if $r5 != null goto label02;

        $r11 = new org.apache.xalan.templates.ElemNumber$MyPrefixResolver;

        $r13 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        specialinvoke $r11.<org.apache.xalan.templates.ElemNumber$MyPrefixResolver: void <init>(org.apache.xalan.templates.ElemNumber,org.w3c.dom.Node,org.apache.xml.dtm.DTM,int,boolean)>(r0, $r13, r3, i0, 0);

        r4 = $r11;

        goto label03;

     label02:
        $r6 = new org.apache.xalan.templates.ElemNumber$MyPrefixResolver;

        $r7 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        specialinvoke $r6.<org.apache.xalan.templates.ElemNumber$MyPrefixResolver: void <init>(org.apache.xalan.templates.ElemNumber,org.w3c.dom.Node,org.apache.xml.dtm.DTM,int,boolean)>(r0, $r7, r3, i0, 1);

        r4 = $r6;

     label03:
        $r8 = new org.apache.xpath.XPath;

        $r9 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r10 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r8.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r9, r0, r4, 1, $r10);

        r2 = $r8;

        goto label10;

     label04:
        $r26 = new org.apache.xpath.XPath;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $r32 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r29 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r26.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r30, r0, r0, 1, $r33);

        r2 = $r26;

        goto label10;

     label05:
        $r24 = new org.apache.xpath.XPath;

        $r28 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r24.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("text()", r0, r0, 1, $r28);

        r2 = $r24;

        goto label10;

     label06:
        $r14 = new org.apache.xpath.XPath;

        $r17 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r14.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("comment()", r0, r0, 1, $r17);

        r2 = $r14;

        goto label10;

     label07:
        $r12 = new org.apache.xpath.XPath;

        $r15 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r12.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>("/", r0, r0, 1, $r15);

        r2 = $r12;

        goto label10;

     label08:
        $r16 = new org.apache.xpath.XPath;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pi(");

        $r21 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: java.lang.String getNodeName(int)>(i0);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r22 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25 = virtualinvoke r1.<org.apache.xpath.XPathContext: javax.xml.transform.ErrorListener getErrorListener()>();

        specialinvoke $r16.<org.apache.xpath.XPath: void <init>(java.lang.String,javax.xml.transform.SourceLocator,org.apache.xml.utils.PrefixResolver,int,javax.xml.transform.ErrorListener)>($r22, r0, r0, 1, $r25);

        r2 = $r16;

        goto label10;

     label09:
        r2 = null;

     label10:
        return r2;
    }

    java.lang.String getCountString(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i9, $i11, i14, i15;
        long[] r2;
        org.apache.xpath.XPathContext r3;
        org.apache.xalan.transformer.CountersTable r4;
        org.apache.xpath.objects.XObject r5;
        double d0, $d1, $d2;
        long l2, $l8, $l10;
        org.apache.xpath.XPath $r6, $r8;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;
        byte $b12, $b13;
        org.apache.xml.utils.NodeVector r9;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        r2 = null;

        r3 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        r4 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.CountersTable getCountersTable()>();

        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r6 goto label05;

        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        r5 = virtualinvoke $r8.<org.apache.xpath.XPath: org.apache.xpath.objects.XObject execute(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>(r3, i0, r0);

        $d2 = virtualinvoke r5.<org.apache.xpath.objects.XObject: double num()>();

        $d1 = $d2 + 0.5;

        d0 = staticinvoke <java.lang.Math: double floor(double)>($d1);

        $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z2 == 0 goto label01;

        return "NaN";

     label01:
        $b12 = d0 cmpg 0.0;

        if $b12 >= 0 goto label02;

        $z3 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z3 == 0 goto label02;

        return "-Infinity";

     label02:
        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label03;

        return "Infinity";

     label03:
        $b13 = d0 cmpl 0.0;

        if $b13 != 0 goto label04;

        return "0";

     label04:
        l2 = (long) d0;

        r2 = newarray (long)[1];

        r2[0] = l2;

        goto label10;

     label05:
        $i3 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i3 goto label06;

        r2 = newarray (long)[1];

        $i11 = virtualinvoke r4.<org.apache.xalan.transformer.CountersTable: int countNode(org.apache.xpath.XPathContext,org.apache.xalan.templates.ElemNumber,int)>(r3, r0, i0);

        $l10 = (long) $i11;

        r2[0] = $l10;

        goto label10;

     label06:
        $i4 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 1 != $i4 goto label07;

        $z0 = 1;

        goto label08;

     label07:
        $z0 = 0;

     label08:
        r9 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.NodeVector getMatchingAncestors(org.apache.xpath.XPathContext,int,boolean)>(r3, i0, $z0);

        $i5 = virtualinvoke r9.<org.apache.xml.utils.NodeVector: int size()>();

        i14 = $i5 - 1;

        if i14 < 0 goto label10;

        $i6 = i14 + 1;

        r2 = newarray (long)[$i6];

        i1 = i14;

     label09:
        if i1 < 0 goto label10;

        i15 = virtualinvoke r9.<org.apache.xml.utils.NodeVector: int elementAt(int)>(i1);

        $i7 = i14 - i1;

        $i9 = virtualinvoke r4.<org.apache.xalan.transformer.CountersTable: int countNode(org.apache.xpath.XPathContext,org.apache.xalan.templates.ElemNumber,int)>(r3, r0, i15);

        $l8 = (long) $i9;

        r2[$i7] = $l8;

        i1 = i1 + -1;

        goto label09;

     label10:
        if null == r2 goto label11;

        $r7 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String formatNumberList(org.apache.xalan.transformer.TransformerImpl,long[],int)>(r1, r2, i0);

        goto label12;

     label11:
        $r7 = "";

     label12:
        return $r7;
    }

    public int getPreviousNode(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPathContext r1;
        int i0, i1, i2, $i3;
        org.apache.xpath.XPath r2, r4;
        org.apache.xml.dtm.DTM r3;
        double $d0, $d1, $d2;
        byte $b4, $b5, $b7;
        short $s6;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i0);

        r3 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i3 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i3 goto label09;

        r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

     label01:
        if -1 == i0 goto label08;

        i1 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i0);

        if -1 != i1 goto label04;

        i1 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        if -1 == i1 goto label06;

        if null == r4 goto label02;

        $d2 = virtualinvoke r4.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i1);

        $b7 = $d2 cmpl #-Infinity;

        if $b7 != 0 goto label03;

     label02:
        $s6 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i1);

        if $s6 != 9 goto label06;

     label03:
        i0 = -1;

        goto label08;

     label04:
        i2 = i1;

     label05:
        if -1 == i2 goto label06;

        i2 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getLastChild(int)>(i1);

        if -1 == i2 goto label05;

        i1 = i2;

        goto label05;

     label06:
        i0 = i1;

        if -1 == i0 goto label07;

        if null == r2 goto label08;

        $d1 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b5 = $d1 cmpl #-Infinity;

        if $b5 == 0 goto label07;

        goto label08;

     label07:
        goto label01;

     label08:
        goto label10;

     label09:
        if -1 == i0 goto label10;

        i0 = interfaceinvoke r3.<org.apache.xml.dtm.DTM: int getPreviousSibling(int)>(i0);

        if -1 == i0 goto label09;

        if null == r2 goto label10;

        $d0 = virtualinvoke r2.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b4 = $d0 cmpl #-Infinity;

        if $b4 == 0 goto label09;

        goto label10;

     label10:
        return i0;
    }

    public int getTargetNode(org.apache.xpath.XPathContext, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPathContext r1;
        int i0, $i2, i3;
        org.apache.xpath.XPath r2, $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i0);

        $i2 = r0.<org.apache.xalan.templates.ElemNumber: int m_level>;

        if 3 != $i2 goto label1;

        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        i3 = specialinvoke r0.<org.apache.xalan.templates.ElemNumber: int findPrecedingOrAncestorOrSelf(org.apache.xpath.XPathContext,org.apache.xpath.XPath,org.apache.xpath.XPath,int,org.apache.xalan.templates.ElemNumber)>(r1, $r4, r2, i0, r0);

        goto label2;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        i3 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: int findAncestor(org.apache.xpath.XPathContext,org.apache.xpath.XPath,org.apache.xpath.XPath,int,org.apache.xalan.templates.ElemNumber)>(r1, $r3, r2, i0, r0);

     label2:
        return i3;
    }

    org.apache.xml.utils.NodeVector getMatchingAncestors(org.apache.xpath.XPathContext, int, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xpath.XPathContext r1;
        int i0;
        boolean z0;
        org.apache.xpath.NodeSetDTM r2, $r5;
        org.apache.xpath.XPath r3, $r7, $r9;
        org.apache.xml.dtm.DTM r4;
        org.apache.xml.dtm.DTMManager $r6;
        double $d0, $d1;
        byte $b1, $b2;
        java.io.PrintStream $r8;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r5 = new org.apache.xpath.NodeSetDTM;

        $r6 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTMManager getDTMManager()>();

        specialinvoke $r5.<org.apache.xpath.NodeSetDTM: void <init>(org.apache.xml.dtm.DTMManager)>($r6);

        r2 = $r5;

        r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath getCountMatchPattern(org.apache.xpath.XPathContext,int)>(r1, i0);

        r4 = virtualinvoke r1.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

     label1:
        if -1 == i0 goto label5;

        $r7 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r7 goto label2;

        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $d1 = virtualinvoke $r9.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b2 = $d1 cmpl #-Infinity;

        if $b2 == 0 goto label2;

        if z0 != 0 goto label2;

        goto label5;

     label2:
        if null != r3 goto label3;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Programmers error! countMatchPattern should never be null!");

     label3:
        $d0 = virtualinvoke r3.<org.apache.xpath.XPath: double getMatchScore(org.apache.xpath.XPathContext,int)>(r1, i0);

        $b1 = $d0 cmpl #-Infinity;

        if $b1 == 0 goto label4;

        virtualinvoke r2.<org.apache.xpath.NodeSetDTM: void addElement(int)>(i0);

        if z0 == 0 goto label4;

        goto label5;

     label4:
        i0 = interfaceinvoke r4.<org.apache.xml.dtm.DTM: int getParent(int)>(i0);

        goto label1;

     label5:
        return r2;
    }

    java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        int i0;
        java.util.Locale r2, $r7;
        org.apache.xpath.XPathContext r3;
        java.lang.String r4, $r8;
        org.apache.xalan.templates.AVT $r5, $r6;
        org.apache.xalan.transformer.MsgMgr $r9;
        org.apache.xml.dtm.DTM $r10;
        java.lang.Object[] $r11;
        org.w3c.dom.Node $r12;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        r2 = null;

        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r5 goto label2;

        r3 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        r4 = virtualinvoke $r6.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>(r3, i0, r0);

        if null == r4 goto label1;

        $r7 = new java.util.Locale;

        $r8 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>();

        specialinvoke $r7.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>($r8, "");

        r2 = $r7;

        if null != r2 goto label1;

        $r9 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>();

        $r10 = virtualinvoke r3.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $r12 = interfaceinvoke $r10.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i0);

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r4;

        virtualinvoke $r9.<org.apache.xalan.transformer.MsgMgr: void warn(javax.xml.transform.SourceLocator,org.w3c.dom.Node,org.w3c.dom.Node,java.lang.String,java.lang.Object[])>(r0, null, $r12, "WG_LOCALE_NOT_FOUND", $r11);

        r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label1:
        goto label3;

     label2:
        r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

     label3:
        return r2;
    }

    private java.text.DecimalFormat getNumberFormatter(org.apache.xalan.transformer.TransformerImpl, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        int i0, $i1, $i2, $i4;
        java.util.Locale r2, $r7;
        java.text.DecimalFormat r3;
        java.lang.String r4, r5, $r16, $r20, $r23;
        java.text.DecimalFormatSymbols r6;
        java.lang.Object $r8;
        org.apache.xalan.templates.AVT $r9, $r10, $r14, $r15, $r19, $r22;
        java.text.NumberFormat $r11;
        java.lang.Integer $r12;
        char $c3;
        org.apache.xpath.XPathContext $r13, $r21;
        boolean $z0;
        java.lang.Object[] $r17;
        org.apache.xalan.transformer.MsgMgr $r18;
        java.lang.NumberFormatException $r24;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        $r7 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        $r8 = virtualinvoke $r7.<java.util.Locale: java.lang.Object clone()>();

        r2 = (java.util.Locale) $r8;

        r3 = null;

        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r9 goto label1;

        $r22 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $r21 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r23 = virtualinvoke $r22.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r21, i0, r0);

        goto label2;

     label1:
        $r23 = null;

     label2:
        r4 = $r23;

        if r4 == null goto label3;

        $r15 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $z0 = virtualinvoke $r15.<org.apache.xalan.templates.AVT: boolean isSimple()>();

        if $z0 != 0 goto label3;

        $i4 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i4 == 1 goto label3;

        $r18 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xalan.transformer.MsgMgr getMsgMgr()>();

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = "name";

        $r19 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        $r20 = virtualinvoke $r19.<org.apache.xalan.templates.AVT: java.lang.String getName()>();

        $r17[1] = $r20;

        virtualinvoke $r18.<org.apache.xalan.transformer.MsgMgr: void warn(javax.xml.transform.SourceLocator,java.lang.String,java.lang.Object[])>(r0, "WG_ILLEGAL_ATTRIBUTE_VALUE", $r17);

     label3:
        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r10 goto label4;

        $r14 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        $r13 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r16 = virtualinvoke $r14.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r13, i0, r0);

        goto label5;

     label4:
        $r16 = null;

     label5:
        r5 = $r16;

        if null == r4 goto label9;

        if null == r5 goto label9;

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label9;

     label6:
        $r11 = staticinvoke <java.text.NumberFormat: java.text.NumberFormat getNumberInstance(java.util.Locale)>(r2);

        r3 = (java.text.DecimalFormat) $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r5);

        $i2 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        virtualinvoke r3.<java.text.DecimalFormat: void setGroupingSize(int)>($i2);

        r6 = virtualinvoke r3.<java.text.DecimalFormat: java.text.DecimalFormatSymbols getDecimalFormatSymbols()>();

        $c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0);

        virtualinvoke r6.<java.text.DecimalFormatSymbols: void setGroupingSeparator(char)>($c3);

        virtualinvoke r3.<java.text.DecimalFormat: void setDecimalFormatSymbols(java.text.DecimalFormatSymbols)>(r6);

        virtualinvoke r3.<java.text.DecimalFormat: void setGroupingUsed(boolean)>(1);

     label7:
        goto label9;

     label8:
        $r24 := @caughtexception;

        virtualinvoke r3.<java.text.DecimalFormat: void setGroupingUsed(boolean)>(0);

     label9:
        return r3;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }

    java.lang.String formatNumberList(org.apache.xalan.transformer.TransformerImpl, long[], int) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        long[] r2;
        int i0, i1, i2, i4, $i6, $i8, $i9, $i10;
        java.lang.String r3, r5, r6, r7, r8, r9, $r21, r25, r26, r27, r28;
        org.apache.xml.utils.FastStringBuffer r4;
        char c3, $c7;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer r10, $r13;
        java.lang.Throwable r11, $r24;
        org.apache.xalan.templates.AVT $r12, $r23;
        long $l5;
        java.lang.StringBuilder $r15, $r16, $r17, $r18, $r19, $r20;
        org.apache.xpath.XPathContext $r22;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r2 := @parameter1: long[];

        i0 := @parameter2: int;

        r4 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label01:
        i1 = lengthof r2;

        i2 = 1;

        c3 = 49;

        r6 = null;

        r7 = null;

        r8 = ".";

        z0 = 1;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r12 goto label02;

        $r23 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        $r22 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r21 = virtualinvoke $r23.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r22, i0, r0);

        goto label03;

     label02:
        $r21 = null;

     label03:
        r9 = $r21;

        if null != r9 goto label04;

        r9 = "1";

     label04:
        $r13 = new org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer;

        specialinvoke $r13.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: void <init>(org.apache.xalan.templates.ElemNumber,java.lang.String)>(r0, r9);

        r10 = $r13;

        i4 = 0;

     label05:
        if i4 >= i1 goto label15;

        $z3 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label12;

        r5 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $i6 = virtualinvoke r5.<java.lang.String: int length()>();

        $i8 = $i6 - 1;

        $c7 = virtualinvoke r5.<java.lang.String: char charAt(int)>($i8);

        $z5 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c7);

        if $z5 == 0 goto label06;

        i2 = virtualinvoke r5.<java.lang.String: int length()>();

        $i10 = i2 - 1;

        c3 = virtualinvoke r5.<java.lang.String: char charAt(int)>($i10);

        goto label12;

     label06:
        $z6 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean isLetterOrDigitAhead()>();

        if $z6 == 0 goto label10;

        r7 = r5;

     label07:
        $z7 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean nextIsSep()>();

        if $z7 == 0 goto label08;

        r25 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        r7 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label08:
        if z0 != 0 goto label09;

        r8 = r7;

     label09:
        r26 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        i2 = virtualinvoke r26.<java.lang.String: int length()>();

        $i9 = i2 - 1;

        c3 = virtualinvoke r26.<java.lang.String: char charAt(int)>($i9);

        goto label12;

     label10:
        r6 = r5;

     label11:
        $z4 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z4 == 0 goto label12;

        r27 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label11;

     label12:
        if null == r7 goto label13;

        if z0 == 0 goto label13;

        virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r7);

        goto label14;

     label13:
        if null == r8 goto label14;

        if z0 != 0 goto label14;

        virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r8);

     label14:
        $l5 = r2[i4];

        specialinvoke r0.<org.apache.xalan.templates.ElemNumber: void getFormattedNumber(org.apache.xalan.transformer.TransformerImpl,int,char,int,long,org.apache.xml.utils.FastStringBuffer)>(r1, i0, c3, i2, $l5, r4);

        z0 = 0;

        i4 = i4 + 1;

        goto label05;

     label15:
        $z1 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean isLetterOrDigitAhead()>();

        if $z1 == 0 goto label16;

        virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        goto label15;

     label16:
        if r6 == null goto label17;

        virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r6);

     label17:
        $z2 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label18;

        r28 = virtualinvoke r10.<org.apache.xalan.templates.ElemNumber$NumberFormatStringTokenizer: java.lang.String nextToken()>();

        virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r28);

        goto label17;

     label18:
        r3 = virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

     label19:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r4);

        goto label22;

     label20:
        $r24 := @caughtexception;

        r11 = $r24;

     label21:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r4);

        throw r11;

     label22:
        return r3;

        catch java.lang.Throwable from label01 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    private void getFormattedNumber(org.apache.xalan.transformer.TransformerImpl, int, char, int, long, org.apache.xml.utils.FastStringBuffer) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        int i0, i2, i4, i5, $i6;
        char c1;
        long l3;
        org.apache.xml.utils.FastStringBuffer r2, r4;
        java.lang.String r3, r6, r7, $r13, $r16, $r19, $r21, $r24, $r26, $r29, $r30, $r34, $r35, $r38, $r42, $r47, $r54, $r57, $r58, $r59, $r64, $r66, $r71, $r74, $r75, $r77;
        java.lang.Throwable r5, $r79;
        org.apache.xalan.templates.AVT $r8, $r73;
        java.util.Locale $r9, $r12, $r18, $r23, $r28, $r33, $r39, $r40, $r43, $r46, $r50, $r56, $r62, $r63, $r68;
        java.lang.Object $r10, $r15, $r17, $r22, $r27, $r32, $r41, $r44, $r48, $r51, $r53, $r61, $r67;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.xml.utils.res.CharArrayWrapper $r11, $r14, $r20, $r25, $r31, $r36, $r37, $r45, $r49, $r52, $r55, $r60, $r65, $r69, $r70, $r72, $r76;
        org.apache.xpath.XPathContext $r78;
        org.apache.xml.utils.res.XResourceBundle r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92;
        java.text.DecimalFormat r93;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        i0 := @parameter1: int;

        c1 := @parameter2: char;

        i2 := @parameter3: int;

        l3 := @parameter4: long;

        r2 := @parameter5: org.apache.xml.utils.FastStringBuffer;

        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if $r8 == null goto label01;

        $r73 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        $r78 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        $r77 = virtualinvoke $r73.<org.apache.xalan.templates.AVT: java.lang.String evaluate(org.apache.xpath.XPathContext,int,org.apache.xml.utils.PrefixResolver)>($r78, i0, r0);

        goto label02;

     label01:
        $r77 = null;

     label02:
        r3 = $r77;

        lookupswitch(c1)
        {
            case 65: goto label03;
            case 73: goto label12;
            case 97: goto label05;
            case 105: goto label13;
            case 945: goto label32;
            case 1072: goto label34;
            case 1488: goto label28;
            case 3665: goto label26;
            case 4304: goto label30;
            case 12354: goto label14;
            case 12356: goto label16;
            case 12450: goto label18;
            case 12452: goto label20;
            case 19968: goto label22;
            case 22777: goto label24;
            default: goto label36;
        };

     label03:
        $r70 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable>;

        if null != $r70 goto label04;

        $r68 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        r80 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r68);

        $r67 = virtualinvoke r80.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r76 = (org.apache.xml.utils.res.CharArrayWrapper) $r67;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable> = $r76;

     label04:
        $r69 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable>;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r69, r2);

        goto label43;

     label05:
        $r55 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable>;

        if null != $r55 goto label06;

        $r62 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        r81 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r62);

        $r61 = virtualinvoke r81.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r72 = (org.apache.xml.utils.res.CharArrayWrapper) $r61;

        r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable> = $r72;

     label06:
        r4 = staticinvoke <org.apache.xml.utils.StringBufferPool: org.apache.xml.utils.FastStringBuffer get()>();

     label07:
        $r65 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xml.utils.res.CharArrayWrapper m_alphaCountTable>;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r65, r4);

        $r66 = virtualinvoke r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String toString()>();

        $r63 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        $r64 = virtualinvoke $r66.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r63);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r64);

     label08:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r4);

        goto label11;

     label09:
        $r79 := @caughtexception;

        r5 = $r79;

     label10:
        staticinvoke <org.apache.xml.utils.StringBufferPool: void free(org.apache.xml.utils.FastStringBuffer)>(r4);

        throw r5;

     label11:
        goto label43;

     label12:
        $r71 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String long2roman(long,boolean)>(l3, 1);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r71);

        goto label43;

     label13:
        $r59 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String long2roman(long,boolean)>(l3, 1);

        $r56 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.util.Locale getLocale(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        $r57 = virtualinvoke $r59.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r56);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r57);

        goto label43;

     label14:
        $r33 = new java.util.Locale;

        specialinvoke $r33.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "HA");

        r82 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r33);

        if r3 == null goto label15;

        $z5 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z5 == 0 goto label15;

        $r34 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r82);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r34);

        goto label43;

     label15:
        $r32 = virtualinvoke r82.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r36 = (org.apache.xml.utils.res.CharArrayWrapper) $r32;

        $r35 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,org.apache.xml.utils.res.CharArrayWrapper)>(l3, $r36);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r35);

        goto label43;

     label16:
        $r28 = new java.util.Locale;

        specialinvoke $r28.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "HI");

        r83 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r28);

        if r3 == null goto label17;

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z4 == 0 goto label17;

        $r29 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r83);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r29);

        goto label43;

     label17:
        $r27 = virtualinvoke r83.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r31 = (org.apache.xml.utils.res.CharArrayWrapper) $r27;

        $r30 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,org.apache.xml.utils.res.CharArrayWrapper)>(l3, $r31);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r30);

        goto label43;

     label18:
        $r23 = new java.util.Locale;

        specialinvoke $r23.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "A");

        r84 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r23);

        if r3 == null goto label19;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z3 == 0 goto label19;

        $r24 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r84);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r24);

        goto label43;

     label19:
        $r22 = virtualinvoke r84.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r25 = (org.apache.xml.utils.res.CharArrayWrapper) $r22;

        $r26 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,org.apache.xml.utils.res.CharArrayWrapper)>(l3, $r25);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r26);

        goto label43;

     label20:
        $r18 = new java.util.Locale;

        specialinvoke $r18.<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>("ja", "JP", "I");

        r85 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r18);

        if r3 == null goto label21;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z2 == 0 goto label21;

        $r19 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r85);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r19);

        goto label43;

     label21:
        $r17 = virtualinvoke r85.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r20 = (org.apache.xml.utils.res.CharArrayWrapper) $r17;

        $r21 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String int2singlealphaCount(long,org.apache.xml.utils.res.CharArrayWrapper)>(l3, $r20);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r21);

        goto label43;

     label22:
        $r12 = new java.util.Locale;

        specialinvoke $r12.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "CN");

        r86 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r12);

        if r3 == null goto label23;

        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z1 == 0 goto label23;

        $r16 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r86);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r16);

        goto label43;

     label23:
        $r15 = virtualinvoke r86.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r14 = (org.apache.xml.utils.res.CharArrayWrapper) $r15;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r14, r2);

        goto label43;

     label24:
        $r9 = new java.util.Locale;

        specialinvoke $r9.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("zh", "TW");

        r87 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r9);

        if r3 == null goto label25;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z0 == 0 goto label25;

        $r13 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r87);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r13);

        goto label43;

     label25:
        $r10 = virtualinvoke r87.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r11 = (org.apache.xml.utils.res.CharArrayWrapper) $r10;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r11, r2);

        goto label43;

     label26:
        $r39 = new java.util.Locale;

        specialinvoke $r39.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("th", "");

        r88 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r39);

        if r3 == null goto label27;

        $z7 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z7 == 0 goto label27;

        $r42 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r88);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r42);

        goto label43;

     label27:
        $r44 = virtualinvoke r88.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r45 = (org.apache.xml.utils.res.CharArrayWrapper) $r44;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r45, r2);

        goto label43;

     label28:
        $r43 = new java.util.Locale;

        specialinvoke $r43.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("he", "");

        r89 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r43);

        if r3 == null goto label29;

        $z8 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z8 == 0 goto label29;

        $r47 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r89);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r47);

        goto label43;

     label29:
        $r48 = virtualinvoke r89.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r49 = (org.apache.xml.utils.res.CharArrayWrapper) $r48;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r49, r2);

        goto label43;

     label30:
        $r40 = new java.util.Locale;

        specialinvoke $r40.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("ka", "");

        r90 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r40);

        if r3 == null goto label31;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z6 == 0 goto label31;

        $r38 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r90);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r38);

        goto label43;

     label31:
        $r41 = virtualinvoke r90.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r37 = (org.apache.xml.utils.res.CharArrayWrapper) $r41;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r37, r2);

        goto label43;

     label32:
        $r50 = new java.util.Locale;

        specialinvoke $r50.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("el", "");

        r91 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r50);

        if r3 == null goto label33;

        $z10 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z10 == 0 goto label33;

        $r58 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r91);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r58);

        goto label43;

     label33:
        $r51 = virtualinvoke r91.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r60 = (org.apache.xml.utils.res.CharArrayWrapper) $r51;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r60, r2);

        goto label43;

     label34:
        $r46 = new java.util.Locale;

        specialinvoke $r46.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("cy", "");

        r92 = staticinvoke <org.apache.xml.utils.res.XResourceBundle: org.apache.xml.utils.res.XResourceBundle loadResourceBundle(java.lang.String,java.util.Locale)>("org.apache.xml.utils.res.XResources", $r46);

        if r3 == null goto label35;

        $z9 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("traditional");

        if $z9 == 0 goto label35;

        $r54 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String tradAlphaCount(long,org.apache.xml.utils.res.XResourceBundle)>(l3, r92);

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r54);

        goto label43;

     label35:
        $r53 = virtualinvoke r92.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("alphabet");

        $r52 = (org.apache.xml.utils.res.CharArrayWrapper) $r53;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void int2alphaCount(long,org.apache.xml.utils.res.CharArrayWrapper,org.apache.xml.utils.FastStringBuffer)>(l3, $r52, r2);

        goto label43;

     label36:
        r93 = specialinvoke r0.<org.apache.xalan.templates.ElemNumber: java.text.DecimalFormat getNumberFormatter(org.apache.xalan.transformer.TransformerImpl,int)>(r1, i0);

        if r93 != null goto label37;

        $r75 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(0);

        goto label38;

     label37:
        $r75 = virtualinvoke r93.<java.text.DecimalFormat: java.lang.String format(long)>(0L);

     label38:
        r6 = $r75;

        if r93 != null goto label39;

        $r74 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l3);

        goto label40;

     label39:
        $r74 = virtualinvoke r93.<java.text.DecimalFormat: java.lang.String format(long)>(l3);

     label40:
        r7 = $r74;

        $i6 = virtualinvoke r7.<java.lang.String: int length()>();

        i4 = i2 - $i6;

        i5 = 0;

     label41:
        if i5 >= i4 goto label42;

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r6);

        i5 = i5 + 1;

        goto label41;

     label42:
        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>(r7);

     label43:
        return;

        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    java.lang.String getZeroString()
    {
        org.apache.xalan.templates.ElemNumber r0;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        return "0";
    }

    protected java.lang.String int2singlealphaCount(long, org.apache.xml.utils.res.CharArrayWrapper)
    {
        org.apache.xalan.templates.ElemNumber r0;
        long l0, $l2;
        org.apache.xml.utils.res.CharArrayWrapper r1;
        int i1, $i4, $i5;
        byte $b3;
        java.lang.Character $r2;
        char $c6;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.xml.utils.res.CharArrayWrapper;

        i1 = virtualinvoke r1.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        $l2 = (long) i1;

        $b3 = l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String getZeroString()>();

        return $r4;

     label1:
        $r2 = new java.lang.Character;

        $i4 = (int) l0;

        $i5 = $i4 - 1;

        $c6 = virtualinvoke r1.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>($i5);

        specialinvoke $r2.<java.lang.Character: void <init>(char)>($c6);

        $r3 = virtualinvoke $r2.<java.lang.Character: java.lang.String toString()>();

        return $r3;
    }

    protected void int2alphaCount(long, org.apache.xml.utils.res.CharArrayWrapper, org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xalan.templates.ElemNumber r0;
        long l0, l5, $l9, $l11, $l21;
        org.apache.xml.utils.res.CharArrayWrapper r1;
        org.apache.xml.utils.FastStringBuffer r2;
        int i1, i2, i3, i4, $i6, $i7, $i10, $i12, $i14, $i15, $i17, $i18, $i20, $i24, $i25;
        char[] r3, r4;
        char $c8, $c13, $c23;
        byte $b16, $b19, $b22;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.xml.utils.res.CharArrayWrapper;

        r2 := @parameter2: org.apache.xml.utils.FastStringBuffer;

        i1 = virtualinvoke r1.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        r3 = newarray (char)[i1];

        i2 = 0;

     label1:
        $i6 = i1 - 1;

        if i2 >= $i6 goto label2;

        $i25 = i2 + 1;

        $c23 = virtualinvoke r1.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(i2);

        r3[$i25] = $c23;

        i2 = i2 + 1;

        goto label1;

     label2:
        $c8 = virtualinvoke r1.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(i2);

        r3[0] = $c8;

        r4 = newarray (char)[100];

        $i7 = lengthof r4;

        i3 = $i7 - 1;

        i4 = 1;

        l5 = 0L;

     label3:
        if i4 == 0 goto label4;

        $b22 = l5 cmp 0L;

        if $b22 == 0 goto label5;

        $i24 = i1 - 1;

        if i4 != $i24 goto label5;

     label4:
        $i10 = i1 - 1;

        $l21 = (long) $i10;

        goto label6;

     label5:
        $l21 = 0L;

     label6:
        l5 = $l21;

        $l9 = l0 + l5;

        $i12 = (int) $l9;

        i4 = $i12 % i1;

        $l11 = (long) i1;

        l0 = l0 / $l11;

        if i4 != 0 goto label7;

        $b19 = l0 cmp 0L;

        if $b19 != 0 goto label7;

        goto label8;

     label7:
        $i14 = i3;

        i3 = i3 + -1;

        $c13 = r3[i4];

        r4[$i14] = $c13;

        $b16 = l0 cmp 0L;

        if $b16 > 0 goto label3;

     label8:
        $i20 = i3 + 1;

        $i15 = lengthof r4;

        $i18 = $i15 - i3;

        $i17 = $i18 - 1;

        virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: void append(char[],int,int)>(r4, $i20, $i17);

        return;
    }

    protected java.lang.String tradAlphaCount(long, org.apache.xml.utils.res.XResourceBundle)
    {
        org.apache.xalan.templates.ElemNumber r0;
        long l0, l3, $l10, $l11, $l23, $l29, $l31, $l33, $l34, $l41, $l42, $l59;
        org.apache.xml.utils.res.XResourceBundle r1;
        char[] r2, r24, r26;
        int i1, i2, i4, i5, $i8, $i9, $i12, $i14, $i15, $i16, $i17, $i18, $i20, $i21, $i24, $i26, $i28, $i32, $i35, $i38, $i39, $i40, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i52, $i56, $i57, $i58, $i61, $i65, $i66, i67, i68, i69, i70, i71;
        org.apache.xml.utils.res.IntArrayWrapper r3;
        org.apache.xml.utils.res.StringArrayWrapper r4, $r12;
        java.lang.String r5, r6, $r13, $r15, $r19;
        org.apache.xml.utils.res.LongArrayWrapper r7, $r17;
        org.apache.xml.utils.res.CharArrayWrapper r8, r9, $r22, $r23, r25;
        byte $b6, $b13, $b27, $b30, $b36, $b37, $b53, $b60;
        char c7, $c19, $c22, $c25, $c43, $c51, $c54, $c55, $c62, $c63, $c64;
        java.lang.Object $r10, $r11, $r14, $r16, $r18, $r20, $r21;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        l0 := @parameter0: long;

        r1 := @parameter1: org.apache.xml.utils.res.XResourceBundle;

        $b6 = l0 cmp 9223372036854775807L;

        if $b6 <= 0 goto label01;

        virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: void error(java.lang.String)>("ER_NUMBER_TOO_BIG");

        return "#error";

     label01:
        r2 = newarray (char)[100];

        i1 = 0;

        $r11 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("numberGroups");

        r3 = (org.apache.xml.utils.res.IntArrayWrapper) $r11;

        $r10 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("tables");

        $r12 = (org.apache.xml.utils.res.StringArrayWrapper) $r10;

        r4 = (org.apache.xml.utils.res.StringArrayWrapper) $r12;

        r5 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.String getString(java.lang.String)>("numbering");

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("multiplicative-additive");

        if $z0 == 0 goto label19;

        r6 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.String getString(java.lang.String)>("multiplierOrder");

        $r18 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("multiplier");

        $r17 = (org.apache.xml.utils.res.LongArrayWrapper) $r18;

        r7 = (org.apache.xml.utils.res.LongArrayWrapper) $r17;

        $r16 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("zero");

        r8 = (org.apache.xml.utils.res.CharArrayWrapper) $r16;

        i2 = 0;

     label02:
        $i28 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: int getLength()>();

        if i2 >= $i28 goto label03;

        $l59 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: long getLong(int)>(i2);

        $b60 = l0 cmp $l59;

        if $b60 >= 0 goto label03;

        i2 = i2 + 1;

        goto label02;

     label03:
        $i32 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: int getLength()>();

        if i2 < $i32 goto label04;

        goto label19;

     label04:
        $l31 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: long getLong(int)>(i2);

        $b30 = l0 cmp $l31;

        if $b30 >= 0 goto label07;

        $i65 = virtualinvoke r8.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        if $i65 != 0 goto label05;

        i2 = i2 + 1;

        goto label18;

     label05:
        $i66 = i1 - 1;

        $c63 = r2[$i66];

        $c64 = virtualinvoke r8.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(0);

        if $c63 == $c64 goto label06;

        $i61 = i1;

        i1 = i1 + 1;

        $c62 = virtualinvoke r8.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(0);

        r2[$i61] = $c62;

     label06:
        i2 = i2 + 1;

        goto label18;

     label07:
        $l29 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: long getLong(int)>(i2);

        $b36 = l0 cmp $l29;

        if $b36 < 0 goto label18;

        $l34 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: long getLong(int)>(i2);

        l3 = l0 / $l34;

        $l33 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: long getLong(int)>(i2);

        l0 = l0 % $l33;

        i4 = 0;

     label08:
        $i39 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getLength()>();

        if i4 >= $i39 goto label17;

        $i40 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getInt(int)>(i4);

        $l41 = (long) $i40;

        $l42 = l3 / $l41;

        $b37 = $l42 cmp 0L;

        if $b37 > 0 goto label09;

        i4 = i4 + 1;

        goto label08;

     label09:
        $r19 = virtualinvoke r4.<org.apache.xml.utils.res.StringArrayWrapper: java.lang.String getString(int)>(i4);

        $r20 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>($r19);

        r9 = (org.apache.xml.utils.res.CharArrayWrapper) $r20;

        $i38 = virtualinvoke r9.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        $i46 = $i38 + 1;

        r24 = newarray (char)[$i46];

        i5 = 0;

     label10:
        $i47 = virtualinvoke r9.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        if i5 >= $i47 goto label11;

        $i56 = i5 + 1;

        $c55 = virtualinvoke r9.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(i5);

        r24[$i56] = $c55;

        i5 = i5 + 1;

        goto label10;

     label11:
        $i48 = i5 - 1;

        $c43 = virtualinvoke r9.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>($i48);

        r24[0] = $c43;

        $i44 = (int) l3;

        $i45 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getInt(int)>(i4);

        i67 = $i44 / $i45;

        if i67 != 0 goto label12;

        $b53 = l3 cmp 0L;

        if $b53 != 0 goto label12;

        goto label17;

     label12:
        $r21 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>("multiplierChar");

        $r23 = (org.apache.xml.utils.res.CharArrayWrapper) $r21;

        $r22 = (org.apache.xml.utils.res.CharArrayWrapper) $r23;

        c7 = virtualinvoke $r22.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(i2);

        $i52 = lengthof r24;

        if i67 >= $i52 goto label16;

        $z1 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("precedes");

        if $z1 == 0 goto label13;

        i68 = i1 + 1;

        r2[i1] = c7;

        i1 = i68 + 1;

        $c54 = r24[i67];

        r2[i68] = $c54;

        goto label17;

     label13:
        if i67 != 1 goto label14;

        $i58 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: int getLength()>();

        $i57 = $i58 - 1;

        if i2 != $i57 goto label14;

        goto label15;

     label14:
        $i49 = i1;

        i1 = i1 + 1;

        $c51 = r24[i67];

        r2[$i49] = $c51;

     label15:
        $i50 = i1;

        i1 = i1 + 1;

        r2[$i50] = c7;

        goto label17;

     label16:
        return "#error";

     label17:
        i2 = i2 + 1;

     label18:
        $i35 = virtualinvoke r7.<org.apache.xml.utils.res.LongArrayWrapper: int getLength()>();

        if i2 < $i35 goto label03;

     label19:
        i69 = 0;

     label20:
        $i8 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getLength()>();

        if i69 >= $i8 goto label27;

        $i9 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getInt(int)>(i69);

        $l11 = (long) $i9;

        $l10 = l0 / $l11;

        $b13 = $l10 cmp 0L;

        if $b13 > 0 goto label21;

        i69 = i69 + 1;

        goto label20;

     label21:
        $r15 = virtualinvoke r4.<org.apache.xml.utils.res.StringArrayWrapper: java.lang.String getString(int)>(i69);

        $r14 = virtualinvoke r1.<org.apache.xml.utils.res.XResourceBundle: java.lang.Object getObject(java.lang.String)>($r15);

        r25 = (org.apache.xml.utils.res.CharArrayWrapper) $r14;

        $i12 = virtualinvoke r25.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        $i15 = $i12 + 1;

        r26 = newarray (char)[$i15];

        i70 = 0;

     label22:
        $i16 = virtualinvoke r25.<org.apache.xml.utils.res.CharArrayWrapper: int getLength()>();

        if i70 >= $i16 goto label23;

        $i26 = i70 + 1;

        $c25 = virtualinvoke r25.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>(i70);

        r26[$i26] = $c25;

        i70 = i70 + 1;

        goto label22;

     label23:
        $i14 = i70 - 1;

        $c19 = virtualinvoke r25.<org.apache.xml.utils.res.CharArrayWrapper: char getChar(int)>($i14);

        r26[0] = $c19;

        $i20 = (int) l0;

        $i17 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getInt(int)>(i69);

        i71 = $i20 / $i17;

        $i18 = virtualinvoke r3.<org.apache.xml.utils.res.IntArrayWrapper: int getInt(int)>(i69);

        $l23 = (long) $i18;

        l0 = l0 % $l23;

        if i71 != 0 goto label24;

        $b27 = l0 cmp 0L;

        if $b27 != 0 goto label24;

        goto label27;

     label24:
        $i24 = lengthof r26;

        if i71 >= $i24 goto label25;

        $i21 = i1;

        i1 = i1 + 1;

        $c22 = r26[i71];

        r2[$i21] = $c22;

        goto label26;

     label25:
        return "#error";

     label26:
        i69 = i69 + 1;

        goto label20;

     label27:
        $r13 = new java.lang.String;

        specialinvoke $r13.<java.lang.String: void <init>(char[],int,int)>(r2, 0, i1);

        return $r13;
    }

    protected java.lang.String long2roman(long, boolean)
    {
        org.apache.xalan.templates.ElemNumber r0;
        long l0, $l4, $l7, $l9, $l10;
        boolean z0;
        java.lang.String r1, $r9, $r17, $r22;
        int i1;
        byte $b2, $b3, $b5, $b6, $b8;
        org.apache.xalan.transformer.DecimalToRoman[] $r2, $r4, $r7, $r13, $r15, $r19;
        org.apache.xalan.transformer.DecimalToRoman $r3, $r5, $r10, $r12, $r18, $r20;
        java.lang.StringBuilder $r6, $r8, $r11, $r14, $r16, $r21;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        $b2 = l0 cmp 0L;

        if $b2 > 0 goto label1;

        $r22 = virtualinvoke r0.<org.apache.xalan.templates.ElemNumber: java.lang.String getZeroString()>();

        return $r22;

     label1:
        r1 = "";

        i1 = 0;

        $b3 = l0 cmp 3999L;

        if $b3 > 0 goto label5;

     label2:
        $r2 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r3 = $r2[i1];

        $l4 = $r3.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        $b5 = l0 cmp $l4;

        if $b5 < 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r15 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r18 = $r15[i1];

        $r17 = $r18.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_postLetter>;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r1 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r20 = $r19[i1];

        $l10 = $r20.<org.apache.xalan.transformer.DecimalToRoman: long m_postValue>;

        l0 = l0 - $l10;

        goto label2;

     label3:
        if z0 == 0 goto label4;

        $r4 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r5 = $r4[i1];

        $l7 = $r5.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        $b8 = l0 cmp $l7;

        if $b8 < 0 goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r10 = $r7[i1];

        $r9 = $r10.<org.apache.xalan.transformer.DecimalToRoman: java.lang.String m_preLetter>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable>;

        $r12 = $r13[i1];

        $l9 = $r12.<org.apache.xalan.transformer.DecimalToRoman: long m_preValue>;

        l0 = l0 - $l9;

     label4:
        i1 = i1 + 1;

        $b6 = l0 cmp 0L;

        if $b6 > 0 goto label2;

        goto label6;

     label5:
        r1 = "#error";

     label6:
        return r1;
    }

    public void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.ElemNumber r0;
        org.apache.xalan.templates.XSLTVisitor r1;
        boolean z0;
        org.apache.xpath.XPath $r2, $r3, $r4, $r16, $r17, $r18, $r19, $r22, $r23;
        org.apache.xalan.templates.AVT $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.apache.xpath.Expression $r15, $r20, $r21;

        r0 := @this: org.apache.xalan.templates.ElemNumber;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label8;

        $r2 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        if null == $r2 goto label1;

        $r22 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        $r21 = virtualinvoke $r22.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r23 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_countMatchPattern>;

        virtualinvoke $r21.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r23, r1);

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        if null == $r3 goto label2;

        $r17 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        $r20 = virtualinvoke $r17.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r19 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_fromMatchPattern>;

        virtualinvoke $r20.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r19, r1);

     label2:
        $r4 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        if null == $r4 goto label3;

        $r16 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        $r15 = virtualinvoke $r16.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        $r18 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xpath.XPath m_valueExpr>;

        virtualinvoke $r15.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>($r18, r1);

     label3:
        $r5 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        if null == $r5 goto label4;

        $r14 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_format_avt>;

        virtualinvoke $r14.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label4:
        $r6 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        if null == $r6 goto label5;

        $r13 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSeparator_avt>;

        virtualinvoke $r13.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label5:
        $r7 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        if null == $r7 goto label6;

        $r12 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_groupingSize_avt>;

        virtualinvoke $r12.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label6:
        $r8 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        if null == $r8 goto label7;

        $r11 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lang_avt>;

        virtualinvoke $r11.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label7:
        $r9 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        if null == $r9 goto label8;

        $r10 = r0.<org.apache.xalan.templates.ElemNumber: org.apache.xalan.templates.AVT m_lettervalue_avt>;

        virtualinvoke $r10.<org.apache.xalan.templates.AVT: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

     label8:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }

    static void <clinit>()
    {
        org.apache.xalan.transformer.DecimalToRoman[] $r0;
        org.apache.xalan.transformer.DecimalToRoman $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        <org.apache.xalan.templates.ElemNumber: long serialVersionUID> = 8118472298274407610L;

        $r0 = newarray (org.apache.xalan.transformer.DecimalToRoman)[7];

        $r1 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r1.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1000L, "M", 900L, "CM");

        $r0[0] = $r1;

        $r2 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r2.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(500L, "D", 400L, "CD");

        $r0[1] = $r2;

        $r3 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r3.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(100L, "C", 90L, "XC");

        $r0[2] = $r3;

        $r4 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r4.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(50L, "L", 40L, "XL");

        $r0[3] = $r4;

        $r5 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r5.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(10L, "X", 9L, "IX");

        $r0[4] = $r5;

        $r6 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r6.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(5L, "V", 4L, "IV");

        $r0[5] = $r6;

        $r7 = new org.apache.xalan.transformer.DecimalToRoman;

        specialinvoke $r7.<org.apache.xalan.transformer.DecimalToRoman: void <init>(long,java.lang.String,long,java.lang.String)>(1L, "I", 1L, "I");

        $r0[6] = $r7;

        <org.apache.xalan.templates.ElemNumber: org.apache.xalan.transformer.DecimalToRoman[] m_romanConvertTable> = $r0;

        return;
    }
}
