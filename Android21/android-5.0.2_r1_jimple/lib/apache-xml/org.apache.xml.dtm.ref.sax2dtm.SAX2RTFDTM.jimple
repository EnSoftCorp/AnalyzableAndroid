public class org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM extends org.apache.xml.dtm.ref.sax2dtm.SAX2DTM
{
    private static final boolean DEBUG;
    private int m_currentDocumentNode;
    org.apache.xml.utils.IntStack mark_size;
    org.apache.xml.utils.IntStack mark_data_size;
    org.apache.xml.utils.IntStack mark_char_size;
    org.apache.xml.utils.IntStack mark_doq_size;
    org.apache.xml.utils.IntStack mark_nsdeclset_size;
    org.apache.xml.utils.IntStack mark_nsdeclelem_size;
    int m_emptyNodeCount;
    int m_emptyNSDeclSetCount;
    int m_emptyNSDeclSetElemsCount;
    int m_emptyDataCount;
    int m_emptyCharsCount;
    int m_emptyDataQNCount;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0, $z1, $z2, $z3;
        org.apache.xml.utils.IntStack $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Vector $r11, $r12;
        org.apache.xml.utils.SuballocatedIntVector $r13, $r14, $r15, $r17;
        org.apache.xml.utils.FastStringBuffer $r16;
        org.apache.xml.utils.IntVector $r18, $r20;
        org.apache.xml.utils.StringVector $r19;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean)>(r1, r2, i0, r3, r4, z0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode> = -1;

        $r5 = new org.apache.xml.utils.IntStack;

        specialinvoke $r5.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_size> = $r5;

        $r6 = new org.apache.xml.utils.IntStack;

        specialinvoke $r6.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_data_size> = $r6;

        $r7 = new org.apache.xml.utils.IntStack;

        specialinvoke $r7.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_char_size> = $r7;

        $r8 = new org.apache.xml.utils.IntStack;

        specialinvoke $r8.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_doq_size> = $r8;

        $r9 = new org.apache.xml.utils.IntStack;

        specialinvoke $r9.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclset_size> = $r9;

        $r10 = new org.apache.xml.utils.IntStack;

        specialinvoke $r10.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclelem_size> = $r10;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_useSourceLocationProperty> = 0;

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_useSourceLocationProperty>;

        if $z1 == 0 goto label01;

        $r19 = new org.apache.xml.utils.StringVector;

        specialinvoke $r19.<org.apache.xml.utils.StringVector: void <init>()>();

        goto label02;

     label01:
        $r19 = null;

     label02:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.StringVector m_sourceSystemId> = $r19;

        $z2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_useSourceLocationProperty>;

        if $z2 == 0 goto label03;

        $r20 = new org.apache.xml.utils.IntVector;

        specialinvoke $r20.<org.apache.xml.utils.IntVector: void <init>()>();

        goto label04;

     label03:
        $r20 = null;

     label04:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntVector m_sourceLine> = $r20;

        $z3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_useSourceLocationProperty>;

        if $z3 == 0 goto label05;

        $r18 = new org.apache.xml.utils.IntVector;

        specialinvoke $r18.<org.apache.xml.utils.IntVector: void <init>()>();

        goto label06;

     label05:
        $r18 = null;

     label06:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntVector m_sourceColumn> = $r18;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNodeCount> = $i1;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        if $r11 != null goto label07;

        $i2 = 0;

        goto label08;

     label07:
        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        $i2 = virtualinvoke $r12.<java.util.Vector: int size()>();

     label08:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNSDeclSetCount> = $i2;

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if $r14 != null goto label09;

        $i3 = 0;

        goto label10;

     label09:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i3 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

     label10:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNSDeclSetElemsCount> = $i3;

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyDataCount> = $i4;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i5 = virtualinvoke $r16.<org.apache.xml.utils.FastStringBuffer: int size()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyCharsCount> = $i5;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i6 = virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyDataQNCount> = $i6;

        return;
    }

    public int getDocument()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int makeNodeHandle(int)>($i0);

        return $i1;
    }

    public int getDocumentRoot(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        int i0, i1, $i3;
        short $s2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int makeNodeIdentity(int)>(i0);

     label1:
        if i1 == -1 goto label3;

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: short _type(int)>(i1);

        if $s2 != 9 goto label2;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int makeNodeHandle(int)>(i1);

        return $i3;

     label2:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int _parent(int)>(i1);

        goto label1;

     label3:
        return -1;
    }

    protected int _documentRoot(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        int i0, i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int _parent(int)>(i0);

     label2:
        if i1 == -1 goto label3;

        i0 = i1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int _parent(int)>(i0);

        goto label2;

     label3:
        return i0;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        java.util.Vector $r1;
        org.apache.xml.utils.IntStack $r2, $r3;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_endDocumentOccured> = 0;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_prefixMappings> = $r1;

        $r2 = new org.apache.xml.utils.IntStack;

        specialinvoke $r2.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack m_contextIndexes> = $r2;

        $r3 = new org.apache.xml.utils.IntStack;

        specialinvoke $r3.<org.apache.xml.utils.IntStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack m_parents> = $r3;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode> = $i0;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void startDocument()>();

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: void charactersFlush()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i0);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode>;

        $i2 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        if $i2 != -2 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i5);

     label1:
        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_previous>;

        if -1 == $i3 goto label2;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_previous>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(-1, $i4);

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack m_parents> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_prefixMappings> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack m_contextIndexes> = null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_currentDocumentNode> = -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_endDocumentOccured> = 1;

        return;
    }

    public void pushRewindMark()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        boolean $z0;
        java.lang.NullPointerException $r1;
        int[][][] $r2;
        int $i0, $i2, $i4, $i6, $i8, $i10;
        org.apache.xml.utils.IntStack $r3, $r6, $r9, $r11, $r13, $r15;
        java.util.Vector $r4, $r5;
        org.apache.xml.utils.SuballocatedIntVector $r7, $r8, $r10, $r14;
        org.apache.xml.utils.FastStringBuffer $r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_indexing>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int[][][] m_elemIndexes>;

        if $r2 == null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("Coding error; Don\'t try to mark/rewind an indexed DTM");

        throw $r1;

     label2:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_size>;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r3.<org.apache.xml.utils.IntStack: int push(int)>($i0);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclset_size>;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        if $r4 != null goto label3;

        $i2 = 0;

        goto label4;

     label3:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        $i2 = virtualinvoke $r5.<java.util.Vector: int size()>();

     label4:
        virtualinvoke $r6.<org.apache.xml.utils.IntStack: int push(int)>($i2);

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclelem_size>;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if $r7 != null goto label5;

        $i4 = 0;

        goto label6;

     label5:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i4 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

     label6:
        virtualinvoke $r9.<org.apache.xml.utils.IntStack: int push(int)>($i4);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_data_size>;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        virtualinvoke $r11.<org.apache.xml.utils.IntStack: int push(int)>($i6);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_char_size>;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i8 = virtualinvoke $r12.<org.apache.xml.utils.FastStringBuffer: int size()>();

        virtualinvoke $r13.<org.apache.xml.utils.IntStack: int push(int)>($i8);

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_doq_size>;

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        $i10 = virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        virtualinvoke $r15.<org.apache.xml.utils.IntStack: int push(int)>($i10);

        return;
    }

    public boolean popRewindMark()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        boolean z0, $z1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        org.apache.xml.utils.IntStack $r1, $r2, $r8, $r11, $r12, $r16, $r17;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r18, $r19;
        int[][][] $r9;
        java.util.Vector $r10, $r20;
        org.apache.xml.utils.FastStringBuffer $r15;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_size>;

        z0 = virtualinvoke $r1.<org.apache.xml.utils.IntStack: boolean empty()>();

        if z0 == 0 goto label01;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNodeCount>;

        goto label02;

     label01:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_size>;

        $i2 = virtualinvoke $r2.<org.apache.xml.utils.IntStack: int pop()>();

     label02:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size> = $i2;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i3);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i4);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i5);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i6);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i7);

        $r9 = (int[][][]) null;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int[][][] m_elemIndexes> = $r9;

        if z0 == 0 goto label03;

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNSDeclSetCount>;

        goto label04;

     label03:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclset_size>;

        $i8 = virtualinvoke $r8.<org.apache.xml.utils.IntStack: int pop()>();

     label04:
        i0 = $i8;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        if $r10 == null goto label05;

        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: java.util.Vector m_namespaceDeclSets>;

        virtualinvoke $r20.<java.util.Vector: void setSize(int)>(i0);

     label05:
        if z0 == 0 goto label06;

        $i9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyNSDeclSetElemsCount>;

        goto label07;

     label06:
        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_nsdeclelem_size>;

        $i9 = virtualinvoke $r11.<org.apache.xml.utils.IntStack: int pop()>();

     label07:
        i1 = $i9;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if $r13 == null goto label08;

        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        virtualinvoke $r19.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>(i1);

     label08:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_data>;

        if z0 == 0 goto label09;

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyDataCount>;

        goto label10;

     label09:
        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_data_size>;

        $i10 = virtualinvoke $r12.<org.apache.xml.utils.IntStack: int pop()>();

     label10:
        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i10);

        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.FastStringBuffer m_chars>;

        if z0 == 0 goto label11;

        $i11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyCharsCount>;

        goto label12;

     label11:
        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_char_size>;

        $i11 = virtualinvoke $r16.<org.apache.xml.utils.IntStack: int pop()>();

     label12:
        virtualinvoke $r15.<org.apache.xml.utils.FastStringBuffer: void setLength(int)>($i11);

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        if z0 == 0 goto label13;

        $i13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_emptyDataQNCount>;

        goto label14;

     label13:
        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: org.apache.xml.utils.IntStack mark_doq_size>;

        $i13 = virtualinvoke $r17.<org.apache.xml.utils.IntStack: int pop()>();

     label14:
        virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: void setSize(int)>($i13);

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: int m_size>;

        if $i12 != 0 goto label15;

        $z1 = 1;

        goto label16;

     label15:
        $z1 = 0;

     label16:
        return $z1;
    }

    public boolean isTreeIncomplete()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean m_endDocumentOccured>;

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.sax2dtm.SAX2RTFDTM: boolean DEBUG> = 0;

        return;
    }
}
