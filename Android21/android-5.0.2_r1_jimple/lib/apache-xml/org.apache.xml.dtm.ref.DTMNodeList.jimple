public class org.apache.xml.dtm.ref.DTMNodeList extends org.apache.xml.dtm.ref.DTMNodeListBase
{
    private org.apache.xml.dtm.DTMIterator m_iter;

    private void <init>()
    {
        org.apache.xml.dtm.ref.DTMNodeList r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeList;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMNodeListBase: void <init>()>();

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMIterator)
    {
        org.apache.xml.dtm.ref.DTMNodeList r0;
        org.apache.xml.dtm.DTMIterator r1, $r3, $r4, $r5, $r6;
        int i0;
        java.lang.CloneNotSupportedException $r7;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeList;

        r1 := @parameter0: org.apache.xml.dtm.DTMIterator;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMNodeListBase: void <init>()>();

        if r1 == null goto label5;

        i0 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: int getCurrentPos()>();

     label1:
        $r3 = interfaceinvoke r1.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter> = $r3;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter> = r1;

     label4:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r4.<org.apache.xml.dtm.DTMIterator: void setShouldCacheNodes(boolean)>(1);

        $r5 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r5.<org.apache.xml.dtm.DTMIterator: void runTo(int)>(-1);

        $r6 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        interfaceinvoke $r6.<org.apache.xml.dtm.DTMIterator: void setCurrentPos(int)>(i0);

     label5:
        return;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.apache.xml.dtm.DTMIterator getDTMIterator()
    {
        org.apache.xml.dtm.ref.DTMNodeList r0;
        org.apache.xml.dtm.DTMIterator $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeList;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        return $r1;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.xml.dtm.ref.DTMNodeList r0;
        int i0, i1;
        org.apache.xml.dtm.DTMIterator $r1, $r2, $r3;
        org.apache.xml.dtm.DTM $r4;
        org.w3c.dom.Node $r5;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeList;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label2;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        i1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int item(int)>(i0);

        if i1 != -1 goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        $r4 = interfaceinvoke $r3.<org.apache.xml.dtm.DTMIterator: org.apache.xml.dtm.DTM getDTM(int)>(i1);

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTM: org.w3c.dom.Node getNode(int)>(i1);

        return $r5;

     label2:
        return null;
    }

    public int getLength()
    {
        org.apache.xml.dtm.ref.DTMNodeList r0;
        org.apache.xml.dtm.DTMIterator $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMNodeList;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMNodeList: org.apache.xml.dtm.DTMIterator m_iter>;

        $i0 = interfaceinvoke $r2.<org.apache.xml.dtm.DTMIterator: int getLength()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }
}
