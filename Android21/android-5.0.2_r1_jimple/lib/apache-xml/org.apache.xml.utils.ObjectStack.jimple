public class org.apache.xml.utils.ObjectStack extends org.apache.xml.utils.ObjectVector
{

    public void <init>()
    {
        org.apache.xml.utils.ObjectStack r0;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        specialinvoke r0.<org.apache.xml.utils.ObjectVector: void <init>()>();

        return;
    }

    public void <init>(int)
    {
        org.apache.xml.utils.ObjectStack r0;
        int i0;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.xml.utils.ObjectVector: void <init>(int)>(i0);

        return;
    }

    public void <init>(org.apache.xml.utils.ObjectStack)
    {
        org.apache.xml.utils.ObjectStack r0, r1;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        r1 := @parameter0: org.apache.xml.utils.ObjectStack;

        specialinvoke r0.<org.apache.xml.utils.ObjectVector: void <init>(org.apache.xml.utils.ObjectVector)>(r1);

        return;
    }

    public java.lang.Object push(java.lang.Object)
    {
        org.apache.xml.utils.ObjectStack r0;
        java.lang.Object r1;
        java.lang.Object[] r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        r1 := @parameter0: java.lang.Object;

        $i0 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xml.utils.ObjectStack: int m_mapSize>;

        if $i2 < $i1 goto label1;

        $i7 = r0.<org.apache.xml.utils.ObjectStack: int m_mapSize>;

        $i6 = r0.<org.apache.xml.utils.ObjectStack: int m_blocksize>;

        $i8 = $i7 + $i6;

        r0.<org.apache.xml.utils.ObjectStack: int m_mapSize> = $i8;

        $i9 = r0.<org.apache.xml.utils.ObjectStack: int m_mapSize>;

        r2 = newarray (java.lang.Object)[$i9];

        $r4 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i10 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i11 = $i10 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i11);

        r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map> = r2;

     label1:
        $r3 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i3 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $r3[$i3] = r1;

        $i4 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i5 = $i4 + 1;

        r0.<org.apache.xml.utils.ObjectStack: int m_firstFree> = $i5;

        return r1;
    }

    public java.lang.Object pop()
    {
        org.apache.xml.utils.ObjectStack r0;
        java.lang.Object r1;
        int $i0, $i1, $i2;
        java.lang.Object[] $r2, $r3;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        $r2 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i0 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.utils.ObjectStack: int m_firstFree> = $i1;

        r1 = $r2[$i1];

        $r3 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i2 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $r3[$i2] = null;

        return r1;
    }

    public void quickPop(int)
    {
        org.apache.xml.utils.ObjectStack r0;
        int i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i2 = $i1 - i0;

        r0.<org.apache.xml.utils.ObjectStack: int m_firstFree> = $i2;

        return;
    }

    public java.lang.Object peek()
    {
        org.apache.xml.utils.ObjectStack r0;
        int $i0, $i1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.util.EmptyStackException $r5;

        r0 := @this: org.apache.xml.utils.ObjectStack;

     label1:
        $r2 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i0 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i1 = $i0 - 1;

        $r3 = $r2[$i1];

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.util.EmptyStackException;

        specialinvoke $r5.<java.util.EmptyStackException: void <init>()>();

        throw $r5;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public java.lang.Object peek(int)
    {
        org.apache.xml.utils.ObjectStack r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.util.EmptyStackException $r5;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i2 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i1 = 1 + i0;

        $i3 = $i2 - $i1;

        $r3 = $r2[$i3];

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.util.EmptyStackException;

        specialinvoke $r5.<java.util.EmptyStackException: void <init>()>();

        throw $r5;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setTop(java.lang.Object)
    {
        org.apache.xml.utils.ObjectStack r0;
        java.lang.Object r1;
        int $i0, $i1;
        java.lang.Object[] $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        java.util.EmptyStackException $r5;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r3 = r0.<org.apache.xml.utils.ObjectStack: java.lang.Object[] m_map>;

        $i0 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        $i1 = $i0 - 1;

        $r3[$i1] = r1;

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.util.EmptyStackException;

        specialinvoke $r5.<java.util.EmptyStackException: void <init>()>();

        throw $r5;

     label4:
        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean empty()
    {
        org.apache.xml.utils.ObjectStack r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        $i0 = r0.<org.apache.xml.utils.ObjectStack: int m_firstFree>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int search(java.lang.Object)
    {
        org.apache.xml.utils.ObjectStack r0;
        java.lang.Object r1;
        int i0, $i1, $i2;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        r1 := @parameter0: java.lang.Object;

        i0 = virtualinvoke r0.<org.apache.xml.utils.ObjectStack: int lastIndexOf(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $i1 = virtualinvoke r0.<org.apache.xml.utils.ObjectStack: int size()>();

        $i2 = $i1 - i0;

        return $i2;

     label1:
        return -1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xml.utils.ObjectStack r0, $r2;
        java.lang.Object $r1;

        r0 := @this: org.apache.xml.utils.ObjectStack;

        $r1 = specialinvoke r0.<org.apache.xml.utils.ObjectVector: java.lang.Object clone()>();

        $r2 = (org.apache.xml.utils.ObjectStack) $r1;

        return $r2;
    }
}
