public class org.apache.xalan.templates.RedundentExprEliminator extends org.apache.xalan.templates.XSLTVisitor
{
    java.util.Vector m_paths;
    java.util.Vector m_absPaths;
    boolean m_isSameContext;
    org.apache.xalan.templates.AbsPathChecker m_absPathChecker;
    private static int m_uniquePseudoVarID;
    static final java.lang.String PSUEDOVARNAMESPACE;
    public static final boolean DEBUG;
    public static final boolean DIAGNOSE_NUM_PATHS_REDUCED;
    public static final boolean DIAGNOSE_MULTISTEPLIST;
    org.apache.xalan.templates.VarNameCollector m_varNameCollector;

    public void <init>()
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.AbsPathChecker $r1;
        org.apache.xalan.templates.VarNameCollector $r2;
        java.util.Vector $r3;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        specialinvoke r0.<org.apache.xalan.templates.XSLTVisitor: void <init>()>();

        $r1 = new org.apache.xalan.templates.AbsPathChecker;

        specialinvoke $r1.<org.apache.xalan.templates.AbsPathChecker: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.AbsPathChecker m_absPathChecker> = $r1;

        $r2 = new org.apache.xalan.templates.VarNameCollector;

        specialinvoke $r2.<org.apache.xalan.templates.VarNameCollector: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector> = $r2;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 1;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths> = $r3;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = null;

        return;
    }

    public void eleminateRedundentLocals(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r1, $r2);

        return;
    }

    public void eleminateRedundentGlobals(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        java.util.Vector $r2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r1, $r2);

        return;
    }

    protected void eleminateRedundent(org.apache.xalan.templates.ElemTemplateElement, java.util.Vector)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        java.util.Vector r2;
        int i0, i3, i4, $i5;
        org.apache.xpath.ExpressionOwner r3;
        java.lang.Object $r4;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: java.util.Vector;

        i0 = virtualinvoke r2.<java.util.Vector: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $r4 = virtualinvoke r2.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r3 = (org.apache.xpath.ExpressionOwner) $r4;

        if null == r3 goto label2;

        $i5 = i3 + 1;

        i4 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: int findAndEliminateRedundant(int,int,org.apache.xpath.ExpressionOwner,org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>($i5, i3, r3, r1, r2);

        if i4 <= 0 goto label2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateSharedPartialPaths(org.apache.xalan.templates.ElemTemplateElement,java.util.Vector)>(r1, r2);

        return;
    }

    protected void eleminateSharedPartialPaths(org.apache.xalan.templates.ElemTemplateElement, java.util.Vector)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        java.util.Vector r2, $r5;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r3, r4;
        boolean z0, $z1;
        int i0, i1, $i2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: java.util.Vector;

        r3 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder createMultistepExprList(java.util.Vector)>(r2);

        if null == r3 goto label7;

        $r5 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r2 != $r5 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        i0 = r3.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int m_stepCount>;

        i1 = i0 - 1;

     label3:
        if i1 < 1 goto label7;

        r4 = r3;

     label4:
        if null == r4 goto label6;

        $i2 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int m_stepCount>;

        if $i2 >= i1 goto label5;

        goto label6;

     label5:
        r3 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder matchAndEliminatePartialPaths(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,boolean,int,org.apache.xalan.templates.ElemTemplateElement)>(r4, r3, z0, i1, r1);

        r4 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        goto label4;

     label6:
        i1 = i1 + -1;

        goto label3;

     label7:
        return;
    }

    protected org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder matchAndEliminatePartialPaths(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, boolean, int, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r1, r2, r5, r6, r7, $r27;
        boolean z0, $z1, $z2;
        int i0;
        org.apache.xalan.templates.ElemTemplateElement r3, $r20, r33;
        org.apache.xpath.axes.WalkingIterator r4, r8, r10, r11, r15;
        org.apache.xalan.templates.ElemVariable r12;
        org.apache.xpath.ExpressionOwner r13, $r16, $r17, $r19, $r24, $r25;
        org.apache.xpath.axes.LocPathIterator r14;
        org.apache.xpath.Expression $r18, $r21, $r22, $r28;
        org.apache.xml.utils.QName $r23;
        java.lang.Object $r26, $r30;
        java.lang.CloneNotSupportedException $r29, $r31;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        r2 := @parameter1: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r3 := @parameter4: org.apache.xalan.templates.ElemTemplateElement;

        $r17 = r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        if null != $r17 goto label01;

        return r2;

     label01:
        $r16 = r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r18 = interfaceinvoke $r16.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r4 = (org.apache.xpath.axes.WalkingIterator) $r18;

        $z1 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean partialIsVariable(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,int)>(r1, i0);

        if $z1 == 0 goto label02;

        return r2;

     label02:
        r5 = null;

        r6 = null;

        r7 = r2;

     label03:
        if null == r7 goto label13;

        if r7 == r1 goto label12;

        $r25 = r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        if null == $r25 goto label12;

        $r24 = r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r28 = interfaceinvoke $r24.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r8 = (org.apache.xpath.axes.WalkingIterator) $r28;

        $z2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean stepsEqual(org.apache.xpath.axes.WalkingIterator,org.apache.xpath.axes.WalkingIterator,int)>(r4, r8, i0);

        if $z2 == 0 goto label12;

        if null != r5 goto label08;

     label04:
        $r30 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: java.lang.Object clone()>();

        r5 = (org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder) $r30;

        r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner> = null;

     label05:
        goto label07;

     label06:
        $r29 := @caughtexception;

     label07:
        r6 = r5;

        r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = null;

     label08:
        $r26 = virtualinvoke r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: java.lang.Object clone()>();

        $r27 = (org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder) $r26;

        r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = $r27;

        r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner> = null;

     label09:
        goto label11;

     label10:
        $r31 := @caughtexception;

     label11:
        r6 = r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        r6.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = null;

     label12:
        r7 = r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        goto label03;

     label13:
        if null == r5 goto label17;

        if z0 == 0 goto label14;

        $r20 = r3;

        goto label15;

     label14:
        $r20 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r5);

     label15:
        r33 = $r20;

        $r19 = r5.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r21 = interfaceinvoke $r19.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r10 = (org.apache.xpath.axes.WalkingIterator) $r21;

        r11 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xpath.axes.WalkingIterator createIteratorFromSteps(org.apache.xpath.axes.WalkingIterator,int)>(r10, i0);

        r12 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPseudoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r33, r11, z0);

     label16:
        if null == r5 goto label17;

        r13 = r5.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r22 = interfaceinvoke r13.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r15 = (org.apache.xpath.axes.WalkingIterator) $r22;

        $r23 = virtualinvoke r12.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        r14 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xpath.axes.LocPathIterator changePartToRef(org.apache.xml.utils.QName,org.apache.xpath.axes.WalkingIterator,int,boolean)>($r23, r15, i0, z0);

        interfaceinvoke r13.<org.apache.xpath.ExpressionOwner: void setExpression(org.apache.xpath.Expression)>(r14);

        r5 = r5.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        goto label16;

     label17:
        return r2;

        catch java.lang.CloneNotSupportedException from label04 to label05 with label06;
        catch java.lang.CloneNotSupportedException from label08 to label09 with label10;
    }

    boolean partialIsVariable(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, int)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r1;
        int i0;
        org.apache.xpath.axes.WalkingIterator r2;
        org.apache.xpath.ExpressionOwner $r3;
        org.apache.xpath.Expression $r4;
        org.apache.xpath.axes.AxesWalker $r5;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        i0 := @parameter1: int;

        if 1 != i0 goto label1;

        $r3 = r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r4 = interfaceinvoke $r3.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r2 = (org.apache.xpath.axes.WalkingIterator) $r4;

        $r5 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $z0 = $r5 instanceof org.apache.xpath.axes.FilterExprWalker;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void diagnoseLineNumber(org.apache.xpath.Expression)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.Expression r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        java.lang.StringBuilder $r3, $r5, $r7, $r8, $r9;
        java.io.PrintStream $r4;
        java.lang.String $r6, $r10;
        int $i0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.Expression;

        r2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r1);

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r6 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getSystemId()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Line ");

        $i0 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: int getLineNumber()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    protected org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r1, r4;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        org.apache.xalan.templates.ElemTemplateElement[] r2;
        int[] r3;
        org.apache.xalan.templates.ElemTemplateElement r5, $r6, $r7, $r8, $r9, $r11, r13;
        boolean $z0, $z1, z2;
        org.apache.xpath.ExpressionOwner $r10;
        org.apache.xpath.Expression $r12;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        i0 = virtualinvoke r1.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int getLength()>();

        r2 = newarray (org.apache.xalan.templates.ElemTemplateElement)[i0];

        r3 = newarray (int)[i0];

        r4 = r1;

        i1 = 10000;

        i2 = 0;

     label01:
        if i2 >= i0 goto label03;

        $r10 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r12 = interfaceinvoke $r10.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r5 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>($r12);

        r2[i2] = r5;

        i3 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: int countAncestors(org.apache.xalan.templates.ElemTemplateElement)>(r5);

        r3[i2] = i3;

        if i3 >= i1 goto label02;

        i1 = i3;

     label02:
        r4 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        i2 = i2 + 1;

        goto label01;

     label03:
        i7 = 0;

     label04:
        if i7 >= i0 goto label07;

        $i5 = r3[i7];

        if $i5 <= i1 goto label06;

        $i6 = r3[i7];

        i8 = $i6 - i1;

        i9 = 0;

     label05:
        if i9 >= i8 goto label06;

        $r9 = r2[i7];

        $r11 = virtualinvoke $r9.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r2[i7] = $r11;

        i9 = i9 + 1;

        goto label05;

     label06:
        i7 = i7 + 1;

        goto label04;

     label07:
        $i4 = i1;

        i1 = i1 + -1;

        if $i4 < 0 goto label14;

        z2 = 1;

        r13 = r2[0];

        i10 = 1;

     label08:
        if i10 >= i0 goto label10;

        $r8 = r2[i10];

        if r13 == $r8 goto label09;

        z2 = 0;

        goto label10;

     label09:
        i10 = i10 + 1;

        goto label08;

     label10:
        if z2 == 0 goto label11;

        $z0 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean isNotSameAsOwner(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder,org.apache.xalan.templates.ElemTemplateElement)>(r1, r13);

        if $z0 == 0 goto label11;

        $z1 = virtualinvoke r13.<org.apache.xalan.templates.ElemTemplateElement: boolean canAcceptVariables()>();

        if $z1 == 0 goto label11;

        return r13;

     label11:
        i11 = 0;

     label12:
        if i11 >= i0 goto label13;

        $r6 = r2[i11];

        $r7 = virtualinvoke $r6.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r2[i11] = $r7;

        i11 = i11 + 1;

        goto label12;

     label13:
        goto label07;

     label14:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>(0, "Could not find common ancestor!!!");

        return null;
    }

    protected boolean isNotSameAsOwner(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r1, r3;
        org.apache.xalan.templates.ElemTemplateElement r2, r4;
        org.apache.xpath.ExpressionOwner $r5;
        org.apache.xpath.Expression $r6;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        r3 = r1;

     label1:
        if null == r3 goto label3;

        $r5 = r3.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r6 = interfaceinvoke $r5.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r4 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>($r6);

        if r4 != r2 goto label2;

        return 0;

     label2:
        r3 = r3.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        goto label1;

     label3:
        return 1;
    }

    protected int countAncestors(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        int i0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        i0 = 0;

     label1:
        if null == r1 goto label2;

        i0 = i0 + 1;

        r1 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        goto label1;

     label2:
        return i0;
    }

    protected void diagnoseMultistepList(int, int, boolean)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        int i0, i1;
        boolean z0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r6, $r7;
        java.io.PrintStream $r2, $r9, $r10;
        java.lang.String $r8;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if i0 <= 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found multistep matches: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" length");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r8);

        if z0 == 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>(" (global)");

        goto label2;

     label1:
        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println()>();

     label2:
        return;
    }

    protected org.apache.xpath.axes.LocPathIterator changePartToRef(org.apache.xml.utils.QName, org.apache.xpath.axes.WalkingIterator, int, boolean)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xml.utils.QName r1;
        org.apache.xpath.axes.WalkingIterator r2;
        int i0, $i1, $i2, i3;
        boolean z0, $z1;
        org.apache.xpath.operations.Variable r3, $r7;
        org.apache.xalan.templates.ElemTemplateElement r4;
        org.apache.xalan.templates.StylesheetRoot r5;
        java.util.Vector r6;
        org.apache.xpath.axes.FilterExprIteratorSimple $r8, r13;
        org.apache.xpath.ExpressionNode $r9;
        org.apache.xpath.axes.FilterExprWalker $r10, r12;
        org.apache.xpath.axes.AxesWalker r11;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r7 = new org.apache.xpath.operations.Variable;

        specialinvoke $r7.<org.apache.xpath.operations.Variable: void <init>()>();

        r3 = $r7;

        virtualinvoke r3.<org.apache.xpath.operations.Variable: void setQName(org.apache.xml.utils.QName)>(r1);

        virtualinvoke r3.<org.apache.xpath.operations.Variable: void setIsGlobal(boolean)>(z0);

        if z0 == 0 goto label1;

        r4 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r2);

        r5 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>();

        r6 = virtualinvoke r5.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i1 = virtualinvoke r6.<java.util.Vector: int size()>();

        $i2 = $i1 - 1;

        virtualinvoke r3.<org.apache.xpath.operations.Variable: void setIndex(int)>($i2);

     label1:
        r11 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i3 = 0;

     label2:
        if i3 >= i0 goto label5;

        if null == r11 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z1, "Walker should not be null!");

        r11 = virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        i3 = i3 + 1;

        goto label2;

     label5:
        if null == r11 goto label6;

        $r10 = new org.apache.xpath.axes.FilterExprWalker;

        specialinvoke $r10.<org.apache.xpath.axes.FilterExprWalker: void <init>(org.apache.xpath.axes.WalkingIterator)>(r2);

        r12 = $r10;

        virtualinvoke r12.<org.apache.xpath.axes.FilterExprWalker: void setInnerExpression(org.apache.xpath.Expression)>(r3);

        virtualinvoke r12.<org.apache.xpath.axes.FilterExprWalker: void exprSetParent(org.apache.xpath.ExpressionNode)>(r2);

        virtualinvoke r12.<org.apache.xpath.axes.FilterExprWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(r11);

        virtualinvoke r11.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(r12);

        virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: void setFirstWalker(org.apache.xpath.axes.AxesWalker)>(r12);

        return r2;

     label6:
        $r8 = new org.apache.xpath.axes.FilterExprIteratorSimple;

        specialinvoke $r8.<org.apache.xpath.axes.FilterExprIteratorSimple: void <init>(org.apache.xpath.Expression)>(r3);

        r13 = $r8;

        $r9 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.ExpressionNode exprGetParent()>();

        virtualinvoke r13.<org.apache.xpath.axes.FilterExprIteratorSimple: void exprSetParent(org.apache.xpath.ExpressionNode)>($r9);

        return r13;
    }

    protected org.apache.xpath.axes.WalkingIterator createIteratorFromSteps(org.apache.xpath.axes.WalkingIterator, int)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.axes.WalkingIterator r1, r2, $r5;
        int i0, i1;
        org.apache.xpath.axes.AxesWalker r3, r4, $r7, $r9;
        org.apache.xml.utils.PrefixResolver $r6;
        java.lang.Object $r8, $r10;
        java.lang.CloneNotSupportedException $r11, r13;
        org.apache.xml.utils.WrappedRuntimeException $r12;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter1: int;

        $r5 = new org.apache.xpath.axes.WalkingIterator;

        $r6 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xml.utils.PrefixResolver getPrefixResolver()>();

        specialinvoke $r5.<org.apache.xpath.axes.WalkingIterator: void <init>(org.apache.xml.utils.PrefixResolver)>($r6);

        r2 = $r5;

     label1:
        $r7 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $r8 = virtualinvoke $r7.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r3 = (org.apache.xpath.axes.AxesWalker) $r8;

        virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: void setFirstWalker(org.apache.xpath.axes.AxesWalker)>(r3);

        virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>(r2);

        i1 = 1;

     label2:
        if i1 >= i0 goto label3;

        $r9 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        $r10 = virtualinvoke $r9.<org.apache.xpath.axes.AxesWalker: java.lang.Object clone()>();

        r4 = (org.apache.xpath.axes.AxesWalker) $r10;

        virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(r4);

        virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: void setLocPathIterator(org.apache.xpath.axes.LocPathIterator)>(r2);

        r3 = r4;

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>(null);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r13 = $r11;

        $r12 = new org.apache.xml.utils.WrappedRuntimeException;

        specialinvoke $r12.<org.apache.xml.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r13);

        throw $r12;

     label6:
        return r2;

        catch java.lang.CloneNotSupportedException from label1 to label4 with label5;
    }

    protected boolean stepsEqual(org.apache.xpath.axes.WalkingIterator, org.apache.xpath.axes.WalkingIterator, int)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.axes.WalkingIterator r1, r2;
        int i0, i1;
        org.apache.xpath.axes.AxesWalker r3, r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        r2 := @parameter1: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter2: int;

        r3 = virtualinvoke r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        r4 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        if null == r3 goto label2;

        if null != r4 goto label3;

     label2:
        return 0;

     label3:
        $z1 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: boolean deepEquals(org.apache.xpath.Expression)>(r4);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        r3 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        r4 = virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        i1 = i1 + 1;

        goto label1;

     label5:
        if null != r3 goto label6;

        if null == r4 goto label7;

     label6:
        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z0, "Total match is incorrect!");

        return 1;
    }

    protected org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder createMultistepExprList(java.util.Vector)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector r1;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r2, $r7;
        int i0, i1, i2, $i3;
        org.apache.xpath.ExpressionOwner r3;
        org.apache.xpath.axes.LocPathIterator r4;
        java.lang.Object $r5;
        org.apache.xpath.Expression $r6;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: java.util.Vector;

        r2 = null;

        i0 = virtualinvoke r1.<java.util.Vector: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        $r5 = virtualinvoke r1.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (org.apache.xpath.ExpressionOwner) $r5;

        if null != r3 goto label2;

        goto label4;

     label2:
        $r6 = interfaceinvoke r3.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r4 = (org.apache.xpath.axes.LocPathIterator) $r6;

        i2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: int countSteps(org.apache.xpath.axes.LocPathIterator)>(r4);

        if i2 <= 1 goto label4;

        if null != r2 goto label3;

        $r7 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r7.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r0, r3, i2, null);

        r2 = $r7;

        goto label4;

     label3:
        r2 = virtualinvoke r2.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder addInSortedOrder(org.apache.xpath.ExpressionOwner,int)>(r3, i2);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        if null == r2 goto label6;

        $i3 = virtualinvoke r2.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: int getLength()>();

        if $i3 > 1 goto label7;

     label6:
        return null;

     label7:
        return r2;
    }

    protected int findAndEliminateRedundant(int, int, org.apache.xpath.ExpressionOwner, org.apache.xalan.templates.ElemTemplateElement, java.util.Vector) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        int i0, i1, i2, i3, i4, i5;
        org.apache.xpath.ExpressionOwner r1, r8, $r14, r24;
        org.apache.xalan.templates.ElemTemplateElement r2, $r12, r20;
        java.util.Vector r3, $r11;
        org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder r4, r5, $r15, $r18, $r19;
        org.apache.xpath.Expression r6, r9, $r13;
        boolean z0, z1, $z2;
        org.apache.xpath.axes.LocPathIterator r7, r10, r21;
        org.apache.xpath.XPath $r16;
        java.lang.Object $r17;
        org.apache.xalan.templates.ElemVariable r22;
        org.apache.xml.utils.QName r23;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xpath.ExpressionOwner;

        r2 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        r3 := @parameter4: java.util.Vector;

        r4 = null;

        r5 = null;

        i2 = 0;

        i3 = virtualinvoke r3.<java.util.Vector: int size()>();

        r6 = interfaceinvoke r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r11 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r3 != $r11 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        r7 = (org.apache.xpath.axes.LocPathIterator) r6;

        i4 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: int countSteps(org.apache.xpath.axes.LocPathIterator)>(r7);

        i5 = i0;

     label03:
        if i5 >= i3 goto label06;

        $r17 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i5);

        r8 = (org.apache.xpath.ExpressionOwner) $r17;

        if null == r8 goto label05;

        r9 = interfaceinvoke r8.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        z1 = virtualinvoke r9.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>(r7);

        if z1 == 0 goto label05;

        r10 = (org.apache.xpath.axes.LocPathIterator) r9;

        if null != r4 goto label04;

        $r18 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r18.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r0, r1, i4, null);

        r4 = $r18;

        r5 = r4;

        i2 = i2 + 1;

     label04:
        $r19 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r19.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r0, r8, i4, null);

        r5.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next> = $r19;

        r5 = r5.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>(null, i5);

        i2 = i2 + 1;

     label05:
        i5 = i5 + 1;

        goto label03;

     label06:
        if 0 != i2 goto label07;

        if z0 == 0 goto label07;

        $r15 = new org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder;

        specialinvoke $r15.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: void <init>(org.apache.xalan.templates.RedundentExprEliminator,org.apache.xpath.ExpressionOwner,int,org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r0, r1, i4, null);

        r4 = $r15;

        i2 = i2 + 1;

     label07:
        if null == r4 goto label12;

        if z0 == 0 goto label08;

        $r12 = r2;

        goto label09;

     label08:
        $r12 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement findCommonAncestor(org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder)>(r4);

     label09:
        r20 = $r12;

        $r14 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        $r13 = interfaceinvoke $r14.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        r21 = (org.apache.xpath.axes.LocPathIterator) $r13;

        r22 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPseudoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r20, r21, z0);

        r23 = virtualinvoke r22.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

     label10:
        if null == r4 goto label11;

        r24 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xpath.ExpressionOwner m_exprOwner>;

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>(r23, r24, r3, r20);

        r4 = r4.<org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder: org.apache.xalan.templates.RedundentExprEliminator$MultistepExprHolder m_next>;

        goto label10;

     label11:
        $r16 = virtualinvoke r22.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r16, i1);

     label12:
        return i2;
    }

    protected int oldFindAndEliminateRedundant(int, int, org.apache.xpath.ExpressionOwner, org.apache.xalan.templates.ElemTemplateElement, java.util.Vector) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        int i0, i1, i2, i3, i4;
        org.apache.xpath.ExpressionOwner r1, r7;
        org.apache.xalan.templates.ElemTemplateElement r2;
        java.util.Vector r3, $r11, $r12;
        org.apache.xml.utils.QName r4, r17;
        boolean z0, z1, z2, $z3;
        org.apache.xpath.Expression r5, r8;
        org.apache.xpath.axes.LocPathIterator r6, r9;
        org.apache.xalan.templates.ElemVariable r10, r16;
        org.apache.xpath.XPath $r13, $r15;
        java.lang.Object $r14;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xpath.ExpressionOwner;

        r2 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        r3 := @parameter4: java.util.Vector;

        r4 = null;

        z0 = 0;

        i2 = 0;

        i3 = virtualinvoke r3.<java.util.Vector: int size()>();

        r5 = interfaceinvoke r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        $r11 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r3 != $r11 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z1 = $z3;

        r6 = (org.apache.xpath.axes.LocPathIterator) r5;

        i4 = i0;

     label3:
        if i4 >= i3 goto label7;

        $r14 = virtualinvoke r3.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r7 = (org.apache.xpath.ExpressionOwner) $r14;

        if null == r7 goto label6;

        r8 = interfaceinvoke r7.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        z2 = virtualinvoke r8.<org.apache.xpath.Expression: boolean deepEquals(org.apache.xpath.Expression)>(r6);

        if z2 == 0 goto label6;

        r9 = (org.apache.xpath.axes.LocPathIterator) r8;

        if z0 != 0 goto label5;

        z0 = 1;

        r10 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPseudoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r2, r6, z1);

        if null != r10 goto label4;

        return 0;

     label4:
        r4 = virtualinvoke r10.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>(r4, r1, r3, r2);

        $r15 = virtualinvoke r10.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r15, i1);

        i2 = i2 + 1;

     label5:
        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>(r4, r7, r3, r2);

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>(null, i4);

        i2 = i2 + 1;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        if 0 != i2 goto label9;

        $r12 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r3 != $r12 goto label9;

        r16 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createPseudoVarDecl(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,boolean)>(r2, r6, 1);

        if null != r16 goto label8;

        return 0;

     label8:
        r17 = virtualinvoke r16.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void changeToVarRef(org.apache.xml.utils.QName,org.apache.xpath.ExpressionOwner,java.util.Vector,org.apache.xalan.templates.ElemTemplateElement)>(r17, r1, r3, r2);

        $r13 = virtualinvoke r16.<org.apache.xalan.templates.ElemVariable: org.apache.xpath.XPath getSelect()>();

        virtualinvoke r3.<java.util.Vector: void setElementAt(java.lang.Object,int)>($r13, i1);

        i2 = i2 + 1;

     label9:
        return i2;
    }

    protected int countSteps(org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.axes.LocPathIterator r1;
        org.apache.xpath.axes.WalkingIterator r2;
        org.apache.xpath.axes.AxesWalker r3;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        $z0 = r1 instanceof org.apache.xpath.axes.WalkingIterator;

        if $z0 == 0 goto label3;

        r2 = (org.apache.xpath.axes.WalkingIterator) r1;

        r3 = virtualinvoke r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        i0 = 0;

     label1:
        if null == r3 goto label2;

        i0 = i0 + 1;

        r3 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        goto label1;

     label2:
        return i0;

     label3:
        return 1;
    }

    protected void changeToVarRef(org.apache.xml.utils.QName, org.apache.xpath.ExpressionOwner, java.util.Vector, org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xml.utils.QName r1;
        org.apache.xpath.ExpressionOwner r2;
        java.util.Vector r3, r7, $r8, $r10;
        org.apache.xalan.templates.ElemTemplateElement r4;
        org.apache.xpath.operations.Variable r5, $r9, r12;
        org.apache.xalan.templates.StylesheetRoot r6;
        int $i0, $i1;
        org.apache.xpath.operations.VariableSafeAbsRef r11;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xpath.ExpressionOwner;

        r3 := @parameter2: java.util.Vector;

        r4 := @parameter3: org.apache.xalan.templates.ElemTemplateElement;

        $r8 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r3 != $r8 goto label1;

        r11 = new org.apache.xpath.operations.VariableSafeAbsRef;

        $r9 = r11;

        specialinvoke r11.<org.apache.xpath.operations.VariableSafeAbsRef: void <init>()>();

        goto label2;

     label1:
        r12 = new org.apache.xpath.operations.Variable;

        $r9 = r12;

        specialinvoke r12.<org.apache.xpath.operations.Variable: void <init>()>();

     label2:
        r5 = $r9;

        virtualinvoke r5.<org.apache.xpath.operations.Variable: void setQName(org.apache.xml.utils.QName)>(r1);

        $r10 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if r3 != $r10 goto label3;

        r6 = (org.apache.xalan.templates.StylesheetRoot) r4;

        r7 = virtualinvoke r6.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i0 = virtualinvoke r7.<java.util.Vector: int size()>();

        $i1 = $i0 - 1;

        virtualinvoke r5.<org.apache.xpath.operations.Variable: void setIndex(int)>($i1);

        virtualinvoke r5.<org.apache.xpath.operations.Variable: void setIsGlobal(boolean)>(1);

     label3:
        interfaceinvoke r2.<org.apache.xpath.ExpressionOwner: void setExpression(org.apache.xpath.Expression)>(r5);

        return;
    }

    private static synchronized int getPseudoVarID()
    {
        int $i0, $i1;

        $i0 = <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePseudoVarID>;

        $i1 = $i0 + 1;

        <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePseudoVarID> = $i1;

        return $i0;
    }

    protected org.apache.xalan.templates.ElemVariable createPseudoVarDecl(org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        org.apache.xpath.axes.LocPathIterator r2;
        boolean z0;
        org.apache.xml.utils.QName r3, $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        int $i0;
        java.lang.String $r8;
        org.apache.xalan.templates.ElemVariable $r9, $r11;
        org.apache.xalan.templates.StylesheetRoot $r10;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        z0 := @parameter2: boolean;

        $r4 = new org.apache.xml.utils.QName;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $i0 = staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: int getPseudoVarID()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.xml.utils.QName: void <init>(java.lang.String,java.lang.String)>("http://xml.apache.org/xalan/psuedovar", $r8);

        r3 = $r4;

        if z0 == 0 goto label1;

        $r10 = (org.apache.xalan.templates.StylesheetRoot) r1;

        $r11 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createGlobalPseudoVarDecl(org.apache.xml.utils.QName,org.apache.xalan.templates.StylesheetRoot,org.apache.xpath.axes.LocPathIterator)>(r3, $r10, r2);

        return $r11;

     label1:
        $r9 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable createLocalPseudoVarDecl(org.apache.xml.utils.QName,org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator)>(r3, r1, r2);

        return $r9;
    }

    protected org.apache.xalan.templates.ElemVariable createGlobalPseudoVarDecl(org.apache.xml.utils.QName, org.apache.xalan.templates.StylesheetRoot, org.apache.xpath.axes.LocPathIterator) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xml.utils.QName r1;
        org.apache.xalan.templates.StylesheetRoot r2;
        org.apache.xpath.axes.LocPathIterator r3;
        org.apache.xalan.templates.ElemVariable r4, $r7;
        org.apache.xpath.XPath r5, $r8;
        java.util.Vector r6;
        int $i0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xalan.templates.StylesheetRoot;

        r3 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r7 = new org.apache.xalan.templates.ElemVariable;

        specialinvoke $r7.<org.apache.xalan.templates.ElemVariable: void <init>()>();

        r4 = $r7;

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setIsTopLevel(boolean)>(1);

        $r8 = new org.apache.xpath.XPath;

        specialinvoke $r8.<org.apache.xpath.XPath: void <init>(org.apache.xpath.Expression)>(r3);

        r5 = $r8;

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>(r5);

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>(r1);

        r6 = virtualinvoke r2.<org.apache.xalan.templates.StylesheetRoot: java.util.Vector getVariablesAndParamsComposed()>();

        $i0 = virtualinvoke r6.<java.util.Vector: int size()>();

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setIndex(int)>($i0);

        virtualinvoke r6.<java.util.Vector: void addElement(java.lang.Object)>(r4);

        return r4;
    }

    protected org.apache.xalan.templates.ElemVariable createLocalPseudoVarDecl(org.apache.xml.utils.QName, org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xml.utils.QName r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        org.apache.xpath.axes.LocPathIterator r3;
        org.apache.xalan.templates.ElemVariablePsuedo r4, $r7;
        org.apache.xpath.XPath r5, $r8;
        org.apache.xalan.templates.ElemVariable r6;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xml.utils.QName;

        r2 := @parameter1: org.apache.xalan.templates.ElemTemplateElement;

        r3 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r7 = new org.apache.xalan.templates.ElemVariablePsuedo;

        specialinvoke $r7.<org.apache.xalan.templates.ElemVariablePsuedo: void <init>()>();

        r4 = $r7;

        $r8 = new org.apache.xpath.XPath;

        specialinvoke $r8.<org.apache.xpath.XPath: void <init>(org.apache.xpath.Expression)>(r3);

        r5 = $r8;

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setSelect(org.apache.xpath.XPath)>(r5);

        virtualinvoke r4.<org.apache.xalan.templates.ElemVariable: void setName(org.apache.xml.utils.QName)>(r1);

        r6 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable addVarDeclToElem(org.apache.xalan.templates.ElemTemplateElement,org.apache.xpath.axes.LocPathIterator,org.apache.xalan.templates.ElemVariable)>(r2, r3, r4);

        virtualinvoke r3.<org.apache.xpath.axes.LocPathIterator: void exprSetParent(org.apache.xpath.ExpressionNode)>(r6);

        return r6;
    }

    protected org.apache.xalan.templates.ElemVariable addVarDeclToElem(org.apache.xalan.templates.ElemTemplateElement, org.apache.xpath.axes.LocPathIterator, org.apache.xalan.templates.ElemVariable) throws org.w3c.dom.DOMException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1, r4, r5;
        org.apache.xpath.axes.LocPathIterator r2;
        org.apache.xalan.templates.ElemVariable r3, r6;
        org.apache.xalan.templates.VarNameCollector $r7, $r8, $r10, $r11;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        org.apache.xml.utils.QName $r12;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        r3 := @parameter2: org.apache.xalan.templates.ElemVariable;

        r4 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        $r7 = r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        virtualinvoke r2.<org.apache.xpath.axes.LocPathIterator: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(null, $r7);

        $r8 = r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        $i0 = virtualinvoke $r8.<org.apache.xalan.templates.VarNameCollector: int getVarCount()>();

        if $i0 <= 0 goto label3;

        r5 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)>(r2);

        r6 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)>(r5);

     label1:
        if null == r6 goto label3;

        $r11 = r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        $r12 = virtualinvoke r6.<org.apache.xalan.templates.ElemVariable: org.apache.xml.utils.QName getName()>();

        $z1 = virtualinvoke $r11.<org.apache.xalan.templates.VarNameCollector: boolean doesOccur(org.apache.xml.utils.QName)>($r12);

        if $z1 == 0 goto label2;

        r1 = virtualinvoke r6.<org.apache.xalan.templates.ElemVariable: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        r4 = virtualinvoke r6.<org.apache.xalan.templates.ElemVariable: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        goto label3;

     label2:
        r6 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)>(r6);

        goto label1;

     label3:
        if null == r4 goto label5;

        $i1 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 41 != $i1 goto label5;

        $z0 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean isParam(org.apache.xpath.ExpressionNode)>(r2);

        if $z0 == 0 goto label4;

        return null;

     label4:
        if null == r4 goto label5;

        r4 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

        if null == r4 goto label4;

        $i2 = virtualinvoke r4.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 41 == $i2 goto label4;

        goto label5;

     label5:
        virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node insertBefore(org.w3c.dom.Node,org.w3c.dom.Node)>(r3, r4);

        $r10 = r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.VarNameCollector m_varNameCollector>;

        virtualinvoke $r10.<org.apache.xalan.templates.VarNameCollector: void reset()>();

        return r3;
    }

    protected boolean isParam(org.apache.xpath.ExpressionNode)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.ExpressionNode r1;
        org.apache.xalan.templates.ElemTemplateElement r2;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.ExpressionNode;

     label1:
        if null == r1 goto label3;

        $z0 = r1 instanceof org.apache.xalan.templates.ElemTemplateElement;

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        r1 = interfaceinvoke r1.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

        goto label1;

     label3:
        if null == r1 goto label8;

        r2 = (org.apache.xalan.templates.ElemTemplateElement) r1;

     label4:
        if null == r2 goto label8;

        i0 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch(i0)
        {
            case 19: goto label6;
            case 25: goto label6;
            case 41: goto label5;
            default: goto label7;
        };

     label5:
        return 1;

     label6:
        return 0;

     label7:
        r2 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

        goto label4;

     label8:
        return 0;
    }

    protected org.apache.xalan.templates.ElemVariable getPrevVariableElem(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1, $r2;
        int i0;
        org.apache.xalan.templates.ElemVariable $r3;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

     label1:
        $r2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.ElemTemplateElement getPrevElementWithinContext(org.apache.xalan.templates.ElemTemplateElement)>(r1);

        r1 = $r2;

        if null == $r2 goto label4;

        i0 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 73 == i0 goto label2;

        if 41 != i0 goto label3;

     label2:
        $r3 = (org.apache.xalan.templates.ElemVariable) r1;

        return $r3;

     label3:
        goto label1;

     label4:
        return null;
    }

    protected org.apache.xalan.templates.ElemTemplateElement getPrevElementWithinContext(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1, r2;
        int i0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        r2 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getPreviousSiblingElem()>();

        if null != r2 goto label1;

        r2 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getParentElem()>();

     label1:
        if null == r2 goto label3;

        i0 = virtualinvoke r2.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 28 == i0 goto label2;

        if 19 == i0 goto label2;

        if 25 != i0 goto label3;

     label2:
        r2 = null;

     label3:
        return r2;
    }

    protected org.apache.xalan.templates.ElemTemplateElement getElemFromExpression(org.apache.xpath.Expression)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.Expression r1;
        org.apache.xpath.ExpressionNode r2;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;
        boolean $z0;
        org.apache.xalan.templates.ElemTemplateElement $r5;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.Expression;

        r2 = virtualinvoke r1.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

     label1:
        if null == r2 goto label3;

        $z0 = r2 instanceof org.apache.xalan.templates.ElemTemplateElement;

        if $z0 == 0 goto label2;

        $r5 = (org.apache.xalan.templates.ElemTemplateElement) r2;

        return $r5;

     label2:
        r2 = interfaceinvoke r2.<org.apache.xpath.ExpressionNode: org.apache.xpath.ExpressionNode exprGetParent()>();

        goto label1;

     label3:
        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ASSERT_NO_TEMPLATE_PARENT", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    public boolean isAbsolute(org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.axes.LocPathIterator r1;
        int i0;
        boolean z0, $z1, $z2, $z3;
        org.apache.xalan.templates.AbsPathChecker $r2;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.axes.LocPathIterator;

        i0 = virtualinvoke r1.<org.apache.xpath.axes.LocPathIterator: int getAnalysisBits()>();

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 134217728);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 536870912);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        z0 = $z3;

        if z0 == 0 goto label4;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: org.apache.xalan.templates.AbsPathChecker m_absPathChecker>;

        z0 = virtualinvoke $r2.<org.apache.xalan.templates.AbsPathChecker: boolean checkAbsolute(org.apache.xpath.axes.LocPathIterator)>(r1);

     label4:
        return z0;
    }

    public boolean visitLocationPath(org.apache.xpath.ExpressionOwner, org.apache.xpath.axes.LocPathIterator)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.axes.LocPathIterator r2;
        org.apache.xpath.axes.WalkingIterator r3;
        org.apache.xpath.axes.AxesWalker r4, $r11;
        org.apache.xpath.axes.FilterExprWalker r5;
        org.apache.xpath.Expression r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Vector $r7, $r8, $r9, $r10;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.axes.LocPathIterator;

        $z0 = r2 instanceof org.apache.xpath.axes.SelfIteratorNoPredicate;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r2 instanceof org.apache.xpath.axes.WalkingIterator;

        if $z1 == 0 goto label2;

        r3 = (org.apache.xpath.axes.WalkingIterator) r2;

        r4 = virtualinvoke r3.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker getFirstWalker()>();

        $z4 = r4 instanceof org.apache.xpath.axes.FilterExprWalker;

        if $z4 == 0 goto label2;

        $r11 = virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        if null != $r11 goto label2;

        r5 = (org.apache.xpath.axes.FilterExprWalker) r4;

        r6 = virtualinvoke r5.<org.apache.xpath.axes.FilterExprWalker: org.apache.xpath.Expression getInnerExpression()>();

        $z5 = r6 instanceof org.apache.xpath.operations.Variable;

        if $z5 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean isAbsolute(org.apache.xpath.axes.LocPathIterator)>(r2);

        if $z2 == 0 goto label3;

        $r9 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        if null == $r9 goto label3;

        $r10 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_absPaths>;

        virtualinvoke $r10.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        goto label4;

     label3:
        $z3 = r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        if $z3 == 0 goto label4;

        $r7 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        if null == $r7 goto label4;

        $r8 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label4:
        return 1;
    }

    public boolean visitPredicate(org.apache.xpath.ExpressionOwner, org.apache.xpath.Expression)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.ExpressionOwner r1;
        org.apache.xpath.Expression r2;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r2 := @parameter1: org.apache.xpath.Expression;

        z0 = r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 0;

        virtualinvoke r2.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r1, r0);

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = z0;

        return 0;
    }

    public boolean visitTopLevelInstruction(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        i0 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch(i0)
        {
            case 19: goto label1;
            default: goto label2;
        };

     label1:
        $z0 = virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean visitInstruction(org.apache.xalan.templates.ElemTemplateElement)>(r1);

        return $z0;

     label2:
        return 1;
    }

    public boolean visitInstruction(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xalan.templates.ElemTemplateElement r1;
        int i0;
        org.apache.xalan.templates.ElemForEach r2;
        org.apache.xpath.Expression r3;
        java.util.Vector $r4, r5;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        i0 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        lookupswitch(i0)
        {
            case 17: goto label1;
            case 19: goto label1;
            case 28: goto label1;
            case 35: goto label3;
            case 64: goto label3;
            default: goto label4;
        };

     label1:
        if i0 != 28 goto label2;

        r2 = (org.apache.xalan.templates.ElemForEach) r1;

        r3 = virtualinvoke r2.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression getSelect()>();

        virtualinvoke r3.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r2, r0);

     label2:
        r5 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = $r4;

        virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r0, 0);

        virtualinvoke r0.<org.apache.xalan.templates.RedundentExprEliminator: void eleminateRedundentLocals(org.apache.xalan.templates.ElemTemplateElement)>(r1);

        r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths> = r5;

        return 0;

     label3:
        z0 = r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext>;

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = 0;

        virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor)>(r0);

        r0.<org.apache.xalan.templates.RedundentExprEliminator: boolean m_isSameContext> = z0;

        return 0;

     label4:
        return 1;
    }

    protected void diagnoseNumPaths(java.util.Vector, int, int)
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        java.util.Vector r1, $r2;
        int i0, i1;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r9, $r11, $r12, $r13, $r14, $r16, $r18, $r19, $r20, $r22, $r24, $r25;
        java.io.PrintStream $r4, $r10, $r17, $r23;
        java.lang.String $r8, $r15, $r21, $r26;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= 0 goto label2;

        $r2 = r0.<org.apache.xalan.templates.RedundentExprEliminator: java.util.Vector m_paths>;

        if r1 != $r2 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Eliminated ");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" total paths!");

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

        $r23 = <java.lang.System: java.io.PrintStream err>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Consolodated ");

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r24 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" redundent paths!");

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

        goto label2;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Eliminated ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" total global paths!");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r10 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Consolodated ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" redundent global paths!");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label2:
        return;
    }

    private final void assertIsLocPathIterator(org.apache.xpath.Expression, org.apache.xpath.ExpressionOwner) throws java.lang.RuntimeException
    {
        org.apache.xalan.templates.RedundentExprEliminator r0;
        org.apache.xpath.Expression r1;
        org.apache.xpath.ExpressionOwner r2;
        java.lang.String r3, $r7, $r13, $r20;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r8, $r10, $r11, $r12, $r15, $r16, $r17, $r19, $r22, $r23;
        java.lang.Class $r6, $r14;
        java.lang.RuntimeException $r9;
        org.apache.xpath.ExpressionNode $r18;
        org.apache.xpath.operations.Variable $r21;
        org.apache.xml.utils.QName $r24;

        r0 := @this: org.apache.xalan.templates.RedundentExprEliminator;

        r1 := @parameter0: org.apache.xpath.Expression;

        r2 := @parameter1: org.apache.xpath.ExpressionOwner;

        $z0 = r1 instanceof org.apache.xpath.axes.LocPathIterator;

        if $z0 != 0 goto label3;

        $z1 = r1 instanceof org.apache.xpath.operations.Variable;

        if $z1 == 0 goto label1;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Programmer\'s assertion: expr1 not an iterator: ");

        $r21 = (org.apache.xpath.operations.Variable) r1;

        $r24 = virtualinvoke $r21.<org.apache.xpath.operations.Variable: org.apache.xml.utils.QName getQName()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        r3 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Programmer\'s assertion: expr1 not an iterator: ");

        $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r14 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r18 = virtualinvoke r1.<org.apache.xpath.Expression: org.apache.xpath.ExpressionNode exprGetParent()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r20);

        throw $r9;

     label3:
        return;
    }

    private static void validateNewAddition(java.util.Vector, org.apache.xpath.ExpressionOwner, org.apache.xpath.axes.LocPathIterator) throws java.lang.RuntimeException
    {
        java.util.Vector r0;
        org.apache.xpath.ExpressionOwner r1, r3;
        org.apache.xpath.axes.LocPathIterator r2;
        int i0, i1;
        org.apache.xpath.Expression $r4, $r6;
        java.lang.Object $r5;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Vector;

        r1 := @parameter1: org.apache.xpath.ExpressionOwner;

        r2 := @parameter2: org.apache.xpath.axes.LocPathIterator;

        $r4 = interfaceinvoke r1.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        if $r4 != r2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z2, "owner.getExpression() != path!!!");

        i0 = virtualinvoke r0.<java.util.Vector: int size()>();

        i1 = 0;

     label3:
        if i1 >= i0 goto label8;

        $r5 = virtualinvoke r0.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        r3 = (org.apache.xpath.ExpressionOwner) $r5;

        if r3 == r1 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z1, "duplicate owner on the list!!!");

        $r6 = interfaceinvoke r3.<org.apache.xpath.ExpressionOwner: org.apache.xpath.Expression getExpression()>();

        if $r6 == r2 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        staticinvoke <org.apache.xalan.templates.RedundentExprEliminator: void assertion(boolean,java.lang.String)>($z0, "duplicate expression on the list!!!");

        i1 = i1 + 1;

        goto label3;

     label8:
        return;
    }

    protected static void assertion(boolean, java.lang.String)
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.RuntimeException $r1;
        java.lang.Object[] $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        if z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r0;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ASSERT_REDUNDENT_EXPR_ELIMINATOR", $r2);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return;
    }

    static void <clinit>()
    {
        <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_MULTISTEPLIST> = 0;

        <org.apache.xalan.templates.RedundentExprEliminator: boolean DIAGNOSE_NUM_PATHS_REDUCED> = 0;

        <org.apache.xalan.templates.RedundentExprEliminator: boolean DEBUG> = 0;

        <org.apache.xalan.templates.RedundentExprEliminator: java.lang.String PSUEDOVARNAMESPACE> = "http://xml.apache.org/xalan/psuedovar";

        <org.apache.xalan.templates.RedundentExprEliminator: int m_uniquePseudoVarID> = 1;

        return;
    }
}
