public abstract class org.apache.xpath.axes.BasicTestIterator extends org.apache.xpath.axes.LocPathIterator
{
    static final long serialVersionUID;

    protected void <init>()
    {
        org.apache.xpath.axes.BasicTestIterator r0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>()>();

        return;
    }

    protected void <init>(org.apache.xml.utils.PrefixResolver)
    {
        org.apache.xpath.axes.BasicTestIterator r0;
        org.apache.xml.utils.PrefixResolver r1;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xml.utils.PrefixResolver;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(r1);

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.BasicTestIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, i2, i3, $i4;
        java.lang.String $r2, $r3;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, 0);

        i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        i3 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i2);

        $i4 = i3 & 4163;

        if 0 == $i4 goto label1;

        if i3 != -1 goto label2;

     label1:
        virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void initNodeTest(int)>(i3);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: java.lang.String getStepNS(int)>(i2);

        $r3 = virtualinvoke r1.<org.apache.xpath.compiler.Compiler: java.lang.String getStepLocalName(int)>(i2);

        virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void initNodeTest(int,java.lang.String,java.lang.String)>(i3, $r2, $r3);

     label3:
        virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void initPredicateInfo(org.apache.xpath.compiler.Compiler,int)>(r1, i2);

        return;
    }

    protected void <init>(org.apache.xpath.compiler.Compiler, int, int, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.BasicTestIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, z0);

        return;
    }

    protected abstract int getNextNode();

    public int nextNode()
    {
        org.apache.xpath.axes.BasicTestIterator r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11;
        org.apache.xpath.VariableStack r1;
        java.lang.Throwable r2, $r4;
        boolean $z0;
        short $s9;
        org.apache.xpath.XPathContext $r3;
        byte b12;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        $z0 = r0.<org.apache.xpath.axes.BasicTestIterator: boolean m_foundLast>;

        if $z0 == 0 goto label01;

        r0.<org.apache.xpath.axes.BasicTestIterator: int m_lastFetched> = -1;

        return -1;

     label01:
        $i3 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_lastFetched>;

        if -1 != $i3 goto label02;

        virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: void resetProximityPositions()>();

     label02:
        $i4 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_stackFrame>;

        if -1 == $i4 goto label03;

        $r3 = r0.<org.apache.xpath.axes.BasicTestIterator: org.apache.xpath.XPathContext m_execContext>;

        r1 = virtualinvoke $r3.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        i1 = virtualinvoke r1.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i10 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_stackFrame>;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i10);

        goto label04;

     label03:
        r1 = null;

        i1 = 0;

     label04:
        i0 = virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: int getNextNode()>();

        if -1 == i0 goto label06;

        $s9 = virtualinvoke r0.<org.apache.xpath.axes.BasicTestIterator: short acceptNode(int)>(i0);

        if 1 != $s9 goto label05;

        goto label06;

     label05:
        if i0 != -1 goto label04;

     label06:
        if -1 == i0 goto label09;

        $i6 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_pos>;

        $i7 = $i6 + 1;

        r0.<org.apache.xpath.axes.BasicTestIterator: int m_pos> = $i7;

        i2 = i0;

     label07:
        $i8 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_stackFrame>;

        if -1 == $i8 goto label08;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label08:
        return i2;

     label09:
        r0.<org.apache.xpath.axes.BasicTestIterator: boolean m_foundLast> = 1;

        b12 = -1;

     label10:
        $i5 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_stackFrame>;

        if -1 == $i5 goto label11;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label11:
        return b12;

     label12:
        $r4 := @caughtexception;

        r2 = $r4;

     label13:
        $i11 = r0.<org.apache.xpath.axes.BasicTestIterator: int m_stackFrame>;

        if -1 == $i11 goto label14;

        virtualinvoke r1.<org.apache.xpath.VariableStack: void setStackFrame(int)>(i1);

     label14:
        throw r2;

        catch java.lang.Throwable from label04 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.BasicTestIterator r0;
        org.apache.xpath.axes.ChildTestIterator r1;
        org.apache.xml.dtm.DTMIterator $r2;

        r0 := @this: org.apache.xpath.axes.BasicTestIterator;

        $r2 = specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r1 = (org.apache.xpath.axes.ChildTestIterator) $r2;

        virtualinvoke r1.<org.apache.xpath.axes.ChildTestIterator: void resetProximityPositions()>();

        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.BasicTestIterator: long serialVersionUID> = 3505378079378096623L;

        return;
    }
}
