public final class org.apache.xml.serializer.Encodings extends java.lang.Object
{
    private static final java.lang.String ENCODINGS_FILE;
    static final java.lang.String DEFAULT_MIME_ENCODING;
    private static final java.util.Hashtable _encodingTableKeyJava;
    private static final java.util.Hashtable _encodingTableKeyMime;
    private static final org.apache.xml.serializer.EncodingInfo[] _encodings;

    public void <init>()
    {
        org.apache.xml.serializer.Encodings r0;

        r0 := @this: org.apache.xml.serializer.Encodings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.io.Writer getWriter(java.io.OutputStream, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        java.io.OutputStream r0;
        java.lang.String r1, r2, $r8;
        int i0, $i1;
        java.io.OutputStreamWriter r3, $r5, $r11;
        org.apache.xml.serializer.EncodingInfo[] $r4, $r6, $r9;
        org.apache.xml.serializer.EncodingInfo $r7, $r10;
        boolean $z0;
        java.lang.IllegalArgumentException $r12, $r13;
        java.io.UnsupportedEncodingException $r14, $r15;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: java.lang.String;

        i0 = 0;

     label1:
        $r4 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $i1 = lengthof $r4;

        if i0 >= $i1 goto label7;

        $r6 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r7 = $r6[i0];

        $r8 = $r7.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z0 == 0 goto label6;

     label2:
        $r9 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r10 = $r9[i0];

        r2 = $r10.<org.apache.xml.serializer.EncodingInfo: java.lang.String javaName>;

        $r11 = new java.io.OutputStreamWriter;

        specialinvoke $r11.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, r2);

        r3 = $r11;

     label3:
        return r3;

     label4:
        $r12 := @caughtexception;

        goto label6;

     label5:
        $r14 := @caughtexception;

     label6:
        i0 = i0 + 1;

        goto label1;

     label7:
        $r5 = new java.io.OutputStreamWriter;

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r0, r1);

     label8:
        return $r5;

     label9:
        $r13 := @caughtexception;

        $r15 = new java.io.UnsupportedEncodingException;

        specialinvoke $r15.<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>(r1);

        throw $r15;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.io.UnsupportedEncodingException from label2 to label3 with label5;
        catch java.lang.IllegalArgumentException from label7 to label8 with label9;
    }

    static org.apache.xml.serializer.EncodingInfo getEncodingInfo(java.lang.String)
    {
        java.lang.String r0, r2;
        org.apache.xml.serializer.EncodingInfo r1, $r5;
        java.util.Hashtable $r3, $r6;
        java.lang.Object $r4, $r7;

        r0 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r1 != null goto label1;

        $r6 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r7;

     label1:
        if r1 != null goto label2;

        $r5 = new org.apache.xml.serializer.EncodingInfo;

        specialinvoke $r5.<org.apache.xml.serializer.EncodingInfo: void <init>(java.lang.String,java.lang.String,char)>(null, null, 0);

        r1 = $r5;

     label2:
        return r1;
    }

    public static boolean isRecognizedEncoding(java.lang.String)
    {
        java.lang.String r0, r2;
        org.apache.xml.serializer.EncodingInfo r1;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<java.lang.String: java.lang.String toUpperCase()>();

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r1 != null goto label1;

        $r5 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r6;

     label1:
        if r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    private static java.lang.String toUpperCaseFast(java.lang.String)
    {
        java.lang.String r0, r2;
        boolean z0;
        int i0, i1, $i3;
        char[] r1;
        char c2;

        r0 := @parameter0: java.lang.String;

        z0 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (char)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i1);

        if 97 > c2 goto label2;

        if c2 > 122 goto label2;

        $i3 = c2 + -32;

        c2 = (char) $i3;

        z0 = 1;

     label2:
        r1[i1] = c2;

        i1 = i1 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r1);

        goto label5;

     label4:
        r2 = r0;

     label5:
        return r2;
    }

    static java.lang.String getMimeEncoding(java.lang.String)
    {
        java.lang.String r0, r1, $r2, $r3, r5, r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.SecurityException $r4;

        r0 := @parameter0: java.lang.String;

        if null != r0 goto label10;

     label01:
        r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("file.encoding", "UTF8");

        if null == r5 goto label07;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Cp1252");

        if $z0 != 0 goto label02;

        $z1 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ISO8859_1");

        if $z1 != 0 goto label02;

        $z2 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("8859_1");

        if $z2 != 0 goto label02;

        $z3 = virtualinvoke r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("UTF8");

        if $z3 == 0 goto label03;

     label02:
        $r3 = "UTF-8";

        goto label04;

     label03:
        $r3 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String convertJava2MimeEncoding(java.lang.String)>(r5);

     label04:
        r1 = $r3;

        if null == r1 goto label05;

        $r2 = r1;

        goto label06;

     label05:
        $r2 = "UTF-8";

     label06:
        r6 = $r2;

        goto label08;

     label07:
        r6 = "UTF-8";

     label08:
        goto label11;

     label09:
        $r4 := @caughtexception;

        r6 = "UTF-8";

        goto label11;

     label10:
        r6 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String convertJava2MimeEncoding(java.lang.String)>(r0);

     label11:
        return r6;

        catch java.lang.SecurityException from label01 to label08 with label09;
    }

    private static java.lang.String convertJava2MimeEncoding(java.lang.String)
    {
        java.lang.String r0, $r3, $r5;
        org.apache.xml.serializer.EncodingInfo r1;
        java.util.Hashtable $r2;
        java.lang.Object $r4;

        r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r3 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if null == r1 goto label1;

        $r5 = r1.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        return $r5;

     label1:
        return r0;
    }

    public static java.lang.String convertMime2JavaEncoding(java.lang.String)
    {
        java.lang.String r0, $r4, $r7;
        int i0, $i1;
        org.apache.xml.serializer.EncodingInfo[] $r1, $r2, $r5;
        org.apache.xml.serializer.EncodingInfo $r3, $r6;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i0 = 0;

     label1:
        $r1 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label3;

        $r2 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r3 = $r2[i0];

        $r4 = $r3.<org.apache.xml.serializer.EncodingInfo: java.lang.String name>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label2;

        $r5 = <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings>;

        $r6 = $r5[i0];

        $r7 = $r6.<org.apache.xml.serializer.EncodingInfo: java.lang.String javaName>;

        return $r7;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return r0;
    }

    private static org.apache.xml.serializer.EncodingInfo[] loadEncodingInfo()
    {
        java.io.InputStream r0;
        org.apache.xml.serializer.SecuritySupport r1;
        java.util.Properties r2, $r13;
        int i0, i1, i2, $i3, $i4;
        java.util.ArrayList r3, $r14;
        java.util.Enumeration r4;
        java.lang.String r5, r6, r8, $r12, $r17, $r23, $r24, r33, r34;
        java.util.StringTokenizer r9, $r19;
        boolean z1, $z2;
        org.apache.xml.serializer.EncodingInfo r10, $r21;
        java.lang.ClassLoader $r11;
        java.lang.Object $r16;
        java.lang.Integer $r18;
        java.util.Hashtable $r20, $r22;
        org.apache.xml.serializer.utils.WrappedRuntimeException $r26, $r30;
        java.lang.NumberFormatException $r27;
        java.io.IOException $r29, r37;
        java.net.MalformedURLException $r31, r36;
        char c5;
        org.apache.xml.serializer.EncodingInfo[] r35;

     label01:
        r1 = staticinvoke <org.apache.xml.serializer.SecuritySupport: org.apache.xml.serializer.SecuritySupport getInstance()>();

        $r11 = staticinvoke <org.apache.xml.serializer.ObjectFactory: java.lang.ClassLoader findClassLoader()>();

        $r12 = <org.apache.xml.serializer.Encodings: java.lang.String ENCODINGS_FILE>;

        r0 = virtualinvoke r1.<org.apache.xml.serializer.SecuritySupport: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>($r11, $r12);

        $r13 = new java.util.Properties;

        specialinvoke $r13.<java.util.Properties: void <init>()>();

        r2 = $r13;

        if r0 == null goto label02;

        virtualinvoke r2.<java.util.Properties: void load(java.io.InputStream)>(r0);

        virtualinvoke r0.<java.io.InputStream: void close()>();

     label02:
        i0 = virtualinvoke r2.<java.util.Properties: int size()>();

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        r3 = $r14;

        r4 = virtualinvoke r2.<java.util.Properties: java.util.Enumeration keys()>();

        i1 = 0;

     label03:
        if i1 >= i0 goto label11;

        $r16 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.lang.String) $r16;

        r6 = virtualinvoke r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r5);

        i2 = staticinvoke <org.apache.xml.serializer.Encodings: int lengthOfMimeNames(java.lang.String)>(r6);

        if i2 != 0 goto label04;

        goto label10;

     label04:
        $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(i2);

        r8 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer decode(java.lang.String)>(r8);

        $i4 = virtualinvoke $r18.<java.lang.Integer: int intValue()>();

        c5 = (char) $i4;

     label05:
        goto label07;

     label06:
        $r27 := @caughtexception;

        c5 = 0;

     label07:
        r33 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i2);

        $r19 = new java.util.StringTokenizer;

        specialinvoke $r19.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r33, ",");

        r9 = $r19;

        z1 = 1;

     label08:
        $z2 = virtualinvoke r9.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z2 == 0 goto label10;

        r34 = virtualinvoke r9.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r21 = new org.apache.xml.serializer.EncodingInfo;

        specialinvoke $r21.<org.apache.xml.serializer.EncodingInfo: void <init>(java.lang.String,java.lang.String,char)>(r34, r5, c5);

        r10 = $r21;

        interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r10);

        $r20 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r24 = virtualinvoke r34.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, r10);

        if z1 == 0 goto label09;

        $r22 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r23 = virtualinvoke r5.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r22.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, r10);

     label09:
        z1 = 0;

        goto label08;

     label10:
        i1 = i1 + 1;

        goto label03;

     label11:
        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        r35 = newarray (org.apache.xml.serializer.EncodingInfo)[$i3];

        interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r35);

     label12:
        return r35;

     label13:
        $r31 := @caughtexception;

        r36 = $r31;

        $r30 = new org.apache.xml.serializer.utils.WrappedRuntimeException;

        specialinvoke $r30.<org.apache.xml.serializer.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r36);

        throw $r30;

     label14:
        $r29 := @caughtexception;

        r37 = $r29;

        $r26 = new org.apache.xml.serializer.utils.WrappedRuntimeException;

        specialinvoke $r26.<org.apache.xml.serializer.utils.WrappedRuntimeException: void <init>(java.lang.Exception)>(r37);

        throw $r26;

        catch java.lang.NumberFormatException from label04 to label05 with label06;
        catch java.net.MalformedURLException from label01 to label12 with label13;
        catch java.io.IOException from label01 to label12 with label14;
    }

    private static int lengthOfMimeNames(java.lang.String)
    {
        java.lang.String r0;
        int i0;

        r0 := @parameter0: java.lang.String;

        i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(32);

        if i0 >= 0 goto label1;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        return i0;
    }

    static boolean isHighUTF16Surrogate(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if 55296 > c0 goto label1;

        if c0 > 56319 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static boolean isLowUTF16Surrogate(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        if 56320 > c0 goto label1;

        if c0 > 57343 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static int toCodePoint(char, char)
    {
        char c0, c1;
        int i2, $i3, $i4, $i5, $i6;

        c0 := @parameter0: char;

        c1 := @parameter1: char;

        $i3 = c0 - 55296;

        $i5 = $i3 << 10;

        $i4 = c1 - 56320;

        $i6 = $i5 + $i4;

        i2 = $i6 + 65536;

        return i2;
    }

    static int toCodePoint(char)
    {
        char c0, c1;

        c0 := @parameter0: char;

        c1 = c0;

        return c1;
    }

    public static char getHighChar(java.lang.String)
    {
        java.lang.String r0, r2;
        char c0;
        org.apache.xml.serializer.EncodingInfo r1;
        java.util.Hashtable $r3, $r5;
        java.lang.Object $r4, $r6;

        r0 := @parameter0: java.lang.String;

        r2 = staticinvoke <org.apache.xml.serializer.Encodings: java.lang.String toUpperCaseFast(java.lang.String)>(r0);

        $r3 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r4;

        if r1 != null goto label1;

        $r5 = <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r2);

        r1 = (org.apache.xml.serializer.EncodingInfo) $r6;

     label1:
        if r1 == null goto label2;

        c0 = virtualinvoke r1.<org.apache.xml.serializer.EncodingInfo: char getHighChar()>();

        goto label3;

     label2:
        c0 = 0;

     label3:
        return c0;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r2, $r3;
        java.lang.String $r1, $r4;
        java.util.Hashtable $r5, $r6;
        org.apache.xml.serializer.EncodingInfo[] $r7;

        <org.apache.xml.serializer.Encodings: java.lang.String DEFAULT_MIME_ENCODING> = "UTF-8";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.xml.serializer.SerializerBase: java.lang.String PKG_PATH>;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/Encodings.properties");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.xml.serializer.Encodings: java.lang.String ENCODINGS_FILE> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyJava> = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        <org.apache.xml.serializer.Encodings: java.util.Hashtable _encodingTableKeyMime> = $r6;

        $r7 = staticinvoke <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] loadEncodingInfo()>();

        <org.apache.xml.serializer.Encodings: org.apache.xml.serializer.EncodingInfo[] _encodings> = $r7;

        return;
    }
}
