public abstract class org.apache.xml.dtm.ref.DTMDefaultBase extends java.lang.Object implements org.apache.xml.dtm.DTM
{
    static final boolean JJK_DEBUG;
    public static final int ROOTNODE;
    protected int m_size;
    protected org.apache.xml.utils.SuballocatedIntVector m_exptype;
    protected org.apache.xml.utils.SuballocatedIntVector m_firstch;
    protected org.apache.xml.utils.SuballocatedIntVector m_nextsib;
    protected org.apache.xml.utils.SuballocatedIntVector m_prevsib;
    protected org.apache.xml.utils.SuballocatedIntVector m_parent;
    protected java.util.Vector m_namespaceDeclSets;
    protected org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements;
    protected int[][][] m_elemIndexes;
    public static final int DEFAULT_BLOCKSIZE;
    public static final int DEFAULT_NUMBLOCKS;
    public static final int DEFAULT_NUMBLOCKS_SMALL;
    protected static final int NOTPROCESSED;
    public org.apache.xml.dtm.DTMManager m_mgr;
    protected org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault;
    protected org.apache.xml.utils.SuballocatedIntVector m_dtmIdent;
    protected java.lang.String m_documentBaseURI;
    protected org.apache.xml.dtm.DTMWSFilter m_wsfilter;
    protected boolean m_shouldStripWS;
    protected org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack;
    protected org.apache.xml.utils.XMLStringFactory m_xstrf;
    protected org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable;
    protected boolean m_indexing;
    protected org.apache.xml.dtm.DTMAxisTraverser[] m_traversers;
    private java.util.Vector m_namespaceLists;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0, i1;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0, z1, z2, $z3;
        byte b2;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r6, $r7, $r8, $r9, $r10, $r17, $r18;
        org.apache.xml.dtm.ref.ExpandedNameTable $r11, $r13;
        org.apache.xml.dtm.ref.DTMManagerDefault $r12, $r15;
        org.apache.xml.utils.BoolStack $r14;
        java.lang.String $r16;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = null;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceLists> = null;

        if i1 > 64 goto label1;

        b2 = 4;

        $r17 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(4, 1);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent> = $r17;

        goto label2;

     label1:
        b2 = 32;

        $r5 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent> = $r5;

     label2:
        $r6 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype> = $r6;

        $r7 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch> = $r7;

        $r8 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib> = $r8;

        $r9 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent> = $r9;

        if z1 == 0 goto label3;

        $r18 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int,int)>(i1, b2);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib> = $r18;

     label3:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr> = r1;

        $z3 = r1 instanceof org.apache.xml.dtm.ref.DTMManagerDefault;

        if $z3 == 0 goto label4;

        $r15 = (org.apache.xml.dtm.ref.DTMManagerDefault) r1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = $r15;

     label4:
        if null == r2 goto label5;

        $r16 = interfaceinvoke r2.<javax.xml.transform.Source: java.lang.String getSystemId()>();

        goto label6;

     label5:
        $r16 = null;

     label6:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI> = $r16;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i0, 0);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMWSFilter m_wsfilter> = r3;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLStringFactory m_xstrf> = r4;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_indexing> = z0;

        if z0 == 0 goto label7;

        $r13 = new org.apache.xml.dtm.ref.ExpandedNameTable;

        specialinvoke $r13.<org.apache.xml.dtm.ref.ExpandedNameTable: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable> = $r13;

        goto label8;

     label7:
        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r11 = virtualinvoke $r12.<org.apache.xml.dtm.ref.DTMManagerDefault: org.apache.xml.dtm.ref.ExpandedNameTable getExpandedNameTable(org.apache.xml.dtm.DTM)>(r0);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable> = $r11;

     label8:
        if null == r3 goto label9;

        $r14 = new org.apache.xml.utils.BoolStack;

        specialinvoke $r14.<org.apache.xml.utils.BoolStack: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack> = $r14;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void pushShouldStripWhitespace(boolean)>(0);

     label9:
        return;
    }

    protected void ensureSizeOfIndex(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        int[][][] r1, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        int[][] r2, r12;
        int[] r3, r13, r14, r15;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        if null != $r4 goto label1;

        $i15 = i0 + 20;

        $r11 = newarray (int[][])[$i15];

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes> = $r11;

        goto label2;

     label1:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i2 = lengthof $r5;

        if $i2 > i0 goto label2;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i13 = i0 + 20;

        $r9 = newarray (int[][])[$i13];

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes> = $r9;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $i14 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r10, 0, $i14);

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        r12 = $r6[i0];

        if null != r12 goto label3;

        $i12 = i1 + 100;

        r12 = newarray (int[])[$i12];

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r8[i0] = r12;

        goto label4;

     label3:
        $i3 = lengthof r12;

        if $i3 > i1 goto label4;

        r2 = r12;

        $i9 = i1 + 100;

        r12 = newarray (int[])[$i9];

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r12, 0, $i11);

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r7[i0] = r12;

     label4:
        r13 = r12[i1];

        if null != r13 goto label5;

        r14 = newarray (int)[128];

        r12[i1] = r14;

        r14[0] = 1;

        goto label6;

     label5:
        $i6 = lengthof r13;

        $i4 = r13[0];

        $i5 = $i4 + 1;

        if $i6 > $i5 goto label6;

        r3 = r13;

        $i7 = r13[0];

        $i8 = $i7 + 1024;

        r15 = newarray (int)[$i8];

        $i10 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r3, 0, r15, 0, $i10);

        r12[i1] = r15;

     label6:
        return;
    }

    protected void indexNode(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i3, i4, $i5, $i6, $i7;
        org.apache.xml.dtm.ref.ExpandedNameTable r1;
        short s2;
        int[] r2;
        int[][][] $r3;
        int[][] $r4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        s2 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i0);

        if 1 != s2 goto label1;

        i3 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>(i0);

        i4 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getLocalNameID(int)>(i0);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void ensureSizeOfIndex(int,int)>(i3, i4);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        $r4 = $r3[i3];

        r2 = $r4[i4];

        $i5 = r2[0];

        r2[$i5] = i1;

        $i6 = r2[0];

        $i7 = $i6 + 1;

        r2[0] = $i7;

     label1:
        return;
    }

    protected int findGTE(int[], int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int[] r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = i0;

        $i8 = i1 - 1;

        i4 = i0 + $i8;

        i5 = i4;

     label1:
        if i3 > i4 goto label5;

        $i11 = i3 + i4;

        i6 = $i11 / 2;

        i7 = r1[i6];

        if i7 <= i2 goto label2;

        i4 = i6 - 1;

        goto label4;

     label2:
        if i7 >= i2 goto label3;

        i3 = i6 + 1;

        goto label4;

     label3:
        return i6;

     label4:
        goto label1;

     label5:
        if i3 > i5 goto label6;

        $i9 = r1[i3];

        if $i9 <= i2 goto label6;

        $i10 = i3;

        goto label7;

     label6:
        $i10 = -1;

     label7:
        return $i10;
    }

    int findElementFromIndex(int, int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        int[][][] r1;
        int[][] r2;
        int[] r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int[][][] m_elemIndexes>;

        if null == r1 goto label1;

        $i4 = lengthof r1;

        if i0 >= $i4 goto label1;

        r2 = r1[i0];

        if null == r2 goto label1;

        $i5 = lengthof r2;

        if i1 >= $i5 goto label1;

        r3 = r2[i1];

        if null == r3 goto label1;

        $i6 = r3[0];

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findGTE(int[],int,int,int)>(r3, 1, $i6, i2);

        if i3 <= -1 goto label1;

        $i7 = r3[i3];

        return $i7;

     label1:
        return -2;
    }

    protected abstract int getNextNodeIdentity(int);

    protected abstract boolean nextNode();

    protected abstract int getNumberOfNodes();

    protected short _type(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i0);

        if -1 == i1 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i1);

        return $s2;

     label1:
        return -1;
    }

    protected int _exptype(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i1 goto label2;

        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if $z0 != 0 goto label1;

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label1;

        return -1;

     label2:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i2;
    }

    protected int _level(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, i4;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

     label1:
        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i1 goto label3;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if z0 != 0 goto label2;

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i3 goto label2;

        return -1;

     label2:
        goto label1;

     label3:
        i4 = 0;

     label4:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        i0 = $i2;

        if -1 == $i2 goto label5;

        i4 = i4 + 1;

        goto label4;

     label5:
        return i4;
    }

    protected int _firstch(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label1;

        $i3 = -2;

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

     label2:
        i1 = $i3;

     label3:
        if i1 != -2 goto label6;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i4 goto label4;

        if z0 != 0 goto label4;

        return -1;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 != -2 goto label5;

        if z0 != 0 goto label5;

        return -1;

     label5:
        goto label3;

     label6:
        return i1;
    }

    protected int _nextsib(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label1;

        $i3 = -2;

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

     label2:
        i1 = $i3;

     label3:
        if i1 != -2 goto label6;

        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i4 goto label4;

        if z0 != 0 goto label4;

        return -1;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 != -2 goto label5;

        if z0 != 0 goto label5;

        return -1;

     label5:
        goto label3;

     label6:
        return i1;
    }

    protected int _prevsib(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i5;

     label1:
        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        if z0 != 0 goto label2;

        return -1;

     label2:
        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i3 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        $i4 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i4;

     label3:
        goto label1;
    }

    protected int _parent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i5 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i5;

     label1:
        z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 < $i2 goto label2;

        if z0 != 0 goto label2;

        return -1;

     label2:
        $i3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        if i0 >= $i3 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $i4 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i4;

     label3:
        goto label1;
    }

    public void dumpDTM(java.io.OutputStream)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.io.OutputStream r1;
        java.io.File r2, $r82;
        int i0, i1, i2, i3, i5, i6, i7, i8, $i9, i10;
        short s4;
        java.lang.String r3, $r8, $r16, $r17, $r19, $r21, $r26, $r27, $r32, $r33, $r35, $r37, $r39, $r41, $r45, $r47, $r56, $r59, $r61, $r66, $r69, $r71, $r75, $r81, $r86, $r88, $r92, $r93;
        java.io.PrintStream $r4, $r90, $r95, r98;
        boolean $z0;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r20, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r34, $r36, $r38, $r40, $r42, $r43, $r44, $r46, $r48, $r49, $r51, $r52, $r53, $r54, $r55, $r57, $r58, $r60, $r62, $r63, $r64, $r65, $r67, $r68, $r70, $r72, $r73, $r74, $r77, $r78, $r79, $r80, $r83, $r84, $r85, $r87, $r89, $r91;
        org.apache.xml.utils.SuballocatedIntVector $r50;
        org.apache.xml.utils.XMLString $r76;
        java.lang.RuntimeException $r94;
        java.io.IOException $r96, r99;
        java.io.FileOutputStream $r97;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.io.OutputStream;

     label01:
        if r1 != null goto label02;

        $r82 = new java.io.File;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DTMDump");

        $i9 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r78 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r91 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".txt");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r82.<java.io.File: void <init>(java.lang.String)>($r92);

        r2 = $r82;

        $r90 = <java.lang.System: java.io.PrintStream err>;

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dumping... ");

        $r88 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $r85 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r88);

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r90.<java.io.PrintStream: void println(java.lang.String)>($r86);

        $r97 = new java.io.FileOutputStream;

        specialinvoke $r97.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        r1 = $r97;

     label02:
        $r4 = new java.io.PrintStream;

        specialinvoke $r4.<java.io.PrintStream: void <init>(java.io.OutputStream)>(r1);

        r98 = $r4;

     label03:
        $z0 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean nextNode()>();

        if $z0 == 0 goto label04;

        goto label03;

     label04:
        i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int m_size>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total nodes: ");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r8);

        i1 = 0;

     label05:
        if i1 >= i0 goto label34;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=========== index=");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handle=");

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ===========");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodeName: ");

        $r17 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeName(int)>(i2);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r19);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NodeNameX: ");

        $r21 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeNameX(int)>(i2);

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LocalName: ");

        $r26 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getLocalName(int)>(i2);

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r32);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NamespaceURI: ");

        $r35 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceURI(int)>(i2);

        $r36 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r33 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prefix: ");

        $r39 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getPrefix(int)>(i2);

        $r38 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r37 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r37);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expanded Type ID: ");

        $r41 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r45 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r45);

        s4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        tableswitch(s4)
        {
            case -1: goto label17;
            case 0: goto label20;
            case 1: goto label12;
            case 2: goto label06;
            case 3: goto label19;
            case 4: goto label07;
            case 5: goto label14;
            case 6: goto label13;
            case 7: goto label18;
            case 8: goto label08;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label09;
            case 12: goto label16;
            case 13: goto label15;
            default: goto label20;
        };

     label06:
        r3 = "ATTRIBUTE_NODE";

        goto label21;

     label07:
        r3 = "CDATA_SECTION_NODE";

        goto label21;

     label08:
        r3 = "COMMENT_NODE";

        goto label21;

     label09:
        r3 = "DOCUMENT_FRAGMENT_NODE";

        goto label21;

     label10:
        r3 = "DOCUMENT_NODE";

        goto label21;

     label11:
        r3 = "DOCUMENT_NODE";

        goto label21;

     label12:
        r3 = "ELEMENT_NODE";

        goto label21;

     label13:
        r3 = "ENTITY_NODE";

        goto label21;

     label14:
        r3 = "ENTITY_REFERENCE_NODE";

        goto label21;

     label15:
        r3 = "NAMESPACE_NODE";

        goto label21;

     label16:
        r3 = "NOTATION_NODE";

        goto label21;

     label17:
        r3 = "NULL";

        goto label21;

     label18:
        r3 = "PROCESSING_INSTRUCTION_NODE";

        goto label21;

     label19:
        r3 = "TEXT_NODE";

        goto label21;

     label20:
        r3 = "Unknown!";

     label21:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type: ");

        $r48 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r47 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r47);

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i1);

        if -1 != i5 goto label22;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("First child: DTM.NULL");

        goto label24;

     label22:
        if -2 != i5 goto label23;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("First child: NOTPROCESSED");

        goto label24;

     label23:
        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("First child: ");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label24:
        $r50 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r50 == null goto label27;

        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _prevsib(int)>(i1);

        if -1 != i6 goto label25;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: DTM.NULL");

        goto label27;

     label25:
        if -2 != i6 goto label26;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Prev sibling: NOTPROCESSED");

        goto label27;

     label26:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prev sibling: ");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r81 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r81);

     label27:
        i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i1);

        if -1 != i10 goto label28;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: DTM.NULL");

        goto label30;

     label28:
        if -2 != i10 goto label29;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Next sibling: NOTPROCESSED");

        goto label30;

     label29:
        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Next sibling: ");

        $r60 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r61);

     label30:
        i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

        if -1 != i7 goto label31;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Parent: DTM.NULL");

        goto label33;

     label31:
        if -2 != i7 goto label32;

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>("Parent: NOTPROCESSED");

        goto label33;

     label32:
        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parent: ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r59);

     label33:
        i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _level(int)>(i1);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        $r67 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level: ");

        $r70 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r69 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r69);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Node Value: ");

        $r66 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeValue(int)>(i2);

        $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r75 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r75);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r77 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String Value: ");

        $r76 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.XMLString getStringValue(int)>(i2);

        $r72 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r76);

        $r71 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r98.<java.io.PrintStream: void println(java.lang.String)>($r71);

        i1 = i1 + 1;

        goto label05;

     label34:
        goto label36;

     label35:
        $r96 := @caughtexception;

        r99 = $r96;

        $r95 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke r99.<java.io.IOException: void printStackTrace(java.io.PrintStream)>($r95);

        $r94 = new java.lang.RuntimeException;

        $r93 = virtualinvoke r99.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r94.<java.lang.RuntimeException: void <init>(java.lang.String)>($r93);

        throw $r94;

     label36:
        return;

        catch java.io.IOException from label01 to label34 with label35;
    }

    public java.lang.String dumpNode(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        java.lang.String r1, $r10, $r14, $r15, $r19, $r24, $r25;
        java.lang.StringBuffer r2, $r3;
        short $s1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r13, $r16, $r17, $r18, $r20, $r21, $r22;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label01;

        return "[null]";

     label01:
        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        tableswitch($s1)
        {
            case -1: goto label13;
            case 0: goto label16;
            case 1: goto label08;
            case 2: goto label02;
            case 3: goto label15;
            case 4: goto label03;
            case 5: goto label10;
            case 6: goto label09;
            case 7: goto label14;
            case 8: goto label04;
            case 9: goto label06;
            case 10: goto label07;
            case 11: goto label05;
            case 12: goto label12;
            case 13: goto label11;
            default: goto label16;
        };

     label02:
        r1 = "ATTR";

        goto label17;

     label03:
        r1 = "CDATA";

        goto label17;

     label04:
        r1 = "COMMENT";

        goto label17;

     label05:
        r1 = "DOC_FRAG";

        goto label17;

     label06:
        r1 = "DOC";

        goto label17;

     label07:
        r1 = "DOC_TYPE";

        goto label17;

     label08:
        r1 = "ELEMENT";

        goto label17;

     label09:
        r1 = "ENTITY";

        goto label17;

     label10:
        r1 = "ENT_REF";

        goto label17;

     label11:
        r1 = "NAMESPACE";

        goto label17;

     label12:
        r1 = "NOTATION";

        goto label17;

     label13:
        r1 = "null";

        goto label17;

     label14:
        r1 = "PI";

        goto label17;

     label15:
        r1 = "TEXT";

        goto label17;

     label16:
        r1 = "Unknown!";

     label17:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        r2 = $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(0x");

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>(i0);

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r14 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeNameX(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r15 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNamespaceURI(int)>(i0);

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=\"");

        $r19 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String getNodeValue(int)>(i0);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"]");

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r25 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r25;
    }

    public void setFeature(java.lang.String, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public boolean hasChildNodes(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i1);

        if i2 == -1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final int makeNodeHandle(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if -1 != i0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i1 = i0 >>> 16;

        $i2 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i1);

        $i3 = i0 & 65535;

        $i4 = $i2 + $i3;

        return $i4;
    }

    public final int makeNodeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        org.apache.xml.dtm.ref.DTMManagerDefault $r1, $r3, $r6;
        org.apache.xml.utils.SuballocatedIntVector $r2;
        org.apache.xml.dtm.DTM[] $r4;
        org.apache.xml.dtm.DTM $r5;
        int[] $r7;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if -1 != i0 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        if $r1 == null goto label3;

        i1 = i0 >>> 16;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r4 = $r3.<org.apache.xml.dtm.ref.DTMManagerDefault: org.apache.xml.dtm.DTM[] m_dtms>;

        $r5 = $r4[i1];

        if $r5 == r0 goto label2;

        return -1;

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault>;

        $r7 = $r6.<org.apache.xml.dtm.ref.DTMManagerDefault: int[] m_dtm_offsets>;

        $i8 = $r7[i1];

        $i6 = i0 & 65535;

        $i7 = $i8 | $i6;

        return $i7;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i2 = i0 & -65536;

        i9 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int)>($i2);

        if i9 != -1 goto label4;

        $i5 = -1;

        goto label5;

     label4:
        $i4 = i9 << 16;

        $i3 = i0 & 65535;

        $i5 = $i4 + $i3;

     label5:
        return $i5;
    }

    public int getFirstChild(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

        return $i3;
    }

    public int getTypedFirstChild(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, i10;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s9;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= 14 goto label4;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i7);

     label1:
        if i2 == -1 goto label7;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i2);

        if i3 == i1 goto label2;

        if i3 < 14 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s9 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i3);

        if $s9 != i1 goto label3;

     label2:
        $i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

        return $i8;

     label3:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i2);

        goto label1;

     label4:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i4);

     label5:
        if i10 == -1 goto label7;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i10);

        if $i5 != i1 goto label6;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i10);

        return $i6;

     label6:
        i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i10);

        goto label5;

     label7:
        return -1;
    }

    public int getLastChild(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i1);

        i3 = -1;

     label1:
        if i2 == -1 goto label2;

        i3 = i2;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i2);

        goto label1;

     label2:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        return $i4;
    }

    public abstract int getAttributeNode(int, java.lang.String, java.lang.String);

    public int getFirstAttribute(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getFirstAttributeIdentity(int)>(i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;
    }

    protected int getFirstAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        short s1, s3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if 1 != s1 goto label3;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i0);

        i0 = $i2;

        if -1 == $i2 goto label3;

        s3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if s3 != 2 goto label2;

        return i0;

     label2:
        if 13 == s3 goto label1;

        goto label3;

     label3:
        return -1;
    }

    protected int getTypedAttribute(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i3, $i4, $i5, $i6;
        short s2, s7;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        if 1 != s2 goto label3;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

     label1:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i3);

        i3 = $i4;

        if -1 == $i4 goto label3;

        s7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i3);

        if s7 != 2 goto label2;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i3);

        if $i5 != i1 goto label1;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i3);

        return $i6;

     label2:
        if 13 == s7 goto label1;

        goto label3;

     label3:
        return -1;
    }

    public int getNextSibling(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>($i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;
    }

    public int getTypedNextSibling(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s7;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

     label2:
        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i2);

        i2 = $i4;

        if $i4 == -1 goto label3;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i2);

        i3 = $i6;

        if $i6 == i1 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $s7 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>(i3);

        if $s7 == i1 goto label3;

        goto label2;

     label3:
        if i2 != -1 goto label4;

        $i5 = -1;

        goto label5;

     label4:
        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i2);

     label5:
        return $i5;
    }

    public int getPreviousSibling(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r1 == null goto label2;

        $i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _prevsib(int)>($i6);

        $i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i7);

        return $i8;

     label2:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i2);

        i4 = -1;

     label3:
        if i3 == i1 goto label4;

        i4 = i3;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i3);

        goto label3;

     label4:
        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i4);

        return $i5;
    }

    public int getNextAttribute(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i3, $i4;
        short $s2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        if $s2 != 2 goto label1;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextAttributeIdentity(int)>(i1);

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i3);

        return $i4;

     label1:
        return -1;
    }

    protected int getNextAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        short s1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i0);

        i0 = $i2;

        if -1 == $i2 goto label4;

        s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i0);

        if s1 != 2 goto label2;

        return i0;

     label2:
        if s1 == 13 goto label3;

        goto label4;

     label3:
        goto label1;

     label4:
        return -1;
    }

    protected void declareNamespaceInContext(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18;
        org.apache.xml.utils.SuballocatedIntVector r1, $r3, $r4, $r5, $r7, $r8, $r10, $r12, $r14, r16;
        java.util.Vector $r2, $r6, $r9, $r13, $r15;
        java.lang.Object $r11;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = null;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        if $r2 != null goto label01;

        $r10 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements> = $r10;

        $r14 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        $r15 = new java.util.Vector;

        specialinvoke $r15.<java.util.Vector: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets> = $r15;

        $r12 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r1 = $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        virtualinvoke $r13.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        goto label02;

     label01:
        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i5 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i2 = $i5 - 1;

        if i2 < 0 goto label02;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i16 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        if i0 != $i16 goto label02;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r11 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i2);

        r1 = (org.apache.xml.utils.SuballocatedIntVector) $r11;

     label02:
        if r1 != null goto label07;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

        $i11 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        r16 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>($i11);

        if r16 == null goto label05;

        i3 = virtualinvoke r16.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r7 = new org.apache.xml.utils.SuballocatedIntVector;

        $i12 = i3 + 16;

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>($i12, 2048);

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i14, 32);

        specialinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>($i13);

        r1 = $r7;

        i4 = 0;

     label03:
        if i4 >= i3 goto label04;

        $i15 = virtualinvoke r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i4);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i15);

        i4 = i4 + 1;

        goto label03;

     label04:
        goto label06;

     label05:
        $r5 = new org.apache.xml.utils.SuballocatedIntVector;

        specialinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void <init>(int)>(32);

        r1 = $r5;

     label06:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        virtualinvoke $r6.<java.util.Vector: void addElement(java.lang.Object)>(r1);

     label07:
        i17 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        $i6 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i18 = $i6 - 1;

     label08:
        if i18 < 0 goto label10;

        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i18);

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getExpandedTypeID(int)>($i8);

        if i17 != $i9 goto label09;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>($i10, i18);

        return;

     label09:
        i18 = i18 + -1;

        goto label08;

     label10:
        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i7);

        return;
    }

    protected org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i10, i11, i12;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r7, $r9, $r13;
        java.lang.Object $r5, $r10, $r11;
        java.util.Vector $r6, $r8, $r12;
        short $s9;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if null == $r1 goto label11;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector,int)>($r2, i0);

        if i1 < 0 goto label01;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r11 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>(i1);

        $r13 = (org.apache.xml.utils.SuballocatedIntVector) $r11;

        return $r13;

     label01:
        if i1 != -1 goto label02;

        return null;

     label02:
        i11 = -1 - i1;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i12 = i11 + -1;

        i2 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i12);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i0);

        if i12 != 0 goto label07;

        if i2 >= i3 goto label07;

        $i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i0);

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocumentRoot(int)>($i8);

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i4);

        $s9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i4);

        if $s9 != 9 goto label05;

        i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>(i5);

        if i7 == -1 goto label03;

        $i10 = i7;

        goto label04;

     label03:
        $i10 = i5;

     label04:
        i6 = $i10;

        goto label06;

     label05:
        i6 = i5;

     label06:
        if i2 != i6 goto label07;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r10 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        $r9 = (org.apache.xml.utils.SuballocatedIntVector) $r10;

        return $r9;

     label07:
        if i12 < 0 goto label11;

        if i3 <= 0 goto label11;

        if i2 != i3 goto label08;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.util.Vector m_namespaceDeclSets>;

        $r5 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        $r7 = (org.apache.xml.utils.SuballocatedIntVector) $r5;

        return $r7;

     label08:
        if i2 >= i3 goto label10;

     label09:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i3);

        if i2 < i3 goto label09;

        goto label07;

     label10:
        if i12 <= 0 goto label11;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        i12 = i12 + -1;

        i2 = virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i12);

        goto label07;

     label11:
        return null;
    }

    protected int findInSortedSuballocatedIntVector(org.apache.xml.utils.SuballocatedIntVector, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.SuballocatedIntVector r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.utils.SuballocatedIntVector;

        i0 := @parameter1: int;

        i1 = 0;

        if r1 == null goto label6;

        i2 = 0;

        $i6 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        i3 = $i6 - 1;

     label1:
        if i2 > i3 goto label5;

        $i7 = i2 + i3;

        i1 = $i7 / 2;

        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        i4 = i0 - $i8;

        if i4 != 0 goto label2;

        return i1;

     label2:
        if i4 >= 0 goto label3;

        i3 = i1 - 1;

        goto label4;

     label3:
        i2 = i1 + 1;

     label4:
        goto label1;

     label5:
        if i2 <= i1 goto label6;

        i1 = i2;

     label6:
        $i5 = -1 - i1;

        return $i5;
    }

    public int getFirstNamespaceNode(int, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i3, $i4, $i6, $i7, i8;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector r1;
        short $s2, $s5, s9;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label4;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i1);

        if $s5 != 1 goto label3;

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>(i1);

        if r1 == null goto label1;

        $i6 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i6 >= 1 goto label2;

     label1:
        return -1;

     label2:
        $i7 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        return $i7;

     label3:
        return -1;

     label4:
        i8 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $s2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i8);

        if $s2 != 1 goto label9;

     label5:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i8);

        i8 = $i3;

        if -1 == $i3 goto label8;

        s9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i8);

        if s9 != 13 goto label6;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i8);

        return $i4;

     label6:
        if 2 == s9 goto label7;

        goto label8;

     label7:
        goto label5;

     label8:
        return -1;

     label9:
        return -1;
    }

    public int getNextNamespaceNode(int, int, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector r1;
        short s10;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label4;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>($i5);

        if r1 != null goto label1;

        return -1;

     label1:
        $i6 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int indexOf(int)>(i1);

        i2 = 1 + $i6;

        if i2 <= 0 goto label2;

        $i7 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if i2 != $i7 goto label3;

     label2:
        return -1;

     label3:
        $i8 = virtualinvoke r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        return $i8;

     label4:
        i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i1);

     label5:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getNextNodeIdentity(int)>(i9);

        i9 = $i3;

        if -1 == $i3 goto label8;

        s10 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short _type(int)>(i9);

        if s10 != 13 goto label6;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i9);

        return $i4;

     label6:
        if s10 == 2 goto label7;

        goto label8;

     label7:
        goto label5;

     label8:
        return -1;
    }

    public int getParent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        if i1 <= 0 goto label1;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _parent(int)>(i1);

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>($i2);

        return $i3;

     label1:
        return -1;
    }

    public int getDocument()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.SuballocatedIntVector $r1;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        return $i0;
    }

    public int getOwnerDocument(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i2;
        short $s1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $s1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: short getNodeType(int)>(i0);

        if 9 != $s1 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocumentRoot(int)>(i0);

        return $i2;
    }

    public int getDocumentRoot(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;
        org.apache.xml.dtm.DTMManager $r1;
        org.apache.xml.dtm.DTM $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager getManager()>();

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.DTMManager: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        $i1 = interfaceinvoke $r2.<org.apache.xml.dtm.DTM: int getDocument()>();

        return $i1;
    }

    public abstract org.apache.xml.utils.XMLString getStringValue(int);

    public int getStringValueChunkCount(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return 0;
    }

    public char[] getStringValueChunk(int, int, int[])
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1;
        int[] r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        $r2 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r2);

        return null;
    }

    public int getExpandedTypeID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label1;

        return -1;

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        return $i2;
    }

    public int getExpandedTypeID(java.lang.String, java.lang.String, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, r2;
        int i0, $i1;
        org.apache.xml.dtm.ref.ExpandedNameTable r3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke r3.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, i0);

        return $i1;
    }

    public java.lang.String getLocalNameFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>(i0);

        return $r2;
    }

    public java.lang.String getNamespaceFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getNamespace(int)>(i0);

        return $r2;
    }

    public int getNamespaceType(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, $i3;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>(i1);

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i3 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: int getNamespaceID(int)>(i2);

        return $i3;
    }

    public abstract java.lang.String getNodeName(int);

    public java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return null;
    }

    public abstract java.lang.String getLocalName(int);

    public abstract java.lang.String getPrefix(int);

    public abstract java.lang.String getNamespaceURI(int);

    public abstract java.lang.String getNodeValue(int);

    public short getNodeType(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1, $i2;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        short $s3;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _exptype(int)>($i1);

        $s3 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: short getType(int)>($i2);

        return $s3;
    }

    public short getLevel(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, $i2, $i3;
        short $s4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int _level(int)>(i1);

        $i3 = $i2 + 1;

        $s4 = (short) $i3;

        return $s4;
    }

    public int getNodeIdent(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        return $i1;
    }

    public int getNodeHandle(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i0);

        return $i1;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public java.lang.String getDocumentBaseURI()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI>;

        return $r1;
    }

    public void setDocumentBaseURI(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI> = r1;

        return;
    }

    public java.lang.String getDocumentSystemIdentifier(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: java.lang.String m_documentBaseURI>;

        return $r1;
    }

    public java.lang.String getDocumentEncoding(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return "UTF-8";
    }

    public java.lang.String getDocumentStandalone(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getDocumentVersion(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return null;
    }

    public boolean getDocumentAllDeclarationsProcessed()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return 1;
    }

    public abstract java.lang.String getDocumentTypeDeclarationSystemIdentifier();

    public abstract java.lang.String getDocumentTypeDeclarationPublicIdentifier();

    public abstract int getElementById(java.lang.String);

    public abstract java.lang.String getUnparsedEntityURI(java.lang.String);

    public boolean supportsPreStripping()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return 1;
    }

    public boolean isNodeAfter(int, int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i0);

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i1);

        if i2 == -1 goto label1;

        if i3 == -1 goto label1;

        if i2 > i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isCharacterElementContentWhitespace(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isDocumentAllDeclarationsProcessed(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        return 1;
    }

    public abstract boolean isAttributeSpecified(int);

    public abstract void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException;

    public abstract void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException;

    public org.w3c.dom.Node getNode(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        org.apache.xml.dtm.ref.DTMNodeProxy $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        $r1 = new org.apache.xml.dtm.ref.DTMNodeProxy;

        specialinvoke $r1.<org.apache.xml.dtm.ref.DTMNodeProxy: void <init>(org.apache.xml.dtm.DTM,int)>(r0, i0);

        return $r1;
    }

    public void appendChild(int, boolean, boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        int i0;
        boolean z0, z1;
        java.lang.String $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r1);

        return;
    }

    public void appendTextChild(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_METHOD_NOT_SUPPORTED", null);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBase: void error(java.lang.String)>($r2);

        return;
    }

    protected void error(java.lang.String)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        java.lang.String r1;
        org.apache.xml.dtm.DTMException $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.xml.dtm.DTMException;

        specialinvoke $r2.<org.apache.xml.dtm.DTMException: void <init>(java.lang.String)>(r1);

        throw $r2;
    }

    protected boolean getShouldStripWhitespace()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS>;

        return $z0;
    }

    protected void pushShouldStripWhitespace(boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean z0;
        org.apache.xml.utils.BoolStack $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = z0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        virtualinvoke $r2.<org.apache.xml.utils.BoolStack: boolean push(boolean)>(z0);

     label1:
        return;
    }

    protected void popShouldStripWhitespace()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.utils.BoolStack $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        $z0 = virtualinvoke $r2.<org.apache.xml.utils.BoolStack: boolean popAndTop()>();

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = $z0;

     label1:
        return;
    }

    protected void setShouldStripWhitespace(boolean)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        boolean z0;
        org.apache.xml.utils.BoolStack $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        z0 := @parameter0: boolean;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: boolean m_shouldStripWS> = z0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.BoolStack m_shouldStripWhitespaceStack>;

        virtualinvoke $r2.<org.apache.xml.utils.BoolStack: void setTop(boolean)>(z0);

     label1:
        return;
    }

    public void documentRegistration()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return;
    }

    public void documentRelease()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        return;
    }

    public void migrateTo(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager r1;
        boolean $z0;
        org.apache.xml.dtm.ref.DTMManagerDefault $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr> = r1;

        $z0 = r1 instanceof org.apache.xml.dtm.ref.DTMManagerDefault;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.xml.dtm.ref.DTMManagerDefault) r1;

        r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.ref.DTMManagerDefault m_mgrDefault> = $r2;

     label1:
        return;
    }

    public org.apache.xml.dtm.DTMManager getManager()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        return $r1;
    }

    public org.apache.xml.utils.SuballocatedIntVector getDTMIDs()
    {
        org.apache.xml.dtm.ref.DTMDefaultBase r0;
        org.apache.xml.dtm.DTMManager $r1;
        org.apache.xml.utils.SuballocatedIntVector $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBase;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.dtm.DTMManager m_mgr>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBase: org.apache.xml.utils.SuballocatedIntVector m_dtmIdent>;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.DTMDefaultBase: int NOTPROCESSED> = -2;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_NUMBLOCKS_SMALL> = 4;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_NUMBLOCKS> = 32;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int DEFAULT_BLOCKSIZE> = 512;

        <org.apache.xml.dtm.ref.DTMDefaultBase: int ROOTNODE> = 0;

        <org.apache.xml.dtm.ref.DTMDefaultBase: boolean JJK_DEBUG> = 0;

        return;
    }
}
