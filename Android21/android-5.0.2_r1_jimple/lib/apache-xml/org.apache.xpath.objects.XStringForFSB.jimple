public class org.apache.xpath.objects.XStringForFSB extends org.apache.xpath.objects.XString
{
    static final long serialVersionUID;
    int m_start;
    int m_length;
    protected java.lang.String m_strCache;
    protected int m_hash;

    public void <init>(org.apache.xml.utils.FastStringBuffer, int, int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.FastStringBuffer r1;
        int i0, i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.objects.XString: void <init>(java.lang.Object)>(r1);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = null;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_hash> = 0;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_start> = i0;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_length> = i1;

        if null != r1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_FASTSTRINGBUFFER_CANNOT_BE_NULL", null);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        return;
    }

    private void <init>(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1, $r3;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>(r1);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = null;

        r0.<org.apache.xpath.objects.XStringForFSB: int m_hash> = 0;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_FSB_CANNOT_TAKE_STRING", null);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public org.apache.xml.utils.FastStringBuffer fsb()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.Object $r1;
        org.apache.xml.utils.FastStringBuffer $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.Object m_obj>;

        $r2 = (org.apache.xml.utils.FastStringBuffer) $r1;

        return $r2;
    }

    public void appendToFsb(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.FastStringBuffer r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r2);

        return;
    }

    public boolean hasString()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object object()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        return $r1;
    }

    public java.lang.String str()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String $r1, $r2, $r4;
        org.apache.xml.utils.FastStringBuffer $r3;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        if null != $r1 goto label1;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i1, $i0);

        r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache> = $r4;

     label1:
        $r2 = r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String m_strCache>;

        return $r2;
    }

    public void dispatchCharactersEvents(org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.xml.sax.ContentHandler r1;
        org.apache.xml.utils.FastStringBuffer $r2;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.xml.sax.ContentHandler;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i1, $i0);

        return;
    }

    public void dispatchAsComment(org.xml.sax.ext.LexicalHandler) throws org.xml.sax.SAXException
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.xml.sax.ext.LexicalHandler r1;
        org.apache.xml.utils.FastStringBuffer $r2;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.xml.sax.ext.LexicalHandler;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void sendSAXComment(org.xml.sax.ext.LexicalHandler,int,int)>(r1, $i1, $i0);

        return;
    }

    public int length()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int $i0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        return $i0;
    }

    public char charAt(int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int i0, $i1, $i2;
        org.apache.xml.utils.FastStringBuffer $r1;
        char $c3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i2 = $i1 + i0;

        $c3 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>($i2);

        return $c3;
    }

    public void getChars(int, int, char[], int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        char[] r1;
        org.apache.xml.utils.FastStringBuffer r2;
        char $c15;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i2 := @parameter3: int;

        i3 = i1 - i0;

        $i7 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i3 <= $i7 goto label1;

        i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

     label1:
        $i8 = lengthof r1;

        $i9 = $i8 - i2;

        if i3 <= $i9 goto label2;

        $i14 = lengthof r1;

        i3 = $i14 - i2;

     label2:
        $i10 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i11 = i0 + $i10;

        i4 = $i11 + i3;

        i5 = i2;

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i13 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i6 = i0 + $i13;

     label3:
        if i6 >= i4 goto label4;

        $i12 = i5;

        i5 = i5 + 1;

        $c15 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i6);

        r1[$i12] = $c15;

        i6 = i6 + 1;

        goto label3;

     label4:
        return;
    }

    public boolean equals(org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        int i0, i1, i2, $i3, $i4;
        org.apache.xml.utils.FastStringBuffer r2;
        char $c5, $c6;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        if r0 != r1 goto label1;

        return 1;

     label1:
        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i3 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        if i0 != $i3 goto label5;

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i2 = 0;

     label2:
        $i4 = i0;

        i0 = i0 + -1;

        if $i4 == 0 goto label4;

        $c5 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i1);

        $c6 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i2);

        if $c5 == $c6 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    public boolean equals(org.apache.xpath.objects.XObject)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xpath.objects.XObject r1;
        java.lang.String r2;
        int i0, i1, i2, $i3, $i4, $i5;
        org.apache.xml.utils.FastStringBuffer r3;
        char $c6, $c7;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xpath.objects.XObject;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $i3 = virtualinvoke r1.<org.apache.xpath.objects.XObject: int getType()>();

        if $i3 != 2 goto label2;

        $z0 = virtualinvoke r1.<org.apache.xpath.objects.XObject: boolean equals(org.apache.xpath.objects.XObject)>(r0);

        return $z0;

     label2:
        r2 = virtualinvoke r1.<org.apache.xpath.objects.XObject: java.lang.String str()>();

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i4 = virtualinvoke r2.<java.lang.String: int length()>();

        if i0 != $i4 goto label6;

        r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i2 = 0;

     label3:
        $i5 = i0;

        i0 = i0 + -1;

        if $i5 == 0 goto label5;

        $c6 = virtualinvoke r3.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i1);

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        if $c6 == $c7 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public boolean equals(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1;
        int i0, i1, i2, $i3, $i4;
        org.apache.xml.utils.FastStringBuffer r2;
        char $c5, $c6;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if i0 != $i3 goto label4;

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i1 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i2 = 0;

     label1:
        $i4 = i0;

        i0 = i0 + -1;

        if $i4 == 0 goto label3;

        $c5 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i1);

        $c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        if $c5 == $c6 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r2;
        org.apache.xml.utils.XMLString $r3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.Object;

        if null != r1 goto label1;

        return 0;

     label1:
        $z0 = r1 instanceof org.apache.xpath.objects.XNumber;

        if $z0 == 0 goto label2;

        $z6 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z6;

     label2:
        $z1 = r1 instanceof org.apache.xpath.objects.XNodeSet;

        if $z1 == 0 goto label3;

        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        return $z5;

     label3:
        $z2 = r1 instanceof org.apache.xpath.objects.XStringForFSB;

        if $z2 == 0 goto label4;

        $r3 = (org.apache.xml.utils.XMLString) r1;

        $z4 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: boolean equals(org.apache.xml.utils.XMLString)>($r3);

        return $z4;

     label4:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $z3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: boolean equals(java.lang.String)>($r2);

        return $z3;
    }

    public boolean equalsIgnoreCase(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != $i1 goto label1;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int compareTo(org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        int i0, i1, i2, i3, i4, $i7, $i8, $i9;
        org.apache.xml.utils.FastStringBuffer r2;
        char c5, c6;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i1 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i4 = 0;

     label1:
        $i7 = i2;

        i2 = i2 + -1;

        if $i7 == 0 goto label3;

        c5 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i3);

        c6 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i4);

        if c5 == c6 goto label2;

        $i9 = c5 - c6;

        return $i9;

     label2:
        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label3:
        $i8 = i0 - i1;

        return $i8;
    }

    public int compareToIgnoreCase(org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        int i0, i1, i2, i3, i4, $i7, $i8, $i11;
        org.apache.xml.utils.FastStringBuffer r2;
        char c5, c6, $c9, $c10;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        i0 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i1 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i4 = 0;

     label1:
        $i7 = i2;

        i2 = i2 + -1;

        if $i7 == 0 goto label3;

        $c9 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i3);

        c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c9);

        $c10 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i4);

        c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c10);

        if c5 == c6 goto label2;

        $i11 = c5 - c6;

        return $i11;

     label2:
        i3 = i3 + 1;

        i4 = i4 + 1;

        goto label1;

     label3:
        $i8 = i0 - i1;

        return $i8;
    }

    public int hashCode()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int $i0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i0 = specialinvoke r0.<org.apache.xpath.objects.XString: int hashCode()>();

        return $i0;
    }

    public boolean startsWith(org.apache.xml.utils.XMLString, int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        int i0, i1, i3, i4, $i5, $i8, $i9;
        org.apache.xml.utils.FastStringBuffer r2;
        char $c10, $c11;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i1 = $i5 + i0;

        i3 = 0;

        i4 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: int length()>();

        if i0 < 0 goto label1;

        $i8 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i9 = $i8 - i4;

        if i0 <= $i9 goto label2;

     label1:
        return 0;

     label2:
        i4 = i4 + -1;

        if i4 < 0 goto label4;

        $c10 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i1);

        $c11 = interfaceinvoke r1.<org.apache.xml.utils.XMLString: char charAt(int)>(i3);

        if $c10 == $c11 goto label3;

        return 0;

     label3:
        i1 = i1 + 1;

        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;
    }

    public boolean startsWith(org.apache.xml.utils.XMLString)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: org.apache.xml.utils.XMLString;

        $z0 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: boolean startsWith(org.apache.xml.utils.XMLString,int)>(r1, 0);

        return $z0;
    }

    public int indexOf(int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int i0, $i1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: int indexOf(int,int)>(i0, 0);

        return $i1;
    }

    public int indexOf(int, int)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i9, $i10;
        org.apache.xml.utils.FastStringBuffer r1;
        char $c8;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i2 = $i5 + $i4;

        r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        if i1 >= 0 goto label1;

        i1 = 0;

        goto label2;

     label1:
        $i6 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i1 < $i6 goto label2;

        return -1;

     label2:
        $i7 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i3 = $i7 + i1;

     label3:
        if i3 >= i2 goto label5;

        $c8 = virtualinvoke r1.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i3);

        if $c8 != i0 goto label4;

        $i9 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i10 = i3 - $i9;

        return $i10;

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        return -1;
    }

    public org.apache.xml.utils.XMLString substring(int)
    {
        org.apache.xpath.objects.XStringForFSB r0, $r1;
        int i0, i1, i2, $i3, $i4;
        org.apache.xml.utils.FastStringBuffer $r2;
        org.apache.xpath.objects.XString $r3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        i1 = $i3 - i0;

        if i1 > 0 goto label1;

        $r3 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r3;

     label1:
        $i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i2 = $i4 + i0;

        $r1 = new org.apache.xpath.objects.XStringForFSB;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        specialinvoke $r1.<org.apache.xpath.objects.XStringForFSB: void <init>(org.apache.xml.utils.FastStringBuffer,int,int)>($r2, i2, i1);

        return $r1;
    }

    public org.apache.xml.utils.XMLString substring(int, int)
    {
        org.apache.xpath.objects.XStringForFSB r0, $r1;
        int i0, i1, i2, i3, $i4, $i5;
        org.apache.xml.utils.FastStringBuffer $r2;
        org.apache.xpath.objects.XString $r3;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i1 - i0;

        $i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i2 <= $i4 goto label1;

        i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

     label1:
        if i2 > 0 goto label2;

        $r3 = <org.apache.xpath.objects.XString: org.apache.xpath.objects.XString EMPTYSTRING>;

        return $r3;

     label2:
        $i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i3 = $i5 + i0;

        $r1 = new org.apache.xpath.objects.XStringForFSB;

        $r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        specialinvoke $r1.<org.apache.xpath.objects.XStringForFSB: void <init>(org.apache.xml.utils.FastStringBuffer,int,int)>($r2, i3, i2);

        return $r1;
    }

    public org.apache.xml.utils.XMLString concat(java.lang.String)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        java.lang.String r1, $r3, $r4;
        org.apache.xpath.objects.XString $r2;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        r1 := @parameter0: java.lang.String;

        $r2 = new org.apache.xpath.objects.XString;

        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: java.lang.String str()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String concat(java.lang.String)>(r1);

        specialinvoke $r2.<org.apache.xpath.objects.XString: void <init>(java.lang.String)>($r4);

        return $r2;
    }

    public org.apache.xml.utils.XMLString trim()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        org.apache.xml.utils.XMLString $r1;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $r1 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.XMLString fixWhiteSpace(boolean,boolean,boolean)>(1, 1, 0);

        return $r1;
    }

    private static boolean isSpace(char)
    {
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>(c0);

        return $z0;
    }

    public org.apache.xml.utils.XMLString fixWhiteSpace(boolean, boolean, boolean)
    {
        org.apache.xpath.objects.XStringForFSB r0;
        boolean z0, z1, z2, z3, z4, $z5;
        int i0, i1, i2, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i14, i15;
        char[] r1;
        org.apache.xml.utils.FastStringBuffer r2;
        char c3, c4, $c10, $c11;
        org.apache.xml.utils.XMLString $r3;
        org.apache.xml.utils.XMLStringFactory r4;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $i6 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        $i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        i0 = $i6 + $i5;

        $i7 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        r1 = newarray (char)[$i7];

        r2 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        z3 = 0;

        i1 = 0;

        z4 = 0;

        i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

     label01:
        if i2 >= i0 goto label08;

        c3 = virtualinvoke r2.<org.apache.xml.utils.FastStringBuffer: char charAt(int)>(i2);

        $z5 = staticinvoke <org.apache.xpath.objects.XStringForFSB: boolean isSpace(char)>(c3);

        if $z5 == 0 goto label06;

        if z4 != 0 goto label05;

        if 32 == c3 goto label02;

        z3 = 1;

     label02:
        $i14 = i1;

        i1 = i1 + 1;

        r1[$i14] = 32;

        if z2 == 0 goto label04;

        if i1 == 0 goto label04;

        $i13 = i1 - 1;

        c4 = r1[$i13];

        if c4 == 46 goto label03;

        if c4 == 33 goto label03;

        if c4 == 63 goto label03;

        z4 = 1;

     label03:
        goto label07;

     label04:
        z4 = 1;

        goto label07;

     label05:
        z3 = 1;

        z4 = 1;

        goto label07;

     label06:
        $i12 = i1;

        i1 = i1 + 1;

        r1[$i12] = c3;

        z4 = 0;

     label07:
        i2 = i2 + 1;

        goto label01;

     label08:
        if z1 == 0 goto label09;

        if 1 > i1 goto label09;

        $i9 = i1 - 1;

        $c11 = r1[$i9];

        if 32 != $c11 goto label09;

        z3 = 1;

        i1 = i1 + -1;

     label09:
        i15 = 0;

        if z0 == 0 goto label10;

        if 0 >= i1 goto label10;

        $c10 = r1[0];

        if 32 != $c10 goto label10;

        z3 = 1;

        i15 = i15 + 1;

     label10:
        r4 = staticinvoke <org.apache.xpath.objects.XMLStringFactoryImpl: org.apache.xml.utils.XMLStringFactory getFactory()>();

        if z3 == 0 goto label11;

        $i8 = i1 - i15;

        $r3 = virtualinvoke r4.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(char[],int,int)>(r1, i15, $i8);

        goto label12;

     label11:
        $r3 = r0;

     label12:
        return $r3;
    }

    public double toDouble()
    {
        org.apache.xpath.objects.XStringForFSB r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10;
        char c1, $c7, $c11, $c12;
        java.lang.String r1;
        org.apache.xml.utils.FastStringBuffer $r3;
        double $d0;
        java.lang.Double $r4;
        boolean $z0, $z1;
        java.lang.NumberFormatException $r5;

        r0 := @this: org.apache.xpath.objects.XStringForFSB;

        $i2 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if $i2 != 0 goto label01;

        return #NaN;

     label01:
        $r3 = virtualinvoke r0.<org.apache.xpath.objects.XStringForFSB: org.apache.xml.utils.FastStringBuffer fsb()>();

        $i4 = r0.<org.apache.xpath.objects.XStringForFSB: int m_start>;

        $i3 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        r1 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i4, $i3);

        i0 = 0;

     label02:
        $i5 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i0 >= $i5 goto label04;

        $c12 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        $z1 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c12);

        if $z1 != 0 goto label03;

        goto label04;

     label03:
        i0 = i0 + 1;

        goto label02;

     label04:
        $i6 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i0 != $i6 goto label05;

        return #NaN;

     label05:
        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if $c7 != 45 goto label06;

        i0 = i0 + 1;

     label06:
        $i8 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i0 >= $i8 goto label08;

        c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        if c1 == 46 goto label07;

        if c1 < 48 goto label08;

        if c1 <= 57 goto label07;

        goto label08;

     label07:
        i0 = i0 + 1;

        goto label06;

     label08:
        $i9 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i0 >= $i9 goto label10;

        $c11 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0);

        $z0 = staticinvoke <org.apache.xml.utils.XMLCharacterRecognizer: boolean isWhiteSpace(char)>($c11);

        if $z0 != 0 goto label09;

        goto label10;

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        $i10 = r0.<org.apache.xpath.objects.XStringForFSB: int m_length>;

        if i0 == $i10 goto label11;

        return #NaN;

     label11:
        $r4 = new java.lang.Double;

        specialinvoke $r4.<java.lang.Double: void <init>(java.lang.String)>(r1);

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

     label12:
        return $d0;

     label13:
        $r5 := @caughtexception;

        return #NaN;

        catch java.lang.NumberFormatException from label11 to label12 with label13;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.objects.XStringForFSB: long serialVersionUID> = -1533039186550674548L;

        return;
    }
}
