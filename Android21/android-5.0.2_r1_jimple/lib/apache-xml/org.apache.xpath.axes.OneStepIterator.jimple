public class org.apache.xpath.axes.OneStepIterator extends org.apache.xpath.axes.ChildTestIterator
{
    static final long serialVersionUID;
    protected int m_axis;
    protected org.apache.xml.dtm.DTMAxisIterator m_iterator;

    void <init>(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, i2, $i3;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r1, i0, i1);

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = -1;

        i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $i3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getAxisFromStep(org.apache.xpath.compiler.Compiler,int)>(r1, i2);

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = $i3;

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMAxisIterator, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator r1;
        int i0;
        byte b1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xml.dtm.DTMAxisIterator;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xml.dtm.DTMAxisTraverser)>(null);

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = -1;

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = r1;

        r0.<org.apache.xpath.axes.OneStepIterator: int m_axis> = i0;

        b1 = -1;

        virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: void initNodeTest(int)>(b1);

        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1;
        org.apache.xml.dtm.DTMAxisIterator $r2, $r5;
        org.apache.xml.dtm.DTM $r4;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $i1 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        if $i1 <= -1 goto label1;

        $r4 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTM m_cdtm>;

        $i3 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTM: org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)>($i3);

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r5;

     label1:
        $r2 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $i2 = r0.<org.apache.xpath.axes.OneStepIterator: int m_context>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator setStartNode(int)>($i2);

        return;
    }

    public void detach()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        boolean $z0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $z0 = r0.<org.apache.xpath.axes.OneStepIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label2;

        $i0 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        if $i0 <= -1 goto label1;

        r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = null;

     label1:
        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void detach()>();

     label2:
        return;
    }

    protected int getNextNode()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        int $i0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $i0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: int next()>();

        r0.<org.apache.xpath.axes.OneStepIterator: int m_lastFetched> = $i0;

        return $i0;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.OneStepIterator r0, r1;
        java.lang.Object $r2;
        org.apache.xml.dtm.DTMAxisIterator $r3, $r4, $r5;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r2 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: java.lang.Object clone()>();

        r1 = (org.apache.xpath.axes.OneStepIterator) $r2;

        $r3 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $r5 = interfaceinvoke $r4.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator cloneIterator()>();

        r1.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r5;

     label1:
        return r1;
    }

    public org.apache.xml.dtm.DTMIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.OneStepIterator r0, r1;
        org.apache.xml.dtm.DTMIterator $r2;
        org.apache.xml.dtm.DTMAxisIterator $r3;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r2 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r1 = (org.apache.xpath.axes.OneStepIterator) $r2;

        $r3 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        r1.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator> = $r3;

        return r1;
    }

    public boolean isReverseAxes()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        $z0 = interfaceinvoke $r1.<org.apache.xml.dtm.DTMAxisIterator: boolean isReverse()>();

        return $z0;
    }

    protected int getProximityPosition(int)
    {
        org.apache.xpath.axes.OneStepIterator r0, r2;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.xpath.XPathContext r1;
        java.lang.Throwable r3, $r8;
        boolean $z0;
        int[] $r4, $r5, $r7;
        java.lang.Object $r6;
        java.lang.CloneNotSupportedException $r9;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z0 != 0 goto label01;

        $i8 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: int getProximityPosition(int)>(i0);

        return $i8;

     label01:
        if i0 >= 0 goto label02;

        return -1;

     label02:
        $r4 = r0.<org.apache.xpath.axes.OneStepIterator: int[] m_proximityPositions>;

        $i4 = $r4[i0];

        if $i4 > 0 goto label11;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xpath.XPathContext getXPathContext()>();

     label03:
        $r6 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.OneStepIterator) $r6;

        i1 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: int getRoot()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>(i1);

        virtualinvoke r2.<org.apache.xpath.axes.OneStepIterator: void setRoot(int,java.lang.Object)>(i1, r1);

        r2.<org.apache.xpath.axes.OneStepIterator: int m_predCount> = i0;

        i2 = 1;

     label04:
        $i6 = virtualinvoke r2.<org.apache.xpath.axes.OneStepIterator: int nextNode()>();

        if -1 == $i6 goto label05;

        i2 = i2 + 1;

        goto label04;

     label05:
        $r7 = r0.<org.apache.xpath.axes.OneStepIterator: int[] m_proximityPositions>;

        $i7 = $r7[i0];

        $i9 = $i7 + i2;

        $r7[i0] = $i9;

     label06:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label11;

     label07:
        $r9 := @caughtexception;

     label08:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label11;

     label09:
        $r8 := @caughtexception;

        r3 = $r8;

     label10:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        throw r3;

     label11:
        $r5 = r0.<org.apache.xpath.axes.OneStepIterator: int[] m_proximityPositions>;

        $i5 = $r5[i0];

        return $i5;

        catch java.lang.CloneNotSupportedException from label03 to label06 with label07;
        catch java.lang.Throwable from label03 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    public int getLength()
    {
        org.apache.xpath.axes.OneStepIterator r0, r2;
        boolean z0, $z1, $z2;
        int i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.apache.xpath.XPathContext r1, $r4;
        java.lang.Throwable r3, $r7;
        org.apache.xpath.axes.SubContextList $r5;
        org.apache.xml.dtm.DTMIterator $r6;
        java.lang.CloneNotSupportedException $r8;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $z1 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z1 != 0 goto label01;

        $i10 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: int getLength()>();

        return $i10;

     label01:
        $r4 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xpath.XPathContext m_execContext>;

        $r5 = virtualinvoke $r4.<org.apache.xpath.XPathContext: org.apache.xpath.axes.SubContextList getSubContextList()>();

        if r0 != $r5 goto label02;

        $z2 = 1;

        goto label03;

     label02:
        $z2 = 0;

     label03:
        z0 = $z2;

        virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: int getPredicateCount()>();

        $i4 = r0.<org.apache.xpath.axes.OneStepIterator: int m_length>;

        if -1 == $i4 goto label04;

        if z0 == 0 goto label04;

        $i7 = r0.<org.apache.xpath.axes.OneStepIterator: int m_predicateIndex>;

        if $i7 >= 1 goto label04;

        $i9 = r0.<org.apache.xpath.axes.OneStepIterator: int m_length>;

        return $i9;

     label04:
        i1 = 0;

        r1 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xpath.XPathContext getXPathContext()>();

     label05:
        $r6 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMIterator cloneWithReset()>();

        r2 = (org.apache.xpath.axes.OneStepIterator) $r6;

        i2 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: int getRoot()>();

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>(i2);

        virtualinvoke r2.<org.apache.xpath.axes.OneStepIterator: void setRoot(int,java.lang.Object)>(i2, r1);

        $i5 = r0.<org.apache.xpath.axes.OneStepIterator: int m_predicateIndex>;

        r2.<org.apache.xpath.axes.OneStepIterator: int m_predCount> = $i5;

     label06:
        $i6 = virtualinvoke r2.<org.apache.xpath.axes.OneStepIterator: int nextNode()>();

        if -1 == $i6 goto label07;

        i1 = i1 + 1;

        goto label06;

     label07:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label12;

     label08:
        $r8 := @caughtexception;

     label09:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        goto label12;

     label10:
        $r7 := @caughtexception;

        r3 = $r7;

     label11:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        throw r3;

     label12:
        if z0 == 0 goto label13;

        $i8 = r0.<org.apache.xpath.axes.OneStepIterator: int m_predicateIndex>;

        if $i8 >= 1 goto label13;

        r0.<org.apache.xpath.axes.OneStepIterator: int m_length> = i1;

     label13:
        return i1;

        catch java.lang.CloneNotSupportedException from label05 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected void countProximityPosition(int)
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int i0, $i1, $i2, $i3;
        boolean $z0;
        int[] $r1, $r2;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<org.apache.xpath.axes.OneStepIterator: boolean isReverseAxes()>();

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void countProximityPosition(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: int[] m_proximityPositions>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label2;

        $r2 = r0.<org.apache.xpath.axes.OneStepIterator: int[] m_proximityPositions>;

        $i2 = $r2[i0];

        $i3 = $i2 - 1;

        $r2[i0] = $i3;

     label2:
        return;
    }

    public void reset()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r1, $r2;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: void reset()>();

        $r1 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.OneStepIterator: org.apache.xml.dtm.DTMAxisIterator m_iterator>;

        interfaceinvoke $r2.<org.apache.xml.dtm.DTMAxisIterator: org.apache.xml.dtm.DTMAxisIterator reset()>();

     label1:
        return;
    }

    public int getAxis()
    {
        org.apache.xpath.axes.OneStepIterator r0;
        int $i0;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        $i0 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        return $i0;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.axes.OneStepIterator r0, $r2;
        org.apache.xpath.Expression r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.axes.OneStepIterator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.ChildTestIterator: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        $r2 = (org.apache.xpath.axes.OneStepIterator) r1;

        $i0 = $r2.<org.apache.xpath.axes.OneStepIterator: int m_axis>;

        if $i1 == $i0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.OneStepIterator: long serialVersionUID> = 4623710779664998283L;

        return;
    }
}
