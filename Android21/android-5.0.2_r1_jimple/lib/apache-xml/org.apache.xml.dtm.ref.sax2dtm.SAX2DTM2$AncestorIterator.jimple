public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase
{
    private static final int m_blocksize;
    int[] m_ancestors;
    int m_size;
    int m_ancestorsPos;
    int m_markedPos;
    int m_realStartNode;
    final org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0;

    public void <init>(org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r1;
        int[] $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        r1 := @parameter0: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0> = r1;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseIterators)>(r1);

        $r2 = newarray (int)[32];

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors> = $r2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size> = 0;

        return;
    }

    public int getStartNode()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_realStartNode>;

        return $i0;
    }

    public final boolean isReverse()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        return 1;
    }

    public org.apache.xml.dtm.DTMAxisIterator cloneIterator()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0, r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.CloneNotSupportedException $r3;
        org.apache.xml.dtm.DTMException $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: boolean _isRestartable> = 0;

     label1:
        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator) $r2;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _startNode>;

        r1.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _startNode> = $i0;

     label2:
        return r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.apache.xml.dtm.DTMException;

        $r5 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_ITERATOR_CLONE_NOT_SUPPORTED", null);

        specialinvoke $r4.<org.apache.xml.dtm.DTMException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public org.apache.xml.dtm.DTMAxisIterator setStartNode(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r1, $r4, $r5, $r7, $r9, $r10;
        boolean $z0, $z1;
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 $r2, $r6, $r8, $r11, $r12, $r13;
        org.apache.xml.dtm.DTMAxisIterator $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i0 = virtualinvoke $r12.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getDocument()>();

     label1:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_realStartNode> = i0;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: boolean _isRestartable>;

        if $z0 == 0 goto label9;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size> = 0;

        if i1 != -1 goto label2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode> = -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos> = 0;

        return r0;

     label2:
        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: boolean _includeSelf>;

        if $z1 != 0 goto label3;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i1 = virtualinvoke $r11.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i1);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i0 = virtualinvoke $r13.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i1);

     label3:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _startNode> = i0;

     label4:
        if i1 == -1 goto label6;

        $i7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size>;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i8 = lengthof $r5;

        if $i7 < $i8 goto label5;

        $i11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size>;

        $i12 = $i11 * 2;

        r1 = newarray (int)[$i12];

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i13 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>($r10, 0, r1, 0, $i13);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors> = r1;

     label5:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size>;

        $i9 = $i10 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size> = $i9;

        $r7[$i10] = i0;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i1 = virtualinvoke $r6.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i1);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 this$0>;

        i0 = virtualinvoke $r8.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i1);

        goto label4;

     label6:
        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size>;

        $i3 = $i2 - 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos> = $i3;

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        if $i4 < 0 goto label7;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        $i6 = $r4[$i5];

        goto label8;

     label7:
        $i6 = -1;

     label8:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode> = $i6;

        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.DTMAxisIterator resetPosition()>();

        return $r3;

     label9:
        return r0;
    }

    public org.apache.xml.dtm.DTMAxisIterator reset()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xml.dtm.DTMAxisIterator $r1;
        int[] $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_size>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos> = $i1;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        if $i2 < 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        $i4 = $r2[$i3];

        goto label2;

     label1:
        $i4 = -1;

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode> = $i4;

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: org.apache.xml.dtm.DTMAxisIterator resetPosition()>();

        return $r1;
    }

    public int next()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        $i3 = $i2 - 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos> = $i3;

        i1 = $i3;

        if i1 < 0 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        $i6 = $r1[$i5];

        goto label2;

     label1:
        $i6 = -1;

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode> = $i6;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int returnNode(int)>(i0);

        return $i4;
    }

    public void setMark()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_markedPos> = $i0;

        return;
    }

    public void gotoMark()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator;

        $i0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_markedPos>;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos> = $i0;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        if $i1 < 0 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int[] m_ancestors>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_ancestorsPos>;

        $i3 = $r1[$i2];

        goto label2;

     label1:
        $i3 = -1;

     label2:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int _currentNode> = $i3;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2$AncestorIterator: int m_blocksize> = 32;

        return;
    }
}
