public class org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 extends org.apache.xml.dtm.ref.sax2dtm.SAX2DTM
{
    private int[] m_exptype_map0;
    private int[] m_nextsib_map0;
    private int[] m_firstch_map0;
    private int[] m_parent_map0;
    private int[][] m_exptype_map;
    private int[][] m_nextsib_map;
    private int[][] m_firstch_map;
    private int[][] m_parent_map;
    protected org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes;
    protected java.util.Vector m_values;
    private int m_valueIndex;
    private int m_maxNodeIndex;
    protected int m_SHIFT;
    protected int m_MASK;
    protected int m_blocksize;
    protected static final int TEXT_LENGTH_BITS;
    protected static final int TEXT_OFFSET_BITS;
    protected static final int TEXT_LENGTH_MAX;
    protected static final int TEXT_OFFSET_MAX;
    protected boolean m_buildIdIndex;
    private static final java.lang.String EMPTY_STR;
    private static final org.apache.xml.utils.XMLString EMPTY_XML_STR;

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean,boolean)>(r1, r2, i0, r3, r4, z0, 512, 1, 1, 0);

        return;
    }

    public void <init>(org.apache.xml.dtm.DTMManager, javax.xml.transform.Source, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory, boolean, int, boolean, boolean, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.dtm.DTMManager r1;
        javax.xml.transform.Source r2;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        org.apache.xml.dtm.DTMWSFilter r3;
        org.apache.xml.utils.XMLStringFactory r4;
        boolean z0, z1, z2, z3;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r7, $r9, $r11;
        java.util.Vector $r6;
        int[] $r8, $r10, $r12, $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        r2 := @parameter1: javax.xml.transform.Source;

        i0 := @parameter2: int;

        r3 := @parameter3: org.apache.xml.dtm.DTMWSFilter;

        r4 := @parameter4: org.apache.xml.utils.XMLStringFactory;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        z3 := @parameter9: boolean;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void <init>(org.apache.xml.dtm.DTMManager,javax.xml.transform.Source,int,org.apache.xml.dtm.DTMWSFilter,org.apache.xml.utils.XMLStringFactory,boolean,int,boolean,boolean)>(r1, r2, i0, r3, r4, z0, i1, z1, z3);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = 0;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = 1;

        i2 = 0;

     label1:
        $i3 = i1 >>> 1;

        i1 = $i3;

        if $i3 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i4 = 1 << i2;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize> = $i4;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT> = i2;

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        $i6 = $i5 - 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK> = $i6;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex> = z2;

        $r6 = new java.util.Vector;

        specialinvoke $r6.<java.util.Vector: void <init>(int,int)>(32, 512);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values> = $r6;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = 65536;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r8 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0> = $r8;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r10 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0> = $r10;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r12 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0> = $r12;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r13 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int[] getMap0()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0> = $r13;

        return;
    }

    public final int _exptype(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1;
        org.apache.xml.utils.SuballocatedIntVector $r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $i1 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        return $i1;
    }

    public final int _exptype2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _nextsib2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_nextsib_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _firstch2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_firstch_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _parent2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i1 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_parent_map0>;

        $i7 = $r3[i0];

        return $i7;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map>;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i3 = i0 >>> $i2;

        $r2 = $r1[$i3];

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i5 = i0 & $i4;

        $i6 = $r2[$i5];

        return $i6;
    }

    public final int _type2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        int[][] $r1;
        int[] $r2, $r5;
        org.apache.xml.dtm.ref.ExtendedType[] $r3;
        org.apache.xml.dtm.ref.ExtendedType $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i0 >= $i2 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        i1 = $r5[i0];

        goto label2;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i4 = i0 >>> $i3;

        $r2 = $r1[$i4];

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i6 = i0 & $i5;

        i1 = $r2[$i6];

     label2:
        if -1 == i1 goto label3;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r4 = $r3[i1];

        $i7 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        return $i7;

     label3:
        return -1;
    }

    public final int getExpandedTypeID2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[][] $r1;
        int[] $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 == -1 goto label2;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_blocksize>;

        if i1 >= $i2 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[] m_exptype_map0>;

        $i8 = $r3[i1];

        return $i8;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map>;

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_SHIFT>;

        $i4 = i1 >>> $i3;

        $r2 = $r1[$i4];

        $i5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_MASK>;

        $i6 = i1 & $i5;

        $i7 = $r2[$i6];

        return $i7;

     label2:
        return -1;
    }

    public final int _exptype2Type(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i1;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        if -1 == i0 goto label1;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[i0];

        $i1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        return $i1;

     label1:
        return -1;
    }

    public int getIdForNamespace(java.lang.String)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        java.util.Vector $r2, $r3;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        i0 = virtualinvoke $r2.<java.util.Vector: int indexOf(java.lang.Object)>(r1);

        if i0 >= 0 goto label1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        $i1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i2 = $i1 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i2;

        return $i1;

     label1:
        return i0;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2, r3, r5, r6, r7, r8, r9, $r25, r35, r36, r37, r38;
        org.xml.sax.Attributes r4;
        int i0, i1, i2, i3, i4, i5, i6, i8, i9, $i10, $i11, $i12, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i27, $i29, $i30, i31, i32, i33, i34, i35, i36, i37;
        byte b7;
        org.apache.xml.dtm.ref.ExpandedNameTable $r10, $r20, $r28, $r31;
        org.apache.xml.utils.IntStack $r11, $r12, $r14, $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        java.util.Vector $r13, $r16, $r19, $r26, $r29, $r32, $r33;
        org.apache.xml.dtm.DTMWSFilter $r15, $r17;
        org.apache.xml.utils.SuballocatedIntVector $r21, $r23, $r24;
        org.apache.xml.dtm.ref.DTMStringPool $r22, $r34;
        java.lang.Object $r27, $r30;
        short s38;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.xml.sax.Attributes;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i0 = virtualinvoke $r10.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r1, r2, 1);

        $i11 = virtualinvoke r3.<java.lang.String: int length()>();

        $i10 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i11 == $i10 goto label01;

        $r34 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i30 = virtualinvoke $r34.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r3);

        goto label02;

     label01:
        $i30 = 0;

     label02:
        i1 = $i30;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i13 = virtualinvoke $r11.<org.apache.xml.utils.IntStack: int peek()>();

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(1, i0, $i13, $i12, i1, 1);

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_indexing>;

        if $z0 == 0 goto label03;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void indexNode(int,int)>(i0, i2);

     label03:
        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r12.<org.apache.xml.utils.IntStack: int push(int)>(i2);

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        i3 = virtualinvoke $r14.<org.apache.xml.utils.IntStack: int peek()>();

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        i4 = virtualinvoke $r13.<java.util.Vector: int size()>();

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_pastFirstElement>;

        if $z1 != 0 goto label04;

        r5 = "xml";

        r6 = "http://www.w3.org/XML/1998/namespace";

        $r31 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i31 = virtualinvoke $r31.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r5, 13);

        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r32.<java.util.Vector: void addElement(java.lang.Object)>(r6);

        $i24 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i29 = $i24 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i29;

        i5 = $i24;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, i31, i2, -1, i5, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_pastFirstElement> = 1;

     label04:
        i32 = i3;

     label05:
        if i32 >= i4 goto label08;

        $r29 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $r30 = virtualinvoke $r29.<java.util.Vector: java.lang.Object elementAt(int)>(i32);

        r35 = (java.lang.String) $r30;

        if r35 != null goto label06;

        goto label07;

     label06:
        $r26 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i23 = i32 + 1;

        $r27 = virtualinvoke $r26.<java.util.Vector: java.lang.Object elementAt(int)>($i23);

        r36 = (java.lang.String) $r27;

        $r28 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i33 = virtualinvoke $r28.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(null, r35, 13);

        $r33 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r33.<java.util.Vector: void addElement(java.lang.Object)>(r36);

        $i25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i27 = $i25 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i27;

        i6 = $i25;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(13, i33, i2, -1, i6, 0);

     label07:
        i32 = i32 + 2;

        goto label05;

     label08:
        i34 = interfaceinvoke r4.<org.xml.sax.Attributes: int getLength()>();

        i35 = 0;

     label09:
        if i35 >= i34 goto label17;

        r37 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i35);

        r7 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i35);

        r8 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i35);

        r9 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getLocalName(int)>(i35);

        if null == r7 goto label12;

        $z5 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("xmlns");

        if $z5 != 0 goto label10;

        $z7 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z7 == 0 goto label12;

     label10:
        r38 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getPrefix(java.lang.String,java.lang.String)>(r7, r37);

        $z6 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean declAlreadyDeclared(java.lang.String)>(r38);

        if $z6 == 0 goto label11;

        goto label16;

     label11:
        b7 = 13;

        goto label13;

     label12:
        b7 = 2;

        $z3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_buildIdIndex>;

        if $z3 == 0 goto label13;

        $r25 = interfaceinvoke r4.<org.xml.sax.Attributes: java.lang.String getType(int)>(i35);

        $z4 = virtualinvoke $r25.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        if $z4 == 0 goto label13;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void setIDAttribute(java.lang.String,int)>(r8, i2);

     label13:
        if null != r8 goto label14;

        r8 = "";

     label14:
        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r19.<java.util.Vector: void addElement(java.lang.Object)>(r8);

        $i19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i18 = $i19 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i18;

        i9 = $i19;

        $i21 = virtualinvoke r9.<java.lang.String: int length()>();

        $i20 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i21 == $i20 goto label15;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        i36 = virtualinvoke $r22.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r7);

        $r21 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i8 = virtualinvoke $r21.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r23.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i36);

        $r24 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r24.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i9);

        i9 = neg i8;

     label15:
        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        i37 = virtualinvoke $r20.<org.apache.xml.dtm.ref.ExpandedNameTable: int getExpandedTypeID(java.lang.String,java.lang.String,int)>(r37, r9, b7);

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(b7, i37, i2, -1, i9, 0);

     label16:
        i35 = i35 + 1;

        goto label09;

     label17:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        if null == $r15 goto label21;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.DTMWSFilter m_wsfilter>;

        $i17 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i2);

        s38 = interfaceinvoke $r17.<org.apache.xml.dtm.DTMWSFilter: short getShouldStripSpace(int,org.apache.xml.dtm.DTM)>($i17, r0);

        if 3 != s38 goto label18;

        $z2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean getShouldStripWhitespace()>();

        goto label20;

     label18:
        if 2 != s38 goto label19;

        $z2 = 1;

        goto label20;

     label19:
        $z2 = 0;

     label20:
        z8 = $z2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void pushShouldStripWhitespace(boolean)>(z8);

     label21:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = -1;

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i16 = virtualinvoke $r16.<java.util.Vector: int size()>();

        virtualinvoke $r18.<org.apache.xml.utils.IntStack: int push(int)>($i16);

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2, r3;
        int i0, $i1, $i2;
        org.apache.xml.utils.IntStack $r4, $r5, $r7;
        java.util.Vector $r6, $r8;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        virtualinvoke $r4.<org.apache.xml.utils.IntStack: void quickPop(int)>(1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        i0 = virtualinvoke $r5.<org.apache.xml.utils.IntStack: int peek()>();

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i1 = virtualinvoke $r6.<java.util.Vector: int size()>();

        if i0 == $i1 goto label1;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        virtualinvoke $r8.<java.util.Vector: void setSize(int)>(i0);

     label1:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i2 = virtualinvoke $r7.<org.apache.xml.utils.IntStack: int pop()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void popShouldStripWhitespace()>();

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.lang.String $r2;
        java.util.Vector $r3;
        org.apache.xml.utils.IntStack $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_insideDTD>;

        if $z0 == 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(r1, i0, i1);

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i4 = $i3 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i4;

        i2 = $i3;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i5 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int peek()>();

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(8, 8, $i5, $i6, i2, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i7;

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, $i2;
        org.apache.xml.utils.IntStack $r1, $r3;
        java.util.Vector $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(9, 9, -1, -1, 0, 1);

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        virtualinvoke $r1.<org.apache.xml.utils.IntStack: int push(int)>(i0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = -1;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_contextIndexes>;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_prefixMappings>;

        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        virtualinvoke $r3.<org.apache.xml.utils.IntStack: int push(int)>($i2);

        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r7, $r9, $r11, $r13;
        org.apache.xml.dtm.ref.ExpandedNameTable $r5;
        org.apache.xml.dtm.ref.ExtendedType[] $r6;
        int[][] $r8, $r10, $r12, $r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        specialinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM: void endDocument()>();

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.ExpandedNameTable: org.apache.xml.dtm.ref.ExtendedType[] getExtendedTypes()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes> = $r6;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_exptype_map> = $r8;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        $r10 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_nextsib_map> = $r10;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_firstch_map> = $r12;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        $r14 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int[][] getMap()>();

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int[][] m_parent_map> = $r14;

        return;
    }

    protected final int addNode(int, int, int, int, int, boolean)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        boolean z0, $z1;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        org.xml.sax.Locator $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        z0 := @parameter5: boolean;

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_size>;

        $i7 = $i6 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_size> = $i7;

        i5 = $i6;

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        if i5 != $i8 goto label1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void addNewDTMID(int)>(i5);

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex>;

        $i9 = $i10 + 65536;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_maxNodeIndex> = $i9;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(-1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_parent>;

        virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i2);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_exptype>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i1);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i4);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        if $r7 == null goto label2;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_prevsib>;

        virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i3);

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.xml.sax.Locator m_locator>;

        if $r6 == null goto label3;

        $z1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean m_useSourceLocationProperty>;

        if $z1 == 0 goto label3;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void setSourceLocation()>();

     label3:
        lookupswitch(i0)
        {
            case 2: goto label5;
            case 13: goto label4;
            default: goto label6;
        };

     label4:
        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void declareNamespaceInContext(int,int)>(i2, i5);

        goto label8;

     label5:
        goto label8;

     label6:
        if -1 == i3 goto label7;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_nextsib>;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, i3);

        goto label8;

     label7:
        if -1 == i2 goto label8;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_firstch>;

        virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: void setElementAt(int,int)>(i5, i2);

     label8:
        return i5;
    }

    protected final void charactersFlush()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        boolean z0, $z1;
        org.apache.xml.utils.FastStringBuffer $r1, $r7, $r8;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r4, $r5;
        org.apache.xml.utils.IntStack $r3, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        $i2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        if $i2 < 0 goto label5;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i3 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int size()>();

        $i4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        i0 = $i3 - $i4;

        z0 = 0;

        $z1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: boolean getShouldStripWhitespace()>();

        if $z1 == 0 goto label1;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        z0 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: boolean isWhitespace(int,int)>($i20, i0);

     label1:
        if z0 == 0 goto label2;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i21 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        virtualinvoke $r8.<org.apache.xml.utils.FastStringBuffer: void setLength(int)>($i21);

        goto label4;

     label2:
        if i0 <= 0 goto label4;

        if i0 > 1023 goto label3;

        $i12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        if $i12 > 2097151 goto label3;

        $i13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType>;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i15 = virtualinvoke $r6.<org.apache.xml.utils.IntStack: int peek()>();

        $i19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        $i17 = $i14 << 10;

        $i16 = i0 + $i17;

        $i18 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i13, 3, $i15, $i19, $i16, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i18;

        goto label4;

     label3:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i7 = virtualinvoke $r3.<org.apache.xml.utils.IntStack: int peek()>();

        $i8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i9 = neg i1;

        $i11 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>($i6, 3, $i7, $i8, $i9, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i11;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart>;

        virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i10);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        virtualinvoke $r4.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>(i0);

     label4:
        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textPendingStart> = -1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_coalescedTextType> = 3;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_textType> = 3;

     label5:
        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        java.lang.String r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r6, $r8;
        org.apache.xml.utils.IntStack $r4;
        org.apache.xml.dtm.ref.DTMStringPool $r5;
        java.util.Vector $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void charactersFlush()>();

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i0 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.IntStack m_parents>;

        $i1 = virtualinvoke $r4.<org.apache.xml.utils.IntStack: int peek()>();

        $i3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous>;

        $i2 = neg i0;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int addNode(int,int,int,int,int,boolean)>(7, 7, $i1, $i3, $i2, 0);

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_previous> = $i4;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $i5 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r1);

        virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i5);

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        virtualinvoke $r7.<java.util.Vector: void addElement(java.lang.Object)>(r2);

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex>;

        $i7 = $i6 + 1;

        r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int m_valueIndex> = $i7;

        virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: void addElement(int)>($i6);

        return;
    }

    public final int getFirstAttribute(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, $i3, i4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label1;

        return -1;

     label1:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if 1 != i2 goto label4;

     label2:
        i1 = i1 + 1;

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i4 != 2 goto label3;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i1);

        return $i3;

     label3:
        if 13 == i4 goto label2;

        goto label4;

     label4:
        return -1;
    }

    protected int getFirstAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return -1;

     label1:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if 1 != i1 goto label4;

     label2:
        i0 = i0 + 1;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if i2 != 2 goto label3;

        return i0;

     label3:
        if 13 == i2 goto label2;

        goto label4;

     label4:
        return -1;
    }

    protected int getNextAttributeIdentity(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

     label1:
        i0 = i0 + 1;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        if i1 != 2 goto label2;

        return i0;

     label2:
        if i1 == 13 goto label3;

        goto label4;

     label3:
        goto label1;

     label4:
        return -1;
    }

    protected final int getTypedAttribute(int, int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5, i6;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        org.apache.xml.dtm.ref.ExtendedType $r2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i2 != -1 goto label1;

        return -1;

     label1:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i2);

        if 1 != i3 goto label6;

     label2:
        i2 = i2 + 1;

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i2);

        if i4 == -1 goto label3;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r2 = $r1[i4];

        i6 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        goto label4;

     label3:
        return -1;

     label4:
        if i6 != 2 goto label5;

        if i4 != i1 goto label2;

        $i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeHandle(int)>(i2);

        return $i5;

     label5:
        if 13 == i6 goto label2;

        goto label6;

     label6:
        return -1;
    }

    public java.lang.String getLocalName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        org.apache.xml.dtm.ref.ExpandedNameTable $r1;
        java.lang.String $r2, $r5;
        org.apache.xml.utils.SuballocatedIntVector $r3;
        org.apache.xml.dtm.ref.DTMStringPool $r4;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype(int)>($i3);

        if i1 != 7 goto label1;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>($i4);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = neg i2;

        i6 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i6);

        return $r5;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNameTable>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ExpandedNameTable: java.lang.String getLocalName(int)>(i1);

        return $r2;
    }

    public final java.lang.String getNodeNameX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5, $i6, i7, i8;
        org.apache.xml.dtm.ref.ExtendedType[] $r1;
        java.lang.String $r2, $r5, $r7, $r8, $r11;
        org.apache.xml.utils.SuballocatedIntVector $r3, $r6, $r9;
        org.apache.xml.dtm.ref.DTMStringPool $r4, $r10;
        org.apache.xml.dtm.ref.ExtendedType r12;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        if i2 != 7 goto label1;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg i3;

        i7 = virtualinvoke $r9.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i6);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r11 = virtualinvoke $r10.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i7);

        return $r11;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r12 = $r1[i2];

        $r2 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i5 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i5 != 0 goto label2;

        $r8 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r8;

     label2:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i4 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i4 != 0 goto label3;

        $r7 = virtualinvoke r12.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r7;

     label3:
        if i4 >= 0 goto label4;

        i8 = neg i4;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i4 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i8);

     label4:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i4);

        return $r5;
    }

    public java.lang.String getNodeName(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        org.apache.xml.dtm.ref.ExtendedType r1;
        java.lang.String r2, $r4, $r8, $r9, $r10, $r12, $r15;
        org.apache.xml.dtm.ref.ExtendedType[] $r3;
        org.apache.xml.utils.SuballocatedIntVector $r5, $r7, $r11;
        org.apache.xml.dtm.ref.DTMStringPool $r6, $r13;
        java.lang.StringBuilder $r14, $r16, $r17;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r1 = $r3[i2];

        $r4 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        $i5 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i5 != 0 goto label5;

        i3 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: int getNodeType()>();

        r2 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        if i3 != 13 goto label2;

        $i8 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i8 != 0 goto label1;

        return "xmlns";

     label1:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

     label2:
        if i3 != 7 goto label3;

        i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i4;

        i9 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r12 = virtualinvoke $r13.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i9);

        return $r12;

     label3:
        $i6 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i6 != 0 goto label4;

        $r10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getFixedNames(int)>(i3);

        return $r10;

     label4:
        return r2;

     label5:
        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i10 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i10 != 0 goto label6;

        $r9 = virtualinvoke r1.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        return $r9;

     label6:
        if i10 >= 0 goto label7;

        i11 = neg i10;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i10 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i11);

     label7:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        $r8 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i10);

        return $r8;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32;
        org.apache.xml.utils.XMLString $r1, $r5, $r10, $r24, $r35, $r38, $r44;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r12, $r15, $r17, $r18, $r19, $r25, $r36, $r39;
        org.apache.xml.utils.XMLStringFactory $r4, $r11, $r13, $r20, $r23, $r30, $r34, $r42;
        org.apache.xml.utils.FastStringBuffer $r6, $r8, $r16, $r22, $r26, $r28;
        org.apache.xml.utils.XMLStringDefault $r7, $r14, $r27, $r31;
        java.lang.String $r9, $r21, $r29, $r37, $r40;
        java.util.Vector $r32, $r41;
        java.lang.Object $r33, $r43;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label01;

        $r44 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r44;

     label01:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label02;

        if i2 != 9 goto label12;

     label02:
        i3 = i1;

        i28 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i28 goto label11;

        i4 = -1;

        i5 = 0;

     label03:
        i29 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i28);

        if i29 == 3 goto label04;

        if i29 != 4 goto label08;

     label04:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i6 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i28);

        if i6 < 0 goto label06;

        if -1 != i4 goto label05;

        i4 = i6 >>> 10;

     label05:
        $i12 = i6 & 1023;

        i5 = i5 + $i12;

        goto label08;

     label06:
        if -1 != i4 goto label07;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = neg i6;

        i4 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

     label07:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i6;

        $i8 = $i7 + 1;

        $i10 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        i5 = i5 + $i10;

     label08:
        i28 = i28 + 1;

        $i9 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i28);

        if $i9 >= i3 goto label03;

        if i5 <= 0 goto label10;

        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r4 == null goto label09;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r10 = virtualinvoke $r11.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r8, i4, i5);

        return $r10;

     label09:
        $r7 = new org.apache.xml.utils.XMLStringDefault;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r9 = virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i4, i5);

        specialinvoke $r7.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r9);

        return $r7;

     label10:
        $r5 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r5;

     label11:
        $r1 = <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR>;

        return $r1;

     label12:
        if 3 == i2 goto label13;

        if 4 != i2 goto label17;

     label13:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i30 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i30 < 0 goto label15;

        $r23 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r23 == null goto label14;

        $r34 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r28 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i25 = i30 >>> 10;

        $i26 = i30 & 1023;

        $r35 = virtualinvoke $r34.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r28, $i25, $i26);

        return $r35;

     label14:
        $r27 = new org.apache.xml.utils.XMLStringDefault;

        $r26 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i23 = i30 >>> 10;

        $i24 = i30 & 1023;

        $r29 = virtualinvoke $r26.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i23, $i24);

        specialinvoke $r27.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r29);

        return $r27;

     label15:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r13 == null goto label16;

        $r20 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r22 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i18 = neg i30;

        $i21 = virtualinvoke $r19.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i18);

        $r25 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i20 = neg i30;

        $i19 = $i20 + 1;

        $i22 = virtualinvoke $r25.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i19);

        $r24 = virtualinvoke $r20.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(org.apache.xml.utils.FastStringBuffer,int,int)>($r22, $i21, $i22);

        return $r24;

     label16:
        $r14 = new org.apache.xml.utils.XMLStringDefault;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r17 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg i30;

        $i13 = virtualinvoke $r17.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i14);

        $r18 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i16 = neg i30;

        $i17 = $i16 + 1;

        $i15 = virtualinvoke $r18.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

        $r21 = virtualinvoke $r16.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i13, $i15);

        specialinvoke $r14.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r21);

        return $r14;

     label17:
        $r36 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i31 = virtualinvoke $r36.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i31 >= 0 goto label18;

        i32 = neg i31;

        $r39 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i27 = i32 + 1;

        i31 = virtualinvoke $r39.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i27);

     label18:
        $r30 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        if $r30 == null goto label19;

        $r42 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLStringFactory m_xstrf>;

        $r41 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r43 = virtualinvoke $r41.<java.util.Vector: java.lang.Object elementAt(int)>(i31);

        $r37 = (java.lang.String) $r43;

        $r38 = virtualinvoke $r42.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>($r37);

        return $r38;

     label19:
        $r31 = new org.apache.xml.utils.XMLStringDefault;

        $r32 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r33 = virtualinvoke $r32.<java.util.Vector: java.lang.Object elementAt(int)>(i31);

        $r40 = (java.lang.String) $r33;

        specialinvoke $r31.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>($r40);

        return $r31;
    }

    public final java.lang.String getStringValueX(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, i22, i23, i24, i25;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r2, $r5, $r6, $r8, $r10, $r15, $r16;
        org.apache.xml.utils.FastStringBuffer $r3, $r7, $r11;
        java.lang.String $r4, $r9, $r12, $r17;
        java.util.Vector $r13;
        java.lang.Object $r14;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label01;

        return "";

     label01:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label02;

        if i2 != 9 goto label11;

     label02:
        i3 = i1;

        i21 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i21 goto label10;

        i4 = -1;

        i5 = 0;

     label03:
        i22 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i21);

        if i22 == 3 goto label04;

        if i22 != 4 goto label08;

     label04:
        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i6 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i21);

        if i6 < 0 goto label06;

        if -1 != i4 goto label05;

        i4 = i6 >>> 10;

     label05:
        $i12 = i6 & 1023;

        i5 = i5 + $i12;

        goto label08;

     label06:
        if -1 != i4 goto label07;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = neg i6;

        i4 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

     label07:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i6;

        $i8 = $i7 + 1;

        $i9 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        i5 = i5 + $i9;

     label08:
        i21 = i21 + 1;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i21);

        if $i10 >= i3 goto label03;

        if i5 <= 0 goto label09;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r4 = virtualinvoke $r3.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>(i4, i5);

        return $r4;

     label09:
        return "";

     label10:
        return "";

     label11:
        if 3 == i2 goto label12;

        if 4 != i2 goto label14;

     label12:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i23 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i23 < 0 goto label13;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i19 = i23 >>> 10;

        $i18 = i23 & 1023;

        $r12 = virtualinvoke $r11.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i19, $i18);

        return $r12;

     label13:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i13 = neg i23;

        $i15 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i13);

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg i23;

        $i17 = $i14 + 1;

        $i16 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i17);

        $r9 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i15, $i16);

        return $r9;

     label14:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i24 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i24 >= 0 goto label15;

        i25 = neg i24;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i20 = i25 + 1;

        i24 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i20);

     label15:
        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r14 = virtualinvoke $r13.<java.util.Vector: java.lang.Object elementAt(int)>(i24);

        $r17 = (java.lang.String) $r14;

        return $r17;
    }

    public java.lang.String getStringValue()
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.String $r1, $r6, $r8;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r7;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(0);

        if i0 != -1 goto label1;

        return "";

     label1:
        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i0);

        if $i2 != 3 goto label3;

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _nextsib2(int)>(i0);

        if $i4 != -1 goto label3;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 < 0 goto label2;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i11 = i1 >>> 10;

        $i10 = i1 & 1023;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i11, $i10);

        return $r8;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i5 = neg i1;

        $i6 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i1;

        $i8 = $i7 + 1;

        $i9 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r6 = virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i6, $i9);

        return $r6;

     label3:
        $i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getDocument()>();

        $r1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String getStringValueX(int)>($i3);

        return $r1;
    }

    public final void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, i33, i34, i35, i36, i37;
        org.xml.sax.ContentHandler r1;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r6, $r7, $r8, $r10, $r11, $r13, $r15, $r21;
        org.apache.xml.utils.FastStringBuffer $r4, $r5, $r9, $r12, $r14, $r16;
        char[] $r17, $r20;
        java.lang.Object $r18;
        java.util.Vector $r19;
        java.lang.String r22;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        if i1 != -1 goto label01;

        return;

     label01:
        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 1 goto label02;

        if i2 != 9 goto label11;

     label02:
        i3 = i1;

        i33 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _firstch2(int)>(i1);

        if -1 == i33 goto label10;

        i4 = -1;

        i5 = 0;

     label03:
        i34 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i33);

        if i34 == 3 goto label04;

        if i34 != 4 goto label08;

     label04:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i6 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i33);

        if i6 < 0 goto label06;

        if -1 != i4 goto label05;

        i4 = i6 >>> 10;

     label05:
        $i13 = i6 & 1023;

        i5 = i5 + $i13;

        goto label08;

     label06:
        if -1 != i4 goto label07;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i12 = neg i6;

        i4 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i12);

     label07:
        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i8 = neg i6;

        $i7 = $i8 + 1;

        $i9 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        i5 = i5 + $i9;

     label08:
        i33 = i33 + 1;

        $i10 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _parent2(int)>(i33);

        if $i10 >= i3 goto label03;

        if i5 <= 0 goto label10;

        if z0 == 0 goto label09;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i4, i5);

        goto label10;

     label09:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, i4, i5);

     label10:
        goto label20;

     label11:
        if 3 == i2 goto label12;

        if 4 != i2 goto label17;

     label12:
        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i35 = virtualinvoke $r7.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i35 < 0 goto label14;

        if z0 == 0 goto label13;

        $r16 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i26 = i35 >>> 10;

        $i27 = i35 & 1023;

        virtualinvoke $r16.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i26, $i27);

        goto label16;

     label13:
        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i28 = i35 >>> 10;

        $i24 = i35 & 1023;

        virtualinvoke $r14.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i28, $i24);

        goto label16;

     label14:
        if z0 == 0 goto label15;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i18 = neg i35;

        $i22 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i18);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i20 = neg i35;

        $i21 = $i20 + 1;

        $i25 = virtualinvoke $r13.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i21);

        virtualinvoke $r12.<org.apache.xml.utils.FastStringBuffer: int sendNormalizedSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i22, $i25);

        goto label16;

     label15:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i14 = neg i35;

        $i17 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i14);

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i15 = neg i35;

        $i16 = $i15 + 1;

        $i19 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i16);

        virtualinvoke $r9.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i17, $i19);

     label16:
        goto label20;

     label17:
        $r15 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i36 = virtualinvoke $r15.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i36 >= 0 goto label18;

        i37 = neg i36;

        $r21 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i32 = i37 + 1;

        i36 = virtualinvoke $r21.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i32);

     label18:
        $r19 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r18 = virtualinvoke $r19.<java.util.Vector: java.lang.Object elementAt(int)>(i36);

        r22 = (java.lang.String) $r18;

        if z0 == 0 goto label19;

        $r20 = virtualinvoke r22.<java.lang.String: char[] toCharArray()>();

        $i30 = virtualinvoke r22.<java.lang.String: int length()>();

        staticinvoke <org.apache.xml.utils.FastStringBuffer: void sendNormalizedSAXcharacters(char[],int,int,org.xml.sax.ContentHandler)>($r20, 0, $i30, r1);

        goto label20;

     label19:
        $r17 = virtualinvoke r22.<java.lang.String: char[] toCharArray()>();

        $i31 = virtualinvoke r22.<java.lang.String: int length()>();

        interfaceinvoke r1.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r17, 0, $i31);

     label20:
        return;
    }

    public java.lang.String getNodeValue(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        org.apache.xml.utils.SuballocatedIntVector $r1, $r3, $r6, $r11;
        org.apache.xml.utils.FastStringBuffer $r2, $r5;
        java.lang.String $r4, $r7, $r9;
        java.util.Vector $r8;
        java.lang.Object $r10;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>(i0);

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i1);

        if i2 == 3 goto label1;

        if i2 != 4 goto label3;

     label1:
        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i1);

        if i3 <= 0 goto label2;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i10 = i3 >>> 10;

        $i9 = i3 & 1023;

        $r7 = virtualinvoke $r5.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i10, $i9);

        return $r7;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r1 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg i3;

        $i5 = virtualinvoke $r1.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i4);

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i6 = neg i3;

        $i7 = $i6 + 1;

        $i8 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r4 = virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i5, $i8);

        return $r4;

     label3:
        if 1 == i2 goto label4;

        if 11 == i2 goto label4;

        if 9 != i2 goto label5;

     label4:
        return null;

     label5:
        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i12 = virtualinvoke $r6.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i12 >= 0 goto label6;

        i13 = neg i12;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i11 = i13 + 1;

        i12 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i11);

     label6:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r10 = virtualinvoke $r8.<java.util.Vector: java.lang.Object elementAt(int)>(i12);

        $r9 = (java.lang.String) $r10;

        return $r9;
    }

    protected final void copyTextNode(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.utils.SuballocatedIntVector $r2, $r3, $r5;
        org.apache.xml.utils.FastStringBuffer $r4, $r6;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        if i0 == -1 goto label2;

        $r2 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i1 = virtualinvoke $r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i1 < 0 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $i8 = i1 >>> 10;

        $i7 = i1 & 1023;

        virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i8, $i7);

        goto label2;

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.FastStringBuffer m_chars>;

        $r3 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i2 = neg i1;

        $i3 = virtualinvoke $r3.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i2);

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i4 = neg i1;

        $i5 = $i4 + 1;

        $i6 = virtualinvoke $r5.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i5);

        virtualinvoke $r4.<org.apache.xml.utils.FastStringBuffer: void sendSAXcharacters(org.xml.sax.ContentHandler,int,int)>(r1, $i3, $i6);

     label2:
        return;
    }

    protected final java.lang.String copyElement(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, $i4, i5;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.String r3, r4, r5, r6;
        org.apache.xml.dtm.ref.ExtendedType[] $r7;
        org.apache.xml.utils.SuballocatedIntVector $r8, $r10;
        org.apache.xml.dtm.ref.DTMStringPool $r9;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r7[i1];

        r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        $i4 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i4 != 0 goto label1;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r4);

        return r4;

     label1:
        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i2 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i0);

        if i2 != 0 goto label2;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r4);

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>("", r3);

        return r4;

     label2:
        if i2 >= 0 goto label3;

        i5 = neg i2;

        $r10 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        i2 = virtualinvoke $r10.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i5);

     label3:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        r5 = virtualinvoke $r9.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i2);

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void startElement(java.lang.String)>(r5);

        i3 = virtualinvoke r5.<java.lang.String: int indexOf(int)>(58);

        if i3 <= 0 goto label4;

        r6 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(0, i3);

        goto label5;

     label4:
        r6 = null;

     label5:
        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r6, r3);

        return r5;
    }

    protected final void copyNS(int, org.apache.xml.serializer.SerializationHandler, boolean) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12;
        org.apache.xml.serializer.SerializationHandler r1;
        boolean z0;
        org.apache.xml.utils.SuballocatedIntVector r2, $r5, $r8, $r11, $r14, $r16;
        java.lang.String r3, r4;
        org.apache.xml.dtm.ref.ExtendedType[] $r6;
        org.apache.xml.dtm.ref.ExtendedType $r7;
        java.util.Vector $r9, $r12, $r13;
        java.lang.Object $r10, $r15;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        z0 := @parameter2: boolean;

        $r5 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        if $r5 == null goto label01;

        $r14 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_namespaceDeclSetElements>;

        $i10 = virtualinvoke $r14.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i10 != 1 goto label01;

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_namespaceDeclSets>;

        if $r12 == null goto label01;

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_namespaceDeclSets>;

        $r15 = virtualinvoke $r13.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        $r16 = (org.apache.xml.utils.SuballocatedIntVector) $r15;

        $i11 = virtualinvoke $r16.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i11 != 1 goto label01;

        return;

     label01:
        r2 = null;

        if z0 == 0 goto label04;

        r2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector findNamespaceContext(int)>(i0);

        if r2 == null goto label02;

        $i8 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if $i8 >= 1 goto label03;

     label02:
        return;

     label03:
        $i9 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(0);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>($i9);

        goto label05;

     label04:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextNamespaceNode2(int)>(i0);

     label05:
        i2 = 1;

     label06:
        if i1 == -1 goto label11;

        i3 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        $r6 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        $r7 = $r6[i3];

        r3 = virtualinvoke $r7.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        $r8 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_dataOrQName>;

        i4 = virtualinvoke $r8.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i1);

        if i4 >= 0 goto label07;

        i12 = neg i4;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = i12 + 1;

        i4 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

     label07:
        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r10 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i4);

        r4 = (java.lang.String) $r10;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r3, r4);

        if z0 == 0 goto label09;

        $i6 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int size()>();

        if i2 >= $i6 goto label08;

        $i5 = virtualinvoke r2.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>(i2);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int makeNodeIdentity(int)>($i5);

        i2 = i2 + 1;

        goto label10;

     label08:
        return;

     label09:
        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextNamespaceNode2(int)>(i1);

     label10:
        goto label06;

     label11:
        return;
    }

    protected final int getNextNamespaceNode2(int)
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, $i2;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

     label1:
        i0 = i0 + 1;

        $i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _type2(int)>(i0);

        i1 = $i2;

        if $i2 != 2 goto label2;

        goto label1;

     label2:
        if i1 != 13 goto label3;

        return i0;

     label3:
        return -1;
    }

    protected final void copyAttributes(int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2;
        org.apache.xml.serializer.SerializationHandler r1;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.xml.serializer.SerializationHandler;

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getFirstAttributeIdentity(int)>(i0);

     label1:
        if i1 == -1 goto label2;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _exptype2(int)>(i1);

        virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: void copyAttribute(int,int,org.apache.xml.serializer.SerializationHandler)>(i1, i2, r1);

        i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int getNextAttributeIdentity(int)>(i1);

        goto label1;

     label2:
        return;
    }

    protected final void copyAttribute(int, int, org.apache.xml.serializer.SerializationHandler) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2 r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        org.apache.xml.serializer.SerializationHandler r1;
        org.apache.xml.dtm.ref.ExtendedType r2;
        java.lang.String r3, r4, r5, r6, $r10, r14, r15;
        org.apache.xml.dtm.ref.ExtendedType[] $r7;
        java.lang.Object $r8;
        java.util.Vector $r9;
        org.apache.xml.utils.SuballocatedIntVector $r11, $r12;
        org.apache.xml.dtm.ref.DTMStringPool $r13;

        r0 := @this: org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: org.apache.xml.serializer.SerializationHandler;

        $r7 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.ExtendedType[] m_extendedTypes>;

        r2 = $r7[i1];

        r3 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getNamespace()>();

        r4 = virtualinvoke r2.<org.apache.xml.dtm.ref.ExtendedType: java.lang.String getLocalName()>();

        r5 = null;

        r6 = null;

        i2 = virtualinvoke r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int _dataOrQName(int)>(i0);

        i3 = i2;

        if i2 > 0 goto label1;

        $r11 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i7 = neg i2;

        i4 = virtualinvoke $r11.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i7);

        $r12 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.SuballocatedIntVector m_data>;

        $i9 = neg i2;

        $i8 = $i9 + 1;

        i3 = virtualinvoke $r12.<org.apache.xml.utils.SuballocatedIntVector: int elementAt(int)>($i8);

        $r13 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.dtm.ref.DTMStringPool m_valuesOrPrefixes>;

        r6 = virtualinvoke $r13.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i4);

        i5 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(58);

        if i5 <= 0 goto label1;

        r5 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, i5);

     label1:
        $i6 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i6 == 0 goto label2;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void namespaceAfterStartElement(java.lang.String,java.lang.String)>(r5, r3);

     label2:
        if r5 == null goto label3;

        $r10 = r6;

        goto label4;

     label3:
        $r10 = r4;

     label4:
        r14 = $r10;

        $r9 = r0.<org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.util.Vector m_values>;

        $r8 = virtualinvoke $r9.<java.util.Vector: java.lang.Object elementAt(int)>(i3);

        r15 = (java.lang.String) $r8;

        interfaceinvoke r1.<org.apache.xml.serializer.SerializationHandler: void addAttribute(java.lang.String,java.lang.String)>(r14, r15);

        return;
    }

    static void <clinit>()
    {
        org.apache.xml.utils.XMLStringDefault $r0;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: java.lang.String EMPTY_STR> = "";

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_MAX> = 2097151;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_MAX> = 1023;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_OFFSET_BITS> = 21;

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: int TEXT_LENGTH_BITS> = 10;

        $r0 = new org.apache.xml.utils.XMLStringDefault;

        specialinvoke $r0.<org.apache.xml.utils.XMLStringDefault: void <init>(java.lang.String)>("");

        <org.apache.xml.dtm.ref.sax2dtm.SAX2DTM2: org.apache.xml.utils.XMLString EMPTY_XML_STR> = $r0;

        return;
    }
}
