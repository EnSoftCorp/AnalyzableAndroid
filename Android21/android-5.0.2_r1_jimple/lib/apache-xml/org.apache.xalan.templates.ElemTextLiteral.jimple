public class org.apache.xalan.templates.ElemTextLiteral extends org.apache.xalan.templates.ElemTemplateElement
{
    static final long serialVersionUID;
    private boolean m_preserveSpace;
    private char[] m_ch;
    private java.lang.String m_str;
    private boolean m_disableOutputEscaping;

    public void <init>()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_disableOutputEscaping> = 0;

        return;
    }

    public void setPreserveSpace(boolean)
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_preserveSpace> = z0;

        return;
    }

    public boolean getPreserveSpace()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        $z0 = r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_preserveSpace>;

        return $z0;
    }

    public void setChars(char[])
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        char[] r1;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        r1 := @parameter0: char[];

        r0.<org.apache.xalan.templates.ElemTextLiteral: char[] m_ch> = r1;

        return;
    }

    public char[] getChars()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        char[] $r1;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        $r1 = r0.<org.apache.xalan.templates.ElemTextLiteral: char[] m_ch>;

        return $r1;
    }

    public synchronized java.lang.String getNodeValue()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        java.lang.String $r1, $r2, $r3;
        char[] $r4;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        $r1 = r0.<org.apache.xalan.templates.ElemTextLiteral: java.lang.String m_str>;

        if null != $r1 goto label1;

        $r3 = new java.lang.String;

        $r4 = r0.<org.apache.xalan.templates.ElemTextLiteral: char[] m_ch>;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>($r4);

        r0.<org.apache.xalan.templates.ElemTextLiteral: java.lang.String m_str> = $r3;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemTextLiteral: java.lang.String m_str>;

        return $r2;
    }

    public void setDisableOutputEscaping(boolean)
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        boolean z0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        z0 := @parameter0: boolean;

        r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_disableOutputEscaping> = z0;

        return;
    }

    public boolean getDisableOutputEscaping()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        boolean $z0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        $z0 = r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_disableOutputEscaping>;

        return $z0;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        return 78;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemTextLiteral r0;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        return "#Text";
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemTextLiteral r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        org.apache.xml.serializer.SerializationHandler r2;
        boolean $z0, $z1;
        char[] $r3, $r4;
        int $i0;
        org.xml.sax.SAXException $r5, r7;
        javax.xml.transform.TransformerException $r6;

        r0 := @this: org.apache.xalan.templates.ElemTextLiteral;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

     label1:
        r2 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xml.serializer.SerializationHandler getResultTreeHandler()>();

        $z0 = r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_disableOutputEscaping>;

        if $z0 == 0 goto label2;

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.disable-output-escaping", "");

     label2:
        $r4 = r0.<org.apache.xalan.templates.ElemTextLiteral: char[] m_ch>;

        $r3 = r0.<org.apache.xalan.templates.ElemTextLiteral: char[] m_ch>;

        $i0 = lengthof $r3;

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void characters(char[],int,int)>($r4, 0, $i0);

        $z1 = r0.<org.apache.xalan.templates.ElemTextLiteral: boolean m_disableOutputEscaping>;

        if $z1 == 0 goto label3;

        interfaceinvoke r2.<org.apache.xml.serializer.SerializationHandler: void processingInstruction(java.lang.String,java.lang.String)>("javax.xml.transform.enable-output-escaping", "");

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r7 = $r5;

        $r6 = new javax.xml.transform.TransformerException;

        specialinvoke $r6.<javax.xml.transform.TransformerException: void <init>(java.lang.Throwable)>(r7);

        throw $r6;

     label5:
        return;

        catch org.xml.sax.SAXException from label1 to label3 with label4;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemTextLiteral: long serialVersionUID> = -7872620006767660088L;

        return;
    }
}
