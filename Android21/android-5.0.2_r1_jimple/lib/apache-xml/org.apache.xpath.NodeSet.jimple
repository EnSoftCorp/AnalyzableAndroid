public class org.apache.xpath.NodeSet extends java.lang.Object implements org.w3c.dom.NodeList, org.w3c.dom.traversal.NodeIterator, java.lang.Cloneable, org.apache.xpath.axes.ContextNodeList
{
    protected transient int m_next;
    protected transient boolean m_mutable;
    protected transient boolean m_cacheNodes;
    private transient int m_last;
    private int m_blocksize;
    org.w3c.dom.Node[] m_map;
    protected int m_firstFree;
    private int m_mapSize;

    public void <init>()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xpath.NodeSet: int m_next> = 0;

        r0.<org.apache.xpath.NodeSet: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSet: int m_last> = 0;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = 0;

        r0.<org.apache.xpath.NodeSet: int m_blocksize> = 32;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = 0;

        return;
    }

    public void <init>(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xpath.NodeSet: int m_next> = 0;

        r0.<org.apache.xpath.NodeSet: boolean m_mutable> = 1;

        r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes> = 1;

        r0.<org.apache.xpath.NodeSet: int m_last> = 0;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = 0;

        r0.<org.apache.xpath.NodeSet: int m_blocksize> = i0;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = 0;

        return;
    }

    public void <init>(org.w3c.dom.NodeList)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.NodeList r1;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.NodeList;

        specialinvoke r0.<org.apache.xpath.NodeSet: void <init>(int)>(32);

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addNodes(org.w3c.dom.NodeList)>(r1);

        return;
    }

    public void <init>(org.apache.xpath.NodeSet)
    {
        org.apache.xpath.NodeSet r0, r1;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.apache.xpath.NodeSet;

        specialinvoke r0.<org.apache.xpath.NodeSet: void <init>(int)>(32);

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addNodes(org.w3c.dom.traversal.NodeIterator)>(r1);

        return;
    }

    public void <init>(org.w3c.dom.traversal.NodeIterator)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.traversal.NodeIterator r1;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        specialinvoke r0.<org.apache.xpath.NodeSet: void <init>(int)>(32);

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addNodes(org.w3c.dom.traversal.NodeIterator)>(r1);

        return;
    }

    public void <init>(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.xpath.NodeSet: void <init>(int)>(32);

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addNode(org.w3c.dom.Node)>(r1);

        return;
    }

    public org.w3c.dom.Node getRoot()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        return null;
    }

    public org.w3c.dom.traversal.NodeIterator cloneWithReset() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.NodeSet r0, r1;
        java.lang.Object $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        $r2 = virtualinvoke r0.<org.apache.xpath.NodeSet: java.lang.Object clone()>();

        r1 = (org.apache.xpath.NodeSet) $r2;

        virtualinvoke r1.<org.apache.xpath.NodeSet: void reset()>();

        return r1;
    }

    public void reset()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        r0.<org.apache.xpath.NodeSet: int m_next> = 0;

        return;
    }

    public int getWhatToShow()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        return -17;
    }

    public org.w3c.dom.traversal.NodeFilter getFilter()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        return null;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        return 1;
    }

    public org.w3c.dom.Node nextNode() throws org.w3c.dom.DOMException
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i1 = virtualinvoke r0.<org.apache.xpath.NodeSet: int size()>();

        if $i0 >= $i1 goto label1;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_next>;

        r1 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>($i2);

        $i3 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i4 = $i3 + 1;

        r0.<org.apache.xpath.NodeSet: int m_next> = $i4;

        return r1;

     label1:
        return null;
    }

    public org.w3c.dom.Node previousNode() throws org.w3c.dom.DOMException
    {
        org.apache.xpath.NodeSet r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;
        org.w3c.dom.Node $r1;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_CANNOT_ITERATE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $i0 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i1 = $i0 - 1;

        if $i1 <= 0 goto label2;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i3 = $i2 - 1;

        r0.<org.apache.xpath.NodeSet: int m_next> = $i3;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $r1 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>($i4);

        return $r1;

     label2:
        return null;
    }

    public void detach()
    {
        org.apache.xpath.NodeSet r0;

        r0 := @this: org.apache.xpath.NodeSet;

        return;
    }

    public boolean isFresh()
    {
        org.apache.xpath.NodeSet r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_next>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void runTo(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_CANNOT_INDEX", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        if i0 < 0 goto label2;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if $i4 >= $i3 goto label2;

        r0.<org.apache.xpath.NodeSet: int m_next> = i0;

        goto label3;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i2 = $i1 - 1;

        r0.<org.apache.xpath.NodeSet: int m_next> = $i2;

     label3:
        return;
    }

    public org.w3c.dom.Node item(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void runTo(int)>(i0);

        $r1 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i0);

        return $r1;
    }

    public int getLength()
    {
        org.apache.xpath.NodeSet r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSet;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void runTo(int)>(-1);

        $i0 = virtualinvoke r0.<org.apache.xpath.NodeSet: int size()>();

        return $i0;
    }

    public void addNode(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>(r1);

        return;
    }

    public void insertNode(org.w3c.dom.Node, int)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSet: void insertElementAt(org.w3c.dom.Node,int)>(r1, i0);

        return;
    }

    public void removeNode(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSet: boolean removeElement(org.w3c.dom.Node)>(r1);

        return;
    }

    public void addNodes(org.w3c.dom.NodeList)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.NodeList r1;
        int i0, i1;
        org.w3c.dom.Node r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.NodeList;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        if null == r1 goto label4;

        i0 = interfaceinvoke r1.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        if null == r2 goto label3;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>(r2);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public void addNodes(org.apache.xpath.NodeSet)
    {
        org.apache.xpath.NodeSet r0, r1;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.apache.xpath.NodeSet;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        $r3 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        virtualinvoke r0.<org.apache.xpath.NodeSet: void addNodes(org.w3c.dom.traversal.NodeIterator)>(r1);

        return;
    }

    public void addNodes(org.w3c.dom.traversal.NodeIterator)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.traversal.NodeIterator r1;
        org.w3c.dom.Node r2, $r3;
        boolean $z0;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        if null == r1 goto label3;

     label2:
        $r3 = interfaceinvoke r1.<org.w3c.dom.traversal.NodeIterator: org.w3c.dom.Node nextNode()>();

        r2 = $r3;

        if null == $r3 goto label3;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>(r2);

        goto label2;

     label3:
        return;
    }

    public void addNodesInDocOrder(org.w3c.dom.NodeList, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.NodeList r1;
        org.apache.xpath.XPathContext r2;
        int i0, i1;
        org.w3c.dom.Node r3;
        boolean $z0;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.NodeList;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        i0 = interfaceinvoke r1.<org.w3c.dom.NodeList: int getLength()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        if null == r3 goto label3;

        virtualinvoke r0.<org.apache.xpath.NodeSet: int addNodeInDocOrder(org.w3c.dom.Node,org.apache.xpath.XPathContext)>(r3, r2);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return;
    }

    public void addNodesInDocOrder(org.w3c.dom.traversal.NodeIterator, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.traversal.NodeIterator r1;
        org.apache.xpath.XPathContext r2;
        org.w3c.dom.Node r3, $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.traversal.NodeIterator;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r4 = interfaceinvoke r1.<org.w3c.dom.traversal.NodeIterator: org.w3c.dom.Node nextNode()>();

        r3 = $r4;

        if null == $r4 goto label2;

        virtualinvoke r0.<org.apache.xpath.NodeSet: int addNodeInDocOrder(org.w3c.dom.Node,org.apache.xpath.XPathContext)>(r3, r2);

        goto label1;

     label2:
        return;
    }

    private boolean addNodesInDocOrder(int, int, int, org.w3c.dom.NodeList, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSet r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, i7;
        org.w3c.dom.NodeList r1;
        org.apache.xpath.XPathContext r2;
        boolean z0, z1, $z2, $z3;
        org.w3c.dom.Node r3, r4;
        java.lang.String $r5;
        java.lang.RuntimeException $r6;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: org.w3c.dom.NodeList;

        r2 := @parameter4: org.apache.xpath.XPathContext;

        $z2 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z2 != 0 goto label1;

        $r6 = new java.lang.RuntimeException;

        $r5 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label1:
        z0 = 0;

        r3 = interfaceinvoke r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i2);

        i3 = i1;

     label2:
        if i3 < i0 goto label6;

        r4 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i3);

        if r4 != r3 goto label3;

        i3 = -2;

        goto label6;

     label3:
        $z3 = staticinvoke <org.apache.xml.utils.DOM2Helper: boolean isNodeAfter(org.w3c.dom.Node,org.w3c.dom.Node)>(r3, r4);

        if $z3 != 0 goto label5;

        $i4 = i3 + 1;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void insertElementAt(org.w3c.dom.Node,int)>(r3, $i4);

        i7 = i2 + -1;

        if i7 <= 0 goto label6;

        z1 = specialinvoke r0.<org.apache.xpath.NodeSet: boolean addNodesInDocOrder(int,int,int,org.w3c.dom.NodeList,org.apache.xpath.XPathContext)>(0, i3, i7, r1, r2);

        if z1 != 0 goto label4;

        $i5 = virtualinvoke r0.<org.apache.xpath.NodeSet: int size()>();

        $i6 = $i5 - 1;

        specialinvoke r0.<org.apache.xpath.NodeSet: boolean addNodesInDocOrder(int,int,int,org.w3c.dom.NodeList,org.apache.xpath.XPathContext)>(i3, $i6, i7, r1, r2);

     label4:
        goto label6;

     label5:
        i3 = i3 + -1;

        goto label2;

     label6:
        if i3 != -1 goto label7;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void insertElementAt(org.w3c.dom.Node,int)>(r3, 0);

     label7:
        return z0;
    }

    public int addNodeInDocOrder(org.w3c.dom.Node, boolean, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r3, $r4;
        boolean z0, $z1, $z2, $z3, z4;
        org.apache.xpath.XPathContext r2;
        int i0, i1, i2, i3;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.apache.xpath.XPathContext;

        $z1 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z1 != 0 goto label01;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label01:
        i0 = -1;

        if z0 == 0 goto label07;

        i1 = virtualinvoke r0.<org.apache.xpath.NodeSet: int size()>();

        i2 = i1 - 1;

     label02:
        if i2 < 0 goto label05;

        r3 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>(i2);

        if r3 != r1 goto label03;

        i2 = -2;

        goto label05;

     label03:
        $z3 = staticinvoke <org.apache.xml.utils.DOM2Helper: boolean isNodeAfter(org.w3c.dom.Node,org.w3c.dom.Node)>(r1, r3);

        if $z3 != 0 goto label04;

        goto label05;

     label04:
        i2 = i2 + -1;

        goto label02;

     label05:
        if i2 == -2 goto label06;

        i0 = i2 + 1;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void insertElementAt(org.w3c.dom.Node,int)>(r1, i0);

     label06:
        goto label11;

     label07:
        i0 = virtualinvoke r0.<org.apache.xpath.NodeSet: int size()>();

        z4 = 0;

        i3 = 0;

     label08:
        if i3 >= i0 goto label10;

        $r4 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node item(int)>(i3);

        $z2 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label09;

        z4 = 1;

        goto label10;

     label09:
        i3 = i3 + 1;

        goto label08;

     label10:
        if z4 != 0 goto label11;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void addElement(org.w3c.dom.Node)>(r1);

     label11:
        return i0;
    }

    public int addNodeInDocOrder(org.w3c.dom.Node, org.apache.xpath.XPathContext)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        org.apache.xpath.XPathContext r2;
        boolean $z0;
        int $i0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.xpath.XPathContext;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $i0 = virtualinvoke r0.<org.apache.xpath.NodeSet: int addNodeInDocOrder(org.w3c.dom.Node,boolean,org.apache.xpath.XPathContext)>(r1, 1, r2);

        return $i0;
    }

    public int getCurrentPos()
    {
        org.apache.xpath.NodeSet r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_next>;

        return $i0;
    }

    public void setCurrentPos(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_CANNOT_INDEX", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.xpath.NodeSet: int m_next> = i0;

        return;
    }

    public org.w3c.dom.Node getCurrentNode()
    {
        org.apache.xpath.NodeSet r0;
        int i0, $i1, $i2, $i3;
        org.w3c.dom.Node r1, $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xpath.NodeSet;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes>;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.RuntimeException;

        $r4 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_CANNOT_INDEX", null);

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i0 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if $i2 >= $i1 goto label2;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_next>;

        $r2 = virtualinvoke r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node elementAt(int)>($i3);

        goto label3;

     label2:
        $r2 = null;

     label3:
        r1 = $r2;

        r0.<org.apache.xpath.NodeSet: int m_next> = i0;

        return r1;
    }

    public boolean getShouldCacheNodes()
    {
        org.apache.xpath.NodeSet r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSet;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes>;

        return $z0;
    }

    public void setShouldCacheNodes(boolean)
    {
        org.apache.xpath.NodeSet r0;
        boolean z0, $z1;
        java.lang.RuntimeException $r1;
        java.lang.String $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<org.apache.xpath.NodeSet: boolean isFresh()>();

        if $z1 != 0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_CANNOT_CALL_SETSHOULDCACHENODE", null);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        r0.<org.apache.xpath.NodeSet: boolean m_cacheNodes> = z0;

        r0.<org.apache.xpath.NodeSet: boolean m_mutable> = 1;

        return;
    }

    public int getLast()
    {
        org.apache.xpath.NodeSet r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_last>;

        return $i0;
    }

    public void setLast(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        r0.<org.apache.xpath.NodeSet: int m_last> = i0;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.NodeSet r0, r1;
        java.lang.Object $r2;
        org.w3c.dom.Node[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1;

        r0 := @this: org.apache.xpath.NodeSet;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (org.apache.xpath.NodeSet) $r2;

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null == $r3 goto label1;

        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r4 = r1.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if $r5 != $r4 goto label1;

        $r6 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i0 = lengthof $r6;

        $r7 = newarray (org.w3c.dom.Node)[$i0];

        r1.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r7;

        $r10 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r9 = r1.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r8 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i1 = lengthof $r8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r9, 0, $i1);

     label1:
        return r1;
    }

    public int size()
    {
        org.apache.xpath.NodeSet r0;
        int $i0;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        return $i0;
    }

    public void addElement(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        org.w3c.dom.Node[] r2, $r3, $r4, $r5, $r6;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String $r7;
        java.lang.RuntimeException $r8;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r8 = new java.lang.RuntimeException;

        $r7 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label1:
        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i2 = $i0 + 1;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        if $i2 < $i1 goto label3;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r4 goto label2;

        $i12 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $r6 = newarray (org.w3c.dom.Node)[$i12];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r6;

        $i13 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i13;

        goto label3;

     label2:
        $i7 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i8 = $i7 + $i6;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i8;

        $i9 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        r2 = newarray (org.w3c.dom.Node)[$i9];

        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i11 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i10 = $i11 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i10);

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = r2;

     label3:
        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r3[$i3] = r1;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 + 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i5;

        return;
    }

    public final void push(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        org.w3c.dom.Node[] r2, $r3, $r4, $r5, $r6;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i2 = i0 + 1;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        if $i2 < $i1 goto label2;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r4 goto label1;

        $i8 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $r6 = newarray (org.w3c.dom.Node)[$i8];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r6;

        $i9 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i9;

        goto label2;

     label1:
        $i4 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i5 = $i4 + $i3;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i5;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        r2 = newarray (org.w3c.dom.Node)[$i6];

        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i7 = i0 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r2, 0, $i7);

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = r2;

     label2:
        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r3[i0] = r1;

        i10 = i0 + 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = i10;

        return;
    }

    public final org.w3c.dom.Node pop()
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int $i0, $i1, $i2, $i3;
        org.w3c.dom.Node[] $r2, $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i1;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        r1 = $r2[$i2];

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r3[$i3] = null;

        return r1;
    }

    public final org.w3c.dom.Node popAndTop()
    {
        org.apache.xpath.NodeSet r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.w3c.dom.Node[] $r1, $r2;
        org.w3c.dom.Node $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r1[$i2] = null;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if $i3 != 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 - 1;

        $r3 = $r2[$i5];

     label2:
        return $r3;
    }

    public final void popQuick()
    {
        org.apache.xpath.NodeSet r0;
        int $i0, $i1, $i2;
        org.w3c.dom.Node[] $r1;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r1[$i2] = null;

        return;
    }

    public final org.w3c.dom.Node peepOrNull()
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node[] $r1, $r2;
        int $i0, $i1, $i2;
        org.w3c.dom.Node $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null == $r1 goto label1;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i2 = $i1 - 1;

        $r3 = $r2[$i2];

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public final void pushPair(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r2;
        org.w3c.dom.Node[] r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r4 goto label1;

        $i13 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $r8 = newarray (org.w3c.dom.Node)[$i13];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r8;

        $i14 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i14;

        goto label2;

     label1:
        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i2 = $i0 + 2;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        if $i2 < $i1 goto label2;

        $i10 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $i8 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i9 = $i10 + $i8;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i9;

        $i12 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        r3 = newarray (org.w3c.dom.Node)[$i12];

        $r7 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i11 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r3, 0, $i11);

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = r3;

     label2:
        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r5[$i3] = r1;

        $r6 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 + 1;

        $r6[$i5] = r2;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i7 = $i6 + 2;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i7;

        return;
    }

    public final void popPair()
    {
        org.apache.xpath.NodeSet r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.w3c.dom.Node[] $r1, $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 2;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i1;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r1[$i2] = null;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i3 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i4 = $i3 + 1;

        $r2[$i4] = null;

        return;
    }

    public final void setTail(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int $i0, $i1;
        org.w3c.dom.Node[] $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 1;

        $r2[$i1] = r1;

        return;
    }

    public final void setTailSub1(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int $i0, $i1;
        org.w3c.dom.Node[] $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 2;

        $r2[$i1] = r1;

        return;
    }

    public final org.w3c.dom.Node peepTail()
    {
        org.apache.xpath.NodeSet r0;
        int $i0, $i1;
        org.w3c.dom.Node[] $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 1;

        $r2 = $r1[$i1];

        return $r2;
    }

    public final org.w3c.dom.Node peepTailSub1()
    {
        org.apache.xpath.NodeSet r0;
        int $i0, $i1;
        org.w3c.dom.Node[] $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i0 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i1 = $i0 - 2;

        $r2 = $r1[$i1];

        return $r2;
    }

    public void insertElementAt(org.w3c.dom.Node, int)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        org.w3c.dom.Node[] r2, $r3, $r4, $r5, $r6, $r7, $r8;
        boolean $z0;
        java.lang.RuntimeException $r9;
        java.lang.String $r10;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r9 = new java.lang.RuntimeException;

        $r10 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label1:
        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label2;

        $i17 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $r8 = newarray (org.w3c.dom.Node)[$i17];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r8;

        $i18 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i18;

        goto label3;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i3 = $i1 + 1;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        if $i3 < $i2 goto label3;

        $i13 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $i11 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i12 = $i13 + $i11;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i12;

        $i15 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        r2 = newarray (org.w3c.dom.Node)[$i15];

        $r7 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i14 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i16 = $i14 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r2, 0, $i16);

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = r2;

     label3:
        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 - 1;

        if i0 > $i5 goto label4;

        $r6 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i10 = i0 + 1;

        $i8 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i9 = $i8 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, i0, $r5, $i10, $i9);

     label4:
        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r4[i0] = r1;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i7 = $i6 + 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i7;

        return;
    }

    public void appendNodes(org.apache.xpath.NodeSet)
    {
        org.apache.xpath.NodeSet r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        org.w3c.dom.Node[] r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.apache.xpath.NodeSet;

        i0 = virtualinvoke r1.<org.apache.xpath.NodeSet: int size()>();

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label1;

        $i15 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i14 = i0 + $i15;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i14;

        $i16 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $r7 = newarray (org.w3c.dom.Node)[$i16];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r7;

        goto label2;

     label1:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i3 = $i1 + i0;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        if $i3 < $i2 goto label2;

        $i10 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        $i7 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $i8 = i0 + $i7;

        $i9 = $i10 + $i8;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i9;

        $i12 = r0.<org.apache.xpath.NodeSet: int m_mapSize>;

        r2 = newarray (org.w3c.dom.Node)[$i12];

        $r6 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i11 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i13 = $i11 + i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r2, 0, $i13);

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = r2;

     label2:
        $r5 = r1.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r4, $i4, i0);

        $i5 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i6 = $i5 + i0;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i6;

        return;
    }

    public void removeAllElements()
    {
        org.apache.xpath.NodeSet r0;
        int i0, $i1;
        org.w3c.dom.Node[] $r1, $r2;

        r0 := @this: org.apache.xpath.NodeSet;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r1 goto label1;

        return;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i0 >= $i1 goto label3;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r2[i0] = null;

        i0 = i0 + 1;

        goto label2;

     label3:
        r0.<org.apache.xpath.NodeSet: int m_firstFree> = 0;

        return;
    }

    public boolean removeElement(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0, $z1;
        org.w3c.dom.Node[] $r3, $r4, $r5, $r6, $r8;
        java.lang.RuntimeException $r7;
        java.lang.String $r9;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.RuntimeException;

        $r9 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label1:
        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label2;

        return 0;

     label2:
        i0 = 0;

     label3:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i0 >= $i1 goto label6;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        r2 = $r4[i0];

        if null == r2 goto label5;

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label5;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i3 = $i2 - 1;

        if i0 >= $i3 goto label4;

        $r8 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i10 = i0 + 1;

        $r6 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i7 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i9 = $i7 - i0;

        $i8 = $i9 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i10, $r6, i0, $i8);

     label4:
        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 - 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i5;

        $r5 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r5[$i6] = null;

        return 1;

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        return 0;
    }

    public void removeElementAt(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        org.w3c.dom.Node[] $r1, $r2, $r3, $r4;
        java.lang.ArrayIndexOutOfBoundsException $r5, $r6;
        java.lang.StringBuilder $r7, $r8, $r9, $r11;
        java.lang.String $r10;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r1 goto label1;

        return;

     label1:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i0 < $i1 goto label2;

        $r5 = new java.lang.ArrayIndexOutOfBoundsException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" >= ");

        $i11 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        if i0 >= 0 goto label3;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r6;

     label3:
        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i3 = $i2 - 1;

        if i0 >= $i3 goto label4;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i10 = i0 + 1;

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i7 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i8 = $i7 - i0;

        $i9 = $i8 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, $i10, $r3, i0, $i9);

     label4:
        $i4 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $i5 = $i4 - 1;

        r0.<org.apache.xpath.NodeSet: int m_firstFree> = $i5;

        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $i6 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        $r2[$i6] = null;

        return;
    }

    public void setElementAt(org.w3c.dom.Node, int)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1;
        int i0, $i1, $i2;
        boolean $z0;
        org.w3c.dom.Node[] $r2, $r3, $r4;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        $z0 = r0.<org.apache.xpath.NodeSet: boolean m_mutable>;

        if $z0 != 0 goto label1;

        $r5 = new java.lang.RuntimeException;

        $r6 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NODESET_NOT_MUTABLE", null);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label1:
        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r2 goto label2;

        $i1 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        $r4 = newarray (org.w3c.dom.Node)[$i1];

        r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map> = $r4;

        $i2 = r0.<org.apache.xpath.NodeSet: int m_blocksize>;

        r0.<org.apache.xpath.NodeSet: int m_mapSize> = $i2;

     label2:
        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r3[i0] = r1;

        return;
    }

    public org.w3c.dom.Node elementAt(int)
    {
        org.apache.xpath.NodeSet r0;
        int i0;
        org.w3c.dom.Node[] $r1, $r2;
        org.w3c.dom.Node $r3;

        r0 := @this: org.apache.xpath.NodeSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r1 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        $r3 = $r2[i0];

        return $r3;
    }

    public boolean contains(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r2;
        int i0, $i1;
        org.w3c.dom.Node[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void runTo(int)>(-1);

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label1;

        return 0;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        r2 = $r4[i0];

        if null == r2 goto label3;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    public int indexOf(org.w3c.dom.Node, int)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r2;
        int i0, i1, $i2;
        org.w3c.dom.Node[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        i0 := @parameter1: int;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void runTo(int)>(-1);

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label1;

        return -1;

     label1:
        i1 = i0;

     label2:
        $i2 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i1 >= $i2 goto label4;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        r2 = $r4[i1];

        if null == r2 goto label3;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return i1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return -1;
    }

    public int indexOf(org.w3c.dom.Node)
    {
        org.apache.xpath.NodeSet r0;
        org.w3c.dom.Node r1, r2;
        int i0, $i1;
        org.w3c.dom.Node[] $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.NodeSet;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.xpath.NodeSet: void runTo(int)>(-1);

        $r3 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        if null != $r3 goto label1;

        return -1;

     label1:
        i0 = 0;

     label2:
        $i1 = r0.<org.apache.xpath.NodeSet: int m_firstFree>;

        if i0 >= $i1 goto label4;

        $r4 = r0.<org.apache.xpath.NodeSet: org.w3c.dom.Node[] m_map>;

        r2 = $r4[i0];

        if null == r2 goto label3;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        return i0;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return -1;
    }
}
