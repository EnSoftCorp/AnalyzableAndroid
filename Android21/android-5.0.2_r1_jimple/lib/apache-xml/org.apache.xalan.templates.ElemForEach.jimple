public class org.apache.xalan.templates.ElemForEach extends org.apache.xalan.templates.ElemTemplateElement implements org.apache.xpath.ExpressionOwner
{
    static final long serialVersionUID;
    static final boolean DEBUG;
    public boolean m_doc_cache_off;
    protected org.apache.xpath.Expression m_selectExpression;
    protected org.apache.xpath.XPath m_xpath;
    protected java.util.Vector m_sortElems;

    public void <init>()
    {
        org.apache.xalan.templates.ElemForEach r0;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemForEach: boolean m_doc_cache_off> = 0;

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression> = null;

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.XPath m_xpath> = null;

        r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems> = null;

        return;
    }

    public void setSelect(org.apache.xpath.XPath)
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xpath.XPath r1;
        org.apache.xpath.Expression $r2;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xpath.XPath;

        $r2 = virtualinvoke r1.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression> = $r2;

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.XPath m_xpath> = r1;

        return;
    }

    public org.apache.xpath.Expression getSelect()
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xpath.Expression $r1;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        $r1 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        return $r1;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.templates.StylesheetRoot r1, $r4;
        int i0, i1, $i2;
        org.apache.xalan.templates.StylesheetRoot$ComposeState $r2, $r8;
        org.apache.xpath.Expression $r3, $r6, $r7;
        org.apache.xpath.XPath $r5;
        org.apache.xalan.templates.ElemSort $r9;
        java.util.Vector r10;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        i0 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: int getSortElemCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r9 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemSort getSortElem(int)>(i1);

        virtualinvoke $r9.<org.apache.xalan.templates.ElemSort: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        r10 = virtualinvoke $r2.<org.apache.xalan.templates.StylesheetRoot$ComposeState: java.util.Vector getVariableNames()>();

        $r3 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        if null == $r3 goto label3;

        $r7 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        $r8 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.templates.StylesheetRoot$ComposeState getComposeState()>();

        $i2 = virtualinvoke $r8.<org.apache.xalan.templates.StylesheetRoot$ComposeState: int getGlobalsSize()>();

        virtualinvoke $r7.<org.apache.xpath.Expression: void fixupVariables(java.util.Vector,int)>(r10, $i2);

        goto label4;

     label3:
        $r4 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.StylesheetRoot getStylesheetRoot()>();

        $r5 = $r4.<org.apache.xalan.templates.StylesheetRoot: org.apache.xpath.XPath m_selectDefault>;

        $r6 = virtualinvoke $r5.<org.apache.xpath.XPath: org.apache.xpath.Expression getExpression()>();

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression> = $r6;

     label4:
        return;
    }

    public void endCompose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.templates.StylesheetRoot r1;
        int i0, i1;
        org.apache.xalan.templates.ElemSort $r2;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        i0 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: int getSortElemCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemSort getSortElem(int)>(i1);

        virtualinvoke $r2.<org.apache.xalan.templates.ElemSort: void endCompose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void endCompose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        return;
    }

    public int getSortElemCount()
    {
        org.apache.xalan.templates.ElemForEach r0;
        java.util.Vector $r1, $r2;
        int $i0;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        $r1 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        if $r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

     label2:
        return $i0;
    }

    public org.apache.xalan.templates.ElemSort getSortElem(int)
    {
        org.apache.xalan.templates.ElemForEach r0;
        int i0;
        java.util.Vector $r1;
        java.lang.Object $r2;
        org.apache.xalan.templates.ElemSort $r3;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (org.apache.xalan.templates.ElemSort) $r2;

        return $r3;
    }

    public void setSortElem(org.apache.xalan.templates.ElemSort)
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.templates.ElemSort r1;
        java.util.Vector $r2, $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.templates.ElemSort;

        $r2 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        if null != $r2 goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems> = $r4;

     label1:
        $r3 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>(r1);

        return;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemForEach r0;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        return 28;
    }

    public java.lang.String getNodeName()
    {
        org.apache.xalan.templates.ElemForEach r0;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        return "for-each";
    }

    public void execute(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void pushCurrentTemplateRuleIsNull(boolean)>(1);

     label1:
        virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl)>(r1);

     label2:
        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void popCurrentTemplateRuleIsNull()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void popCurrentTemplateRuleIsNull()>();

        throw r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected org.apache.xalan.templates.ElemTemplateElement getTemplateMatch()
    {
        org.apache.xalan.templates.ElemForEach r0;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        return r0;
    }

    public org.apache.xml.dtm.DTMIterator sortNodes(org.apache.xpath.XPathContext, java.util.Vector, org.apache.xml.dtm.DTMIterator) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xpath.XPathContext r1;
        java.util.Vector r2;
        org.apache.xml.dtm.DTMIterator r3;
        org.apache.xalan.transformer.NodeSorter r4, $r6;
        java.lang.Throwable r5, $r7;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xpath.XPathContext;

        r2 := @parameter1: java.util.Vector;

        r3 := @parameter2: org.apache.xml.dtm.DTMIterator;

        $r6 = new org.apache.xalan.transformer.NodeSorter;

        specialinvoke $r6.<org.apache.xalan.transformer.NodeSorter: void <init>(org.apache.xpath.XPathContext)>(r1);

        r4 = $r6;

        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void setShouldCacheNodes(boolean)>(1);

        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void runTo(int)>(-1);

        virtualinvoke r1.<org.apache.xpath.XPathContext: void pushContextNodeList(org.apache.xml.dtm.DTMIterator)>(r3);

     label1:
        virtualinvoke r4.<org.apache.xalan.transformer.NodeSorter: void sort(org.apache.xml.dtm.DTMIterator,java.util.Vector,org.apache.xpath.XPathContext)>(r3, r2, r1);

        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void setCurrentPos(int)>(0);

     label2:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popContextNodeList()>();

        goto label5;

     label3:
        $r7 := @caughtexception;

        r5 = $r7;

     label4:
        virtualinvoke r1.<org.apache.xpath.XPathContext: void popContextNodeList()>();

        throw r5;

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void transformSelectedNodes(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.transformer.TransformerImpl r1;
        org.apache.xpath.XPathContext r2;
        int i0, i1, i2, $i4, $i5, $i6;
        org.apache.xml.dtm.DTMIterator r3;
        java.util.Vector r4, $r11, $r12;
        org.apache.xml.utils.IntStack r5, r6;
        org.apache.xml.dtm.DTM r7;
        org.apache.xalan.templates.ElemTemplateElement r8;
        java.lang.Throwable r9, $r14;
        org.apache.xpath.Expression $r10;
        boolean $z0;
        org.apache.xpath.SourceTreeManager $r13;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        r2 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: org.apache.xpath.XPathContext getXPathContext()>();

        i0 = virtualinvoke r2.<org.apache.xpath.XPathContext: int getCurrentNode()>();

        $r10 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        r3 = virtualinvoke $r10.<org.apache.xpath.Expression: org.apache.xml.dtm.DTMIterator asIterator(org.apache.xpath.XPathContext,int)>(r2, i0);

     label01:
        $r12 = r0.<org.apache.xalan.templates.ElemForEach: java.util.Vector m_sortElems>;

        if $r12 != null goto label02;

        $r11 = null;

        goto label03;

     label02:
        $r11 = virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: java.util.Vector processSortKeys(org.apache.xalan.templates.ElemForEach,int)>(r0, i0);

     label03:
        r4 = $r11;

        if null == r4 goto label04;

        r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: org.apache.xml.dtm.DTMIterator sortNodes(org.apache.xpath.XPathContext,java.util.Vector,org.apache.xml.dtm.DTMIterator)>(r2, r4, r3);

     label04:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushCurrentNode(int)>(-1);

        r5 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.utils.IntStack getCurrentNodeStack()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushCurrentExpressionNode(int)>(-1);

        r6 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.utils.IntStack getCurrentExpressionNodeStack()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushSAXLocatorNull()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void pushContextNodeList(org.apache.xml.dtm.DTMIterator)>(r3);

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void pushElemTemplateElement(org.apache.xalan.templates.ElemTemplateElement)>(null);

        r7 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i0);

        i1 = i0 & -65536;

     label05:
        $i5 = interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: int nextNode()>();

        i2 = $i5;

        if -1 == $i5 goto label10;

        virtualinvoke r5.<org.apache.xml.utils.IntStack: void setTop(int)>(i2);

        virtualinvoke r6.<org.apache.xml.utils.IntStack: void setTop(int)>(i2);

        $i4 = i2 & -65536;

        if $i4 == i1 goto label06;

        r7 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xml.dtm.DTM getDTM(int)>(i2);

        i1 = i2 & -65536;

     label06:
        interfaceinvoke r7.<org.apache.xml.dtm.DTM: short getNodeType(int)>(i2);

        r8 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemTemplateElement m_firstChild>;

     label07:
        if r8 == null goto label08;

        virtualinvoke r2.<org.apache.xpath.XPathContext: void setSAXLocator(javax.xml.transform.SourceLocator)>(r8);

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void setCurrentElement(org.apache.xalan.templates.ElemTemplateElement)>(r8);

        virtualinvoke r8.<org.apache.xalan.templates.ElemTemplateElement: void execute(org.apache.xalan.transformer.TransformerImpl)>(r1);

        r8 = r8.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement m_nextSibling>;

        goto label07;

     label08:
        $z0 = r0.<org.apache.xalan.templates.ElemForEach: boolean m_doc_cache_off>;

        if $z0 == 0 goto label09;

        $r13 = virtualinvoke r2.<org.apache.xpath.XPathContext: org.apache.xpath.SourceTreeManager getSourceTreeManager()>();

        $i6 = interfaceinvoke r7.<org.apache.xml.dtm.DTM: int getDocument()>();

        virtualinvoke $r13.<org.apache.xpath.SourceTreeManager: void removeDocumentFromCache(int)>($i6);

        virtualinvoke r2.<org.apache.xpath.XPathContext: boolean release(org.apache.xml.dtm.DTM,boolean)>(r7, 0);

     label09:
        goto label05;

     label10:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void popSAXLocator()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popContextNodeList()>();

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void popElemTemplateElement()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentExpressionNode()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void detach()>();

        goto label13;

     label11:
        $r14 := @caughtexception;

        r9 = $r14;

     label12:
        virtualinvoke r2.<org.apache.xpath.XPathContext: void popSAXLocator()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popContextNodeList()>();

        virtualinvoke r1.<org.apache.xalan.transformer.TransformerImpl: void popElemTemplateElement()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentExpressionNode()>();

        virtualinvoke r2.<org.apache.xpath.XPathContext: void popCurrentNode()>();

        interfaceinvoke r3.<org.apache.xml.dtm.DTMIterator: void detach()>();

        throw r9;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.templates.ElemTemplateElement r1, $r2;
        int i0;
        org.apache.xalan.templates.ElemSort $r3;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.templates.ElemTemplateElement;

        i0 = virtualinvoke r1.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 64 != i0 goto label1;

        $r3 = (org.apache.xalan.templates.ElemSort) r1;

        virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: void setSortElem(org.apache.xalan.templates.ElemSort)>($r3);

        return r1;

     label1:
        $r2 = specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement appendChild(org.apache.xalan.templates.ElemTemplateElement)>(r1);

        return $r2;
    }

    public void callChildVisitors(org.apache.xalan.templates.XSLTVisitor, boolean)
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xalan.templates.XSLTVisitor r1;
        boolean z0;
        int i0, i1;
        org.apache.xalan.templates.ElemSort $r2;
        org.apache.xpath.Expression $r3, $r4;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xalan.templates.XSLTVisitor;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r3 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        if null == $r3 goto label1;

        $r4 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        virtualinvoke $r4.<org.apache.xpath.Expression: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r0, r1);

     label1:
        i0 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: int getSortElemCount()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemForEach: org.apache.xalan.templates.ElemSort getSortElem(int)>(i1);

        virtualinvoke $r2.<org.apache.xalan.templates.ElemSort: void callVisitors(org.apache.xalan.templates.XSLTVisitor)>(r1);

        i1 = i1 + 1;

        goto label2;

     label3:
        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void callChildVisitors(org.apache.xalan.templates.XSLTVisitor,boolean)>(r1, z0);

        return;
    }

    public org.apache.xpath.Expression getExpression()
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xpath.Expression $r1;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        $r1 = r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression>;

        return $r1;
    }

    public void setExpression(org.apache.xpath.Expression)
    {
        org.apache.xalan.templates.ElemForEach r0;
        org.apache.xpath.Expression r1;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: org.apache.xpath.Expression;

        virtualinvoke r1.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r0);

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.Expression m_selectExpression> = r1;

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.xalan.templates.ElemForEach r0;
        java.io.ObjectInputStream r1;

        r0 := @this: org.apache.xalan.templates.ElemForEach;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        r0.<org.apache.xalan.templates.ElemForEach: org.apache.xpath.XPath m_xpath> = null;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xalan.templates.ElemForEach: boolean DEBUG> = 0;

        <org.apache.xalan.templates.ElemForEach: long serialVersionUID> = 6018140636363583690L;

        return;
    }
}
