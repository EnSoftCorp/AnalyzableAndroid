final class org.apache.xml.dtm.ref.ChunkedIntArray extends java.lang.Object
{
    final int slotsize;
    static final int lowbits;
    static final int chunkalloc;
    static final int lowmask;
    org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks;
    final int[] fastArray;
    int lastUsed;

    void <init>(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, $i1;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r1, $r6;
        int[] $r2, $r5;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r13, $r15;
        java.io.PrintStream $r8;
        java.lang.String $r14, $r18, $r19;
        java.lang.Object[] $r16;
        java.lang.ArrayIndexOutOfBoundsException $r17;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int slotsize> = 4;

        $r1 = new org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector;

        specialinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void <init>(org.apache.xml.dtm.ref.ChunkedIntArray)>(r0);

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks> = $r1;

        $r2 = newarray (int)[1024];

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray> = $r2;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = 0;

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if 4 >= i0 goto label1;

        $r17 = new java.lang.ArrayIndexOutOfBoundsException;

        $r16 = newarray (java.lang.Object)[1];

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r16[0] = $r19;

        $r18 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_CHUNKEDINTARRAY_NOT_SUPPORTED", $r16);

        specialinvoke $r17.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label1:
        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        if 4 <= i0 goto label2;

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*****WARNING: ChunkedIntArray(");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") wasting ");

        virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i1 = 4 - i0;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" words per slot");

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int[] fastArray>;

        virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

        return;
    }

    int appendSlot(int, int, int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        int[] r1, $r5;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2, $r3, $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $i8 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i9 = $i8 + 1;

        i5 = $i9 * 4;

        i6 = i5 >> 10;

        i7 = i5 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i10 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i11 = $i10 - 1;

        if i6 <= $i11 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = newarray (int)[1024];

        virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i6);

        r1[i7] = i0;

        $i12 = i7 + 1;

        r1[$i12] = i1;

        $i14 = i7 + 2;

        r1[$i14] = i2;

        $i13 = i7 + 3;

        r1[$i13] = i3;

        $i16 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i15 = $i16 + 1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = $i15;

        return $i15;
    }

    int readEntry(int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, $i4, $i5, i6;
        int[] r1;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i6 = i0 * 4;

        i2 = i6 >> 10;

        i3 = i6 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i2);

        $i4 = i3 + i1;

        $i5 = r1[$i4];

        return $i5;
    }

    int specialFind(int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, $i5, i6;
        int[] r1;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

     label1:
        if i2 <= 0 goto label3;

        i6 = i2 * 4;

        i3 = i6 >> 10;

        i4 = i6 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i3);

        $i5 = i4 + 1;

        i2 = r1[$i5];

        if i2 != i1 goto label2;

        goto label3;

     label2:
        goto label1;

     label3:
        if i2 > 0 goto label4;

        return i1;

     label4:
        return -1;
    }

    int slotsUsed()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int $i0;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        return $i0;
    }

    void discardLast()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int $i0, $i1;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        $i0 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed>;

        $i1 = $i0 - 1;

        r0.<org.apache.xml.dtm.ref.ChunkedIntArray: int lastUsed> = $i1;

        return;
    }

    void writeEntry(int, int, int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, $i5, i6;
        int[] r1;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.String $r4;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 < 4 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        $r4 = staticinvoke <org.apache.xml.res.XMLMessages: java.lang.String createXMLMessage(java.lang.String,java.lang.Object[])>("ER_OFFSET_BIGGER_THAN_SLOT", null);

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        i6 = i0 * 4;

        i3 = i6 >> 10;

        i4 = i6 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i3);

        $i5 = i4 + i1;

        r1[$i5] = i2;

        return;
    }

    void writeSlot(int, int, int, int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, i12;
        int[] r1, $r4;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r2, $r3, $r5;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i12 = i0 * 4;

        i5 = i12 >> 10;

        i6 = i12 & 1023;

        $r2 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i7 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i8 = $i7 - 1;

        if i5 <= $i8 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r4 = newarray (int)[1024];

        virtualinvoke $r5.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r4);

     label1:
        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r1 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i5);

        r1[i6] = i1;

        $i9 = i6 + 1;

        r1[$i9] = i2;

        $i10 = i6 + 2;

        r1[$i10] = i3;

        $i11 = i6 + 3;

        r1[$i11] = i4;

        return;
    }

    void readSlot(int, int[])
    {
        org.apache.xml.dtm.ref.ChunkedIntArray r0;
        int i0, i1, i2, $i3, $i4, i5;
        int[] r1, r2, $r5;
        org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector $r3, $r4, $r6;

        r0 := @this: org.apache.xml.dtm.ref.ChunkedIntArray;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i5 = i0 * 4;

        i1 = i5 >> 10;

        i2 = i5 & 1023;

        $r3 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $i3 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int size()>();

        $i4 = $i3 - 1;

        if i1 <= $i4 goto label1;

        $r6 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        $r5 = newarray (int)[1024];

        virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: void addElement(int[])>($r5);

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.ChunkedIntArray: org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector chunks>;

        r2 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray$ChunksVector: int[] elementAt(int)>(i1);

        staticinvoke <java.lang.System: void arraycopy(int[],int,int[],int,int)>(r2, i2, r1, 0, 4);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowmask> = 1023;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int chunkalloc> = 1024;

        <org.apache.xml.dtm.ref.ChunkedIntArray: int lowbits> = 10;

        return;
    }
}
