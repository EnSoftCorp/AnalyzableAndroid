public abstract class com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher extends com.google.common.hash.AbstractHasher
{
    private final java.nio.ByteBuffer buffer;
    private final int bufferSize;
    private final int chunkSize;

    protected void <init>(int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        int i0;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        i0 := @parameter0: int;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void <init>(int,int)>(i0, i0);

        return;
    }

    protected void <init>(int, int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        int i0, i1, $i2, $i3;
        java.nio.ByteBuffer $r1, $r3;
        java.nio.ByteOrder $r2;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.google.common.hash.AbstractHasher: void <init>()>();

        $i2 = i1 % i0;

        if $i2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $i3 = i1 + 7;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i3);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer> = $r3;

        r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int bufferSize> = i1;

        r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize> = i0;

        return;
    }

    protected abstract void process(java.nio.ByteBuffer);

    protected void processRemaining(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.nio.ByteBuffer r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r1.<java.nio.ByteBuffer: int limit()>();

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i0);

        $i1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize>;

        $i2 = $i1 + 7;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i2);

     label1:
        $i3 = virtualinvoke r1.<java.nio.ByteBuffer: int position()>();

        $i4 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize>;

        if $i3 >= $i4 goto label2;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(0L);

        goto label1;

     label2:
        $i5 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize>;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i5);

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void process(java.nio.ByteBuffer)>(r1);

        return;
    }

    public final com.google.common.hash.Hasher putBytes(byte[])
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte[] r1;
        int $i0;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>(r1, 0, $i0);

        return $r2;
    }

    public final com.google.common.hash.Hasher putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte[] r1;
        int i0, i1;
        java.nio.ByteBuffer $r2, $r4;
        java.nio.ByteOrder $r3;
        com.google.common.hash.Hasher $r5;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $r5 = specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)>($r4);

        return $r5;
    }

    private final com.google.common.hash.Hasher putBytes(java.nio.ByteBuffer)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.nio.ByteBuffer r1, $r2, $r3, $r4, $r6, $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        byte $b8;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: java.nio.ByteBuffer;

        $i2 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $r2 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        if $i2 > $i3 goto label1;

        $r7 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;

     label1:
        $i4 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int bufferSize>;

        $r3 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i5 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        i0 = $i4 - $i5;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r6 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $b8 = virtualinvoke r1.<java.nio.ByteBuffer: byte get()>();

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b8);

        i1 = i1 + 1;

        goto label2;

     label3:
        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munch()>();

     label4:
        $i6 = virtualinvoke r1.<java.nio.ByteBuffer: int remaining()>();

        $i7 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize>;

        if $i6 < $i7 goto label5;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void process(java.nio.ByteBuffer)>(r1);

        goto label4;

     label5:
        $r4 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>(r1);

        return r0;
    }

    public final com.google.common.hash.Hasher putString(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.lang.CharSequence r1;
        int i0, $i1;
        char $c2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: java.lang.CharSequence;

        i0 = 0;

     label1:
        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if i0 >= $i1 goto label2;

        $c2 = interfaceinvoke r1.<java.lang.CharSequence: char charAt(int)>(i0);

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putChar(char)>($c2);

        i0 = i0 + 1;

        goto label1;

     label2:
        return r0;
    }

    public final com.google.common.hash.Hasher putByte(byte)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte b0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        b0 := @parameter0: byte;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public final com.google.common.hash.Hasher putShort(short)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        short s0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        s0 := @parameter0: short;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(s0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public final com.google.common.hash.Hasher putChar(char)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        char c0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        c0 := @parameter0: char;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>(c0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public final com.google.common.hash.Hasher putInt(int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        int i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public final com.google.common.hash.Hasher putLong(long)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        long l0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        l0 := @parameter0: long;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munchIfFull()>();

        return r0;
    }

    public final com.google.common.hash.Hasher putObject(java.lang.Object, com.google.common.hash.Funnel)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.lang.Object r1;
        com.google.common.hash.Funnel r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: com.google.common.hash.Funnel;

        interfaceinvoke r2.<com.google.common.hash.Funnel: void funnel(java.lang.Object,com.google.common.hash.Sink)>(r1, r0);

        return r0;
    }

    public final com.google.common.hash.HashCode hash()
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.nio.ByteBuffer $r1, $r3, $r5;
        int $i0;
        com.google.common.hash.HashCode $r4;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munch()>();

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        $r3 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        if $i0 <= 0 goto label1;

        $r5 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void processRemaining(java.nio.ByteBuffer)>($r5);

     label1:
        $r4 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.HashCode makeHash()>();

        return $r4;
    }

    abstract com.google.common.hash.HashCode makeHash();

    private void munchIfFull()
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 >= 8 goto label1;

        specialinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void munch()>();

     label1:
        return;
    }

    private void munch()
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.nio.ByteBuffer $r1, $r3, $r4, $r6;
        int $i0, $i1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        $r1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

     label1:
        $r3 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int remaining()>();

        $i1 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: int chunkSize>;

        if $i0 < $i1 goto label2;

        $r6 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: void process(java.nio.ByteBuffer)>($r6);

        goto label1;

     label2:
        $r4 = r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: java.nio.ByteBuffer buffer>;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer compact()>();

        return;
    }

    public volatile com.google.common.hash.Sink putString(java.lang.CharSequence)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        java.lang.CharSequence r1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putString(java.lang.CharSequence)>(r1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putChar(char)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        char c0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        c0 := @parameter0: char;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putChar(char)>(c0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putLong(long)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        long l0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        l0 := @parameter0: long;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putLong(long)>(l0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putInt(int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        int i0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putInt(int)>(i0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putShort(short)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        short s0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        s0 := @parameter0: short;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putShort(short)>(s0);

        return $r1;
    }

    public volatile com.google.common.hash.Sink putBytes(byte[], int, int)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte[] r1;
        int i0, i1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(byte[],int,int)>(r1, i0, i1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putBytes(byte[])
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte[] r1;
        com.google.common.hash.Hasher $r2;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putBytes(byte[])>(r1);

        return $r2;
    }

    public volatile com.google.common.hash.Sink putByte(byte)
    {
        com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher r0;
        byte b0;
        com.google.common.hash.Hasher $r1;

        r0 := @this: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher;

        b0 := @parameter0: byte;

        $r1 = virtualinvoke r0.<com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher: com.google.common.hash.Hasher putByte(byte)>(b0);

        return $r1;
    }
}
