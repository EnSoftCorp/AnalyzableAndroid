public class com.android.documentsui.ProviderExecutor extends java.lang.Thread implements java.util.concurrent.Executor
{
    private static java.util.HashMap sExecutors;
    private final java.util.concurrent.LinkedBlockingQueue mQueue;
    private final java.util.ArrayList mPreemptable;
    private java.util.concurrent.Executor mNonPreemptingExecutor;

    public void <init>()
    {
        com.android.documentsui.ProviderExecutor r0;
        java.util.concurrent.LinkedBlockingQueue $r1;
        java.util.ArrayList $r2;
        com.android.documentsui.ProviderExecutor$1 $r3;

        r0 := @this: com.android.documentsui.ProviderExecutor;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        $r1 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.LinkedBlockingQueue mQueue> = $r1;

        $r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable> = $r2;

        $r3 = new com.android.documentsui.ProviderExecutor$1;

        specialinvoke $r3.<com.android.documentsui.ProviderExecutor$1: void <init>(com.android.documentsui.ProviderExecutor)>(r0);

        r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.Executor mNonPreemptingExecutor> = $r3;

        return;
    }

    public static com.android.documentsui.ProviderExecutor forAuthority(java.lang.String)
    {
        java.lang.String r0, $r11;
        java.util.HashMap r1, $r4, $r5, $r12;
        com.android.documentsui.ProviderExecutor r2, $r7;
        java.lang.Throwable r3, $r14;
        java.lang.Object $r6;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @parameter0: java.lang.String;

        $r4 = <com.android.documentsui.ProviderExecutor: java.util.HashMap sExecutors>;

        r1 = $r4;

        entermonitor $r4;

     label1:
        $r5 = <com.android.documentsui.ProviderExecutor: java.util.HashMap sExecutors>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (com.android.documentsui.ProviderExecutor) $r6;

        if r2 != null goto label2;

        $r7 = new com.android.documentsui.ProviderExecutor;

        specialinvoke $r7.<com.android.documentsui.ProviderExecutor: void <init>()>();

        r2 = $r7;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ProviderExecutor: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.documentsui.ProviderExecutor: void setName(java.lang.String)>($r11);

        virtualinvoke r2.<com.android.documentsui.ProviderExecutor: void start()>();

        $r12 = <com.android.documentsui.ProviderExecutor: java.util.HashMap sExecutors>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2);

     label2:
        exitmonitor r1;

     label3:
        return r2;

     label4:
        $r14 := @caughtexception;

        r3 = $r14;

        exitmonitor r1;

     label5:
        throw r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void preempt()
    {
        com.android.documentsui.ProviderExecutor r0;
        java.util.ArrayList r1, $r6, $r7, $r8;
        java.util.Iterator r2;
        java.lang.ref.WeakReference r3;
        com.android.documentsui.ProviderExecutor$Preemptable r4;
        java.lang.Throwable r5, $r11;
        boolean $z0;
        java.lang.Object $r9, $r10;

        r0 := @this: com.android.documentsui.ProviderExecutor;

        $r6 = r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable>;

        r1 = $r6;

        entermonitor $r6;

     label1:
        $r7 = r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable>;

        r2 = virtualinvoke $r7.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.ref.WeakReference) $r9;

        $r10 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r4 = (com.android.documentsui.ProviderExecutor$Preemptable) $r10;

        if r4 == null goto label3;

        interfaceinvoke r4.<com.android.documentsui.ProviderExecutor$Preemptable: void preempt()>();

     label3:
        goto label2;

     label4:
        $r8 = r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable>;

        virtualinvoke $r8.<java.util.ArrayList: void clear()>();

        exitmonitor r1;

     label5:
        goto label8;

     label6:
        $r11 := @caughtexception;

        r5 = $r11;

        exitmonitor r1;

     label7:
        throw r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public transient void execute(android.os.AsyncTask, java.lang.Object[])
    {
        com.android.documentsui.ProviderExecutor r0;
        android.os.AsyncTask r1;
        java.lang.Object[] r2;
        java.util.ArrayList r3, $r6, $r9;
        java.lang.Throwable r4, $r12;
        boolean $z0;
        java.lang.ref.WeakReference $r7;
        com.android.documentsui.ProviderExecutor$Preemptable $r8;
        java.util.concurrent.Executor $r10;

        r0 := @this: com.android.documentsui.ProviderExecutor;

        r1 := @parameter0: android.os.AsyncTask;

        r2 := @parameter1: java.lang.Object[];

        $z0 = r1 instanceof com.android.documentsui.ProviderExecutor$Preemptable;

        if $z0 == 0 goto label6;

        $r6 = r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable>;

        r3 = $r6;

        entermonitor $r6;

     label1:
        $r9 = r0.<com.android.documentsui.ProviderExecutor: java.util.ArrayList mPreemptable>;

        $r7 = new java.lang.ref.WeakReference;

        $r8 = (com.android.documentsui.ProviderExecutor$Preemptable) r1;

        specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r8);

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        exitmonitor r3;

     label2:
        goto label5;

     label3:
        $r12 := @caughtexception;

        r4 = $r12;

        exitmonitor r3;

     label4:
        throw r4;

     label5:
        $r10 = r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.Executor mNonPreemptingExecutor>;

        virtualinvoke r1.<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r10, r2);

        goto label7;

     label6:
        virtualinvoke r1.<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>(r0, r2);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void execute(java.lang.Runnable)
    {
        com.android.documentsui.ProviderExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.LinkedBlockingQueue $r3;

        r0 := @this: com.android.documentsui.ProviderExecutor;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<com.android.documentsui.ProviderExecutor: void preempt()>();

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.LinkedBlockingQueue mQueue>;

        virtualinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void run()
    {
        com.android.documentsui.ProviderExecutor r0;
        java.lang.Runnable r1;
        java.util.concurrent.LinkedBlockingQueue $r2;
        java.lang.Object $r3;
        java.lang.InterruptedException $r4;

        r0 := @this: com.android.documentsui.ProviderExecutor;

     label1:
        $r2 = r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.LinkedBlockingQueue mQueue>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: java.lang.Object take()>();

        r1 = (java.lang.Runnable) $r3;

        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label2:
        goto label1;

     label3:
        $r4 := @caughtexception;

        goto label1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    static java.util.concurrent.LinkedBlockingQueue access$000(com.android.documentsui.ProviderExecutor)
    {
        com.android.documentsui.ProviderExecutor r0;
        java.util.concurrent.LinkedBlockingQueue $r1;

        r0 := @parameter0: com.android.documentsui.ProviderExecutor;

        $r1 = r0.<com.android.documentsui.ProviderExecutor: java.util.concurrent.LinkedBlockingQueue mQueue>;

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        <com.android.documentsui.ProviderExecutor: java.util.HashMap sExecutors> = $r0;

        return;
    }
}
