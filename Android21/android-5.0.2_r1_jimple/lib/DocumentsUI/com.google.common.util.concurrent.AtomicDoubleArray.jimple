public class com.google.common.util.concurrent.AtomicDoubleArray extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private transient java.util.concurrent.atomic.AtomicLongArray longs;

    public void <init>(int)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>(i0);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r1;

        return;
    }

    public void <init>(double[])
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        double[] r1;
        int i0, i1;
        long[] r2;
        java.util.concurrent.atomic.AtomicLongArray $r3;
        double $d0;
        long $l2;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        r1 := @parameter0: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        i0 = lengthof r1;

        r2 = newarray (long)[i0];

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r1[i1];

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        r2[i1] = $l2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r3 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicLongArray: void <init>(long[])>(r2);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r3;

        return;
    }

    public final int length()
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        int $i0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: int length()>();

        return $i0;
    }

    public final double get(int)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        long $l1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i0);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l1);

        return $d0;
    }

    public final void set(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0;
        long l1;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: void set(int,long)>(i0, l1);

        return;
    }

    public final void lazySet(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: void set(int,double)>(i0, d0);

        return;
    }

    public final double getAndSet(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0, $d1;
        long l1, $l2;
        java.util.concurrent.atomic.AtomicLongArray $r1;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long getAndSet(int,long)>(i0, l1);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l2);

        return $d1;
    }

    public final boolean compareAndSet(int, double, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0, d1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>(i0, $l1, $l2);

        return $z0;
    }

    public final boolean weakCompareAndSet(int, double, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0, d1;
        java.util.concurrent.atomic.AtomicLongArray $r1;
        long $l1, $l2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        d1 := @parameter2: double;

        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: boolean weakCompareAndSet(int,long,long)>(i0, $l1, $l2);

        return $z0;
    }

    public final double getAndAdd(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0, d1, d2;
        long l1, l2;
        java.util.concurrent.atomic.AtomicLongArray $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i0);

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l1);

        d2 = d1 + d0;

        l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        $r2 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>(i0, l1, l2);

        if $z0 == 0 goto label2;

        return d1;

     label2:
        goto label1;
    }

    public double addAndGet(int, double)
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0;
        double d0, d1, d2;
        long l1, l2;
        java.util.concurrent.atomic.AtomicLongArray $r1, $r2;
        boolean $z0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

     label1:
        $r1 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        l1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i0);

        d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l1);

        d2 = d1 + d0;

        l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d2);

        $r2 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $z0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: boolean compareAndSet(int,long,long)>(i0, l1, l2);

        if $z0 == 0 goto label2;

        return d2;

     label2:
        goto label1;
    }

    public java.lang.String toString()
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.StringBuilder r1, $r2, $r6, $r8;
        java.util.concurrent.atomic.AtomicLongArray $r4;
        long $l5;
        double $d0;
        java.lang.String $r9;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        $i2 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: int length()>();

        i0 = $i2 - 1;

        if i0 != -1 goto label1;

        return "[]";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i3 = i0 + 1;

        $i4 = 19 * $i3;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i4);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i1 = 0;

     label2:
        $r4 = r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs>;

        $l5 = virtualinvoke $r4.<java.util.concurrent.atomic.AtomicLongArray: long get(int)>(i1);

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l5);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        if i1 != i0 goto label3;

        $r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label3:
        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i1 = i1 + 1;

        goto label2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.io.ObjectOutputStream r1;
        int i0, i1;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        r1 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r1.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        i0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: int length()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeInt(int)>(i0);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: double get(int)>(i1);

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeDouble(double)>($d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        com.google.common.util.concurrent.AtomicDoubleArray r0;
        java.io.ObjectInputStream r1;
        int i0, i1;
        java.util.concurrent.atomic.AtomicLongArray $r2;
        double $d0;

        r0 := @this: com.google.common.util.concurrent.AtomicDoubleArray;

        r1 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>();

        i0 = virtualinvoke r1.<java.io.ObjectInputStream: int readInt()>();

        $r2 = new java.util.concurrent.atomic.AtomicLongArray;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicLongArray: void <init>(int)>(i0);

        r0.<com.google.common.util.concurrent.AtomicDoubleArray: java.util.concurrent.atomic.AtomicLongArray longs> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = virtualinvoke r1.<java.io.ObjectInputStream: double readDouble()>();

        virtualinvoke r0.<com.google.common.util.concurrent.AtomicDoubleArray: void set(int,double)>(i1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.google.common.util.concurrent.AtomicDoubleArray: long serialVersionUID> = 0L;

        return;
    }
}
