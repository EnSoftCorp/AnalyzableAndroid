public final class com.google.common.util.concurrent.Uninterruptibles extends java.lang.Object
{

    public static void awaitUninterruptibly(java.util.concurrent.CountDownLatch)
    {
        java.util.concurrent.CountDownLatch r0;
        boolean z0;
        java.lang.Throwable r2, $r4;
        java.lang.Thread $r3, $r5;
        java.lang.InterruptedException $r6;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        z0 = 0;

     label1:
        virtualinvoke r0.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        if z0 == 0 goto label3;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        z0 = 1;

        goto label1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        if z0 == 0 goto label7;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label7:
        throw r2;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static boolean awaitUninterruptibly(java.util.concurrent.CountDownLatch, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.CountDownLatch r0;
        long l0, l1, l2, $l3, $l4;
        java.util.concurrent.TimeUnit r1, $r3;
        boolean z0, z1;
        java.lang.Throwable r2, $r6;
        java.lang.Thread $r4, $r5;
        java.lang.InterruptedException $r7;

        r0 := @parameter0: java.util.concurrent.CountDownLatch;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label1:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l3 + l1;

     label2:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        z1 = virtualinvoke r0.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l1, $r3);

     label3:
        if z0 == 0 goto label4;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label4:
        return z1;

     label5:
        $r7 := @caughtexception;

        z0 = 1;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l2 - $l4;

        goto label2;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        if z0 == 0 goto label8;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label8:
        throw r2;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public static void joinUninterruptibly(java.lang.Thread)
    {
        java.lang.Thread r0, $r3, $r5;
        boolean z0;
        java.lang.Throwable r2, $r4;
        java.lang.InterruptedException $r6;

        r0 := @parameter0: java.lang.Thread;

        z0 = 0;

     label1:
        virtualinvoke r0.<java.lang.Thread: void join()>();

     label2:
        if z0 == 0 goto label3;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        z0 = 1;

        goto label1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        if z0 == 0 goto label7;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label7:
        throw r2;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future) throws java.util.concurrent.ExecutionException
    {
        java.util.concurrent.Future r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.lang.Thread $r3, $r5;
        java.lang.InterruptedException $r6;

        r0 := @parameter0: java.util.concurrent.Future;

        z0 = 0;

     label1:
        r1 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        if z0 == 0 goto label3;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label3:
        return r1;

     label4:
        $r6 := @caughtexception;

        z0 = 1;

        goto label1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        if z0 == 0 goto label7;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label7:
        throw r2;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static java.lang.Object getUninterruptibly(java.util.concurrent.Future, long, java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.Future r0;
        long l0, l1, l2, $l3, $l4;
        java.util.concurrent.TimeUnit r1, $r4;
        boolean z0;
        java.lang.Object r2;
        java.lang.Throwable r3, $r7;
        java.lang.Thread $r5, $r6;
        java.lang.InterruptedException $r8;

        r0 := @parameter0: java.util.concurrent.Future;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        z0 = 0;

     label1:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l3 + l1;

     label2:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        r2 = interfaceinvoke r0.<java.util.concurrent.Future: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(l1, $r4);

     label3:
        if z0 == 0 goto label4;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label4:
        return r2;

     label5:
        $r8 := @caughtexception;

        z0 = 1;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l2 - $l4;

        goto label2;

     label6:
        $r7 := @caughtexception;

        r3 = $r7;

     label7:
        if z0 == 0 goto label8;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label8:
        throw r3;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public static void joinUninterruptibly(java.lang.Thread, long, java.util.concurrent.TimeUnit)
    {
        java.lang.Thread r0, $r6, $r8;
        long l0, l1, l2, $l3, $l4;
        java.util.concurrent.TimeUnit r1, $r5;
        boolean z0;
        java.lang.Throwable r3, $r9;
        java.lang.InterruptedException $r7;

        r0 := @parameter0: java.lang.Thread;

        l0 := @parameter1: long;

        r1 := @parameter2: java.util.concurrent.TimeUnit;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z0 = 0;

     label1:
        l1 = virtualinvoke r1.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l3 + l1;

     label2:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r5.<java.util.concurrent.TimeUnit: void timedJoin(java.lang.Thread,long)>(r0, l1);

     label3:
        if z0 == 0 goto label4;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        z0 = 1;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l2 - $l4;

        goto label2;

     label6:
        $r9 := @caughtexception;

        r3 = $r9;

     label7:
        if z0 == 0 goto label8;

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void interrupt()>();

     label8:
        throw r3;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public static java.lang.Object takeUninterruptibly(java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.BlockingQueue r0;
        boolean z0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.lang.Thread $r3, $r5;
        java.lang.InterruptedException $r6;

        r0 := @parameter0: java.util.concurrent.BlockingQueue;

        z0 = 0;

     label1:
        r1 = interfaceinvoke r0.<java.util.concurrent.BlockingQueue: java.lang.Object take()>();

     label2:
        if z0 == 0 goto label3;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label3:
        return r1;

     label4:
        $r6 := @caughtexception;

        z0 = 1;

        goto label1;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        if z0 == 0 goto label7;

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r5.<java.lang.Thread: void interrupt()>();

     label7:
        throw r2;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static void putUninterruptibly(java.util.concurrent.BlockingQueue, java.lang.Object)
    {
        java.util.concurrent.BlockingQueue r0;
        java.lang.Object r1;
        boolean z0;
        java.lang.Throwable r3, $r6;
        java.lang.Thread $r4, $r7;
        java.lang.InterruptedException $r5;

        r0 := @parameter0: java.util.concurrent.BlockingQueue;

        r1 := @parameter1: java.lang.Object;

        z0 = 0;

     label1:
        interfaceinvoke r0.<java.util.concurrent.BlockingQueue: void put(java.lang.Object)>(r1);

     label2:
        if z0 == 0 goto label3;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        z0 = 1;

        goto label1;

     label5:
        $r6 := @caughtexception;

        r3 = $r6;

     label6:
        if z0 == 0 goto label7;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

     label7:
        throw r3;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static void sleepUninterruptibly(long, java.util.concurrent.TimeUnit)
    {
        long l0, l1, l2, $l3, $l4;
        java.util.concurrent.TimeUnit r0, $r3;
        boolean z0;
        java.lang.Throwable r2, $r5;
        java.lang.Thread $r4, $r6;
        java.lang.InterruptedException $r7;

        l0 := @parameter0: long;

        r0 := @parameter1: java.util.concurrent.TimeUnit;

        z0 = 0;

     label1:
        l1 = virtualinvoke r0.<java.util.concurrent.TimeUnit: long toNanos(long)>(l0);

        $l3 = staticinvoke <java.lang.System: long nanoTime()>();

        l2 = $l3 + l1;

     label2:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>;

        virtualinvoke $r3.<java.util.concurrent.TimeUnit: void sleep(long)>(l1);

     label3:
        if z0 == 0 goto label4;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        z0 = 1;

        $l4 = staticinvoke <java.lang.System: long nanoTime()>();

        l1 = l2 - $l4;

        goto label2;

     label6:
        $r5 := @caughtexception;

        r2 = $r5;

     label7:
        if z0 == 0 goto label8;

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r6.<java.lang.Thread: void interrupt()>();

     label8:
        throw r2;

        catch java.lang.InterruptedException from label2 to label3 with label5;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private void <init>()
    {
        com.google.common.util.concurrent.Uninterruptibles r0;

        r0 := @this: com.google.common.util.concurrent.Uninterruptibles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }
}
