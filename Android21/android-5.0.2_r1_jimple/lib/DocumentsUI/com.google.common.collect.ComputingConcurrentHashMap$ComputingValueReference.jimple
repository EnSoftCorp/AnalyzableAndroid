final class com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference extends java.lang.Object implements com.google.common.collect.MapMakerInternalMap$ValueReference
{
    final com.google.common.base.Function computingFunction;
    volatile com.google.common.collect.MapMakerInternalMap$ValueReference computedReference;

    public void <init>(com.google.common.base.Function)
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;
        com.google.common.base.Function r1;
        com.google.common.collect.MapMakerInternalMap$ValueReference $r2;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: com.google.common.base.Function;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ValueReference unset()>();

        r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference> = $r2;

        r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.base.Function computingFunction> = r1;

        return;
    }

    public java.lang.Object get()
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        return null;
    }

    public com.google.common.collect.MapMakerInternalMap$ReferenceEntry getEntry()
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        return null;
    }

    public com.google.common.collect.MapMakerInternalMap$ValueReference copyFor(java.lang.ref.ReferenceQueue, com.google.common.collect.MapMakerInternalMap$ReferenceEntry)
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;
        java.lang.ref.ReferenceQueue r1;
        com.google.common.collect.MapMakerInternalMap$ReferenceEntry r2;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: java.lang.ref.ReferenceQueue;

        r2 := @parameter1: com.google.common.collect.MapMakerInternalMap$ReferenceEntry;

        return r0;
    }

    public boolean isComputingReference()
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        return 1;
    }

    public java.lang.Object waitForValue() throws java.util.concurrent.ExecutionException
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0, r1;
        boolean z0;
        java.lang.Throwable r3, r4, $r13, $r16;
        com.google.common.collect.MapMakerInternalMap$ValueReference $r5, $r6, $r7, $r10, $r11;
        java.lang.Object $r8;
        java.lang.Thread $r12, $r15;
        java.lang.InterruptedException $r14;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        $r6 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference>;

        $r5 = <com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ValueReference UNSET>;

        if $r6 != $r5 goto label14;

        z0 = 0;

     label01:
        r1 = r0;

        entermonitor r0;

     label02:
        $r11 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference>;

        $r10 = <com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ValueReference UNSET>;

        if $r11 != $r10 goto label06;

     label03:
        virtualinvoke r0.<java.lang.Object: void wait()>();

     label04:
        goto label02;

     label05:
        $r14 := @caughtexception;

        z0 = 1;

        goto label02;

     label06:
        exitmonitor r1;

     label07:
        goto label10;

     label08:
        $r13 := @caughtexception;

        r3 = $r13;

        exitmonitor r1;

     label09:
        throw r3;

     label10:
        if z0 == 0 goto label14;

        $r12 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r12.<java.lang.Thread: void interrupt()>();

        goto label14;

     label11:
        $r16 := @caughtexception;

        r4 = $r16;

     label12:
        if z0 == 0 goto label13;

        $r15 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r15.<java.lang.Thread: void interrupt()>();

     label13:
        throw r4;

     label14:
        $r7 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference>;

        $r8 = interfaceinvoke $r7.<com.google.common.collect.MapMakerInternalMap$ValueReference: java.lang.Object waitForValue()>();

        return $r8;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public void clear(com.google.common.collect.MapMakerInternalMap$ValueReference)
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;
        com.google.common.collect.MapMakerInternalMap$ValueReference r1;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: com.google.common.collect.MapMakerInternalMap$ValueReference;

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference)>(r1);

        return;
    }

    java.lang.Object compute(java.lang.Object, int) throws java.util.concurrent.ExecutionException
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0;
        java.lang.Object r1, r2;
        int i0;
        java.lang.Throwable r3, $r6;
        com.google.common.base.Function $r4;
        com.google.common.collect.ComputingConcurrentHashMap$ComputedReference $r5;
        com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference $r7;
        java.util.concurrent.ExecutionException $r8;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

     label1:
        $r4 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.base.Function computingFunction>;

        r2 = interfaceinvoke $r4.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference;

        specialinvoke $r7.<com.google.common.collect.ComputingConcurrentHashMap$ComputationExceptionReference: void <init>(java.lang.Throwable)>(r3);

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference)>($r7);

        $r8 = new java.util.concurrent.ExecutionException;

        specialinvoke $r8.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>(r3);

        throw $r8;

     label4:
        $r5 = new com.google.common.collect.ComputingConcurrentHashMap$ComputedReference;

        specialinvoke $r5.<com.google.common.collect.ComputingConcurrentHashMap$ComputedReference: void <init>(java.lang.Object)>(r2);

        virtualinvoke r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference)>($r5);

        return r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setValueReference(com.google.common.collect.MapMakerInternalMap$ValueReference)
    {
        com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference r0, r2;
        com.google.common.collect.MapMakerInternalMap$ValueReference r1, $r5, $r6;
        java.lang.Throwable r3, $r7;

        r0 := @this: com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r1 := @parameter0: com.google.common.collect.MapMakerInternalMap$ValueReference;

        r2 = r0;

        entermonitor r0;

     label1:
        $r6 = r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference>;

        $r5 = <com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$ValueReference UNSET>;

        if $r6 != $r5 goto label2;

        r0.<com.google.common.collect.ComputingConcurrentHashMap$ComputingValueReference: com.google.common.collect.MapMakerInternalMap$ValueReference computedReference> = r1;

        virtualinvoke r0.<java.lang.Object: void notifyAll()>();

     label2:
        exitmonitor r2;

     label3:
        goto label6;

     label4:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
