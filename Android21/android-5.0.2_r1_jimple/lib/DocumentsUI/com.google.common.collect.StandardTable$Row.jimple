class com.google.common.collect.StandardTable$Row extends java.util.AbstractMap
{
    final java.lang.Object rowKey;
    java.util.Map backingRowMap;
    java.util.Set keySet;
    java.util.Set entrySet;
    final com.google.common.collect.StandardTable this$0;

    void <init>(com.google.common.collect.StandardTable, java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        com.google.common.collect.StandardTable r1;
        java.lang.Object r2, $r3;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 := @parameter0: com.google.common.collect.StandardTable;

        r2 := @parameter1: java.lang.Object;

        r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0> = r1;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $r3 = staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey> = $r3;

        return;
    }

    java.util.Map backingRowMap()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map $r1, $r2, $r3, $r6;
        boolean $z0, $z1;
        com.google.common.collect.StandardTable $r4;
        java.lang.Object $r5;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        if $r1 == null goto label1;

        $r3 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r6 = $r4.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r5 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

     label1:
        $r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map computeBackingRowMap()>();

        r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap> = $r2;

        goto label3;

     label2:
        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

     label3:
        return $r2;
    }

    java.util.Map computeBackingRowMap()
    {
        com.google.common.collect.StandardTable$Row r0;
        com.google.common.collect.StandardTable $r1;
        java.lang.Object $r2, $r4;
        java.util.Map $r3, $r5;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r3 = $r1.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.util.Map) $r4;

        return $r5;
    }

    void maintainEmptyInvariant()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map $r1, $r2, $r5;
        boolean $z0;
        com.google.common.collect.StandardTable $r3;
        java.lang.Object $r4;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        $r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if $r1 == null goto label1;

        $r2 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r5 = $r3.<com.google.common.collect.StandardTable: java.util.Map backingMap>;

        $r4 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap> = null;

     label1:
        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object r1;
        java.util.Map r2;
        boolean $z0, $z1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if r1 == null goto label1;

        if r2 == null goto label1;

        $z0 = staticinvoke <com.google.common.collect.Maps: boolean safeContainsKey(java.util.Map,java.lang.Object)>(r2, r1);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object r1, $r3;
        java.util.Map r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 := @parameter0: java.lang.Object;

        r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if r1 == null goto label1;

        if r2 == null goto label1;

        $r3 = staticinvoke <com.google.common.collect.Maps: java.lang.Object safeGet(java.util.Map,java.lang.Object)>(r2, r1);

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object r1, r2, $r6, $r8, $r11;
        java.util.Map $r5, $r9, $r10;
        com.google.common.collect.StandardTable $r7;
        boolean $z0;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r5 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        if $r5 == null goto label1;

        $r9 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $z0 = interfaceinvoke $r9.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r10 = r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r11;

     label1:
        $r7 = r0.<com.google.common.collect.StandardTable$Row: com.google.common.collect.StandardTable this$0>;

        $r6 = r0.<com.google.common.collect.StandardTable$Row: java.lang.Object rowKey>;

        $r8 = virtualinvoke $r7.<com.google.common.collect.StandardTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r6, r1, r2);

        return $r8;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.common.collect.StandardTable$Row r0;
        java.lang.Object r1, r3;
        java.util.Map r2;
        java.lang.ClassCastException $r4;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 := @parameter0: java.lang.Object;

     label1:
        r2 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if r2 != null goto label3;

     label2:
        return null;

     label3:
        r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        virtualinvoke r0.<com.google.common.collect.StandardTable$Row: void maintainEmptyInvariant()>();

     label4:
        return r3;

     label5:
        $r4 := @caughtexception;

        return null;

        catch java.lang.ClassCastException from label1 to label2 with label5;
        catch java.lang.ClassCastException from label3 to label4 with label5;
    }

    public void clear()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Map r1;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 = virtualinvoke r0.<com.google.common.collect.StandardTable$Row: java.util.Map backingRowMap()>();

        if r1 == null goto label1;

        interfaceinvoke r1.<java.util.Map: void clear()>();

     label1:
        virtualinvoke r0.<com.google.common.collect.StandardTable$Row: void maintainEmptyInvariant()>();

        return;
    }

    public java.util.Set keySet()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Set r1;
        com.google.common.collect.StandardTable$Row$1 $r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 = r0.<com.google.common.collect.StandardTable$Row: java.util.Set keySet>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.StandardTable$Row$1;

        specialinvoke $r2.<com.google.common.collect.StandardTable$Row$1: void <init>(com.google.common.collect.StandardTable$Row)>(r0);

        r0.<com.google.common.collect.StandardTable$Row: java.util.Set keySet> = $r2;

        return $r2;

     label1:
        return r1;
    }

    public java.util.Set entrySet()
    {
        com.google.common.collect.StandardTable$Row r0;
        java.util.Set r1;
        com.google.common.collect.StandardTable$Row$RowEntrySet $r2;

        r0 := @this: com.google.common.collect.StandardTable$Row;

        r1 = r0.<com.google.common.collect.StandardTable$Row: java.util.Set entrySet>;

        if r1 != null goto label1;

        $r2 = new com.google.common.collect.StandardTable$Row$RowEntrySet;

        specialinvoke $r2.<com.google.common.collect.StandardTable$Row$RowEntrySet: void <init>(com.google.common.collect.StandardTable$Row,com.google.common.collect.StandardTable$1)>(r0, null);

        r0.<com.google.common.collect.StandardTable$Row: java.util.Set entrySet> = $r2;

        return $r2;

     label1:
        return r1;
    }
}
