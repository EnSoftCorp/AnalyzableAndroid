abstract class com.google.common.hash.AbstractNonStreamingHashFunction extends java.lang.Object implements com.google.common.hash.HashFunction
{

    void <init>()
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.google.common.hash.Hasher newHasher()
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher $r1;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        $r1 = new com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        specialinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: void <init>(com.google.common.hash.AbstractNonStreamingHashFunction,int)>(r0, 32);

        return $r1;
    }

    public com.google.common.hash.Hasher newHasher(int)
    {
        com.google.common.hash.AbstractNonStreamingHashFunction r0;
        int i0;
        com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher $r1;
        boolean $z0;

        r0 := @this: com.google.common.hash.AbstractNonStreamingHashFunction;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z0);

        $r1 = new com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher;

        specialinvoke $r1.<com.google.common.hash.AbstractNonStreamingHashFunction$BufferingHasher: void <init>(com.google.common.hash.AbstractNonStreamingHashFunction,int)>(r0, i0);

        return $r1;
    }
}
