Permission:android.permission.READ_CONTACTS
14 Callers:
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.widget.QuickContactBadge: void onClick(android.view.View)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)>
Permission:android.permission.INTERNET
19 Callers:
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<java.net.URL: java.lang.Object getContent()>
<java.net.Socket: void <init>(int)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<java.net.ServerSocket: void <init>(int)>
<java.net.URL: java.net.URLConnection openConnection()>
<java.net.URLConnection: void connect()>
<java.net.DatagramSocket: void <init>(int)>
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)>
<java.net.HttpURLConnection: void connect()>
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)>
<java.net.ServerSocket: void bind(java.net.SocketAddress)>
<java.net.URLConnection: java.io.InputStream getInputStream()>
<java.net.MulticastSocket: void <init>(int)>
<java.net.HttpURLConnection: void <init>(int)>
<java.net.URL: java.io.InputStream openStream()>
<java.net.NetworkInterface: void <init>(int)>
Permission:android.permission.WRITE_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)>
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)>
Permission:android.permission.WRITE_SETTINGS
135 Callers:
<android.widget.MultiAutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)>
<android.widget.Switch: boolean performLongClick()>
<android.widget.RadioGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<android.app.UiAutomation: void disconnect()>
<android.widget.TextSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TabWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)>
<android.media.Ringtone: void play()>
<android.widget.MultiAutoCompleteTextView: boolean performLongClick()>
<android.app.UiAutomation: void connect()>
<android.test.InstrumentationTestRunner: android.app.UiAutomation getUiAutomation()>
<android.widget.TableLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.ViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RatingBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.StackView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)>
<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)>
<android.accessibilityservice.AccessibilityService: java.util.List getWindows()>
<android.widget.Spinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.GridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CalendarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.DialerFilter: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.gesture.GestureOverlayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ImageButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CheckedTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CheckedTextView: boolean performLongClick()>
<android.widget.CompoundButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.Ringtone: void setUri(android.net.Uri)>
<android.widget.TextClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.SeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.GridLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>
<android.media.MediaPlayer: void deselectTrack(int)>
<android.widget.QuickContactBadge: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)>
<android.widget.ToggleButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RadioButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)>
<android.view.TextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AutoCompleteTextView: boolean performLongClick()>
<android.widget.AbsoluteLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.appwidget.AppWidgetHostView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Gallery: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<android.widget.AbsSeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Chronometer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Button: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.inputmethodservice.KeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.inputmethodservice.ExtractEditText: boolean performLongClick()>
<android.widget.ViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.inputmethodservice.ExtractEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AnalogClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TextView: boolean performLongClick()>
<android.widget.LinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)>
<android.widget.DigitalClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ToggleButton: boolean performLongClick()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()>
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()>
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>
<android.widget.AdapterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)>
<android.widget.AdapterViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.app.FragmentBreadCrumbs: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ViewSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)>
<android.widget.ExpandableListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CheckBox: boolean performLongClick()>
<android.test.InstrumentationTestRunner: void onStart()>
<android.widget.VideoView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void selectTrack(int)>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)>
<android.widget.TwoLineListItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.MediaController: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AbsListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RadioButton: boolean performLongClick()>
<android.widget.Chronometer: boolean performLongClick()>
<android.widget.ImageSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.accessibility.CaptioningManager: void registerObserver(java.lang.String)>
<android.media.MediaPlayer: void prepare()>
<android.widget.CheckBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.SurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)>
<android.widget.Switch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.app.MediaRouteButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Space: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Toolbar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.NumberPicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)>
<android.widget.ZoomButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.AsyncPlayer: void stop()>
<android.widget.AutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.Ringtone: void setStreamType(int)>
<android.widget.EditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.DatePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.tv.TvView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.ViewStub: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.Button: boolean performLongClick()>
<android.widget.AbsSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.app.UiAutomation: java.util.List getWindows()>
<android.app.Instrumentation: void finish(int,android.os.Bundle)>
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<android.widget.DigitalClock: boolean performLongClick()>
<android.webkit.WebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)>
<android.widget.ActionMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<android.widget.TextClock: boolean performLongClick()>
<android.widget.SlidingDrawer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.opengl.GLSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.FrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.RelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.SearchView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.CompoundButton: boolean performLongClick()>
<android.widget.HorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TableRow: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.EditText: boolean performLongClick()>
<android.widget.TextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)>
<android.widget.ListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ZoomControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TimePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.ProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.AdapterViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.widget.TabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)>
Permission:android.permission.WRITE_CONTACTS
16 Callers:
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)>
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)>
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)>
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)>
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)>
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])>
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)>
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)>
<android.provider.ContactsContract$PinnedPositions: void pin(android.content.ContentResolver,long,int)>
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
7 Callers:
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void clearSearches(android.content.ContentResolver)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
Permission:android.permission.WRITE_CALENDAR
1 Callers:
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)>
Permission:android.permission.READ_CALL_LOG
1 Callers:
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)>
Permission:android.permission.CAMERA
2 Callers:
<android.media.MediaRecorder: void setVideoSource(int)>
<android.hardware.Camera: android.hardware.Camera open()>
Permission:android.permission.READ_CALENDAR
5 Callers:
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)>
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])>
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)>
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])>
Permission:android.permission.READ_SMS
4 Callers:
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)>
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])>
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
8 Callers:
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)>
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)>
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)>
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)>
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)>
<android.provider.Browser: void clearHistory(android.content.ContentResolver)>
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)>
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
2 Callers:
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)>
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)>
Permission:android.permission.RECORD_AUDIO
2 Callers:
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.media.MediaRecorder: void setAudioSource(int)>
Permission:android.permission.WRITE_SMS
4 Callers:
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
Permission:android.permission.MODIFY_AUDIO_SETTINGS
9 Callers:
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)>
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)>
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
