Permission:android.permission.WRITE_CONTACTS
25 Callers:
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,long)> (2)
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$ContactMethods: void addPostalLocation(android.content.Context,long,double,double)> ()
<android.provider.ContactsContract$ProfileSyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.ContactsContract$Directory: void notifyDirectoryChange(android.content.ContentResolver)> ()
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<android.provider.Contacts$People: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.ContactsContract$Contacts: void markAsContacted(android.content.ContentResolver,long)> ()
<android.provider.CallLog$Calls: void updateNormalizedNumber(android.content.Context,android.content.ContentResolver,java.lang.String,java.lang.String)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long)> ()
<android.provider.Contacts$Settings: void setSetting(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String)> ()
<android.provider.ContactsContract$PinnedPositions: void pin(android.content.ContentResolver,long,int)> ()
<android.provider.ContactsContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.CallLog$Calls: void updateDataUsageStatForData(android.content.ContentResolver,java.lang.String)> (1)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (4)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:com.android.browser.permission.WRITE_HISTORY_BOOKMARKS
11 Callers:
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<android.provider.Browser: void addSearchUrl(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (1)
<android.provider.BrowserContract$SyncState: android.content.ContentProviderOperation newSetOperation(android.accounts.Account,byte[])> ()
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> ()
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<android.provider.Browser: void deleteFromHistory(android.content.ContentResolver,java.lang.String)> ()
<android.provider.Browser: void clearSearches(android.content.ContentResolver)> ()
<android.provider.BrowserContract$Settings: void setSyncEnabled(android.content.Context,boolean)> ()
Permission:android.permission.READ_CALL_LOG
1 Callers:
<android.provider.CallLog$Calls: java.lang.String getLastOutgoingCall(android.content.Context)> ()
Permission:android.permission.WRITE_CALENDAR
2 Callers:
<android.provider.CalendarContract$CalendarAlerts: android.net.Uri insert(android.content.ContentResolver,long,long,long,long,int)> ()
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.INTERNET
45 Callers:
<android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)> ()
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,boolean)> (1)
<android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)> ()
<android.provider.Downloads: void removeAllDownloadsByPackage(android.content.Context,java.lang.String,java.lang.String)> (1)
<com.android.server.BootReceiver: void removeOldUpdatePackages(android.content.Context)> (1)
<com.android.server.BootReceiver: void access$100(com.android.server.BootReceiver,android.content.Context)> (1)
<com.android.server.BootReceiver$1: void run()> (2)
<com.android.server.BootReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)> ()
<java.net.DatagramSocket: void <init>(int)> ()
<java.net.HttpURLConnection: void <init>(int)> ()
<java.net.HttpURLConnection: void connect()> (1)
<com.squareup.okhttp.internal.http.DelegatingHttpsURLConnection: void connect()> (2)
<com.squareup.okhttp.internal.http.HttpsURLConnectionImpl: void connect()> (1)
<com.squareup.okhttp.internal.http.JavaApiConverter$CacheHttpsURLConnection: void connect()> (1)
<java.net.MulticastSocket: void <init>(int)> ()
<java.net.NetworkInterface: void <init>(int)> ()
<java.net.ServerSocket: void <init>(int)> ()
<java.net.ServerSocket: void bind(java.net.SocketAddress)> (1)
<com.android.internal.telephony.test.ModelInterpreter: void <init>(java.net.InetSocketAddress)> ()
<java.net.Socket: void <init>(int)> ()
<java.net.URL: java.lang.Object getContent()> ()
<java.net.URL: java.net.URLConnection openConnection()> (1)
<android.media.MediaHTTPConnection: void seekTo(long)> (3)
<android.media.MediaHTTPConnection: int readAt(long,byte[],int)> ()
<android.media.MediaHTTPConnection: java.lang.String getMIMEType()> (2)
<android.media.MediaHTTPConnection: long getSize()> (2)
<android.media.IMediaHTTPConnection$Stub$Proxy: java.lang.String getMIMEType()> ()
<android.media.IMediaHTTPConnection$Stub: java.lang.String getMIMEType()> (2)
<android.media.IMediaHTTPConnection$Stub$Proxy: long getSize()> ()
<android.media.IMediaHTTPConnection$Stub: long getSize()> (2)
<android.media.IMediaHTTPConnection: java.lang.String getMIMEType()> ()
<android.media.IMediaHTTPConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.media.IMediaHTTPConnection: long getSize()> ()
<android.media.MediaHTTPConnection: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<java.net.URL: java.io.InputStream openStream()> ()
<java.net.URLConnection: void connect()> ()
<java.net.URLConnection: java.io.InputStream getInputStream()> (2)
<com.android.server.connectivity.PacManager: java.lang.String get(android.net.Uri)> (1)
<com.squareup.okhttp.internal.http.JavaApiConverter: com.squareup.okhttp.Response createOkResponse(java.net.URI,java.net.URLConnection)> (1)
<com.android.server.connectivity.PacManager: java.lang.String access$200(android.net.Uri)> (1)
<com.squareup.okhttp.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)> (1)
<com.android.server.connectivity.PacManager$1: void run()> (1)
<org.apache.http.impl.client.DefaultHttpClient: void <init>(int)> ()
<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> ()
Permission:android.permission.READ_CONTACTS
40 Callers:
<android.widget.QuickContactBadge: void onClick(android.view.View)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)> (1)
<android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)> ()
<android.provider.ContactsContract$Contacts$AggregationSuggestions$Builder: android.net.Uri build()> ()
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long,boolean)> (1)
<android.provider.CallLog$Calls: android.net.Uri addCall(com.android.internal.telephony.CallerInfo,android.content.Context,java.lang.String,int,int,int,android.telecom.PhoneAccountHandle,long,int,java.lang.Long)> ()
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)> (4)
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$Data: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.provider.ContactsContract$RawContacts: android.net.Uri getContactLookupUri(android.content.ContentResolver,android.net.Uri)> ()
<android.widget.QuickContactBadge$QueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo doSecondaryLookupIfNecessary(android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfo)> (2)
<com.android.internal.telephony.CallerInfoAsyncQuery$CallerInfoAsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String,long)> (1)
<com.android.internal.telephony.CallerInfo: com.android.internal.telephony.CallerInfo getCallerInfo(android.content.Context,java.lang.String)> ()
<com.android.server.notification.ValidateNotificationPeople: com.android.server.notification.ValidateNotificationPeople$LookupResult resolveEmailContact(android.content.Context,java.lang.String)> (1)
<com.android.server.notification.ValidateNotificationPeople: com.android.server.notification.ValidateNotificationPeople$LookupResult access$600(com.android.server.notification.ValidateNotificationPeople,android.content.Context,java.lang.String)> (1)
<com.android.server.notification.ValidateNotificationPeople$PeopleRankingReconsideration: void work()> (2)
<com.android.server.notification.RankingReconsideration: void work()> (1)
<com.android.server.notification.ValidateNotificationPeople$2: void run()> (1)
<com.android.server.notification.RankingReconsideration: void run()> (4)
<com.android.server.notification.NotificationIntrusivenessExtractor$1: void run()> (1)
<com.android.server.notification.NotificationManagerService: void handleRankingReconsideration(android.os.Message)> (1)
<com.android.server.notification.ValidateNotificationPeople$PeopleRankingReconsideration: void run()> (1)
<com.android.server.notification.NotificationManagerService: void access$4000(com.android.server.notification.NotificationManagerService,android.os.Message)> (1)
<com.android.server.notification.ValidateNotificationPeople: com.android.server.notification.ValidateNotificationPeople$LookupResult resolvePhoneContact(android.content.Context,java.lang.String)> (1)
<com.android.server.notification.ValidateNotificationPeople: com.android.server.notification.ValidateNotificationPeople$LookupResult access$500(com.android.server.notification.ValidateNotificationPeople,android.content.Context,java.lang.String)> (1)
<android.provider.Contacts$People: android.database.Cursor queryGroups(android.content.ContentResolver,long)> ()
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)> (1)
<android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)> ()
<android.provider.Contacts$People: android.net.Uri addToGroup(android.content.ContentResolver,long,java.lang.String)> ()
<android.provider.Contacts$Settings: java.lang.String getSetting(android.content.ContentResolver,java.lang.String,java.lang.String)> ()
<android.provider.Contacts$People: long tryGetMyContactsGroupId(android.content.ContentResolver)> (1)
<android.provider.Contacts$People: android.net.Uri addToMyContactsGroup(android.content.ContentResolver,long)> (1)
<android.provider.Contacts$People: android.net.Uri createPersonInMyContactsGroup(android.content.ContentResolver,android.content.ContentValues)> ()
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object,long)> (1)
<com.android.internal.telephony.CallerInfoAsyncQuery: com.android.internal.telephony.CallerInfoAsyncQuery startQuery(int,android.content.Context,java.lang.String,com.android.internal.telephony.CallerInfoAsyncQuery$OnQueryCompleteListener,java.lang.Object)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getContactUri(int)> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getUriToQuery()> ()
<com.android.contacts.ContactsListActivity: android.net.Uri getSelectedUri(int)> ()
Permission:android.permission.WRITE_USER_DICTIONARY
2 Callers:
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,java.lang.String,java.util.Locale)> (1)
<android.provider.UserDictionary$Words: void addWord(android.content.Context,java.lang.String,int,int)> ()
Permission:android.permission.WRITE_SETTINGS
1753 Callers:
<android.provider.Settings$System: android.net.Uri getUriFor(java.lang.String)> (13)
<android.media.AudioService$SettingsObserver: void <init>(android.media.AudioService)> (1)
<android.preference.SeekBarVolumizer: void <init>(android.content.Context,int,android.net.Uri,android.preference.SeekBarVolumizer$Callback)> (1)
<android.widget.DateTimeView: void registerReceivers()> (1)
<com.android.commands.settings.SettingsCmd: int deleteForUser(android.content.IContentProvider,int,java.lang.String,java.lang.String)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()> (1)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener,int)> (1)
<com.android.server.am.CoreSettingsObserver: void beginObserveCoreSettings()> (1)
<com.android.server.input.InputManagerService: void registerPointerSpeedSettingObserver()> (1)
<com.android.server.input.InputManagerService: void registerShowTouchesSettingObserver()> (1)
<com.android.server.notification.NotificationManagerService$SettingsObserver: void <init>(com.android.server.notification.NotificationManagerService,android.os.Handler)> (1)
<com.android.server.power.PowerManagerService: void systemReady(com.android.internal.app.IAppOpsService)> (1)
<com.android.server.VibratorService: void systemReady()> (1)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<android.preference.VolumePreference: void onBindDialogView(android.view.View)> (2)
<android.widget.DateTimeView: void onAttachedToWindow()> (2)
<com.android.commands.settings.SettingsCmd: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.view.RotationPolicy: void registerRotationPolicyListener(android.content.Context,com.android.internal.view.RotationPolicy$RotationPolicyListener)> ()
<com.android.server.am.CoreSettingsObserver: void <init>(com.android.server.am.ActivityManagerService)> (1)
<com.android.server.input.InputManagerService: void start()> (1)
<com.android.server.notification.NotificationManagerService: void onStart()> (1)
<com.android.server.SystemServer: void startOtherServices()> (1)
<com.android.commands.settings.SettingsCmd: void main(java.lang.String[])> ()
<android.view.WindowManagerPolicy: void init(android.content.Context,android.view.IWindowManager,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.server.am.ActivityManagerService: void installSystemProviders()> (1)
<com.android.server.SystemService: void onStart()> (1)
<com.android.server.SystemServer: void run()> (1)
<com.android.server.wm.WindowManagerService$3: void run()> (1)
<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.Class)> (4)
<com.android.server.SystemServer: void main(java.lang.String[])> ()
<com.android.server.SystemServer: void startBootstrapServices()> (1)
<com.android.server.SystemServer: void startCoreServices()> (1)
<com.android.server.SystemServiceManager: com.android.server.SystemService startService(java.lang.String)> (1)
<android.provider.Settings$Bookmarks: android.net.Uri add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)> ()
<android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)> (30)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (3)
<com.android.internal.telephony.dataconnection.DcTrackerBase$DataRoamingSettingObserver: void register()> (1)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)> (2)
<com.android.internal.telephony.SMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (5)
<com.android.internal.telephony.SmsUsageMonitor$SettingsObserverHandler: void <init>(android.content.Context,java.util.concurrent.atomic.AtomicBoolean)> (1)
<com.android.server.backup.BackupManagerService: void <init>(android.content.Context)> (1)
<com.android.server.BatteryService: void onBootPhase(int)> (1)
<com.android.server.ConnectivityService$SettingsObserver: void observe(android.content.Context)> ()
<com.android.server.display.OverlayDisplayAdapter$1: void run()> (1)
<com.android.server.display.WifiDisplayController: void <init>(android.content.Context,android.os.Handler,com.android.server.display.WifiDisplayController$Listener)> (1)
<com.android.server.hdmi.HdmiControlService: void registerContentObserver()> (1)
<com.android.server.NetworkTimeUpdateService$SettingsObserver: void observe(android.content.Context)> (1)
<com.android.server.notification.ZenModeHelper$SettingsObserver: void <init>(com.android.server.notification.ZenModeHelper,android.os.Handler)> (1)
<com.android.server.NsdService$NsdStateMachine: void registerForNsdSetting()> (1)
<com.android.server.SamplingProfilerService: void registerSettingObserver(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager$UsbHandler: void <init>(com.android.server.usb.UsbDeviceManager,android.os.Looper)> (1)
<com.android.server.wifi.WifiController: void registerForStayAwakeModeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiIdleTimeChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiController: void registerForWifiSleepPolicyChange(android.os.Handler)> (1)
<com.android.server.wifi.WifiNotificationController$NotificationEnabledSettingObserver: void register()> (1)
<com.android.server.wifi.WifiServiceImpl: void registerForScanModeChange()> (1)
<com.android.server.wifi.WifiStateMachine: void <init>(android.content.Context,java.lang.String,com.android.server.wifi.WifiTrafficPoller)> (1)
<com.android.server.wifi.WifiWatchdogStateMachine: void registerForSettingsChanges()> (1)
<com.android.server.wifi.WifiWatchdogStateMachine: void registerForWatchdogToggle()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsInternal()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMALTEPhone)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone,android.telephony.CellInfo)> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (2)
<com.android.internal.telephony.dataconnection.DcTrackerBase: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean,int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher,com.android.internal.telephony.gsm.GsmInboundSmsHandler)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.SmsUsageMonitor,com.android.internal.telephony.ImsSMSDispatcher)> (1)
<com.android.internal.telephony.SmsUsageMonitor: void <init>(android.content.Context)> (1)
<com.android.server.backup.BackupManagerService$Lifecycle: void <init>(android.content.Context)> (1)
<com.android.server.SystemService: void onBootPhase(int)> (18)
<com.android.server.display.WifiDisplayAdapter$1: void run()> (1)
<com.android.server.hdmi.HdmiControlService: void onInitializeCecComplete()> (1)
<com.android.server.NetworkTimeUpdateService: void systemRunning()> (1)
<com.android.server.notification.ZenModeHelper: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.NsdService$NsdStateMachine: void <init>(com.android.server.NsdService,java.lang.String)> (1)
<com.android.server.SamplingProfilerService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbDeviceManager: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void initializeAndRegisterForSettingsChange(android.os.Looper)> (1)
<com.android.server.wifi.WifiNotificationController: void <init>(android.content.Context,com.android.server.wifi.WifiStateMachine)> (1)
<com.android.server.wifi.WifiServiceImpl: void checkAndStartWifi()> (1)
<com.android.server.wifi.WifiServiceImpl: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiWatchdogStateMachine: void <init>(android.content.Context,android.os.Messenger)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$4: void run()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void initSstIcc()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void initSstIcc()> (3)
<com.android.internal.telephony.dataconnection.DcTracker: void <init>(com.android.internal.telephony.PhoneBase)> (5)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,int)> (2)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> ()
<com.android.internal.telephony.IccSmsInterfaceManager: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (10)
<com.android.server.SystemService: void <init>(android.content.Context)> (37)
<com.android.server.AlarmManagerService: void onBootPhase(int)> (1)
<com.android.server.am.ActivityManagerService$Lifecycle: void onBootPhase(int)> (1)
<com.android.server.fingerprint.FingerprintService: void onBootPhase(int)> (1)
<com.android.server.hdmi.HdmiControlService: void onBootPhase(int)> (1)
<com.android.server.lights.LightsService: void onBootPhase(int)> (1)
<com.android.server.media.MediaSessionService: void onBootPhase(int)> (1)
<com.android.server.media.projection.MediaProjectionManagerService: void onBootPhase(int)> (1)
<com.android.server.MmsServiceBroker: void onBootPhase(int)> (1)
<com.android.server.PersistentDataBlockService: void onBootPhase(int)> (1)
<com.android.server.pm.Installer: void onBootPhase(int)> (1)
<com.android.server.pm.LauncherAppsService: void onBootPhase(int)> (1)
<com.android.server.print.PrintManagerService: void onBootPhase(int)> (1)
<com.android.server.restrictions.RestrictionsManagerService: void onBootPhase(int)> (1)
<com.android.server.storage.DeviceStorageMonitorService: void onBootPhase(int)> (1)
<com.android.server.SystemServiceManager: void startBootPhase(int)> (4)
<com.android.server.twilight.TwilightService: void onBootPhase(int)> (1)
<com.android.server.usage.UsageStatsService: void onBootPhase(int)> (1)
<com.android.server.webkit.WebViewUpdateService: void onBootPhase(int)> (1)
<com.android.server.hdmi.HdmiControlService: void access$1200(com.android.server.hdmi.HdmiControlService)> (1)
<com.android.server.SystemServer$2: void run()> (1)
<com.android.server.NsdService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiController: void <init>(android.content.Context,com.android.server.wifi.WifiServiceImpl,android.os.Looper)> (1)
<com.android.server.wifi.WifiService: void onBootPhase(int)> (1)
<com.android.server.wifi.WifiService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiWatchdogStateMachine: com.android.server.wifi.WifiWatchdogStateMachine makeWifiWatchdogStateMachine(android.content.Context,android.os.Messenger)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (2)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean,int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone(int)> (2)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhone(android.content.Context)> (1)
<com.android.internal.telephony.PhoneProxy: void <init>(com.android.internal.telephony.PhoneBase)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (2)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (13)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int)> (1)
<com.android.server.AlarmManagerService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService$Lifecycle: void <init>(android.content.Context)> (1)
<com.android.server.appwidget.AppWidgetService: void <init>(android.content.Context)> (1)
<com.android.server.BatteryService: void <init>(android.content.Context)> (1)
<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: void <init>(android.content.Context)> (1)
<com.android.server.display.DisplayManagerService: void <init>(android.content.Context)> (1)
<com.android.server.DockObserver: void <init>(android.content.Context)> (1)
<com.android.server.dreams.DreamManagerService: void <init>(android.content.Context)> (1)
<com.android.server.ethernet.EthernetService: void <init>(android.content.Context)> (1)
<com.android.server.fingerprint.FingerprintService: void <init>(android.content.Context)> (1)
<com.android.server.hdmi.HdmiControlService: void <init>(android.content.Context)> (1)
<com.android.server.job.JobSchedulerService: void <init>(android.content.Context)> (1)
<com.android.server.lights.LightsService: void <init>(android.content.Context)> (1)
<com.android.server.media.MediaSessionService: void <init>(android.content.Context)> (1)
<com.android.server.media.projection.MediaProjectionManagerService: void <init>(android.content.Context)> (1)
<com.android.server.MmsServiceBroker: void <init>(android.content.Context)> (1)
<com.android.server.notification.NotificationManagerService: void <init>(android.content.Context)> (1)
<com.android.server.PersistentDataBlockService: void <init>(android.content.Context)> (1)
<com.android.server.pm.Installer: void <init>(android.content.Context)> (1)
<com.android.server.pm.LauncherAppsService: void <init>(android.content.Context)> (1)
<com.android.server.power.PowerManagerService: void <init>(android.content.Context)> (1)
<com.android.server.print.PrintManagerService: void <init>(android.content.Context)> (1)
<com.android.server.restrictions.RestrictionsManagerService: void <init>(android.content.Context)> (1)
<com.android.server.storage.DeviceStorageMonitorService: void <init>(android.content.Context)> (1)
<com.android.server.trust.TrustManagerService: void <init>(android.content.Context)> (1)
<com.android.server.tv.TvInputManagerService: void <init>(android.content.Context)> (1)
<com.android.server.twilight.TwilightService: void <init>(android.content.Context)> (1)
<com.android.server.UiModeManagerService: void <init>(android.content.Context)> (1)
<com.android.server.usage.UsageStatsService: void <init>(android.content.Context)> (1)
<com.android.server.usb.UsbService$Lifecycle: void <init>(android.content.Context)> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void <init>(android.content.Context)> (1)
<com.android.server.webkit.WebViewUpdateService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.p2p.WifiP2pService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.RttService: void <init>(android.content.Context)> (1)
<com.android.server.wifi.WifiScanningService: void <init>(android.content.Context)> (1)
<com.android.server.am.ActivityManagerService: void finishBooting()> (3)
<com.android.server.hdmi.HdmiControlService$1: void onAllocated(int,int)> (1)
<com.android.server.NsdService: com.android.server.NsdService create(android.content.Context)> (1)
<com.android.server.usb.UsbService$Lifecycle: void onStart()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,boolean)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone()> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.PhoneNotifier,int)> (3)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getGsmPhone()> ()
<com.android.internal.telephony.PhoneProxy: void deleteAndCreatePhone(int)> (1)
<com.android.internal.telephony.PhoneFactory: void makeDefaultPhones(android.content.Context)> ()
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (2)
<com.android.internal.telephony.PhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (7)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)> (1)
<com.android.server.am.ActivityManagerService: void bootAnimationComplete()> (1)
<com.android.server.am.ActivityManagerService: void ensureBootCompleted()> (4)
<com.android.server.hdmi.HdmiCecController$AllocateAddressCallback: void onAllocated(int,int)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone getCdmaPhone(int)> (1)
<com.android.internal.telephony.PhoneProxy: void phoneObjectUpdater(int)> (2)
<com.android.internal.telephony.imsphone.ImsPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,android.net.sip.SipProfile)> (1)
<com.android.internal.telephony.sip.SipPhone: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<android.app.ActivityManagerNative: void bootAnimationComplete()> (2)
<com.android.server.am.ActivityManagerService: void appNotResponding(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: void systemReady(java.lang.Runnable)> (2)
<com.android.server.am.ActivityManagerService: void crashApplication(com.android.server.am.ProcessRecord,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.hdmi.HdmiCecController$4: void run()> (1)
<com.android.internal.telephony.PhoneProxy: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneFactory: com.android.internal.telephony.imsphone.ImsPhone makePhone(android.content.Context,com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.sip.SipPhoneFactory: com.android.internal.telephony.sip.SipPhone makePhone(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<android.app.ActivityManagerNative: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IActivityManager: void bootAnimationComplete()> (1)
<com.android.server.am.ActiveServices: void serviceTimeout(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService$11: void run()> (1)
<com.android.server.am.BroadcastQueue$AppNotResponding: void run()> (1)
<com.android.server.am.ActivityManagerService$15: void run()> (1)
<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.ActivityManagerService: void handleApplicationCrashInner(java.lang.String,com.android.server.am.ProcessRecord,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.internal.telephony.Phone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.imsphone.ImsPhone makeImsPhone(com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone)> (1)
<com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.sip.SipPhone makeSipPhone(java.lang.String)> ()
<com.android.server.am.ActivityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.wm.WindowManagerService: void performEnableScreen()> (6)
<android.app.ActivityManagerNative: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener$NativeCrashReporter: void run()> (2)
<com.android.internal.telephony.PhoneBase: void updatePhoneObject(int)> (10)
<com.android.internal.telephony.PhoneBase: void updateImsPhone()> (8)
<com.android.server.wm.WindowManagerService: void enableScreenAfterBoot()> (1)
<com.android.server.wm.WindowManagerService: void performBootTimeout()> (2)
<com.android.server.wm.WindowManagerService: void showBootMessage(java.lang.CharSequence,boolean)> (1)
<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()> (5)
<com.android.server.wm.WindowManagerService: boolean checkBootAnimationCompleteLocked()> (2)
<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$CrashInfo)> (1)
<android.app.ActivityManagerNative: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (2)
<com.android.server.am.NativeCrashListener: void consumeNativeCrashData(java.io.FileDescriptor)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updatePhoneObject()> (4)
<com.android.internal.telephony.cdma.CDMAPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void updatePhoneObject(int)> (2)
<com.android.internal.telephony.ServiceStateTracker: void updatePhoneObject()> (5)
<com.android.internal.telephony.sip.SipPhoneBase: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.sip.SipPhone: void updatePhoneObject(int)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void updateImsPhone()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void updateImsPhone()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void updateImsPhone()> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void updateImsPhone()> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void updateImsPhone()> (2)
<com.android.internal.telephony.PhoneBase$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: void updateImsPhone()> (1)
<com.android.internal.telephony.sip.SipPhone: void updateImsPhone()> (1)
<com.android.server.am.ActivityManagerService: void enableScreenAfterBoot()> (2)
<com.android.server.am.ActivityManagerService: void showBootMessage(java.lang.CharSequence,boolean)> (2)
<com.android.server.wm.WindowManagerService: void enableScreenIfNeeded()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)> (1)
<com.android.server.wm.WindowStateAnimator: boolean performShowLocked()> (4)
<com.android.server.wm.WindowStateAnimator: boolean stepAnimationLocked(long)> (1)
<com.android.server.wm.WindowState: boolean hideLw(boolean,boolean)> (3)
<com.android.server.wm.WindowManagerService: boolean access$1100(com.android.server.wm.WindowManagerService)> (2)
<com.android.internal.os.RuntimeInit: void wtf(java.lang.String,java.lang.Throwable,boolean)> (1)
<android.app.IActivityManager: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)> (1)
<com.android.server.am.NativeCrashListener: void run()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updatePhoneObject()> (3)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handleCdmaSubscriptionSource(int)> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()> (3)
<android.app.ActivityManagerNative: void showBootMessage(java.lang.CharSequence,boolean)> (2)
<android.view.IWindowManager$Stub$Proxy: void enableScreenIfNeeded()> ()
<android.view.IWindowManager$Stub: void enableScreenIfNeeded()> (2)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLockedLoop()> (1)
<com.android.server.wm.AppWindowAnimator: boolean showAllWindowsLocked()> (2)
<com.android.server.wm.WindowAnimator: void updateWindowsLocked(int)> (1)
<com.android.server.wm.WindowStateAnimator: boolean commitFinishDrawingLocked(long)> (1)
<com.android.server.wm.WindowState: boolean hideLw(boolean)> (2)
<com.android.server.wm.WindowState: void setAppOpVisibilityLw(boolean)> (2)
<android.util.Log$1: void onTerribleFailure(java.lang.String,android.util.Log$TerribleFailure,boolean)> (1)
<com.android.internal.os.RuntimeInit$UncaughtHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)> (1)
<com.android.server.am.ActivityManagerService: void startObservingNativeCrashes()> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void pollState()> (3)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollStateDone()> (2)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handleCdmaSubscriptionSource(int)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void queueNextSignalStrengthPoll()> (1)
<android.app.IActivityManager: void showBootMessage(java.lang.CharSequence,boolean)> (3)
<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowManager: void enableScreenIfNeeded()> (1)
<com.android.server.wm.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()> (20)
<com.android.server.wm.WindowAnimator: void testTokenMayBeDrawnLocked(int)> (1)
<com.android.server.wm.WindowManagerService: int handleAppTransitionReadyLocked(com.android.server.wm.WindowList)> (1)
<com.android.server.wm.WindowAnimator: void animateLocked()> (1)
<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)> (3)
<com.android.server.wm.DisplayContent: void switchUserStacks(int)> (1)
<com.android.server.wm.WindowManagerService: void updateAppOpsState()> (1)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void pollState()> (6)
<com.android.internal.telephony.ServiceStateTracker: void pollState()> ()
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (4)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void pollState()> (3)
<com.android.server.pm.PackageManagerService: void performBootDexOpt(android.content.pm.PackageParser$Package,int,int)> (1)
<com.android.server.pm.PackageManagerService: void performBootDexOpt()> (3)
<com.android.server.wm.WindowManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void finishScreenTurningOn()> (2)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfiguration()> (2)
<com.android.server.wm.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean,boolean)> (3)
<com.android.server.wm.WindowManagerService: void access$400(com.android.server.wm.WindowManagerService)> (5)
<com.android.server.wm.WindowManagerService: void addTask(int,int,boolean)> (1)
<com.android.server.wm.WindowManagerService: void moveStackWindowsLocked(com.android.server.wm.DisplayContent)> (2)
<com.android.server.wm.WindowManagerService: void reconfigureDisplayLocked(com.android.server.wm.DisplayContent)> (3)
<com.android.server.wm.WindowManagerService: void reevaluateStatusBarVisibility()> (1)
<com.android.server.wm.WindowManagerService: void removeWindowInnerLocked(com.android.server.wm.Session,com.android.server.wm.WindowState)> (5)
<com.android.server.wm.WindowManagerService: void resizeStack(int,android.graphics.Rect)> (1)
<com.android.server.wm.WindowManagerService: void setCurrentUser(int,int[])> (1)
<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)> (3)
<com.android.server.wm.WindowManagerService: void setUniverseTransformLocked(com.android.server.wm.WindowState,float,float,float,float,float,float,float)> (1)
<com.android.server.wm.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.wm.AppWindowToken,boolean,boolean)> (6)
<com.android.server.wm.WindowAnimator: void access$000(com.android.server.wm.WindowAnimator)> (1)
<com.android.internal.policy.impl.BarController: boolean setBarShowingLw(boolean)> (4)
<com.android.internal.policy.impl.PhoneWindowManager: int finishPostLayoutPolicyLw()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.server.wm.WindowManagerService$5: void onOpChanged(int,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CDMAPhone: boolean setOperatorBrandOverride(java.lang.String)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (3)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> (3)
<com.android.internal.telephony.ServiceStateTracker: void handlePollStateResult(int,android.os.AsyncResult)> ()
<com.android.internal.telephony.gsm.GSMPhone: boolean setOperatorBrandOverride(java.lang.String)> (1)
<android.content.pm.IPackageManager$Stub$Proxy: void performBootDexOpt()> ()
<android.content.pm.IPackageManager$Stub: void performBootDexOpt()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void finishKeyguardDrawn()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void finishWindowsDrawn()> (1)
<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)> (1)
<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)> (8)
<com.android.server.wm.WindowManagerService: boolean updateRotationUncheckedLocked(boolean)> (5)
<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)> (2)
<com.android.server.wm.WindowManagerService: void requestTraversalLocked()> (11)
<com.android.server.am.ActivityStackSupervisor: void moveTaskToStack(int,int,boolean)> (1)
<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityLocked(com.android.server.wm.DisplayContent,int)> (2)
<com.android.server.wm.WindowManagerService: void setForcedDisplaySizeLocked(com.android.server.wm.DisplayContent,int,int)> (2)
<com.android.server.wm.WindowManagerService: void setOverscanLocked(com.android.server.wm.DisplayContent,int,int,int,int)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void reevaluateStatusBarVisibility()> (3)
<com.android.server.wm.TaskStack: void detachDisplay()> (1)
<android.view.IWindowManager$Stub$Proxy: void setNewConfiguration(android.content.res.Configuration)> ()
<android.view.IWindowManager$Stub: void setNewConfiguration(android.content.res.Configuration)> (2)
<com.android.server.am.ActivityManagerService: boolean updateConfigurationLocked(android.content.res.Configuration,com.android.server.am.ActivityRecord,boolean,boolean)> (7)
<com.android.server.wm.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.wm.AppWindowToken)> (2)
<com.android.server.wm.WindowAnimator$1: void run()> (1)
<com.android.internal.policy.impl.BarController: boolean checkHiddenLw()> (1)
<com.android.internal.policy.impl.BarController: void adjustSystemUiVisibilityLw(int,int)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void beginLayoutLw(boolean,int,int,int)> (1)
<android.view.WindowManagerPolicy: int finishPostLayoutPolicyLw()> (1)
<android.view.WindowManagerPolicy: void applyPostLayoutPolicyLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean setOperatorBrandOverride(java.lang.String)> (2)
<com.android.internal.telephony.PhoneBase: boolean setOperatorBrandOverride(java.lang.String)> (5)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void getSubscriptionInfoAndStartPollingThreads()> (1)
<android.content.pm.IPackageManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.pm.IPackageManager: void performBootDexOpt()> ()
<com.android.internal.policy.impl.PhoneWindowManager: void access$300(com.android.internal.policy.impl.PhoneWindowManager)> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void wakingUp()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: void access$400(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<android.app.ActivityManagerNative: void updateConfiguration(android.content.res.Configuration)> (2)
<android.view.IWindowManager$Stub$Proxy: void prepareAppTransition(int,boolean)> ()
<android.view.IWindowManager$Stub: void prepareAppTransition(int,boolean)> (2)
<com.android.server.am.ActivityStack: boolean moveTaskToBackLocked(int,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStack: void moveTaskToFrontLocked(com.android.server.am.TaskRecord,com.android.server.am.ActivityRecord,android.os.Bundle)> (2)
<com.android.server.am.ActivityStack: void updateTransitLocked(int,android.os.Bundle)> (1)
<com.android.server.wm.WindowManagerService: void resumeRotationLocked()> (1)
<com.android.server.wm.WindowManagerService: void stopFreezingDisplayLocked()> (4)
<com.android.server.wm.WindowManagerService: void updateResizingWindows(com.android.server.wm.WindowState)> (1)
<com.android.server.wm.WindowStateAnimator: android.view.SurfaceControl createSurfaceLocked()> (1)
<com.android.server.wm.WindowManagerService$LocalService: void waitForAllWindowsDrawn(java.lang.Runnable,long)> (1)
<com.android.server.wm.WindowManagerService: void handleDisplayAdded(int)> (3)
<com.android.server.wm.WindowManagerService: void handleDisplayChangedLocked(int)> (1)
<com.android.server.wm.WindowManagerService: void handleDisplayRemovedLocked(int)> (1)
<com.android.server.wm.WindowManagerService: void keyguardGoingAway(boolean,boolean)> (2)
<com.android.server.wm.WindowManagerService: void requestTraversal()> (1)
<com.android.server.wm.WindowManagerService: void setAppFullscreen(android.os.IBinder,boolean)> (2)
<com.android.internal.policy.impl.PhoneWindowManager$9: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$HideNavInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void clearClearableFlagsLw()> (1)
<com.android.server.wm.WindowManagerService: void detachStackLocked(com.android.server.wm.DisplayContent,com.android.server.wm.TaskStack)> (2)
<android.view.IWindowManager: void setNewConfiguration(android.content.res.Configuration)> ()
<com.android.server.am.ActivityManagerService: void retrieveSettings()> (1)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int adjustSystemUiVisibilityLw(int)> (1)
<android.view.WindowManagerPolicy: void beginLayoutLw(boolean,int,int,int)> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean setOperatorBrandOverride(java.lang.String)> (1)
<com.android.internal.telephony.imsphone.ImsPhone: boolean setOperatorBrandOverride(java.lang.String)> (2)
<com.android.internal.telephony.Phone: boolean setOperatorBrandOverride(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhoneBase: boolean setOperatorBrandOverride(java.lang.String)> (1)
<com.android.internal.telephony.sip.SipPhone: boolean setOperatorBrandOverride(java.lang.String)> (1)
<com.android.server.pm.PackageManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.WindowManagerPolicy: void wakingUp()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void systemBooted()> (1)
<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)> (7)
<android.view.IWindowManager: void prepareAppTransition(int,boolean)> ()
<com.android.server.am.ActivityStackSupervisor: void findTaskToMoveToFrontLocked(com.android.server.am.TaskRecord,int,android.os.Bundle)> (2)
<com.android.server.wm.DragState: void unregister()> (4)
<com.android.server.wm.WindowManagerService: void access$500(com.android.server.wm.WindowManagerService)> (2)
<android.view.WindowManagerInternal: void waitForAllWindowsDrawn(java.lang.Runnable,long)> (1)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityDisplay: void <init>(com.android.server.am.ActivityStackSupervisor,int,int,int)> (1)
<com.android.server.wm.WindowManagerService: void onDisplayAdded(int)> (1)
<com.android.server.wm.WindowManagerService: void access$1000(com.android.server.wm.WindowManagerService,int)> (2)
<com.android.server.wm.WindowManagerService: void access$900(com.android.server.wm.WindowManagerService,int)> (2)
<android.view.IWindowManager$Stub$Proxy: void keyguardGoingAway(boolean,boolean)> ()
<android.view.IWindowManager$Stub: void keyguardGoingAway(boolean,boolean)> (2)
<com.android.server.wm.WindowManagerService$LocalService: void requestTraversalFromDisplayManager()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemBarsLw(android.view.WindowManagerPolicy$WindowState,int,int)> (1)
<com.android.server.wm.DisplayContent: void checkForDeferredActions()> (1)
<com.android.server.wm.WindowManagerService: void detachStack(int)> (1)
<android.view.WindowManagerPolicy: int adjustSystemUiVisibilityLw(int)> (2)
<com.android.server.wm.WindowManagerService: void performLayoutLockedInner(com.android.server.wm.DisplayContent,boolean,boolean)> (2)
<com.android.internal.telephony.PhoneProxy: boolean setOperatorBrandOverride(java.lang.String)> (1)
<com.android.server.power.Notifier$1: void run()> (1)
<android.view.WindowManagerPolicy: void systemBooted()> (1)
<com.android.internal.app.LocalePicker: void updateLocale(java.util.Locale)> ()
<com.android.internal.telephony.MccTable: void setSystemLocale(android.content.Context,java.lang.String,java.lang.String)> (3)
<com.android.internal.telephony.MccTable: void updateMccMncConfiguration(android.content.Context,java.lang.String,boolean)> (8)
<com.android.server.MountService: void copyLocaleFromMountService()> (1)
<com.android.server.UiModeManagerService: void sendConfigurationLocked()> (1)
<com.android.server.wm.WindowManagerService: void displayReady()> (1)
<com.android.server.wm.WindowManagerService: void sendNewConfiguration()> (11)
<com.android.server.am.ActivityStackSupervisor: void setLockTaskModeLocked(com.android.server.am.TaskRecord,boolean)> (3)
<com.android.server.wm.DragState: void endDragLw()> (3)
<com.android.server.wm.Session: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)> (3)
<com.android.internal.policy.impl.PhoneWindowManager: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (2)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityContainer: void setSurfaceLocked(android.view.Surface,int,int,int)> (1)
<com.android.server.am.ActivityStackSupervisor: void handleDisplayAddedLocked(int)> (2)
<com.android.server.wm.WindowManagerService: void onDisplayChanged(int)> (1)
<com.android.server.wm.WindowManagerService: void onDisplayRemoved(int)> (2)
<android.view.IWindowManager: void keyguardGoingAway(boolean,boolean)> ()
<android.view.WindowManagerInternal: void requestTraversalFromDisplayManager()> (2)
<com.android.internal.policy.impl.PhoneWindowManager: int updateSystemUiVisibilityLw()> (5)
<com.android.server.am.ActivityStackSupervisor$ActivityContainer: void detachLocked()> (2)
<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)> (2)
<com.android.server.wm.WindowManagerService: boolean updateFocusedWindowLocked(int,boolean)> (11)
<com.android.internal.telephony.PhoneBase: void setPropertiesByCarrier()> (8)
<com.android.internal.telephony.uicc.RuimRecords: void setLocaleFromCsim()> (1)
<com.android.internal.telephony.uicc.SIMRecords: void setLocaleFromUsim()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setProperties()> (2)
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (2)
<com.android.internal.telephony.PhoneFactory: void setDefaultSubscription(int)> ()
<com.android.internal.telephony.ServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (3)
<com.android.internal.telephony.SubscriptionController: void setDefaultSubId(long)> (1)
<com.android.internal.telephony.uicc.IccCardProxy: void updateQuietMode()> (3)
<com.android.server.MountService: void access$2000(com.android.server.MountService)> (1)
<com.android.server.UiModeManagerService: void sendConfigurationAndStartDreamOrDockAppLocked(java.lang.String)> (2)
<com.android.server.wm.WindowManagerService$DragInputEventReceiver: void onInputEvent(android.view.InputEvent)> (1)
<android.view.IWindowSession$Stub$Proxy: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> ()
<android.view.IWindowSession$Stub: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (2)
<com.android.server.wm.Session: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager$Stub$Proxy: void startFreezingScreen(int,int)> ()
<android.view.IWindowManager$Stub: void startFreezingScreen(int,int)> (2)
<android.view.WindowManagerPolicy: void screenTurningOn(android.view.WindowManagerPolicy$ScreenOnListener)> (1)
<com.android.server.am.ActivityStackSupervisor: void onDisplayAdded(int)> (1)
<com.android.server.am.ActivityStackSupervisor: void handleDisplayChangedLocked(int)> (2)
<com.android.server.am.ActivityStackSupervisor: void handleDisplayRemovedLocked(int)> (2)
<com.android.server.display.DisplayManagerService: void scheduleTraversalLocked(boolean)> (8)
<com.android.internal.policy.impl.PhoneWindowManager: int access$1300(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: int focusChangedLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void requestTransientBars(android.view.WindowManagerPolicy$WindowState)> (1)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityContainer: void detachLocked()> (2)
<android.view.IWindowManager$Stub$Proxy: void statusBarVisibilityChanged(int)> ()
<android.view.IWindowManager$Stub: void statusBarVisibilityChanged(int)> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.cdma.CDMAPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.gsm.GSMPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.imsphone.ImsPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.imsphone.ImsPhone: void setPropertiesByCarrier()> (2)
<com.android.internal.telephony.sip.SipPhoneBase: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.sip.SipPhone: void setPropertiesByCarrier()> (1)
<com.android.internal.telephony.uicc.RuimRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.uicc.SIMRecords: void onAllRecordsLoaded()> (2)
<com.android.internal.telephony.cdma.CDMALTEPhone: void init(android.content.Context,com.android.internal.telephony.PhoneNotifier)> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: void onSubscriptionActivated()> (1)
<com.android.internal.telephony.cdma.CDMALTEPhone: boolean updateCurrentCarrierInProvider(java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (2)
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (2)
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void updateCarrierMccMncConfiguration(java.lang.String,java.lang.String,android.content.Context)> (2)
<com.android.internal.telephony.SubscriptionController: int addSubInfoRecord(java.lang.String,int)> (2)
<com.android.internal.telephony.uicc.IccCardProxy: void setVoiceRadioTech(int)> (2)
<com.android.server.MountService$3: void run()> (2)
<com.android.server.UiModeManagerService: void updateAfterBroadcastLocked(java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService: void updateLocked(int,int)> (7)
<android.view.IWindowSession: boolean performDrag(android.view.IWindow,android.os.IBinder,float,float,float,float,android.content.ClipData)> (1)
<android.view.IWindowSession$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> ()
<android.view.IWindowSession$Stub: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (2)
<android.view.IWindowManager: void startFreezingScreen(int,int)> ()
<com.android.server.display.DisplayPowerController: boolean setScreenState(int)> (1)
<com.android.server.am.ActivityStackSupervisor: void onDisplayChanged(int)> (1)
<com.android.server.am.ActivityStackSupervisor: void onDisplayRemoved(int)> (1)
<com.android.server.display.DisplayManagerService: void access$1600(com.android.server.display.DisplayManagerService,boolean)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAddedLocked(com.android.server.display.DisplayDevice)> (2)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceChanged(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemovedLocked(com.android.server.display.DisplayDevice)> (3)
<com.android.server.display.DisplayManagerService: void requestGlobalDisplayStateInternal(int)> (1)
<com.android.server.display.DisplayManagerService: void setDisplayInfoOverrideFromWindowManagerInternal(int,android.view.DisplayInfo)> (1)
<com.android.server.display.DisplayManagerService: void setDisplayPropertiesInternal(int,boolean,float,boolean)> (1)
<com.android.server.display.DisplayManagerService: void windowManagerAndInputReady()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$17: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.view.WindowManagerPolicy: int focusChangedLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManagerPolicy$WindowState)> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$1100(com.android.internal.policy.impl.PhoneWindowManager,android.view.WindowManagerPolicy$WindowState)> (4)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityContainer: void onTaskListEmptyLocked()> (1)
<android.view.IWindowManager: void statusBarVisibilityChanged(int)> ()
<com.android.internal.telephony.uicc.IccRecords: void onAllRecordsLoaded()> ()
<com.android.internal.telephony.uicc.RuimRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.uicc.SIMRecords: void onRecordLoaded()> (2)
<com.android.internal.telephony.ISub$Stub$Proxy: int addSubInfoRecord(java.lang.String,int)> ()
<com.android.internal.telephony.ISub$Stub: int addSubInfoRecord(java.lang.String,int)> (2)
<com.android.server.MountService: void onDaemonConnected()> (1)
<com.android.server.UiModeManagerService: void access$000(com.android.server.UiModeManagerService,java.lang.String,int,int)> (1)
<com.android.server.UiModeManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void onBootPhase(int)> (1)
<com.android.server.UiModeManagerService: void updateDockState(int)> (1)
<com.android.server.UiModeManagerService: void updateTwilight()> (1)
<android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (156)
<com.android.server.wm.Session: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IWindowSession: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)> (1)
<com.android.server.display.DisplayPowerController: void animateScreenStateChange(int,boolean)> (1)
<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void onTraversalRequested()> (1)
<com.android.server.display.DisplayManagerService: int createVirtualDisplayInternal(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceAdded(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void access$1400(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void handleDisplayDeviceRemoved(com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void releaseVirtualDisplayInternal(android.os.IBinder)> (1)
<com.android.server.display.DisplayManagerService: void access$3700(com.android.server.display.DisplayManagerService,int)> (1)
<com.android.server.display.DisplayManagerService: void access$4100(com.android.server.display.DisplayManagerService,int,android.view.DisplayInfo)> (1)
<com.android.server.display.DisplayManagerService: void access$4300(com.android.server.display.DisplayManagerService,int,boolean,float,boolean)> (1)
<com.android.internal.policy.impl.PhoneWindowManager$18: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$7: void onSwipeFromBottom()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$7: void onSwipeFromRight()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$7: void onSwipeFromTop()> (1)
<com.android.server.am.ActivityStackSupervisor$ActivityContainer: void onTaskListEmptyLocked()> (4)
<com.android.internal.telephony.uicc.IccRecords: void onRecordLoaded()> (1)
<com.android.internal.telephony.ISub: int addSubInfoRecord(java.lang.String,int)> (1)
<com.android.internal.telephony.ISub$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.INativeDaemonConnectorCallbacks: void onDaemonConnected()> (1)
<com.android.server.UiModeManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.UiModeManagerService: void access$100(com.android.server.UiModeManagerService,int)> (1)
<com.android.server.UiModeManagerService$4: void onTwilightStateChanged()> (1)
<android.app.ActivityView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.app.FragmentBreadCrumbs: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.app.MediaRouteButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.app.NativeActivity$NativeContentView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.app.SearchDialog$SearchBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.appwidget.AppWidgetHostView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.filterfw.core.FilterSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.gesture.GestureOverlayView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.inputmethodservice.ExtractButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.inputmethodservice.ExtractEditLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.inputmethodservice.ExtractEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.inputmethodservice.KeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.media.ClosedCaptionWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.media.ClosedCaptionWidget$CCLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.media.ClosedCaptionWidget$CCLineBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.media.TtmlRenderingWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.media.tv.TvView$3: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.media.tv.TvView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.media.WebVttRenderingWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.media.WebVttRenderingWidget$CueLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.media.WebVttRenderingWidget$RegionLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.media.WebVttRenderingWidget$SpanLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.opengl.GLSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.preference.PreferenceFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.renderscript.RSSurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.renderscript.RSTextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.GhostView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.LayoutInflater$BlinkLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.view.SurfaceView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.TextureView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.ViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.view.ViewOverlay$OverlayViewGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.view.ViewStub: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.webkit.WebView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.AbsListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.AbsoluteLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.AbsSeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AbsSpinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ActionMenuPresenter$OverflowMenuButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ActionMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ActivityChooserView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.AdapterViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.AdapterView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.AdapterViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.AnalogClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.AppSecurityPermissions$PermissionItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.AutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.Button: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.CalendarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.CalendarView$LegacyCalendarViewDelegate$WeekView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.CheckBox: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.CheckedTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.Chronometer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.CompoundButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.DatePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.DateTimeView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.DayPickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<android.widget.DialerFilter: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.DigitalClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.Editor$HandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$InsertionHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$SelectionEndHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Editor$SelectionStartHandleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.EditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ExpandableListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<android.widget.FrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.Gallery: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.GridLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.GridView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.HorizontalScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ImageButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.ImageSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.LinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ListPopupWindow$DropDownListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<android.widget.ListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.MediaController: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.MultiAutoCompleteTextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.NumberPicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.NumberPicker$CustomEditText: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.PopupWindow$PopupViewContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.QuickContactBadge: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RadialTimePickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.RadioButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.RadioGroup: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.RatingBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.RelativeLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ScrollView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.SearchView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.SearchView$SearchAutoComplete: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.SeekBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.SimpleMonthView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.SlidingDrawer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.Space: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<android.widget.Spinner: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.StackView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (4)
<android.widget.StackView$StackFrame: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.Switch: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TabHost: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TableLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TableRow: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TabWidget: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TextClock: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TextSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.TextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TextViewWithCircularIndicator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TimePicker: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ToggleButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.Toolbar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.TwoLineListItem: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.VideoView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ViewAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ViewFlipper: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ViewSwitcher: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.YearPickerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<android.widget.ZoomButton: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<android.widget.ZoomButtonsController$Container: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<android.widget.ZoomControls: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.app.AlertController$RecycleListView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<com.android.internal.app.PlatLogoActivity$1: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.policy.impl.ImmersiveModeConfirmation$ClingWindowView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.policy.impl.RecentApplicationsBackground: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.view.menu.ActionMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.view.menu.ExpandedMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (5)
<com.android.internal.view.menu.IconMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.view.menu.IconMenuView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.view.menu.ListMenuItemView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.AbsActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.AccessibleDateAnimator: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.ActionBarContainer: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.ActionBarContextView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.ActionBarOverlayLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.ActionBarView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.ActionBarView$HomeView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.DialogTitle: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.FaceUnlockView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.LinearLayoutWithDefaultTouchRecepient: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.LockPatternView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.multiwaveview.GlowPadView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.PointerLocationView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.PreferenceImageView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ResolverDrawerLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.RotarySelector: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.ScrollingTabContainerView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.ScrollingTabContainerView$TabView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.SizeAdaptiveLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.SlidingTab: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (2)
<com.android.internal.widget.SubtitleView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.SwipeDismissLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.TextProgressBar: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.internal.widget.WaveView: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (1)
<com.android.internal.widget.WeightedLinearLayout: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> (3)
<com.android.server.display.DisplayPowerController: void updatePowerState()> (2)
<com.android.server.display.DisplayAdapter$Listener: void onTraversalRequested()> (1)
<com.android.server.display.DisplayManagerService: int access$3200(com.android.server.display.DisplayManagerService,android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,int,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)> (1)
<com.android.server.display.DisplayManagerService: void access$1300(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService$DisplayAdapterListener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)> (1)
<com.android.server.display.DisplayManagerService: void access$1500(com.android.server.display.DisplayManagerService,com.android.server.display.DisplayDevice)> (1)
<com.android.server.display.DisplayManagerService: void access$3500(com.android.server.display.DisplayManagerService,android.os.IBinder)> (1)
<com.android.server.display.DisplayManagerService$LocalService$1: void requestDisplayState(int)> (1)
<com.android.server.display.DisplayManagerService$LocalService: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)> (1)
<com.android.server.display.DisplayManagerService$LocalService: void setDisplayProperties(int,boolean,float,boolean)> (1)
<com.android.internal.policy.impl.SystemGesturesPointerEventListener$Callbacks: void onSwipeFromBottom()> (1)
<com.android.internal.policy.impl.SystemGesturesPointerEventListener$Callbacks: void onSwipeFromRight()> (1)
<com.android.internal.policy.impl.SystemGesturesPointerEventListener$Callbacks: void onSwipeFromTop()> (1)
<com.android.server.am.ActivityStack: void finishAllActivitiesLocked(boolean)> (2)
<com.android.server.am.ActivityStack: void removeTask(com.android.server.am.TaskRecord)> (3)
<com.android.server.am.ActivityStackSupervisor$ActivityContainer: void release()> (4)
<android.telephony.SubscriptionManager: android.net.Uri addSubInfoRecord(java.lang.String,int)> (1)
<com.android.internal.telephony.SubscriptionController: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.NativeDaemonConnector: void listenToSocket()> (1)
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.twilight.TwilightListener: void onTwilightStateChanged()> (1)
<android.widget.Editor: boolean performLongClick(boolean)> (1)
<com.android.server.display.DisplayPowerController: void access$400(com.android.server.display.DisplayPowerController)> (3)
<com.android.server.display.DisplayPowerController: void debounceProximitySensor()> (2)
<com.android.server.display.DisplayAdapter$2: void run()> (1)
<com.android.server.display.DisplayAdapter$Listener: void onDisplayDeviceEvent(com.android.server.display.DisplayDevice,int)> (1)
<com.android.server.display.DisplayBlanker: void requestDisplayState(int)> (1)
<android.hardware.display.DisplayManagerInternal: void setDisplayInfoOverrideFromWindowManager(int,android.view.DisplayInfo)> (2)
<android.hardware.display.DisplayManagerInternal: void setDisplayProperties(int,boolean,float,boolean)> (1)
<com.android.internal.policy.impl.SystemGesturesPointerEventListener: void onPointerEvent(android.view.MotionEvent)> (1)
<com.android.server.am.ActivityRecord: void setTask(com.android.server.am.TaskRecord,com.android.server.am.TaskRecord)> (3)
<android.app.IActivityContainer$Stub$Proxy: void release()> ()
<android.app.IActivityContainer$Stub: void release()> (2)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityContainer: void release()> (1)
<com.android.internal.telephony.SubInfoRecordUpdater: void updateSimInfoByIccId()> (2)
<com.android.server.NativeDaemonConnector: void run()> (1)
<com.android.server.twilight.TwilightService$TwilightListenerRecord: void run()> (1)
<android.widget.TextView: boolean performLongClick()> (24)
<com.android.server.display.DisplayPowerController: void sendUpdatePowerStateLocked()> (2)
<com.android.server.display.DisplayPowerController$ScreenOnUnblocker: void onScreenOn()> (1)
<com.android.server.display.DisplayPowerController: void access$500(com.android.server.display.DisplayPowerController)> (2)
<com.android.server.display.DisplayPowerController: void handleProximitySensorEvent(long,boolean)> (1)
<com.android.server.display.DisplayAdapter$1: void run()> (1)
<com.android.server.display.DisplayPowerState$PhotonicModulator: void requestDisplayState(int)> (1)
<com.android.server.wm.WindowManagerService: boolean computeScreenConfigurationLocked(android.content.res.Configuration)> (4)
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent newDisplayContentLocked(android.view.Display)> (1)
<com.android.server.am.ActivityStack: android.app.ActivityOptions resetTargetTaskIfNeededLocked(com.android.server.am.TaskRecord,boolean)> (1)
<com.android.server.am.ActivityStack: int resetAffinityTaskIfNeededLocked(com.android.server.am.TaskRecord,com.android.server.am.TaskRecord,boolean,boolean,int)> (1)
<android.app.IActivityContainer$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.app.IActivityContainer: void release()> (1)
<com.android.internal.telephony.SubInfoRecordUpdater$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.inputmethodservice.ExtractButton: boolean performLongClick()> (2)
<android.inputmethodservice.ExtractEditText: boolean performLongClick()> (3)
<android.media.ClosedCaptionWidget$CCLineBox: boolean performLongClick()> (2)
<android.widget.AutoCompleteTextView: boolean performLongClick()> (3)
<android.widget.Button: boolean performLongClick()> (2)
<android.widget.CheckBox: boolean performLongClick()> (3)
<android.widget.CheckedTextView: boolean performLongClick()> (2)
<android.widget.Chronometer: boolean performLongClick()> (2)
<android.widget.CompoundButton: boolean performLongClick()> (2)
<android.widget.DateTimeView: boolean performLongClick()> (2)
<android.widget.DigitalClock: boolean performLongClick()> (2)
<android.widget.EditText: boolean performLongClick()> (2)
<android.widget.MultiAutoCompleteTextView: boolean performLongClick()> (4)
<android.widget.NumberPicker$CustomEditText: boolean performLongClick()> (3)
<android.widget.RadioButton: boolean performLongClick()> (3)
<android.widget.SearchView$SearchAutoComplete: boolean performLongClick()> (4)
<android.widget.Switch: boolean performLongClick()> (3)
<android.widget.TextClock: boolean performLongClick()> (2)
<android.widget.TextViewWithCircularIndicator: boolean performLongClick()> (2)
<android.widget.ToggleButton: boolean performLongClick()> (3)
<com.android.internal.view.menu.ActionMenuItemView: boolean performLongClick()> (2)
<com.android.internal.view.menu.IconMenuItemView: boolean performLongClick()> (2)
<com.android.internal.widget.DialogTitle: boolean performLongClick()> (2)
<com.android.server.display.DisplayPowerController: boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest,boolean)> (1)
<com.android.server.display.DisplayPowerController: void sendUpdatePowerState()> (2)
<com.android.server.display.DisplayPowerController: void access$1000(com.android.server.display.DisplayPowerController,long,boolean)> (1)
<com.android.server.display.DisplayPowerState$PhotonicModulator: void run()> (2)
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()> (2)
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDisplayContentLocked(int)> (24)
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord resetTaskIfNeededLocked(com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStackSupervisor$ActivityContainer: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityStackSupervisor$VirtualActivityContainer: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (3)
<android.app.ActivityView$ActivityContainerWrapper: void release()> (2)
<com.android.server.display.DisplayManagerService$LocalService: boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest,boolean)> (1)
<com.android.server.display.DisplayPowerController: void access$000(com.android.server.display.DisplayPowerController)> (3)
<com.android.server.display.DisplayPowerController: void updateBrightness()> (1)
<com.android.server.display.DisplayPowerController$8: void onSensorChanged(android.hardware.SensorEvent)> (1)
<com.android.server.display.DisplayPowerState: void <init>(com.android.server.display.DisplayBlanker,com.android.server.lights.Light,com.android.server.display.ColorFade)> (1)
<com.android.server.wm.WindowAnimator: int getPendingLayoutChanges(int)> (4)
<com.android.server.wm.WindowAnimator: void setPendingLayoutChanges(int,int)> (6)
<com.android.server.wm.WindowAnimator: void updateAppWindowsLocked(int)> (1)
<com.android.server.wm.WindowAnimator: void updateWallpaperLocked(int)> (1)
<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,boolean)> (3)
<com.android.server.wm.WindowManagerService: com.android.server.wm.DisplayContent getDefaultDisplayContentLocked()> (34)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(int)> (5)
<com.android.server.wm.WindowManagerService: int addWindow(com.android.server.wm.Session,android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.WindowManagerService: int getBaseDisplayDensity(int)> (2)
<com.android.server.wm.WindowManagerService: int getInitialDisplayDensity(int)> (2)
<com.android.server.wm.WindowManagerService: void createDisplayContentLocked(android.view.Display)> (2)
<com.android.server.wm.WindowManagerService: void displayReady(int)> (2)
<com.android.server.wm.WindowManagerService: void getBaseDisplaySize(int,android.graphics.Point)> (3)
<com.android.server.wm.WindowManagerService: void getInitialDisplaySize(int,android.graphics.Point)> (2)
<android.app.ActivityView$ActivityContainerWrapper: void finalize()> ()
<android.app.ActivityView: void release()> ()
<android.hardware.display.DisplayManagerInternal: boolean requestPowerState(android.hardware.display.DisplayManagerInternal$DisplayPowerRequest,boolean)> (1)
<com.android.server.display.DisplayPowerController$1: void onAnimationEnd(android.animation.Animator)> (1)
<com.android.server.display.DisplayPowerController$2: void onAnimationEnd()> (1)
<com.android.server.display.DisplayPowerController$3: void run()> (1)
<com.android.server.display.AutomaticBrightnessController$Callbacks: void updateBrightness()> (1)
<com.android.server.display.DisplayPowerController: void initialize()> (1)
<com.android.server.wm.WindowAnimator: void setAppLayoutChanges(com.android.server.wm.AppWindowAnimator,int,java.lang.String)> (3)
<com.android.server.wm.WindowAnimator: void hideWallpapersLocked(com.android.server.wm.WindowState)> (4)
<com.android.server.wm.WindowStateAnimator: void prepareSurfaceLocked(boolean)> (1)
<com.android.server.wm.WindowStateAnimator: void setSurfaceBoundariesLocked(boolean)> (2)
<android.view.IWindowManager$Stub$Proxy: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,boolean)> ()
<android.view.IWindowManager$Stub: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,boolean)> (2)
<com.android.server.am.ActivityStack: android.graphics.Bitmap screenshotActivities(com.android.server.am.ActivityRecord)> (3)
<com.android.server.wm.AccessibilityController$DisplayMagnifier$MagnifiedViewport: void populateWindowsOnScreenLocked(android.util.SparseArray)> (1)
<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void populateVisibleWindowsOnScreenLocked(android.util.SparseArray)> (1)
<com.android.server.wm.WindowManagerService: android.view.DisplayInfo getDefaultDisplayInfoLocked()> (2)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getDefaultWindowListLocked()> (15)
<com.android.server.wm.WindowManagerService: int adjustWallpaperWindowsLocked()> (1)
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()> (1)
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()> (2)
<com.android.server.wm.WindowManagerService: int handleAnimatingStoppedAndTransitionLocked()> (1)
<com.android.server.wm.WindowManagerService: void createWatermarkInTransaction()> (1)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,boolean)> (1)
<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked()> (2)
<com.android.server.wm.WindowManagerService: void saveLastInputMethodWindowForTransition()> (1)
<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)> (10)
<com.android.server.wm.WindowManagerService: void showCircularMask()> (2)
<com.android.server.wm.WindowManagerService: void showEmulatorDisplayOverlay()> (2)
<com.android.server.wm.WindowManagerService: void showStrictModeViolation(int,int)> (1)
<com.android.server.wm.WindowManagerService: void startFreezingDisplayLocked(boolean,int,int)> (5)
<com.android.server.wm.WindowManagerService: void updateWallpaperVisibilityLocked()> (1)
<com.android.server.wm.WindowAnimator: void dumpLocked(java.io.PrintWriter,java.lang.String,boolean)> (1)
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowList getWindowListLocked(android.view.Display)> (2)
<com.android.server.wm.Session: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (3)
<com.android.server.wm.Session: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (3)
<android.view.IWindowManager$Stub$Proxy: int getBaseDisplayDensity(int)> ()
<android.view.IWindowManager$Stub: int getBaseDisplayDensity(int)> (2)
<android.view.IWindowManager$Stub$Proxy: int getInitialDisplayDensity(int)> ()
<android.view.IWindowManager$Stub: int getInitialDisplayDensity(int)> (2)
<android.view.IWindowManager$Stub$Proxy: void getBaseDisplaySize(int,android.graphics.Point)> ()
<android.view.IWindowManager$Stub: void getBaseDisplaySize(int,android.graphics.Point)> (2)
<com.android.server.am.ProcessList: void applyDisplaySize(com.android.server.wm.WindowManagerService)> (1)
<android.view.IWindowManager$Stub$Proxy: void getInitialDisplaySize(int,android.graphics.Point)> ()
<android.view.IWindowManager$Stub: void getInitialDisplaySize(int,android.graphics.Point)> (2)
<com.android.server.power.PowerManagerService: boolean updateDisplayPowerStateLocked(int)> (1)
<com.android.server.display.RampAnimator$Listener: void onAnimationEnd()> (2)
<com.android.server.display.AutomaticBrightnessController: void updateAutoBrightness(boolean)> (3)
<com.android.server.wm.AppWindowAnimator: boolean stepAnimationLocked(long)> (1)
<com.android.server.wm.WindowStateAnimator: void destroyDeferredSurfaceLocked()> (2)
<com.android.server.wm.WindowStateAnimator: void destroySurfaceLocked()> (5)
<com.android.server.wm.WindowStateAnimator: void finishExit()> (3)
<android.view.IWindowManager: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,boolean)> ()
<com.android.server.am.ActivityStack: boolean startPausingLocked(boolean,boolean,boolean,boolean)> (6)
<com.android.server.am.ActivityStackSupervisor: void handleLaunchTaskBehindCompleteLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.TaskRecord: android.app.ActivityManager$TaskThumbnail getTaskThumbnailLocked()> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier$MagnifiedViewport: void recomputeBoundsLocked()> (5)
<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void computeChangedWindows()> (3)
<com.android.server.wm.WindowManagerService: boolean applyAnimationLocked(com.android.server.wm.AppWindowToken,android.view.WindowManager$LayoutParams,int,boolean,boolean)> (1)
<com.android.server.wm.WindowManagerService: boolean checkWaitingForWindowsLocked()> (1)
<com.android.server.wm.WindowManagerService: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> (2)
<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)> (7)
<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)> (4)
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()> (1)
<com.android.server.wm.WindowManagerService: void addInputMethodWindowToListLocked(com.android.server.wm.WindowState)> (1)
<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)> (3)
<com.android.server.wm.WindowManagerService: void updateStatusBarVisibilityLocked(int)> (2)
<android.view.IWindowManager$Stub$Proxy: int getPreferredOptionsPanelGravity()> ()
<android.view.IWindowManager$Stub: int getPreferredOptionsPanelGravity()> (2)
<com.android.server.wm.WindowManagerService: void <init>(android.content.Context,com.android.server.input.InputManagerService,boolean,boolean,boolean,com.android.server.wm.WindowManagerService$1)> (1)
<com.android.server.InputMethodManagerService: void unbindCurrentMethodLocked(boolean,boolean)> (4)
<android.view.IWindowManager$Stub$Proxy: void setAppVisibility(android.os.IBinder,boolean)> ()
<android.view.IWindowManager$Stub: void setAppVisibility(android.os.IBinder,boolean)> (2)
<com.android.server.am.ActivityStackSupervisor: java.util.ArrayList processStoppingActivitiesLocked(boolean)> (2)
<com.android.server.am.ActivityStack: void setVisibile(com.android.server.am.ActivityRecord,boolean)> (1)
<com.android.server.wm.WindowManagerService: void showCircularDisplayMaskIfNeeded()> (1)
<com.android.server.wm.WindowManagerService: void showEmulatorDisplayOverlayIfNeeded()> (1)
<com.android.server.wm.WindowManagerService: void access$800(com.android.server.wm.WindowManagerService,int,int)> (1)
<com.android.server.wm.WindowManagerService: void dumpAnimatorLocked(java.io.PrintWriter,java.lang.String[],boolean)> (1)
<com.android.server.wm.DragState: com.android.server.wm.WindowState getTouchedWinAtPointLw(float,float)> (2)
<com.android.server.wm.DragState: void broadcastDragStartedLw(float,float)> (1)
<android.view.IWindowSession$Stub$Proxy: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<com.android.server.wm.Session: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub$Proxy: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (2)
<com.android.server.wm.Session: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<android.view.IWindowManager: int getBaseDisplayDensity(int)> (1)
<android.view.IWindowManager: int getInitialDisplayDensity(int)> (1)
<android.view.IWindowManager: void getBaseDisplaySize(int,android.graphics.Point)> (1)
<android.view.IWindowManager: void getInitialDisplaySize(int,android.graphics.Point)> (2)
<com.android.server.power.PowerManagerService: void updatePowerStateLocked()> (19)
<com.android.server.display.RampAnimator$1: void run()> (1)
<com.android.server.display.RampAnimator: boolean animateTo(int,int)> (1)
<com.android.server.display.AutomaticBrightnessController: void access$300(com.android.server.display.AutomaticBrightnessController,boolean)> (1)
<com.android.server.display.AutomaticBrightnessController: void configure(boolean,float)> (1)
<com.android.server.display.AutomaticBrightnessController: void updateAmbientLux(long)> (2)
<com.android.server.wm.WindowState: void removeLocked()> (1)
<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked(com.android.server.wm.DisplayContent)> (2)
<com.android.server.wm.WindowStateAnimator: void cancelExitAnimationForNextAnimationLocked()> (1)
<com.android.server.am.ActivityStack: boolean checkReadyForSleepLocked()> (2)
<com.android.server.am.ActivityStackSupervisor: boolean pauseBackStacks(boolean,boolean,boolean)> (1)
<com.android.server.am.ActivityStackSupervisor: void pauseChildStacks(com.android.server.am.ActivityRecord,boolean,boolean,boolean,boolean)> (1)
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier$MagnifiedViewport: void drawWindowIfNeededLocked()> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier$MagnifiedViewport: void <init>(com.android.server.wm.AccessibilityController$DisplayMagnifier)> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier$MagnifiedViewport: void onRotationChangedLocked()> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onWindowLayersChangedLocked()> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier: void setMagnificationSpecLocked(android.view.MagnificationSpec)> (1)
<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void <init>(com.android.server.wm.WindowManagerService,android.view.WindowManagerInternal$WindowsForAccessibilityCallback)> (1)
<com.android.server.wm.AccessibilityController$WindowsForAccessibilityObserver: void scheduleComputeChangedWindowsLocked()> (6)
<android.view.IWindowManager$Stub$Proxy: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> ()
<android.view.IWindowManager$Stub: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> (2)
<android.view.IWindowManager: int getPreferredOptionsPanelGravity()> (1)
<com.android.server.wm.WindowManagerService$2: void run()> (1)
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputInnerLocked()> (3)
<com.android.server.InputMethodManagerService: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (1)
<com.android.server.InputMethodManagerService: void resetAllInternalStateLocked(boolean,boolean)> (2)
<com.android.server.InputMethodManagerService: void updateInputMethodsFromSettingsLocked(boolean)> (3)
<android.view.IWindowManager: void setAppVisibility(android.os.IBinder,boolean)> ()
<com.android.server.am.ActivityRecord: void windowsVisible()> (1)
<com.android.server.am.ActivityStackSupervisor: com.android.server.am.ActivityRecord activityIdleInternalLocked(android.os.IBinder,boolean,android.content.res.Configuration)> (2)
<com.android.server.am.ActivityStack: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (4)
<com.android.server.wm.WindowManagerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> (1)
<com.android.server.wm.DragState: boolean notifyDropLw(float,float)> (1)
<com.android.server.wm.DragState: void notifyMoveLw(float,float)> (1)
<android.view.IWindowSession: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession$Stub$Proxy: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.IWindowSession$Stub: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> (2)
<android.view.IWindowSession: int addToDisplayWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect)> (1)
<android.view.IWindowSession$Stub$Proxy: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<android.view.IWindowSession$Stub: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> (2)
<com.android.commands.wm.Wm: void runDisplayDensity()> (1)
<com.android.commands.wm.Wm: void runDisplaySize()> (1)
<com.android.internal.view.RotationPolicy: int getRotationLockOrientation(android.content.Context)> ()
<com.android.server.power.PowerManagerService: void access$1100(com.android.server.power.PowerManagerService)> (4)
<com.android.server.power.PowerManagerService: void acquireWakeLockInternal(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)> (1)
<com.android.server.power.PowerManagerService: void goToSleepInternal(long,int,int,int)> (1)
<com.android.server.power.PowerManagerService: void handleBatteryStateChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleSandman()> (1)
<com.android.server.power.PowerManagerService: void handleSettingsChangedLocked()> (1)
<com.android.server.power.PowerManagerService: void handleUserActivityTimeout()> (1)
<com.android.server.power.PowerManagerService: void napInternal(long,int)> (1)
<com.android.server.power.PowerManagerService: void onBootPhase(int)> (1)
<com.android.server.power.PowerManagerService: void removeWakeLockLocked(com.android.server.power.PowerManagerService$WakeLock,int)> (2)
<com.android.server.power.PowerManagerService: void setDozeOverrideFromDreamManagerInternal(int,int)> (1)
<com.android.server.power.PowerManagerService: void setMaximumScreenOffTimeoutFromDeviceAdminInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setScreenBrightnessOverrideFromWindowManagerInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverrideInternal(float)> (1)
<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverrideInternal(int)> (1)
<com.android.server.power.PowerManagerService: void setUserActivityTimeoutOverrideFromWindowManagerInternal(long)> (1)
<com.android.server.power.PowerManagerService: void userActivityInternal(long,int,int,int)> (2)
<com.android.server.power.PowerManagerService: void wakeUpInternal(long,int)> (1)
<com.android.server.display.DisplayPowerController: void animateScreenBrightness(int,int)> (1)
<com.android.server.display.AutomaticBrightnessController$2: void onTwilightStateChanged()> (1)
<com.android.server.display.AutomaticBrightnessController: void handleLightSensorEvent(long,float)> (1)
<com.android.server.display.AutomaticBrightnessController: void updateAmbientLux()> (1)
<com.android.server.am.ActivityStackSupervisor: boolean shutdownLocked(int)> (1)
<com.android.server.am.ActivityStackSupervisor: void checkReadyForSleepLocked()> (9)
<android.app.ActivityManagerNative: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)> (2)
<com.android.server.wm.AccessibilityController$DisplayMagnifier: void drawMagnifiedRegionBorderIfNeededLocked()> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier: void <init>(com.android.server.wm.WindowManagerService,android.view.WindowManagerInternal$MagnificationCallbacks)> (1)
<com.android.server.wm.AccessibilityController$DisplayMagnifier: void onRotationChangedLocked(com.android.server.wm.DisplayContent,int)> (1)
<com.android.server.wm.AccessibilityController: void onWindowLayersChangedLocked()> (1)
<com.android.server.wm.AccessibilityController: void setMagnificationSpecLocked(android.view.MagnificationSpec)> (1)
<com.android.server.wm.AccessibilityController: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)> (1)
<com.android.server.wm.AccessibilityController: void onRotationChangedLocked(com.android.server.wm.DisplayContent,int)> (2)
<com.android.server.wm.AccessibilityController: void onSomeWindowResizedOrMovedLocked()> (2)
<com.android.server.wm.AccessibilityController: void onWindowFocusChangedLocked()> (1)
<com.android.server.wm.AccessibilityController: void onWindowTransitionLocked(com.android.server.wm.WindowState,int)> (5)
<android.view.IWindowManager: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)> (4)
<com.android.internal.policy.impl.PhoneWindow: int getOptionsPanelGravity()> (2)
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputUncheckedLocked(com.android.server.InputMethodManagerService$ClientState,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)> (2)
<com.android.server.InputMethodManagerService: void systemRunning(com.android.server.statusbar.StatusBarManagerService)> (1)
<com.android.server.InputMethodManagerService: void resetStateIfCurrentLocaleChangedLocked()> (2)
<com.android.server.InputMethodManagerService: void switchUserLocked(int)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.InputMethodManagerService: void buildInputMethodListLocked(java.util.ArrayList,java.util.HashMap,boolean)> (5)
<com.android.server.InputMethodManagerService: void updateFromSettingsLocked(boolean)> (3)
<com.android.server.am.ActivityRecord$Token: void windowsVisible()> (2)
<com.android.server.am.ActivityStackSupervisor$ActivityStackSupervisorHandler: void activityIdleInternal(com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActivityStackSupervisor: void ensureActivitiesVisibleLocked(com.android.server.am.ActivityRecord,int)> (7)
<com.android.server.am.ActivityStack: void goToSleep()> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(android.content.pm.ApplicationInfo,int)> (2)
<android.service.wallpaper.WallpaperService$Engine: void updateSurface(boolean,boolean,boolean)> (6)
<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View)> (1)
<android.view.IWindowSession: int add(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.view.InputChannel)> ()
<android.view.SurfaceView: void updateWindow(boolean,boolean)> (14)
<android.view.IWindowSession: int addWithoutInputChannel(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)> ()
<com.android.commands.wm.Wm: void onRun()> (1)
<com.android.server.power.PowerManagerService$2: void onProximityNegative()> (1)
<com.android.server.power.PowerManagerService$2: void onProximityPositive()> (1)
<com.android.server.power.PowerManagerService$2: void onStateChanged()> (1)
<com.android.server.power.PowerManagerService$DockReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void access$3100(com.android.server.power.PowerManagerService,android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String,int,int)> (1)
<com.android.server.power.PowerManagerService: void access$3800(com.android.server.power.PowerManagerService,long,int,int,int)> (1)
<com.android.server.power.PowerManagerService: void access$1900(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void access$2400(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2100(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$2300(com.android.server.power.PowerManagerService)> (2)
<com.android.server.power.PowerManagerService: void access$3900(com.android.server.power.PowerManagerService,long,int)> (1)
<com.android.server.power.PowerManagerService: void handleWakeLockDeath(com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void releaseWakeLockInternal(android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService: void access$5200(com.android.server.power.PowerManagerService,int,int)> (1)
<com.android.server.power.PowerManagerService: void access$4600(com.android.server.power.PowerManagerService,int)> (1)
<com.android.server.power.PowerManagerService: void access$5100(com.android.server.power.PowerManagerService,int)> (1)
<com.android.server.power.PowerManagerService: void access$4800(com.android.server.power.PowerManagerService,float)> (1)
<com.android.server.power.PowerManagerService: void access$4700(com.android.server.power.PowerManagerService,int)> (1)
<com.android.server.power.PowerManagerService: void access$5300(com.android.server.power.PowerManagerService,long)> (1)
<com.android.server.power.PowerManagerService: void access$3600(com.android.server.power.PowerManagerService,long,int,int,int)> (1)
<com.android.server.power.PowerManagerService: void userActivityFromNative(long,int,int)> ()
<com.android.server.power.PowerManagerService: void access$3700(com.android.server.power.PowerManagerService,long,int)> (1)
<com.android.server.display.AutomaticBrightnessController: void access$200(com.android.server.display.AutomaticBrightnessController,long,float)> (1)
<com.android.server.display.AutomaticBrightnessController: void access$000(com.android.server.display.AutomaticBrightnessController)> (1)
<com.android.server.am.ActivityManagerService: boolean shutdown(int)> (2)
<com.android.server.am.ActivityStackSupervisor: void activitySleptLocked(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStackSupervisor: void goingToSleepLocked()> (2)
<com.android.server.am.ActivityStack: void completePauseLocked(boolean)> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleSleepTimeout()> (1)
<android.app.IActivityManager: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)> (1)
<com.android.server.wm.AccessibilityController: void drawMagnifiedRegionBorderIfNeededLocked()> (1)
<com.android.server.wm.AccessibilityController: void setMagnificationCallbacksLocked(android.view.WindowManagerInternal$MagnificationCallbacks)> (1)
<com.android.server.wm.WindowManagerService: void assignLayersLocked(com.android.server.wm.WindowList)> (8)
<com.android.server.wm.WindowManagerService$LocalService: void setMagnificationSpec(android.view.MagnificationSpec)> (1)
<com.android.server.wm.WindowManagerService$LocalService: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)> (1)
<com.android.server.wm.WindowState: void reportResized()> (2)
<com.android.server.wm.WindowStateAnimator: void applyEnterAnimationLocked()> (2)
<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputLocked(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)> (1)
<com.android.internal.policy.impl.PhoneWindow: void onOptionsPanelRotationChanged()> (1)
<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)> (5)
<com.android.server.InputMethodManagerService: void access$1100(com.android.server.InputMethodManagerService)> (1)
<com.android.server.InputMethodManagerService: void access$1000(com.android.server.InputMethodManagerService,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.InputMethodManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)> (1)
<android.view.IApplicationToken$Stub$Proxy: void windowsVisible()> ()
<android.view.IApplicationToken$Stub: void windowsVisible()> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleTimeoutLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityStackSupervisor: void scheduleIdleLocked()> (6)
<com.android.server.am.ActivityManagerService: void handleAppDiedLocked(com.android.server.am.ProcessRecord,boolean,boolean)> (4)
<com.android.server.am.ActivityStackSupervisor: boolean attachApplicationLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.CompatModePackages: void setFrontActivityScreenCompatModeLocked(int)> (1)
<com.android.server.am.CompatModePackages: void setPackageScreenCompatModeLocked(java.lang.String,int)> (2)
<android.service.wallpaper.WallpaperService$Engine: void attach(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)> (1)
<android.service.wallpaper.WallpaperService$Engine: void doDisplayPaddingChanged(android.graphics.Rect)> (1)
<android.service.wallpaper.WallpaperService$Engine: void reportVisibility()> (2)
<android.service.wallpaper.WallpaperService$Engine: void setOffsetNotificationsEnabled(boolean)> ()
<android.service.wallpaper.WallpaperService$Engine: void setTouchEventsEnabled(boolean)> ()
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void executeMessage(android.os.Message)> (1)
<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window)> (1)
<com.android.internal.os.BaseCommand: void onRun()> (1)
<com.android.server.power.PowerManagerService$BatteryReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void scheduleSandmanLocked()> (2)
<com.android.server.power.PowerManagerService$SettingsObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.power.PowerManagerService$UserSwitchedReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.power.PowerManagerService: void updateUserActivitySummaryLocked(long,int)> (1)
<com.android.server.power.PowerManagerService: void access$2600(com.android.server.power.PowerManagerService,com.android.server.power.PowerManagerService$WakeLock)> (1)
<com.android.server.power.PowerManagerService: void access$3200(com.android.server.power.PowerManagerService,android.os.IBinder,int)> (1)
<com.android.server.power.PowerManagerService$LocalService: void setDozeOverrideFromDreamManager(int,int)> (1)
<com.android.server.power.PowerManagerService$LocalService: void setScreenBrightnessOverrideFromWindowManager(int)> (1)
<com.android.server.power.PowerManagerService$LocalService: void setUserActivityTimeoutOverrideFromWindowManager(long)> (1)
<com.android.server.display.AutomaticBrightnessController$1: void onSensorChanged(android.hardware.SensorEvent)> (1)
<android.app.ActivityManagerNative: boolean shutdown(int)> (2)
<com.android.server.am.ActivityManagerService$13: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.am.ActivityManagerService: void goToSleepIfNeededLocked()> (2)
<com.android.server.am.ActivityStack: void activityPausedLocked(android.os.IBinder,boolean)> (3)
<android.app.ActivityManager: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)> ()
<com.android.server.wm.WindowManagerService$LocalService: void setMagnificationCallbacks(android.view.WindowManagerInternal$MagnificationCallbacks)> (1)
<android.view.WindowManagerInternal: void setMagnificationSpec(android.view.MagnificationSpec)> (1)
<android.view.WindowManagerInternal: void setWindowsForAccessibilityCallback(android.view.WindowManagerInternal$WindowsForAccessibilityCallback)> (1)
<com.android.internal.policy.impl.PhoneWindow$RotationWatcher: void dispatchRotationChanged()> (1)
<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: void openPanel(int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: void openPanelsAfterRestore()> (1)
<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)> (3)
<com.android.internal.policy.impl.PhoneWindow: void togglePanel(int,android.view.KeyEvent)> (1)
<com.android.server.InputMethodManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.InputMethodManagerService$3: void onUserSwitching(int,android.os.IRemoteCallback)> (2)
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()> (8)
<android.view.IApplicationToken$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.IApplicationToken: void windowsVisible()> (1)
<com.android.server.am.ActivityStack: void clearLaunchTime(com.android.server.am.ActivityRecord)> (1)
<com.android.server.am.ActivityStack: void completeResumeLocked(com.android.server.am.ActivityRecord)> (2)
<com.android.server.am.ActivityManagerService: boolean forceStopPackageLocked(java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (7)
<com.android.server.am.ActivityManagerService: boolean attachApplicationLocked(android.app.IApplicationThread,int)> (1)
<com.android.server.am.ActivityManagerService: boolean removeProcessLocked(com.android.server.am.ProcessRecord,boolean,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean,int,boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.Runnable)> (2)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)> (2)
<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)> (1)
<com.android.server.am.CompatModeDialog$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<android.service.wallpaper.WallpaperService$Engine$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<android.service.wallpaper.WallpaperService$Engine: void doVisibilityChanged(boolean)> (1)
<android.view.WindowManagerImpl: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> (2)
<com.android.internal.os.BaseCommand: void run(java.lang.String[])> (5)
<com.android.server.power.PowerManagerService: void access$2000(com.android.server.power.PowerManagerService)> (1)
<com.android.server.power.PowerManagerService: void updateDreamLocked(int,boolean)> (1)
<com.android.server.power.PowerManagerService$WakeLock: void binderDied()> (1)
<android.os.PowerManagerInternal: void setDozeOverrideFromDreamManager(int,int)> (2)
<android.os.PowerManagerInternal: void setScreenBrightnessOverrideFromWindowManager(int)> (1)
<android.os.PowerManagerInternal: void setUserActivityTimeoutOverrideFromWindowManager(long)> (1)
<android.app.IActivityManager: boolean shutdown(int)> (1)
<com.android.server.am.ActivityManagerService: void finishRunningVoiceLocked()> (1)
<com.android.server.am.ActivityManagerService: void goingToSleep()> (1)
<android.view.WindowManagerInternal: void setMagnificationCallbacks(android.view.WindowManagerInternal$MagnificationCallbacks)> (2)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setMagnificationSpec(android.view.MagnificationSpec)> (3)
<com.android.server.accessibility.AccessibilityManagerService: void updateWindowsForAccessibilityCallbackLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.internal.policy.impl.PhoneWindow$RotationWatcher$1: void run()> (1)
<com.android.internal.policy.impl.PhoneWindow: boolean onKeyUp(int,int,android.view.KeyEvent)> (1)
<com.android.internal.policy.impl.PhoneWindow: void access$2200(com.android.internal.policy.impl.PhoneWindow)> (1)
<com.android.internal.policy.impl.PhoneWindow: void onConfigurationChanged(android.content.res.Configuration)> (1)
<com.android.internal.policy.impl.PhoneWindow: void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)> (1)
<android.app.IUserSwitchObserver$Stub$Proxy: void onUserSwitching(int,android.os.IRemoteCallback)> ()
<com.android.internal.content.PackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (18)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.am.ActivityManagerService$3: void onSomePackagesChanged()> (1)
<com.android.server.LocationManagerService$4: void onSomePackagesChanged()> (1)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.print.PrintManagerService$PrintManagerImpl$2: void onSomePackagesChanged()> (1)
<com.android.server.ServiceWatcher$2: void onSomePackagesChanged()> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onSomePackagesChanged()> (1)
<com.android.server.am.ActivityRecord$Token: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService: boolean access$400(com.android.server.am.ActivityManagerService,java.lang.String,int,boolean,boolean,boolean,boolean,boolean,int,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: int broadcastIntentLocked(com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (14)
<com.android.server.am.ActivityManagerService: void finishInstrumentationLocked(com.android.server.am.ProcessRecord,int,android.os.Bundle)> (4)
<com.android.server.am.ActivityManagerService: void forceStopPackageLocked(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void forceStopUserLocked(int,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: boolean handleAppCrashLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: boolean killPackageProcessesLocked(java.lang.String,int,int,int,boolean,boolean,boolean,boolean,java.lang.String)> (3)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord startProcessLocked(java.lang.String,android.content.pm.ApplicationInfo,boolean,int,java.lang.String,android.content.ComponentName,boolean,boolean,boolean)> (5)
<com.android.server.am.ActivityManagerService: int startIsolatedProcess(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,int,java.lang.Runnable)> (1)
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void binderDied()> (1)
<com.android.server.am.ActivityManagerService: void appDiedLocked(com.android.server.am.ProcessRecord)> (4)
<android.app.ActivityManagerNative: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.commands.am.Am: void run(java.lang.String[])> (2)
<com.android.commands.appops.AppOpsCommand: void run(java.lang.String[])> (2)
<com.android.commands.dpm.Dpm: void run(java.lang.String[])> (2)
<com.android.commands.media.Media: void run(java.lang.String[])> (2)
<com.android.commands.wm.Wm: void run(java.lang.String[])> (2)
<com.android.server.power.PowerManagerService$DreamReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.dreams.DreamManagerService: void startDozingInternal(android.os.IBinder,int,int)> (1)
<com.android.server.dreams.DreamManagerService: void stopDozingInternal(android.os.IBinder)> (1)
<com.android.server.power.ShutdownThread: void run()> (2)
<com.android.server.am.ActivityManagerService$LocalService: void goingToSleep()> (1)
<com.android.server.accessibility.ScreenMagnifier: void <init>(android.content.Context,int,com.android.server.accessibility.AccessibilityManagerService)> (1)
<com.android.server.accessibility.ScreenMagnifier: void onDestroy()> (2)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void offsetMagnifiedRegionCenter(float,float)> (2)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void reset(boolean)> (4)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setScaleAndMagnifiedRegionCenter(float,float,float,boolean)> (5)
<com.android.server.accessibility.AccessibilityManagerService: void onUserStateChangedLocked(com.android.server.accessibility.AccessibilityManagerService$UserState)> (5)
<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean dispatchKeyEvent(android.view.KeyEvent)> (3)
<com.android.internal.policy.impl.PhoneWindow$DecorView: void onAttachedToWindow()> (3)
<com.android.internal.view.menu.MenuBuilder$Callback: void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.app.ResolverActivity$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.accessibility.AccessibilityManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.ActivityManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.LocationManagerService$4: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.print.PrintManagerService$PrintManagerImpl$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.ServiceWatcher$2: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.trust.TrustManagerService$3: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.tv.TvInputManagerService$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$1: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void onReceive(android.content.Context,android.content.Intent)> (2)
<com.android.server.am.ActivityManagerService$3: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.am.ActivityManagerService: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: boolean deliverPreBootCompleted(java.lang.Runnable,java.util.ArrayList,int)> (1)
<com.android.server.am.ActivityManagerService: int access$200(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String,android.content.Intent,java.lang.String,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,int,boolean,boolean,int,int,int)> (3)
<com.android.server.am.ActivityManagerService: void closeSystemDialogsLocked(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void finishUserBoot(com.android.server.am.UserStartedState)> (2)
<com.android.server.am.ActivityManagerService: boolean inputDispatchingTimedOut(com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord,com.android.server.am.ActivityRecord,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService: void finishUserStop(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: boolean makeAppCrashingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void killAppAtUsersRequest(com.android.server.am.ProcessRecord,android.app.Dialog)> (6)
<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: java.lang.String bringUpServiceLocked(com.android.server.am.ServiceRecord,int,boolean,boolean)> (3)
<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.BroadcastQueue: void processNextBroadcast(boolean)> (6)
<com.android.server.am.ActivityManagerService$LocalService: int startIsolatedProcess(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,int,java.lang.Runnable)> (1)
<com.android.server.am.ActiveServices: void realStartServiceLocked(com.android.server.am.ServiceRecord,com.android.server.am.ProcessRecord,boolean)> (2)
<android.app.IActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> (2)
<com.android.commands.am.Am: void main(java.lang.String[])> ()
<com.android.commands.appops.AppOpsCommand: void main(java.lang.String[])> ()
<com.android.commands.dpm.Dpm: void main(java.lang.String[])> ()
<com.android.commands.media.Media: void main(java.lang.String[])> ()
<com.android.commands.wm.Wm: void main(java.lang.String[])> ()
<com.android.server.dreams.DreamManagerService: void access$1800(com.android.server.dreams.DreamManagerService,android.os.IBinder,int,int)> (1)
<com.android.server.dreams.DreamManagerService: void access$1900(com.android.server.dreams.DreamManagerService,android.os.IBinder)> (1)
<com.android.server.power.ShutdownThread: void beginShutdownSequence(android.content.Context)> (2)
<android.app.ActivityManagerInternal: void goingToSleep()> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void enableFeatures()> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void disableFeatures()> (4)
<com.android.server.accessibility.EventStreamTransformation: void onDestroy()> ()
<com.android.server.accessibility.ScreenMagnifier$MagnifiedContentInteractonStateHandler: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnRectangleOnScreenRequested(int,int,int,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTap(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void handleOnScreenStateChange(java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier$StateViewportDraggingHandler: void onMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void resetMagnificationIfNeeded()> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onActionTapAndHold(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setMagnifiedRegionCenter(float,float,boolean)> (1)
<com.android.server.accessibility.ScreenMagnifier$MagnificationController: void setScale(float,float,float,boolean)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnMagnifiedBoundsChanged(android.graphics.Region)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void access$500(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (9)
<com.android.server.accessibility.AccessibilityManagerService: void ensureWindowsAvailableTimed()> (1)
<com.android.server.accessibility.AccessibilityManagerService: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void switchUser(int)> (1)
<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> (2)
<android.widget.ActionMenuView$MenuBuilderCallback: void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)> (1)
<com.android.internal.view.menu.MenuBuilder: void changeMenuMode()> (4)
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (13)
<android.app.ActivityManagerNative: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (2)
<com.android.server.am.ActivityManagerService$29: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void finishUserSwitch(com.android.server.am.UserStartedState)> (1)
<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<com.android.server.am.ActivityRecord: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<com.android.server.am.ActivityManagerService$28: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.am.ActivityStack: void releaseBackgroundResources()> (2)
<android.app.ActivityManagerNative: void killUid(int,java.lang.String)> (2)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceInnerLocked(com.android.server.am.ActiveServices$ServiceMap,android.content.Intent,com.android.server.am.ServiceRecord,boolean,boolean)> (2)
<com.android.server.am.ActiveServices: void performServiceRestartLocked(com.android.server.am.ServiceRecord)> (1)
<android.app.ActivityManagerNative: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (2)
<com.android.server.am.BroadcastQueue: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void broadcastTimeoutLocked(boolean)> (3)
<com.android.server.am.BroadcastQueue: void scheduleBroadcastsLocked()> (7)
<android.app.ActivityManagerInternal: int startIsolatedProcess(java.lang.String,java.lang.String[],java.lang.String,java.lang.String,int,java.lang.Runnable)> (1)
<com.android.server.am.ActiveServices: boolean attachApplicationLocked(com.android.server.am.ProcessRecord,java.lang.String)> (1)
<android.app.ActivityManager: void setPackageScreenCompatMode(java.lang.String,int)> ()
<com.android.commands.am.Am: void runScreenCompat()> (1)
<com.android.server.power.ShutdownThread: void access$000(android.content.Context)> (1)
<com.android.server.power.ShutdownThread: void shutdownInner(android.content.Context,boolean)> (3)
<com.android.server.power.Notifier$2: void run()> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void onInstalled()> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void setEnabledFeatures(int)> (1)
<com.android.server.accessibility.AccessibilityInputFilter: void onUninstalled()> (1)
<com.android.server.accessibility.AccessibilityManagerService: void updateInputFilter(com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$100(com.android.server.accessibility.ScreenMagnifier,int,int,int,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver: void access$2900(com.android.server.accessibility.ScreenMagnifier$ScreenStateObserver,java.lang.String)> (1)
<com.android.server.accessibility.ScreenMagnifier$StateViewportDraggingHandler: void access$600(com.android.server.accessibility.ScreenMagnifier$StateViewportDraggingHandler,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnRotationChanged(int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleOnUserContextChanged()> (1)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1700(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler,android.view.MotionEvent,int)> (2)
<com.android.server.accessibility.ScreenMagnifier$MagnifiedContentInteractonStateHandler: boolean onScale(android.view.ScaleGestureDetector)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$000(com.android.server.accessibility.ScreenMagnifier,android.graphics.Region)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onSomePackagesChanged()> (1)
<com.android.server.accessibility.AccessibilityManagerService$2: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.accessibility.AccessibilityManagerService$4: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void onChange(boolean,android.net.Uri)> (1)
<com.android.server.accessibility.AccessibilityManagerService$Service: void binderDied()> (6)
<com.android.server.accessibility.AccessibilityManagerService$Service: void onServiceConnected(android.content.ComponentName,android.os.IBinder)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$3300(com.android.server.accessibility.AccessibilityManagerService)> (2)
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)> ()
<android.view.accessibility.IAccessibilityManager$Stub: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$800(com.android.server.accessibility.AccessibilityManagerService,int)> (1)
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> ()
<android.view.accessibility.IAccessibilityManager$Stub: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> (2)
<android.widget.ActionMenuPresenter$OpenOverflowRunnable: void run()> (1)
<com.android.internal.view.menu.ContextMenuBuilder: void changeMenuMode()> (1)
<com.android.internal.view.menu.IconMenuView$1: void onClick(android.view.View)> (1)
<com.android.internal.view.menu.SubMenuBuilder: void changeMenuMode()> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.app.ResolverActivity$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.LocationManagerService$4: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.ServiceWatcher$2: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.trust.TrustManagerService$3: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.tv.TvInputManagerService$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$1: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)> (1)
<android.app.IActivityManager: void killApplicationWithAppId(java.lang.String,int,java.lang.String)> (1)
<android.content.IIntentReceiver$Stub$Proxy: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> ()
<android.content.IIntentReceiver$Stub: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.ActivityManagerNative: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (2)
<com.android.server.am.ActivityRecord$Token: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<android.app.IActivityManager: void killUid(int,java.lang.String)> (1)
<com.android.server.am.ActiveServices: android.content.ComponentName startServiceLocked(android.app.IApplicationThread,android.content.Intent,java.lang.String,int,int,int)> (2)
<com.android.server.am.ActiveServices$ServiceMap: void rescheduleDelayedStarts()> (4)
<com.android.server.am.ActiveServices$ServiceRestarter: void run()> (1)
<android.app.IActivityManager: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)> (1)
<com.android.server.am.ActivityManagerService: void backgroundServicesFinishedLocked(int)> (1)
<com.android.server.am.BroadcastQueue: void setBroadcastTimeoutLocked(long)> (2)
<com.android.server.am.ActivityManagerService: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (1)
<com.android.server.am.BroadcastQueue: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.BroadcastQueue: void skipPendingBroadcastLocked(int)> (1)
<android.webkit.WebViewFactory: void createRelroFile(boolean,java.lang.String[])> (1)
<com.android.commands.am.Am: void onRun()> (1)
<com.android.server.power.ShutdownThread$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.server.power.ShutdownThread: void reboot(android.content.Context,java.lang.String,boolean)> (1)
<com.android.server.power.ShutdownThread: void rebootSafeMode(android.content.Context,boolean)> (1)
<com.android.server.power.ShutdownThread: void shutdown(android.content.Context,boolean)> (2)
<com.android.server.accessibility.AccessibilityManagerService: void access$2100(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$UserState)> (1)
<com.android.server.accessibility.ScreenMagnifier: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (2)
<com.android.server.accessibility.ScreenMagnifier: void access$300(com.android.server.accessibility.ScreenMagnifier,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void access$200(com.android.server.accessibility.ScreenMagnifier)> (2)
<com.android.internal.content.PackageMonitor: void onPackageRemoved(java.lang.String,int)> (12)
<com.android.server.accessibility.AccessibilityManagerService$UserState$1: void binderDied()> (1)
<com.android.server.accessibility.AccessibilityManagerService$UserState: void onSwitchToAnotherUser()> (1)
<com.android.server.accessibility.AccessibilityManagerService: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.server.accessibility.AccessibilityManagerService$Service$2: void run()> (1)
<com.android.server.accessibility.AccessibilityManagerService$Service: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> (2)
<com.android.server.accessibility.AccessibilityManagerService$Service: java.util.List getWindows()> (2)
<android.view.accessibility.IAccessibilityManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.accessibility.IAccessibilityManager: void registerUiTestAutomationService(android.os.IBinder,android.accessibilityservice.IAccessibilityServiceClient,android.accessibilityservice.AccessibilityServiceInfo)> (1)
<android.view.accessibility.IAccessibilityManager: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)> (1)
<com.android.server.pm.PackageManagerService: void killApplication(java.lang.String,int,java.lang.String)> (4)
<android.content.IIntentReceiver$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (14)
<android.content.IIntentReceiver: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<android.app.IActivityManager: long inputDispatchingTimedOut(int,boolean,java.lang.String)> (1)
<android.view.IApplicationToken$Stub$Proxy: boolean keyDispatchingTimedOut(java.lang.String)> ()
<android.view.IApplicationToken$Stub: boolean keyDispatchingTimedOut(java.lang.String)> (2)
<com.android.server.am.ActiveServices$ServiceMap: void ensureNotStartingBackground(com.android.server.am.ServiceRecord)> (4)
<com.android.server.backup.BackupManagerService: android.app.IBackupAgent bindToAgentSynchronous(android.content.pm.ApplicationInfo,int)> (5)
<android.app.ActivityManagerNative: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean sendPendingBroadcastsLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void skipPendingBroadcastLocked(int)> (1)
<android.webkit.WebViewFactory: void prepareWebViewInSystemServer(java.lang.String[])> (2)
<com.android.server.power.PowerManagerService$3: void run()> (1)
<com.android.server.wm.WindowManagerService: void rebootSafeMode(boolean)> (1)
<com.android.server.wm.WindowManagerService: void shutdown(boolean)> (1)
<com.android.server.accessibility.EventStreamTransformation: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (3)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void sendDelayedMotionEvents()> (2)
<com.android.server.accessibility.ScreenMagnifier: void onUserContextChanged()> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.LocationManagerService$4: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.trust.TrustManagerService$3: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$1: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)> (1)
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> ()
<android.view.accessibility.IAccessibilityManager$Stub: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> ()
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> (2)
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: java.util.List getWindows()> ()
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: java.util.List getWindows()> (2)
<com.android.server.accessibility.AccessibilityManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.UiAutomationConnection: void registerUiTestAutomationServiceLocked(android.accessibilityservice.IAccessibilityServiceClient)> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void enableAccessibility()> (1)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageDirtyLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (1)
<com.android.server.pm.PackageManagerService: boolean deletePackageLI(java.lang.String,android.os.UserHandle,boolean,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (5)
<com.android.server.pm.PackageManagerService: void replaceSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.PendingIntent$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.content.IntentSender$FinishedDispatcher: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.am.Am$IntentReceiver: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.commands.monkey.MonkeyNetworkMonitor: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$14: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$16: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$24: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$25: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$28: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$29: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.ActivityManagerService$8: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.pm.PackageManagerService$12: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.am.BroadcastQueue: void performReceiveLocked(com.android.server.am.ProcessRecord,android.content.IIntentReceiver,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,int)> (2)
<com.android.server.wm.InputMonitor: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<android.view.IApplicationToken: boolean keyDispatchingTimedOut(java.lang.String)> (1)
<com.android.server.am.ActiveServices: void bringDownServiceLocked(com.android.server.am.ServiceRecord)> (5)
<com.android.server.backup.BackupManagerService$FullBackupEngine: int backupOnePackage(android.content.pm.PackageInfo)> (2)
<com.android.server.backup.BackupManagerService$FullRestoreEngine: boolean restoreOneFile(java.io.InputStream)> (1)
<com.android.server.backup.BackupManagerService$PerformAdbRestoreTask: boolean restoreOneFile(java.io.InputStream,byte[])> (1)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void invokeNextAgent()> (1)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask: void restoreKeyValue()> (1)
<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,java.lang.String,android.content.IIntentReceiver,android.content.IntentFilter,java.lang.String,int)> (2)
<com.android.server.am.ActivityManagerService: boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord,boolean,boolean,int)> (2)
<com.android.server.am.ActivityManagerService: void startAppProblemLocked(com.android.server.am.ProcessRecord)> (2)
<com.android.server.am.ActivityManagerService: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<android.webkit.WebViewFactory: void onWebViewUpdateInstalled()> (1)
<android.webkit.WebViewFactory: void prepareWebViewInSystemServer()> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void rebootSafeMode(boolean)> (1)
<android.view.WindowManagerPolicy$WindowManagerFuncs: void shutdown(boolean)> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void handleMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void handleMotionEventStateDelegating(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendMotionEvent(android.view.MotionEvent,int,int,int)> (9)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void access$1800(com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler)> (2)
<com.android.server.accessibility.ScreenMagnifier$DetectingStateHandler: void transitionToDelegatingStateAndClear()> (1)
<android.view.accessibility.IAccessibilityManager: void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)> (1)
<android.accessibilityservice.IAccessibilityServiceConnection: android.view.accessibility.AccessibilityWindowInfo getWindow(int)> (1)
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.accessibilityservice.IAccessibilityServiceConnection: java.util.List getWindows()> (1)
<android.app.UiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.internal.policy.impl.EnableAccessibilityController: void access$200(com.android.internal.policy.impl.EnableAccessibilityController)> (2)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(android.content.pm.PackageParser$Package,int,int,long,android.os.UserHandle)> (4)
<com.android.server.pm.PackageManagerService: android.content.pm.PackageParser$Package scanPackageLI(java.io.File,int,int,long,android.os.UserHandle)> (5)
<com.android.server.pm.PackageManagerService: int deletePackageX(java.lang.String,int,int)> (1)
<com.android.server.pm.PackageManagerService: void installNewPackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void replaceNonSystemPackageLI(android.content.pm.PackageParser$Package,android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,int[],boolean[],java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void unloadMediaPackages(android.util.ArrayMap,int[],boolean)> (1)
<com.android.server.pm.PackageManagerService: void replacePackageLI(android.content.pm.PackageParser$Package,int,int,android.os.UserHandle,java.lang.String,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.am.BroadcastQueue: void deliverToRegisteredReceiverLocked(com.android.server.am.BroadcastRecord,com.android.server.am.BroadcastFilter,boolean)> (1)
<com.android.server.input.InputManagerService$WindowManagerCallbacks: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> (1)
<com.android.server.am.ActiveServices: boolean forceStopLocked(java.lang.String,int,boolean,boolean)> (1)
<com.android.server.am.ActiveServices: void bringDownServiceIfNeededLocked(com.android.server.am.ServiceRecord,boolean,boolean)> (3)
<com.android.server.am.ActiveServices: void killServicesLocked(com.android.server.am.ProcessRecord,boolean)> (1)
<com.android.server.am.ActiveServices: void processStartTimedOutLocked(com.android.server.am.ProcessRecord)> (1)
<com.android.server.backup.BackupManagerService$PerformAdbBackupTask: void run()> ()
<com.android.server.backup.BackupManagerService$PerformFullTransportBackupTask$SinglePackageBackupRunner: void run()> (1)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask$EngineThread: void run()> (1)
<com.android.server.backup.BackupManagerService$PerformAdbRestoreTask: void run()> (1)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void execute()> (1)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask: void execute()> (1)
<com.android.commands.monkey.MonkeyNetworkMonitor: void register(android.app.IActivityManager)> (1)
<com.android.server.am.ActivityManagerService: void trimApplications()> (5)
<com.android.server.am.ActivityManagerService: void makeAppNotRespondingLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String)> (1)
<com.android.server.am.ActivityManagerService: void access$300(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord)> (2)
<com.android.server.webkit.WebViewUpdateService: void onWebViewUpdateInstalled()> (1)
<com.android.internal.policy.impl.GlobalActions$PowerAction: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$PowerAction: void onPress()> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void processBatchedEvents(long)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2800(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int,int,int)> (2)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDelegating(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDragging(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateTouchExploring(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendActionDownAndUp(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendDownForAllNotInjectedPointers(android.view.MotionEvent,int)> (3)
<com.android.server.accessibility.TouchExplorer: void sendHoverExitAndTouchExplorationGestureEndIfNeeded(int)> (3)
<com.android.server.accessibility.TouchExplorer: void sendTouchExplorationGestureStartAndHoverEnterIfNeeded(int)> (1)
<com.android.server.accessibility.TouchExplorer: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)> (1)
<android.app.UiAutomationConnection: void unregisterUiTestAutomationServiceLocked()> (1)
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityWindowInfo getWindow(int,int)> (3)
<com.android.server.accessibility.AccessibilityManagerService$Service: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.view.accessibility.AccessibilityInteractionClient: java.util.List getWindows(int)> (2)
<android.app.IUiAutomationConnection$Stub$Proxy: void connect(android.accessibilityservice.IAccessibilityServiceClient)> ()
<android.app.IUiAutomationConnection$Stub: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (2)
<com.android.internal.policy.impl.EnableAccessibilityController: boolean onInterceptTouchEvent(android.view.MotionEvent)> (1)
<com.android.server.pm.PackageManagerService: boolean deleteSystemPackageLI(com.android.server.pm.PackageSetting,int[],boolean[],int,com.android.server.pm.PackageManagerService$PackageRemovedInfo,boolean)> (1)
<com.android.server.pm.PackageManagerService: void <init>(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void loadMediaPackages(android.util.ArrayMap,int[])> (1)
<com.android.server.pm.PackageManagerService: void scanDirLI(java.io.File,int,int,long)> (1)
<com.android.server.pm.PackageManagerService: int access$3900(com.android.server.pm.PackageManagerService,java.lang.String,int,int)> (2)
<com.android.server.pm.PackageManagerService: void installPackageLI(com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatusInner(boolean,boolean,boolean)> (2)
<com.android.server.input.InputManagerService: long notifyANR(com.android.server.input.InputApplicationHandle,com.android.server.input.InputWindowHandle,java.lang.String)> ()
<com.android.server.am.ActiveServices: void removeConnectionLocked(com.android.server.am.ConnectionRecord,com.android.server.am.ProcessRecord,com.android.server.am.ActivityRecord)> (3)
<com.android.server.am.ActiveServices: void stopServiceLocked(com.android.server.am.ServiceRecord)> (4)
<com.android.server.backup.BackupManagerService$BackupRestoreTask: void execute()> (2)
<com.android.commands.monkey.Monkey: boolean getSystemInterfaces()> (1)
<com.android.server.am.ActivityManagerService: void setProcessLimit(int)> (1)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])> (3)
<com.android.server.webkit.WebViewUpdateService: void access$000(com.android.server.webkit.WebViewUpdateService)> (1)
<com.android.internal.policy.impl.GlobalActions$LongPressAction: boolean onLongPress()> (1)
<com.android.internal.policy.impl.GlobalActions$Action: void onPress()> (1)
<com.android.internal.policy.impl.GlobalActions$SinglePressAction: void onPress()> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void access$100(com.android.server.accessibility.AccessibilityInputFilter,long)> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverEnterAndMoveDelayed: void run()> (2)
<com.android.server.accessibility.TouchExplorer$SendHoverExitDelayed: void run()> (2)
<com.android.server.accessibility.TouchExplorer: void onMotionEvent(android.view.MotionEvent,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$1700(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2600(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer: void access$2400(com.android.server.accessibility.TouchExplorer,int)> (1)
<com.android.server.accessibility.TouchExplorer: void clear(android.view.MotionEvent,int)> (5)
<android.app.UiAutomationConnection: void disconnect()> (3)
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityWindowInfo getWindow()> ()
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getChild(int)> ()
<android.view.accessibility.AccessibilityWindowInfo: android.view.accessibility.AccessibilityWindowInfo getParent()> ()
<android.accessibilityservice.AccessibilityService: java.util.List getWindows()> ()
<android.app.UiAutomation: java.util.List getWindows()> ()
<android.app.IUiAutomationConnection$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IUiAutomationConnection: void connect(android.accessibilityservice.IAccessibilityServiceClient)> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService main(android.content.Context,com.android.server.pm.Installer,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService$14: void run()> (1)
<com.android.server.pm.PackageManagerService$8: void run()> (1)
<com.android.server.pm.PackageManagerService: void access$2300(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,com.android.server.pm.PackageManagerService$PackageInstalledInfo)> (1)
<com.android.server.pm.PackageManagerService: void access$4400(com.android.server.pm.PackageManagerService,boolean,boolean,boolean)> (1)
<com.android.server.pm.PackageManagerService: void scanAvailableAsecs()> (1)
<com.android.server.am.ActiveServices: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,android.content.ComponentName,android.content.Intent)> (1)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void executeNextState(com.android.server.backup.BackupManagerService$BackupState)> (4)
<com.android.commands.monkey.Monkey: int run(java.lang.String[])> (1)
<android.app.ActivityManagerNative: void setProcessLimit(int)> (2)
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo,boolean,java.lang.String)> (4)
<com.android.server.am.ActivityManagerService: void startProcessLocked(com.android.server.am.ProcessRecord,java.lang.String,java.lang.String)> (3)
<com.android.server.webkit.WebViewUpdateService$1: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.policy.impl.GlobalActions$2: boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.internal.policy.impl.GlobalActions: void onClick(android.content.DialogInterface,int)> (1)
<com.android.internal.policy.impl.GlobalActions: void handleShow()> (2)
<com.android.server.accessibility.AccessibilityInputFilter$1: void run()> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverEnterAndMoveDelayed: void forceSendAndRemove()> (1)
<com.android.server.accessibility.TouchExplorer$SendHoverExitDelayed: void forceSendAndRemove()> ()
<com.android.server.accessibility.TouchExplorer$DoubleTapDetector: void onDoubleTap(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void run()> (1)
<com.android.server.accessibility.TouchExplorer: void clear()> (3)
<com.android.server.accessibility.TouchExplorer: void handleMotionEventGestureDetecting(android.view.MotionEvent,int)> (2)
<android.app.IUiAutomationConnection$Stub$Proxy: void disconnect()> ()
<android.app.IUiAutomationConnection$Stub: void disconnect()> (2)
<android.app.UiAutomationConnection: void shutdown()> (2)
<android.app.UiAutomationConnection: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.UiAutomation: void connect()> (3)
<com.android.server.pm.PackageManagerService$6: void run()> (1)
<com.android.server.pm.PackageManagerService$11: void run()> (1)
<com.android.server.am.ActivityManagerService: void cleanUpRemovedTaskLocked(com.android.server.am.TaskRecord,int)> (1)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void agentErrorCleanup()> (3)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void beginBackup()> (1)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void operationComplete()> (1)
<com.android.commands.monkey.Monkey: void main(java.lang.String[])> ()
<android.app.IActivityManager: void setProcessLimit(int)> ()
<com.android.internal.policy.impl.GlobalActions: void access$1800(com.android.internal.policy.impl.GlobalActions)> (2)
<com.android.internal.policy.impl.GlobalActions: void showDialog(boolean,boolean)> (1)
<com.android.server.accessibility.TouchExplorer$DoubleTapDetector: void onMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.EventStreamTransformation: void clear()> (3)
<com.android.server.accessibility.TouchExplorer$ExitGestureDetectionModeDelayed: void run()> (1)
<android.app.IUiAutomationConnection: void disconnect()> (1)
<android.app.IUiAutomationConnection$Stub$Proxy: void shutdown()> ()
<android.app.IUiAutomationConnection$Stub: void shutdown()> (2)
<android.app.Instrumentation: android.app.UiAutomation getUiAutomation()> (3)
<com.android.commands.monkey.MonkeySourceNetworkViews: void setup()> (1)
<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()> (3)
<com.android.server.am.ActivityManagerService: boolean removeTaskByIdLocked(int,int)> (4)
<com.android.server.backup.BackupManagerService$PerformBackupTask: int invokeAgentForBackup(java.lang.String,android.app.IBackupAgent,com.android.internal.backup.IBackupTransport)> (2)
<com.android.server.backup.BackupManagerService$PerformBackupTask: void handleTimeout()> (1)
<com.android.server.backup.BackupManagerService$BackupRestoreTask: void operationComplete()> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void onMotionEvent(android.view.MotionEvent,int)> (1)
<com.android.server.accessibility.ScreenMagnifier: void clear()> (2)
<android.app.UiAutomation: void disconnect()> (2)
<android.app.IUiAutomationConnection: void shutdown()> (1)
<android.test.InstrumentationCoreTestRunner: android.app.UiAutomation getUiAutomation()> (2)
<android.test.InstrumentationTestRunner: android.app.UiAutomation getUiAutomation()> (1)
<android.test.LaunchPerformanceBase: android.app.UiAutomation getUiAutomation()> (1)
<com.android.commands.monkey.MonkeySourceNetwork: void startServer()> (1)
<com.android.commands.uiautomator.DumpCommand: void run(java.lang.String[])> (1)
<com.android.commands.uiautomator.EventsCommand: void run(java.lang.String[])> (1)
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void start()> (1)
<com.android.server.am.ActivityManagerService: boolean access$1000(com.android.server.am.ActivityManagerService,int,int)> (3)
<com.android.server.backup.BackupManagerService$BackupRestoreTask: void handleTimeout()> (1)
<com.android.server.backup.BackupManagerService: void opComplete(int)> (2)
<com.android.server.accessibility.AccessibilityInputFilter: void onInputEvent(android.view.InputEvent,int)> (1)
<android.app.Instrumentation: void finish(int,android.os.Bundle)> (3)
<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()> (3)
<com.android.commands.monkey.MonkeySourceNetwork: com.android.commands.monkey.MonkeyEvent getNextEvent()> (1)
<com.android.commands.uiautomator.Launcher$Command: void run(java.lang.String[])> (1)
<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void run(java.util.List,android.os.Bundle,boolean,boolean)> (1)
<com.android.server.am.ActivityManagerService$3: void onPackageModified(java.lang.String)> (2)
<com.android.server.am.ActivityManagerService$3: void onPackageRemoved(java.lang.String,int)> (1)
<com.android.server.backup.BackupManagerService: void handleTimeout(int,java.lang.Object)> (2)
<android.app.backup.IBackupManager$Stub$Proxy: void opComplete(int)> ()
<android.app.backup.IBackupManager$Stub: void opComplete(int)> (2)
<android.test.InstrumentationCoreTestRunner: void finish(int,android.os.Bundle)> (2)
<android.test.InstrumentationTestRunner: void finish(int,android.os.Bundle)> (2)
<android.test.LaunchPerformanceBase: void finish(int,android.os.Bundle)> (1)
<com.android.commands.monkey.MonkeyEventSource: com.android.commands.monkey.MonkeyEvent getNextEvent()> (1)
<com.android.commands.uiautomator.Launcher: void main(java.lang.String[])> ()
<com.android.commands.uiautomator.RunTestCommand: void run(java.lang.String[])> (1)
<com.android.internal.content.PackageMonitor: void onPackageModified(java.lang.String)> (13)
<com.android.server.am.ActivityManagerService$3: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.backup.BackupManagerService: void prepareOperationTimeout(int,long,com.android.server.backup.BackupManagerService$BackupRestoreTask)> (7)
<android.app.backup.IBackupManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.IBackupManager: void opComplete(int)> (5)
<android.test.InstrumentationTestRunner: void onStart()> (2)
<com.android.commands.monkey.Monkey: int runMonkeyCycles()> (1)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.internal.app.ResolverActivity$1: void onPackageModified(java.lang.String)> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: void onPackageModified(java.lang.String)> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.LocationManagerService$4: void onPackageModified(java.lang.String)> (1)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.ServiceWatcher$2: void onPackageModified(java.lang.String)> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.trust.TrustManagerService$3: void onPackageModified(java.lang.String)> (1)
<com.android.server.tv.TvInputManagerService$1: void onPackageModified(java.lang.String)> (1)
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageModified(java.lang.String)> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$1: void onPackageModified(java.lang.String)> (1)
<com.android.internal.content.PackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (15)
<com.android.server.backup.BackupManagerService$FullBackupEngine$FullBackupRunner: void run()> (1)
<com.android.server.backup.BackupManagerService$FullBackupObbConnection: boolean backupObbs(android.content.pm.PackageInfo,java.io.OutputStream)> (1)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask: void initiateOneRestore(android.content.pm.PackageInfo,int)> (2)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask: void restoreFinished()> (1)
<com.android.server.backup.BackupManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<android.app.backup.BackupAgent$BackupServiceBinder: void doRestoreFinished(int,android.app.backup.IBackupManager)> (2)
<android.test.InstrumentationCoreTestRunner: void onStart()> (2)
<android.widget.ActivityChooserModel$DataModelPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.internal.app.ResolverActivity$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.internal.telephony.SmsApplication$SmsPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.accessibility.AccessibilityManagerService$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.InputMethodManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.LocationManagerService$4: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.pm.LauncherAppsService$LauncherAppsImpl$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.print.PrintManagerService$PrintManagerImpl$2: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.search.SearchManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.ServiceWatcher$2: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.TextServicesManagerService$TextServicesMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.tv.TvInputManagerService$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$1: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.wallpaper.WallpaperManagerService$MyPackageMonitor: boolean onPackageChanged(java.lang.String,int,java.lang.String[])> (1)
<com.android.server.backup.BackupManagerService$PerformUnifiedRestoreTask: void startRestore()> (1)
<android.app.IBackupAgent$Stub$Proxy: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub$Proxy: void doRestoreFinished(int,android.app.backup.IBackupManager)> ()
<android.app.IBackupAgent$Stub: void doRestoreFinished(int,android.app.backup.IBackupManager)> (2)
<android.app.IBackupAgent$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.app.IBackupAgent: void doBackup(android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doFullBackup(android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestore(android.os.ParcelFileDescriptor,int,android.os.ParcelFileDescriptor,int,android.app.backup.IBackupManager)> (1)
<android.app.IBackupAgent: void doRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long,int,android.app.backup.IBackupManager)> (4)
<android.app.IBackupAgent: void doRestoreFinished(int,android.app.backup.IBackupManager)> (1)
<android.app.backup.BackupAgent$BackupServiceBinder: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.backup.BackupManagerService$FullRestoreEngine$RestoreFileRunnable: void run()> (1)
<com.android.server.backup.BackupManagerService$PerformAdbRestoreTask$RestoreFileRunnable: void run()> (1)
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)> (22)
<android.media.MediaFocusControl$NotificationListenerObserver: void <init>(android.media.MediaFocusControl)> (1)
<android.view.accessibility.CaptioningManager: void registerObserver(java.lang.String)> (1)
<com.android.server.accessibility.AccessibilityManagerService$AccessibilityContentObserver: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)> (1)
<com.android.server.CertBlacklister: void registerObservers(android.content.ContentResolver)> (1)
<com.android.server.devicepolicy.DevicePolicyManagerService$SetupContentObserver: void <init>(com.android.server.devicepolicy.DevicePolicyManagerService,android.os.Handler)> (1)
<com.android.server.InputMethodManagerService$SettingsObserver: void <init>(com.android.server.InputMethodManagerService,android.os.Handler)> (1)
<com.android.server.location.LocationBlacklist: void init()> (1)
<com.android.server.location.LocationFudger: void <init>(android.content.Context,android.os.Handler)> (1)
<com.android.server.LocationManagerService: void systemRunning()> (1)
<com.android.server.media.MediaSessionService$SettingsObserver: void <init>(com.android.server.media.MediaSessionService)> (1)
<com.android.server.notification.ManagedServices$SettingsObserver: void <init>(com.android.server.notification.ManagedServices,android.os.Handler)> (1)
<com.android.server.print.PrintManagerService$PrintManagerImpl: void registerContentObservers()> (1)
<com.android.server.search.SearchManagerService$GlobalSearchProviderObserver: void <init>(com.android.server.search.SearchManagerService,android.content.ContentResolver)> ()
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub$SettingsObserver: void <init>(com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub,android.os.Handler)> (1)
<com.android.server.wm.WindowManagerService$SettingsObserver: void <init>(com.android.server.wm.WindowManagerService)> (1)
<android.media.MediaFocusControl: void <init>(android.os.Looper,android.content.Context,android.media.AudioService$VolumeController,android.media.AudioService)> (1)
<android.view.accessibility.CaptioningManager: void addCaptioningChangeListener(android.view.accessibility.CaptioningManager$CaptioningChangeListener)> (3)
<com.android.server.accessibility.AccessibilityManagerService: void <init>(android.content.Context)> (1)
<com.android.server.CertBlacklister: void <init>(android.content.Context)> (1)
<com.android.server.devicepolicy.DevicePolicyManagerService: void systemReady()> (1)
<com.android.server.media.MediaSessionService$SettingsObserver: void <init>(com.android.server.media.MediaSessionService,com.android.server.media.MediaSessionService$1)> (1)
<com.android.server.notification.ManagedServices$SettingsObserver: void <init>(com.android.server.notification.ManagedServices,android.os.Handler,com.android.server.notification.ManagedServices$1)> (1)
<com.android.server.print.PrintManagerService$PrintManagerImpl: void <init>(com.android.server.print.PrintManagerService,android.content.Context)> (1)
<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void systemRunning(boolean)> (1)
<android.media.ClosedCaptionWidget: void manageChangeListener()> (3)
<android.media.SubtitleController: android.media.SubtitleTrack addTrack(android.media.MediaFormat)> (4)
<android.media.WebVttRenderingWidget: void manageChangeListener()> (3)
<com.android.server.devicepolicy.DevicePolicyManagerService$Lifecycle: void onBootPhase(int)> (1)
<com.android.server.media.MediaSessionService: void onStart()> (1)
<com.android.server.notification.ManagedServices: void <init>(android.content.Context,android.os.Handler,java.lang.Object,com.android.server.notification.ManagedServices$UserProfiles)> (4)
<com.android.server.voiceinteraction.VoiceInteractionManagerService: void onBootPhase(int)> (1)
<android.media.ClosedCaptionWidget: void onAttachedToWindow()> (3)
<android.media.ClosedCaptionWidget: void onDetachedFromWindow()> (3)
<android.media.ClosedCaptionWidget: void setVisible(boolean)> (1)
<android.media.MediaPlayer$2: int addTrack()> (1)
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,long,long,java.lang.String)> (1)
<android.media.MediaPlayer: void scanInternalSubtitleTracks()> (2)
<android.media.MediaPlayer: void selectOrDeselectTrack(int,boolean)> (2)
<android.media.WebVttRenderingWidget: void onAttachedToWindow()> (3)
<android.media.WebVttRenderingWidget: void onDetachedFromWindow()> (3)
<android.media.WebVttRenderingWidget: void setVisible(boolean)> (1)
<com.android.server.notification.ConditionProviders: void <init>(android.content.Context,android.os.Handler,com.android.server.notification.ManagedServices$UserProfiles,com.android.server.notification.ZenModeHelper)> (1)
<com.android.server.notification.ConditionProviders: void <init>(android.content.Context,android.os.Handler,java.lang.Object,com.android.server.notification.ManagedServices$UserProfiles)> (1)
<com.android.server.notification.NotificationManagerService$NotificationListeners: void <init>(android.content.Context,android.os.Handler,java.lang.Object,com.android.server.notification.ManagedServices$UserProfiles)> (1)
<com.android.server.notification.NotificationManagerService$NotificationListeners: void <init>(com.android.server.notification.NotificationManagerService)> (1)
<android.media.SubtitleTrack$RenderingWidget: void setVisible(boolean)> (2)
<android.media.MediaPlayer$2: void run()> (1)
<android.media.MediaPlayer: void addTimedTextSource(java.io.FileDescriptor,java.lang.String)> (2)
<android.media.MediaPlayer: void access$600(android.media.MediaPlayer)> (3)
<android.media.MediaPlayer: void prepare()> (6)
<android.media.MediaPlayer: void deselectTrack(int)> ()
<android.media.MediaPlayer: void selectTrack(int)> ()
<android.media.SubtitleTrack: void hide()> (6)
<android.media.SubtitleTrack: void show()> (6)
<android.media.MediaPlayer: void addTimedTextSource(android.content.Context,android.net.Uri,java.lang.String)> ()
<android.media.MediaPlayer: void addTimedTextSource(java.lang.String,java.lang.String)> (1)
<android.media.MediaPlayer$4: void run()> (1)
<android.media.AsyncPlayer: void startSound(android.media.AsyncPlayer$Command)> (1)
<android.media.AudioService$AudioHandler: void onPlaySoundEffect(int,int)> (1)
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder,android.media.AudioAttributes,int)> (2)
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int,android.media.AudioAttributes,int)> (1)
<android.media.Ringtone: boolean playFallbackRingtone()> (1)
<android.media.Ringtone: void setUri(android.net.Uri)> (2)
<android.media.ClosedCaptionTrack: void hide()> (1)
<android.media.SRTTrack: void hide()> (1)
<android.media.SubtitleController: void doHide()> (1)
<android.media.SubtitleController: void doSelectTrack(android.media.SubtitleTrack)> (1)
<android.media.TtmlTrack: void hide()> (1)
<android.media.WebVttTrack: void hide()> (1)
<android.media.ClosedCaptionTrack: void show()> (1)
<android.media.SRTTrack: void show()> (1)
<android.media.SubtitleController: void doShow()> (1)
<android.media.TtmlTrack: void show()> (1)
<android.media.WebVttTrack: void show()> (1)
<android.media.AsyncPlayer: void access$200(android.media.AsyncPlayer,android.media.AsyncPlayer$Command)> (1)
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)> (1)
<android.speech.tts.AudioPlaybackQueueItem: void run()> (1)
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,int)> ()
<android.media.Ringtone: void play()> (6)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri,int)> (2)
<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)> (1)
<android.media.SubtitleController: void access$100(android.media.SubtitleController)> (1)
<android.media.SubtitleController: void access$200(android.media.SubtitleController,android.media.SubtitleTrack)> (1)
<android.media.SubtitleController: void access$000(android.media.SubtitleController)> (1)
<android.media.AsyncPlayer$Thread: void run()> (2)
<android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri)> ()
<android.speech.tts.PlaybackQueueItem: void run()> (2)
<android.preference.SeekBarVolumizer: void onStartSample()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void performAuditoryFeedbackForAccessibilityIfNeed()> (1)
<com.android.server.DockObserver: void handleDockStateChange()> (1)
<com.android.server.power.Notifier: void playWirelessChargingStartedSound()> (1)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)> (5)
<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)> ()
<android.media.Ringtone: void setStreamType(int)> (6)
<android.media.AsyncPlayer: void enqueueLocked(android.media.AsyncPlayer$Command)> (2)
<android.speech.tts.AudioPlaybackHandler$MessageLoop: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void access$800(com.android.internal.policy.impl.PhoneWindowManager)> (1)
<com.android.server.DockObserver: void access$100(com.android.server.DockObserver)> (2)
<com.android.server.power.Notifier: void access$600(com.android.server.power.Notifier)> (2)
<android.preference.SeekBarVolumizer: void onInitSample()> (1)
<com.android.internal.policy.impl.EnableAccessibilityController: void <init>(android.content.Context,java.lang.Runnable)> (1)
<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)> ()
<android.media.AsyncPlayer: void stop()> ()
<com.android.server.DockObserver: void updateLocked()> (2)
<com.android.server.power.Notifier: void onWirelessChargingStarted()> (1)
<com.android.internal.policy.impl.GlobalActions$GlobalActionsDialog: void onStart()> (1)
<com.android.server.DockObserver: void onBootPhase(int)> (1)
<com.android.server.DockObserver: void setDockStateLocked(int)> (2)
<com.android.server.power.PowerManagerService: void updateIsPoweredLocked(int)> (1)
<com.android.server.DockObserver: void access$900(com.android.server.DockObserver,int)> (1)
<com.android.server.DockObserver: void setActualDockStateLocked(int)> (2)
<com.android.server.DockObserver: void access$400(com.android.server.DockObserver,int)> (1)
<com.android.server.DockObserver: void init()> (1)
<com.android.server.DockObserver$2: void onUEvent(android.os.UEventObserver$UEvent)> (1)
Permission:android.permission.RECORD_AUDIO
244 Callers:
<android.media.AudioRecord: void <init>(int,int,int,int,int)> ()
<android.media.MediaRecorder: void setAudioSource(int)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
Permission:android.permission.MODIFY_AUDIO_SETTINGS
34 Callers:
<android.media.AudioManager: boolean isBluetoothA2dpOn()> (1)
<android.inputmethodservice.KeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (2)
<android.inputmethodservice.KeyboardView: void showPreview(int)> (4)
<com.android.internal.widget.PasswordEntryKeyboardView: void sendAccessibilityEventForUnicodeCharacter(int,int)> (1)
<android.inputmethodservice.KeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (2)
<android.inputmethodservice.KeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (2)
<android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (5)
<com.android.internal.widget.PasswordEntryKeyboardView: void showPreview(int)> (1)
<android.inputmethodservice.KeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onModifiedTouchEvent(android.view.MotionEvent,boolean)> (1)
<android.inputmethodservice.KeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (3)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean openPopupIfRequired(android.view.MotionEvent)> (1)
<android.inputmethodservice.KeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (2)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleModeChange()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void handleShift()> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void setKeyboardMode(int)> ()
<com.android.internal.widget.PasswordEntryKeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)> (1)
<android.inputmethodservice.KeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onTouchEvent(android.view.MotionEvent)> (2)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean access$400(android.inputmethodservice.KeyboardView,android.view.MotionEvent)> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onLongPress(android.inputmethodservice.Keyboard$Key)> (1)
<com.android.internal.widget.PasswordEntryKeyboardHelper: void onKey(int,int[])> (1)
<com.android.internal.widget.PasswordEntryKeyboardView: boolean onHoverEvent(android.view.MotionEvent)> (2)
<android.media.AudioManager: boolean isWiredHeadsetOn()> (1)
<android.media.AudioManager: void setMicrophoneMute(boolean)> (1)
<com.android.server.devicepolicy.DevicePolicyManagerService: void clearUserRestrictions(android.os.UserHandle)> (2)
<android.media.AudioManager: void setParameter(java.lang.String,java.lang.String)> ()
<android.media.AudioManager: void setParameters(java.lang.String)> (1)
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)> ()
<android.server.BluetoothA2dpService: void handleSinkStateChange(android.bluetooth.BluetoothDevice,int,int)> ()
<android.server.BluetoothA2dpService: void onBluetoothEnable()> ()
<android.server.BluetoothA2dpService: void onBluetoothDisable()> ()
<android.server.BluetoothA2dpService: boolean resumeSink(android.bluetooth.BluetoothDevice)> ()
<android.server.BluetoothA2dpService: boolean suspendSink(android.bluetooth.BluetoothDevice)> ()
Permission:android.permission.WRITE_SMS
139 Callers:
<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[])> (1)
<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.internal.telephony.SMSDispatcher: android.net.Uri writeOutboxMessage(long,java.lang.String,java.lang.String,boolean,java.lang.String)> (4)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: android.net.Uri writeOutboxMessage(long,java.lang.String,java.lang.String,boolean,java.lang.String)> (2)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: android.net.Uri writeOutboxMessage(long,java.lang.String,java.lang.String,boolean,java.lang.String)> (2)
<com.android.internal.telephony.ImsSMSDispatcher: android.net.Uri writeOutboxMessage(long,java.lang.String,java.lang.String,boolean,java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String)> (6)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendStoredMultipartText(java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.SMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (4)
<com.android.internal.telephony.SMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String)> (5)
<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (3)
<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(long,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void sendMultipartSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendStoredText(java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ImsSMSDispatcher: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.ISms$Stub: void sendMultipartTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.UiccSmsController: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredMultipartText(long,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> ()
<com.android.internal.telephony.ISms$Stub: void sendStoredMultipartText(long,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.UiccSmsController: void sendStoredText(long,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (3)
<com.android.internal.telephony.ISms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ISms: void sendMultipartTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.ISms$Stub$Proxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> ()
<com.android.internal.telephony.ISms$Stub: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (2)
<com.android.internal.telephony.ISms: void sendStoredMultipartText(long,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)> (1)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendStoredText(long,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub: void sendStoredText(long,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.ISms$Stub$Proxy: void sendTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub: void sendTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.UiccSmsController: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<com.android.internal.telephony.UiccSmsController: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ISms: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)> (1)
<android.telephony.SmsManager: void sendStoredMultipartTextMessage(android.net.Uri,java.lang.String,java.util.ArrayList,java.util.ArrayList)> ()
<com.android.internal.telephony.ISms: void sendStoredText(long,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<com.android.internal.telephony.ISms: void sendTextForSubscriber(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub$Proxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms$Stub: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> (1)
<android.telephony.SmsManager: void sendStoredTextMessage(android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.ISms: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (1)
<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> ()
<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> (2)
<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> ()
<com.android.internal.telephony.InboundSmsHandler: android.net.Uri writeInboxMessage(android.content.Intent)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: android.net.Uri writeInboxMessage(android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: android.net.Uri writeInboxMessage(android.content.Intent)> (1)
<com.android.internal.telephony.InboundSmsHandler: android.net.Uri access$900(com.android.internal.telephony.InboundSmsHandler,android.content.Intent)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: android.net.Uri access$900(com.android.internal.telephony.InboundSmsHandler,android.content.Intent)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: android.net.Uri access$900(com.android.internal.telephony.InboundSmsHandler,android.content.Intent)> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.server.MmsServiceBroker: android.net.Uri access$900()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: android.net.Uri importMultimediaMessage(android.net.Uri,java.lang.String,long,boolean,boolean)> ()
<com.android.server.MmsServiceBroker$BinderService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.MmsServiceBroker: android.net.Uri access$800()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<android.telephony.SmsManager: android.net.Uri importTextMessage(java.lang.String,int,java.lang.String,long,boolean,boolean)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.server.MmsServiceBroker: android.net.Uri access$1000()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IMms: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<android.telephony.SmsManager: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (4)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.server.MmsServiceBroker: android.net.Uri access$1100()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<com.android.internal.telephony.IMms: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<android.telephony.SmsManager: android.net.Uri addMultimediaMessageDraft(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
Permission:android.permission.CAMERA
245 Callers:
<android.hardware.Camera: android.hardware.Camera open()> ()
<android.hardware.Camera: void native_setup(java.lang.Object)> ()
<android.media.MediaRecorder: void setVideoSource(int)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void updateMediaRecorderParams()> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void startRecording(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.videosink.MediaEncoderFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void open(android.filterfw.core.FilterContext)> (60)
<android.filterfw.core.Filter: void process(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performOpen(android.filterfw.core.FilterContext)> (69)
<android.filterpacks.base.CallbackFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void open(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void open(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void open(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.Filter: void performProcess(android.filterfw.core.FilterContext)> (70)
<android.filterpacks.base.CallbackFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performOpen(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performOpen(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame execute(android.filterfw.core.KeyValueMap)> (1)
<android.filterfw.core.SyncRunner: void processFilterNode(android.filterfw.core.Filter)> (1)
<android.filterpacks.base.CallbackFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameBranch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameFetch: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.FrameStore: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.GLTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.InputStreamSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.NullFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.ObjectSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.OutputStreamTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.base.RetargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.AlphaBlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.AutoFixFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BitmapSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlackWhiteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.BlendFilter: void performProcess(android.filterfw.core.FilterContext)> (2)
<android.filterpacks.imageproc.BrightnessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ColorTemperatureFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ContrastFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CropRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.CrossProcessFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DocumentaryFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawOverlayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DrawRectFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.DuotoneFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FillLightFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FisheyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FixedRotationFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.FlipFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.GrainFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageCombineFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageEncoder: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageSlicer: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ImageStitcher: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.Invert: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.LomoishFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.NegativeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.PosterizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RedEyeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ResizeFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.RotateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SaturateFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SepiaFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SharpenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.SimpleImageFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.StraightenFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.TintFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToPackedGrayFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBAFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.ToRGBFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.imageproc.VignetteFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.numeric.SinWaveFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.performance.ThroughputFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringLogger: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.StringSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.text.ToUpperCase: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceRenderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.ui.SurfaceTargetFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videoproc.BackDropperFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosink.MediaEncoderFilter: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.CameraSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.MediaSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureSource: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterpacks.videosrc.SurfaceTextureTarget: void performProcess(android.filterfw.core.FilterContext)> (1)
<android.filterfw.core.FilterFunction: android.filterfw.core.Frame executeWithArgList(java.lang.Object[])> (2)
<android.filterfw.core.SyncRunner: boolean performStep()> (3)
<android.media.effect.SingleFilterEffect: void apply(int,int,int,int)> (25)
<android.media.effect.SizeChangeEffect: void apply(int,int,int,int)> (4)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: android.filterfw.core.AsyncRunner$RunnerResult doInBackground(android.filterfw.core.SyncRunner[])> (1)
<android.filterfw.core.SyncRunner: int step()> ()
<android.filterfw.core.SyncRunner: void run()> (1)
<android.media.effect.effects.AutoFixEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BitmapOverlayEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BlackWhiteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BrightnessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ColorTemperatureEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.ContrastEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CrossProcessEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DocumentaryEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.DuotoneEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FillLightEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FisheyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.FlipEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrainEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.GrayscaleEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.LomoishEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.NegativeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.PosterizeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.RedEyeEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SaturateEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SepiaEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.SharpenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.StraightenEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.TintEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.VignetteEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.CropEffect: void apply(int,int,int,int)> (3)
<android.media.effect.effects.RotateEffect: void apply(int,int,int,int)> (3)
<android.filterfw.core.AsyncRunner$AsyncRunnerTask: java.lang.Object doInBackground(java.lang.Object[])> (1)
<android.filterfw.core.GraphRunner: void run()> (1)
<android.media.effect.FilterGraphEffect: void apply(int,int,int,int)> (2)
<android.media.effect.effects.BackDropperEffect: void apply(int,int,int,int)> (2)
Permission:android.permission.READ_CALENDAR
21 Callers:
<android.provider.CalendarContract$EventDays: android.database.Cursor query(android.content.ContentResolver,int,int,java.lang.String[])> ()
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity getEntityAndIncrementCursor(android.database.Cursor)> (1)
<android.content.CursorEntityIterator: android.content.Entity next()> (5)
<android.content.CursorEntityIterator: java.lang.Object next()> (5)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: android.content.Entity next()> (1)
<android.provider.CalendarContract$CalendarEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.CalendarContract$EventsEntity$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$Groups$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.ContactsContract$RawContacts$EntityIteratorImpl: java.lang.Object next()> (1)
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long)> ()
<android.provider.CalendarContract$Instances: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],long,long,java.lang.String)> ()
<android.provider.CalendarContract$CalendarAlerts: long findNextAlarmTime(android.content.ContentResolver,long)> ()
<android.provider.CalendarContract$Attendees: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<android.provider.CalendarContract$CalendarAlerts: boolean alarmExists(android.content.ContentResolver,long,long,long)> ()
<android.provider.CalendarContract$CalendarAlerts: void rescheduleMissedAlarms(android.content.ContentResolver,android.content.Context,android.app.AlarmManager)> ()
<android.provider.CalendarContract$Reminders: android.database.Cursor query(android.content.ContentResolver,long,java.lang.String[])> ()
<com.android.calendar.AgendaWindowAdapter: android.net.Uri buildQueryUri(int,int)> ()
Permission:android.permission.READ_SMS
93 Callers:
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<com.android.internal.telephony.WapPushOverSms: long getDeliveryOrReadReportThreadId(android.content.Context,com.google.android.mms.pdu.GenericPdu)> (1)
<com.android.internal.telephony.WapPushOverSms: void writeInboxMessage(long,byte[])> (1)
<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[],android.content.BroadcastReceiver,com.android.internal.telephony.InboundSmsHandler)> (1)
<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler$DeliveringState: boolean processMessage(android.os.Message)> (1)
<com.android.internal.util.State: boolean processMessage(android.os.Message)> (12)
<com.android.internal.util.IState: boolean processMessage(android.os.Message)> ()
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.State processMsg(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$DisconnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$DormantState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$InactiveState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$ScanState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.SupplicantStateTracker$UninitializedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullHighPerfLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$FullLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$NoLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiController$ScanOnlyLockHeldState: boolean processMessage(android.os.Message)> (1)
<com.android.server.wifi.WifiWatchdogStateMachine$NotConnectedState: boolean processMessage(android.os.Message)> (1)
<com.android.server.MmsServiceBroker: android.net.Uri access$800()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms: android.net.Uri importTextMessage(java.lang.String,java.lang.String,int,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.SmsManager: android.net.Uri importTextMessage(java.lang.String,int,java.lang.String,long,boolean,boolean)> ()
<com.android.server.MmsServiceBroker$BinderService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
<com.android.internal.telephony.SmsBroadcastUndelivered: void scanRawTable()> (1)
<com.android.internal.telephony.SmsBroadcastUndelivered: void run()> (1)
<com.android.server.MmsServiceBroker: android.net.Uri access$900()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<com.android.internal.telephony.IMms: android.net.Uri importMultimediaMessage(java.lang.String,android.net.Uri,java.lang.String,long,boolean,boolean)> (2)
<android.telephony.SmsManager: android.net.Uri importMultimediaMessage(android.net.Uri,java.lang.String,long,boolean,boolean)> ()
<com.android.internal.telephony.WapPushOverSms: boolean isDuplicateNotification(android.content.Context,com.google.android.mms.pdu.NotificationInd)> (1)
<com.google.android.mms.pdu.PduPersister: android.database.Cursor getPendingMessages(long)> ()
<android.provider.Telephony$Sms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<android.provider.Telephony$Sms$Sent: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<com.android.server.MmsServiceBroker: android.net.Uri access$1100()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<com.android.internal.telephony.IMms: android.net.Uri addMultimediaMessageDraft(java.lang.String,android.net.Uri)> (2)
<android.telephony.SmsManager: android.net.Uri addMultimediaMessageDraft(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: android.net.Uri normalizeKey(android.net.Uri)> (1)
<com.google.android.mms.util.PduCache: boolean put(android.net.Uri,com.google.android.mms.util.PduCacheEntry)> (2)
<com.google.android.mms.pdu.PduPersister: com.google.android.mms.pdu.GenericPdu load(android.net.Uri)> ()
<com.google.android.mms.util.PduCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<com.google.android.mms.util.AbstractCache: boolean put(java.lang.Object,java.lang.Object)> (1)
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[],java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int processCdmaWapPdu(byte[],int,java.lang.String,long)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)> (2)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (4)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)> (1)
<com.android.internal.telephony.InboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (3)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleInjectSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.cdma.CdmaInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<com.android.internal.telephony.gsm.GsmInboundSmsHandler: void handleNewSms(android.os.AsyncResult)> (1)
<android.provider.Telephony$Sms$Inbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)> ()
<android.provider.Telephony$Sms$Draft: android.net.Uri addMessage(long,android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)> ()
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.util.Set)> (3)
<android.provider.Telephony$Threads: long getOrCreateThreadId(android.content.Context,java.lang.String)> ()
<com.google.android.mms.pdu.PduPersister: android.net.Uri persist(com.google.android.mms.pdu.GenericPdu,android.net.Uri,boolean,boolean,java.util.HashMap)> (1)
<com.google.android.mms.pdu.PduPersister: void updateHeaders(android.net.Uri,com.google.android.mms.pdu.SendReq)> ()
<com.android.server.MmsServiceBroker: android.net.Uri access$1000()> (1)
<com.android.server.MmsServiceBroker$BinderService: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IMms$Stub$Proxy: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> ()
<com.android.internal.telephony.IMms$Stub: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<com.android.internal.telephony.IMms: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String,java.lang.String)> (2)
<android.telephony.SmsManager: android.net.Uri addTextMessageDraft(java.lang.String,java.lang.String)> ()
<android.provider.Telephony$Sms$Outbox: android.net.Uri addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)> ()
<android.provider.Telephony$Mms: android.database.Cursor query(android.content.ContentResolver,java.lang.String[])> ()
Permission:android.permission.BLUETOOTH
2 Callers:
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)> ()
<android.bluetooth.BluetoothSocket: void initSocketNative()> ()
Permission:com.android.browser.permission.READ_HISTORY_BOOKMARKS
12 Callers:
<android.provider.BrowserContract$Bookmarks: android.net.Uri buildFolderUri(long)> ()
<android.provider.BrowserContract$Settings: boolean isSyncEnabled(android.content.Context)> ()
<android.provider.Browser: boolean canClearHistory(android.content.ContentResolver)> ()
<android.provider.Browser: android.database.Cursor getAllVisitedUrls(android.content.ContentResolver)> ()
<android.provider.Browser: void truncateHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void updateVisitedHistory(android.content.ContentResolver,java.lang.String,boolean)> ()
<android.provider.Browser: android.database.Cursor getAllBookmarks(android.content.ContentResolver)> ()
<android.provider.Browser: java.lang.String[] getVisitedHistory(android.content.ContentResolver)> ()
<android.provider.Browser: void deleteHistoryWhere(android.content.ContentResolver,java.lang.String)> (2)
<android.provider.Browser: void clearHistory(android.content.ContentResolver)> (1)
<android.provider.Browser: void deleteHistoryTimeFrame(android.content.ContentResolver,long,long)> ()
<android.provider.Browser: android.database.Cursor getVisitedLike(android.content.ContentResolver,java.lang.String)> (1)
Permission:com.android.voicemail.permission.ADD_VOICEMAIL
2 Callers:
<android.provider.VoicemailContract$Status: android.net.Uri buildSourceUri(java.lang.String)> ()
<android.provider.VoicemailContract$Voicemails: android.net.Uri buildSourceUri(java.lang.String)> ()
