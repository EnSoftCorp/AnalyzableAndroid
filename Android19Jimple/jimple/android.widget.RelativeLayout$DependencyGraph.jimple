class android.widget.RelativeLayout$DependencyGraph extends java.lang.Object
{
    private android.util.SparseArray mKeyNodes;
    private java.util.ArrayList mNodes;
    private java.util.ArrayDeque mRoots;

    private void <init>()
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2;
        java.util.ArrayDeque $r3;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes> = $r2;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots> = $r3;

        return;
    }

    void <init>(android.widget.RelativeLayout$1)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.widget.RelativeLayout$1 r1;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: android.widget.RelativeLayout$1;

        specialinvoke r0.<android.widget.RelativeLayout$DependencyGraph: void <init>()>();

        return;
    }

    static android.util.SparseArray access$500(android.widget.RelativeLayout$DependencyGraph)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.widget.RelativeLayout$DependencyGraph;

        $r1 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        return $r1;
    }

    private java.util.ArrayDeque findRoots(int[])
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        int[] r1, r7;
        android.util.SparseArray r2, $r11, $r18, $r20;
        java.util.ArrayList r3;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;
        java.util.ArrayDeque r4;
        android.widget.RelativeLayout$DependencyGraph$Node r5, r6, r8, r9;
        java.lang.Object $r10, $r13, $r17, $r21;
        android.view.View $r12;
        android.widget.RelativeLayout$LayoutParams $r14;
        android.view.ViewGroup$LayoutParams $r15;
        android.util.ArrayMap $r16, $r22;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: int[];

        r2 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        r3 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        i0 = virtualinvoke r3.<java.util.ArrayList: int size()>();

        i1 = 0;

     label01:
        if i1 >= i0 goto label02;

        $r21 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r9 = (android.widget.RelativeLayout$DependencyGraph$Node) $r21;

        $r22 = r9.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        virtualinvoke $r22.<android.util.ArrayMap: void clear()>();

        $r20 = r9.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke $r20.<android.util.SparseArray: void clear()>();

        i1 = i1 + 1;

        goto label01;

     label02:
        i2 = 0;

     label03:
        if i2 >= i0 goto label08;

        $r13 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r6 = (android.widget.RelativeLayout$DependencyGraph$Node) $r13;

        $r12 = r6.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view>;

        $r15 = virtualinvoke $r12.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r14 = (android.widget.RelativeLayout$LayoutParams) $r15;

        r7 = staticinvoke <android.widget.RelativeLayout$LayoutParams: int[] access$700(android.widget.RelativeLayout$LayoutParams)>($r14);

        i4 = lengthof r1;

        i5 = 0;

     label04:
        if i5 >= i4 goto label07;

        $i8 = r1[i5];

        i6 = r7[$i8];

        if i6 <= 0 goto label05;

        $r17 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object get(int)>(i6);

        r8 = (android.widget.RelativeLayout$DependencyGraph$Node) $r17;

        if r8 == null goto label05;

        if r8 != r6 goto label06;

     label05:
        i5 = i5 + 1;

        goto label04;

     label06:
        $r16 = r8.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        virtualinvoke $r16.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r0);

        $r18 = r6.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke $r18.<android.util.SparseArray: void put(int,java.lang.Object)>(i6, r8);

        goto label05;

     label07:
        i2 = i2 + 1;

        goto label03;

     label08:
        r4 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots>;

        virtualinvoke r4.<java.util.ArrayDeque: void clear()>();

        i3 = 0;

     label09:
        if i3 >= i0 goto label11;

        $r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r5 = (android.widget.RelativeLayout$DependencyGraph$Node) $r10;

        $r11 = r5.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        $i7 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        if $i7 != 0 goto label10;

        virtualinvoke r4.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r5);

     label10:
        i3 = i3 + 1;

        goto label09;

     label11:
        return r4;
    }

    void add(android.view.View)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.view.View r1;
        int i0;
        android.widget.RelativeLayout$DependencyGraph$Node r2;
        java.util.ArrayList $r3;
        android.util.SparseArray $r4;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: android.view.View;

        i0 = virtualinvoke r1.<android.view.View: int getId()>();

        r2 = staticinvoke <android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)>(r1);

        if i0 == -1 goto label1;

        $r4 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r2);

     label1:
        $r3 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        return;
    }

    void clear()
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.util.SparseArray $r2;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4;
        android.widget.RelativeLayout$DependencyGraph$Node $r5;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.widget.RelativeLayout$DependencyGraph$Node) $r4;

        virtualinvoke $r5.<android.widget.RelativeLayout$DependencyGraph$Node: void release()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        virtualinvoke $r2.<android.util.SparseArray: void clear()>();

        $r3 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots>;

        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        return;
    }

    transient void getSortedViews(android.view.View[], int[])
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.view.View[] r1;
        int[] r2;
        java.util.ArrayDeque r3;
        int i0, i1, i2, i3, i4, $i5, $i6;
        android.widget.RelativeLayout$DependencyGraph$Node r4, r7;
        android.view.View r5;
        android.util.ArrayMap r6;
        android.util.SparseArray r8;
        java.lang.Object $r9, $r11;
        java.lang.IllegalStateException $r10;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: android.view.View[];

        r2 := @parameter1: int[];

        r3 = specialinvoke r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque findRoots(int[])>(r2);

        i0 = 0;

     label1:
        $r9 = virtualinvoke r3.<java.util.ArrayDeque: java.lang.Object pollLast()>();

        r4 = (android.widget.RelativeLayout$DependencyGraph$Node) $r9;

        if r4 == null goto label5;

        r5 = r4.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view>;

        i1 = virtualinvoke r5.<android.view.View: int getId()>();

        i2 = i0 + 1;

        r1[i0] = r5;

        r6 = r4.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        i3 = virtualinvoke r6.<android.util.ArrayMap: int size()>();

        i4 = 0;

     label2:
        if i4 >= i3 goto label4;

        $r11 = virtualinvoke r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        r7 = (android.widget.RelativeLayout$DependencyGraph$Node) $r11;

        r8 = r7.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke r8.<android.util.SparseArray: void remove(int)>(i1);

        $i6 = virtualinvoke r8.<android.util.SparseArray: int size()>();

        if $i6 != 0 goto label3;

        virtualinvoke r3.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r7);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        i0 = i2;

        goto label1;

     label5:
        $i5 = lengthof r1;

        if i0 >= $i5 goto label6;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Circular dependencies cannot exist in RelativeLayout");

        throw $r10;

     label6:
        return;
    }
}
