class com.android.server.AssetAtlasService$ComputeWorker extends java.lang.Object implements java.lang.Runnable
{
    private final java.util.List mBitmaps;
    private final int mEnd;
    private final java.util.List mResults;
    private final java.util.concurrent.CountDownLatch mSignal;
    private final int mStart;
    private final int mStep;
    private final int mThreshold;

    void <init>(int, int, int, java.util.List, int, java.util.List, java.util.concurrent.CountDownLatch)
    {
        com.android.server.AssetAtlasService$ComputeWorker r0;
        int i0, i1, i2, i3, i4;
        java.util.List r1, r2;
        java.util.concurrent.CountDownLatch r3;
        float $f0, $f1;

        r0 := @this: com.android.server.AssetAtlasService$ComputeWorker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 := @parameter3: java.util.List;

        i3 := @parameter4: int;

        r2 := @parameter5: java.util.List;

        r3 := @parameter6: java.util.concurrent.CountDownLatch;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.AssetAtlasService$ComputeWorker: int mStart> = i0;

        r0.<com.android.server.AssetAtlasService$ComputeWorker: int mEnd> = i1;

        r0.<com.android.server.AssetAtlasService$ComputeWorker: int mStep> = i2;

        r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mBitmaps> = r1;

        r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mResults> = r2;

        r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.concurrent.CountDownLatch mSignal> = r3;

        $f0 = (float) i3;

        $f1 = 0.8F * $f0;

        i4 = (int) $f1;

     label1:
        if i4 <= 4194304 goto label2;

        i4 = i4 >> 1;

        goto label1;

     label2:
        r0.<com.android.server.AssetAtlasService$ComputeWorker: int mThreshold> = i4;

        return;
    }

    private int packBitmaps(android.graphics.Atlas$Type, int, int, android.graphics.Atlas$Entry)
    {
        com.android.server.AssetAtlasService$ComputeWorker r0;
        android.graphics.Atlas$Type r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        android.graphics.Atlas$Entry r2, $r9;
        android.graphics.Atlas r3, $r5;
        android.graphics.Bitmap r4;
        java.util.List $r6, $r7;
        java.lang.Object $r8;

        r0 := @this: com.android.server.AssetAtlasService$ComputeWorker;

        r1 := @parameter0: android.graphics.Atlas$Type;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.graphics.Atlas$Entry;

        i2 = 0;

        $r5 = new android.graphics.Atlas;

        specialinvoke $r5.<android.graphics.Atlas: void <init>(android.graphics.Atlas$Type,int,int)>(r1, i0, i1);

        r3 = $r5;

        $r6 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mBitmaps>;

        i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        i4 = 0;

     label1:
        if i4 >= i3 goto label3;

        $r7 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mBitmaps>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i4);

        r4 = (android.graphics.Bitmap) $r8;

        $i5 = virtualinvoke r4.<android.graphics.Bitmap: int getWidth()>();

        $i6 = virtualinvoke r4.<android.graphics.Bitmap: int getHeight()>();

        $r9 = virtualinvoke r3.<android.graphics.Atlas: android.graphics.Atlas$Entry pack(int,int,android.graphics.Atlas$Entry)>($i5, $i6, r2);

        if $r9 == null goto label2;

        i2 = i2 + 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return i2;
    }

    public void run()
    {
        com.android.server.AssetAtlasService$ComputeWorker r0;
        android.graphics.Atlas$Entry r1, $r10;
        android.graphics.Atlas$Type[] r2;
        int i0, i1, i2, i3, i4, $i6, $i7, $i8, $i9, $i10;
        android.graphics.Atlas$Type r3;
        java.lang.StringBuilder $r4, $r5, $r8;
        java.lang.Thread $r6;
        java.lang.String $r7, $r9;
        java.util.concurrent.CountDownLatch $r11, $r12;
        com.android.server.AssetAtlasService$WorkerResult $r13;
        java.util.List $r14, $r15;

        r0 := @this: com.android.server.AssetAtlasService$ComputeWorker;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Running ");

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke $r6.<java.lang.Thread: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Atlas", $r9);

        $r10 = new android.graphics.Atlas$Entry;

        specialinvoke $r10.<android.graphics.Atlas$Entry: void <init>()>();

        r1 = $r10;

        r2 = staticinvoke <android.graphics.Atlas$Type: android.graphics.Atlas$Type[] values()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label8;

        r3 = r2[i1];

        i2 = r0.<com.android.server.AssetAtlasService$ComputeWorker: int mStart>;

     label2:
        $i7 = r0.<com.android.server.AssetAtlasService$ComputeWorker: int mEnd>;

        if i2 >= $i7 goto label7;

        i3 = 768;

     label3:
        if i3 >= 2048 goto label6;

        $i8 = i2 * i3;

        $i9 = r0.<com.android.server.AssetAtlasService$ComputeWorker: int mThreshold>;

        if $i8 > $i9 goto label5;

     label4:
        i3 = i3 + 64;

        goto label3;

     label5:
        i4 = specialinvoke r0.<com.android.server.AssetAtlasService$ComputeWorker: int packBitmaps(android.graphics.Atlas$Type,int,int,android.graphics.Atlas$Entry)>(r3, i2, i3, r1);

        if i4 <= 0 goto label4;

        $r14 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mResults>;

        $r13 = new com.android.server.AssetAtlasService$WorkerResult;

        specialinvoke $r13.<com.android.server.AssetAtlasService$WorkerResult: void <init>(android.graphics.Atlas$Type,int,int,int)>(r3, i2, i3, i4);

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.List mBitmaps>;

        $i10 = interfaceinvoke $r15.<java.util.List: int size()>();

        if i4 != $i10 goto label4;

     label6:
        $i6 = r0.<com.android.server.AssetAtlasService$ComputeWorker: int mStep>;

        i2 = i2 + $i6;

        goto label2;

     label7:
        i1 = i1 + 1;

        goto label1;

     label8:
        $r12 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.concurrent.CountDownLatch mSignal>;

        if $r12 == null goto label9;

        $r11 = r0.<com.android.server.AssetAtlasService$ComputeWorker: java.util.concurrent.CountDownLatch mSignal>;

        virtualinvoke $r11.<java.util.concurrent.CountDownLatch: void countDown()>();

     label9:
        return;
    }
}
