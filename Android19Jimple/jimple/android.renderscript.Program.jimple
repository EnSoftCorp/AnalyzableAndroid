public class android.renderscript.Program extends android.renderscript.BaseObj
{
    static final int MAX_CONSTANT;
    static final int MAX_INPUT;
    static final int MAX_OUTPUT;
    static final int MAX_TEXTURE;
    android.renderscript.Type[] mConstants;
    android.renderscript.Element[] mInputs;
    android.renderscript.Element[] mOutputs;
    java.lang.String mShader;
    int mTextureCount;
    java.lang.String[] mTextureNames;
    android.renderscript.Program$TextureType[] mTextures;

    void <init>(int, android.renderscript.RenderScript)
    {
        android.renderscript.Program r0;
        int i0;
        android.renderscript.RenderScript r1;

        r0 := @this: android.renderscript.Program;

        i0 := @parameter0: int;

        r1 := @parameter1: android.renderscript.RenderScript;

        specialinvoke r0.<android.renderscript.BaseObj: void <init>(int,android.renderscript.RenderScript)>(i0, r1);

        return;
    }

    public void bindConstants(android.renderscript.Allocation, int)
    {
        android.renderscript.Program r0;
        android.renderscript.Allocation r1;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.IllegalArgumentException $r2, $r12;
        android.renderscript.Type[] $r3, $r9;
        android.renderscript.RenderScript $r4, $r5, $r6, $r8, $r11;
        android.renderscript.Type $r7, $r10;

        r0 := @this: android.renderscript.Program;

        r1 := @parameter0: android.renderscript.Allocation;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $r3 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $i2 = lengthof $r3;

        if i0 < $i2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r2;

     label2:
        if r1 == null goto label3;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $r8 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $i4 = virtualinvoke $r7.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>($r8);

        $r9 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $r10 = $r9[i0];

        $r11 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $i5 = virtualinvoke $r10.<android.renderscript.Type: int getID(android.renderscript.RenderScript)>($r11);

        if $i4 == $i5 goto label3;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Allocation type does not match slot type.");

        throw $r12;

     label3:
        if r1 == null goto label5;

        $r6 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        i1 = virtualinvoke r1.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r6);

     label4:
        $r5 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $r4 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $i3 = virtualinvoke r0.<android.renderscript.Program: int getID(android.renderscript.RenderScript)>($r4);

        virtualinvoke $r5.<android.renderscript.RenderScript: void nProgramBindConstants(int,int,int)>($i3, i0, i1);

        return;

     label5:
        i1 = 0;

        goto label4;
    }

    public void bindSampler(android.renderscript.Sampler, int) throws java.lang.IllegalArgumentException
    {
        android.renderscript.Program r0;
        android.renderscript.Sampler r1;
        int i0, i1, $i2, $i3;
        android.renderscript.RenderScript $r2, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.renderscript.Program;

        r1 := @parameter0: android.renderscript.Sampler;

        i0 := @parameter1: int;

        $r2 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        if i0 < 0 goto label1;

        $i2 = r0.<android.renderscript.Program: int mTextureCount>;

        if i0 < $i2 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r3;

     label2:
        if r1 == null goto label4;

        $r6 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        i1 = virtualinvoke r1.<android.renderscript.Sampler: int getID(android.renderscript.RenderScript)>($r6);

     label3:
        $r5 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $r4 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $i3 = virtualinvoke r0.<android.renderscript.Program: int getID(android.renderscript.RenderScript)>($r4);

        virtualinvoke $r5.<android.renderscript.RenderScript: void nProgramBindSampler(int,int,int)>($i3, i0, i1);

        return;

     label4:
        i1 = 0;

        goto label3;
    }

    public void bindTexture(android.renderscript.Allocation, int) throws java.lang.IllegalArgumentException
    {
        android.renderscript.Program r0;
        android.renderscript.Allocation r1;
        int i0, i1, $i2, $i3;
        android.renderscript.RenderScript $r2, $r4, $r5, $r6;
        java.lang.IllegalArgumentException $r3, $r10;
        android.renderscript.Type $r7;
        boolean $z0;
        android.renderscript.Program$TextureType[] $r8;
        android.renderscript.Program$TextureType $r9, $r11;

        r0 := @this: android.renderscript.Program;

        r1 := @parameter0: android.renderscript.Allocation;

        i0 := @parameter1: int;

        $r2 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        virtualinvoke $r2.<android.renderscript.RenderScript: void validate()>();

        if i0 < 0 goto label1;

        $i2 = r0.<android.renderscript.Program: int mTextureCount>;

        if i0 < $i2 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r3;

     label2:
        if r1 == null goto label3;

        $r7 = virtualinvoke r1.<android.renderscript.Allocation: android.renderscript.Type getType()>();

        $z0 = virtualinvoke $r7.<android.renderscript.Type: boolean hasFaces()>();

        if $z0 == 0 goto label3;

        $r8 = r0.<android.renderscript.Program: android.renderscript.Program$TextureType[] mTextures>;

        $r11 = $r8[i0];

        $r9 = <android.renderscript.Program$TextureType: android.renderscript.Program$TextureType TEXTURE_CUBE>;

        if $r11 == $r9 goto label3;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot bind cubemap to 2d texture slot");

        throw $r10;

     label3:
        if r1 == null goto label5;

        $r6 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        i1 = virtualinvoke r1.<android.renderscript.Allocation: int getID(android.renderscript.RenderScript)>($r6);

     label4:
        $r5 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $r4 = r0.<android.renderscript.Program: android.renderscript.RenderScript mRS>;

        $i3 = virtualinvoke r0.<android.renderscript.Program: int getID(android.renderscript.RenderScript)>($r4);

        virtualinvoke $r5.<android.renderscript.RenderScript: void nProgramBindTexture(int,int,int)>($i3, i0, i1);

        return;

     label5:
        i1 = 0;

        goto label4;
    }

    public android.renderscript.Type getConstant(int)
    {
        android.renderscript.Program r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        android.renderscript.Type[] $r2, $r3;
        android.renderscript.Type $r4;

        r0 := @this: android.renderscript.Program;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $i1 = lengthof $r2;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r1;

     label2:
        $r3 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $r4 = $r3[i0];

        return $r4;
    }

    public int getConstantCount()
    {
        android.renderscript.Program r0;
        android.renderscript.Type[] $r1, $r2;
        int $i0;

        r0 := @this: android.renderscript.Program;

        $r1 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        if $r1 == null goto label1;

        $r2 = r0.<android.renderscript.Program: android.renderscript.Type[] mConstants>;

        $i0 = lengthof $r2;

        return $i0;

     label1:
        return 0;
    }

    public int getTextureCount()
    {
        android.renderscript.Program r0;
        int $i0;

        r0 := @this: android.renderscript.Program;

        $i0 = r0.<android.renderscript.Program: int mTextureCount>;

        return $i0;
    }

    public java.lang.String getTextureName(int)
    {
        android.renderscript.Program r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.String[] $r2;
        java.lang.String $r3;

        r0 := @this: android.renderscript.Program;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.renderscript.Program: int mTextureCount>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r1;

     label2:
        $r2 = r0.<android.renderscript.Program: java.lang.String[] mTextureNames>;

        $r3 = $r2[i0];

        return $r3;
    }

    public android.renderscript.Program$TextureType getTextureType(int)
    {
        android.renderscript.Program r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        android.renderscript.Program$TextureType[] $r2;
        android.renderscript.Program$TextureType $r3;

        r0 := @this: android.renderscript.Program;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<android.renderscript.Program: int mTextureCount>;

        if i0 < $i1 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Slot ID out of range.");

        throw $r1;

     label2:
        $r2 = r0.<android.renderscript.Program: android.renderscript.Program$TextureType[] mTextures>;

        $r3 = $r2[i0];

        return $r3;
    }

    public static void <clinit>()
    {
        <android.renderscript.Program: int MAX_TEXTURE> = 8;

        <android.renderscript.Program: int MAX_OUTPUT> = 8;

        <android.renderscript.Program: int MAX_INPUT> = 8;

        <android.renderscript.Program: int MAX_CONSTANT> = 8;

        return;
    }
}
