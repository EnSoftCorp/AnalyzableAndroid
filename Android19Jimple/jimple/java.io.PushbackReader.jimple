public class java.io.PushbackReader extends java.io.FilterReader
{
    char[] buf;
    int pos;

    public void <init>(java.io.Reader)
    {
        java.io.PushbackReader r0;
        java.io.Reader r1;
        char[] $r2;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: java.io.Reader;

        specialinvoke r0.<java.io.FilterReader: void <init>(java.io.Reader)>(r1);

        $r2 = newarray (char)[1];

        r0.<java.io.PushbackReader: char[] buf> = $r2;

        r0.<java.io.PushbackReader: int pos> = 1;

        return;
    }

    public void <init>(java.io.Reader, int)
    {
        java.io.PushbackReader r0;
        java.io.Reader r1;
        int i0;
        char[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: java.io.Reader;

        i0 := @parameter1: int;

        specialinvoke r0.<java.io.FilterReader: void <init>(java.io.Reader)>(r1);

        if i0 > 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size <= 0");

        throw $r3;

     label1:
        $r2 = newarray (char)[i0];

        r0.<java.io.PushbackReader: char[] buf> = $r2;

        r0.<java.io.PushbackReader: int pos> = i0;

        return;
    }

    private void checkNotClosed() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] $r1;
        java.io.IOException $r2;

        r0 := @this: java.io.PushbackReader;

        $r1 = r0.<java.io.PushbackReader: char[] buf>;

        if $r1 != null goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("PushbackReader is closed");

        throw $r2;

     label1:
        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        java.io.Reader $r3;

        r0 := @this: java.io.PushbackReader;

        r1 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        r0.<java.io.PushbackReader: char[] buf> = null;

        $r3 = r0.<java.io.PushbackReader: java.io.Reader in>;

        virtualinvoke $r3.<java.io.Reader: void close()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r2 = $r4;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void mark(int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        int i0;
        java.io.IOException $r1;

        r0 := @this: java.io.PushbackReader;

        i0 := @parameter0: int;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;
    }

    public boolean markSupported()
    {
        java.io.PushbackReader r0;

        r0 := @this: java.io.PushbackReader;

        return 0;
    }

    public int read() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r6;
        int i0, i1, $i3, $i4, $i5;
        char[] r3, $r4;
        char c2;
        java.io.Reader $r5;

        r0 := @this: java.io.PushbackReader;

        r1 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i4 = r0.<java.io.PushbackReader: int pos>;

        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        $i3 = lengthof $r4;

        if $i4 >= $i3 goto label3;

        r3 = r0.<java.io.PushbackReader: char[] buf>;

        i1 = r0.<java.io.PushbackReader: int pos>;

        $i5 = i1 + 1;

        r0.<java.io.PushbackReader: int pos> = $i5;

        c2 = r3[i1];

        exitmonitor r1;

     label2:
        return c2;

     label3:
        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        i0 = virtualinvoke $r5.<java.io.Reader: int read()>();

        exitmonitor r1;

     label4:
        return i0;

     label5:
        $r6 := @caughtexception;

        r2 = $r6;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int read(char[], int, int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1, $r4, $r6, $r7, $r8;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Object r2;
        java.lang.Throwable r3, $r9;
        java.io.Reader $r5;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i9 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i9, i0, i1);

     label02:
        i2 = i0;

     label03:
        i3 = r0.<java.io.PushbackReader: int pos>;

        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        i4 = lengthof $r4;

     label04:
        i5 = 0;

        i6 = 0;

        if i3 >= i4 goto label10;

     label05:
        $r6 = r0.<java.io.PushbackReader: char[] buf>;

        $i11 = lengthof $r6;

        $i12 = r0.<java.io.PushbackReader: int pos>;

        $i13 = $i11 - $i12;

        if $i13 < i1 goto label13;

     label06:
        i6 = i1;

     label07:
        $r8 = r0.<java.io.PushbackReader: char[] buf>;

        $i16 = r0.<java.io.PushbackReader: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, $i16, r1, i2, i6);

     label08:
        i2 = i2 + i6;

        i5 = 0 + i6;

     label09:
        $i17 = r0.<java.io.PushbackReader: int pos>;

        $i18 = i6 + $i17;

        r0.<java.io.PushbackReader: int pos> = $i18;

     label10:
        if i6 != i1 goto label15;

     label11:
        exitmonitor r2;

     label12:
        return i1;

     label13:
        $r7 = r0.<java.io.PushbackReader: char[] buf>;

        $i14 = lengthof $r7;

        $i15 = r0.<java.io.PushbackReader: int pos>;

        i6 = $i14 - $i15;

     label14:
        goto label07;

     label15:
        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        $i10 = i1 - i5;

        i7 = virtualinvoke $r5.<java.io.Reader: int read(char[],int,int)>(r1, i2, $i10);

     label16:
        if i7 <= 0 goto label22;

        i8 = i7 + i5;

     label17:
        exitmonitor r2;

     label18:
        return i8;

     label19:
        $r9 := @caughtexception;

        r3 = $r9;

     label20:
        exitmonitor r2;

     label21:
        throw r3;

     label22:
        if i5 != 0 goto label25;

     label23:
        exitmonitor r2;

     label24:
        return i7;

     label25:
        exitmonitor r2;

     label26:
        return i5;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch java.lang.Throwable from label23 to label24 with label19;
        catch java.lang.Throwable from label25 to label26 with label19;
    }

    public boolean ready() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r7;
        boolean z0, $z1;
        char[] $r3, $r4;
        int $i0, $i1, $i2;
        java.io.Reader $r5;
        java.io.IOException $r6;

        r0 := @this: java.io.PushbackReader;

        r1 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r1;

     label01:
        $r3 = r0.<java.io.PushbackReader: char[] buf>;

        if $r3 != null goto label05;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Reader is closed");

        throw $r6;

     label02:
        $r7 := @caughtexception;

        r2 = $r7;

     label03:
        exitmonitor r1;

     label04:
        throw r2;

     label05:
        $r4 = r0.<java.io.PushbackReader: char[] buf>;

        $i1 = lengthof $r4;

        $i0 = r0.<java.io.PushbackReader: int pos>;

        $i2 = $i1 - $i0;

        if $i2 > 0 goto label10;

        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        $z1 = virtualinvoke $r5.<java.io.Reader: boolean ready()>();

        if $z1 == 0 goto label09;

     label06:
        goto label10;

     label07:
        exitmonitor r1;

     label08:
        return z0;

     label09:
        z0 = 0;

        goto label07;

     label10:
        z0 = 1;

        goto label07;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
    }

    public void reset() throws java.io.IOException
    {
        java.io.PushbackReader r0;
        java.io.IOException $r1;

        r0 := @this: java.io.PushbackReader;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("mark/reset not supported");

        throw $r1;
    }

    public long skip(long) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        long l0, l2, l3, l4, l5, $l10, $l12, $l15, $l17;
        java.lang.Object r1;
        java.lang.Throwable r2, $r11;
        int i1, $i8, $i9, $i13, $i14, $i16, $i18;
        byte $b6, $b7, $b11;
        char[] $r3;
        java.io.Reader $r4, $r5;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.IllegalArgumentException $r8;
        java.lang.String $r10;

        r0 := @this: java.io.PushbackReader;

        l0 := @parameter0: long;

        $b6 = l0 cmp 0L;

        if $b6 >= 0 goto label01;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("charCount < 0: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r8;

     label01:
        r1 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r1;

     label02:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

     label03:
        $b7 = l0 cmp 0L;

        if $b7 != 0 goto label06;

     label04:
        exitmonitor r1;

     label05:
        return 0L;

     label06:
        $r3 = r0.<java.io.PushbackReader: char[] buf>;

        $i8 = lengthof $r3;

        $i9 = r0.<java.io.PushbackReader: int pos>;

        i1 = $i8 - $i9;

     label07:
        if i1 <= 0 goto label17;

        $l12 = (long) i1;

        l5 = l0 - $l12;

        $b11 = l5 cmp 0L;

        if $b11 > 0 goto label13;

     label08:
        $i16 = r0.<java.io.PushbackReader: int pos>;

        $l15 = (long) $i16;

        $l17 = l0 + $l15;

        $i18 = (int) $l17;

        r0.<java.io.PushbackReader: int pos> = $i18;

        exitmonitor r1;

     label09:
        return l0;

     label10:
        $r11 := @caughtexception;

        r2 = $r11;

     label11:
        exitmonitor r1;

     label12:
        throw r2;

     label13:
        $i14 = r0.<java.io.PushbackReader: int pos>;

        $i13 = i1 + $i14;

        r0.<java.io.PushbackReader: int pos> = $i13;

        $r5 = r0.<java.io.PushbackReader: java.io.Reader in>;

        l3 = virtualinvoke $r5.<java.io.Reader: long skip(long)>(l5);

     label14:
        $l10 = (long) i1;

        l4 = l3 + $l10;

     label15:
        exitmonitor r1;

     label16:
        return l4;

     label17:
        $r4 = r0.<java.io.PushbackReader: java.io.Reader in>;

        l2 = virtualinvoke $r4.<java.io.Reader: long skip(long)>(l0);

     label18:
        l3 = l2;

        goto label14;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label13 to label14 with label10;
        catch java.lang.Throwable from label15 to label16 with label10;
        catch java.lang.Throwable from label17 to label18 with label10;
    }

    public void unread(int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        int i0, i1, $i2, $i3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r5;
        char[] r3;
        char $c4;
        java.io.IOException $r4;

        r0 := @this: java.io.PushbackReader;

        i0 := @parameter0: int;

        r1 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i2 = r0.<java.io.PushbackReader: int pos>;

        if $i2 != 0 goto label5;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pushback buffer full");

        throw $r4;

     label2:
        $r5 := @caughtexception;

        r2 = $r5;

     label3:
        exitmonitor r1;

     label4:
        throw r2;

     label5:
        r3 = r0.<java.io.PushbackReader: char[] buf>;

        $i3 = r0.<java.io.PushbackReader: int pos>;

        i1 = -1 + $i3;

        r0.<java.io.PushbackReader: int pos> = i1;

        $c4 = (char) i0;

        r3[i1] = $c4;

        exitmonitor r1;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
        catch java.lang.Throwable from label5 to label6 with label2;
    }

    public void unread(char[]) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1;
        int $i0;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.PushbackReader: void unread(char[],int,int)>(r1, 0, $i0);

        return;
    }

    public void unread(char[], int, int) throws java.io.IOException
    {
        java.io.PushbackReader r0;
        char[] r1;
        int i0, i1, i2, $i3, $i4, $i5;
        java.lang.Object r2;
        java.lang.Throwable r3, $r5;
        char $c6;
        java.io.IOException $r4;

        r0 := @this: java.io.PushbackReader;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = r0.<java.io.PushbackReader: java.lang.Object lock>;

        entermonitor r2;

     label01:
        specialinvoke r0.<java.io.PushbackReader: void checkNotClosed()>();

        $i3 = r0.<java.io.PushbackReader: int pos>;

        if i1 <= $i3 goto label05;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Pushback buffer full");

        throw $r4;

     label02:
        $r5 := @caughtexception;

        r3 = $r5;

     label03:
        exitmonitor r2;

     label04:
        throw r3;

     label05:
        $i4 = lengthof r1;

        staticinvoke <java.util.Arrays: void checkOffsetAndCount(int,int,int)>($i4, i0, i1);

     label06:
        $i5 = i0 + i1;

        i2 = -1 + $i5;

     label07:
        if i2 < i0 goto label10;

     label08:
        $c6 = r1[i2];

        virtualinvoke r0.<java.io.PushbackReader: void unread(int)>($c6);

     label09:
        i2 = i2 + -1;

        goto label07;

     label10:
        exitmonitor r2;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.lang.Throwable from label05 to label06 with label02;
        catch java.lang.Throwable from label08 to label09 with label02;
        catch java.lang.Throwable from label10 to label11 with label02;
    }
}
