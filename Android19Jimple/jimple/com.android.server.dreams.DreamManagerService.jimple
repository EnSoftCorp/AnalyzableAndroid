public final class com.android.server.dreams.DreamManagerService extends android.service.dreams.IDreamManager$Stub
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final com.android.server.dreams.DreamController mController;
    private final com.android.server.dreams.DreamController$Listener mControllerListener;
    private boolean mCurrentDreamIsTest;
    private android.content.ComponentName mCurrentDreamName;
    private android.os.Binder mCurrentDreamToken;
    private int mCurrentDreamUserId;
    private final com.android.server.dreams.DreamManagerService$DreamHandler mHandler;
    private final java.lang.Object mLock;
    private final android.os.PowerManager mPowerManager;

    public void <init>(android.content.Context, android.os.Handler)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.content.Context r1;
        android.os.Handler r2;
        java.lang.Object $r3, $r10;
        com.android.server.dreams.DreamManagerService$5 $r4;
        com.android.server.dreams.DreamManagerService$DreamHandler $r5, $r9;
        android.os.Looper $r6;
        com.android.server.dreams.DreamController $r7;
        com.android.server.dreams.DreamController$Listener $r8;
        android.os.PowerManager $r11;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        specialinvoke r0.<android.service.dreams.IDreamManager$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock> = $r3;

        $r4 = new com.android.server.dreams.DreamManagerService$5;

        specialinvoke $r4.<com.android.server.dreams.DreamManagerService$5: void <init>(com.android.server.dreams.DreamManagerService)>(r0);

        r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamController$Listener mControllerListener> = $r4;

        r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext> = r1;

        $r5 = new com.android.server.dreams.DreamManagerService$DreamHandler;

        $r6 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r5.<com.android.server.dreams.DreamManagerService$DreamHandler: void <init>(com.android.server.dreams.DreamManagerService,android.os.Looper)>(r0, $r6);

        r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler> = $r5;

        $r7 = new com.android.server.dreams.DreamController;

        $r9 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler>;

        $r8 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamController$Listener mControllerListener>;

        specialinvoke $r7.<com.android.server.dreams.DreamController: void <init>(android.content.Context,android.os.Handler,com.android.server.dreams.DreamController$Listener)>(r1, $r9, $r8);

        r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamController mController> = $r7;

        $r10 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r11 = (android.os.PowerManager) $r10;

        r0.<com.android.server.dreams.DreamManagerService: android.os.PowerManager mPowerManager> = $r11;

        return;
    }

    static java.lang.Object access$000(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.dreams.DreamManagerService;

        $r1 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        return $r1;
    }

    static void access$100(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService r0;

        r0 := @parameter0: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void stopDreamLocked()>();

        return;
    }

    static com.android.server.dreams.DreamController access$200(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService r0;
        com.android.server.dreams.DreamController $r1;

        r0 := @parameter0: com.android.server.dreams.DreamManagerService;

        $r1 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamController mController>;

        return $r1;
    }

    static android.os.Binder access$300(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.os.Binder $r1;

        r0 := @parameter0: com.android.server.dreams.DreamManagerService;

        $r1 = r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken>;

        return $r1;
    }

    static void access$400(com.android.server.dreams.DreamManagerService)
    {
        com.android.server.dreams.DreamManagerService r0;

        r0 := @parameter0: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void cleanupDreamLocked()>();

        return;
    }

    private void checkPermission(java.lang.String)
    {
        com.android.server.dreams.DreamManagerService r0;
        java.lang.String r1, $r9;
        android.content.Context $r2;
        int $i0, $i1;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r1);

        if $i0 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Access denied to process: ");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must have permission ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        return;
    }

    private android.content.ComponentName chooseDreamForUser(int)
    {
        com.android.server.dreams.DreamManagerService r0;
        int i0, $i1;
        android.content.ComponentName[] r1;
        android.content.ComponentName $r2;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        i0 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponentsForUser(int)>(i0);

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 == 0 goto label1;

        $r2 = r1[0];

        return $r2;

     label1:
        return null;
    }

    private void cleanupDreamLocked()
    {
        com.android.server.dreams.DreamManagerService r0;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken> = null;

        r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName mCurrentDreamName> = null;

        r0.<com.android.server.dreams.DreamManagerService: boolean mCurrentDreamIsTest> = 0;

        r0.<com.android.server.dreams.DreamManagerService: int mCurrentDreamUserId> = 0;

        return;
    }

    private static android.content.ComponentName[] componentsFromString(java.lang.String)
    {
        java.lang.String r0, $r3;
        java.lang.String[] r1;
        android.content.ComponentName[] r2;
        int i0, $i1, $i2;
        android.content.ComponentName $r4;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label2;

        r2 = null;

     label1:
        return r2;

     label2:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i1 = lengthof r1;

        r2 = newarray (android.content.ComponentName)[$i1];

        i0 = 0;

     label3:
        $i2 = lengthof r1;

        if i0 >= $i2 goto label1;

        $r3 = r1[i0];

        $r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r3);

        r2[i0] = $r4;

        i0 = i0 + 1;

        goto label3;
    }

    private static java.lang.String componentsToString(android.content.ComponentName[])
    {
        android.content.ComponentName[] r0;
        java.lang.StringBuilder r1, $r3;
        int i0, i1, $i2;
        android.content.ComponentName r2;
        java.lang.String $r4, $r5;

        r0 := @parameter0: android.content.ComponentName[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r1 = $r3;

        if r0 == null goto label3;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r0[i1];

        $i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r5 = virtualinvoke r2.<android.content.ComponentName: java.lang.String flattenToString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i1 = i1 + 1;

        goto label1;

     label3:
        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private android.content.ComponentName[] getDreamComponentsForUser(int)
    {
        com.android.server.dreams.DreamManagerService r0;
        int i0, i1, i2, $i3;
        android.content.ComponentName[] r1, $r9, $r10;
        java.util.ArrayList r2, $r8;
        android.content.ComponentName r3, r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;
        java.lang.String $r7, $r14, $r18;
        boolean $z0, $z2;
        java.lang.Object[] $r11;
        java.lang.StringBuilder $r12, $r13, $r15, $r16, $r17, $r19, $r20;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        i0 := @parameter0: int;

        $r5 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r6, "screensaver_components", i0);

        r1 = staticinvoke <com.android.server.dreams.DreamManagerService: android.content.ComponentName[] componentsFromString(java.lang.String)>($r7);

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r2 = $r8;

        if r1 == null goto label4;

        i1 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i1 goto label4;

        r4 = r1[i2];

        $z2 = specialinvoke r0.<com.android.server.dreams.DreamManagerService: boolean serviceExists(android.content.ComponentName)>(r4);

        if $z2 == 0 goto label3;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dream ");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r18 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DreamManagerService", $r18);

        goto label2;

     label4:
        $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        r3 = virtualinvoke r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()>();

        if r3 == null goto label5;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Falling back to default dream ");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DreamManagerService", $r14);

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r3);

     label5:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        $r9 = newarray (android.content.ComponentName)[$i3];

        $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r10 = (android.content.ComponentName[]) $r11;

        return $r10;
    }

    private boolean serviceExists(android.content.ComponentName)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.content.ComponentName r1;
        boolean z0;
        android.content.pm.ServiceInfo r3;
        android.content.Context $r4;
        android.content.pm.PackageManager $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 = 0;

        if r1 == null goto label3;

     label1:
        $r4 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r3 = virtualinvoke $r5.<android.content.pm.PackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>(r1, 0);

     label2:
        z0 = 0;

        if r3 == null goto label3;

        z0 = 1;

     label3:
        return z0;

     label4:
        $r6 := @caughtexception;

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    private void startDreamLocked(android.content.ComponentName, boolean, int)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.content.ComponentName r1, $r3;
        boolean z0, $z1, $z3;
        int i0, $i1;
        android.os.Binder r2, $r4;
        com.android.server.dreams.DreamManagerService$3 $r5;
        com.android.server.dreams.DreamManagerService$DreamHandler $r6;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName mCurrentDreamName>;

        $z1 = staticinvoke <libcore.util.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r3, r1);

        if $z1 == 0 goto label1;

        $z3 = r0.<com.android.server.dreams.DreamManagerService: boolean mCurrentDreamIsTest>;

        if $z3 != z0 goto label1;

        $i1 = r0.<com.android.server.dreams.DreamManagerService: int mCurrentDreamUserId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void stopDreamLocked()>();

        $r4 = new android.os.Binder;

        specialinvoke $r4.<android.os.Binder: void <init>()>();

        r2 = $r4;

        r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken> = r2;

        r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName mCurrentDreamName> = r1;

        r0.<com.android.server.dreams.DreamManagerService: boolean mCurrentDreamIsTest> = z0;

        r0.<com.android.server.dreams.DreamManagerService: int mCurrentDreamUserId> = i0;

        $r6 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler>;

        $r5 = new com.android.server.dreams.DreamManagerService$3;

        specialinvoke $r5.<com.android.server.dreams.DreamManagerService$3: void <init>(com.android.server.dreams.DreamManagerService,android.os.Binder,android.content.ComponentName,boolean,int)>(r0, r2, r1, z0, i0);

        virtualinvoke $r6.<com.android.server.dreams.DreamManagerService$DreamHandler: boolean post(java.lang.Runnable)>($r5);

        return;
    }

    private void stopDreamLocked()
    {
        com.android.server.dreams.DreamManagerService r0;
        android.os.Binder $r1;
        com.android.server.dreams.DreamManagerService$4 $r2;
        com.android.server.dreams.DreamManagerService$DreamHandler $r3;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        $r1 = r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken>;

        if $r1 == null goto label1;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void cleanupDreamLocked()>();

        $r3 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler>;

        $r2 = new com.android.server.dreams.DreamManagerService$4;

        specialinvoke $r2.<com.android.server.dreams.DreamManagerService$4: void <init>(com.android.server.dreams.DreamManagerService)>(r0);

        virtualinvoke $r3.<com.android.server.dreams.DreamManagerService$DreamHandler: boolean post(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    public void awaken()
    {
        com.android.server.dreams.DreamManagerService r0;
        long l0, l1;
        java.lang.Throwable r1, $r3;
        android.os.PowerManager $r2;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.WRITE_DREAM_STATE");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = r0.<com.android.server.dreams.DreamManagerService: android.os.PowerManager mPowerManager>;

        virtualinvoke $r2.<android.os.PowerManager: void userActivity(long,boolean)>(l1, 0);

        virtualinvoke r0.<com.android.server.dreams.DreamManagerService: void stopDream()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void dream()
    {
        com.android.server.dreams.DreamManagerService r0;
        long l0, l1;
        java.lang.Throwable r1, $r4;
        android.os.PowerManager $r2, $r3;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.WRITE_DREAM_STATE");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = r0.<com.android.server.dreams.DreamManagerService: android.os.PowerManager mPowerManager>;

        virtualinvoke $r2.<android.os.PowerManager: void userActivity(long,boolean)>(l1, 1);

        $r3 = r0.<com.android.server.dreams.DreamManagerService: android.os.PowerManager mPowerManager>;

        virtualinvoke $r3.<android.os.PowerManager: void nap(long)>(l1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.dreams.DreamManagerService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        android.content.Context $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r5, $r6, $r8, $r10, $r11, $r13, $r15, $r16, $r17, $r18, $r20, $r22, $r25, $r26, $r27, $r28, $r30;
        android.os.Binder $r7;
        java.lang.String $r9, $r14, $r19, $r21, $r29;
        android.content.ComponentName $r12;
        boolean $z0;
        com.android.server.dreams.DreamManagerService$DreamHandler $r23;
        com.android.server.dreams.DreamManagerService$2 $r24;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump DreamManager from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r28 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r29);

        return;

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("DREAM MANAGER (dumpsys dreams)");

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentDreamToken=");

        $r7 = r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentDreamName=");

        $r12 = r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName mCurrentDreamName>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r14);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentDreamUserId=");

        $i1 = r0.<com.android.server.dreams.DreamManagerService: int mCurrentDreamUserId>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentDreamIsTest=");

        $z0 = r0.<com.android.server.dreams.DreamManagerService: boolean mCurrentDreamIsTest>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r21 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r21);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        $r23 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler>;

        $r24 = new com.android.server.dreams.DreamManagerService$2;

        specialinvoke $r24.<com.android.server.dreams.DreamManagerService$2: void <init>(com.android.server.dreams.DreamManagerService)>(r0);

        staticinvoke <com.android.internal.util.DumpUtils: void dumpAsync(android.os.Handler,com.android.internal.util.DumpUtils$Dump,java.io.PrintWriter,long)>($r23, $r24, r2, 200L);

        return;
    }

    public void finishSelf(android.os.IBinder)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.os.IBinder r1;
        long l0;
        java.lang.Throwable r2, r4, $r7, $r8;
        java.lang.Object r3;
        android.os.Binder $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.os.IBinder;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("token must not be null");

        throw $r6;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        r3 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label3:
        $r5 = r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken>;

        if $r5 != r1 goto label4;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void stopDreamLocked()>();

     label4:
        exitmonitor r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label6:
        $r8 := @caughtexception;

        r4 = $r8;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r7 := @caughtexception;

        r2 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public android.content.ComponentName getDefaultDreamComponent()
    {
        com.android.server.dreams.DreamManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r7;
        java.lang.String r2;
        android.content.ComponentName r3, r4;
        android.content.Context $r5;
        android.content.ContentResolver $r6;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.READ_DREAM_STATE");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = staticinvoke <android.provider.Settings$Secure: java.lang.String getStringForUser(android.content.ContentResolver,java.lang.String,int)>($r6, "screensaver_default_component", i0);

     label2:
        if r2 != null goto label4;

        r4 = null;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r4;

     label4:
        r3 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r2);

     label5:
        r4 = r3;

        goto label3;

     label6:
        $r7 := @caughtexception;

        r1 = $r7;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public android.content.ComponentName[] getDreamComponents()
    {
        com.android.server.dreams.DreamManagerService r0;
        int i0;
        long l1;
        java.lang.Throwable r1, $r3;
        android.content.ComponentName[] r2;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.READ_DREAM_STATE");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = specialinvoke r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponentsForUser(int)>(i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r2;

     label3:
        $r3 := @caughtexception;

        r1 = $r3;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean isDreaming()
    {
        com.android.server.dreams.DreamManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r4;
        boolean z0, $z1;
        android.os.Binder $r3;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.READ_DREAM_STATE");

        r1 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService: android.os.Binder mCurrentDreamToken>;

        if $r3 == null goto label8;

        $z1 = r0.<com.android.server.dreams.DreamManagerService: boolean mCurrentDreamIsTest>;

        if $z1 != 0 goto label8;

     label2:
        z0 = 1;

     label3:
        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

        r2 = $r4;

     label6:
        exitmonitor r1;

     label7:
        throw r2;

     label8:
        z0 = 0;

        goto label3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void setDreamComponents(android.content.ComponentName[])
    {
        com.android.server.dreams.DreamManagerService r0;
        android.content.ComponentName[] r1;
        int i0;
        long l1;
        java.lang.Throwable r2, $r6;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        java.lang.String $r5;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.content.ComponentName[];

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.WRITE_DREAM_STATE");

        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = staticinvoke <com.android.server.dreams.DreamManagerService: java.lang.String componentsToString(android.content.ComponentName[])>(r1);

        staticinvoke <android.provider.Settings$Secure: boolean putStringForUser(android.content.ContentResolver,java.lang.String,java.lang.String,int)>($r4, "screensaver_components", $r5, i0);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startDream()
    {
        com.android.server.dreams.DreamManagerService r0;
        int i0;
        android.content.ComponentName r1;
        java.lang.Object r2;
        java.lang.Throwable r3, $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r1 = specialinvoke r0.<com.android.server.dreams.DreamManagerService: android.content.ComponentName chooseDreamForUser(int)>(i0);

        if r1 == null goto label6;

        r2 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void startDreamLocked(android.content.ComponentName,boolean,int)>(r1, 0, i0);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

     label4:
        exitmonitor r2;

     label5:
        throw r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopDream()
    {
        com.android.server.dreams.DreamManagerService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, $r3;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void stopDreamLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemRunning()
    {
        com.android.server.dreams.DreamManagerService r0;
        com.android.server.dreams.DreamManagerService$1 $r1;
        android.content.Context $r2;
        android.content.IntentFilter $r3;
        com.android.server.dreams.DreamManagerService$DreamHandler $r4;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        $r2 = r0.<com.android.server.dreams.DreamManagerService: android.content.Context mContext>;

        $r1 = new com.android.server.dreams.DreamManagerService$1;

        specialinvoke $r1.<com.android.server.dreams.DreamManagerService$1: void <init>(com.android.server.dreams.DreamManagerService)>(r0);

        $r3 = new android.content.IntentFilter;

        specialinvoke $r3.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        $r4 = r0.<com.android.server.dreams.DreamManagerService: com.android.server.dreams.DreamManagerService$DreamHandler mHandler>;

        virtualinvoke $r2.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r1, $r3, null, $r4);

        return;
    }

    public void testDream(android.content.ComponentName)
    {
        com.android.server.dreams.DreamManagerService r0;
        android.content.ComponentName r1;
        int i0, i1;
        long l2;
        java.lang.Throwable r2, r4, $r11, $r13;
        java.lang.Object r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r12;

        r0 := @this: com.android.server.dreams.DreamManagerService;

        r1 := @parameter0: android.content.ComponentName;

        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void checkPermission(java.lang.String)>("android.permission.WRITE_DREAM_STATE");

        if r1 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dream must not be null");

        throw $r12;

     label1:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        i1 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        if i0 == i1 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Aborted attempt to start a test dream while a different  user is active: callingUserId=");

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", currentUserId=");

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DreamManagerService", $r10);

        return;

     label2:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label3:
        r3 = r0.<com.android.server.dreams.DreamManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label4:
        specialinvoke r0.<com.android.server.dreams.DreamManagerService: void startDreamLocked(android.content.ComponentName,boolean,int)>(r1, 1, i0);

        exitmonitor r3;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label6:
        $r13 := @caughtexception;

        r4 = $r13;

     label7:
        exitmonitor r3;

     label8:
        throw r4;

     label9:
        $r11 := @caughtexception;

        r2 = $r11;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw r2;

        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public static void <clinit>()
    {
        <com.android.server.dreams.DreamManagerService: java.lang.String TAG> = "DreamManagerService";

        <com.android.server.dreams.DreamManagerService: boolean DEBUG> = 0;

        return;
    }
}
