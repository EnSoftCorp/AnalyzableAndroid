class java.nio.DatagramChannelImpl$DatagramSocketAdapter extends java.net.DatagramSocket
{
    private java.nio.DatagramChannelImpl channelImpl;

    void <init>(java.net.DatagramSocketImpl, java.nio.DatagramChannelImpl)
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramSocketImpl r1;
        java.nio.DatagramChannelImpl r2;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramSocketImpl;

        r2 := @parameter1: java.nio.DatagramChannelImpl;

        specialinvoke r0.<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>(r1);

        r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl> = r2;

        return;
    }

    public void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.SocketAddress r1;
        java.nio.DatagramChannelImpl $r2, $r3;
        boolean $z0;
        java.nio.channels.AlreadyConnectedException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.SocketAddress;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r4 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r4.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r4;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>(r1);

        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r3.<java.nio.DatagramChannelImpl: boolean isBound> = 1;

        return;
    }

    public void close()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl r1, $r4, $r5;
        java.lang.Throwable r2, $r6;
        boolean z0;
        java.io.IOException $r7;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        entermonitor r1;

     label1:
        $r4 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        z0 = virtualinvoke $r4.<java.nio.DatagramChannelImpl: boolean isOpen()>();

     label2:
        if z0 == 0 goto label4;

     label3:
        $r5 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r5.<java.nio.DatagramChannelImpl: void close()>();

     label4:
        specialinvoke r0.<java.net.DatagramSocket: void close()>();

        exitmonitor r1;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        r2 = $r6;

     label7:
        exitmonitor r1;

     label8:
        throw r2;

     label9:
        $r7 := @caughtexception;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label9;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void disconnect()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r2;
        java.io.IOException $r4;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

     label1:
        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        virtualinvoke $r2.<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()>();

     label2:
        specialinvoke r0.<java.net.DatagramSocket: void disconnect()>();

        return;

     label3:
        $r4 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        return $r1;
    }

    public java.net.InetAddress getInetAddress()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1, $r3;
        java.net.InetSocketAddress $r2, $r4;
        java.net.InetAddress $r5;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r2 = $r1.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r4 = $r3.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r5 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        return $r5;
    }

    public java.net.InetAddress getLocalAddress()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.InetAddress r2;
        java.nio.DatagramChannelImpl $r3;
        java.io.FileDescriptor $r4;
        java.net.SocketException $r5;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

     label1:
        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r4 = staticinvoke <java.nio.DatagramChannelImpl: java.io.FileDescriptor access$000(java.nio.DatagramChannelImpl)>($r3);

        r2 = staticinvoke <libcore.io.IoBridge: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor)>($r4);

     label2:
        return r2;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.net.SocketException from label1 to label2 with label3;
    }

    public int getPort()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1, $r3;
        java.net.InetSocketAddress $r2, $r4;
        int $i0;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r2 = $r1.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        if $r2 != null goto label1;

        return -1;

     label1:
        $r3 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $r4 = $r3.<java.nio.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $i0 = virtualinvoke $r4.<java.net.InetSocketAddress: int getPort()>();

        return $i0;
    }

    public boolean isBound()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = $r1.<java.nio.DatagramChannelImpl: boolean isBound>;

        return $z0;
    }

    public boolean isConnected()
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.nio.DatagramChannelImpl $r1;
        boolean $z0;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r1.<java.nio.DatagramChannelImpl: boolean isConnected()>();

        return $z0;
    }

    public void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramPacket r1;
        java.nio.DatagramChannelImpl $r2;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r3;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramPacket;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r3 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r3.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>(r1);

        return;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        java.nio.DatagramChannelImpl$DatagramSocketAdapter r0;
        java.net.DatagramPacket r1;
        java.nio.DatagramChannelImpl $r2;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r3;

        r0 := @this: java.nio.DatagramChannelImpl$DatagramSocketAdapter;

        r1 := @parameter0: java.net.DatagramPacket;

        $r2 = r0.<java.nio.DatagramChannelImpl$DatagramSocketAdapter: java.nio.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.DatagramChannelImpl: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r3 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r3.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke r0.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>(r1);

        return;
    }
}
