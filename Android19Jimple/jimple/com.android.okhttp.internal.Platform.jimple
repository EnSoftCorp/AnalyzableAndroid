public final class com.android.okhttp.internal.Platform extends java.lang.Object
{
    private static final int DEFAULT_MTU;
    private static final com.android.okhttp.internal.Platform PLATFORM;

    static void <clinit>()
    {
        com.android.okhttp.internal.Platform $r0;

        <com.android.okhttp.internal.Platform: int DEFAULT_MTU> = 1400;

        $r0 = new com.android.okhttp.internal.Platform;

        specialinvoke $r0.<com.android.okhttp.internal.Platform: void <init>()>();

        <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform PLATFORM> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.okhttp.internal.Platform r0;

        r0 := @this: com.android.okhttp.internal.Platform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.android.okhttp.internal.Platform get()
    {
        com.android.okhttp.internal.Platform $r0;

        $r0 = <com.android.okhttp.internal.Platform: com.android.okhttp.internal.Platform PLATFORM>;

        return $r0;
    }

    public void connectSocket(java.net.Socket, java.net.InetSocketAddress, int) throws java.io.IOException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        java.net.InetSocketAddress r2;
        int i0;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.net.InetSocketAddress;

        i0 := @parameter2: int;

        virtualinvoke r1.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r2, i0);

        return;
    }

    public void enableTlsExtensions(javax.net.ssl.SSLSocket, java.lang.String)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String r2;
        com.android.org.conscrypt.OpenSSLSocketImpl r3;
        boolean $z0;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: java.lang.String;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setUseSessionTickets(boolean)>(1);

        virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setHostname(java.lang.String)>(r2);

     label1:
        return;
    }

    public int getMtu(java.net.Socket)
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        int i0, i1;
        java.net.NetworkInterface r3;
        java.net.InetAddress $r4;
        java.net.SocketException $r5;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        i0 = 1400;

     label1:
        $r4 = virtualinvoke r1.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        r3 = staticinvoke <java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)>($r4);

     label2:
        if r3 == null goto label5;

     label3:
        i1 = virtualinvoke r3.<java.net.NetworkInterface: int getMTU()>();

     label4:
        i0 = i1;

     label5:
        return i0;

     label6:
        $r5 := @caughtexception;

        return 1400;

        catch java.net.SocketException from label1 to label2 with label6;
        catch java.net.SocketException from label3 to label4 with label6;
    }

    public byte[] getNpnSelectedProtocol(javax.net.ssl.SSLSocket)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r2;
        byte[] $r3;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        $r2 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        $r3 = virtualinvoke $r2.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] getNpnSelectedProtocol()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.String getPrefix()
    {
        com.android.okhttp.internal.Platform r0;

        r0 := @this: com.android.okhttp.internal.Platform;

        return "X-Android";
    }

    public void logW(java.lang.String)
    {
        com.android.okhttp.internal.Platform r0;
        java.lang.String r1;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.lang.String;

        staticinvoke <java.lang.System: void logW(java.lang.String)>(r1);

        return;
    }

    public java.io.OutputStream newDeflaterOutputStream(java.io.OutputStream, java.util.zip.Deflater, boolean)
    {
        com.android.okhttp.internal.Platform r0;
        java.io.OutputStream r1;
        java.util.zip.Deflater r2;
        boolean z0;
        java.util.zip.DeflaterOutputStream $r3;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.zip.Deflater;

        z0 := @parameter2: boolean;

        $r3 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r3.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater,boolean)>(r1, r2, z0);

        return $r3;
    }

    public void setNpnProtocols(javax.net.ssl.SSLSocket, byte[])
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        byte[] r2;
        boolean $z0;
        com.android.org.conscrypt.OpenSSLSocketImpl $r3;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        r2 := @parameter1: byte[];

        $z0 = r1 instanceof com.android.org.conscrypt.OpenSSLSocketImpl;

        if $z0 == 0 goto label1;

        $r3 = (com.android.org.conscrypt.OpenSSLSocketImpl) r1;

        virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLSocketImpl: void setNpnProtocols(byte[])>(r2);

     label1:
        return;
    }

    public void supportTlsIntolerantServer(javax.net.ssl.SSLSocket)
    {
        com.android.okhttp.internal.Platform r0;
        javax.net.ssl.SSLSocket r1;
        java.lang.String[] $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "SSLv3";

        virtualinvoke r1.<javax.net.ssl.SSLSocket: void setEnabledProtocols(java.lang.String[])>($r2);

        return;
    }

    public void tagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        dalvik.system.SocketTagger $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r2.<dalvik.system.SocketTagger: void tag(java.net.Socket)>(r1);

        return;
    }

    public java.net.URI toUriLenient(java.net.URL) throws java.net.URISyntaxException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.URL r1;
        java.net.URI $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.URL;

        $r2 = virtualinvoke r1.<java.net.URL: java.net.URI toURILenient()>();

        return $r2;
    }

    public void untagSocket(java.net.Socket) throws java.net.SocketException
    {
        com.android.okhttp.internal.Platform r0;
        java.net.Socket r1;
        dalvik.system.SocketTagger $r2;

        r0 := @this: com.android.okhttp.internal.Platform;

        r1 := @parameter0: java.net.Socket;

        $r2 = staticinvoke <dalvik.system.SocketTagger: dalvik.system.SocketTagger get()>();

        virtualinvoke $r2.<dalvik.system.SocketTagger: void untag(java.net.Socket)>(r1);

        return;
    }
}
