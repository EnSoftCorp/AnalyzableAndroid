public class java.security.cert.CertificateFactory extends java.lang.Object
{
    private static final org.apache.harmony.security.fortress.Engine ENGINE;
    private static final java.lang.String SERVICE;
    private final java.security.Provider provider;
    private final java.security.cert.CertificateFactorySpi spiImpl;
    private final java.lang.String type;

    static void <clinit>()
    {
        org.apache.harmony.security.fortress.Engine $r0;

        <java.security.cert.CertificateFactory: java.lang.String SERVICE> = "CertificateFactory";

        $r0 = new org.apache.harmony.security.fortress.Engine;

        specialinvoke $r0.<org.apache.harmony.security.fortress.Engine: void <init>(java.lang.String)>("CertificateFactory");

        <java.security.cert.CertificateFactory: org.apache.harmony.security.fortress.Engine ENGINE> = $r0;

        return;
    }

    protected void <init>(java.security.cert.CertificateFactorySpi, java.security.Provider, java.lang.String)
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.CertificateFactorySpi r1;
        java.security.Provider r2;
        java.lang.String r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.security.cert.CertificateFactorySpi;

        r2 := @parameter1: java.security.Provider;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<java.security.cert.CertificateFactory: java.security.Provider provider> = r2;

        r0.<java.security.cert.CertificateFactory: java.lang.String type> = r3;

        r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl> = r1;

        return;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String) throws java.security.cert.CertificateException
    {
        java.lang.String r0;
        java.security.NoSuchAlgorithmException r1, $r10;
        org.apache.harmony.security.fortress.Engine$SpiAndProvider r2;
        java.security.cert.CertificateFactory r3, $r5;
        org.apache.harmony.security.fortress.Engine $r4;
        java.lang.Object $r6;
        java.security.Provider $r7;
        java.security.cert.CertificateFactorySpi $r8;
        java.lang.NullPointerException $r9;
        java.security.cert.CertificateException $r11;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r9;

     label1:
        $r4 = <java.security.cert.CertificateFactory: org.apache.harmony.security.fortress.Engine ENGINE>;

        r2 = virtualinvoke $r4.<org.apache.harmony.security.fortress.Engine: org.apache.harmony.security.fortress.Engine$SpiAndProvider getInstance(java.lang.String,java.lang.Object)>(r0, null);

        $r5 = new java.security.cert.CertificateFactory;

        $r6 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.lang.Object spi>;

        $r8 = (java.security.cert.CertificateFactorySpi) $r6;

        $r7 = r2.<org.apache.harmony.security.fortress.Engine$SpiAndProvider: java.security.Provider provider>;

        specialinvoke $r5.<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>($r8, $r7, r0);

        r3 = $r5;

     label2:
        return r3;

     label3:
        $r10 := @caughtexception;

        r1 = $r10;

        $r11 = new java.security.cert.CertificateException;

        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r1);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchProviderException
    {
        java.lang.String r0, r1;
        java.security.Provider r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        java.security.cert.CertificateFactory $r4;
        java.security.NoSuchProviderException $r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null || provider.isEmpty()");

        throw $r3;

     label2:
        r2 = staticinvoke <java.security.Security: java.security.Provider getProvider(java.lang.String)>(r1);

        if r2 != null goto label3;

        $r5 = new java.security.NoSuchProviderException;

        specialinvoke $r5.<java.security.NoSuchProviderException: void <init>(java.lang.String)>(r1);

        throw $r5;

     label3:
        $r4 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)>(r0, r2);

        return $r4;
    }

    public static final java.security.cert.CertificateFactory getInstance(java.lang.String, java.security.Provider) throws java.security.cert.CertificateException
    {
        java.lang.String r0;
        java.security.Provider r1;
        java.security.cert.CertificateFactory r2, $r4;
        java.security.NoSuchAlgorithmException r3, $r10;
        org.apache.harmony.security.fortress.Engine $r5;
        java.lang.Object $r6;
        java.security.cert.CertificateFactorySpi $r7;
        java.lang.NullPointerException $r8;
        java.lang.IllegalArgumentException $r9;
        java.security.cert.CertificateException $r11;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.security.Provider;

        if r1 != null goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provider == null");

        throw $r9;

     label1:
        if r0 != null goto label2;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("type == null");

        throw $r8;

     label2:
        $r4 = new java.security.cert.CertificateFactory;

        $r5 = <java.security.cert.CertificateFactory: org.apache.harmony.security.fortress.Engine ENGINE>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.security.fortress.Engine: java.lang.Object getInstance(java.lang.String,java.security.Provider,java.lang.Object)>(r0, r1, null);

        $r7 = (java.security.cert.CertificateFactorySpi) $r6;

        specialinvoke $r4.<java.security.cert.CertificateFactory: void <init>(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)>($r7, r1, r0);

        r2 = $r4;

     label3:
        return r2;

     label4:
        $r10 := @caughtexception;

        r3 = $r10;

        $r11 = new java.security.cert.CertificateException;

        specialinvoke $r11.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r11;

        catch java.security.NoSuchAlgorithmException from label2 to label3 with label4;
    }

    public final java.security.cert.CRL generateCRL(java.io.InputStream) throws java.security.cert.CRLException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.CRL $r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)>(r1);

        return $r3;
    }

    public final java.util.Collection generateCRLs(java.io.InputStream) throws java.security.cert.CRLException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCRLs(java.io.InputStream)>(r1);

        return $r3;
    }

    public final java.security.cert.CertPath generateCertPath(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.util.Iterator r2;
        boolean $z0;
        java.security.cert.CertificateFactorySpi $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.security.cert.CertPath $r6;
        java.security.cert.CertificateException $r7;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 = virtualinvoke r0.<java.security.cert.CertificateFactory: java.util.Iterator getCertPathEncodings()>();

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r7 = new java.security.cert.CertificateException;

        specialinvoke $r7.<java.security.cert.CertificateException: void <init>(java.lang.String)>("There are no CertPath encodings");

        throw $r7;

     label1:
        $r3 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r6 = virtualinvoke $r3.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>(r1, $r5);

        return $r6;
    }

    public final java.security.cert.CertPath generateCertPath(java.io.InputStream, java.lang.String) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.lang.String r2;
        java.security.cert.CertificateFactorySpi $r3;
        java.security.cert.CertPath $r4;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r4 = virtualinvoke $r3.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)>(r1, r2);

        return $r4;
    }

    public final java.security.cert.CertPath generateCertPath(java.util.List) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.util.List r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.CertPath $r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List)>(r1);

        return $r3;
    }

    public final java.security.cert.Certificate generateCertificate(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.security.cert.Certificate $r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)>(r1);

        return $r3;
    }

    public final java.util.Collection generateCertificates(java.io.InputStream) throws java.security.cert.CertificateException
    {
        java.security.cert.CertificateFactory r0;
        java.io.InputStream r1;
        java.security.cert.CertificateFactorySpi $r2;
        java.util.Collection $r3;

        r0 := @this: java.security.cert.CertificateFactory;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r3 = virtualinvoke $r2.<java.security.cert.CertificateFactorySpi: java.util.Collection engineGenerateCertificates(java.io.InputStream)>(r1);

        return $r3;
    }

    public final java.util.Iterator getCertPathEncodings()
    {
        java.security.cert.CertificateFactory r0;
        java.security.cert.CertificateFactorySpi $r1;
        java.util.Iterator $r2;

        r0 := @this: java.security.cert.CertificateFactory;

        $r1 = r0.<java.security.cert.CertificateFactory: java.security.cert.CertificateFactorySpi spiImpl>;

        $r2 = virtualinvoke $r1.<java.security.cert.CertificateFactorySpi: java.util.Iterator engineGetCertPathEncodings()>();

        return $r2;
    }

    public final java.security.Provider getProvider()
    {
        java.security.cert.CertificateFactory r0;
        java.security.Provider $r1;

        r0 := @this: java.security.cert.CertificateFactory;

        $r1 = r0.<java.security.cert.CertificateFactory: java.security.Provider provider>;

        return $r1;
    }

    public final java.lang.String getType()
    {
        java.security.cert.CertificateFactory r0;
        java.lang.String $r1;

        r0 := @this: java.security.cert.CertificateFactory;

        $r1 = r0.<java.security.cert.CertificateFactory: java.lang.String type>;

        return $r1;
    }
}
