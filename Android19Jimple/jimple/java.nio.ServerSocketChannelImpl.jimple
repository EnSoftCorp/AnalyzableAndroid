final class java.nio.ServerSocketChannelImpl extends java.nio.channels.ServerSocketChannel implements java.nio.FileDescriptorChannel
{
    private final java.lang.Object acceptLock;
    private final java.net.SocketImpl impl;
    private boolean isBound;
    private final java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket;

    public void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.channels.spi.SelectorProvider r1;
        java.lang.Object $r2;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r3, $r4;
        java.net.SocketImpl $r5;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke r0.<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>(r1);

        r0.<java.nio.ServerSocketChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<java.nio.ServerSocketChannelImpl: java.lang.Object acceptLock> = $r2;

        $r3 = new java.nio.ServerSocketChannelImpl$ServerSocketAdapter;

        specialinvoke $r3.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void <init>(java.nio.ServerSocketChannelImpl)>(r0);

        r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket> = $r3;

        $r4 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $r5 = virtualinvoke $r4.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.SocketImpl getImpl$()>();

        r0.<java.nio.ServerSocketChannelImpl: java.net.SocketImpl impl> = $r5;

        return;
    }

    static boolean access$000(java.nio.ServerSocketChannelImpl)
    {
        java.nio.ServerSocketChannelImpl r0;
        boolean $z0;

        r0 := @parameter0: java.nio.ServerSocketChannelImpl;

        $z0 = r0.<java.nio.ServerSocketChannelImpl: boolean isBound>;

        return $z0;
    }

    static boolean access$002(java.nio.ServerSocketChannelImpl, boolean)
    {
        java.nio.ServerSocketChannelImpl r0;
        boolean z0;

        r0 := @parameter0: java.nio.ServerSocketChannelImpl;

        z0 := @parameter1: boolean;

        r0.<java.nio.ServerSocketChannelImpl: boolean isBound> = z0;

        return z0;
    }

    private boolean shouldThrowSocketTimeoutExceptionFromAccept(java.net.SocketTimeoutException)
    {
        java.nio.ServerSocketChannelImpl r0;
        java.net.SocketTimeoutException r1;
        java.lang.Throwable r2;
        boolean $z0, $z1;
        libcore.io.ErrnoException $r3;
        int $i0, $i1;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        r1 := @parameter0: java.net.SocketTimeoutException;

        $z0 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: boolean isBlocking()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        r2 = virtualinvoke r1.<java.net.SocketTimeoutException: java.lang.Throwable getCause()>();

        $z1 = r2 instanceof libcore.io.ErrnoException;

        if $z1 == 0 goto label1;

        $r3 = (libcore.io.ErrnoException) r2;

        $i1 = $r3.<libcore.io.ErrnoException: int errno>;

        $i0 = <libcore.io.OsConstants: int EAGAIN>;

        if $i1 != $i0 goto label1;

        return 0;
    }

    public java.nio.channels.SocketChannel accept() throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.SocketChannelImpl r1, $r6;
        java.lang.Throwable r2, r4, $r16, $r17;
        java.lang.Object r3;
        java.net.SocketTimeoutException r5, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.nio.channels.spi.SelectorProvider $r7;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r8;
        java.net.Socket $r10, $r11, $r15;
        java.nio.channels.ClosedChannelException $r12;
        java.nio.channels.NotYetBoundException $r13;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $z0 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r12 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r12.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r12;

     label01:
        $z1 = r0.<java.nio.ServerSocketChannelImpl: boolean isBound>;

        if $z1 != 0 goto label02;

        $r13 = new java.nio.channels.NotYetBoundException;

        specialinvoke $r13.<java.nio.channels.NotYetBoundException: void <init>()>();

        throw $r13;

     label02:
        $r6 = new java.nio.SocketChannelImpl;

        $r7 = virtualinvoke r0.<java.nio.ServerSocketChannelImpl: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke $r6.<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,boolean)>($r7, 0);

        r1 = $r6;

     label03:
        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void begin()>();

        r3 = r0.<java.nio.ServerSocketChannelImpl: java.lang.Object acceptLock>;

        entermonitor r3;

     label04:
        $r8 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        virtualinvoke $r8.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket implAccept(java.nio.SocketChannelImpl)>(r1);

     label05:
        exitmonitor r3;

     label06:
        $r10 = virtualinvoke r1.<java.nio.SocketChannelImpl: java.net.Socket socket()>();

        $z2 = virtualinvoke $r10.<java.net.Socket: boolean isConnected()>();

        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void end(boolean)>($z2);

        $r11 = virtualinvoke r1.<java.nio.SocketChannelImpl: java.net.Socket socket()>();

        $z3 = virtualinvoke $r11.<java.net.Socket: boolean isConnected()>();

        if $z3 == 0 goto label13;

        return r1;

     label07:
        $r14 := @caughtexception;

        r5 = $r14;

     label08:
        $z4 = specialinvoke r0.<java.nio.ServerSocketChannelImpl: boolean shouldThrowSocketTimeoutExceptionFromAccept(java.net.SocketTimeoutException)>(r5);

        if $z4 == 0 goto label05;

        throw r5;

     label09:
        $r17 := @caughtexception;

        r4 = $r17;

     label10:
        exitmonitor r3;

     label11:
        throw r4;

     label12:
        $r16 := @caughtexception;

        r2 = $r16;

        $r15 = virtualinvoke r1.<java.nio.SocketChannelImpl: java.net.Socket socket()>();

        $z5 = virtualinvoke $r15.<java.net.Socket: boolean isConnected()>();

        virtualinvoke r0.<java.nio.ServerSocketChannelImpl: void end(boolean)>($z5);

        throw r2;

     label13:
        return null;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.net.SocketTimeoutException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
    }

    public java.io.FileDescriptor getFD()
    {
        java.nio.ServerSocketChannelImpl r0;
        java.net.SocketImpl $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.io.FileDescriptor getFD$()>();

        return $r2;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        java.lang.Throwable r1, $r4;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r2, $r3;
        boolean $z0;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        entermonitor r0;

     label1:
        $r2 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        $z0 = virtualinvoke $r2.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: boolean isClosed()>();

        if $z0 != 0 goto label2;

        $r3 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        virtualinvoke $r3.<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: void close()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        r1 = $r4;

        exitmonitor r0;

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        java.nio.ServerSocketChannelImpl r0;
        boolean z0;
        java.net.SocketImpl $r1;
        java.io.FileDescriptor $r2;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.net.SocketImpl impl>;

        $r2 = virtualinvoke $r1.<java.net.SocketImpl: java.io.FileDescriptor getFD$()>();

        staticinvoke <libcore.io.IoUtils: void setBlocking(java.io.FileDescriptor,boolean)>($r2, z0);

        return;
    }

    public java.net.ServerSocket socket()
    {
        java.nio.ServerSocketChannelImpl r0;
        java.nio.ServerSocketChannelImpl$ServerSocketAdapter $r1;

        r0 := @this: java.nio.ServerSocketChannelImpl;

        $r1 = r0.<java.nio.ServerSocketChannelImpl: java.nio.ServerSocketChannelImpl$ServerSocketAdapter socket>;

        return $r1;
    }
}
