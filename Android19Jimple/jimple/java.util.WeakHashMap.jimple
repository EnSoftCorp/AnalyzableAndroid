public class java.util.WeakHashMap extends java.util.AbstractMap implements java.util.Map
{
    private static final int DEFAULT_SIZE;
    int elementCount;
    java.util.WeakHashMap$Entry[] elementData;
    private final int loadFactor;
    volatile int modCount;
    private final java.lang.ref.ReferenceQueue referenceQueue;
    private int threshold;

    public void <init>()
    {
        java.util.WeakHashMap r0;

        r0 := @this: java.util.WeakHashMap;

        specialinvoke r0.<java.util.WeakHashMap: void <init>(int)>(16);

        return;
    }

    public void <init>(int)
    {
        java.util.WeakHashMap r0;
        int i0;
        java.util.WeakHashMap$Entry[] $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;

        r0 := @this: java.util.WeakHashMap;

        i0 := @parameter0: int;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if i0 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        r0.<java.util.WeakHashMap: int elementCount> = 0;

        if i0 != 0 goto label2;

        i0 = 1;

     label2:
        $r1 = staticinvoke <java.util.WeakHashMap: java.util.WeakHashMap$Entry[] newEntryArray(int)>(i0);

        r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData> = $r1;

        r0.<java.util.WeakHashMap: int loadFactor> = 7500;

        specialinvoke r0.<java.util.WeakHashMap: void computeMaxSize()>();

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<java.util.WeakHashMap: java.lang.ref.ReferenceQueue referenceQueue> = $r2;

        return;
    }

    public void <init>(int, float)
    {
        java.util.WeakHashMap r0;
        int i0, $i2;
        float f0, $f1;
        byte $b1;
        java.util.WeakHashMap$Entry[] $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.IllegalArgumentException $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r12;
        java.lang.String $r7, $r11;

        r0 := @this: java.util.WeakHashMap;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        if i0 >= 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("capacity < 0: ");

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label1:
        $b1 = f0 cmpg 0.0F;

        if $b1 > 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadFactor <= 0: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        r0.<java.util.WeakHashMap: int elementCount> = 0;

        if i0 != 0 goto label3;

        i0 = 1;

     label3:
        $r1 = staticinvoke <java.util.WeakHashMap: java.util.WeakHashMap$Entry[] newEntryArray(int)>(i0);

        r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData> = $r1;

        $f1 = 10000.0F * f0;

        $i2 = (int) $f1;

        r0.<java.util.WeakHashMap: int loadFactor> = $i2;

        specialinvoke r0.<java.util.WeakHashMap: void computeMaxSize()>();

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<java.util.WeakHashMap: java.lang.ref.ReferenceQueue referenceQueue> = $r2;

        return;
    }

    public void <init>(java.util.Map)
    {
        java.util.WeakHashMap r0;
        java.util.Map r1;
        int i0, $i1, $i2;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.util.Map;

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        if $i1 >= 6 goto label2;

        i0 = 11;

     label1:
        specialinvoke r0.<java.util.WeakHashMap: void <init>(int)>(i0);

        specialinvoke r0.<java.util.WeakHashMap: void putAllImpl(java.util.Map)>(r1);

        return;

     label2:
        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        i0 = 2 * $i2;

        goto label1;
    }

    private void computeMaxSize()
    {
        java.util.WeakHashMap r0;
        java.util.WeakHashMap$Entry[] $r1;
        int $i0, $i1, $i6;
        long $l2, $l3, $l4, $l5;

        r0 := @this: java.util.WeakHashMap;

        $r1 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i0 = lengthof $r1;

        $l3 = (long) $i0;

        $i1 = r0.<java.util.WeakHashMap: int loadFactor>;

        $l2 = (long) $i1;

        $l4 = $l3 * $l2;

        $l5 = $l4 / 10000L;

        $i6 = (int) $l5;

        r0.<java.util.WeakHashMap: int threshold> = $i6;

        return;
    }

    private static java.util.WeakHashMap$Entry[] newEntryArray(int)
    {
        int i0;
        java.util.WeakHashMap$Entry[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.util.WeakHashMap$Entry)[i0];

        return $r0;
    }

    private void putAllImpl(java.util.Map)
    {
        java.util.WeakHashMap r0;
        java.util.Map r1;
        java.util.Set $r2;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.util.Map;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        if $r2 == null goto label1;

        specialinvoke r0.<java.util.AbstractMap: void putAll(java.util.Map)>(r1);

     label1:
        return;
    }

    private void rehash()
    {
        java.util.WeakHashMap r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        java.util.WeakHashMap$Entry[] r1, $r4, $r5, $r6;
        java.util.WeakHashMap$Entry r2, r3, $r7;
        boolean $z0;

        r0 := @this: java.util.WeakHashMap;

        $r4 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i3 = lengthof $r4;

        i0 = 2 * $i3;

        if i0 != 0 goto label1;

        i0 = 1;

     label1:
        r1 = staticinvoke <java.util.WeakHashMap: java.util.WeakHashMap$Entry[] newEntryArray(int)>(i0);

        i1 = 0;

     label2:
        $r5 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i4 = lengthof $r5;

        if i1 >= $i4 goto label7;

        $r6 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r2 = $r6[i1];

     label3:
        if r2 == null goto label6;

        $z0 = r2.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z0 == 0 goto label5;

        i2 = 0;

     label4:
        r3 = r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        $r7 = r1[i2];

        r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next> = $r7;

        r1[i2] = r2;

        r2 = r3;

        goto label3;

     label5:
        $i5 = r2.<java.util.WeakHashMap$Entry: int hash>;

        $i6 = 2147483647 & $i5;

        i2 = $i6 % i0;

        goto label4;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData> = r1;

        specialinvoke r0.<java.util.WeakHashMap: void computeMaxSize()>();

        return;
    }

    public void clear()
    {
        java.util.WeakHashMap r0;
        int $i0, $i1, $i2;
        java.util.WeakHashMap$Entry[] $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;

        r0 := @this: java.util.WeakHashMap;

        $i0 = r0.<java.util.WeakHashMap: int elementCount>;

        if $i0 <= 0 goto label2;

        r0.<java.util.WeakHashMap: int elementCount> = 0;

        $r1 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $i1 = r0.<java.util.WeakHashMap: int modCount>;

        $i2 = 1 + $i1;

        r0.<java.util.WeakHashMap: int modCount> = $i2;

     label1:
        $r2 = r0.<java.util.WeakHashMap: java.lang.ref.ReferenceQueue referenceQueue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        if $r3 != null goto label1;

     label2:
        return;
    }

    public boolean containsKey(java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1;
        java.util.WeakHashMap$Entry $r2;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry getEntry(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1, $r6, $r7, $r10, $r11;
        int i0, i1;
        java.util.WeakHashMap$Entry r2, r3;
        java.util.WeakHashMap$Entry[] $r4, $r5, $r8, $r9;
        boolean $z0, $z1, $z2;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        if r1 == null goto label06;

        $r8 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        i1 = lengthof $r8;

     label01:
        i1 = i1 + -1;

        if i1 < 0 goto label11;

        $r9 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r9[i1];

     label02:
        if r3 == null goto label01;

        $r10 = virtualinvoke r3.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        if $r10 != null goto label03;

        $z2 = r3.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z2 == 0 goto label05;

     label03:
        $r11 = r3.<java.util.WeakHashMap$Entry: java.lang.Object value>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label05;

     label04:
        return 1;

     label05:
        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label02;

     label06:
        $r4 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        i0 = lengthof $r4;

     label07:
        i0 = i0 + -1;

        if i0 < 0 goto label11;

        $r5 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r2 = $r5[i0];

     label08:
        if r2 == null goto label07;

        $r6 = virtualinvoke r2.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        if $r6 != null goto label09;

        $z0 = r2.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z0 == 0 goto label10;

     label09:
        $r7 = r2.<java.util.WeakHashMap$Entry: java.lang.Object value>;

        if $r7 == null goto label04;

     label10:
        r2 = r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label08;

     label11:
        return 0;
    }

    public java.util.Set entrySet()
    {
        java.util.WeakHashMap r0;
        java.util.WeakHashMap$1 $r1;

        r0 := @this: java.util.WeakHashMap;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        $r1 = new java.util.WeakHashMap$1;

        specialinvoke $r1.<java.util.WeakHashMap$1: void <init>(java.util.WeakHashMap)>(r0);

        return $r1;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1, r3, $r6, $r9;
        java.util.WeakHashMap$Entry r2, r4;
        int i0, $i1, $i2, $i3;
        java.util.WeakHashMap$Entry[] $r5, $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        if r1 == null goto label4;

        $i1 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        $i3 = 2147483647 & $i1;

        $r7 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i2 = lengthof $r7;

        i0 = $i3 % $i2;

        $r8 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r4 = $r8[i0];

     label1:
        r3 = null;

        if r4 == null goto label2;

        $r9 = virtualinvoke r4.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label3;

        r3 = r4.<java.util.WeakHashMap$Entry: java.lang.Object value>;

     label2:
        return r3;

     label3:
        r4 = r4.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label1;

     label4:
        $r5 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r2 = $r5[0];

     label5:
        r3 = null;

        if r2 == null goto label2;

        $z0 = r2.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z0 == 0 goto label6;

        $r6 = r2.<java.util.WeakHashMap$Entry: java.lang.Object value>;

        return $r6;

     label6:
        r2 = r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label5;
    }

    java.util.WeakHashMap$Entry getEntry(java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1, $r6;
        java.util.WeakHashMap$Entry r2;
        int i0, $i1, $i2, $i3;
        java.util.WeakHashMap$Entry[] $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        if r1 == null goto label5;

        $i1 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        $i3 = 2147483647 & $i1;

        $r4 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i2 = lengthof $r4;

        i0 = $i3 % $i2;

        $r5 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r2 = $r5[i0];

     label1:
        if r2 == null goto label4;

        $r6 = virtualinvoke r2.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

     label2:
        return r2;

     label3:
        r2 = r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label1;

     label4:
        return null;

     label5:
        $r3 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r2 = $r3[0];

     label6:
        if r2 == null goto label7;

        $z0 = r2.<java.util.WeakHashMap$Entry: boolean isNull>;

        if $z0 != 0 goto label2;

        r2 = r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label6;

     label7:
        return null;
    }

    public boolean isEmpty()
    {
        java.util.WeakHashMap r0;
        int $i0;

        r0 := @this: java.util.WeakHashMap;

        $i0 = virtualinvoke r0.<java.util.WeakHashMap: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Set keySet()
    {
        java.util.WeakHashMap r0;
        java.util.Set $r1, $r2;
        java.util.WeakHashMap$2 $r3;

        r0 := @this: java.util.WeakHashMap;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        $r1 = r0.<java.util.WeakHashMap: java.util.Set keySet>;

        if $r1 != null goto label1;

        $r3 = new java.util.WeakHashMap$2;

        specialinvoke $r3.<java.util.WeakHashMap$2: void <init>(java.util.WeakHashMap)>(r0);

        r0.<java.util.WeakHashMap: java.util.Set keySet> = $r3;

     label1:
        $r2 = r0.<java.util.WeakHashMap: java.util.Set keySet>;

        return $r2;
    }

    void poll()
    {
        java.util.WeakHashMap r0;
        java.util.WeakHashMap$Entry r1;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.ref.Reference $r3;

        r0 := @this: java.util.WeakHashMap;

     label1:
        $r2 = r0.<java.util.WeakHashMap: java.lang.ref.ReferenceQueue referenceQueue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        r1 = (java.util.WeakHashMap$Entry) $r3;

        if r1 == null goto label2;

        virtualinvoke r0.<java.util.WeakHashMap: void removeEntry(java.util.WeakHashMap$Entry)>(r1);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1, r2, r4, $r15;
        java.util.WeakHashMap$Entry r3, r5, $r7, $r9;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0, $z1;
        java.util.WeakHashMap$Entry[] $r6, $r10, $r11, $r12, $r13, $r14;
        java.lang.ref.ReferenceQueue $r8;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        if r1 == null goto label2;

        $i9 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        $i11 = 2147483647 & $i9;

        $r13 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i10 = lengthof $r13;

        i0 = $i11 % $i10;

        $r14 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r14[i0];

     label1:
        if r3 == null goto label4;

        $r15 = virtualinvoke r3.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r15);

        if $z1 != 0 goto label4;

        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label1;

     label2:
        $r6 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r6[0];

     label3:
        i0 = 0;

        if r3 == null goto label4;

        z0 = r3.<java.util.WeakHashMap$Entry: boolean isNull>;

        i0 = 0;

        if z0 != 0 goto label4;

        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label3;

     label4:
        if r3 != null goto label7;

        $i2 = r0.<java.util.WeakHashMap: int modCount>;

        $i3 = 1 + $i2;

        r0.<java.util.WeakHashMap: int modCount> = $i3;

        $i4 = r0.<java.util.WeakHashMap: int elementCount>;

        i1 = 1 + $i4;

        r0.<java.util.WeakHashMap: int elementCount> = i1;

        $i5 = r0.<java.util.WeakHashMap: int threshold>;

        if i1 <= $i5 goto label5;

        specialinvoke r0.<java.util.WeakHashMap: void rehash()>();

        if r1 != null goto label6;

        i0 = 0;

     label5:
        $r7 = new java.util.WeakHashMap$Entry;

        $r8 = r0.<java.util.WeakHashMap: java.lang.ref.ReferenceQueue referenceQueue>;

        specialinvoke $r7.<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>(r1, r2, $r8);

        r5 = $r7;

        $r10 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $r9 = $r10[i0];

        r5.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next> = $r9;

        $r11 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $r11[i0] = r5;

        return null;

     label6:
        $i6 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        $i7 = 2147483647 & $i6;

        $r12 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i8 = lengthof $r12;

        i0 = $i7 % $i8;

        goto label5;

     label7:
        r4 = r3.<java.util.WeakHashMap$Entry: java.lang.Object value>;

        r3.<java.util.WeakHashMap$Entry: java.lang.Object value> = r2;

        return r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.WeakHashMap r0;
        java.util.Map r1;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.util.WeakHashMap: void putAllImpl(java.util.Map)>(r1);

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        java.util.WeakHashMap r0;
        java.lang.Object r1, $r6, $r10;
        java.util.WeakHashMap$Entry r2, r3, $r5, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0, $z1;
        java.util.WeakHashMap$Entry[] $r4, $r8, $r9, $r11;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        r2 = null;

        if r1 == null goto label2;

        $i5 = staticinvoke <java.util.Collections: int secondaryHash(java.lang.Object)>(r1);

        $i6 = 2147483647 & $i5;

        $r9 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i7 = lengthof $r9;

        i0 = $i6 % $i7;

        $r11 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r11[i0];

     label1:
        if r3 == null goto label4;

        $r10 = virtualinvoke r3.<java.util.WeakHashMap$Entry: java.lang.Object get()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label4;

        r2 = r3;

        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label1;

     label2:
        $r4 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r4[0];

     label3:
        i0 = 0;

        if r3 == null goto label4;

        z0 = r3.<java.util.WeakHashMap$Entry: boolean isNull>;

        i0 = 0;

        if z0 != 0 goto label4;

        r2 = r3;

        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label3;

     label4:
        if r3 == null goto label7;

        $i1 = r0.<java.util.WeakHashMap: int modCount>;

        $i2 = 1 + $i1;

        r0.<java.util.WeakHashMap: int modCount> = $i2;

        if r2 != null goto label6;

        $r8 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $r7 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        $r8[i0] = $r7;

     label5:
        $i3 = r0.<java.util.WeakHashMap: int elementCount>;

        $i4 = -1 + $i3;

        r0.<java.util.WeakHashMap: int elementCount> = $i4;

        $r6 = r3.<java.util.WeakHashMap$Entry: java.lang.Object value>;

        return $r6;

     label6:
        $r5 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next> = $r5;

        goto label5;

     label7:
        return null;
    }

    void removeEntry(java.util.WeakHashMap$Entry)
    {
        java.util.WeakHashMap r0;
        java.util.WeakHashMap$Entry r1, r2, r3, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.util.WeakHashMap$Entry[] $r4, $r5, $r8;

        r0 := @this: java.util.WeakHashMap;

        r1 := @parameter0: java.util.WeakHashMap$Entry;

        r2 = null;

        $i1 = r1.<java.util.WeakHashMap$Entry: int hash>;

        $i3 = 2147483647 & $i1;

        $r4 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $i2 = lengthof $r4;

        i0 = $i3 % $i2;

        $r5 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        r3 = $r5[i0];

     label1:
        if r3 == null goto label3;

        if r1 != r3 goto label5;

        $i4 = r0.<java.util.WeakHashMap: int modCount>;

        $i5 = 1 + $i4;

        r0.<java.util.WeakHashMap: int modCount> = $i5;

        if r2 != null goto label4;

        $r8 = r0.<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] elementData>;

        $r7 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        $r8[i0] = $r7;

     label2:
        $i6 = r0.<java.util.WeakHashMap: int elementCount>;

        $i7 = -1 + $i6;

        r0.<java.util.WeakHashMap: int elementCount> = $i7;

     label3:
        return;

     label4:
        $r6 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        r2.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next> = $r6;

        goto label2;

     label5:
        r2 = r3;

        r3 = r3.<java.util.WeakHashMap$Entry: java.util.WeakHashMap$Entry next>;

        goto label1;
    }

    public int size()
    {
        java.util.WeakHashMap r0;
        int $i0;

        r0 := @this: java.util.WeakHashMap;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        $i0 = r0.<java.util.WeakHashMap: int elementCount>;

        return $i0;
    }

    public java.util.Collection values()
    {
        java.util.WeakHashMap r0;
        java.util.Collection $r1, $r2;
        java.util.WeakHashMap$3 $r3;

        r0 := @this: java.util.WeakHashMap;

        virtualinvoke r0.<java.util.WeakHashMap: void poll()>();

        $r1 = r0.<java.util.WeakHashMap: java.util.Collection valuesCollection>;

        if $r1 != null goto label1;

        $r3 = new java.util.WeakHashMap$3;

        specialinvoke $r3.<java.util.WeakHashMap$3: void <init>(java.util.WeakHashMap)>(r0);

        r0.<java.util.WeakHashMap: java.util.Collection valuesCollection> = $r3;

     label1:
        $r2 = r0.<java.util.WeakHashMap: java.util.Collection valuesCollection>;

        return $r2;
    }

    public static void <clinit>()
    {
        <java.util.WeakHashMap: int DEFAULT_SIZE> = 16;

        return;
    }
}
