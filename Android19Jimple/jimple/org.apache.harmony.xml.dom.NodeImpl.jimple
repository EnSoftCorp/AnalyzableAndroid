public abstract class org.apache.harmony.xml.dom.NodeImpl extends java.lang.Object implements org.w3c.dom.Node
{
    private static final org.w3c.dom.NodeList EMPTY_LIST;
    static final org.w3c.dom.TypeInfo NULL_TYPE_INFO;
    org.apache.harmony.xml.dom.DocumentImpl document;

    static void <clinit>()
    {
        org.apache.harmony.xml.dom.NodeListImpl $r0;
        org.apache.harmony.xml.dom.NodeImpl$1 $r1;

        $r0 = new org.apache.harmony.xml.dom.NodeListImpl;

        specialinvoke $r0.<org.apache.harmony.xml.dom.NodeListImpl: void <init>()>();

        <org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList EMPTY_LIST> = $r0;

        $r1 = new org.apache.harmony.xml.dom.NodeImpl$1;

        specialinvoke $r1.<org.apache.harmony.xml.dom.NodeImpl$1: void <init>()>();

        <org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.TypeInfo NULL_TYPE_INFO> = $r1;

        return;
    }

    void <init>(org.apache.harmony.xml.dom.DocumentImpl)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.apache.harmony.xml.dom.DocumentImpl r1;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.apache.harmony.xml.dom.DocumentImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document> = r1;

        return;
    }

    private static java.util.List createEqualityKey(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r0, r2;
        java.util.ArrayList r1, $r4;
        org.apache.harmony.xml.dom.DocumentTypeImpl r3;
        short $s0, $s1;
        java.lang.Short $r5;
        java.lang.String $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.w3c.dom.NamedNodeMap $r14, $r15, $r16;
        org.w3c.dom.Element $r17;

        r0 := @parameter0: org.w3c.dom.Node;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r1 = $r4;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $r5 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r7);

        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r9);

        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r10);

        r2 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

     label1:
        if r2 == null goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2);

        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label1;

     label2:
        $s1 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        lookupswitch($s1)
        {
            case 1: goto label5;
            case 10: goto label4;
            default: goto label3;
        };

     label3:
        return r1;

     label4:
        r3 = (org.apache.harmony.xml.dom.DocumentTypeImpl) r0;

        $r11 = virtualinvoke r3.<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getPublicId()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r12 = virtualinvoke r3.<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getSystemId()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r12);

        $r13 = virtualinvoke r3.<org.apache.harmony.xml.dom.DocumentTypeImpl: java.lang.String getInternalSubset()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r15 = virtualinvoke r3.<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getEntities()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r15);

        $r14 = virtualinvoke r3.<org.apache.harmony.xml.dom.DocumentTypeImpl: org.w3c.dom.NamedNodeMap getNotations()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r14);

        return r1;

     label5:
        $r17 = (org.w3c.dom.Element) r0;

        $r16 = interfaceinvoke $r17.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r16);

        return r1;
    }

    private org.apache.harmony.xml.dom.NodeImpl getContainingElement()
    {
        org.apache.harmony.xml.dom.NodeImpl r0, $r2;
        org.w3c.dom.Node r1;
        short $s0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>();

     label1:
        if r1 == null goto label3;

        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r2 = (org.apache.harmony.xml.dom.NodeImpl) r1;

        return $r2;

     label2:
        r1 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        goto label1;

     label3:
        return null;
    }

    private org.apache.harmony.xml.dom.NodeImpl getNamespacingElement()
    {
        org.apache.harmony.xml.dom.NodeImpl r0, $r8, $r9, $r12;
        short $s0, $s1;
        org.w3c.dom.DOMException $r1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        org.w3c.dom.Document $r6;
        org.w3c.dom.Element $r7, $r11;
        org.w3c.dom.Attr $r10;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        $s0 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label6;
            case 5: goto label6;
            case 6: goto label4;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label3;
            case 10: goto label4;
            case 11: goto label4;
            case 12: goto label4;
            default: goto label1;
        };

     label1:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r5);

        throw $r1;

     label2:
        return r0;

     label3:
        $r6 = (org.w3c.dom.Document) r0;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        $r8 = (org.apache.harmony.xml.dom.NodeImpl) $r7;

        return $r8;

     label4:
        return null;

     label5:
        $r10 = (org.w3c.dom.Attr) r0;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.Attr: org.w3c.dom.Element getOwnerElement()>();

        $r12 = (org.apache.harmony.xml.dom.NodeImpl) $r11;

        return $r12;

     label6:
        $r9 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.NodeImpl getContainingElement()>();

        return $r9;
    }

    private java.lang.String getParentBaseUri()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1;
        java.lang.String $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getParentNode()>();

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getBaseURI()>();

        return $r2;

     label1:
        return null;
    }

    private boolean namedNodeMapsEqual(org.w3c.dom.NamedNodeMap, org.w3c.dom.NamedNodeMap)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.NamedNodeMap r1, r2;
        int i0, $i1, $i2, $i3;
        org.w3c.dom.Node r3, r4;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.NamedNodeMap;

        r2 := @parameter1: org.w3c.dom.NamedNodeMap;

        $i1 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i2 = interfaceinvoke r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i1 == $i2 goto label2;

     label1:
        return 0;

     label2:
        i0 = 0;

     label3:
        $i3 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i0 >= $i3 goto label6;

        r3 = interfaceinvoke r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        $r5 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        if $r5 != null goto label5;

        $r8 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        r4 = interfaceinvoke r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>($r8);

     label4:
        if r4 == null goto label1;

        $z0 = interfaceinvoke r3.<org.w3c.dom.Node: boolean isEqualNode(org.w3c.dom.Node)>(r4);

        if $z0 == 0 goto label1;

        i0 = i0 + 1;

        goto label3;

     label5:
        $r6 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r7 = interfaceinvoke r3.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r4 = interfaceinvoke r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>($r6, $r7);

        goto label4;

     label6:
        return 1;
    }

    private java.lang.String sanitizeUri(java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r3;
        int $i0;
        java.net.URI $r4;
        java.net.URISyntaxException $r5;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = new java.net.URI;

        specialinvoke $r4.<java.net.URI: void <init>(java.lang.String)>(r1);

        r3 = virtualinvoke $r4.<java.net.URI: java.lang.String toString()>();

     label3:
        return r3;

     label4:
        $r5 := @caughtexception;

        return null;

        catch java.net.URISyntaxException from label2 to label3 with label4;
    }

    static void setName(org.apache.harmony.xml.dom.NodeImpl, java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r4, r5, $r11;
        int i0, $i3;
        org.apache.harmony.xml.dom.ElementImpl r2;
        org.apache.harmony.xml.dom.AttrImpl r3;
        boolean $z0, $z1, $z2;
        short $s1, $s2;
        org.w3c.dom.DOMException $r6, $r10, $r12;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        if i0 == -1 goto label2;

        r4 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i3 = i0 + 1;

        r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i3);

        $z1 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifier(java.lang.String)>(r4);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifier(java.lang.String)>(r5);

        if $z2 != 0 goto label3;

     label1:
        $r12 = new org.w3c.dom.DOMException;

        specialinvoke $r12.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(5, r1);

        throw $r12;

     label2:
        $z0 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifier(java.lang.String)>(r1);

        if $z0 != 0 goto label3;

        $r10 = new org.w3c.dom.DOMException;

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(5, r1);

        throw $r10;

     label3:
        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s1)
        {
            case 1: goto label6;
            case 2: goto label5;
            default: goto label4;
        };

     label4:
        $r6 = new org.w3c.dom.DOMException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot rename nodes of type ");

        $s2 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r11);

        throw $r6;

     label5:
        r3 = (org.apache.harmony.xml.dom.AttrImpl) r0;

        r3.<org.apache.harmony.xml.dom.AttrImpl: boolean namespaceAware> = 0;

        r3.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String localName> = r1;

        return;

     label6:
        r2 = (org.apache.harmony.xml.dom.ElementImpl) r0;

        r2.<org.apache.harmony.xml.dom.ElementImpl: boolean namespaceAware> = 0;

        r2.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String localName> = r1;

        return;
    }

    static void setNameNS(org.apache.harmony.xml.dom.NodeImpl, java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r2, r3, $r10, $r11, $r12, $r14;
        int i0, $i3;
        org.apache.harmony.xml.dom.ElementImpl r4;
        org.apache.harmony.xml.dom.AttrImpl r5;
        boolean $z0, $z1, $z2;
        short $s1, $s2;
        org.w3c.dom.DOMException $r6, $r13, $r15, $r16;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @parameter0: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r2 != null goto label1;

        $r16 = new org.w3c.dom.DOMException;

        specialinvoke $r16.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(14, r2);

        throw $r16;

     label1:
        i0 = virtualinvoke r2.<java.lang.String: int lastIndexOf(java.lang.String)>(":");

        r3 = null;

        if i0 == -1 goto label2;

        $r14 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        r3 = staticinvoke <org.apache.harmony.xml.dom.NodeImpl: java.lang.String validatePrefix(java.lang.String,boolean,java.lang.String)>($r14, 1, r1);

        $i3 = i0 + 1;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3);

     label2:
        $z0 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifier(java.lang.String)>(r2);

        if $z0 != 0 goto label3;

        $r15 = new org.w3c.dom.DOMException;

        specialinvoke $r15.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(5, r2);

        throw $r15;

     label3:
        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s1)
        {
            case 1: goto label7;
            case 2: goto label5;
            default: goto label4;
        };

     label4:
        $r6 = new org.w3c.dom.DOMException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot rename nodes of type ");

        $s2 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r11);

        throw $r6;

     label5:
        $r10 = "xmlns";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label6;

        $r12 = "http://www.w3.org/2000/xmlns/";

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 != 0 goto label6;

        $r13 = new org.w3c.dom.DOMException;

        specialinvoke $r13.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(14, r2);

        throw $r13;

     label6:
        r5 = (org.apache.harmony.xml.dom.AttrImpl) r0;

        r5.<org.apache.harmony.xml.dom.AttrImpl: boolean namespaceAware> = 1;

        r5.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String namespaceURI> = r1;

        r5.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String prefix> = r3;

        r5.<org.apache.harmony.xml.dom.AttrImpl: java.lang.String localName> = r2;

        return;

     label7:
        r4 = (org.apache.harmony.xml.dom.ElementImpl) r0;

        r4.<org.apache.harmony.xml.dom.ElementImpl: boolean namespaceAware> = 1;

        r4.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String namespaceURI> = r1;

        r4.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String prefix> = r3;

        r4.<org.apache.harmony.xml.dom.ElementImpl: java.lang.String localName> = r2;

        return;
    }

    static java.lang.String validatePrefix(java.lang.String, boolean, java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r4, $r5, $r6;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        org.w3c.dom.DOMException $r2, $r7;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        if z0 != 0 goto label1;

        $r7 = new org.w3c.dom.DOMException;

        specialinvoke $r7.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(14, r0);

        throw $r7;

     label1:
        if r0 == null goto label4;

        if r1 == null goto label3;

        $z1 = staticinvoke <org.apache.harmony.xml.dom.DocumentImpl: boolean isXMLIdentifier(java.lang.String)>(r0);

        if $z1 == 0 goto label3;

        $r3 = "xml";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

        $r6 = "http://www.w3.org/XML/1998/namespace";

        $z5 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label3;

     label2:
        $r4 = "xmlns";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label4;

        $r5 = "http://www.w3.org/2000/xmlns/";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 != 0 goto label4;

     label3:
        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(14, r0);

        throw $r2;

     label4:
        return r0;
    }

    public org.w3c.dom.Node appendChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1;
        org.w3c.dom.DOMException $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r2;
    }

    public final org.w3c.dom.Node cloneNode(boolean)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        boolean z0;
        org.apache.harmony.xml.dom.DocumentImpl $r1;
        org.w3c.dom.Node $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xml.dom.DocumentImpl: org.w3c.dom.Node cloneOrImportNode(short,org.w3c.dom.Node,boolean)>(1, r0, z0);

        return $r2;
    }

    public short compareDocumentPosition(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1;
        java.lang.UnsupportedOperationException $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public final java.lang.String getBaseURI()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r3, r4, $r9, $r11, $r13, $r14;
        short $s0, $s1;
        org.w3c.dom.DOMException $r5;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.w3c.dom.Document $r10;
        org.w3c.dom.Element $r12;
        java.net.URI $r15, $r16, $r17;
        boolean $z0, $z1;
        java.net.URISyntaxException $r18;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        $s0 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label04;
            case 2: goto label15;
            case 3: goto label15;
            case 4: goto label15;
            case 5: goto label14;
            case 6: goto label13;
            case 7: goto label12;
            case 8: goto label15;
            case 9: goto label02;
            case 10: goto label15;
            case 11: goto label15;
            case 12: goto label13;
            default: goto label01;
        };

     label01:
        $r5 = new org.w3c.dom.DOMException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r9);

        throw $r5;

     label02:
        $r10 = (org.w3c.dom.Document) r0;

        $r11 = interfaceinvoke $r10.<org.w3c.dom.Document: java.lang.String getDocumentURI()>();

        r1 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String sanitizeUri(java.lang.String)>($r11);

     label03:
        return r1;

     label04:
        $r12 = (org.w3c.dom.Element) r0;

        r1 = interfaceinvoke $r12.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "base");

        if r1 == null goto label06;

     label05:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label07;

     label06:
        $r14 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getParentBaseUri()>();

        return $r14;

     label07:
        $r15 = new java.net.URI;

        specialinvoke $r15.<java.net.URI: void <init>(java.lang.String)>(r1);

        $z1 = virtualinvoke $r15.<java.net.URI: boolean isAbsolute()>();

        if $z1 != 0 goto label03;

        r3 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getParentBaseUri()>();

     label08:
        if r3 != null goto label09;

        return null;

     label09:
        $r17 = new java.net.URI;

        specialinvoke $r17.<java.net.URI: void <init>(java.lang.String)>(r3);

        $r16 = virtualinvoke $r17.<java.net.URI: java.net.URI resolve(java.lang.String)>(r1);

        r4 = virtualinvoke $r16.<java.net.URI: java.lang.String toString()>();

     label10:
        return r4;

     label11:
        $r18 := @caughtexception;

        return null;

     label12:
        $r13 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getParentBaseUri()>();

        return $r13;

     label13:
        return null;

     label14:
        return null;

     label15:
        return null;

        catch java.net.URISyntaxException from label05 to label06 with label11;
        catch java.net.URISyntaxException from label06 to label07 with label11;
        catch java.net.URISyntaxException from label07 to label08 with label11;
        catch java.net.URISyntaxException from label09 to label10 with label11;
    }

    public org.w3c.dom.NodeList getChildNodes()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.NodeList $r1;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        $r1 = <org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NodeList EMPTY_LIST>;

        return $r1;
    }

    public final java.lang.Object getFeature(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: boolean isSupported(java.lang.String,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public org.w3c.dom.Node getFirstChild()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public org.w3c.dom.Node getLastChild()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public java.lang.String getLocalName()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public org.w3c.dom.Node getNextSibling()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public java.lang.String getNodeName()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public abstract short getNodeType();

    public java.lang.String getNodeValue() throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public final org.w3c.dom.Document getOwnerDocument()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.apache.harmony.xml.dom.DocumentImpl $r1, $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        $r1 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        if $r1 != r0 goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        return $r2;
    }

    public org.w3c.dom.Node getParentNode()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public java.lang.String getPrefix()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public org.w3c.dom.Node getPreviousSibling()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return null;
    }

    public java.lang.String getTextContent() throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String $r1;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        $r1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>();

        return $r1;
    }

    void getTextContent(java.lang.StringBuilder) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.StringBuilder r1;
        java.lang.String r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNodeValue()>();

        if r2 == null goto label1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

     label1:
        return;
    }

    public final java.lang.Object getUserData(java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1;
        org.apache.harmony.xml.dom.NodeImpl$UserData r2;
        org.apache.harmony.xml.dom.DocumentImpl $r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r6;
        java.lang.NullPointerException $r7;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r7;

     label1:
        $r3 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMapForRead(org.apache.harmony.xml.dom.NodeImpl)>(r0);

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.harmony.xml.dom.NodeImpl$UserData) $r5;

        if r2 == null goto label2;

        $r6 = r2.<org.apache.harmony.xml.dom.NodeImpl$UserData: java.lang.Object value>;

        return $r6;

     label2:
        return null;
    }

    public boolean hasAttributes()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return 0;
    }

    public boolean hasChildNodes()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return 0;
    }

    public org.w3c.dom.Node insertBefore(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1, r2;
        org.w3c.dom.DOMException $r3;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = new org.w3c.dom.DOMException;

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r3;
    }

    public final boolean isDefaultNamespace(java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String lookupNamespaceURI(java.lang.String)>(null);

        if r1 != null goto label2;

        if r2 != null goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        return $z0;
    }

    public final boolean isEqualNode(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1, $r7, $r8;
        java.util.List r2, r3;
        int i0, $i1, $i2, $i3;
        java.lang.Object r4, r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.lang.AssertionError $r6;
        org.w3c.dom.NamedNodeMap $r9, $r10;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        if r1 != r0 goto label02;

     label01:
        return 1;

     label02:
        r2 = staticinvoke <org.apache.harmony.xml.dom.NodeImpl: java.util.List createEqualityKey(org.w3c.dom.Node)>(r0);

        r3 = staticinvoke <org.apache.harmony.xml.dom.NodeImpl: java.util.List createEqualityKey(org.w3c.dom.Node)>(r1);

        $i1 = interfaceinvoke r2.<java.util.List: int size()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 == $i2 goto label03;

        return 0;

     label03:
        i0 = 0;

     label04:
        $i3 = interfaceinvoke r2.<java.util.List: int size()>();

        if i0 >= $i3 goto label01;

        r4 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i0);

        if r4 != r5 goto label06;

     label05:
        i0 = i0 + 1;

        goto label04;

     label06:
        if r4 == null goto label07;

        if r5 != null goto label08;

     label07:
        return 0;

     label08:
        $z0 = r4 instanceof java.lang.String;

        if $z0 != 0 goto label09;

        $z3 = r4 instanceof java.lang.Short;

        if $z3 == 0 goto label10;

     label09:
        $z1 = virtualinvoke r4.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z1 != 0 goto label05;

        return 0;

     label10:
        $z2 = r4 instanceof org.w3c.dom.NamedNodeMap;

        if $z2 == 0 goto label12;

        $z7 = r5 instanceof org.w3c.dom.NamedNodeMap;

        if $z7 == 0 goto label11;

        $r10 = (org.w3c.dom.NamedNodeMap) r4;

        $r9 = (org.w3c.dom.NamedNodeMap) r5;

        $z8 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: boolean namedNodeMapsEqual(org.w3c.dom.NamedNodeMap,org.w3c.dom.NamedNodeMap)>($r10, $r9);

        if $z8 != 0 goto label05;

     label11:
        return 0;

     label12:
        $z4 = r4 instanceof org.w3c.dom.Node;

        if $z4 == 0 goto label14;

        $z5 = r5 instanceof org.w3c.dom.Node;

        if $z5 == 0 goto label13;

        $r8 = (org.w3c.dom.Node) r4;

        $r7 = (org.w3c.dom.Node) r5;

        $z6 = interfaceinvoke $r8.<org.w3c.dom.Node: boolean isEqualNode(org.w3c.dom.Node)>($r7);

        if $z6 != 0 goto label05;

     label13:
        return 0;

     label14:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;
    }

    boolean isPrefixMappedToUri(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        if r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String lookupNamespaceURI(java.lang.String)>(r1);

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public boolean isSameNode(org.w3c.dom.Node)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        if r0 != r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, r2;
        org.apache.harmony.xml.dom.DOMImplementationImpl $r3;
        boolean $z0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>();

        $z0 = virtualinvoke $r3.<org.apache.harmony.xml.dom.DOMImplementationImpl: boolean hasFeature(java.lang.String,java.lang.String)>(r1, r2);

        return $z0;
    }

    public final java.lang.String lookupNamespaceURI(java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0, r2;
        java.lang.String r1, r3, r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        org.w3c.dom.NamedNodeMap r4;
        int i0, i1, $i2;
        org.w3c.dom.Node r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.NodeImpl getNamespacingElement()>();

     label01:
        if r2 == null goto label13;

        r3 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>();

        $r7 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>();

        if $r7 == null goto label05;

        if r1 != null goto label04;

        if r3 != null goto label05;

     label02:
        r6 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>();

     label03:
        return r6;

     label04:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z5 != 0 goto label02;

     label05:
        $z0 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: boolean hasAttributes()>();

        if $z0 != 0 goto label07;

     label06:
        r2 = specialinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.NodeImpl getContainingElement()>();

        goto label01;

     label07:
        r4 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>();

        i0 = 0;

        i1 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

     label08:
        if i0 >= i1 goto label06;

        r5 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        $r8 = "http://www.w3.org/2000/xmlns/";

        $r9 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label10;

     label09:
        i0 = i0 + 1;

        goto label08;

     label10:
        if r1 != null goto label12;

        $r13 = "xmlns";

        $r14 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 == 0 goto label09;

     label11:
        r6 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $i2 = virtualinvoke r6.<java.lang.String: int length()>();

        if $i2 > 0 goto label03;

        return null;

     label12:
        $r11 = "xmlns";

        $r10 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label09;

        $r12 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label09;

        goto label11;

     label13:
        return null;
    }

    public final java.lang.String lookupPrefix(java.lang.String)
    {
        org.apache.harmony.xml.dom.NodeImpl r0, r2, r3;
        java.lang.String r1, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.w3c.dom.NamedNodeMap r4;
        int i0, i1;
        org.w3c.dom.Node r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

     label1:
        return null;

     label2:
        r2 = specialinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.NodeImpl getNamespacingElement()>();

        r3 = r2;

     label3:
        if r3 == null goto label1;

        $r6 = virtualinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r13 = virtualinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>();

        $z6 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: boolean isPrefixMappedToUri(java.lang.String,java.lang.String)>($r13, r1);

        if $z6 == 0 goto label4;

        $r15 = virtualinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: java.lang.String getPrefix()>();

        return $r15;

     label4:
        $z1 = virtualinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: boolean hasAttributes()>();

        if $z1 != 0 goto label6;

     label5:
        r3 = specialinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.NodeImpl getContainingElement()>();

        goto label3;

     label6:
        r4 = virtualinvoke r3.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.NamedNodeMap getAttributes()>();

        i0 = 0;

        i1 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

     label7:
        if i0 >= i1 goto label5;

        r5 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i0);

        $r8 = "http://www.w3.org/2000/xmlns/";

        $r7 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label8;

        $r9 = "xmlns";

        $r10 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z3 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label8;

        $r11 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 != 0 goto label9;

     label8:
        i0 = i0 + 1;

        goto label7;

     label9:
        $r12 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z5 = virtualinvoke r2.<org.apache.harmony.xml.dom.NodeImpl: boolean isPrefixMappedToUri(java.lang.String,java.lang.String)>($r12, r1);

        if $z5 == 0 goto label8;

        $r14 = interfaceinvoke r5.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        return $r14;
    }

    public void normalize()
    {
        org.apache.harmony.xml.dom.NodeImpl r0;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        return;
    }

    public org.w3c.dom.Node removeChild(org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1;
        org.w3c.dom.DOMException $r2;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = new org.w3c.dom.DOMException;

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r2;
    }

    public org.w3c.dom.Node replaceChild(org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        org.w3c.dom.Node r1, r2;
        org.w3c.dom.DOMException $r3;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.w3c.dom.Node;

        $r3 = new org.w3c.dom.DOMException;

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, null);

        throw $r3;
    }

    public final void setNodeValue(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, $r6;
        short $s0, $s1;
        org.w3c.dom.DOMException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        org.w3c.dom.ProcessingInstruction $r7;
        org.w3c.dom.CharacterData $r8;
        org.w3c.dom.Attr $r9;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        $s0 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label3;
            case 2: goto label5;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label4;
            case 8: goto label2;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label3;
            case 12: goto label3;
            default: goto label1;
        };

     label1:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r6);

        throw $r2;

     label2:
        $r8 = (org.w3c.dom.CharacterData) r0;

        interfaceinvoke $r8.<org.w3c.dom.CharacterData: void setData(java.lang.String)>(r1);

     label3:
        return;

     label4:
        $r7 = (org.w3c.dom.ProcessingInstruction) r0;

        interfaceinvoke $r7.<org.w3c.dom.ProcessingInstruction: void setData(java.lang.String)>(r1);

        return;

     label5:
        $r9 = (org.w3c.dom.Attr) r0;

        interfaceinvoke $r9.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r1);

        return;
    }

    public void setPrefix(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public final void setTextContent(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1, $r7;
        org.w3c.dom.Node r2;
        short $s0, $s1;
        org.w3c.dom.DOMException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        int $i2;
        org.apache.harmony.xml.dom.DocumentImpl $r8;
        org.apache.harmony.xml.dom.TextImpl $r9;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        $s0 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        tableswitch($s0)
        {
            case 1: goto label2;
            case 2: goto label5;
            case 3: goto label5;
            case 4: goto label5;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label5;
            case 8: goto label5;
            case 9: goto label4;
            case 10: goto label4;
            case 11: goto label2;
            case 12: goto label5;
            default: goto label1;
        };

     label1:
        $r3 = new org.w3c.dom.DOMException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported node type ");

        $s1 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: short getNodeType()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, $r7);

        throw $r3;

     label2:
        r2 = virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node getFirstChild()>();

        if r2 == null goto label3;

        virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r2);

        goto label2;

     label3:
        if r1 == null goto label4;

        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i2 == 0 goto label4;

        $r8 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        $r9 = virtualinvoke $r8.<org.apache.harmony.xml.dom.DocumentImpl: org.apache.harmony.xml.dom.TextImpl createTextNode(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r9);

     label4:
        return;

     label5:
        virtualinvoke r0.<org.apache.harmony.xml.dom.NodeImpl: void setNodeValue(java.lang.String)>(r1);

        return;
    }

    public final java.lang.Object setUserData(java.lang.String, java.lang.Object, org.w3c.dom.UserDataHandler)
    {
        org.apache.harmony.xml.dom.NodeImpl r0;
        java.lang.String r1;
        java.lang.Object r2, $r8, $r9, $r10;
        org.w3c.dom.UserDataHandler r3;
        java.util.Map r4;
        org.apache.harmony.xml.dom.NodeImpl$UserData r5, $r7;
        org.apache.harmony.xml.dom.DocumentImpl $r6;
        java.lang.NullPointerException $r11;

        r0 := @this: org.apache.harmony.xml.dom.NodeImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: org.w3c.dom.UserDataHandler;

        if r1 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null");

        throw $r11;

     label1:
        $r6 = r0.<org.apache.harmony.xml.dom.NodeImpl: org.apache.harmony.xml.dom.DocumentImpl document>;

        r4 = virtualinvoke $r6.<org.apache.harmony.xml.dom.DocumentImpl: java.util.Map getUserDataMap(org.apache.harmony.xml.dom.NodeImpl)>(r0);

        if r2 != null goto label3;

        $r10 = interfaceinvoke r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r5 = (org.apache.harmony.xml.dom.NodeImpl$UserData) $r10;

     label2:
        if r5 == null goto label4;

        $r9 = r5.<org.apache.harmony.xml.dom.NodeImpl$UserData: java.lang.Object value>;

        return $r9;

     label3:
        $r7 = new org.apache.harmony.xml.dom.NodeImpl$UserData;

        specialinvoke $r7.<org.apache.harmony.xml.dom.NodeImpl$UserData: void <init>(java.lang.Object,org.w3c.dom.UserDataHandler)>(r2, r3);

        $r8 = interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        r5 = (org.apache.harmony.xml.dom.NodeImpl$UserData) $r8;

        goto label2;

     label4:
        return null;
    }
}
