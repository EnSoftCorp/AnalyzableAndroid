public final class com.android.server.am.ProcessStatsService extends com.android.internal.app.IProcessStats$Stub
{
    static final boolean DEBUG;
    static final int MAX_HISTORIC_STATES;
    static final java.lang.String STATE_FILE_CHECKIN_SUFFIX;
    static final java.lang.String STATE_FILE_PREFIX;
    static final java.lang.String STATE_FILE_SUFFIX;
    static final java.lang.String TAG;
    static long WRITE_PERIOD;
    final com.android.server.am.ActivityManagerService mAm;
    final java.io.File mBaseDir;
    boolean mCommitPending;
    android.util.AtomicFile mFile;
    int mLastMemOnlyState;
    long mLastWriteTime;
    boolean mMemFactorLowered;
    android.os.Parcel mPendingWrite;
    boolean mPendingWriteCommitted;
    android.util.AtomicFile mPendingWriteFile;
    final java.lang.Object mPendingWriteLock;
    com.android.internal.app.ProcessStats mProcessStats;
    boolean mShuttingDown;
    final java.util.concurrent.locks.ReentrantLock mWriteLock;

    static void <clinit>()
    {
        <com.android.server.am.ProcessStatsService: java.lang.String TAG> = "ProcessStatsService";

        <com.android.server.am.ProcessStatsService: java.lang.String STATE_FILE_SUFFIX> = ".bin";

        <com.android.server.am.ProcessStatsService: java.lang.String STATE_FILE_PREFIX> = "state-";

        <com.android.server.am.ProcessStatsService: java.lang.String STATE_FILE_CHECKIN_SUFFIX> = ".ci";

        <com.android.server.am.ProcessStatsService: int MAX_HISTORIC_STATES> = 8;

        <com.android.server.am.ProcessStatsService: boolean DEBUG> = 0;

        <com.android.server.am.ProcessStatsService: long WRITE_PERIOD> = 1800000L;

        return;
    }

    public void <init>(com.android.server.am.ActivityManagerService, java.io.File)
    {
        com.android.server.am.ProcessStatsService r0;
        com.android.server.am.ActivityManagerService r1;
        java.io.File r2, $r5;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.lang.Object $r4;
        com.android.internal.app.ProcessStats $r6;
        com.android.server.am.ProcessStatsService$1 $r7;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: com.android.server.am.ActivityManagerService;

        r2 := @parameter1: java.io.File;

        specialinvoke r0.<com.android.internal.app.IProcessStats$Stub: void <init>()>();

        r0.<com.android.server.am.ProcessStatsService: int mLastMemOnlyState> = -1;

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.server.am.ProcessStatsService: java.lang.Object mPendingWriteLock> = $r4;

        r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm> = r1;

        r0.<com.android.server.am.ProcessStatsService: java.io.File mBaseDir> = r2;

        $r5 = r0.<com.android.server.am.ProcessStatsService: java.io.File mBaseDir>;

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

        $r6 = new com.android.internal.app.ProcessStats;

        specialinvoke $r6.<com.android.internal.app.ProcessStats: void <init>(boolean)>(1);

        r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats> = $r6;

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void updateFile()>();

        $r7 = new com.android.server.am.ProcessStatsService$1;

        specialinvoke $r7.<com.android.server.am.ProcessStatsService$1: void <init>(com.android.server.am.ProcessStatsService)>(r0);

        staticinvoke <android.os.SystemProperties: void addChangeCallback(java.lang.Runnable)>($r7);

        return;
    }

    private void dumpAggregatedStats(java.io.PrintWriter, long, long, java.lang.String, boolean, boolean, boolean, boolean, boolean)
    {
        com.android.server.am.ProcessStatsService r0;
        java.io.PrintWriter r1;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.String r2, $r7, $r8;
        boolean z0, z1, z2, z3, z4, z5;
        android.os.ParcelFileDescriptor r3;
        com.android.internal.app.ProcessStats r4, $r6;
        android.os.ParcelFileDescriptor$AutoCloseInputStream $r5;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.io.PrintWriter;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        r2 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        z2 := @parameter6: boolean;

        z3 := @parameter7: boolean;

        z4 := @parameter8: boolean;

        $l2 = 60L * l0;

        $l4 = 60L * $l2;

        $l5 = 1000L * $l4;

        $l3 = <com.android.internal.app.ProcessStats: long COMMIT_PERIOD>;

        $l6 = $l3 / 2L;

        $l7 = $l5 - $l6;

        r3 = virtualinvoke r0.<com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)>($l7);

        if r3 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Unable to build stats!");

        return;

     label1:
        $r6 = new com.android.internal.app.ProcessStats;

        specialinvoke $r6.<com.android.internal.app.ProcessStats: void <init>(boolean)>(0);

        r4 = $r6;

        $r5 = new android.os.ParcelFileDescriptor$AutoCloseInputStream;

        specialinvoke $r5.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>(r3);

        virtualinvoke r4.<com.android.internal.app.ProcessStats: void read(java.io.InputStream)>($r5);

        $r8 = r4.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        if $r8 == null goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Failure reading: ");

        $r7 = r4.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        return;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r4.<com.android.internal.app.ProcessStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String)>(r1, r2);

        return;

     label3:
        if z1 != 0 goto label4;

        if z2 == 0 goto label7;

     label4:
        if z2 != 0 goto label6;

        z5 = 1;

     label5:
        virtualinvoke r4.<com.android.internal.app.ProcessStats: void dumpLocked(java.io.PrintWriter,java.lang.String,long,boolean,boolean,boolean)>(r1, r2, l1, z5, z3, z4);

        return;

     label6:
        z5 = 0;

        goto label5;

     label7:
        virtualinvoke r4.<com.android.internal.app.ProcessStats: void dumpSummaryLocked(java.io.PrintWriter,java.lang.String,long,boolean)>(r1, r2, l1, z4);

        return;
    }

    private static void dumpHelp(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Process stats (procstats) dump options:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    [--checkin|-c|--csv] [--csv-screen] [--csv-proc] [--csv-mem]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    [--details] [--full-details] [--current] [--hours] [--active]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    [--commit] [--reset] [--clear] [--write] [-h] [<package.name>]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --checkin: perform a checkin: print and delete old committed states.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --c: print only state in checkin format.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --csv: output data suitable for putting in a spreadsheet.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --csv-screen: on, off.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --csv-mem: norm, mod, low, crit.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --csv-proc: pers, top, fore, vis, precept, backup,");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    service, home, prev, cached");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --details: dump per-package details, not just summary.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --full-details: dump all timing and active state details.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --current: only dump current state.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --hours: aggregate over about N last hours.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --active: only show currently active processes/services.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --commit: commit current stats to disk and reset to start new stats.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --reset: reset current stats, without committing.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --clear: clear all stats; does both --reset and deletes old stats.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --write: write current in-memory stats to disk.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  --read: replace current stats with last-written stats.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  -a: print everything.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  -h: print this help text.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  <package.name>: optional name of package to filter output by.");

        return;
    }

    private void dumpInner(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.am.ProcessStatsService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3, r33, r35, r37, $r69, $r101, $r107, $r118;
        long l0, $l19;
        int[] r4, r5, r6, $r40, $r42;
        boolean z0, z1, z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z36, $z37;
        java.lang.String r7, r16, r19, $r52, $r53, $r55, $r57, $r62, $r65, $r66, $r68, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r87, $r90, $r91, $r95, $r99, $r102, $r104, $r105, $r110, $r111, $r114, $r116, $r117, $r121, $r125, $r128, $r130, $r135, $r137, $r143;
        int i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, $i20, $i21, $i22, $i24, $i25, $i26;
        com.android.server.am.ActivityManagerService r8, r17, r20, r22, r25, r27, r30;
        com.android.internal.app.ProcessStats r9, r15, r32, $r48, $r49, $r54, $r56, $r89, $r94, $r96;
        java.lang.Throwable r10, r12, r13, r18, r21, r24, r26, r29, r31, $r126, $r127, $r134, $r140, $r141, $r142, $r144, $r145, $r147;
        java.util.ArrayList r11, r23;
        android.util.AtomicFile r14, $r43, $r47, $r86;
        boolean[] r34, r36, r38;
        java.util.concurrent.locks.ReentrantLock $r39, $r41, $r139;
        java.lang.Object $r44, $r63, $r67, $r98, $r146;
        java.io.File $r45, $r46, $r50, $r51, $r60, $r64, $r97;
        java.lang.StringBuilder $r58, $r59, $r61, $r88, $r92, $r93, $r100, $r103, $r106, $r108, $r109, $r112, $r113, $r115, $r119, $r120, $r122, $r123, $r124, $r129, $r131, $r132, $r136, $r138;
        char $c23;
        java.lang.NumberFormatException $r133;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r40 = newarray (int)[2];

        $r40[0] = 0;

        $r40[1] = 4;

        r4 = $r40;

        $r42 = newarray (int)[1];

        $r42[0] = 3;

        r5 = $r42;

        z0 = 1;

        r6 = <com.android.internal.app.ProcessStats: int[] ALL_PROC_STATES>;

        z1 = 0;

        z2 = 0;

        r7 = null;

        z3 = 0;

        z4 = 0;

        z5 = 0;

        z7 = 0;

        z6 = 0;

        i1 = 0;

        z8 = 0;

        z10 = 0;

        z9 = 0;

        if r3 == null goto label063;

        i10 = 0;

     label001:
        i9 = lengthof r3;

        if i10 >= i9 goto label063;

        r19 = r3[i10];

        $r74 = "--checkin";

        $z23 = virtualinvoke $r74.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z23 == 0 goto label003;

        z10 = 1;

     label002:
        i10 = i10 + 1;

        goto label001;

     label003:
        $r75 = "-c";

        $z24 = virtualinvoke $r75.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z24 == 0 goto label004;

        z3 = 1;

        goto label002;

     label004:
        $r76 = "--csv";

        $z25 = virtualinvoke $r76.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z25 == 0 goto label005;

        z9 = 1;

        goto label002;

     label005:
        $r77 = "--csv-screen";

        $z26 = virtualinvoke $r77.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z26 == 0 goto label009;

        i10 = i10 + 1;

        i17 = lengthof r3;

        if i10 < i17 goto label007;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Error: argument required for --csv-screen");

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

     label006:
        return;

     label007:
        r34 = newarray (boolean)[1];

        r35 = newarray (java.lang.String)[1];

        $r118 = <com.android.internal.app.ProcessStats: java.lang.String[] ADJ_SCREEN_NAMES_CSV>;

        $r117 = r3[i10];

        r4 = staticinvoke <com.android.server.am.ProcessStatsService: int[] parseStateList(java.lang.String[],int,java.lang.String,boolean[],java.lang.String[])>($r118, 4, $r117, r34, r35);

        if r4 != null goto label008;

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in \"");

        $r114 = r3[i10];

        $r115 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r114);

        $r138 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r137 = r35[0];

        $r136 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r137);

        $r135 = virtualinvoke $r136.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r135);

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label008:
        z1 = r34[0];

        goto label002;

     label009:
        $r70 = "--csv-mem";

        $z19 = virtualinvoke $r70.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z19 == 0 goto label012;

        i10 = i10 + 1;

        i18 = lengthof r3;

        if i10 < i18 goto label010;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Error: argument required for --csv-mem");

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label010:
        r38 = newarray (boolean)[1];

        r33 = newarray (java.lang.String)[1];

        $r101 = <com.android.internal.app.ProcessStats: java.lang.String[] ADJ_MEM_NAMES_CSV>;

        $r102 = r3[i10];

        r5 = staticinvoke <com.android.server.am.ProcessStatsService: int[] parseStateList(java.lang.String[],int,java.lang.String,boolean[],java.lang.String[])>($r101, 1, $r102, r38, r33);

        if r5 != null goto label011;

        $r123 = new java.lang.StringBuilder;

        specialinvoke $r123.<java.lang.StringBuilder: void <init>()>();

        $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in \"");

        $r125 = r3[i10];

        $r119 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r125);

        $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r121 = r33[0];

        $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r121);

        $r116 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r116);

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label011:
        z2 = r38[0];

        goto label002;

     label012:
        $r71 = "--csv-proc";

        $z20 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z20 == 0 goto label015;

        i10 = i10 + 1;

        i16 = lengthof r3;

        if i10 < i16 goto label013;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Error: argument required for --csv-proc");

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label013:
        r36 = newarray (boolean)[1];

        r37 = newarray (java.lang.String)[1];

        $r107 = <com.android.internal.app.ProcessStats: java.lang.String[] STATE_NAMES_CSV>;

        $r111 = r3[i10];

        r6 = staticinvoke <com.android.server.am.ProcessStatsService: int[] parseStateList(java.lang.String[],int,java.lang.String,boolean[],java.lang.String[])>($r107, 1, $r111, r36, r37);

        if r6 != null goto label014;

        $r109 = new java.lang.StringBuilder;

        specialinvoke $r109.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in \"");

        $r104 = r3[i10];

        $r103 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r104);

        $r106 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\": ");

        $r105 = r37[0];

        $r100 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r105);

        $r99 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r99);

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label014:
        z0 = r36[0];

        goto label002;

     label015:
        $r72 = "--details";

        $z21 = virtualinvoke $r72.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z21 == 0 goto label016;

        z4 = 1;

        goto label002;

     label016:
        $r73 = "--full-details";

        $z22 = virtualinvoke $r73.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z22 == 0 goto label017;

        z5 = 1;

        goto label002;

     label017:
        $r82 = "--hours";

        $z31 = virtualinvoke $r82.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z31 == 0 goto label021;

        i10 = i10 + 1;

        i14 = lengthof r3;

        if i10 < i14 goto label018;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Error: argument required for --hours");

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label018:
        $r110 = r3[i10];

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r110);

     label019:
        i1 = i15;

        goto label002;

     label020:
        $r133 := @caughtexception;

        $r132 = new java.lang.StringBuilder;

        specialinvoke $r132.<java.lang.StringBuilder: void <init>()>();

        $r131 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: --hours argument not an int -- ");

        $r130 = r3[i10];

        $r129 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r130);

        $r128 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r128);

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label021:
        $r83 = "--active";

        $z32 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z32 == 0 goto label022;

        z6 = 1;

        z8 = 1;

        goto label002;

     label022:
        $r84 = "--current";

        $z33 = virtualinvoke $r84.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z33 == 0 goto label023;

        z8 = 1;

        goto label002;

     label023:
        $r85 = "--commit";

        $z34 = virtualinvoke $r85.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z34 == 0 goto label029;

        r30 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r30;

     label024:
        r32 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i25 = r32.<com.android.internal.app.ProcessStats: int mFlags>;

        $i26 = 1 | $i25;

        r32.<com.android.internal.app.ProcessStats: int mFlags> = $i26;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateLocked(boolean,boolean)>(1, 1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Process stats committed.");

        exitmonitor r30;

     label025:
        return;

     label026:
        $r127 := @caughtexception;

        r31 = $r127;

     label027:
        exitmonitor r30;

     label028:
        throw r31;

     label029:
        $r78 = "--reset";

        $z27 = virtualinvoke $r78.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z27 == 0 goto label035;

        r27 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r27;

     label030:
        $r94 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r94.<com.android.internal.app.ProcessStats: void resetSafely()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Process stats reset.");

        exitmonitor r27;

     label031:
        return;

     label032:
        $r147 := @caughtexception;

        r29 = $r147;

     label033:
        exitmonitor r27;

     label034:
        throw r29;

     label035:
        $r79 = "--clear";

        $z28 = virtualinvoke $r79.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z28 == 0 goto label047;

        r25 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r25;

     label036:
        $r96 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r96.<com.android.internal.app.ProcessStats: void resetSafely()>();

        r23 = specialinvoke r0.<com.android.server.am.ProcessStatsService: java.util.ArrayList getCommittedFiles(int,boolean,boolean)>(0, 1, 1);

     label037:
        if r23 == null goto label042;

        i13 = 0;

     label038:
        i12 = virtualinvoke r23.<java.util.ArrayList: int size()>();

     label039:
        if i13 >= i12 goto label042;

     label040:
        $r97 = new java.io.File;

        $r98 = virtualinvoke r23.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r95 = (java.lang.String) $r98;

        specialinvoke $r97.<java.io.File: void <init>(java.lang.String)>($r95);

        virtualinvoke $r97.<java.io.File: boolean delete()>();

     label041:
        i13 = i13 + 1;

        goto label038;

     label042:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("All process stats cleared.");

        exitmonitor r25;

     label043:
        return;

     label044:
        $r134 := @caughtexception;

        r24 = $r134;

     label045:
        exitmonitor r25;

     label046:
        throw r24;

     label047:
        $r80 = "--write";

        $z29 = virtualinvoke $r80.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z29 == 0 goto label053;

        r20 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r20;

     label048:
        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateSyncLocked()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Process stats written.");

        exitmonitor r20;

     label049:
        return;

     label050:
        $r142 := @caughtexception;

        r26 = $r142;

     label051:
        exitmonitor r20;

     label052:
        throw r26;

     label053:
        $r81 = "--read";

        $z30 = virtualinvoke $r81.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z30 == 0 goto label059;

        r22 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r22;

     label054:
        $r89 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r86 = r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mFile>;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: boolean readLocked(com.android.internal.app.ProcessStats,android.util.AtomicFile)>($r89, $r86);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("Process stats read.");

        exitmonitor r22;

     label055:
        return;

     label056:
        $r144 := @caughtexception;

        r21 = $r144;

     label057:
        exitmonitor r22;

     label058:
        throw r21;

     label059:
        $r91 = "-h";

        $z37 = virtualinvoke $r91.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z37 == 0 goto label060;

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label060:
        $r90 = "-a";

        $z36 = virtualinvoke $r90.<java.lang.String: boolean equals(java.lang.Object)>(r19);

        if $z36 == 0 goto label061;

        z4 = 1;

        z7 = 1;

        goto label002;

     label061:
        $i24 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i24 <= 0 goto label062;

        $c23 = virtualinvoke r19.<java.lang.String: char charAt(int)>(0);

        if $c23 != 45 goto label062;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<java.lang.StringBuilder: void <init>()>();

        $r92 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        $r88 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r87 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r87);

        staticinvoke <com.android.server.am.ProcessStatsService: void dumpHelp(java.io.PrintWriter)>(r2);

        return;

     label062:
        r7 = r19;

        z4 = 1;

        goto label002;

     label063:
        if z9 == 0 goto label075;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Processes running summed over");

        if z1 != 0 goto label065;

        i6 = 0;

     label064:
        i11 = lengthof r4;

        if i6 >= i11 goto label065;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $i20 = r4[i6];

        staticinvoke <com.android.internal.app.ProcessStats: void printScreenLabelCsv(java.io.PrintWriter,int)>(r2, $i20);

        i6 = i6 + 1;

        goto label064;

     label065:
        if z2 != 0 goto label067;

        i8 = 0;

     label066:
        i5 = lengthof r5;

        if i8 >= i5 goto label067;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $i21 = r5[i8];

        staticinvoke <com.android.internal.app.ProcessStats: void printMemLabelCsv(java.io.PrintWriter,int)>(r2, $i21);

        i8 = i8 + 1;

        goto label066;

     label067:
        if z0 != 0 goto label069;

        i4 = 0;

     label068:
        i7 = lengthof r6;

        if i4 >= i7 goto label069;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        $r69 = <com.android.internal.app.ProcessStats: java.lang.String[] STATE_NAMES_CSV>;

        $i22 = r6[i4];

        $r68 = $r69[$i22];

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r68);

        i4 = i4 + 1;

        goto label068;

     label069:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        r17 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r17;

     label070:
        virtualinvoke r0.<com.android.server.am.ProcessStatsService: boolean dumpFilteredProcessesCsvLocked(java.io.PrintWriter,java.lang.String,boolean,int[],boolean,int[],boolean,int[],long,java.lang.String)>(r2, null, z1, r4, z2, r5, z0, r6, l0, r7);

        exitmonitor r17;

     label071:
        return;

     label072:
        $r126 := @caughtexception;

        r18 = $r126;

     label073:
        exitmonitor r17;

     label074:
        throw r18;

     label075:
        if i1 == 0 goto label076;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("AGGREGATED OVER LAST ");

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>(i1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(" HOURS:");

        $l19 = (long) i1;

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void dumpAggregatedStats(java.io.PrintWriter,long,long,java.lang.String,boolean,boolean,boolean,boolean,boolean)>(r2, $l19, l0, r7, z3, z4, z5, z7, z6);

        return;

     label076:
        if z7 != 0 goto label077;

        z11 = 0;

        if z10 == 0 goto label109;

     label077:
        $r41 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r41.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        if z10 != 0 goto label131;

        z13 = 1;

     label078:
        r11 = specialinvoke r0.<com.android.server.am.ProcessStatsService: java.util.ArrayList getCommittedFiles(int,boolean,boolean)>(0, 0, z13);

     label079:
        z11 = 0;

        if r11 == null goto label108;

        i3 = 0;

     label080:
        i2 = virtualinvoke r11.<java.util.ArrayList: int size()>();

     label081:
        if i3 >= i2 goto label108;

     label082:
        $r43 = new android.util.AtomicFile;

        $r45 = new java.io.File;

        $r44 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r53 = (java.lang.String) $r44;

        specialinvoke $r45.<java.io.File: void <init>(java.lang.String)>($r53);

        specialinvoke $r43.<android.util.AtomicFile: void <init>(java.io.File)>($r45);

        r14 = $r43;

        $r54 = new com.android.internal.app.ProcessStats;

        specialinvoke $r54.<com.android.internal.app.ProcessStats: void <init>(boolean)>(0);

        r15 = $r54;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: boolean readLocked(com.android.internal.app.ProcessStats,android.util.AtomicFile)>(r15, r14);

        $r52 = r15.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        if $r52 == null goto label087;

     label083:
        if z10 != 0 goto label084;

        if z3 == 0 goto label085;

     label084:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("err,");

     label085:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("Failure reading ");

        $r67 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r66 = (java.lang.String) $r67;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r66);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("; ");

        $r65 = r15.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r65);

        $r64 = new java.io.File;

        $r63 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r62 = (java.lang.String) $r63;

        specialinvoke $r64.<java.io.File: void <init>(java.lang.String)>($r62);

        virtualinvoke $r64.<java.io.File: boolean delete()>();

     label086:
        goto label130;

     label087:
        $r51 = virtualinvoke r14.<android.util.AtomicFile: java.io.File getBaseFile()>();

        r16 = virtualinvoke $r51.<java.io.File: java.lang.String getPath()>();

        z14 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>(".ci");

     label088:
        if z10 != 0 goto label089;

        if z3 == 0 goto label097;

     label089:
        virtualinvoke r15.<com.android.internal.app.ProcessStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String)>(r2, r7);

     label090:
        if z10 == 0 goto label130;

     label091:
        $r50 = virtualinvoke r14.<android.util.AtomicFile: java.io.File getBaseFile()>();

        $r60 = new java.io.File;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".ci");

        $r57 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r60.<java.io.File: void <init>(java.lang.String)>($r57);

        virtualinvoke $r50.<java.io.File: boolean renameTo(java.io.File)>($r60);

     label092:
        goto label130;

     label093:
        $r145 := @caughtexception;

        r13 = $r145;

     label094:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("**** FAILURE DUMPING STATE: ");

        $r146 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r143 = (java.lang.String) $r146;

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r143);

        virtualinvoke r13.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>(r2);

     label095:
        goto label130;

     label096:
        $r141 := @caughtexception;

        r12 = $r141;

        $r139 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r139.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r12;

     label097:
        if z11 == 0 goto label132;

     label098:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label099:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("COMMITTED STATS FROM ");

        $r55 = r15.<com.android.internal.app.ProcessStats: java.lang.String mTimePeriodStartClockStr>;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r55);

     label100:
        if z14 == 0 goto label102;

     label101:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" (checked in)");

     label102:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(":");

     label103:
        if z5 == 0 goto label106;

     label104:
        $r56 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r56.<com.android.internal.app.ProcessStats: void dumpLocked(java.io.PrintWriter,java.lang.String,long,boolean,boolean,boolean)>(r2, r7, l0, 0, 0, z6);

     label105:
        goto label090;

     label106:
        virtualinvoke r15.<com.android.internal.app.ProcessStats: void dumpSummaryLocked(java.io.PrintWriter,java.lang.String,long,boolean)>(r2, r7, l0, z6);

     label107:
        goto label090;

     label108:
        $r39 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r39.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label109:
        if z10 != 0 goto label006;

        if z8 != 0 goto label111;

        if z11 == 0 goto label110;

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label110:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("AGGREGATED OVER LAST 24 HOURS:");

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void dumpAggregatedStats(java.io.PrintWriter,long,long,java.lang.String,boolean,boolean,boolean,boolean,boolean)>(r2, 24L, l0, r7, z3, z4, z5, z7, z6);

        virtualinvoke r2.<java.io.PrintWriter: void println()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("AGGREGATED OVER LAST 3 HOURS:");

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void dumpAggregatedStats(java.io.PrintWriter,long,long,java.lang.String,boolean,boolean,boolean,boolean,boolean)>(r2, 3L, l0, r7, z3, z4, z5, z7, z6);

        z11 = 1;

     label111:
        r8 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r8;

        if z3 == 0 goto label118;

     label112:
        $r48 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r48.<com.android.internal.app.ProcessStats: void dumpCheckinLocked(java.io.PrintWriter,java.lang.String)>(r2, r7);

     label113:
        exitmonitor r8;

     label114:
        return;

     label115:
        $r140 := @caughtexception;

        r10 = $r140;

     label116:
        exitmonitor r8;

     label117:
        throw r10;

     label118:
        if z11 == 0 goto label120;

     label119:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label120:
        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("CURRENT STATS:");

     label121:
        if z4 != 0 goto label122;

        if z5 == 0 goto label128;

     label122:
        r9 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

     label123:
        if z5 != 0 goto label133;

        z12 = 1;

     label124:
        virtualinvoke r9.<com.android.internal.app.ProcessStats: void dumpLocked(java.io.PrintWriter,java.lang.String,long,boolean,boolean,boolean)>(r2, r7, l0, z12, z7, z6);

     label125:
        if z7 == 0 goto label113;

     label126:
        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("  mFile=");

        $r47 = r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mFile>;

        $r46 = virtualinvoke $r47.<android.util.AtomicFile: java.io.File getBaseFile()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.Object)>($r46);

     label127:
        goto label113;

     label128:
        $r49 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r49.<com.android.internal.app.ProcessStats: void dumpSummaryLocked(java.io.PrintWriter,java.lang.String,long,boolean)>(r2, r7, l0, z6);

     label129:
        goto label113;

     label130:
        i3 = i3 + 1;

        goto label080;

     label131:
        z13 = 0;

        goto label078;

     label132:
        z11 = 1;

        goto label099;

     label133:
        z12 = 0;

        goto label124;

        catch java.lang.NumberFormatException from label018 to label019 with label020;
        catch java.lang.Throwable from label024 to label025 with label026;
        catch java.lang.Throwable from label027 to label028 with label026;
        catch java.lang.Throwable from label030 to label031 with label032;
        catch java.lang.Throwable from label033 to label034 with label032;
        catch java.lang.Throwable from label036 to label037 with label044;
        catch java.lang.Throwable from label038 to label039 with label044;
        catch java.lang.Throwable from label040 to label041 with label044;
        catch java.lang.Throwable from label042 to label043 with label044;
        catch java.lang.Throwable from label045 to label046 with label044;
        catch java.lang.Throwable from label048 to label049 with label050;
        catch java.lang.Throwable from label051 to label052 with label050;
        catch java.lang.Throwable from label054 to label055 with label056;
        catch java.lang.Throwable from label057 to label058 with label056;
        catch java.lang.Throwable from label070 to label071 with label072;
        catch java.lang.Throwable from label073 to label074 with label072;
        catch java.lang.Throwable from label078 to label079 with label096;
        catch java.lang.Throwable from label080 to label081 with label096;
        catch java.lang.Throwable from label082 to label083 with label093;
        catch java.lang.Throwable from label082 to label083 with label096;
        catch java.lang.Throwable from label084 to label085 with label093;
        catch java.lang.Throwable from label084 to label085 with label096;
        catch java.lang.Throwable from label085 to label086 with label093;
        catch java.lang.Throwable from label085 to label086 with label096;
        catch java.lang.Throwable from label087 to label088 with label093;
        catch java.lang.Throwable from label087 to label088 with label096;
        catch java.lang.Throwable from label089 to label090 with label093;
        catch java.lang.Throwable from label089 to label090 with label096;
        catch java.lang.Throwable from label091 to label092 with label093;
        catch java.lang.Throwable from label091 to label092 with label096;
        catch java.lang.Throwable from label094 to label095 with label096;
        catch java.lang.Throwable from label098 to label099 with label093;
        catch java.lang.Throwable from label098 to label099 with label096;
        catch java.lang.Throwable from label099 to label100 with label093;
        catch java.lang.Throwable from label099 to label100 with label096;
        catch java.lang.Throwable from label101 to label102 with label093;
        catch java.lang.Throwable from label101 to label102 with label096;
        catch java.lang.Throwable from label102 to label103 with label093;
        catch java.lang.Throwable from label102 to label103 with label096;
        catch java.lang.Throwable from label104 to label105 with label093;
        catch java.lang.Throwable from label104 to label105 with label096;
        catch java.lang.Throwable from label106 to label107 with label093;
        catch java.lang.Throwable from label106 to label107 with label096;
        catch java.lang.Throwable from label112 to label113 with label115;
        catch java.lang.Throwable from label113 to label114 with label115;
        catch java.lang.Throwable from label116 to label117 with label115;
        catch java.lang.Throwable from label119 to label120 with label115;
        catch java.lang.Throwable from label120 to label121 with label115;
        catch java.lang.Throwable from label122 to label123 with label115;
        catch java.lang.Throwable from label124 to label125 with label115;
        catch java.lang.Throwable from label126 to label127 with label115;
        catch java.lang.Throwable from label128 to label129 with label115;
    }

    private java.util.ArrayList getCommittedFiles(int, boolean, boolean)
    {
        com.android.server.am.ProcessStatsService r0;
        int i0, i1, $i2, $i3, $i4;
        boolean z0, z1, $z2, $z4;
        java.io.File[] r1;
        java.util.ArrayList r2, $r6;
        java.lang.String r3, r4;
        java.io.File $r5, $r8, $r9;
        android.util.AtomicFile $r7;

        r0 := @this: com.android.server.am.ProcessStatsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r5 = r0.<com.android.server.am.ProcessStatsService: java.io.File mBaseDir>;

        r1 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>();

        if r1 == null goto label1;

        $i2 = lengthof r1;

        if $i2 > i0 goto label2;

     label1:
        return null;

     label2:
        $r6 = new java.util.ArrayList;

        $i3 = lengthof r1;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i3);

        r2 = $r6;

        $r7 = r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mFile>;

        $r8 = virtualinvoke $r7.<android.util.AtomicFile: java.io.File getBaseFile()>();

        r3 = virtualinvoke $r8.<java.io.File: java.lang.String getPath()>();

        i1 = 0;

     label3:
        $i4 = lengthof r1;

        if i1 >= $i4 goto label7;

        $r9 = r1[i1];

        r4 = virtualinvoke $r9.<java.io.File: java.lang.String getPath()>();

        if z1 != 0 goto label5;

        $z4 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(".ci");

        if $z4 == 0 goto label5;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        if z0 != 0 goto label6;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z2 != 0 goto label4;

     label6:
        virtualinvoke r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        goto label4;

     label7:
        staticinvoke <java.util.Collections: void sort(java.util.List)>(r2);

        return r2;
    }

    static int[] parseStateList(java.lang.String[], int, java.lang.String, boolean[], java.lang.String[])
    {
        java.lang.String[] r0, r3;
        int i0, i1, i2, i3, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.String r1, r6, $r13, $r16;
        boolean[] r2;
        int[] r4;
        java.util.ArrayList r5, $r7;
        char c4;
        boolean z0, $z2, $z3;
        java.lang.Integer $r8, $r15;
        java.lang.Object $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;

        r0 := @parameter0: java.lang.String[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: boolean[];

        r3 := @parameter4: java.lang.String[];

        r4 = null;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r5 = $r7;

        i1 = 0;

        i2 = 0;

     label01:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 > $i6 goto label15;

        $i12 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i12 goto label04;

        c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

     label02:
        if c4 == 44 goto label05;

        if c4 == 43 goto label05;

        if c4 == 32 goto label05;

        if c4 == 0 goto label05;

     label03:
        i2 = i2 + 1;

        goto label01;

     label04:
        c4 = 0;

        goto label02;

     label05:
        if c4 != 44 goto label11;

        z0 = 1;

     label06:
        if i1 != 0 goto label12;

        r2[0] = z0;

     label07:
        $i11 = i2 - 1;

        if i1 >= $i11 goto label14;

        r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i2);

        i5 = 0;

     label08:
        $i13 = lengthof r0;

        if i5 >= $i13 goto label09;

        $r16 = r0[i5];

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 == 0 goto label13;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        r6 = null;

     label09:
        if r6 == null goto label14;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid word \"");

        $r11 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r3[0] = $r13;

     label10:
        return r4;

     label11:
        z0 = 0;

        goto label06;

     label12:
        if c4 == 0 goto label07;

        $z3 = r2[0];

        if $z3 == z0 goto label07;

        r3[0] = "inconsistent separators (can\'t mix \',\' with \'+\')";

        return null;

     label13:
        i5 = i5 + 1;

        goto label08;

     label14:
        i1 = i2 + 1;

        goto label03;

     label15:
        $i8 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        r4 = newarray (int)[$i8];

        i3 = 0;

     label16:
        $i7 = virtualinvoke r5.<java.util.ArrayList: int size()>();

        if i3 >= $i7 goto label10;

        $r9 = virtualinvoke r5.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r8 = (java.lang.Integer) $r9;

        $i10 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $i9 = i0 * $i10;

        r4[i3] = $i9;

        i3 = i3 + 1;

        goto label16;
    }

    private void updateFile()
    {
        com.android.server.am.ProcessStatsService r0;
        android.util.AtomicFile $r1;
        java.io.File $r2, $r4;
        java.lang.StringBuilder $r3, $r5, $r8, $r9;
        com.android.internal.app.ProcessStats $r6;
        java.lang.String $r7, $r10;
        long $l0;

        r0 := @this: com.android.server.am.ProcessStatsService;

        $r1 = new android.util.AtomicFile;

        $r2 = new java.io.File;

        $r4 = r0.<com.android.server.am.ProcessStatsService: java.io.File mBaseDir>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("state-");

        $r6 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r7 = $r6.<com.android.internal.app.ProcessStats: java.lang.String mTimePeriodStartClockStr>;

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bin");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r10);

        specialinvoke $r1.<android.util.AtomicFile: void <init>(java.io.File)>($r2);

        r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mFile> = $r1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.am.ProcessStatsService: long mLastWriteTime> = $l0;

        return;
    }

    private void writeStateLocked(boolean)
    {
        com.android.server.am.ProcessStatsService r0;
        boolean z0, z1, $z2;

        r0 := @this: com.android.server.am.ProcessStatsService;

        z0 := @parameter0: boolean;

        $z2 = r0.<com.android.server.am.ProcessStatsService: boolean mShuttingDown>;

        if $z2 == 0 goto label1;

        return;

     label1:
        z1 = r0.<com.android.server.am.ProcessStatsService: boolean mCommitPending>;

        r0.<com.android.server.am.ProcessStatsService: boolean mCommitPending> = 0;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateLocked(boolean,boolean)>(z0, z1);

        return;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.am.ProcessStatsService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        long l0;
        java.lang.Throwable r4, $r14;
        com.android.server.am.ActivityManagerService $r5;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r13;
        java.lang.String $r12;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r5 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        $i1 = virtualinvoke $r5.<com.android.server.am.ActivityManagerService: int checkCallingPermission(java.lang.String)>("android.permission.DUMP");

        if $i1 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump procstats from from pid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android.permission.DUMP");

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        return;

     label1:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        specialinvoke r0.<com.android.server.am.ProcessStatsService: void dumpInner(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label4:
        $r14 := @caughtexception;

        r4 = $r14;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    boolean dumpFilteredProcessesCsvLocked(java.io.PrintWriter, java.lang.String, boolean, int[], boolean, int[], boolean, int[], long, java.lang.String)
    {
        com.android.server.am.ProcessStatsService r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r6;
        boolean z0, z1, z2;
        int[] r3, r4, r5;
        long l0;
        java.util.ArrayList r7;
        com.android.internal.app.ProcessStats $r8;
        int $i1;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: int[];

        z1 := @parameter4: boolean;

        r4 := @parameter5: int[];

        z2 := @parameter6: boolean;

        r5 := @parameter7: int[];

        l0 := @parameter8: long;

        r6 := @parameter9: java.lang.String;

        $r8 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        r7 = virtualinvoke $r8.<com.android.internal.app.ProcessStats: java.util.ArrayList collectProcessesLocked(int[],int[],int[],int[],long,java.lang.String,boolean)>(r3, r4, r5, r5, l0, r6, 0);

        $i1 = virtualinvoke r7.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label2;

        if r2 == null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>(r2);

     label1:
        staticinvoke <com.android.internal.app.ProcessStats: void dumpProcessListCsv(java.io.PrintWriter,java.util.ArrayList,boolean,int[],boolean,int[],boolean,int[],long)>(r1, r7, z0, r3, z1, r4, z2, r5, l0);

        return 1;

     label2:
        return 0;
    }

    public int getCurrentMemoryState()
    {
        com.android.server.am.ProcessStatsService r0;
        com.android.server.am.ActivityManagerService r1;
        java.lang.Throwable r2, $r3;
        int i0;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r1;

     label1:
        i0 = r0.<com.android.server.am.ProcessStatsService: int mLastMemOnlyState>;

        exitmonitor r1;

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        r2 = $r3;

     label4:
        exitmonitor r1;

     label5:
        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public byte[] getCurrentStats(java.util.List)
    {
        com.android.server.am.ProcessStatsService r0;
        java.util.List r1;
        android.os.Parcel r2;
        java.lang.Throwable r3, r5, $r20, $r21;
        com.android.server.am.ActivityManagerService r4, $r8;
        java.util.ArrayList r6;
        int i0, i1;
        java.io.IOException r7, $r23;
        android.content.Context $r9;
        java.util.concurrent.locks.ReentrantLock $r10, $r13, $r19;
        com.android.internal.app.ProcessStats $r11, $r12;
        long $l2;
        byte[] $r14;
        java.io.File $r15;
        java.lang.String $r16, $r26, $r28;
        java.lang.Object $r17, $r27;
        android.os.ParcelFileDescriptor $r18;
        java.lang.StringBuilder $r22, $r24, $r25;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.util.List;

        $r8 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        $r9 = $r8.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_USAGE_STATS", null);

        r2 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r10 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        r4 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r4;

     label02:
        $r11 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r11.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime> = $l2;

        $r12 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r12.<com.android.internal.app.ProcessStats: void writeToParcel(android.os.Parcel,int)>(r2, 0);

        exitmonitor r4;

     label03:
        if r1 == null goto label18;

     label04:
        r6 = specialinvoke r0.<com.android.server.am.ProcessStatsService: java.util.ArrayList getCommittedFiles(int,boolean,boolean)>(0, 0, 1);

     label05:
        if r6 == null goto label18;

     label06:
        i0 = virtualinvoke r6.<java.util.ArrayList: int size()>();

     label07:
        i1 = i0 - 1;

     label08:
        if i1 < 0 goto label18;

     label09:
        $r15 = new java.io.File;

        $r17 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r16 = (java.lang.String) $r17;

        specialinvoke $r15.<java.io.File: void <init>(java.lang.String)>($r16);

        $r18 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>($r15, 268435456);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r18);

     label10:
        i1 = i1 + -1;

        goto label08;

     label11:
        $r21 := @caughtexception;

        r5 = $r21;

     label12:
        exitmonitor r4;

     label13:
        throw r5;

     label14:
        $r20 := @caughtexception;

        r3 = $r20;

        $r19 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r19.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r3;

     label15:
        $r23 := @caughtexception;

        r7 = $r23;

     label16:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure opening procstat file ");

        $r27 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r28 = (java.lang.String) $r27;

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessStatsService", $r26, r7);

     label17:
        goto label10;

     label18:
        $r13 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r14 = virtualinvoke r2.<android.os.Parcel: byte[] marshall()>();

        return $r14;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.io.IOException from label09 to label10 with label15;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label16 to label17 with label14;
    }

    public int getMemFactorLocked()
    {
        com.android.server.am.ProcessStatsService r0;
        com.android.internal.app.ProcessStats $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.server.am.ProcessStatsService;

        $r1 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i0 = $r1.<com.android.internal.app.ProcessStats: int mMemFactor>;

        if $i0 == -1 goto label1;

        $r2 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i1 = $r2.<com.android.internal.app.ProcessStats: int mMemFactor>;

        return $i1;

     label1:
        return 0;
    }

    public com.android.internal.app.ProcessStats$ProcessState getProcessStateLocked(java.lang.String, int, java.lang.String)
    {
        com.android.server.am.ProcessStatsService r0;
        java.lang.String r1, r2;
        int i0;
        com.android.internal.app.ProcessStats $r3;
        com.android.internal.app.ProcessStats$ProcessState $r4;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $r3 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r4 = virtualinvoke $r3.<com.android.internal.app.ProcessStats: com.android.internal.app.ProcessStats$ProcessState getProcessStateLocked(java.lang.String,int,java.lang.String)>(r1, i0, r2);

        return $r4;
    }

    public com.android.internal.app.ProcessStats$ServiceState getServiceStateLocked(java.lang.String, int, java.lang.String, java.lang.String)
    {
        com.android.server.am.ProcessStatsService r0;
        java.lang.String r1, r2, r3;
        int i0;
        com.android.internal.app.ProcessStats $r4;
        com.android.internal.app.ProcessStats$ServiceState $r5;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r5 = virtualinvoke $r4.<com.android.internal.app.ProcessStats: com.android.internal.app.ProcessStats$ServiceState getServiceStateLocked(java.lang.String,int,java.lang.String,java.lang.String)>(r1, i0, r2, r3);

        return $r5;
    }

    public android.os.ParcelFileDescriptor getStatsOverTime(long)
    {
        com.android.server.am.ProcessStatsService r0;
        long l0, l1, $l3, $l4, $l5, $l9, $l10, $l11, $l15, $l16, $l17;
        java.lang.Throwable r1, r5, $r51, $r52;
        java.io.IOException r2, $r47;
        android.os.Parcel r3;
        com.android.server.am.ActivityManagerService r4, $r17;
        byte[] r6;
        android.os.ParcelFileDescriptor[] r7;
        com.android.server.am.ProcessStatsService$3 r8, $r23;
        android.os.ParcelFileDescriptor r9;
        java.util.ArrayList r10;
        int i2, $i7, $i8, $i13;
        com.android.internal.app.ProcessStats r11, r14, $r19, $r20, $r21, $r22, $r31;
        android.util.AtomicFile r12, $r32;
        java.io.File r13, $r29;
        java.lang.StringBuilder r15, $r33, $r34, $r36, $r40, $r41, $r43;
        android.content.Context $r16;
        java.util.concurrent.locks.ReentrantLock $r18, $r24, $r48, $r49;
        byte $b6, $b12;
        android.os.Parcelable$Creator $r25;
        java.lang.Object $r26, $r28, $r38;
        java.lang.String $r27, $r30, $r35, $r37, $r39, $r45, $r50;

        r0 := @this: com.android.server.am.ProcessStatsService;

        l0 := @parameter0: long;

        $r17 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        $r16 = $r17.<com.android.server.am.ActivityManagerService: android.content.Context mContext>;

        virtualinvoke $r16.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKAGE_USAGE_STATS", null);

        $r18 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r18.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label01:
        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r4 = r0.<com.android.server.am.ProcessStatsService: com.android.server.am.ActivityManagerService mAm>;

        entermonitor r4;

     label02:
        $r19 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r19.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime> = $l3;

        $r20 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r20.<com.android.internal.app.ProcessStats: void writeToParcel(android.os.Parcel,int)>(r3, 0);

        $r21 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l5 = $r21.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime>;

        $r22 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l4 = $r22.<com.android.internal.app.ProcessStats: long mTimePeriodStartRealtime>;

        l1 = $l5 - $l4;

        exitmonitor r4;

     label03:
        $b6 = l1 cmp l0;

        if $b6 >= 0 goto label22;

     label04:
        r10 = specialinvoke r0.<com.android.server.am.ProcessStatsService: java.util.ArrayList getCommittedFiles(int,boolean,boolean)>(0, 0, 1);

     label05:
        if r10 == null goto label22;

     label06:
        $i7 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        if $i7 <= 0 goto label22;

        virtualinvoke r3.<android.os.Parcel: void setDataPosition(int)>(0);

        $r25 = <com.android.internal.app.ProcessStats: android.os.Parcelable$Creator CREATOR>;

        $r26 = interfaceinvoke $r25.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r3);

        r11 = (com.android.internal.app.ProcessStats) $r26;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        $i8 = virtualinvoke r10.<java.util.ArrayList: int size()>();

        i2 = -1 + $i8;

     label07:
        if i2 < 0 goto label21;

     label08:
        $l10 = r11.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime>;

        $l11 = r11.<com.android.internal.app.ProcessStats: long mTimePeriodStartRealtime>;

        $l9 = $l10 - $l11;

        $b12 = $l9 cmp l0;

        if $b12 >= 0 goto label21;

        $r29 = new java.io.File;

        $r28 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r27 = (java.lang.String) $r28;

        specialinvoke $r29.<java.io.File: void <init>(java.lang.String)>($r27);

        r13 = $r29;

        $r32 = new android.util.AtomicFile;

        specialinvoke $r32.<android.util.AtomicFile: void <init>(java.io.File)>(r13);

        r12 = $r32;

     label09:
        i2 = i2 + -1;

     label10:
        $r31 = new com.android.internal.app.ProcessStats;

        specialinvoke $r31.<com.android.internal.app.ProcessStats: void <init>(boolean)>(0);

        r14 = $r31;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: boolean readLocked(com.android.internal.app.ProcessStats,android.util.AtomicFile)>(r14, r12);

        $r30 = r14.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        if $r30 != null goto label19;

        virtualinvoke r11.<com.android.internal.app.ProcessStats: void add(com.android.internal.app.ProcessStats)>(r14);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        r15 = $r43;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added stats: ");

        $r45 = r14.<com.android.internal.app.ProcessStats: java.lang.String mTimePeriodStartClockStr>;

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", over ");

        $l16 = r14.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime>;

        $l15 = r14.<com.android.internal.app.ProcessStats: long mTimePeriodStartRealtime>;

        $l17 = $l16 - $l15;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>($l17, r15);

        $r50 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ProcessStatsService", $r50);

     label11:
        goto label07;

     label12:
        $r47 := @caughtexception;

        r2 = $r47;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessStatsService", "Failed building output pipe", r2);

     label14:
        $r49 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r49.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return null;

     label15:
        $r52 := @caughtexception;

        r5 = $r52;

     label16:
        exitmonitor r4;

     label17:
        throw r5;

     label18:
        $r51 := @caughtexception;

        r1 = $r51;

        $r48 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r48.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r1;

     label19:
        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure reading ");

        $i13 = i2 + 1;

        $r38 = virtualinvoke r10.<java.util.ArrayList: java.lang.Object get(int)>($i13);

        $r39 = (java.lang.String) $r38;

        $r40 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        $r35 = r14.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        $r36 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ProcessStatsService", $r37);

     label20:
        goto label07;

     label21:
        r3 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r11.<com.android.internal.app.ProcessStats: void writeToParcel(android.os.Parcel,int)>(r3, 0);

     label22:
        r6 = virtualinvoke r3.<android.os.Parcel: byte[] marshall()>();

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        r7 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

        $r23 = new com.android.server.am.ProcessStatsService$3;

        specialinvoke $r23.<com.android.server.am.ProcessStatsService$3: void <init>(com.android.server.am.ProcessStatsService,java.lang.String,android.os.ParcelFileDescriptor[],byte[])>(r0, "ProcessStats pipe output", r7, r6);

        r8 = $r23;

        virtualinvoke r8.<java.lang.Thread: void start()>();

        r9 = r7[0];

     label23:
        $r24 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return r9;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.lang.Throwable from label06 to label07 with label18;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.io.IOException from label17 to label18 with label12;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.io.IOException from label19 to label20 with label12;
        catch java.lang.Throwable from label19 to label20 with label18;
        catch java.io.IOException from label21 to label22 with label12;
        catch java.lang.Throwable from label21 to label22 with label18;
        catch java.io.IOException from label22 to label23 with label12;
        catch java.lang.Throwable from label22 to label23 with label18;
    }

    public boolean isMemFactorLowered()
    {
        com.android.server.am.ProcessStatsService r0;
        boolean $z0;

        r0 := @this: com.android.server.am.ProcessStatsService;

        $z0 = r0.<com.android.server.am.ProcessStatsService: boolean mMemFactorLowered>;

        return $z0;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.am.ProcessStatsService r0;
        int i0, i1;
        android.os.Parcel r1, r2;
        java.lang.RuntimeException r3, $r4;
        boolean z0, $z1;

        r0 := @this: com.android.server.am.ProcessStatsService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Parcel;

        r2 := @parameter2: android.os.Parcel;

        i1 := @parameter3: int;

     label1:
        z0 = specialinvoke r0.<com.android.internal.app.IProcessStats$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>(i0, r1, r2, i1);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        r3 = $r4;

        $z1 = r3 instanceof java.lang.SecurityException;

        if $z1 != 0 goto label4;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessStatsService", "Process Stats Crash", r3);

     label4:
        throw r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    void performWriteState()
    {
        com.android.server.am.ProcessStatsService r0;
        java.lang.Object r1;
        java.lang.Throwable r2, r6, $r13, $r15;
        android.os.Parcel r3;
        android.util.AtomicFile r4;
        java.io.FileOutputStream r5;
        java.io.IOException r7, $r11;
        java.util.concurrent.locks.ReentrantLock $r8, $r10, $r12, $r14;
        byte[] $r9;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 = r0.<com.android.server.am.ProcessStatsService: java.lang.Object mPendingWriteLock>;

        entermonitor r1;

     label01:
        r3 = r0.<com.android.server.am.ProcessStatsService: android.os.Parcel mPendingWrite>;

        r4 = r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mPendingWriteFile>;

        r0.<com.android.server.am.ProcessStatsService: boolean mPendingWriteCommitted> = 0;

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        r0.<com.android.server.am.ProcessStatsService: android.os.Parcel mPendingWrite> = null;

        r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mPendingWriteFile> = null;

        $r8 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        exitmonitor r1;

     label06:
        r5 = null;

     label07:
        r5 = virtualinvoke r4.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

        $r9 = virtualinvoke r3.<android.os.Parcel: byte[] marshall()>();

        virtualinvoke r5.<java.io.FileOutputStream: void write(byte[])>($r9);

        virtualinvoke r5.<java.io.FileOutputStream: void flush()>();

        virtualinvoke r4.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r5);

     label08:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void trimHistoricStatesWriteLocked()>();

        $r10 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label09:
        $r13 := @caughtexception;

        r2 = $r13;

     label10:
        exitmonitor r1;

     label11:
        throw r2;

     label12:
        $r11 := @caughtexception;

        r7 = $r11;

     label13:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessStatsService", "Error writing process statistics", r7);

        virtualinvoke r4.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r5);

     label14:
        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void trimHistoricStatesWriteLocked()>();

        $r12 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r12.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label15:
        $r15 := @caughtexception;

        r6 = $r15;

        virtualinvoke r3.<android.os.Parcel: void recycle()>();

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void trimHistoricStatesWriteLocked()>();

        $r14 = r0.<com.android.server.am.ProcessStatsService: java.util.concurrent.locks.ReentrantLock mWriteLock>;

        virtualinvoke $r14.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw r6;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    boolean readLocked(com.android.internal.app.ProcessStats, android.util.AtomicFile)
    {
        com.android.server.am.ProcessStatsService r0;
        com.android.internal.app.ProcessStats r1;
        android.util.AtomicFile r2;
        java.lang.Throwable r3, $r11;
        java.io.FileInputStream r4;
        java.lang.String $r5, $r8, $r10, $r14;
        java.lang.StringBuilder $r6, $r7, $r9, $r12, $r13, $r15;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 := @parameter0: com.android.internal.app.ProcessStats;

        r2 := @parameter1: android.util.AtomicFile;

     label1:
        r4 = virtualinvoke r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

        virtualinvoke r1.<com.android.internal.app.ProcessStats: void read(java.io.InputStream)>(r4);

        virtualinvoke r4.<java.io.FileInputStream: void close()>();

        $r5 = r1.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        if $r5 == null goto label4;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring existing stats; ");

        $r8 = r1.<com.android.internal.app.ProcessStats: java.lang.String mReadError>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ProcessStatsService", $r10);

     label2:
        return 0;

     label3:
        $r11 := @caughtexception;

        r3 = $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("caught exception: ");

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r14 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r1.<com.android.internal.app.ProcessStats: java.lang.String mReadError> = $r14;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ProcessStatsService", "Error reading process statistics", r3);

        return 0;

     label4:
        return 1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean setMemFactorLocked(int, boolean, long)
    {
        com.android.server.am.ProcessStatsService r0;
        int i0, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        boolean z0, z1, $z2;
        long l1, $l15, $l16, $l17, $l18;
        android.util.ArrayMap r1, r3;
        android.util.SparseArray r2;
        com.android.internal.app.ProcessStats$ServiceState r4;
        long[] r5;
        com.android.internal.app.ProcessStats $r6, $r7, $r8, $r9, $r11, $r16, $r17, $r18;
        com.android.internal.app.ProcessMap $r10;
        java.lang.Object $r12, $r14, $r15;
        com.android.internal.app.ProcessStats$PackageState $r13;

        r0 := @this: com.android.server.am.ProcessStatsService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 := @parameter2: long;

        i2 = r0.<com.android.server.am.ProcessStatsService: int mLastMemOnlyState>;

        if i0 >= i2 goto label10;

        z1 = 1;

     label01:
        r0.<com.android.server.am.ProcessStatsService: boolean mMemFactorLowered> = z1;

        r0.<com.android.server.am.ProcessStatsService: int mLastMemOnlyState> = i0;

        if z0 == 0 goto label02;

        i0 = i0 + 4;

     label02:
        $r6 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        i3 = $r6.<com.android.internal.app.ProcessStats: int mMemFactor>;

        if i0 == i3 goto label14;

        $r7 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i8 = $r7.<com.android.internal.app.ProcessStats: int mMemFactor>;

        if $i8 == -1 goto label03;

        $r17 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        r5 = $r17.<com.android.internal.app.ProcessStats: long[] mMemFactorDurations>;

        $r18 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        i7 = $r18.<com.android.internal.app.ProcessStats: int mMemFactor>;

        $l18 = r5[i7];

        $r16 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l15 = $r16.<com.android.internal.app.ProcessStats: long mStartTime>;

        $l17 = l1 - $l15;

        $l16 = $l18 + $l17;

        r5[i7] = $l16;

     label03:
        $r9 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r9.<com.android.internal.app.ProcessStats: int mMemFactor> = i0;

        $r8 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r8.<com.android.internal.app.ProcessStats: long mStartTime> = l1;

        $r11 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r10 = $r11.<com.android.internal.app.ProcessStats: com.android.internal.app.ProcessMap mPackages>;

        r1 = virtualinvoke $r10.<com.android.internal.app.ProcessMap: android.util.ArrayMap getMap()>();

        i4 = 0;

     label04:
        $i9 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        if i4 >= $i9 goto label13;

        $r12 = virtualinvoke r1.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        r2 = (android.util.SparseArray) $r12;

        i5 = 0;

     label05:
        $i10 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        if i5 >= $i10 goto label12;

        $r14 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i5);

        $r13 = (com.android.internal.app.ProcessStats$PackageState) $r14;

        r3 = $r13.<com.android.internal.app.ProcessStats$PackageState: android.util.ArrayMap mServices>;

        i6 = 0;

     label06:
        $i11 = virtualinvoke r3.<android.util.ArrayMap: int size()>();

        if i6 >= $i11 goto label11;

        $r15 = virtualinvoke r3.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        r4 = (com.android.internal.app.ProcessStats$ServiceState) $r15;

        $z2 = virtualinvoke r4.<com.android.internal.app.ProcessStats$ServiceState: boolean isInUse()>();

        if $z2 == 0 goto label09;

        $i14 = r4.<com.android.internal.app.ProcessStats$ServiceState: int mStartedState>;

        if $i14 == -1 goto label07;

        virtualinvoke r4.<com.android.internal.app.ProcessStats$ServiceState: void setStarted(boolean,int,long)>(1, i0, l1);

     label07:
        $i12 = r4.<com.android.internal.app.ProcessStats$ServiceState: int mBoundState>;

        if $i12 == -1 goto label08;

        virtualinvoke r4.<com.android.internal.app.ProcessStats$ServiceState: void setBound(boolean,int,long)>(1, i0, l1);

     label08:
        $i13 = r4.<com.android.internal.app.ProcessStats$ServiceState: int mExecState>;

        if $i13 == -1 goto label09;

        virtualinvoke r4.<com.android.internal.app.ProcessStats$ServiceState: void setExecuting(boolean,int,long)>(1, i0, l1);

     label09:
        i6 = i6 + 1;

        goto label06;

     label10:
        z1 = 0;

        goto label01;

     label11:
        i5 = i5 + 1;

        goto label05;

     label12:
        i4 = i4 + 1;

        goto label04;

     label13:
        return 1;

     label14:
        return 0;
    }

    public boolean shouldWriteNowLocked(long)
    {
        com.android.server.am.ProcessStatsService r0;
        long l0, $l1, $l2, $l3, $l5, $l6, $l7, $l8;
        byte $b4, $b9;
        com.android.internal.app.ProcessStats $r1;

        r0 := @this: com.android.server.am.ProcessStatsService;

        l0 := @parameter0: long;

        $l2 = r0.<com.android.server.am.ProcessStatsService: long mLastWriteTime>;

        $l1 = <com.android.server.am.ProcessStatsService: long WRITE_PERIOD>;

        $l3 = $l2 + $l1;

        $b4 = l0 cmp $l3;

        if $b4 <= 0 goto label2;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r1 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l7 = $r1.<com.android.internal.app.ProcessStats: long mTimePeriodStartRealtime>;

        $l6 = <com.android.internal.app.ProcessStats: long COMMIT_PERIOD>;

        $l8 = $l7 + $l6;

        $b9 = $l5 cmp $l8;

        if $b9 <= 0 goto label1;

        r0.<com.android.server.am.ProcessStatsService: boolean mCommitPending> = 1;

     label1:
        return 1;

     label2:
        return 0;
    }

    public void shutdownLocked()
    {
        com.android.server.am.ProcessStatsService r0;
        com.android.internal.app.ProcessStats r1;
        int $i1, $i2;

        r0 := @this: com.android.server.am.ProcessStatsService;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ProcessStatsService", "Writing process stats before shutdown...");

        r1 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i1 = r1.<com.android.internal.app.ProcessStats: int mFlags>;

        $i2 = 2 | $i1;

        r1.<com.android.internal.app.ProcessStats: int mFlags> = $i2;

        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateSyncLocked()>();

        r0.<com.android.server.am.ProcessStatsService: boolean mShuttingDown> = 1;

        return;
    }

    public void trimHistoricStatesWriteLocked()
    {
        com.android.server.am.ProcessStatsService r0;
        java.util.ArrayList r1;
        java.lang.String r2, $r7;
        int $i0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.io.File $r8;

        r0 := @this: com.android.server.am.ProcessStatsService;

        r1 = specialinvoke r0.<com.android.server.am.ProcessStatsService: java.util.ArrayList getCommittedFiles(int,boolean,boolean)>(8, 0, 1);

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if $i0 <= 8 goto label1;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>(0);

        r2 = (java.lang.String) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pruning old procstats: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ProcessStatsService", $r7);

        $r8 = new java.io.File;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>(r2);

        virtualinvoke $r8.<java.io.File: boolean delete()>();

        goto label2;
    }

    public void writeStateAsyncLocked()
    {
        com.android.server.am.ProcessStatsService r0;

        r0 := @this: com.android.server.am.ProcessStatsService;

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateLocked(boolean)>(0);

        return;
    }

    public void writeStateLocked(boolean, boolean)
    {
        com.android.server.am.ProcessStatsService r0;
        boolean z0, z1, $z3;
        java.lang.Object r1;
        java.lang.Throwable r2, $r20;
        long l0, $l1, $l2, $l3, $l4;
        com.android.internal.app.ProcessStats r3, $r6, $r8, $r19;
        android.os.Parcel $r4, $r5, $r7;
        android.util.AtomicFile $r9, $r10;
        java.io.File $r11;
        java.lang.StringBuilder $r12, $r13, $r14, $r16;
        java.lang.String $r15;
        com.android.server.am.ProcessStatsService$2 $r17;
        android.os.Handler $r18;
        int $i6, $i7;

        r0 := @this: com.android.server.am.ProcessStatsService;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        r1 = r0.<com.android.server.am.ProcessStatsService: java.lang.Object mPendingWriteLock>;

        entermonitor r1;

     label01:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = r0.<com.android.server.am.ProcessStatsService: android.os.Parcel mPendingWrite>;

        if $r4 == null goto label02;

        $z3 = r0.<com.android.server.am.ProcessStatsService: boolean mPendingWriteCommitted>;

        if $z3 != 0 goto label06;

     label02:
        $r5 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        r0.<com.android.server.am.ProcessStatsService: android.os.Parcel mPendingWrite> = $r5;

        $r6 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6.<com.android.internal.app.ProcessStats: long mTimePeriodEndRealtime> = $l1;

     label03:
        if z1 == 0 goto label05;

     label04:
        r3 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $i6 = r3.<com.android.internal.app.ProcessStats: int mFlags>;

        $i7 = 1 | $i6;

        r3.<com.android.internal.app.ProcessStats: int mFlags> = $i7;

     label05:
        $r8 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        $r7 = r0.<com.android.server.am.ProcessStatsService: android.os.Parcel mPendingWrite>;

        virtualinvoke $r8.<com.android.internal.app.ProcessStats: void writeToParcel(android.os.Parcel,int)>($r7, 0);

        $r10 = new android.util.AtomicFile;

        $r9 = r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mFile>;

        $r11 = virtualinvoke $r9.<android.util.AtomicFile: java.io.File getBaseFile()>();

        specialinvoke $r10.<android.util.AtomicFile: void <init>(java.io.File)>($r11);

        r0.<com.android.server.am.ProcessStatsService: android.util.AtomicFile mPendingWriteFile> = $r10;

        r0.<com.android.server.am.ProcessStatsService: boolean mPendingWriteCommitted> = z1;

     label06:
        if z1 == 0 goto label08;

     label07:
        $r19 = r0.<com.android.server.am.ProcessStatsService: com.android.internal.app.ProcessStats mProcessStats>;

        virtualinvoke $r19.<com.android.internal.app.ProcessStats: void resetSafely()>();

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void updateFile()>();

     label08:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.server.am.ProcessStatsService: long mLastWriteTime> = $l2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prepared write state in ");

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = $l3 - l0;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("ProcessStatsService", $r15);

     label09:
        if z0 != 0 goto label12;

     label10:
        $r18 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r17 = new com.android.server.am.ProcessStatsService$2;

        specialinvoke $r17.<com.android.server.am.ProcessStatsService$2: void <init>(com.android.server.am.ProcessStatsService)>(r0);

        virtualinvoke $r18.<android.os.Handler: boolean post(java.lang.Runnable)>($r17);

        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        virtualinvoke r0.<com.android.server.am.ProcessStatsService: void performWriteState()>();

        return;

     label14:
        $r20 := @caughtexception;

        r2 = $r20;

     label15:
        exitmonitor r1;

     label16:
        throw r2;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void writeStateSyncLocked()
    {
        com.android.server.am.ProcessStatsService r0;

        r0 := @this: com.android.server.am.ProcessStatsService;

        specialinvoke r0.<com.android.server.am.ProcessStatsService: void writeStateLocked(boolean)>(1);

        return;
    }
}
