public class org.apache.http.entity.ByteArrayEntity extends org.apache.http.entity.AbstractHttpEntity implements java.lang.Cloneable
{
    protected final byte[] content;

    public void <init>(byte[])
    {
        org.apache.http.entity.ByteArrayEntity r0;
        byte[] r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        r1 := @parameter0: byte[];

        specialinvoke r0.<org.apache.http.entity.AbstractHttpEntity: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Source byte array may not be null");

        throw $r2;

     label1:
        r0.<org.apache.http.entity.ByteArrayEntity: byte[] content> = r1;

        return;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.http.entity.ByteArrayEntity r0;
        java.lang.Object $r1;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    public java.io.InputStream getContent()
    {
        org.apache.http.entity.ByteArrayEntity r0;
        java.io.ByteArrayInputStream $r1;
        byte[] $r2;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        $r1 = new java.io.ByteArrayInputStream;

        $r2 = r0.<org.apache.http.entity.ByteArrayEntity: byte[] content>;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r2);

        return $r1;
    }

    public long getContentLength()
    {
        org.apache.http.entity.ByteArrayEntity r0;
        byte[] $r1;
        int $i0;
        long $l1;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        $r1 = r0.<org.apache.http.entity.ByteArrayEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public boolean isRepeatable()
    {
        org.apache.http.entity.ByteArrayEntity r0;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        return 1;
    }

    public boolean isStreaming()
    {
        org.apache.http.entity.ByteArrayEntity r0;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        return 0;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        org.apache.http.entity.ByteArrayEntity r0;
        java.io.OutputStream r1;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.entity.ByteArrayEntity;

        r1 := @parameter0: java.io.OutputStream;

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.http.entity.ByteArrayEntity: byte[] content>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r2);

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

        return;
    }
}
