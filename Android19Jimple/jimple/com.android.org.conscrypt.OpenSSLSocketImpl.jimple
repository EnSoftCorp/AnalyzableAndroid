public class com.android.org.conscrypt.OpenSSLSocketImpl extends javax.net.ssl.SSLSocket implements com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks
{
    private byte[] alpnProtocols;
    private boolean autoClose;
    private boolean channelIdEnabled;
    private com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey;
    private java.lang.String[] enabledCipherSuites;
    private java.lang.String[] enabledProtocols;
    private final dalvik.system.CloseGuard guard;
    private boolean handshakeCompleted;
    private final java.lang.Object handshakeLock;
    private boolean handshakeStarted;
    private int handshakeTimeoutMilliseconds;
    private java.lang.String hostname;
    private java.io.InputStream is;
    private java.util.ArrayList listeners;
    private byte[] npnProtocols;
    private java.io.OutputStream os;
    private final java.lang.Object readLock;
    private int readTimeoutMilliseconds;
    private final java.net.Socket socket;
    private long sslNativePointer;
    private com.android.org.conscrypt.SSLParametersImpl sslParameters;
    private com.android.org.conscrypt.OpenSSLSessionImpl sslSession;
    private boolean useSessionTickets;
    private java.lang.String wrappedHost;
    private int wrappedPort;
    private final java.lang.Object writeLock;
    private int writeTimeoutMilliseconds;

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.Object $r2, $r3, $r4;
        dalvik.system.CloseGuard $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r4;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r1);

        return;
    }

    protected void <init>(com.android.org.conscrypt.SSLParametersImpl, java.lang.String[], java.lang.String[]) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] r2, r3;
        java.lang.Object $r4, $r5, $r6;
        dalvik.system.CloseGuard $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r7 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r7;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl,java.lang.String[],java.lang.String[])>(r1, r2, r3);

        return;
    }

    protected void <init>(java.lang.String, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.Object $r3, $r4, $r5;
        dalvik.system.CloseGuard $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int)>(r1, i0);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r2);

        return;
    }

    protected void <init>(java.lang.String, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        int i0, i1;
        java.net.InetAddress r2;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4, $r5, $r6;
        dalvik.system.CloseGuard $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r7 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r7;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r3);

        return;
    }

    protected void <init>(java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1;
        int i0;
        com.android.org.conscrypt.SSLParametersImpl r2;
        java.lang.Object $r3, $r4, $r5;
        dalvik.system.CloseGuard $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)>(r1, i0);

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r5;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r2);

        return;
    }

    protected void <init>(java.net.InetAddress, int, java.net.InetAddress, int, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1, r2;
        int i0, i1;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4, $r5, $r6;
        dalvik.system.CloseGuard $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.InetAddress;

        i0 := @parameter1: int;

        r2 := @parameter2: java.net.InetAddress;

        i1 := @parameter3: int;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)>(r1, i0, r2, i1);

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r7 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r7;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r3);

        return;
    }

    protected void <init>(java.net.Socket, java.lang.String, int, boolean, com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket r1;
        java.lang.String r2;
        int i0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl r3;
        java.lang.Object $r4, $r5, $r6;
        dalvik.system.CloseGuard $r7;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 := @parameter4: com.android.org.conscrypt.SSLParametersImpl;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void <init>()>();

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock> = $r4;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock> = $r5;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock> = $r6;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 0;

        $r7 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard> = $r7;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = -1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort> = i0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose> = z0;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl)>(r3);

        return;
    }

    static java.lang.Object access$000(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock>;

        return $r1;
    }

    static void access$100(com.android.org.conscrypt.OpenSSLSocketImpl) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        return;
    }

    static long access$200(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        return $l0;
    }

    static java.net.Socket access$300(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket $r1;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        return $r1;
    }

    static java.lang.Object access$400(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock>;

        return $r1;
    }

    static int access$500(com.android.org.conscrypt.OpenSSLSocketImpl)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @parameter0: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds>;

        return $i0;
    }

    private void checkOpen() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean $z0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean isClosed()>();

        if $z0 == 0 goto label1;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Socket is closed");

        throw $r1;

     label1:
        return;
    }

    private static java.security.cert.X509Certificate[] createCertChain(byte[][]) throws java.io.IOException
    {
        byte[][] r0;
        java.security.cert.X509Certificate[] r1;
        int i0, $i1, $i2;
        byte[] $r2;
        com.android.org.conscrypt.OpenSSLX509Certificate $r3;

        r0 := @parameter0: byte[][];

        if r0 != null goto label2;

        r1 = null;

     label1:
        return r1;

     label2:
        $i1 = lengthof r0;

        r1 = newarray (java.security.cert.X509Certificate)[$i1];

        i0 = 0;

     label3:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label1;

        $r2 = r0[i0];

        $r3 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromX509Der(byte[])>($r2);

        r1[i0] = $r3;

        i0 = i0 + 1;

        goto label3;
    }

    private static byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[]) throws java.security.cert.CertificateEncodingException
    {
        java.security.cert.X509Certificate[] r0;
        byte[][] r1;
        int i0, $i1, $i2;
        java.security.cert.X509Certificate $r2;
        javax.security.auth.x500.X500Principal $r3;
        byte[] $r4;

        r0 := @parameter0: java.security.cert.X509Certificate[];

        $i1 = lengthof r0;

        r1 = newarray (byte[])[$i1];

        i0 = 0;

     label1:
        $i2 = lengthof r0;

        if i0 >= $i2 goto label2;

        $r2 = r0[i0];

        $r3 = virtualinvoke $r2.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r4 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        r1[i0] = $r4;

        i0 = i0 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void free()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0, $l2;
        byte $b1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        $l2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_free(long)>($l2);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = 0L;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        return;
    }

    private com.android.org.conscrypt.OpenSSLSessionImpl getCachedClientSession(com.android.org.conscrypt.ClientSessionContext)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.ClientSessionContext r1;
        java.lang.String r2, r4, r6, $r9, $r10;
        int i0, i1, i2, i3, i4;
        com.android.org.conscrypt.OpenSSLSessionImpl r3;
        java.lang.String[] r5, r7;
        boolean z0, z1, $z2, $z3;
        javax.net.ssl.SSLSession $r8;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.ClientSessionContext;

        r2 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        i0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getPeerPort()>();

        if r2 != null goto label02;

        r3 = null;

     label01:
        return r3;

     label02:
        $r8 = virtualinvoke r1.<com.android.org.conscrypt.ClientSessionContext: javax.net.ssl.SSLSession getSession(java.lang.String,int)>(r2, i0);

        r3 = (com.android.org.conscrypt.OpenSSLSessionImpl) $r8;

        if r3 != null goto label03;

        return null;

     label03:
        r4 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String getProtocol()>();

        r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledProtocols>;

        i1 = lengthof r5;

        i2 = 0;

     label04:
        z0 = 0;

        if i2 >= i1 goto label05;

        $r10 = r5[i2];

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label06;

        z0 = 1;

     label05:
        if z0 != 0 goto label07;

        return null;

     label06:
        i2 = i2 + 1;

        goto label04;

     label07:
        r6 = virtualinvoke r3.<com.android.org.conscrypt.OpenSSLSessionImpl: java.lang.String getCipherSuite()>();

        r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites>;

        i3 = lengthof r7;

        i4 = 0;

     label08:
        z1 = 0;

        if i4 >= i3 goto label09;

        $r9 = r7[i4];

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label10;

        z1 = 1;

     label09:
        if z1 != 0 goto label01;

        return null;

     label10:
        i4 = i4 + 1;

        goto label08;
    }

    private void init(com.android.org.conscrypt.SSLParametersImpl) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultProtocols()>();

        $r3 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getDefaultCipherSuites()>();

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void init(com.android.org.conscrypt.SSLParametersImpl,java.lang.String[],java.lang.String[])>(r1, $r2, $r3);

        return;
    }

    private void init(com.android.org.conscrypt.SSLParametersImpl, java.lang.String[], java.lang.String[]) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl r1;
        java.lang.String[] r2, r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: com.android.org.conscrypt.SSLParametersImpl;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String[];

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters> = r1;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledProtocols> = r2;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites> = r3;

        return;
    }

    private void notifyHandshakeCompletedListeners()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedEvent r1, $r8;
        java.util.Iterator r2;
        javax.net.ssl.HandshakeCompletedListener r3;
        java.lang.RuntimeException r4, $r12;
        java.lang.Thread r5;
        java.util.ArrayList $r6, $r7, $r10;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLSessionImpl $r9;
        java.lang.Object $r11;
        java.lang.Thread$UncaughtExceptionHandler $r13;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r6 == null goto label5;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        $z0 = virtualinvoke $r7.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label5;

        $r8 = new javax.net.ssl.HandshakeCompletedEvent;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        specialinvoke $r8.<javax.net.ssl.HandshakeCompletedEvent: void <init>(javax.net.ssl.SSLSocket,javax.net.ssl.SSLSession)>(r0, $r9);

        r1 = $r8;

        $r10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        r2 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (javax.net.ssl.HandshakeCompletedListener) $r11;

     label2:
        interfaceinvoke r3.<javax.net.ssl.HandshakeCompletedListener: void handshakeCompleted(javax.net.ssl.HandshakeCompletedEvent)>(r1);

     label3:
        goto label1;

     label4:
        $r12 := @caughtexception;

        r4 = $r12;

        r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r13 = virtualinvoke r5.<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>();

        interfaceinvoke $r13.<java.lang.Thread$UncaughtExceptionHandler: void uncaughtException(java.lang.Thread,java.lang.Throwable)>(r5, r4);

        goto label1;

     label5:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private void setCertificate(java.lang.String) throws java.security.cert.CertificateEncodingException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;
        java.security.PrivateKey r2;
        java.security.cert.X509Certificate[] r3;
        byte[][] r4;
        java.security.InvalidKeyException r5, $r11;
        com.android.org.conscrypt.OpenSSLKey r6;
        com.android.org.conscrypt.SSLParametersImpl $r7, $r9;
        javax.net.ssl.X509KeyManager $r8, $r10;
        long $l0, $l1, $l2, $l3;
        javax.net.ssl.SSLException $r12;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r8 = virtualinvoke $r7.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        r2 = interfaceinvoke $r8.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r10 = virtualinvoke $r9.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        r3 = interfaceinvoke $r10.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>(r1);

        if r3 == null goto label1;

        r4 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] encodeCertificates(java.security.cert.Certificate[])>(r3);

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_use_certificate(long,byte[][])>($l0, r4);

     label3:
        r6 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey)>(r2);

        $l2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $l1 = virtualinvoke r6.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_use_PrivateKey(long,long)>($l2, $l1);

     label4:
        $l3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_check_private_key(long)>($l3);

        return;

     label5:
        $r11 := @caughtexception;

        r5 = $r11;

        $r12 = new javax.net.ssl.SSLException;

        specialinvoke $r12.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r5);

        throw $r12;

        catch java.security.InvalidKeyException from label3 to label4 with label5;
    }

    public void addHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r5;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners> = $r4;

     label2:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void clientCertificateRequested(byte[], byte[][]) throws java.security.cert.CertificateEncodingException, javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1, $r9;
        byte[][] r2;
        java.lang.String[] r3;
        int i0, i1, $i2, $i3, $i4, $i5;
        javax.security.auth.x500.X500Principal[] r4;
        com.android.org.conscrypt.SSLParametersImpl $r5;
        javax.net.ssl.X509KeyManager $r6;
        java.lang.String $r7, $r10;
        javax.security.auth.x500.X500Principal $r8;
        byte $b6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[][];

        $i2 = lengthof r1;

        r3 = newarray (java.lang.String)[$i2];

        i0 = 0;

     label1:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label2;

        $b6 = r1[i0];

        $r10 = staticinvoke <com.android.org.conscrypt.CipherSuite: java.lang.String getClientKeyType(byte)>($b6);

        r3[i0] = $r10;

        i0 = i0 + 1;

        goto label1;

     label2:
        if r2 != null goto label4;

        r4 = null;

     label3:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r6 = virtualinvoke $r5.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r7 = interfaceinvoke $r6.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>(r3, r4, r0);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setCertificate(java.lang.String)>($r7);

        return;

     label4:
        $i4 = lengthof r2;

        r4 = newarray (javax.security.auth.x500.X500Principal)[$i4];

        i1 = 0;

     label5:
        $i5 = lengthof r2;

        if i1 >= $i5 goto label3;

        $r8 = new javax.security.auth.x500.X500Principal;

        $r9 = r2[i1];

        specialinvoke $r8.<javax.security.auth.x500.X500Principal: void <init>(byte[])>($r9);

        r4[i1] = $r8;

        i1 = i1 + 1;

        goto label5;
    }

    public void close() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Object r1, r4, r6;
        java.lang.Throwable r2, r3, r5, r7, r8, r10, $r21, $r24, $r26, $r27, $r29, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        long $l0, $l1;
        java.net.Socket $r11, $r12, $r13, $r14, $r17, $r18, $r20, $r22, $r23, $r25, $r28, $r31, $r32;
        dalvik.system.BlockGuard$Policy $r15;
        java.io.FileDescriptor $r16;
        java.io.IOException $r19;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z0 != 0 goto label14;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 1;

        entermonitor r0;

     label02:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        $r17 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r17 == r0 goto label06;

        $z7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose>;

        if $z7 == 0 goto label03;

        $r18 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $z6 = virtualinvoke $r18.<java.net.Socket: boolean isClosed()>();

        if $z6 != 0 goto label03;

        $r20 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        virtualinvoke $r20.<java.net.Socket: void close()>();

     label03:
        exitmonitor r0;

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $z5 = specialinvoke r0.<javax.net.ssl.SSLSocket: boolean isClosed()>();

        if $z5 != 0 goto label03;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

     label07:
        goto label03;

     label08:
        $r30 := @caughtexception;

        r10 = $r30;

     label09:
        exitmonitor r0;

     label10:
        throw r10;

     label11:
        $r26 := @caughtexception;

        r2 = $r26;

     label12:
        exitmonitor r1;

     label13:
        throw r2;

     label14:
        exitmonitor r1;

     label15:
        entermonitor r0;

     label16:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_interrupt(long)>($l0);

        r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object writeLock>;

        entermonitor r4;

     label17:
        r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object readLock>;

        entermonitor r6;

     label18:
        $z1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z1 == 0 goto label19;

        $r15 = staticinvoke <dalvik.system.BlockGuard: dalvik.system.BlockGuard$Policy getThreadPolicy()>();

        interfaceinvoke $r15.<dalvik.system.BlockGuard$Policy: void onNetwork()>();

        $l1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $r16 = virtualinvoke $r14.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_shutdown(long,java.io.FileDescriptor,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks)>($l1, $r16, r0);

     label19:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        $r11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r11 == r0 goto label27;

        $z3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose>;

        if $z3 == 0 goto label20;

        $r12 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $z4 = virtualinvoke $r12.<java.net.Socket: boolean isClosed()>();

        if $z4 != 0 goto label20;

        $r13 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        virtualinvoke $r13.<java.net.Socket: void close()>();

     label20:
        exitmonitor r6;

     label21:
        exitmonitor r4;

     label22:
        exitmonitor r0;

     label23:
        return;

     label24:
        $r24 := @caughtexception;

        r3 = $r24;

     label25:
        exitmonitor r0;

     label26:
        throw r3;

     label27:
        $z2 = specialinvoke r0.<javax.net.ssl.SSLSocket: boolean isClosed()>();

        if $z2 != 0 goto label20;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

     label28:
        goto label20;

     label29:
        $r21 := @caughtexception;

        r8 = $r21;

     label30:
        exitmonitor r6;

     label31:
        throw r8;

     label32:
        $r27 := @caughtexception;

        r5 = $r27;

     label33:
        exitmonitor r4;

     label34:
        throw r5;

     label35:
        $r19 := @caughtexception;

     label36:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        $r23 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r23 == r0 goto label38;

        $z8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose>;

        if $z8 == 0 goto label20;

        $r22 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $z10 = virtualinvoke $r22.<java.net.Socket: boolean isClosed()>();

        if $z10 != 0 goto label20;

        $r25 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        virtualinvoke $r25.<java.net.Socket: void close()>();

     label37:
        goto label20;

     label38:
        $z9 = specialinvoke r0.<javax.net.ssl.SSLSocket: boolean isClosed()>();

        if $z9 != 0 goto label20;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

     label39:
        goto label20;

     label40:
        $r29 := @caughtexception;

        r7 = $r29;

     label41:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

        $r28 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r28 == r0 goto label43;

        $z11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean autoClose>;

        if $z11 == 0 goto label42;

        $r32 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $z13 = virtualinvoke $r32.<java.net.Socket: boolean isClosed()>();

        if $z13 != 0 goto label42;

        $r31 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        virtualinvoke $r31.<java.net.Socket: void close()>();

     label42:
        throw r7;

     label43:
        $z12 = specialinvoke r0.<javax.net.ssl.SSLSocket: boolean isClosed()>();

        if $z12 != 0 goto label42;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void close()>();

     label44:
        goto label42;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label14 to label15 with label11;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.io.IOException from label18 to label19 with label35;
        catch java.lang.Throwable from label18 to label19 with label40;
        catch java.lang.Throwable from label19 to label20 with label29;
        catch java.lang.Throwable from label20 to label21 with label29;
        catch java.lang.Throwable from label21 to label22 with label32;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.lang.Throwable from label25 to label26 with label24;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label30 to label31 with label29;
        catch java.lang.Throwable from label31 to label32 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
        catch java.lang.Throwable from label34 to label35 with label24;
        catch java.lang.Throwable from label36 to label37 with label29;
        catch java.lang.Throwable from label38 to label39 with label29;
        catch java.lang.Throwable from label41 to label42 with label29;
        catch java.lang.Throwable from label42 to label43 with label29;
        catch java.lang.Throwable from label43 to label44 with label29;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r1, $r4;
        dalvik.system.CloseGuard $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void free()>();

     label3:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label4:
        $r4 := @caughtexception;

        r1 = $r4;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public byte[] getAlpnSelectedProtocol()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get0_alpn_selected(long)>($l0);

        return $r1;
    }

    public byte[] getChannelId() throws javax.net.ssl.SSLException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean $z0, $z1;
        long $l0;
        byte[] $r1;
        java.lang.IllegalStateException $r2, $r3;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client mode");

        throw $r3;

     label1:
        $z1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted>;

        if $z1 != 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Channel ID is only available after handshake completes");

        throw $r2;

     label2:
        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get_tls_channel_id(long)>($l0);

        return $r1;
    }

    public boolean getEnableSessionCreation()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledProtocols>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (java.lang.String[]) $r2;

        return $r3;
    }

    public java.io.FileDescriptor getFileDescriptor$()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.Socket $r1, $r2;
        java.io.FileDescriptor $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        if $r1 != r0 goto label1;

        $r4 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.io.FileDescriptor getFileDescriptor$()>();

        return $r4;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        return $r3;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r1, $r5;
        java.io.InputStream r2, $r3;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.InputStream is>;

        if $r3 != null goto label2;

        $r4 = new com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLInputStream: void <init>(com.android.org.conscrypt.OpenSSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.InputStream is> = $r4;

     label2:
        r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.InputStream is>;

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean getNeedClientAuth()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        return $z0;
    }

    public byte[] getNpnSelectedProtocol()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        long $l0;
        byte[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $l0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_get_npn_negotiated_protocol(long)>($l0);

        return $r1;
    }

    public java.io.OutputStream getOutputStream() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r1, $r5;
        java.io.OutputStream r2, $r3;
        com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.OutputStream os>;

        if $r3 != null goto label2;

        $r4 = new com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream;

        specialinvoke $r4.<com.android.org.conscrypt.OpenSSLSocketImpl$SSLOutputStream: void <init>(com.android.org.conscrypt.OpenSSLSocketImpl)>(r0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.OutputStream os> = $r4;

     label2:
        r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.OutputStream os>;

        exitmonitor r0;

     label3:
        return r2;

     label4:
        $r5 := @caughtexception;

        r1 = $r5;

     label5:
        exitmonitor r0;

     label6:
        throw r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    java.lang.String getPeerHostName()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.net.InetAddress r1;
        java.lang.String $r2, $r3, $r4;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        if $r2 == null goto label1;

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        return $r4;

     label1:
        r1 = specialinvoke r0.<javax.net.ssl.SSLSocket: java.net.InetAddress getInetAddress()>();

        if r1 == null goto label2;

        $r3 = virtualinvoke r1.<java.net.InetAddress: java.lang.String getHostName()>();

        return $r3;

     label2:
        return null;
    }

    int getPeerPort()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String $r1;
        int $i0, $i1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        if $r1 != null goto label1;

        $i1 = specialinvoke r0.<javax.net.ssl.SSLSocket: int getPort()>();

        return $i1;

     label1:
        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int wrappedPort>;

        return $i0;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.OpenSSLSessionImpl $r2, $r3;
        java.io.IOException $r4;
        com.android.org.conscrypt.SSLSessionImpl $r5;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r2 != null goto label2;

     label1:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void startHandshake()>();

     label2:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        return $r3;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <com.android.org.conscrypt.SSLSessionImpl: com.android.org.conscrypt.SSLSessionImpl getNullSession()>();

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds>;

        return $i0;
    }

    public int getSoWriteTimeout() throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int $i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $i0 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds>;

        return $i0;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] getSupportedProtocols()>();

        return $r1;
    }

    public boolean getUseClientMode()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        return $z0;
    }

    public void handshakeCompleted()
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        com.android.org.conscrypt.AbstractSessionContext r1;
        com.android.org.conscrypt.OpenSSLSessionImpl $r2, $r3, $r6;
        com.android.org.conscrypt.SSLParametersImpl $r4, $r5, $r7;
        boolean $z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted> = 1;

        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        virtualinvoke $r3.<com.android.org.conscrypt.OpenSSLSessionImpl: void resetId()>();

        $r4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r4.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label3;

        $r7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r1 = virtualinvoke $r7.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext getClientSessionContext()>();

     label2:
        $r6 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        virtualinvoke r1.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>($r6);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void notifyHandshakeCompletedListeners()>();

        return;

     label3:
        $r5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r1 = virtualinvoke $r5.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext getServerSessionContext()>();

        goto label2;
    }

    public void removeHandshakeCompletedListener(javax.net.ssl.HandshakeCompletedListener)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        javax.net.ssl.HandshakeCompletedListener r1;
        java.util.ArrayList $r2, $r3;
        boolean $z0;
        java.lang.IllegalArgumentException $r4, $r5, $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: javax.net.ssl.HandshakeCompletedListener;

        if r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is null");

        throw $r6;

     label1:
        $r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r5;

     label2:
        $r3 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.util.ArrayList listeners>;

        $z0 = virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided listener is not registered");

        throw $r4;

     label3:
        return;
    }

    public void sendUrgentData(int) throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Method sendUrgentData() is not supported.");

        throw $r1;
    }

    public void setAlpnProtocols(byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("alpnProtocols.length == 0");

        throw $r2;

     label1:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] alpnProtocols> = r1;

        return;
    }

    public void setChannelIdEnabled(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0, $z1, $z2;
        java.lang.IllegalStateException $r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z1 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client mode");

        throw $r2;

     label1:
        $z2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z2 == 0 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not enable/disable Channel ID after the initial handshake has begun.");

        throw $r1;

     label2:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean channelIdEnabled> = z0;

        return;
    }

    public void setChannelIdPrivateKey(java.security.PrivateKey)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.security.PrivateKey r1;
        boolean $z0, $z1;
        com.android.org.conscrypt.OpenSSLKey $r3;
        java.lang.IllegalStateException $r4, $r5;
        java.security.InvalidKeyException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.security.PrivateKey;

        $z0 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean getUseClientMode()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Server mode");

        throw $r5;

     label1:
        $z1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z1 == 0 goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Could not change Channel ID private key after the initial handshake has begun.");

        throw $r4;

     label2:
        if r1 != null goto label3;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean channelIdEnabled> = 0;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey> = null;

        return;

     label3:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean channelIdEnabled> = 1;

     label4:
        $r3 = staticinvoke <com.android.org.conscrypt.OpenSSLKey: com.android.org.conscrypt.OpenSSLKey fromPrivateKey(java.security.PrivateKey)>(r1);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey> = $r3;

     label5:
        return;

     label6:
        $r6 := @caughtexception;

        return;

        catch java.security.InvalidKeyException from label4 to label5 with label6;
    }

    public void setEnableSessionCreation(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setEnableSessionCreation(boolean)>(z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledCipherSuites(java.lang.String[])>(r1);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites> = $r2;

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String[] r1, $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = staticinvoke <com.android.org.conscrypt.NativeCrypto: java.lang.String[] checkEnabledProtocols(java.lang.String[])>(r1);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledProtocols> = $r2;

        return;
    }

    public void setHandshakeTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds> = i0;

        return;
    }

    public void setHostname(java.lang.String)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.String r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String hostname> = r1;

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setNeedClientAuth(boolean)>(z0);

        return;
    }

    public void setNpnProtocols(byte[])
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[] r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("npnProtocols.length == 0");

        throw $r2;

     label1:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] npnProtocols> = r1;

        return;
    }

    public void setOOBInline(boolean) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        java.net.SocketException $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = new java.net.SocketException;

        specialinvoke $r1.<java.net.SocketException: void <init>(java.lang.String)>("Methods sendUrgentData, setOOBInline are not supported.");

        throw $r1;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        specialinvoke r0.<javax.net.ssl.SSLSocket: void setSoTimeout(int)>(i0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int readTimeoutMilliseconds> = i0;

        return;
    }

    public void setSoWriteTimeout(int) throws java.net.SocketException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        int i0, $i2, $i3;
        libcore.io.StructTimeval r1;
        libcore.io.ErrnoException r2, $r5;
        long $l1;
        libcore.io.Os $r3;
        java.io.FileDescriptor $r4;
        java.net.SocketException $r6;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        i0 := @parameter0: int;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int writeTimeoutMilliseconds> = i0;

        $l1 = (long) i0;

        r1 = staticinvoke <libcore.io.StructTimeval: libcore.io.StructTimeval fromMillis(long)>($l1);

     label1:
        $r3 = <libcore.io.Libcore: libcore.io.Os os>;

        $r4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.io.FileDescriptor getFileDescriptor$()>();

        $i3 = <libcore.io.OsConstants: int SOL_SOCKET>;

        $i2 = <libcore.io.OsConstants: int SO_SNDTIMEO>;

        interfaceinvoke $r3.<libcore.io.Os: void setsockoptTimeval(java.io.FileDescriptor,int,int,libcore.io.StructTimeval)>($r4, $i3, $i2, r1);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = virtualinvoke r2.<libcore.io.ErrnoException: java.net.SocketException rethrowAsSocketException()>();

        throw $r6;

        catch libcore.io.ErrnoException from label1 to label2 with label3;
    }

    public void setUseClientMode(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0, $z1;
        com.android.org.conscrypt.SSLParametersImpl $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not change the mode after the initial handshake has begun.");

        throw $r2;

     label1:
        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setUseClientMode(boolean)>(z0);

        return;
    }

    public void setUseSessionTickets(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean useSessionTickets> = z0;

        return;
    }

    public void setWantClientAuth(boolean)
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        boolean z0;
        com.android.org.conscrypt.SSLParametersImpl $r1;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        virtualinvoke $r1.<com.android.org.conscrypt.SSLParametersImpl: void setWantClientAuth(boolean)>(z0);

        return;
    }

    public void startHandshake() throws java.io.IOException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        java.lang.Throwable r1, r3, r5, $r65, $r75, $r78;
        java.lang.Object r2, $r59;
        java.security.SecureRandom r4;
        boolean z0, z1, z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        long l0, l5, l8, $l10, $l11, $l12, $l14, $l15, $l18, $l19, $l20, $l21, $l24, $l25, $l26, $l27, $l28, $l29, $l30, $l31, $l32, $l33;
        javax.net.ssl.SSLProtocolException r6, $r68;
        java.util.HashSet r7, $r64;
        java.lang.String[] r8, $r34, $r37;
        int i1, i2, i3, i4, i6, i7, i9, $i13, $i16, $i17, $i22, $i23;
        java.lang.String r9, r10, r28, $r40, $r47, $r60, $r63, $r80;
        java.util.Iterator r11;
        com.android.org.conscrypt.ClientSessionContext r12, $r74;
        com.android.org.conscrypt.OpenSSLSessionImpl r13, $r46, $r48, $r50;
        com.android.org.conscrypt.AbstractSessionContext r14;
        javax.net.ssl.SSLHandshakeException r15, $r55, $r69, $r76;
        java.security.cert.CertificateException r16, $r77;
        java.io.FileDescriptor r17;
        byte[] r18, r19, r20, r26, $r29, $r36, $r52, $r72;
        java.security.cert.X509Certificate[] r21, r22, r23;
        java.security.cert.CertificateEncodingException r24, r27, $r66, $r70;
        byte[][] r25, $r44, $r45;
        com.android.org.conscrypt.SSLParametersImpl $r30, $r32, $r33, $r38, $r39, $r41, $r42, $r54, $r57, $r58, $r73;
        com.android.org.conscrypt.ServerSessionContext $r31;
        dalvik.system.CloseGuard $r35;
        java.net.Socket $r43;
        com.android.org.conscrypt.OpenSSLKey $r49, $r56;
        java.lang.IllegalStateException $r51;
        javax.net.ssl.X509TrustManager $r53;
        javax.net.ssl.X509KeyManager $r61;
        com.android.org.conscrypt.CipherSuite $r62;
        java.io.IOException $r67, $r71;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        entermonitor r0;

     label01:
        r2 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.Object handshakeLock>;

        entermonitor r2;

     label02:
        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void checkOpen()>();

        $z4 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted>;

        if $z4 != 0 goto label20;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeStarted> = 1;

        exitmonitor r2;

     label03:
        $r30 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r4 = virtualinvoke $r30.<com.android.org.conscrypt.SSLParametersImpl: java.security.SecureRandom getSecureRandomMember()>();

     label04:
        if r4 != null goto label26;

     label05:
        staticinvoke <com.android.org.conscrypt.NativeCrypto: int RAND_load_file(java.lang.String,long)>("/dev/urandom", 1024L);

     label06:
        $r33 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        z0 = virtualinvoke $r33.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

     label07:
        if z0 == 0 goto label28;

     label08:
        $r73 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r74 = virtualinvoke $r73.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext getClientSessionContext()>();

        l0 = $r74.<com.android.org.conscrypt.ClientSessionContext: long sslCtxNativePointer>;

     label09:
        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = 0L;

     label10:
        $l12 = staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_new(long)>(l0);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer> = $l12;

        $r35 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: dalvik.system.CloseGuard guard>;

        virtualinvoke $r35.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        $r36 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] npnProtocols>;

        if $r36 == null goto label11;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_CTX_enable_npn(long)>(l0);

     label11:
        if z0 == 0 goto label13;

     label12:
        $r72 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] alpnProtocols>;

        if $r72 == null goto label13;

        r26 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] alpnProtocols>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_CTX_set_alpn_protos(long,byte[])>(l0, r26);

     label13:
        if z0 != 0 goto label45;

     label14:
        $r64 = new java.util.HashSet;

        specialinvoke $r64.<java.util.HashSet: void <init>()>();

        r7 = $r64;

        r8 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites>;

        i1 = lengthof r8;

     label15:
        i2 = 0;

     label16:
        if i2 >= i1 goto label39;

     label17:
        r9 = r8[i2];

        z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("TLS_EMPTY_RENEGOTIATION_INFO_SCSV");

     label18:
        if z1 == 0 goto label30;

     label19:
        i2 = i2 + 1;

        goto label16;

     label20:
        exitmonitor r2;

     label21:
        exitmonitor r0;

        return;

     label22:
        $r75 := @caughtexception;

        r3 = $r75;

     label23:
        exitmonitor r2;

     label24:
        throw r3;

     label25:
        $r78 := @caughtexception;

        r1 = $r78;

        exitmonitor r0;

        throw r1;

     label26:
        $r29 = virtualinvoke r4.<java.security.SecureRandom: byte[] generateSeed(int)>(1024);

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void RAND_seed(byte[])>($r29);

     label27:
        goto label06;

     label28:
        $r32 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r31 = virtualinvoke $r32.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext getServerSessionContext()>();

        l0 = $r31.<com.android.org.conscrypt.ServerSessionContext: long sslCtxNativePointer>;

     label29:
        goto label09;

     label30:
        $r62 = staticinvoke <com.android.org.conscrypt.CipherSuite: com.android.org.conscrypt.CipherSuite getByName(java.lang.String)>(r9);

        r10 = virtualinvoke $r62.<com.android.org.conscrypt.CipherSuite: java.lang.String getServerKeyType()>();

     label31:
        if r10 == null goto label19;

     label32:
        interfaceinvoke r7.<java.util.Set: boolean add(java.lang.Object)>(r10);

     label33:
        goto label19;

     label34:
        $r68 := @caughtexception;

        r6 = $r68;

     label35:
        $r69 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r69.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.Throwable)>(r6);

        throw $r69;

     label36:
        $r65 := @caughtexception;

        r5 = $r65;

     label37:
        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void close()>();

     label38:
        throw r5;

     label39:
        r11 = interfaceinvoke r7.<java.util.Set: java.util.Iterator iterator()>();

     label40:
        $z12 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label45;

        $r59 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r28 = (java.lang.String) $r59;

     label41:
        $r58 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r61 = virtualinvoke $r58.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r60 = interfaceinvoke $r61.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>(r28, null, r0);

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setCertificate(java.lang.String)>($r60);

     label42:
        goto label40;

     label43:
        $r66 := @caughtexception;

        r27 = $r66;

     label44:
        $r67 = new java.io.IOException;

        specialinvoke $r67.<java.io.IOException: void <init>(java.lang.Throwable)>(r27);

        throw $r67;

     label45:
        $l10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r37 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledProtocols>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void setEnabledProtocols(long,java.lang.String[])>($l10, $r37);

        $l11 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r34 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String[] enabledCipherSuites>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void setEnabledCipherSuites(long,java.lang.String[])>($l11, $r34);

        $z5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean useSessionTickets>;

        if $z5 == 0 goto label46;

        $l32 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: long SSL_clear_options(long,long)>($l32, 16384L);

     label46:
        $r40 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String hostname>;

        if $r40 == null goto label47;

        $l33 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r63 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String hostname>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_tlsext_host_name(long,java.lang.String)>($l33, $r63);

     label47:
        $r41 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        z2 = virtualinvoke $r41.<com.android.org.conscrypt.SSLParametersImpl: boolean getEnableSessionCreation()>();

     label48:
        if z2 != 0 goto label50;

     label49:
        $l31 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_session_creation_enabled(long,boolean)>($l31, z2);

     label50:
        if z0 == 0 goto label61;

     label51:
        $r57 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r12 = virtualinvoke $r57.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ClientSessionContext getClientSessionContext()>();

     label52:
        r14 = r12;

     label53:
        r13 = specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl getCachedClientSession(com.android.org.conscrypt.ClientSessionContext)>(r12);

     label54:
        if r13 == null goto label98;

     label55:
        $l29 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $l30 = r13.<com.android.org.conscrypt.OpenSSLSessionImpl: long sslSessionNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_session(long,long)>($l29, $l30);

     label56:
        goto label98;

     label57:
        i4 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoTimeout()>();

        i3 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoWriteTimeout()>();

        $i13 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        if $i13 < 0 goto label58;

        $i23 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoTimeout(int)>($i23);

        $i22 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>($i22);

     label58:
        $z7 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean channelIdEnabled>;

        if $z7 == 0 goto label78;

     label59:
        if z0 == 0 goto label88;

     label60:
        $r49 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey>;

        if $r49 != null goto label77;

        $r55 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r55.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Invalid TLS channel ID key specified");

        throw $r55;

     label61:
        $r42 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r14 = virtualinvoke $r42.<com.android.org.conscrypt.SSLParametersImpl: com.android.org.conscrypt.ServerSessionContext getServerSessionContext()>();

     label62:
        r13 = null;

        goto label98;

     label63:
        $r38 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z6 = virtualinvoke $r38.<com.android.org.conscrypt.SSLParametersImpl: boolean getNeedClientAuth()>();

        if $z6 == 0 goto label73;

        $l26 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_verify(long,int)>($l26, 3);

     label64:
        z3 = 1;

     label65:
        if z3 == 0 goto label57;

     label66:
        $r54 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r53 = virtualinvoke $r54.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>();

        r22 = interfaceinvoke $r53.<javax.net.ssl.X509TrustManager: java.security.cert.X509Certificate[] getAcceptedIssuers()>();

     label67:
        if r22 == null goto label57;

     label68:
        i9 = lengthof r22;

     label69:
        if i9 == 0 goto label57;

     label70:
        r25 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: byte[][] encodeIssuerX509Principals(java.security.cert.X509Certificate[])>(r22);

     label71:
        $l28 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_client_CA_list(long,byte[][])>($l28, r25);

     label72:
        goto label57;

     label73:
        $r39 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z8 = virtualinvoke $r39.<com.android.org.conscrypt.SSLParametersImpl: boolean getWantClientAuth()>();

        if $z8 == 0 goto label99;

        $l27 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set_verify(long,int)>($l27, 1);

     label74:
        z3 = 1;

        goto label65;

     label75:
        $r70 := @caughtexception;

        r24 = $r70;

     label76:
        $r71 = new java.io.IOException;

        specialinvoke $r71.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>("Problem encoding principals", r24);

        throw $r71;

     label77:
        $l25 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r56 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLKey channelIdPrivateKey>;

        $l24 = virtualinvoke $r56.<com.android.org.conscrypt.OpenSSLKey: long getPkeyContext()>();

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_set1_tls_channel_id(long,long)>($l25, $l24);

     label78:
        l5 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r43 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.net.Socket socket>;

        r17 = virtualinvoke $r43.<java.net.Socket: java.io.FileDescriptor getFileDescriptor$()>();

        i7 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getSoTimeout()>();

        r19 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] npnProtocols>;

     label79:
        if z0 == 0 goto label90;

        r18 = null;

     label80:
        i6 = staticinvoke <com.android.org.conscrypt.NativeCrypto: int SSL_do_handshake(long,java.io.FileDescriptor,com.android.org.conscrypt.NativeCrypto$SSLHandshakeCallbacks,int,boolean,byte[],byte[])>(l5, r17, r0, i7, z0, r19, r18);

     label81:
        l8 = (long) i6;

     label82:
        r20 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[] SSL_SESSION_session_id(long)>(l8);

     label83:
        if r13 == null goto label94;

     label84:
        $r52 = virtualinvoke r13.<com.android.org.conscrypt.OpenSSLSessionImpl: byte[] getId()>();

        $z11 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r52, r20);

        if $z11 == 0 goto label94;

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession> = r13;

        $r50 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        $l20 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r50.<com.android.org.conscrypt.OpenSSLSessionImpl: long lastAccessedTime> = $l20;

        $l21 = (long) i6;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_SESSION_free(long)>($l21);

     label85:
        $i16 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int handshakeTimeoutMilliseconds>;

        if $i16 < 0 goto label86;

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoTimeout(int)>(i4);

        virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void setSoWriteTimeout(int)>(i3);

     label86:
        $z9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted>;

        if $z9 == 0 goto label87;

        specialinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: void notifyHandshakeCompletedListeners()>();

     label87:
        goto label21;

     label88:
        $l19 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        staticinvoke <com.android.org.conscrypt.NativeCrypto: void SSL_enable_tls_channel_id(long)>($l19);

     label89:
        goto label78;

     label90:
        r18 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: byte[] alpnProtocols>;

     label91:
        goto label80;

     label92:
        $r77 := @caughtexception;

        r16 = $r77;

     label93:
        $r76 = new javax.net.ssl.SSLHandshakeException;

        $r80 = virtualinvoke r16.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r76.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>($r80);

        r15 = $r76;

        virtualinvoke r15.<javax.net.ssl.SSLHandshakeException: java.lang.Throwable initCause(java.lang.Throwable)>(r16);

        throw r15;

     label94:
        if z2 != 0 goto label96;

     label95:
        $r51 = new java.lang.IllegalStateException;

        specialinvoke $r51.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSL Session may not be created");

        throw $r51;

     label96:
        $l15 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r45 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] SSL_get_certificate(long)>($l15);

        r21 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: java.security.cert.X509Certificate[] createCertChain(byte[][])>($r45);

        $l14 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: long sslNativePointer>;

        $r44 = staticinvoke <com.android.org.conscrypt.NativeCrypto: byte[][] SSL_get_peer_cert_chain(long)>($l14);

        r23 = staticinvoke <com.android.org.conscrypt.OpenSSLSocketImpl: java.security.cert.X509Certificate[] createCertChain(byte[][])>($r44);

        $r48 = new com.android.org.conscrypt.OpenSSLSessionImpl;

        $l18 = (long) i6;

        $r47 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String getPeerHostName()>();

        $i17 = virtualinvoke r0.<com.android.org.conscrypt.OpenSSLSocketImpl: int getPeerPort()>();

        specialinvoke $r48.<com.android.org.conscrypt.OpenSSLSessionImpl: void <init>(long,java.security.cert.X509Certificate[],java.security.cert.X509Certificate[],java.lang.String,int,com.android.org.conscrypt.AbstractSessionContext)>($l18, r21, r23, $r47, $i17, r14);

        r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession> = $r48;

        $z10 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: boolean handshakeCompleted>;

        if $z10 == 0 goto label85;

        $r46 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.OpenSSLSessionImpl sslSession>;

        virtualinvoke r14.<com.android.org.conscrypt.AbstractSessionContext: void putSession(javax.net.ssl.SSLSession)>($r46);

     label97:
        goto label85;

     label98:
        if z0 == 0 goto label63;

        goto label57;

     label99:
        z3 = 0;

        goto label65;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label22;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch javax.net.ssl.SSLProtocolException from label10 to label11 with label34;
        catch java.lang.Throwable from label10 to label11 with label36;
        catch javax.net.ssl.SSLProtocolException from label12 to label13 with label34;
        catch java.lang.Throwable from label12 to label13 with label36;
        catch javax.net.ssl.SSLProtocolException from label14 to label15 with label34;
        catch java.lang.Throwable from label14 to label15 with label36;
        catch javax.net.ssl.SSLProtocolException from label17 to label18 with label34;
        catch java.lang.Throwable from label17 to label18 with label36;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label26 to label27 with label25;
        catch java.lang.Throwable from label28 to label29 with label25;
        catch javax.net.ssl.SSLProtocolException from label30 to label31 with label34;
        catch java.lang.Throwable from label30 to label31 with label36;
        catch javax.net.ssl.SSLProtocolException from label32 to label33 with label34;
        catch java.lang.Throwable from label32 to label33 with label36;
        catch java.lang.Throwable from label35 to label36 with label36;
        catch java.lang.Throwable from label37 to label38 with label25;
        catch java.lang.Throwable from label38 to label39 with label25;
        catch javax.net.ssl.SSLProtocolException from label39 to label40 with label34;
        catch java.lang.Throwable from label39 to label40 with label36;
        catch javax.net.ssl.SSLProtocolException from label40 to label41 with label34;
        catch java.lang.Throwable from label40 to label41 with label36;
        catch java.security.cert.CertificateEncodingException from label41 to label42 with label43;
        catch javax.net.ssl.SSLProtocolException from label41 to label42 with label34;
        catch java.lang.Throwable from label41 to label42 with label36;
        catch javax.net.ssl.SSLProtocolException from label44 to label45 with label34;
        catch java.lang.Throwable from label44 to label45 with label36;
        catch javax.net.ssl.SSLProtocolException from label45 to label46 with label34;
        catch java.lang.Throwable from label45 to label46 with label36;
        catch javax.net.ssl.SSLProtocolException from label46 to label47 with label34;
        catch java.lang.Throwable from label46 to label47 with label36;
        catch javax.net.ssl.SSLProtocolException from label47 to label48 with label34;
        catch java.lang.Throwable from label47 to label48 with label36;
        catch javax.net.ssl.SSLProtocolException from label49 to label50 with label34;
        catch java.lang.Throwable from label49 to label50 with label36;
        catch javax.net.ssl.SSLProtocolException from label51 to label52 with label34;
        catch java.lang.Throwable from label51 to label52 with label36;
        catch javax.net.ssl.SSLProtocolException from label53 to label54 with label34;
        catch java.lang.Throwable from label53 to label54 with label36;
        catch javax.net.ssl.SSLProtocolException from label55 to label56 with label34;
        catch java.lang.Throwable from label55 to label56 with label36;
        catch javax.net.ssl.SSLProtocolException from label57 to label58 with label34;
        catch java.lang.Throwable from label57 to label58 with label36;
        catch javax.net.ssl.SSLProtocolException from label58 to label59 with label34;
        catch java.lang.Throwable from label58 to label59 with label36;
        catch javax.net.ssl.SSLProtocolException from label60 to label61 with label34;
        catch java.lang.Throwable from label60 to label61 with label36;
        catch javax.net.ssl.SSLProtocolException from label61 to label62 with label34;
        catch java.lang.Throwable from label61 to label62 with label36;
        catch javax.net.ssl.SSLProtocolException from label63 to label64 with label34;
        catch java.lang.Throwable from label63 to label64 with label36;
        catch javax.net.ssl.SSLProtocolException from label66 to label67 with label34;
        catch java.lang.Throwable from label66 to label67 with label36;
        catch javax.net.ssl.SSLProtocolException from label68 to label69 with label34;
        catch java.lang.Throwable from label68 to label69 with label36;
        catch java.security.cert.CertificateEncodingException from label70 to label71 with label75;
        catch javax.net.ssl.SSLProtocolException from label70 to label71 with label34;
        catch java.lang.Throwable from label70 to label71 with label36;
        catch javax.net.ssl.SSLProtocolException from label71 to label72 with label34;
        catch java.lang.Throwable from label71 to label72 with label36;
        catch javax.net.ssl.SSLProtocolException from label73 to label74 with label34;
        catch java.lang.Throwable from label73 to label74 with label36;
        catch javax.net.ssl.SSLProtocolException from label76 to label77 with label34;
        catch java.lang.Throwable from label76 to label77 with label36;
        catch javax.net.ssl.SSLProtocolException from label77 to label78 with label34;
        catch java.lang.Throwable from label77 to label78 with label36;
        catch java.security.cert.CertificateException from label78 to label79 with label92;
        catch javax.net.ssl.SSLProtocolException from label78 to label79 with label34;
        catch java.lang.Throwable from label78 to label79 with label36;
        catch java.security.cert.CertificateException from label80 to label81 with label92;
        catch javax.net.ssl.SSLProtocolException from label80 to label81 with label34;
        catch java.lang.Throwable from label80 to label81 with label36;
        catch javax.net.ssl.SSLProtocolException from label82 to label83 with label34;
        catch java.lang.Throwable from label82 to label83 with label36;
        catch javax.net.ssl.SSLProtocolException from label84 to label85 with label34;
        catch java.lang.Throwable from label84 to label85 with label36;
        catch javax.net.ssl.SSLProtocolException from label85 to label86 with label34;
        catch java.lang.Throwable from label85 to label86 with label36;
        catch javax.net.ssl.SSLProtocolException from label86 to label87 with label34;
        catch java.lang.Throwable from label86 to label87 with label36;
        catch java.lang.Throwable from label88 to label88 with label25;
        catch javax.net.ssl.SSLProtocolException from label88 to label89 with label34;
        catch java.lang.Throwable from label88 to label89 with label36;
        catch java.security.cert.CertificateException from label90 to label91 with label92;
        catch javax.net.ssl.SSLProtocolException from label90 to label91 with label34;
        catch java.lang.Throwable from label90 to label91 with label36;
        catch javax.net.ssl.SSLProtocolException from label93 to label94 with label34;
        catch java.lang.Throwable from label93 to label94 with label36;
        catch javax.net.ssl.SSLProtocolException from label95 to label96 with label34;
        catch java.lang.Throwable from label95 to label96 with label36;
        catch javax.net.ssl.SSLProtocolException from label96 to label97 with label34;
        catch java.lang.Throwable from label96 to label97 with label36;
    }

    public void verifyCertificateChain(byte[][], java.lang.String) throws java.security.cert.CertificateException
    {
        com.android.org.conscrypt.OpenSSLSocketImpl r0;
        byte[][] r1;
        java.lang.String r2, r6, $r15;
        java.lang.Exception r3, $r20;
        java.security.cert.CertificateException r4, $r21, $r22;
        java.security.cert.X509Certificate[] r5;
        int i0, $i1, $i2, $i3;
        javax.net.ssl.X509TrustManager r7, $r12;
        javax.net.ssl.SSLException $r8;
        com.android.org.conscrypt.SSLParametersImpl $r9, $r13, $r14;
        boolean $z0, $z1;
        java.security.cert.X509Certificate $r10;
        java.security.PublicKey $r11;
        com.android.org.conscrypt.TrustManagerImpl $r17;
        com.android.org.conscrypt.OpenSSLX509Certificate $r18;
        byte[] $r19;

        r0 := @this: com.android.org.conscrypt.OpenSSLSocketImpl;

        r1 := @parameter0: byte[][];

        r2 := @parameter1: java.lang.String;

        if r1 == null goto label02;

     label01:
        $i1 = lengthof r1;

        if $i1 != 0 goto label04;

     label02:
        $r8 = new javax.net.ssl.SSLException;

        specialinvoke $r8.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Peer sent no certificate");

        throw $r8;

     label03:
        $r21 := @caughtexception;

        r4 = $r21;

        throw r4;

     label04:
        $i2 = lengthof r1;

        r5 = newarray (java.security.cert.X509Certificate)[$i2];

     label05:
        i0 = 0;

     label06:
        $i3 = lengthof r1;

        if i0 >= $i3 goto label08;

        $r19 = r1[i0];

        $r18 = staticinvoke <com.android.org.conscrypt.OpenSSLX509Certificate: com.android.org.conscrypt.OpenSSLX509Certificate fromX509Der(byte[])>($r19);

        r5[i0] = $r18;

     label07:
        i0 = i0 + 1;

        goto label06;

     label08:
        $r9 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $z0 = virtualinvoke $r9.<com.android.org.conscrypt.SSLParametersImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label13;

        $r14 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        r7 = virtualinvoke $r14.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>();

        $z1 = r7 instanceof com.android.org.conscrypt.TrustManagerImpl;

        if $z1 == 0 goto label10;

        $r17 = (com.android.org.conscrypt.TrustManagerImpl) r7;

        $r15 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: java.lang.String wrappedHost>;

        virtualinvoke $r17.<com.android.org.conscrypt.TrustManagerImpl: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)>(r5, r2, $r15);

     label09:
        return;

     label10:
        interfaceinvoke r7.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r5, r2);

     label11:
        return;

     label12:
        $r20 := @caughtexception;

        r3 = $r20;

        $r22 = new java.security.cert.CertificateException;

        specialinvoke $r22.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>(r3);

        throw $r22;

     label13:
        $r10 = r5[0];

        $r11 = virtualinvoke $r10.<java.security.cert.X509Certificate: java.security.PublicKey getPublicKey()>();

        r6 = interfaceinvoke $r11.<java.security.PublicKey: java.lang.String getAlgorithm()>();

        $r13 = r0.<com.android.org.conscrypt.OpenSSLSocketImpl: com.android.org.conscrypt.SSLParametersImpl sslParameters>;

        $r12 = virtualinvoke $r13.<com.android.org.conscrypt.SSLParametersImpl: javax.net.ssl.X509TrustManager getTrustManager()>();

        interfaceinvoke $r12.<javax.net.ssl.X509TrustManager: void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String)>(r5, r6);

     label14:
        return;

        catch java.security.cert.CertificateException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label02 with label12;
        catch java.security.cert.CertificateException from label02 to label03 with label03;
        catch java.lang.Exception from label02 to label03 with label12;
        catch java.security.cert.CertificateException from label04 to label05 with label03;
        catch java.lang.Exception from label04 to label05 with label12;
        catch java.security.cert.CertificateException from label06 to label07 with label03;
        catch java.lang.Exception from label06 to label07 with label12;
        catch java.security.cert.CertificateException from label08 to label09 with label03;
        catch java.lang.Exception from label08 to label09 with label12;
        catch java.security.cert.CertificateException from label10 to label11 with label03;
        catch java.lang.Exception from label10 to label11 with label12;
        catch java.security.cert.CertificateException from label13 to label14 with label03;
        catch java.lang.Exception from label13 to label14 with label12;
    }
}
