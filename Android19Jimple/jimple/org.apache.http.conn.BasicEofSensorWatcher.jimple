public class org.apache.http.conn.BasicEofSensorWatcher extends java.lang.Object implements org.apache.http.conn.EofSensorWatcher
{
    protected boolean attemptReuse;
    protected org.apache.http.conn.ManagedClientConnection managedConn;

    public void <init>(org.apache.http.conn.ManagedClientConnection, boolean)
    {
        org.apache.http.conn.BasicEofSensorWatcher r0;
        org.apache.http.conn.ManagedClientConnection r1;
        boolean z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.http.conn.BasicEofSensorWatcher;

        r1 := @parameter0: org.apache.http.conn.ManagedClientConnection;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection may not be null.");

        throw $r2;

     label1:
        r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn> = r1;

        r0.<org.apache.http.conn.BasicEofSensorWatcher: boolean attemptReuse> = z0;

        return;
    }

    public boolean eofDetected(java.io.InputStream) throws java.io.IOException
    {
        org.apache.http.conn.BasicEofSensorWatcher r0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        org.apache.http.conn.ManagedClientConnection $r3, $r4, $r6;

        r0 := @this: org.apache.http.conn.BasicEofSensorWatcher;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $z0 = r0.<org.apache.http.conn.BasicEofSensorWatcher: boolean attemptReuse>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        $r4 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void markReusable()>();

     label2:
        $r3 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r3.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

        return 0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean streamAbort(java.io.InputStream) throws java.io.IOException
    {
        org.apache.http.conn.BasicEofSensorWatcher r0;
        java.io.InputStream r1;
        org.apache.http.conn.ManagedClientConnection $r2;

        r0 := @this: org.apache.http.conn.BasicEofSensorWatcher;

        r1 := @parameter0: java.io.InputStream;

        $r2 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r2.<org.apache.http.conn.ManagedClientConnection: void abortConnection()>();

        return 0;
    }

    public boolean streamClosed(java.io.InputStream) throws java.io.IOException
    {
        org.apache.http.conn.BasicEofSensorWatcher r0;
        java.io.InputStream r1;
        java.lang.Throwable r2, $r5;
        boolean $z0;
        org.apache.http.conn.ManagedClientConnection $r3, $r4, $r6;

        r0 := @this: org.apache.http.conn.BasicEofSensorWatcher;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $z0 = r0.<org.apache.http.conn.BasicEofSensorWatcher: boolean attemptReuse>;

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.io.InputStream: void close()>();

        $r4 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void markReusable()>();

     label2:
        $r3 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r3.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

        return 0;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = r0.<org.apache.http.conn.BasicEofSensorWatcher: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
