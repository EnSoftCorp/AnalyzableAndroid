final class java.util.concurrent.ConcurrentSkipListMap$KeySet extends java.util.AbstractSet implements java.util.NavigableSet
{
    private final java.util.concurrent.ConcurrentNavigableMap m;

    void <init>(java.util.concurrent.ConcurrentNavigableMap)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.util.concurrent.ConcurrentNavigableMap;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m> = r1;

        return;
    }

    public java.lang.Object ceiling(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object ceilingKey(java.lang.Object)>(r1);

        return $r3;
    }

    public void clear()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: void clear()>();

        return;
    }

    public java.util.Comparator comparator()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.util.Comparator $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.util.Comparator comparator()>();

        return $r2;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Iterator descendingIterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.NavigableSet $r1;
        java.util.Iterator $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet descendingSet()>();

        $r2 = interfaceinvoke $r1.<java.util.NavigableSet: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.NavigableSet descendingSet()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0, $r1;
        java.util.concurrent.ConcurrentNavigableMap $r2, $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap descendingMap()>();

        specialinvoke $r1.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r3);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        boolean z0, z1, z2, z3, $z4;
        java.util.Collection r2;
        java.lang.ClassCastException $r5;
        java.lang.NullPointerException $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 = 1;

        if r1 != r0 goto label2;

        z2 = 1;

     label1:
        return z2;

     label2:
        z1 = r1 instanceof java.util.Set;

        z2 = 0;

        if z1 == 0 goto label1;

        r2 = (java.util.Collection) r1;

     label3:
        $z4 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: boolean containsAll(java.util.Collection)>(r2);

        if $z4 == 0 goto label6;

        z3 = interfaceinvoke r2.<java.util.Collection: boolean containsAll(java.util.Collection)>(r0);

     label4:
        if z3 == 0 goto label6;

     label5:
        return z0;

     label6:
        z0 = 0;

        goto label5;

     label7:
        $r5 := @caughtexception;

        return 0;

     label8:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.ClassCastException from label3 to label4 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label8;
    }

    public java.lang.Object first()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object firstKey()>();

        return $r2;
    }

    public java.lang.Object floor(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object floorKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.util.NavigableSet headSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet headSet(java.lang.Object,boolean)>(r1, 0);

        return $r2;
    }

    public java.util.NavigableSet headSet(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r3, $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap headMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r4);

        return $r2;
    }

    public volatile java.util.SortedSet headSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet headSet(java.lang.Object)>(r1);

        return $r2;
    }

    public java.lang.Object higher(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object higherKey(java.lang.Object)>(r1);

        return $r3;
    }

    public boolean isEmpty()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        boolean $z0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Iterator iterator()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1, $r2, $r5;
        boolean $z0;
        java.util.concurrent.ConcurrentSkipListMap$SubMap $r3;
        java.util.Iterator $r4, $r7;
        java.util.concurrent.ConcurrentSkipListMap $r6;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $z0 = $r1 instanceof java.util.concurrent.ConcurrentSkipListMap;

        if $z0 == 0 goto label1;

        $r5 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r6 = (java.util.concurrent.ConcurrentSkipListMap) $r5;

        $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentSkipListMap: java.util.Iterator keyIterator()>();

        return $r7;

     label1:
        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = (java.util.concurrent.ConcurrentSkipListMap$SubMap) $r2;

        $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$SubMap: java.util.Iterator keyIterator()>();

        return $r4;
    }

    public java.lang.Object last()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        java.lang.Object $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lastKey()>();

        return $r2;
    }

    public java.lang.Object lower(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object lowerKey(java.lang.Object)>(r1);

        return $r3;
    }

    public java.lang.Object pollFirst()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.Map$Entry r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        r1 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry pollFirstEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public java.lang.Object pollLast()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.Map$Entry r1;
        java.util.concurrent.ConcurrentNavigableMap $r2;
        java.lang.Object $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        r1 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.util.Map$Entry pollLastEntry()>();

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        return $r3;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, $r3;
        java.util.concurrent.ConcurrentNavigableMap $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentNavigableMap: java.lang.Object remove(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public int size()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.concurrent.ConcurrentNavigableMap $r1;
        int $i0;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $i0 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentNavigableMap: int size()>();

        return $i0;
    }

    public java.util.NavigableSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet subSet(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, 1, r2, 0);

        return $r3;
    }

    public java.util.NavigableSet subSet(java.lang.Object, boolean, java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0, $r3;
        java.lang.Object r1, r2;
        boolean z0, z1;
        java.util.concurrent.ConcurrentNavigableMap $r4, $r5;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.Object;

        z1 := @parameter3: boolean;

        $r3 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r4 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap subMap(java.lang.Object,boolean,java.lang.Object,boolean)>(r1, z0, r2, z1);

        specialinvoke $r3.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r5);

        return $r3;
    }

    public volatile java.util.SortedSet subSet(java.lang.Object, java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1, r2;
        java.util.NavigableSet $r3;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet subSet(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r3;
    }

    public java.util.NavigableSet tailSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet tailSet(java.lang.Object,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.NavigableSet tailSet(java.lang.Object, boolean)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0, $r2;
        java.lang.Object r1;
        boolean z0;
        java.util.concurrent.ConcurrentNavigableMap $r3, $r4;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        $r2 = new java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r3 = r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.concurrent.ConcurrentNavigableMap m>;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentNavigableMap: java.util.concurrent.ConcurrentNavigableMap tailMap(java.lang.Object,boolean)>(r1, z0);

        specialinvoke $r2.<java.util.concurrent.ConcurrentSkipListMap$KeySet: void <init>(java.util.concurrent.ConcurrentNavigableMap)>($r4);

        return $r2;
    }

    public volatile java.util.SortedSet tailSet(java.lang.Object)
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object r1;
        java.util.NavigableSet $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<java.util.concurrent.ConcurrentSkipListMap$KeySet: java.util.NavigableSet tailSet(java.lang.Object)>(r1);

        return $r2;
    }

    public java.lang.Object[] toArray()
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.util.List $r1;
        java.lang.Object[] $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        $r1 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>();

        return $r2;
    }

    public java.lang.Object[] toArray(java.lang.Object[])
    {
        java.util.concurrent.ConcurrentSkipListMap$KeySet r0;
        java.lang.Object[] r1, $r3;
        java.util.List $r2;

        r0 := @this: java.util.concurrent.ConcurrentSkipListMap$KeySet;

        r1 := @parameter0: java.lang.Object[];

        $r2 = staticinvoke <java.util.concurrent.ConcurrentSkipListMap: java.util.List toList(java.util.Collection)>(r0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1);

        return $r3;
    }
}
