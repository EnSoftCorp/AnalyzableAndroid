abstract class com.android.server.pm.PackageManagerService$InstallArgs extends java.lang.Object
{
    final int flags;
    final java.lang.String installerPackageName;
    final android.content.pm.ManifestDigest manifestDigest;
    final android.content.pm.IPackageInstallObserver observer;
    final android.net.Uri packageURI;
    final android.os.UserHandle user;

    void <init>(android.net.Uri, android.content.pm.IPackageInstallObserver, int, java.lang.String, android.content.pm.ManifestDigest, android.os.UserHandle)
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        android.net.Uri r1;
        android.content.pm.IPackageInstallObserver r2;
        int i0;
        java.lang.String r3;
        android.content.pm.ManifestDigest r4;
        android.os.UserHandle r5;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        r1 := @parameter0: android.net.Uri;

        r2 := @parameter1: android.content.pm.IPackageInstallObserver;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.content.pm.ManifestDigest;

        r5 := @parameter5: android.os.UserHandle;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.net.Uri packageURI> = r1;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: int flags> = i0;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.IPackageInstallObserver observer> = r2;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: java.lang.String installerPackageName> = r3;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.content.pm.ManifestDigest manifestDigest> = r4;

        r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user> = r5;

        return;
    }

    abstract boolean checkFreeStorage(com.android.internal.app.IMediaContainerService) throws android.os.RemoteException;

    abstract void cleanUpResourcesLI();

    abstract int copyApk(com.android.internal.app.IMediaContainerService, boolean) throws android.os.RemoteException;

    abstract void createCopyFile();

    int doPostCopy(int)
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        int i0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        i0 := @parameter0: int;

        return 1;
    }

    abstract boolean doPostDeleteLI(boolean);

    abstract int doPostInstall(int, int);

    int doPreCopy()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        return 1;
    }

    abstract int doPreInstall(int);

    abstract boolean doRename(int, java.lang.String, java.lang.String);

    abstract java.lang.String getCodePath();

    abstract java.lang.String getNativeLibraryPath();

    abstract java.lang.String getResourcePath();

    android.os.UserHandle getUser()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        android.os.UserHandle $r1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $r1 = r0.<com.android.server.pm.PackageManagerService$InstallArgs: android.os.UserHandle user>;

        return $r1;
    }

    protected boolean isFwdLocked()
    {
        com.android.server.pm.PackageManagerService$InstallArgs r0;
        int $i0, $i1;

        r0 := @this: com.android.server.pm.PackageManagerService$InstallArgs;

        $i0 = r0.<com.android.server.pm.PackageManagerService$InstallArgs: int flags>;

        $i1 = 1 & $i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
