public class org.apache.http.protocol.RequestContent extends java.lang.Object implements org.apache.http.HttpRequestInterceptor
{

    public void <init>()
    {
        org.apache.http.protocol.RequestContent r0;

        r0 := @this: org.apache.http.protocol.RequestContent;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.RequestContent r0;
        org.apache.http.HttpRequest r1;
        org.apache.http.protocol.HttpContext r2;
        org.apache.http.ProtocolVersion r3;
        org.apache.http.HttpEntity r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.http.RequestLine $r5;
        org.apache.http.HttpEntityEnclosingRequest $r6;
        org.apache.http.HttpVersion $r7;
        org.apache.http.Header $r8, $r9, $r10, $r12;
        org.apache.http.ProtocolException $r11, $r17, $r19;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.lang.String $r15, $r18;
        byte $b0;
        long $l1, $l2;
        java.lang.IllegalArgumentException $r20;

        r0 := @this: org.apache.http.protocol.RequestContent;

        r1 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if r1 != null goto label01;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r20;

     label01:
        $z0 = r1 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label04;

        $z1 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Transfer-Encoding");

        if $z1 == 0 goto label02;

        $r19 = new org.apache.http.ProtocolException;

        specialinvoke $r19.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Transfer-encoding header already present");

        throw $r19;

     label02:
        $z2 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Length");

        if $z2 == 0 goto label03;

        $r17 = new org.apache.http.ProtocolException;

        specialinvoke $r17.<org.apache.http.ProtocolException: void <init>(java.lang.String)>("Content-Length header already present");

        throw $r17;

     label03:
        $r5 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        r3 = interfaceinvoke $r5.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r6 = (org.apache.http.HttpEntityEnclosingRequest) r1;

        r4 = interfaceinvoke $r6.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        if r4 != null goto label05;

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Content-Length", "0");

     label04:
        return;

     label05:
        $z3 = interfaceinvoke r4.<org.apache.http.HttpEntity: boolean isChunked()>();

        if $z3 != 0 goto label06;

        $l1 = interfaceinvoke r4.<org.apache.http.HttpEntity: long getContentLength()>();

        $b0 = $l1 cmp 0L;

        if $b0 >= 0 goto label10;

     label06:
        $r7 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z4 = virtualinvoke r3.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r7);

        if $z4 == 0 goto label07;

        $r11 = new org.apache.http.ProtocolException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunked transfer encoding not allowed for ");

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label07:
        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked");

     label08:
        $r8 = interfaceinvoke r4.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        if $r8 == null goto label09;

        $z6 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Type");

        if $z6 != 0 goto label09;

        $r12 = interfaceinvoke r4.<org.apache.http.HttpEntity: org.apache.http.Header getContentType()>();

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>($r12);

     label09:
        $r9 = interfaceinvoke r4.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        if $r9 == null goto label04;

        $z5 = interfaceinvoke r1.<org.apache.http.HttpRequest: boolean containsHeader(java.lang.String)>("Content-Encoding");

        if $z5 != 0 goto label04;

        $r10 = interfaceinvoke r4.<org.apache.http.HttpEntity: org.apache.http.Header getContentEncoding()>();

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>($r10);

        return;

     label10:
        $l2 = interfaceinvoke r4.<org.apache.http.HttpEntity: long getContentLength()>();

        $r18 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        interfaceinvoke r1.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Content-Length", $r18);

        goto label08;
    }
}
