public class android.media.MediaRouter$UserRouteInfo extends android.media.MediaRouter$RouteInfo
{
    android.media.RemoteControlClient mRcc;

    void <init>(android.media.MediaRouter$RouteCategory)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.MediaRouter$RouteCategory r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.MediaRouter$RouteCategory;

        specialinvoke r0.<android.media.MediaRouter$RouteInfo: void <init>(android.media.MediaRouter$RouteCategory)>(r1);

        r0.<android.media.MediaRouter$UserRouteInfo: int mSupportedTypes> = 8388608;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType> = 1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling> = 0;

        return;
    }

    private void setPlaybackInfoOnRcc(int, int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, i1;
        android.media.RemoteControlClient $r1, $r2;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        virtualinvoke $r2.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(i0, i1);

     label1:
        return;
    }

    private void updatePlaybackInfoOnRcc()
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.os.RemoteException r1, $r13;
        android.media.RemoteControlClient $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.media.MediaRouter$Static $r9;
        android.media.IAudioService $r10;
        android.media.IRemoteVolumeObserver$Stub $r12;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        if $r2 == null goto label2;

        $r3 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i0 = virtualinvoke $r3.<android.media.RemoteControlClient: int getRcseId()>();

        if $i0 == -1 goto label2;

        $r4 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax>;

        virtualinvoke $r4.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(3, $i1);

        $r5 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i2 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolume>;

        virtualinvoke $r5.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(2, $i2);

        $r6 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i3 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        virtualinvoke $r6.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(4, $i3);

        $r7 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i4 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream>;

        virtualinvoke $r7.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(5, $i4);

        $r8 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i5 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType>;

        virtualinvoke $r8.<android.media.RemoteControlClient: void setPlaybackInformation(int,int)>(1, $i5);

     label1:
        $r9 = <android.media.MediaRouter: android.media.MediaRouter$Static sStatic>;

        $r10 = $r9.<android.media.MediaRouter$Static: android.media.IAudioService mAudioService>;

        $r11 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        $i6 = virtualinvoke $r11.<android.media.RemoteControlClient: int getRcseId()>();

        $r12 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.IRemoteVolumeObserver$Stub mRemoteVolObserver>;

        interfaceinvoke $r10.<android.media.IAudioService: void registerRemoteVolumeObserverForRcc(int,android.media.IRemoteVolumeObserver)>($i6, $r12);

     label2:
        return;

     label3:
        $r13 := @caughtexception;

        r1 = $r13;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaRouter", "Error registering remote volume observer", r1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.media.RemoteControlClient getRemoteControlClient()
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.RemoteControlClient $r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc>;

        return $r1;
    }

    public void requestSetVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;
        android.media.MediaRouter$VolumeCallbackInfo $r1, $r2;
        android.media.MediaRouter$VolumeCallback $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 != 1 goto label1;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        if $r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaRouter", "Cannot requestSetVolume on user route - no volume callback set");

     label1:
        return;

     label2:
        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        $r3 = $r2.<android.media.MediaRouter$VolumeCallbackInfo: android.media.MediaRouter$VolumeCallback vcb>;

        virtualinvoke $r3.<android.media.MediaRouter$VolumeCallback: void onVolumeSetRequest(android.media.MediaRouter$RouteInfo,int)>(r0, i0);

        return;
    }

    public void requestUpdateVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;
        android.media.MediaRouter$VolumeCallbackInfo $r1, $r2;
        android.media.MediaRouter$VolumeCallback $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 != 1 goto label1;

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        if $r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("MediaRouter", "Cannot requestChangeVolume on user route - no volumec callback set");

     label1:
        return;

     label2:
        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb>;

        $r3 = $r2.<android.media.MediaRouter$VolumeCallbackInfo: android.media.MediaRouter$VolumeCallback vcb>;

        virtualinvoke $r3.<android.media.MediaRouter$VolumeCallback: void onVolumeUpdateRequest(android.media.MediaRouter$RouteInfo,int)>(r0, i0);

        return;
    }

    public void setDescription(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mDescription> = r1;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setIconDrawable(android.graphics.drawable.Drawable)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r0.<android.media.MediaRouter$UserRouteInfo: android.graphics.drawable.Drawable mIcon> = r1;

        return;
    }

    public void setIconResource(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0;
        android.media.MediaRouter$Static $r1;
        android.content.res.Resources $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $r1 = <android.media.MediaRouter: android.media.MediaRouter$Static sStatic>;

        $r2 = $r1.<android.media.MediaRouter$Static: android.content.res.Resources mResources>;

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setIconDrawable(android.graphics.drawable.Drawable)>($r3);

        return;
    }

    public void setName(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        r0.<android.media.MediaRouter$UserRouteInfo: int mNameResId> = i0;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mName> = null;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setName(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        r0.<android.media.MediaRouter$UserRouteInfo: java.lang.CharSequence mName> = r1;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void routeUpdated()>();

        return;
    }

    public void setPlaybackStream(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackStream> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setPlaybackInfoOnRcc(int,int)>(5, i0);

     label1:
        return;
    }

    public void setPlaybackType(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mPlaybackType> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setPlaybackInfoOnRcc(int,int)>(1, i0);

     label1:
        return;
    }

    public void setRemoteControlClient(android.media.RemoteControlClient)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.RemoteControlClient r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.RemoteControlClient;

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.RemoteControlClient mRcc> = r1;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void updatePlaybackInfoOnRcc()>();

        return;
    }

    public void setStatus(java.lang.CharSequence)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        java.lang.CharSequence r1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setStatusInt(java.lang.CharSequence)>(r1);

        return;
    }

    public void setVolume(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, i1, $i2, $i3, $i4;
        android.media.MediaRouter$RouteGroup $r1, $r2;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<android.media.MediaRouter$UserRouteInfo: int getVolumeMax()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i2);

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i3);

        $i4 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolume>;

        if $i4 == i1 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolume> = i1;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setPlaybackInfoOnRcc(int,int)>(2, i1);

        staticinvoke <android.media.MediaRouter: void dispatchRouteVolumeChanged(android.media.MediaRouter$RouteInfo)>(r0);

        $r1 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$RouteGroup mGroup>;

        if $r1 == null goto label1;

        $r2 = r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$RouteGroup mGroup>;

        virtualinvoke $r2.<android.media.MediaRouter$RouteGroup: void memberVolumeChanged(android.media.MediaRouter$RouteInfo)>(r0);

     label1:
        return;
    }

    public void setVolumeCallback(android.media.MediaRouter$VolumeCallback)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        android.media.MediaRouter$VolumeCallback r1;
        android.media.MediaRouter$VolumeCallbackInfo $r2;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        r1 := @parameter0: android.media.MediaRouter$VolumeCallback;

        $r2 = new android.media.MediaRouter$VolumeCallbackInfo;

        specialinvoke $r2.<android.media.MediaRouter$VolumeCallbackInfo: void <init>(android.media.MediaRouter$VolumeCallback,android.media.MediaRouter$RouteInfo)>(r1, r0);

        r0.<android.media.MediaRouter$UserRouteInfo: android.media.MediaRouter$VolumeCallbackInfo mVcb> = $r2;

        return;
    }

    public void setVolumeHandling(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeHandling> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setPlaybackInfoOnRcc(int,int)>(4, i0);

     label1:
        return;
    }

    public void setVolumeMax(int)
    {
        android.media.MediaRouter$UserRouteInfo r0;
        int i0, $i1;

        r0 := @this: android.media.MediaRouter$UserRouteInfo;

        i0 := @parameter0: int;

        $i1 = r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax>;

        if $i1 == i0 goto label1;

        r0.<android.media.MediaRouter$UserRouteInfo: int mVolumeMax> = i0;

        specialinvoke r0.<android.media.MediaRouter$UserRouteInfo: void setPlaybackInfoOnRcc(int,int)>(3, i0);

     label1:
        return;
    }
}
