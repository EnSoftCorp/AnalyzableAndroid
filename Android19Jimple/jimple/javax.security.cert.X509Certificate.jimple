public abstract class javax.security.cert.X509Certificate extends javax.security.cert.Certificate
{
    private static java.lang.reflect.Constructor constructor;

    static void <clinit>()
    {
        java.lang.String $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Throwable $r5;

     label1:
        $r1 = staticinvoke <java.security.Security: java.lang.String getProperty(java.lang.String)>("cert.provider.x509v1");

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "java/io/InputStream";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        <javax.security.cert.X509Certificate: java.lang.reflect.Constructor constructor> = $r4;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void <init>()
    {
        javax.security.cert.X509Certificate r0;

        r0 := @this: javax.security.cert.X509Certificate;

        specialinvoke r0.<javax.security.cert.Certificate: void <init>()>();

        return;
    }

    public static final javax.security.cert.X509Certificate getInstance(java.io.InputStream) throws javax.security.cert.CertificateException
    {
        java.io.InputStream r0;
        java.security.cert.CertificateException r1, $r17;
        java.security.cert.X509Certificate r2;
        java.lang.Throwable r3, $r13;
        javax.security.cert.X509Certificate r4;
        java.lang.reflect.Constructor $r5, $r10;
        java.security.cert.CertificateFactory $r6;
        java.security.cert.Certificate $r7;
        javax.security.cert.X509Certificate$1 $r8;
        java.lang.Object[] $r9;
        java.lang.Object $r11;
        javax.security.cert.CertificateException $r12, $r14, $r16;
        java.lang.String $r15, $r18;

        r0 := @parameter0: java.io.InputStream;

        if r0 != null goto label1;

        $r12 = new javax.security.cert.CertificateException;

        specialinvoke $r12.<javax.security.cert.CertificateException: void <init>(java.lang.String)>("inStream == null");

        throw $r12;

     label1:
        $r5 = <javax.security.cert.X509Certificate: java.lang.reflect.Constructor constructor>;

        if $r5 == null goto label5;

     label2:
        $r10 = <javax.security.cert.X509Certificate: java.lang.reflect.Constructor constructor>;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = r0;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9);

        r4 = (javax.security.cert.X509Certificate) $r11;

     label3:
        return r4;

     label4:
        $r13 := @caughtexception;

        r3 = $r13;

        $r14 = new javax.security.cert.CertificateException;

        $r15 = virtualinvoke r3.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r14.<javax.security.cert.CertificateException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label5:
        $r6 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)>("X.509");

        $r7 = virtualinvoke $r6.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>(r0);

        r2 = (java.security.cert.X509Certificate) $r7;

     label6:
        $r8 = new javax.security.cert.X509Certificate$1;

        specialinvoke $r8.<javax.security.cert.X509Certificate$1: void <init>(java.security.cert.X509Certificate)>(r2);

        return $r8;

     label7:
        $r17 := @caughtexception;

        r1 = $r17;

        $r16 = new javax.security.cert.CertificateException;

        $r18 = virtualinvoke r1.<java.security.cert.CertificateException: java.lang.String getMessage()>();

        specialinvoke $r16.<javax.security.cert.CertificateException: void <init>(java.lang.String)>($r18);

        throw $r16;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.security.cert.CertificateException from label5 to label6 with label7;
    }

    public static final javax.security.cert.X509Certificate getInstance(byte[]) throws javax.security.cert.CertificateException
    {
        byte[] r0;
        java.io.ByteArrayInputStream $r1;
        javax.security.cert.X509Certificate $r2;
        javax.security.cert.CertificateException $r3;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        $r3 = new javax.security.cert.CertificateException;

        specialinvoke $r3.<javax.security.cert.CertificateException: void <init>(java.lang.String)>("certData == null");

        throw $r3;

     label1:
        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r0);

        $r2 = staticinvoke <javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(java.io.InputStream)>($r1);

        return $r2;
    }

    public abstract void checkValidity() throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException;

    public abstract void checkValidity(java.util.Date) throws javax.security.cert.CertificateExpiredException, javax.security.cert.CertificateNotYetValidException;

    public abstract java.security.Principal getIssuerDN();

    public abstract java.util.Date getNotAfter();

    public abstract java.util.Date getNotBefore();

    public abstract java.math.BigInteger getSerialNumber();

    public abstract java.lang.String getSigAlgName();

    public abstract java.lang.String getSigAlgOID();

    public abstract byte[] getSigAlgParams();

    public abstract java.security.Principal getSubjectDN();

    public abstract int getVersion();
}
