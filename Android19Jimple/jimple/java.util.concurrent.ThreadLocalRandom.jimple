public class java.util.concurrent.ThreadLocalRandom extends java.util.Random
{
    private static final long addend;
    private static final java.lang.ThreadLocal localRandom;
    private static final long mask;
    private static final long multiplier;
    private static final long serialVersionUID;
    boolean initialized;
    private long pad0;
    private long pad1;
    private long pad2;
    private long pad3;
    private long pad4;
    private long pad5;
    private long pad6;
    private long pad7;
    private long rnd;

    static void <clinit>()
    {
        java.util.concurrent.ThreadLocalRandom$1 $r0;

        <java.util.concurrent.ThreadLocalRandom: long serialVersionUID> = -5851777807851030925L;

        <java.util.concurrent.ThreadLocalRandom: long multiplier> = 25214903917L;

        <java.util.concurrent.ThreadLocalRandom: long mask> = 281474976710655L;

        <java.util.concurrent.ThreadLocalRandom: long addend> = 11L;

        $r0 = new java.util.concurrent.ThreadLocalRandom$1;

        specialinvoke $r0.<java.util.concurrent.ThreadLocalRandom$1: void <init>()>();

        <java.util.concurrent.ThreadLocalRandom: java.lang.ThreadLocal localRandom> = $r0;

        return;
    }

    void <init>()
    {
        java.util.concurrent.ThreadLocalRandom r0;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        specialinvoke r0.<java.util.Random: void <init>()>();

        r0.<java.util.concurrent.ThreadLocalRandom: boolean initialized> = 1;

        return;
    }

    public static java.util.concurrent.ThreadLocalRandom current()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        java.util.concurrent.ThreadLocalRandom $r2;

        $r0 = <java.util.concurrent.ThreadLocalRandom: java.lang.ThreadLocal localRandom>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (java.util.concurrent.ThreadLocalRandom) $r1;

        return $r2;
    }

    protected int next(int)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        int i0, $i5, $i8;
        long $l1, $l2, $l3, $l4, $l6, $l7;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        i0 := @parameter0: int;

        $l1 = r0.<java.util.concurrent.ThreadLocalRandom: long rnd>;

        $l2 = 25214903917L * $l1;

        $l3 = 11L + $l2;

        $l4 = 281474976710655L & $l3;

        r0.<java.util.concurrent.ThreadLocalRandom: long rnd> = $l4;

        $l6 = r0.<java.util.concurrent.ThreadLocalRandom: long rnd>;

        $i5 = 48 - i0;

        $l7 = $l6 >>> $i5;

        $i8 = (int) $l7;

        return $i8;
    }

    public double nextDouble(double)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        double d0, $d1, $d2;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        d0 := @parameter0: double;

        $b0 = d0 cmpg 0.0;

        if $b0 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n must be positive");

        throw $r1;

     label1:
        $d1 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: double nextDouble()>();

        $d2 = d0 * $d1;

        return $d2;
    }

    public double nextDouble(double, double)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        double d0, d1, $d2, $d3, $d4, $d5;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpl d1;

        if $b0 < 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $d2 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: double nextDouble()>();

        $d3 = d1 - d0;

        $d4 = $d2 * $d3;

        $d5 = d0 + $d4;

        return $d5;
    }

    public int nextInt(int, int)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $i2 = i1 - i0;

        $i3 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>($i2);

        $i4 = i0 + $i3;

        return $i4;
    }

    public long nextLong(long)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        long l0, l1, l3, l4, $l9, $l10, $l12;
        int i2, $i7, $i8, $i11, $i13;
        byte $b5, $b6;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        l0 := @parameter0: long;

        $b5 = l0 cmp 0L;

        if $b5 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("n must be positive");

        throw $r1;

     label1:
        l1 = 0L;

     label2:
        $b6 = l0 cmp 2147483647L;

        if $b6 < 0 goto label6;

        i2 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: int next(int)>(2);

        l3 = l0 >>> 1;

        $i11 = i2 & 2;

        if $i11 != 0 goto label5;

        l4 = l3;

     label3:
        $i13 = i2 & 1;

        if $i13 != 0 goto label4;

        $l12 = l0 - l4;

        l1 = l1 + $l12;

     label4:
        l0 = l4;

        goto label2;

     label5:
        l4 = l0 - l3;

        goto label3;

     label6:
        $i7 = (int) l0;

        $i8 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: int nextInt(int)>($i7);

        $l9 = (long) $i8;

        $l10 = l1 + $l9;

        return $l10;
    }

    public long nextLong(long, long)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        long l0, l1, $l3, $l4, $l5;
        byte $b2;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        if $b2 < 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        $l3 = l1 - l0;

        $l4 = virtualinvoke r0.<java.util.concurrent.ThreadLocalRandom: long nextLong(long)>($l3);

        $l5 = l0 + $l4;

        return $l5;
    }

    public void setSeed(long)
    {
        java.util.concurrent.ThreadLocalRandom r0;
        long l0, $l1, $l2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: java.util.concurrent.ThreadLocalRandom;

        l0 := @parameter0: long;

        $z0 = r0.<java.util.concurrent.ThreadLocalRandom: boolean initialized>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;

     label1:
        $l1 = 25214903917L ^ l0;

        $l2 = 281474976710655L & $l1;

        r0.<java.util.concurrent.ThreadLocalRandom: long rnd> = $l2;

        return;
    }
}
