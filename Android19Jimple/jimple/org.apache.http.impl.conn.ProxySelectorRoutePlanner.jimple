public class org.apache.http.impl.conn.ProxySelectorRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.HttpRoutePlanner
{
    protected java.net.ProxySelector proxySelector;
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.conn.scheme.SchemeRegistry r1;
        java.net.ProxySelector r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        r2 := @parameter1: java.net.ProxySelector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SchemeRegistry must not be null.");

        throw $r3;

     label1:
        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = r1;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r2;

        return;
    }

    protected java.net.Proxy chooseProxy(java.util.List, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.util.List r1;
        org.apache.http.HttpHost r2;
        org.apache.http.HttpRequest r3;
        org.apache.http.protocol.HttpContext r4;
        java.net.Proxy r5, r6;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r7;
        boolean $z0;
        java.lang.Object $r8;
        int[] $r9;
        java.net.Proxy$Type $r10;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: org.apache.http.HttpHost;

        r3 := @parameter2: org.apache.http.HttpRequest;

        r4 := @parameter3: org.apache.http.protocol.HttpContext;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy list must not be empty.");

        throw $r7;

     label2:
        r5 = null;

        i0 = 0;

     label3:
        if r5 != null goto label6;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 >= $i1 goto label6;

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (java.net.Proxy) $r8;

        $r9 = <org.apache.http.impl.conn.ProxySelectorRoutePlanner$1: int[] $SwitchMap$java$net$Proxy$Type>;

        $r10 = virtualinvoke r6.<java.net.Proxy: java.net.Proxy$Type type()>();

        $i2 = virtualinvoke $r10.<java.net.Proxy$Type: int ordinal()>();

        $i3 = $r9[$i2];

        tableswitch($i3)
        {
            case 1: goto label5;
            case 2: goto label5;
            default: goto label4;
        };

     label4:
        i0 = i0 + 1;

        goto label3;

     label5:
        r5 = r6;

        goto label4;

     label6:
        if r5 != null goto label7;

        r5 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

     label7:
        return r5;
    }

    protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.HttpHost r1, $r17;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext r3;
        java.net.ProxySelector r4;
        java.net.URI r5, $r9;
        java.net.Proxy r6;
        java.net.InetSocketAddress r7;
        java.net.URISyntaxException r8, $r25;
        java.lang.String $r10, $r16, $r23, $r29;
        java.util.List $r11;
        java.net.Proxy$Type $r12, $r13;
        java.net.SocketAddress $r14, $r15, $r22;
        boolean $z0;
        org.apache.http.HttpException $r18, $r24;
        int $i0;
        java.lang.StringBuilder $r19, $r20, $r21, $r26, $r27, $r28;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        r4 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        if r4 != null goto label1;

        r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

     label1:
        if r4 != null goto label3;

     label2:
        return null;

     label3:
        $r9 = new java.net.URI;

        $r10 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String toURI()>();

        specialinvoke $r9.<java.net.URI: void <init>(java.lang.String)>($r10);

        r5 = $r9;

     label4:
        $r11 = virtualinvoke r4.<java.net.ProxySelector: java.util.List select(java.net.URI)>(r5);

        r6 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r11, r1, r2, r3);

        $r12 = virtualinvoke r6.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r13 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r12 != $r13 goto label2;

        $r14 = virtualinvoke r6.<java.net.Proxy: java.net.SocketAddress address()>();

        $z0 = $r14 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label6;

        $r18 = new org.apache.http.HttpException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to handle non-Inet proxy address: ");

        $r22 = virtualinvoke r6.<java.net.Proxy: java.net.SocketAddress address()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.HttpException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label5:
        $r25 := @caughtexception;

        r8 = $r25;

        $r24 = new org.apache.http.HttpException;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert host to URI: ");

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>($r29, r8);

        throw $r24;

     label6:
        $r15 = virtualinvoke r6.<java.net.Proxy: java.net.SocketAddress address()>();

        r7 = (java.net.InetSocketAddress) $r15;

        $r17 = new org.apache.http.HttpHost;

        $r16 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>(r7);

        $i0 = virtualinvoke r7.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke $r17.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>($r16, $i0);

        return $r17;

        catch java.net.URISyntaxException from label3 to label4 with label5;
    }

    public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        org.apache.http.HttpHost r1, r6, $r12;
        org.apache.http.HttpRequest r2;
        org.apache.http.protocol.HttpContext r3;
        org.apache.http.conn.routing.HttpRoute r4, r7, $r16, $r17;
        java.net.InetAddress r5;
        boolean z0, $z1;
        org.apache.http.params.HttpParams $r8, $r9, $r10;
        java.lang.Object $r11;
        org.apache.http.conn.scheme.SchemeRegistry $r13;
        org.apache.http.conn.scheme.Scheme $r14;
        java.lang.String $r15;
        java.lang.IllegalStateException $r18, $r19;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: org.apache.http.HttpHost;

        r2 := @parameter1: org.apache.http.HttpRequest;

        r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if r2 != null goto label1;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r18;

     label1:
        $r8 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        r4 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>($r8);

        if r4 == null goto label2;

        return r4;

     label2:
        if r1 != null goto label3;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r19;

     label3:
        $r9 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        r5 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>($r9);

        $r10 = interfaceinvoke r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r11 = interfaceinvoke $r10.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.route.default-proxy");

        r6 = (org.apache.http.HttpHost) $r11;

        if r6 != null goto label6;

        r6 = virtualinvoke r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, r3);

     label4:
        $r13 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r15 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r14 = virtualinvoke $r13.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r15);

        z0 = virtualinvoke $r14.<org.apache.http.conn.scheme.Scheme: boolean isLayered()>();

        if r6 != null goto label7;

        $r17 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r17.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>(r1, r5, z0);

        r7 = $r17;

     label5:
        return r7;

     label6:
        $r12 = <org.apache.http.conn.params.ConnRouteParams: org.apache.http.HttpHost NO_HOST>;

        $z1 = virtualinvoke $r12.<org.apache.http.HttpHost: boolean equals(java.lang.Object)>(r6);

        if $z1 == 0 goto label4;

        r6 = null;

        goto label4;

     label7:
        $r16 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r16.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>(r1, r5, r6, z0);

        r7 = $r16;

        goto label5;
    }

    protected java.lang.String getHost(java.net.InetSocketAddress)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.InetSocketAddress r1;
        boolean $z0;
        java.net.InetAddress $r2;
        java.lang.String $r3, $r4;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: java.net.InetSocketAddress;

        $z0 = virtualinvoke r1.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        return $r4;

     label1:
        $r2 = virtualinvoke r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r3 = virtualinvoke $r2.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r3;
    }

    public java.net.ProxySelector getProxySelector()
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.ProxySelector $r1;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 = r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        return $r1;
    }

    public void setProxySelector(java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner r0;
        java.net.ProxySelector r1;

        r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 := @parameter0: java.net.ProxySelector;

        r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = r1;

        return;
    }
}
