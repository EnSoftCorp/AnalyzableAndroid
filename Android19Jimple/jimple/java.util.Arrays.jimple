public class java.util.Arrays extends java.lang.Object
{

    private void <init>()
    {
        java.util.Arrays r0;

        r0 := @this: java.util.Arrays;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.util.List asList(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.util.Arrays$ArrayList $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.Arrays$ArrayList;

        specialinvoke $r1.<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>(r0);

        return $r1;
    }

    public static int binarySearch(byte[], byte)
    {
        byte[] r0;
        byte b0;
        int $i1, $i2;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(byte[],int,int,byte)>(r0, 0, $i1, b0);

        return $i2;
    }

    public static int binarySearch(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8;
        byte b2, b6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        b2 := @parameter3: byte;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i3 = i0;

        i4 = i1 - 1;

     label1:
        if i3 > i4 goto label3;

        $i8 = i3 + i4;

        i5 = $i8 >>> 1;

        b6 = r0[i5];

        if b6 >= b2 goto label2;

        i3 = i5 + 1;

        goto label1;

     label2:
        if b6 <= b2 goto label4;

        i4 = i5 - 1;

        goto label1;

     label3:
        i5 = i3 ^ -1;

     label4:
        return i5;
    }

    public static int binarySearch(char[], char)
    {
        char[] r0;
        char c0;
        int $i1, $i2;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(char[],int,int,char)>(r0, 0, $i1, c0);

        return $i2;
    }

    public static int binarySearch(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8;
        char c2, c6;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i3 = i0;

        i4 = i1 - 1;

     label1:
        if i3 > i4 goto label3;

        $i8 = i3 + i4;

        i5 = $i8 >>> 1;

        c6 = r0[i5];

        if c6 >= c2 goto label2;

        i3 = i5 + 1;

        goto label1;

     label2:
        if c6 <= c2 goto label4;

        i4 = i5 - 1;

        goto label1;

     label3:
        i5 = i3 ^ -1;

     label4:
        return i5;
    }

    public static int binarySearch(double[], double)
    {
        double[] r0;
        double d0;
        int $i0, $i1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        $i0 = lengthof r0;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(double[],int,int,double)>(r0, 0, $i0, d0);

        return $i1;
    }

    public static int binarySearch(double[], int, int, double)
    {
        double[] r0;
        int i0, i1, i2, i3, i4, $i7, $i8, $i10;
        double d0, d1;
        long l5, l6;
        byte $b9, $b11, $b12, $b13, $b14, $b15;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i2 = i0;

        i3 = i1 - 1;

     label1:
        if i2 > i3 goto label7;

        $i10 = i2 + i3;

        i4 = $i10 >>> 1;

        d1 = r0[i4];

        $b9 = d1 cmpg d0;

        if $b9 >= 0 goto label2;

        i2 = i4 + 1;

        goto label1;

     label2:
        $b12 = d1 cmpl d0;

        if $b12 <= 0 goto label3;

        i3 = i4 - 1;

        goto label1;

     label3:
        $b11 = d1 cmpl 0.0;

        if $b11 == 0 goto label5;

        $b15 = d1 cmpl d0;

        if $b15 != 0 goto label5;

     label4:
        return i4;

     label5:
        l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d1);

        l6 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b14 = l5 cmp l6;

        if $b14 >= 0 goto label6;

        i2 = i4 + 1;

        goto label1;

     label6:
        $b13 = l5 cmp l6;

        if $b13 <= 0 goto label4;

        i3 = i4 - 1;

        goto label1;

     label7:
        $i8 = i2 ^ -1;

        return $i8;
    }

    public static int binarySearch(float[], float)
    {
        float[] r0;
        float f0;
        int $i0, $i1;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        $i0 = lengthof r0;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(float[],int,int,float)>(r0, 0, $i0, f0);

        return $i1;
    }

    public static int binarySearch(float[], int, int, float)
    {
        float[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9;
        float f0, f1;
        byte $b10, $b11, $b12, $b13;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i2 = i0;

        i3 = i1 - 1;

     label1:
        if i2 > i3 goto label7;

        $i9 = i2 + i3;

        i4 = $i9 >>> 1;

        f1 = r0[i4];

        $b10 = f1 cmpg f0;

        if $b10 >= 0 goto label2;

        i2 = i4 + 1;

        goto label1;

     label2:
        $b11 = f1 cmpl f0;

        if $b11 <= 0 goto label3;

        i3 = i4 - 1;

        goto label1;

     label3:
        $b12 = f1 cmpl 0.0F;

        if $b12 == 0 goto label5;

        $b13 = f1 cmpl f0;

        if $b13 != 0 goto label5;

     label4:
        return i4;

     label5:
        i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f1);

        i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        if i5 >= i6 goto label6;

        i2 = i4 + 1;

        goto label1;

     label6:
        if i5 <= i6 goto label4;

        i3 = i4 - 1;

        goto label1;

     label7:
        $i8 = i2 ^ -1;

        return $i8;
    }

    public static int binarySearch(int[], int)
    {
        int[] r0;
        int i0, $i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(int[],int,int,int)>(r0, 0, $i1, i0);

        return $i2;
    }

    public static int binarySearch(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i3 = i0;

        i4 = i1 - 1;

     label1:
        if i3 > i4 goto label3;

        $i8 = i3 + i4;

        i5 = $i8 >>> 1;

        i6 = r0[i5];

        if i6 >= i2 goto label2;

        i3 = i5 + 1;

        goto label1;

     label2:
        if i6 <= i2 goto label4;

        i4 = i5 - 1;

        goto label1;

     label3:
        i5 = i3 ^ -1;

     label4:
        return i5;
    }

    public static int binarySearch(long[], int, int, long)
    {
        long[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8;
        long l2, l6;
        byte $b9, $b10;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i3 = i0;

        i4 = i1 - 1;

     label1:
        if i3 > i4 goto label3;

        $i8 = i3 + i4;

        i5 = $i8 >>> 1;

        l6 = r0[i5];

        $b9 = l6 cmp l2;

        if $b9 >= 0 goto label2;

        i3 = i5 + 1;

        goto label1;

     label2:
        $b10 = l6 cmp l2;

        if $b10 <= 0 goto label4;

        i4 = i5 - 1;

        goto label1;

     label3:
        i5 = i3 ^ -1;

     label4:
        return i5;
    }

    public static int binarySearch(long[], long)
    {
        long[] r0;
        long l0;
        int $i1, $i2;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(long[],int,int,long)>(r0, 0, $i1, l0);

        return $i2;
    }

    public static int binarySearch(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7;
        java.lang.Object r1, $r2;
        java.lang.Comparable $r3;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i6 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i6);

        i2 = i0;

        i3 = i1 - 1;

     label1:
        if i2 > i3 goto label3;

        $i7 = i2 + i3;

        i4 = $i7 >>> 1;

        $r2 = r0[i4];

        $r3 = (java.lang.Comparable) $r2;

        i5 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>(r1);

        if i5 >= 0 goto label2;

        i2 = i4 + 1;

        goto label1;

     label2:
        if i5 <= 0 goto label4;

        i3 = i4 - 1;

        goto label1;

     label3:
        i4 = i2 ^ -1;

     label4:
        return i4;
    }

    public static int binarySearch(java.lang.Object[], int, int, java.lang.Object, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8;
        java.lang.Object r1, $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        r2 := @parameter4: java.util.Comparator;

        if r2 != null goto label2;

        i4 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>(r0, i0, i1, r1);

     label1:
        return i4;

     label2:
        $i6 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i6);

        i2 = i0;

        i3 = i1 - 1;

     label3:
        if i2 > i3 goto label5;

        $i8 = i2 + i3;

        i4 = $i8 >>> 1;

        $r3 = r0[i4];

        i5 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r1);

        if i5 >= 0 goto label4;

        i2 = i4 + 1;

        goto label3;

     label4:
        if i5 <= 0 goto label1;

        i3 = i4 - 1;

        goto label3;

     label5:
        $i7 = i2 ^ -1;

        return $i7;
    }

    public static int binarySearch(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        $i0 = lengthof r0;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object)>(r0, 0, $i0, r1);

        return $i1;
    }

    public static int binarySearch(java.lang.Object[], java.lang.Object, java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        java.util.Comparator r2;
        int $i0, $i1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Comparator;

        $i0 = lengthof r0;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>(r0, 0, $i0, r1, r2);

        return $i1;
    }

    public static int binarySearch(short[], int, int, short)
    {
        short[] r0;
        int i0, i1, i3, i4, i5, $i7, $i8;
        short s2, s6;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        s2 := @parameter3: short;

        $i7 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkBinarySearchBounds(int,int,int)>(i0, i1, $i7);

        i3 = i0;

        i4 = i1 - 1;

     label1:
        if i3 > i4 goto label3;

        $i8 = i3 + i4;

        i5 = $i8 >>> 1;

        s6 = r0[i5];

        if s6 >= s2 goto label2;

        i3 = i5 + 1;

        goto label1;

     label2:
        if s6 <= s2 goto label4;

        i4 = i5 - 1;

        goto label1;

     label3:
        i5 = i3 ^ -1;

     label4:
        return i5;
    }

    public static int binarySearch(short[], short)
    {
        short[] r0;
        short s0;
        int $i1, $i2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.util.Arrays: int binarySearch(short[],int,int,short)>(r0, 0, $i1, s0);

        return $i2;
    }

    private static void checkBinarySearchBounds(int, int, int)
    {
        int i0, i1, i2;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label1:
        if i0 < 0 goto label2;

        if i1 <= i2 goto label3;

     label2:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label3:
        return;
    }

    public static void checkOffsetAndCount(int, int, int)
    {
        int i0, i1, i2, $i3, $i4;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i1 | i2;

        if $i3 < 0 goto label1;

        if i1 > i0 goto label1;

        $i4 = i0 - i1;

        if $i4 >= i2 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int,int,int)>(i0, i1, i2);

        throw $r0;

     label2:
        return;
    }

    public static void checkStartAndEnd(int, int, int)
    {
        int i0, i1, i2;
        java.lang.ArrayIndexOutOfBoundsException $r0;
        java.lang.StringBuilder $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r10, $r11, $r12, $r13, $r14;
        java.lang.String $r8, $r15;
        java.lang.IllegalArgumentException $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i1 < 0 goto label1;

        if i2 <= i0 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start < 0 || end > len. start=");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", end=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", len=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r0;

     label2:
        if i1 <= i2 goto label3;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start > end: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r13 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label3:
        return;
    }

    public static byte[] copyOf(byte[], int)
    {
        byte[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static char[] copyOf(char[], int)
    {
        char[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static double[] copyOf(double[], int)
    {
        double[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: double[] copyOfRange(double[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static float[] copyOf(float[], int)
    {
        float[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: float[] copyOfRange(float[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static int[] copyOf(int[], int)
    {
        int[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static long[] copyOf(long[], int)
    {
        long[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: long[] copyOfRange(long[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static java.lang.Object[] copyOf(java.lang.Object[], int)
    {
        java.lang.Object[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;
        java.lang.NullPointerException $r4;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("original == null");

        throw $r4;

     label1:
        if i0 >= 0 goto label2;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r1 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static java.lang.Object[] copyOf(java.lang.Object[], int, java.lang.Class)
    {
        java.lang.Object[] r0, $r2;
        int i0;
        java.lang.Class r1;
        java.lang.NegativeArraySizeException $r3;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Class;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.NegativeArraySizeException;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r3.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label1:
        $r2 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOfRange(java.lang.Object[],int,int,java.lang.Class)>(r0, 0, i0, r1);

        return $r2;
    }

    public static short[] copyOf(short[], int)
    {
        short[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: short[] copyOfRange(short[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static boolean[] copyOf(boolean[], int)
    {
        boolean[] r0, $r1;
        int i0;
        java.lang.NegativeArraySizeException $r2;
        java.lang.String $r3;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.NegativeArraySizeException;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        specialinvoke $r2.<java.lang.NegativeArraySizeException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = staticinvoke <java.util.Arrays: boolean[] copyOfRange(boolean[],int,int)>(r0, 0, i0);

        return $r1;
    }

    public static byte[] copyOfRange(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (byte)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static char[] copyOfRange(char[], int, int)
    {
        char[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (char)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static double[] copyOfRange(double[], int, int)
    {
        double[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (double)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static float[] copyOfRange(float[], int, int)
    {
        float[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (float)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static int[] copyOfRange(int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (int)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static long[] copyOfRange(long[], int, int)
    {
        long[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (long)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0, r1, $r6;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r0;

        if i0 <= i1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, i3);

        $r6 = (java.lang.Object[]) $r5;

        r1 = (java.lang.Object[]) $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static java.lang.Object[] copyOfRange(java.lang.Object[], int, int, java.lang.Class)
    {
        java.lang.Object[] r0, r2, $r6;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.Class r1, $r4;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r7;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Class;

        if i0 <= i1 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        $r4 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, i3);

        $r6 = (java.lang.Object[]) $r5;

        r2 = (java.lang.Object[]) $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r2, 0, i4);

        return r2;
    }

    public static short[] copyOfRange(short[], int, int)
    {
        short[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (short)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static boolean[] copyOfRange(boolean[], int, int)
    {
        boolean[] r0, r1;
        int i0, i1, i2, i3, i4, $i5;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label1:
        i2 = lengthof r0;

        if i0 < 0 goto label2;

        if i0 <= i2 goto label3;

     label2:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        i3 = i1 - i0;

        $i5 = i2 - i0;

        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i3, $i5);

        r1 = newarray (boolean)[i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, i4);

        return r1;
    }

    public static boolean deepEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $r3 = r0[i0];

        $r2 = r1[i0];

        $z0 = staticinvoke <java.util.Arrays: boolean deepEqualsElements(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    private static boolean deepEqualsElements(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        java.lang.Class r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        short[] $r13, $r14, $r15, $r16;
        double[] $r17, $r18, $r19, $r22;
        float[] $r20, $r21, $r24, $r25;
        long[] $r23, $r26, $r27, $r28;
        byte[] $r29, $r30, $r31, $r32;
        boolean[] $r33, $r34, $r35, $r38;
        char[] $r36, $r37, $r40, $r41;
        int[] $r39, $r42, $r43, $r44;
        java.lang.Object[] $r45, $r46, $r47, $r48;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label02;

        z0 = 1;

     label01:
        return z0;

     label02:
        z0 = 0;

        if r0 == null goto label01;

        z0 = 0;

        if r1 == null goto label01;

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

        z0 = 0;

        if r2 != r3 goto label01;

        if r2 != null goto label03;

        $z18 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z18;

     label03:
        $z1 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label04;

        $r45 = (java.lang.Object[]) r0;

        $r48 = (java.lang.Object[]) $r45;

        $r46 = (java.lang.Object[]) r1;

        $r47 = (java.lang.Object[]) $r46;

        $z17 = staticinvoke <java.util.Arrays: boolean deepEquals(java.lang.Object[],java.lang.Object[])>($r48, $r47);

        return $z17;

     label04:
        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $z2 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label05;

        $r39 = (int[]) r0;

        $r42 = (int[]) $r39;

        $r44 = (int[]) r1;

        $r43 = (int[]) $r44;

        $z16 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r42, $r43);

        return $z16;

     label05:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        $z3 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label06;

        $r37 = (char[]) r0;

        $r40 = (char[]) $r37;

        $r36 = (char[]) r1;

        $r41 = (char[]) $r36;

        $z15 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>($r40, $r41);

        return $z15;

     label06:
        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z4 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z4 == 0 goto label07;

        $r35 = (boolean[]) r0;

        $r38 = (boolean[]) $r35;

        $r34 = (boolean[]) r1;

        $r33 = (boolean[]) $r34;

        $z14 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r38, $r33);

        return $z14;

     label07:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        $z5 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z5 == 0 goto label08;

        $r31 = (byte[]) r0;

        $r30 = (byte[]) $r31;

        $r32 = (byte[]) r1;

        $r29 = (byte[]) $r32;

        $z13 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r30, $r29);

        return $z13;

     label08:
        $r10 = <java.lang.Long: java.lang.Class TYPE>;

        $z6 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z6 == 0 goto label09;

        $r23 = (long[]) r0;

        $r26 = (long[]) $r23;

        $r27 = (long[]) r1;

        $r28 = (long[]) $r27;

        $z12 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r26, $r28);

        return $z12;

     label09:
        $r11 = <java.lang.Float: java.lang.Class TYPE>;

        $z7 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z7 == 0 goto label10;

        $r20 = (float[]) r0;

        $r25 = (float[]) $r20;

        $r21 = (float[]) r1;

        $r24 = (float[]) $r21;

        $z11 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>($r25, $r24);

        return $z11;

     label10:
        $r12 = <java.lang.Double: java.lang.Class TYPE>;

        $z8 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r12);

        if $z8 == 0 goto label11;

        $r17 = (double[]) r0;

        $r22 = (double[]) $r17;

        $r19 = (double[]) r1;

        $r18 = (double[]) $r19;

        $z10 = staticinvoke <java.util.Arrays: boolean equals(double[],double[])>($r22, $r18);

        return $z10;

     label11:
        $r14 = (short[]) r0;

        $r15 = (short[]) $r14;

        $r13 = (short[]) r1;

        $r16 = (short[]) $r13;

        $z9 = staticinvoke <java.util.Arrays: boolean equals(short[],short[])>($r15, $r16);

        return $z9;
    }

    public static int deepHashCode(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $r1 = r0[i2];

        $i3 = staticinvoke <java.util.Arrays: int deepHashCodeElement(java.lang.Object)>($r1);

        $i4 = i0 * 31;

        i0 = $i3 + $i4;

        i2 = i2 + 1;

        goto label3;
    }

    private static int deepHashCodeElement(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        short[] $r10, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        double[] $r12, $r13;
        float[] $r14, $r15;
        long[] $r16, $r17;
        byte[] $r18, $r21;
        boolean[] $r19, $r20;
        char[] $r22, $r23;
        java.lang.Object[] $r24, $r27;
        int[] $r25, $r26;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        return 0;

     label01:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r1 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        if r1 != null goto label02;

        $i8 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        return $i8;

     label02:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label03;

        $r24 = (java.lang.Object[]) r0;

        $r27 = (java.lang.Object[]) $r24;

        $i9 = staticinvoke <java.util.Arrays: int deepHashCode(java.lang.Object[])>($r27);

        return $i9;

     label03:
        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label04;

        $r25 = (int[]) r0;

        $r26 = (int[]) $r25;

        $i7 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r26);

        return $i7;

     label04:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label05;

        $r23 = (char[]) r0;

        $r22 = (char[]) $r23;

        $i5 = staticinvoke <java.util.Arrays: int hashCode(char[])>($r22);

        return $i5;

     label05:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label06;

        $r19 = (boolean[]) r0;

        $r20 = (boolean[]) $r19;

        $i6 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r20);

        return $i6;

     label06:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        $z4 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z4 == 0 goto label07;

        $r18 = (byte[]) r0;

        $r21 = (byte[]) $r18;

        $i4 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r21);

        return $i4;

     label07:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        $z5 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z5 == 0 goto label08;

        $r17 = (long[]) r0;

        $r16 = (long[]) $r17;

        $i3 = staticinvoke <java.util.Arrays: int hashCode(long[])>($r16);

        return $i3;

     label08:
        $r8 = <java.lang.Float: java.lang.Class TYPE>;

        $z6 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z6 == 0 goto label09;

        $r14 = (float[]) r0;

        $r15 = (float[]) $r14;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(float[])>($r15);

        return $i2;

     label09:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        $z7 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z7 == 0 goto label10;

        $r13 = (double[]) r0;

        $r12 = (double[]) $r13;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(double[])>($r12);

        return $i1;

     label10:
        $r10 = (short[]) r0;

        $r11 = (short[]) $r10;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(short[])>($r11);

        return $i0;
    }

    public static java.lang.String deepToString(java.lang.Object[])
    {
        java.lang.Object[] r0, $r3;
        java.lang.StringBuilder r1, $r2;
        int $i0, $i1;
        java.lang.String $r4;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return "null";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i0 = lengthof r0;

        $i1 = 9 * $i0;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i1);

        r1 = $r2;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        staticinvoke <java.util.Arrays: void deepToStringImpl(java.lang.Object[],java.lang.Object[],java.lang.StringBuilder)>(r0, $r3, r1);

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private static void deepToStringImpl(java.lang.Object[], java.lang.Object[], java.lang.StringBuilder)
    {
        java.lang.Object[] r0, r1, r6, r7, $r12;
        java.lang.StringBuilder r2;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r3, $r10;
        java.lang.Class r4, r5, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        short[] $r22, $r25;
        java.lang.String $r23, $r26, $r30, $r34, $r38, $r45, $r49, $r57;
        java.lang.AssertionError $r24;
        long[] $r27, $r28;
        int[] $r31, $r32;
        float[] $r35, $r36;
        double[] $r39, $r40;
        byte[] $r43, $r44;
        char[] $r47, $r48;
        boolean[] $r55, $r56;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        r2 := @parameter2: java.lang.StringBuilder;

        if r0 != null goto label01;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        return;

     label01:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i0 = 0;

     label02:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label17;

        if i0 == 0 goto label03;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label03:
        r3 = r0[i0];

        if r3 != null goto label05;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label04:
        i0 = i0 + 1;

        goto label02;

     label05:
        r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label16;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Class getComponentType()>();

        $z2 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label14;

        $r14 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z3 == 0 goto label06;

        $r55 = (boolean[]) r3;

        $r56 = (boolean[]) $r55;

        $r57 = staticinvoke <java.util.Arrays: java.lang.String toString(boolean[])>($r56);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        goto label04;

     label06:
        $r15 = <java.lang.Byte: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r15.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z4 == 0 goto label07;

        $r43 = (byte[]) r3;

        $r44 = (byte[]) $r43;

        $r45 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>($r44);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        goto label04;

     label07:
        $r17 = <java.lang.Character: java.lang.Class TYPE>;

        $z6 = virtualinvoke $r17.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z6 == 0 goto label08;

        $r47 = (char[]) r3;

        $r48 = (char[]) $r47;

        $r49 = staticinvoke <java.util.Arrays: java.lang.String toString(char[])>($r48);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        goto label04;

     label08:
        $r16 = <java.lang.Double: java.lang.Class TYPE>;

        $z5 = virtualinvoke $r16.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z5 == 0 goto label09;

        $r40 = (double[]) r3;

        $r39 = (double[]) $r40;

        $r38 = staticinvoke <java.util.Arrays: java.lang.String toString(double[])>($r39);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        goto label04;

     label09:
        $r19 = <java.lang.Float: java.lang.Class TYPE>;

        $z8 = virtualinvoke $r19.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z8 == 0 goto label10;

        $r36 = (float[]) r3;

        $r35 = (float[]) $r36;

        $r34 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r35);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        goto label04;

     label10:
        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        $z7 = virtualinvoke $r18.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z7 == 0 goto label11;

        $r32 = (int[]) r3;

        $r31 = (int[]) $r32;

        $r30 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>($r31);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        goto label04;

     label11:
        $r21 = <java.lang.Long: java.lang.Class TYPE>;

        $z10 = virtualinvoke $r21.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z10 == 0 goto label12;

        $r28 = (long[]) r3;

        $r27 = (long[]) $r28;

        $r26 = staticinvoke <java.util.Arrays: java.lang.String toString(long[])>($r27);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        goto label04;

     label12:
        $r20 = <java.lang.Short: java.lang.Class TYPE>;

        $z9 = virtualinvoke $r20.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

        if $z9 == 0 goto label13;

        $r25 = (short[]) r3;

        $r22 = (short[]) $r25;

        $r23 = staticinvoke <java.util.Arrays: java.lang.String toString(short[])>($r22);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        goto label04;

     label13:
        $r24 = new java.lang.AssertionError;

        specialinvoke $r24.<java.lang.AssertionError: void <init>()>();

        throw $r24;

     label14:
        $z1 = staticinvoke <java.util.Arrays: boolean deepToStringImplContains(java.lang.Object[],java.lang.Object)>(r1, r3);

        if $z1 == 0 goto label15;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[...]");

        goto label04;

     label15:
        $r12 = (java.lang.Object[]) r3;

        r6 = (java.lang.Object[]) $r12;

        $i2 = lengthof r1;

        $i4 = 1 + $i2;

        r7 = newarray (java.lang.Object)[$i4];

        $i3 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r7, 0, $i3);

        $i5 = lengthof r1;

        r7[$i5] = r6;

        staticinvoke <java.util.Arrays: void deepToStringImpl(java.lang.Object[],java.lang.Object[],java.lang.StringBuilder)>(r6, r7, r2);

        goto label04;

     label16:
        $r10 = r0[i0];

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        goto label04;

     label17:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        return;
    }

    private static boolean deepToStringImplContains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1, $r2;
        int i0, i1, $i2;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        $i2 = lengthof r0;

        if $i2 != 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r0;

        i1 = 0;

     label3:
        if i1 >= i0 goto label1;

        $r2 = r0[i1];

        if $r2 != r1 goto label4;

        return 1;

     label4:
        i1 = i1 + 1;

        goto label3;
    }

    public static boolean equals(byte[], byte[])
    {
        byte[] r0, r1;
        int i0, $i1, $i2, $i3;
        byte $b4, $b5;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $b5 = r0[i0];

        $b4 = r1[i0];

        if $b5 == $b4 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(char[], char[])
    {
        char[] r0, r1;
        int i0, $i1, $i2, $i3;
        char $c4, $c5;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $c5 = r0[i0];

        $c4 = r1[i0];

        if $c5 == $c4 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(double[], double[])
    {
        double[] r0, r1;
        int i0, $i1, $i2, $i3;
        double $d0, $d1;
        long $l4, $l5;
        byte $b6;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $d0 = r0[i0];

        $l4 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $d1 = r1[i0];

        $l5 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        $b6 = $l4 cmp $l5;

        if $b6 == 0 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(float[], float[])
    {
        float[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $f0 = r0[i0];

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $f1 = r1[i0];

        $i5 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        if $i4 == $i5 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(int[], int[])
    {
        int[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $i5 = r0[i0];

        $i4 = r1[i0];

        if $i5 == $i4 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(long[], long[])
    {
        long[] r0, r1;
        int i0, $i1, $i2, $i3;
        long $l4, $l5;
        byte $b6;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $l5 = r0[i0];

        $l4 = r1[i0];

        $b6 = $l5 cmp $l4;

        if $b6 == 0 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2, r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        r2 = r0[i0];

        r3 = r1[i0];

        if r2 != null goto label7;

        if r3 != null goto label8;

     label6:
        i0 = i0 + 1;

        goto label5;

     label7:
        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3);

        if $z0 != 0 goto label6;

     label8:
        return 0;
    }

    public static boolean equals(short[], short[])
    {
        short[] r0, r1;
        int i0, $i1, $i2, $i3;
        short $s4, $s5;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $s5 = r0[i0];

        $s4 = r1[i0];

        if $s5 == $s4 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static boolean equals(boolean[], boolean[])
    {
        boolean[] r0, r1;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        if r0 != r1 goto label2;

     label1:
        return 1;

     label2:
        if r0 == null goto label3;

        if r1 == null goto label3;

        $i2 = lengthof r0;

        $i1 = lengthof r1;

        if $i2 == $i1 goto label4;

     label3:
        return 0;

     label4:
        i0 = 0;

     label5:
        $i3 = lengthof r0;

        if i0 >= $i3 goto label1;

        $z1 = r0[i0];

        $z0 = r1[i0];

        if $z1 == $z0 goto label6;

        return 0;

     label6:
        i0 = i0 + 1;

        goto label5;
    }

    public static void fill(byte[], byte)
    {
        byte[] r0;
        byte b0;
        int i1, $i2;

        r0 := @parameter0: byte[];

        b0 := @parameter1: byte;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        r0[i1] = b0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(byte[], int, int, byte)
    {
        byte[] r0;
        int i0, i1, i3, $i4;
        byte b2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        b2 := @parameter3: byte;

        $i4 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i4, i0, i1);

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        r0[i3] = b2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(char[], char)
    {
        char[] r0;
        char c0;
        int i1, $i2;

        r0 := @parameter0: char[];

        c0 := @parameter1: char;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        r0[i1] = c0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(char[], int, int, char)
    {
        char[] r0;
        int i0, i1, i3, $i4;
        char c2;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        c2 := @parameter3: char;

        $i4 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i4, i0, i1);

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        r0[i3] = c2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(double[], double)
    {
        double[] r0;
        double d0;
        int i0, $i1;

        r0 := @parameter0: double[];

        d0 := @parameter1: double;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        r0[i0] = d0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(double[], int, int, double)
    {
        double[] r0;
        int i0, i1, i2, $i3;
        double d0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        d0 := @parameter3: double;

        $i3 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i3, i0, i1);

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        r0[i2] = d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(float[], float)
    {
        float[] r0;
        float f0;
        int i0, $i1;

        r0 := @parameter0: float[];

        f0 := @parameter1: float;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        r0[i0] = f0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(float[], int, int, float)
    {
        float[] r0;
        int i0, i1, i2, $i3;
        float f0;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f0 := @parameter3: float;

        $i3 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i3, i0, i1);

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        r0[i2] = f0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(int[], int)
    {
        int[] r0;
        int i0, i1, $i2;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        r0[i1] = i0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i4 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i4, i0, i1);

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        r0[i3] = i2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(long[], int, int, long)
    {
        long[] r0;
        int i0, i1, i3, $i4;
        long l2;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l2 := @parameter3: long;

        $i4 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i4, i0, i1);

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        r0[i3] = l2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(long[], long)
    {
        long[] r0;
        long l0;
        int i1, $i2;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        r0[i1] = l0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(java.lang.Object[], int, int, java.lang.Object)
    {
        java.lang.Object[] r0;
        int i0, i1, i2, $i3;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.Object;

        $i3 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i3, i0, i1);

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        r0[i2] = r1;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] r0;
        java.lang.Object r1;
        int i0, $i1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        r0[i0] = r1;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(short[], int, int, short)
    {
        short[] r0;
        int i0, i1, i3, $i4;
        short s2;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        s2 := @parameter3: short;

        $i4 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i4, i0, i1);

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        r0[i3] = s2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(short[], short)
    {
        short[] r0;
        short s0;
        int i1, $i2;

        r0 := @parameter0: short[];

        s0 := @parameter1: short;

        i1 = 0;

     label1:
        $i2 = lengthof r0;

        if i1 >= $i2 goto label2;

        r0[i1] = s0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(boolean[], int, int, boolean)
    {
        boolean[] r0;
        int i0, i1, i2, $i3;
        boolean z0;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i3 = lengthof r0;

        staticinvoke <java.util.Arrays: void checkStartAndEnd(int,int,int)>($i3, i0, i1);

        i2 = i0;

     label1:
        if i2 >= i1 goto label2;

        r0[i2] = z0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(boolean[], boolean)
    {
        boolean[] r0;
        boolean z0;
        int i0, $i1;

        r0 := @parameter0: boolean[];

        z0 := @parameter1: boolean;

        i0 = 0;

     label1:
        $i1 = lengthof r0;

        if i0 >= $i1 goto label2;

        r0[i0] = z0;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public static int hashCode(byte[])
    {
        byte[] r0;
        int i0, i1, i2, $i3;
        byte $b4;

        r0 := @parameter0: byte[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $b4 = r0[i2];

        $i3 = i0 * 31;

        i0 = $b4 + $i3;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(char[])
    {
        char[] r0;
        int i0, i1, i2, $i3;
        char $c4;

        r0 := @parameter0: char[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $c4 = r0[i2];

        $i3 = i0 * 31;

        i0 = $c4 + $i3;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(double[])
    {
        double[] r0;
        int i0, i1, i2, $i6, $i7;
        long l3, $l4, $l5;
        double $d0;

        r0 := @parameter0: double[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $d0 = r0[i2];

        l3 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d0);

        $i7 = i0 * 31;

        $l4 = l3 >>> 32;

        $l5 = l3 ^ $l4;

        $i6 = (int) $l5;

        i0 = $i7 + $i6;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(float[])
    {
        float[] r0;
        int i0, i1, i2, $i3, $i4;
        float f0;

        r0 := @parameter0: float[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        f0 = r0[i2];

        $i3 = i0 * 31;

        $i4 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        i0 = $i3 + $i4;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(int[])
    {
        int[] r0;
        int i0, i1, i2, $i3, $i4;

        r0 := @parameter0: int[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $i4 = r0[i2];

        $i3 = i0 * 31;

        i0 = $i4 + $i3;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(long[])
    {
        long[] r0;
        int i0, i1, i2, $i6, $i7;
        long l3, $l4, $l5;

        r0 := @parameter0: long[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        l3 = r0[i2];

        $i7 = i0 * 31;

        $l4 = l3 >>> 32;

        $l5 = l3 ^ $l4;

        $i6 = (int) $l5;

        i0 = $i7 + $i6;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int i0, i1, i2, i3, $i4;
        java.lang.Object r1;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        r1 = r0[i2];

        if r1 != null goto label5;

        i3 = 0;

     label4:
        $i4 = i0 * 31;

        i0 = i3 + $i4;

        i2 = i2 + 1;

        goto label3;

     label5:
        i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        goto label4;
    }

    public static int hashCode(short[])
    {
        short[] r0;
        int i0, i1, i2, $i3;
        short $s4;

        r0 := @parameter0: short[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        $s4 = r0[i2];

        $i3 = i0 * 31;

        i0 = $s4 + $i3;

        i2 = i2 + 1;

        goto label3;
    }

    public static int hashCode(boolean[])
    {
        boolean[] r0;
        int i0, i1, i2, i3;
        boolean z0;
        short s4;

        r0 := @parameter0: boolean[];

        if r0 != null goto label2;

        i0 = 0;

     label1:
        return i0;

     label2:
        i0 = 1;

        i1 = lengthof r0;

        i2 = 0;

     label3:
        if i2 >= i1 goto label1;

        z0 = r0[i2];

        i3 = i0 * 31;

        if z0 == 0 goto label5;

        s4 = 1231;

     label4:
        i0 = i3 + s4;

        i2 = i2 + 1;

        goto label3;

     label5:
        s4 = 1237;

        goto label4;
    }

    public static void sort(byte[])
    {
        byte[] r0;

        r0 := @parameter0: byte[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(byte[])>(r0);

        return;
    }

    public static void sort(byte[], int, int)
    {
        byte[] r0;
        int i0, i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(byte[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(char[])
    {
        char[] r0;

        r0 := @parameter0: char[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(char[])>(r0);

        return;
    }

    public static void sort(char[], int, int)
    {
        char[] r0;
        int i0, i1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(char[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(double[])
    {
        double[] r0;

        r0 := @parameter0: double[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(double[])>(r0);

        return;
    }

    public static void sort(double[], int, int)
    {
        double[] r0;
        int i0, i1;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(double[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(float[])
    {
        float[] r0;

        r0 := @parameter0: float[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(float[])>(r0);

        return;
    }

    public static void sort(float[], int, int)
    {
        float[] r0;
        int i0, i1;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(float[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(int[])
    {
        int[] r0;

        r0 := @parameter0: int[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(int[])>(r0);

        return;
    }

    public static void sort(int[], int, int)
    {
        int[] r0;
        int i0, i1;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(int[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(long[])
    {
        long[] r0;

        r0 := @parameter0: long[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(long[])>(r0);

        return;
    }

    public static void sort(long[], int, int)
    {
        long[] r0;
        int i0, i1;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(long[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(java.lang.Object[])
    {
        java.lang.Object[] r0;

        r0 := @parameter0: java.lang.Object[];

        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[])>(r0);

        return;
    }

    public static void sort(java.lang.Object[], int, int)
    {
        java.lang.Object[] r0;
        int i0, i1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.ComparableTimSort: void sort(java.lang.Object[],int,int)>(r0, i0, i1);

        return;
    }

    public static void sort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        staticinvoke <java.util.TimSort: void sort(java.lang.Object[],int,int,java.util.Comparator)>(r0, i0, i1, r1);

        return;
    }

    public static void sort(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        staticinvoke <java.util.TimSort: void sort(java.lang.Object[],java.util.Comparator)>(r0, r1);

        return;
    }

    public static void sort(short[])
    {
        short[] r0;

        r0 := @parameter0: short[];

        staticinvoke <java.util.DualPivotQuicksort: void sort(short[])>(r0);

        return;
    }

    public static void sort(short[], int, int)
    {
        short[] r0;
        int i0, i1;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        staticinvoke <java.util.DualPivotQuicksort: void sort(short[],int,int)>(r0, i0, i1);

        return;
    }

    public static java.lang.String toString(byte[])
    {
        byte[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i5;
        byte $b4, $b6;
        java.lang.String $r6;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 6 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $b4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b4);

        i0 = 1;

     label3:
        $i5 = lengthof r0;

        if i0 >= $i5 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $b6 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(char[])
    {
        char[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i5;
        char $c4, $c6;
        java.lang.String $r6;

        r0 := @parameter0: char[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 3 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $c4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i0 = 1;

     label3:
        $i5 = lengthof r0;

        if i0 >= $i5 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $c6 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(double[])
    {
        double[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        double $d0, $d1;
        java.lang.String $r6;

        r0 := @parameter0: double[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 7 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $d0 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        i0 = 1;

     label3:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $d1 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(float[])
    {
        float[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        java.lang.String $r6;

        r0 := @parameter0: float[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 7 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $f0 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        i0 = 1;

     label3:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $f1 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(int[])
    {
        int[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r6;

        r0 := @parameter0: int[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 6 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $i4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        i0 = 1;

     label3:
        $i5 = lengthof r0;

        if i0 >= $i5 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i6 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(long[])
    {
        long[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i5;
        long $l4, $l6;
        java.lang.String $r6;

        r0 := @parameter0: long[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 6 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $l4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        i0 = 1;

     label3:
        $i5 = lengthof r0;

        if i0 >= $i5 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $l6 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r4, $r10;
        java.lang.String $r7;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 7 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        i0 = 1;

     label3:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String toString(short[])
    {
        short[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i5;
        short $s4, $s6;
        java.lang.String $r6;

        r0 := @parameter0: short[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 6 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $s4 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s4);

        i0 = 1;

     label3:
        $i5 = lengthof r0;

        if i0 >= $i5 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $s6 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s6);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String toString(boolean[])
    {
        boolean[] r0;
        java.lang.StringBuilder r1, $r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        java.lang.String $r6;

        r0 := @parameter0: boolean[];

        if r0 != null goto label1;

        return "null";

     label1:
        $i1 = lengthof r0;

        if $i1 != 0 goto label2;

        return "[]";

     label2:
        $r2 = new java.lang.StringBuilder;

        $i2 = lengthof r0;

        $i3 = 7 * $i2;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i3);

        r1 = $r2;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $z0 = r0[0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        i0 = 1;

     label3:
        $i4 = lengthof r0;

        if i0 >= $i4 goto label4;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $z1 = r0[i0];

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        i0 = i0 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
