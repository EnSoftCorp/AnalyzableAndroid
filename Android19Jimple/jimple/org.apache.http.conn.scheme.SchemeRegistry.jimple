public final class org.apache.http.conn.scheme.SchemeRegistry extends java.lang.Object
{
    private final java.util.Map registeredSchemes;

    public void <init>()
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.LinkedHashMap $r1;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes> = $r1;

        return;
    }

    public final org.apache.http.conn.scheme.Scheme get(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.String r1;
        org.apache.http.conn.scheme.Scheme r2;
        java.lang.Throwable r3, $r7;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r0;

        throw r3;

     label3:
        $r4 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (org.apache.http.conn.scheme.Scheme) $r5;

     label4:
        exitmonitor r0;

        return r2;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.String r1, $r9;
        java.lang.Throwable r2, $r10;
        org.apache.http.conn.scheme.Scheme r3;
        java.lang.IllegalStateException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r3 = virtualinvoke r0.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme get(java.lang.String)>(r1);

     label2:
        if r3 != null goto label5;

     label3:
        $r4 = new java.lang.IllegalStateException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scheme \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not registered.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label4:
        $r10 := @caughtexception;

        r2 = $r10;

        exitmonitor r0;

        throw r2;

     label5:
        exitmonitor r0;

        return r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
    }

    public final org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        org.apache.http.HttpHost r1;
        org.apache.http.conn.scheme.Scheme r2;
        java.lang.Throwable r3, $r6;
        java.lang.String $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: org.apache.http.HttpHost;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Host must not be null.");

        throw $r5;

     label2:
        $r6 := @caughtexception;

        r3 = $r6;

        exitmonitor r0;

        throw r3;

     label3:
        $r4 = virtualinvoke r1.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        r2 = virtualinvoke r0.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r4);

     label4:
        exitmonitor r0;

        return r2;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public final java.util.List getSchemeNames()
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.ArrayList r1, $r3;
        java.lang.Throwable r2, $r6;
        java.util.Map $r4;
        java.util.Set $r5;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        entermonitor r0;

     label1:
        $r3 = new java.util.ArrayList;

        $r4 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r5);

        r1 = $r3;

     label2:
        exitmonitor r0;

        return r1;

     label3:
        $r6 := @caughtexception;

        r2 = $r6;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final org.apache.http.conn.scheme.Scheme register(org.apache.http.conn.scheme.Scheme)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        org.apache.http.conn.scheme.Scheme r1, r2;
        java.lang.Throwable r3, $r8;
        java.util.Map $r4;
        java.lang.String $r5;
        java.lang.Object $r6;
        java.lang.IllegalArgumentException $r7;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: org.apache.http.conn.scheme.Scheme;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme must not be null.");

        throw $r7;

     label2:
        $r8 := @caughtexception;

        r3 = $r8;

        exitmonitor r0;

        throw r3;

     label3:
        $r4 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r5 = virtualinvoke r1.<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        r2 = (org.apache.http.conn.scheme.Scheme) $r6;

     label4:
        exitmonitor r0;

        return r2;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void setItems(java.util.Map)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.util.Map r1, $r3, $r4;
        java.lang.Throwable r2, $r5;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: java.util.Map;

        entermonitor r0;

        if r1 != null goto label2;

     label1:
        exitmonitor r0;

        return;

     label2:
        $r3 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>(r1);

     label3:
        goto label1;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        exitmonitor r0;

        throw r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public final org.apache.http.conn.scheme.Scheme unregister(java.lang.String)
    {
        org.apache.http.conn.scheme.SchemeRegistry r0;
        java.lang.String r1;
        org.apache.http.conn.scheme.Scheme r2;
        java.lang.Throwable r3, $r7;
        java.util.Map $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;

        r0 := @this: org.apache.http.conn.scheme.SchemeRegistry;

        r1 := @parameter0: java.lang.String;

        entermonitor r0;

        if r1 != null goto label3;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Name must not be null.");

        throw $r6;

     label2:
        $r7 := @caughtexception;

        r3 = $r7;

        exitmonitor r0;

        throw r3;

     label3:
        $r4 = r0.<org.apache.http.conn.scheme.SchemeRegistry: java.util.Map registeredSchemes>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r2 = (org.apache.http.conn.scheme.Scheme) $r5;

     label4:
        exitmonitor r0;

        return r2;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
